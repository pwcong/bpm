{"version":3,"sources":["webpack:///./node_modules/mxgraph/javascript/dist/build.js","webpack:///./node_modules/rc-util/es/createChainedFunction.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///./node_modules/@ant-design/icons/InfoCircleFilled.js","webpack:///./node_modules/@ant-design/icons/lib/icons/InfoCircleFilled.js","webpack:///./node_modules/@ant-design/icons-svg/lib/asn/InfoCircleFilled.js","webpack:///./node_modules/@ant-design/icons/CheckCircleFilled.js","webpack:///./node_modules/@ant-design/icons/lib/icons/CheckCircleFilled.js","webpack:///./node_modules/@ant-design/icons-svg/lib/asn/CheckCircleFilled.js","webpack:///./node_modules/@ant-design/icons/ExclamationCircleFilled.js","webpack:///./node_modules/@ant-design/icons/lib/icons/ExclamationCircleFilled.js","webpack:///./node_modules/@ant-design/icons-svg/lib/asn/ExclamationCircleFilled.js","webpack:///./node_modules/js-base64/base64.js","webpack:///./node_modules/rc-tooltip/es/placements.js","webpack:///./node_modules/rc-tooltip/es/Content.js","webpack:///./node_modules/rc-tooltip/es/Tooltip.js","webpack:///./node_modules/rc-tooltip/es/index.js","webpack:///./node_modules/antd/es/tooltip/placements.js","webpack:///./node_modules/antd/es/_util/colors.js","webpack:///./node_modules/antd/es/tooltip/index.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///./node_modules/rc-notification/es/Notice.js","webpack:///./node_modules/rc-notification/es/Notification.js","webpack:///./node_modules/rc-notification/es/useNotification.js","webpack:///./node_modules/rc-notification/es/index.js","webpack:///./node_modules/antd/es/message/index.js","webpack:///./node_modules/antd/es/_util/getRenderPropValue.js","webpack:///./node_modules/antd/es/popover/index.js"],"names":["opts","name","this","__mxOutput","mxClient","VERSION","IS_IE","navigator","userAgent","indexOf","IS_IE6","IS_IE11","match","IS_EDGE","IS_QUIRKS","document","documentMode","IS_EM","createElement","VML_PREFIX","OFFICE_PREFIX","IS_NS","IS_OP","IS_OT","IS_SF","test","window","HTMLElement","safari","pushNotification","toString","IS_ANDROID","appVersion","IS_IOS","platform","IOS_VERSION","v","length","parseInt","IS_GC","vendor","IS_CHROMEAPP","chrome","app","runtime","IS_FF","InstallTrigger","IS_MT","IS_VML","appName","toUpperCase","IS_SVG","NO_FO","createElementNS","IS_WIN","IS_MAC","IS_CHROMEOS","IS_TOUCH","documentElement","IS_POINTER","PointerEvent","IS_LOCAL","location","href","defaultBundles","isBrowserSupported","link","rel","doc","id","write","setAttribute","getElementsByTagName","appendChild","loadResources","fn","lan","pending","callback","i","mxResources","add","include","src","node","IOS","mxLoadResources","mxForceIncludes","mxResourceExtension","mxLoadStylesheets","mxBasePath","substring","basePath","mxImageBasePath","imageBasePath","mxLanguage","language","userLanguage","mxDefaultLanguage","defaultLanguage","mxLanguages","languages","namespaces","styleSheets","type","styleSheet","cssText","createStyleSheet","module","exports","undefined","mxLog","consoleName","TRACE","DEBUG","WARN","buffer","init","body","title","table","tbody","tr","td","style","verticalAlign","textarea","height","resize","value","compatMode","width","addButton","evt","info","content","mxUtils","getInnerHtml","debug","copy","err","alert","popup","h","w","innerHeight","innerWidth","clientHeight","clientWidth","mxWindow","Math","max","setMaximizable","setScrollable","setResizable","setClosable","destroyOnClose","elt","getElement","resizeHandler","sender","offsetHeight","addListener","mxEvent","RESIZE_END","MAXIMIZE","NORMALIZE","writeln","lab","funct","button","isVisible","show","setVisible","visible","enter","string","Date","getTime","leave","t0","dt","apply","arguments","warn","visibility","scrollTop","scrollHeight","mxObjectIdentity","FIELD_NAME","counter","get","obj","ctor","getFunctionName","constructor","clear","mxDictionary","prototype","map","key","put","previous","remove","getKeys","result","push","getValues","visit","visitor","resources","extension","resourcesEncoded","loadDefaultBundle","loadSpecialBundle","isLanguageSupported","getDefaultBundle","basename","getSpecialBundle","dash","toLowerCase","mxConstants","NONE","defaultBundle","specialBundle","req","parse","getText","load","isReady","e","text","lines","split","charAt","index","idx","charCodeAt","replace","unescape","params","defaultValue","replacePlaceholders","c","join","mxPoint","x","y","mxRectangle","call","equals","clone","setRect","getCenterX","getCenterY","rect","minX","min","minY","maxX","maxY","intersect","r1","r2","b1","b2","grow","amount","getPoint","rotate90","t","tmp","fromRectangle","mxEffects","animateChanges","graph","changes","done","step","animate","isRequired","change","mxGeometryChange","mxTerminalChange","mxValueChange","mxChildChange","mxStyleChange","state","getView","getState","cell","child","model","isEdge","setOpacity","shape","scale","dx","geometry","dy","sx","sy","cellRenderer","redraw","cascadeOpacity","setTimeout","delay","opacity","childCount","getChildCount","getChildAt","childState","edges","getEdges","edgeState","fadeOut","from","isEnabled","f","parentNode","removeChild","errorResource","closeResource","errorImage","removeCursors","element","cursor","children","childNodes","getCurrentStyle","currentStyle","getComputedStyle","parseCssNumber","parseFloat","isNaN","setPrefixedStyle","prefix","hasScrollbars","overflow","bind","scope","eval","expr","_mxJavaScriptExpression","message","findNode","attr","nodeType","NODETYPE_ELEMENT","getAttribute","firstChild","nextSibling","str","trim","idx2","ltrim","array","forEach","splice","isNode","nodeName","attributeName","attributeValue","isAncestorNode","ancestor","parent","getChildNodes","importNode","allChildren","importNodeImplementation","newNode","attributes","createTextNode","nodeValue","createXmlDocument","implementation","createDocument","createMsXmlDocument","ActiveXObject","async","validateOnParse","resolveExternals","parseXml","DOMParser","xml","parseFromString","loadXML","clearSelection","selection","empty","getSelection","removeAllRanges","removeWhitespace","before","previousSibling","NODETYPE_TEXT","next","getTextContent","htmlEntities","s","newline","String","isVml","tagUrn","getXml","linefeed","getPrettyXml","XMLSerializer","serializeToString","tab","indent","ns","namespaceURI","NODETYPE_DOCUMENT","NODETYPE_DOCUMENT_FRAGMENT","NODETYPE_COMMENT","attrs","val","extractTextWithWhitespace","elems","blocks","ret","doExtract","elts","innerHTML","elem","replaceTrailingNewlines","pattern","postfix","innerText","textContent","setTextContent","getOuterHtml","outerHTML","ownerDocument","br","count","label","para","p","addTransparentBackgroundFilter","filter","linkAction","editor","action","pad","execute","linkInvoke","functName","arg","a","color","textDecoration","paddingLeft","getDocumentSize","b","d","fit","ds","left","offsetLeft","offsetWidth","offset","getDocumentScrollOrigin","sl","st","right","top","offsetTop","bottom","url","mxXmlRequest","send","onload","onerror","binary","timeout","ontimeout","headers","setRequestHeaders","request","setRequestHeader","setBinary","getAll","urls","remain","errors","status","getStatus","post","submit","target","simulate","loadInto","onreadystatechange","readyState","addEventListener","getValue","getNumber","Number","getColor","transients","shallow","equalPoints","equalEntries","removeDuplicates","arr","dict","extend","superCtor","output","toRadians","deg","PI","toDegree","rad","arcToCurves","x0","y0","angle","largeArcFlag","sweepFlag","fS","psai","abs","sds","ctx","cty","cpsi","cos","spsi","sin","rxd","ryd","rxdd","rydd","r1x","r2y","lamda","sqrt","seif","txd","tyd","tx","ty","atan2","s1","dr","sse","seg","ceil","segr","cpsir1","cpsir2","spsir1","spsir2","mc","ms","x2","y2","x3","y3","n","getBoundingBox","rotation","cx","p1","p2","p3","p4","getRotatedPoint","pt","y1","getPortConstraints","terminal","edge","source","STYLE_PORT_CONSTRAINT","STYLE_SOURCE_PORT_CONSTRAINT","STYLE_TARGET_PORT_CONSTRAINT","directions","returnValue","DIRECTION_MASK_NONE","STYLE_PORT_CONSTRAINT_ROTATION","STYLE_ROTATION","quad","DIRECTION_NORTH","DIRECTION_MASK_NORTH","DIRECTION_MASK_EAST","DIRECTION_MASK_SOUTH","DIRECTION_MASK_WEST","DIRECTION_WEST","DIRECTION_SOUTH","DIRECTION_EAST","reversePortConstraints","constraint","findNearestSegment","absolutePoints","last","current","dist","ptSegDistSq","getDirectedBounds","m","flipH","flipV","STYLE_DIRECTION","STYLE_FLIPH","STYLE_FLIPV","round","m2","getPerimeterPoint","pts","center","point","intersection","ip","distSq","rectangleIntersectsSegment","bounds","contains","intersects","tw","th","rw","rh","rx","ry","intersectsHotspot","hotspot","cy","start","STYLE_STARTSIZE","view","STYLE_HORIZONTAL","alpha","getOffset","container","scrollOffset","fixed","position","r","getBoundingClientRect","scrollLeft","wnd","defaultView","parentWindow","pageXOffset","pageYOffset","getScrollOrigin","includeAncestors","includeDocument","origin","convertPoint","chars","RegExp","rtrim","isNumeric","isFinite","isInteger","mod","x1","denom","ua","ub","px","py","projlenSq","dotprod","lenSq","ptLineDist","relativeCcw","ccw","createImage","imageNode","borderStyle","sortCells","cells","ascending","lookup","sort","o1","o2","mxCellPath","create","PATH_SEPARATOR","comp","compare","getStylename","stylename","getStylenames","pairs","indexOfStylename","tokens","pos","addStylename","removeStylename","removeAllStylenames","setCellStyles","beginUpdate","setStyle","getStyle","endUpdate","isValue","sep","setCellStyleFlags","flag","setStyleFlag","cont","getAlignmentAsPoint","align","valign","ALIGN_LEFT","ALIGN_RIGHT","ALIGN_TOP","ALIGN_BOTTOM","getSizeForString","fontSize","fontFamily","textWidth","fontStyle","DEFAULT_FONTSIZE","DEFAULT_FONTFAMILY","div","lineHeight","LINE_HEIGHT","FONT_BOLD","fontWeight","FONT_ITALIC","txtDecor","FONT_UNDERLINE","FONT_STRIKETHROUGH","display","zoom","whiteSpace","size","getViewXml","getModel","getRoot","eventsEnabled","isEventsEnabled","setEventsEnabled","drawPane","overlayPane","dialect","DIALECT_SVG","NS_SVG","canvas","cloneNode","translate","getTranslate","temp","mxTemporaryCellStates","mxCodec","encode","destroy","getScaleForPageCount","pageCount","pageFormat","border","availablePageWidth","PAGE_FORMAT_A4_PORTRAIT","availablePageHeight","graphBounds","getGraphBounds","sc","getScale","graphWidth","pagesAspectRatio","pageRoot","pagesAspectRatioSqrt","numRowPages","numColumnPages","scaleChange","currentTotalPages","numLoops","roundRowDownProportion","floor","roundColumnDownProportion","open","html","base","close","links","styles","outer","svg","ownerSVGElement","minWidth","minHeight","printScreen","print","focus","isInternalWindow","pre","prompt","confirm","error","icon","padding","img","makeDraggable","graphF","dragElement","autoscroll","scalePreview","highlightDropTargets","getDropTarget","dragSource","mxDragSource","dragOffset","TOOLTIP_VERTICAL_OFFSET","setGuidesEnabled","getGraphForEvent","createDragElement","createPreviewElement","DEFAULT_HOTSPOT","MIN_HOTSPOT_SIZE","MAX_HOTSPOT_SIZE","RENDERING_HINT_EXACT","RENDERING_HINT_FASTER","RENDERING_HINT_FASTEST","DIALECT_VML","DIALECT_MIXEDHTML","DIALECT_PREFERHTML","DIALECT_STRICTHTML","NS_XHTML","NS_XLINK","SHADOWCOLOR","VML_SHADOWCOLOR","SHADOW_OFFSET_X","SHADOW_OFFSET_Y","SHADOW_OPACITY","NODETYPE_ATTRIBUTE","NODETYPE_CDATA","NODETYPE_ENTITY_REFERENCE","NODETYPE_ENTITY","NODETYPE_PROCESSING_INSTRUCTION","NODETYPE_DOCUMENTTYPE","NODETYPE_NOTATION","DEFAULT_VALID_COLOR","DEFAULT_INVALID_COLOR","OUTLINE_HIGHLIGHT_COLOR","OUTLINE_HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_SIZE","HIGHLIGHT_OPACITY","CURSOR_MOVABLE_VERTEX","CURSOR_MOVABLE_EDGE","CURSOR_LABEL_HANDLE","CURSOR_TERMINAL_HANDLE","CURSOR_BEND_HANDLE","CURSOR_VIRTUAL_BEND_HANDLE","CURSOR_CONNECT","HIGHLIGHT_COLOR","CONNECT_TARGET_COLOR","INVALID_CONNECT_TARGET_COLOR","DROP_TARGET_COLOR","VALID_COLOR","INVALID_COLOR","EDGE_SELECTION_COLOR","VERTEX_SELECTION_COLOR","VERTEX_SELECTION_STROKEWIDTH","EDGE_SELECTION_STROKEWIDTH","VERTEX_SELECTION_DASHED","EDGE_SELECTION_DASHED","GUIDE_COLOR","GUIDE_STROKEWIDTH","OUTLINE_COLOR","OUTLINE_STROKEWIDTH","HANDLE_SIZE","LABEL_HANDLE_SIZE","HANDLE_FILLCOLOR","HANDLE_STROKECOLOR","LABEL_HANDLE_FILLCOLOR","CONNECT_HANDLE_FILLCOLOR","LOCKED_HANDLE_FILLCOLOR","OUTLINE_HANDLE_FILLCOLOR","OUTLINE_HANDLE_STROKECOLOR","DEFAULT_TEXT_DIRECTION","WORD_WRAP","ABSOLUTE_LINE_HEIGHT","DEFAULT_FONTSTYLE","DEFAULT_STARTSIZE","DEFAULT_MARKERSIZE","DEFAULT_IMAGESIZE","ENTITY_SEGMENT","RECTANGLE_ROUNDING_FACTOR","LINE_ARCSIZE","ARROW_SPACING","ARROW_WIDTH","ARROW_SIZE","PAGE_FORMAT_A4_LANDSCAPE","PAGE_FORMAT_LETTER_PORTRAIT","PAGE_FORMAT_LETTER_LANDSCAPE","STYLE_PERIMETER","STYLE_SOURCE_PORT","STYLE_TARGET_PORT","STYLE_OPACITY","STYLE_FILL_OPACITY","STYLE_STROKE_OPACITY","STYLE_TEXT_OPACITY","STYLE_TEXT_DIRECTION","STYLE_OVERFLOW","STYLE_ORTHOGONAL","STYLE_EXIT_X","STYLE_EXIT_Y","STYLE_EXIT_DX","STYLE_EXIT_DY","STYLE_EXIT_PERIMETER","STYLE_ENTRY_X","STYLE_ENTRY_Y","STYLE_ENTRY_DX","STYLE_ENTRY_DY","STYLE_ENTRY_PERIMETER","STYLE_WHITE_SPACE","STYLE_FILLCOLOR","STYLE_POINTER_EVENTS","STYLE_SWIMLANE_FILLCOLOR","STYLE_MARGIN","STYLE_GRADIENTCOLOR","STYLE_GRADIENT_DIRECTION","STYLE_STROKECOLOR","STYLE_SEPARATORCOLOR","STYLE_STROKEWIDTH","STYLE_ALIGN","STYLE_VERTICAL_ALIGN","STYLE_LABEL_WIDTH","STYLE_LABEL_POSITION","STYLE_VERTICAL_LABEL_POSITION","STYLE_IMAGE_ASPECT","STYLE_IMAGE_ALIGN","STYLE_IMAGE_VERTICAL_ALIGN","STYLE_GLASS","STYLE_IMAGE","STYLE_IMAGE_WIDTH","STYLE_IMAGE_HEIGHT","STYLE_IMAGE_BACKGROUND","STYLE_IMAGE_BORDER","STYLE_NOLABEL","STYLE_NOEDGESTYLE","STYLE_LABEL_BACKGROUNDCOLOR","STYLE_LABEL_BORDERCOLOR","STYLE_LABEL_PADDING","STYLE_INDICATOR_SHAPE","STYLE_INDICATOR_IMAGE","STYLE_INDICATOR_COLOR","STYLE_INDICATOR_STROKECOLOR","STYLE_INDICATOR_GRADIENTCOLOR","STYLE_INDICATOR_SPACING","STYLE_INDICATOR_WIDTH","STYLE_INDICATOR_HEIGHT","STYLE_INDICATOR_DIRECTION","STYLE_SHADOW","STYLE_SEGMENT","STYLE_ENDARROW","STYLE_STARTARROW","STYLE_ENDSIZE","STYLE_SWIMLANE_LINE","STYLE_ENDFILL","STYLE_STARTFILL","STYLE_DASHED","STYLE_DASH_PATTERN","STYLE_FIX_DASH","STYLE_ROUNDED","STYLE_CURVED","STYLE_ARCSIZE","STYLE_ABSOLUTE_ARCSIZE","STYLE_SOURCE_PERIMETER_SPACING","STYLE_TARGET_PERIMETER_SPACING","STYLE_PERIMETER_SPACING","STYLE_SPACING","STYLE_SPACING_TOP","STYLE_SPACING_LEFT","STYLE_SPACING_BOTTOM","STYLE_SPACING_RIGHT","STYLE_ANCHOR_POINT_DIRECTION","STYLE_ELBOW","STYLE_FONTCOLOR","STYLE_FONTFAMILY","STYLE_FONTSIZE","STYLE_FONTSTYLE","STYLE_ASPECT","STYLE_AUTOSIZE","STYLE_FOLDABLE","STYLE_EDITABLE","STYLE_BACKGROUND_OUTLINE","STYLE_BENDABLE","STYLE_MOVABLE","STYLE_RESIZABLE","STYLE_RESIZE_WIDTH","STYLE_RESIZE_HEIGHT","STYLE_ROTATABLE","STYLE_CLONEABLE","STYLE_DELETABLE","STYLE_SHAPE","STYLE_EDGE","STYLE_JETTY_SIZE","STYLE_SOURCE_JETTY_SIZE","STYLE_TARGET_JETTY_SIZE","STYLE_LOOP","STYLE_ORTHOGONAL_LOOP","STYLE_ROUTING_CENTER_X","STYLE_ROUTING_CENTER_Y","SHAPE_RECTANGLE","SHAPE_ELLIPSE","SHAPE_DOUBLE_ELLIPSE","SHAPE_RHOMBUS","SHAPE_LINE","SHAPE_IMAGE","SHAPE_ARROW","SHAPE_ARROW_CONNECTOR","SHAPE_LABEL","SHAPE_CYLINDER","SHAPE_SWIMLANE","SHAPE_CONNECTOR","SHAPE_ACTOR","SHAPE_CLOUD","SHAPE_TRIANGLE","SHAPE_HEXAGON","ARROW_CLASSIC","ARROW_CLASSIC_THIN","ARROW_BLOCK","ARROW_BLOCK_THIN","ARROW_OPEN","ARROW_OPEN_THIN","ARROW_OVAL","ARROW_DIAMOND","ARROW_DIAMOND_THIN","ALIGN_CENTER","ALIGN_MIDDLE","TEXT_DIRECTION_DEFAULT","TEXT_DIRECTION_AUTO","TEXT_DIRECTION_LTR","TEXT_DIRECTION_RTL","DIRECTION_MASK_ALL","ELBOW_VERTICAL","ELBOW_HORIZONTAL","EDGESTYLE_ELBOW","EDGESTYLE_ENTITY_RELATION","EDGESTYLE_LOOP","EDGESTYLE_SIDETOSIDE","EDGESTYLE_TOPTOBOTTOM","EDGESTYLE_ORTHOGONAL","EDGESTYLE_SEGMENT","PERIMETER_ELLIPSE","PERIMETER_RECTANGLE","PERIMETER_RHOMBUS","PERIMETER_HEXAGON","PERIMETER_TRIANGLE","mxEventObject","properties","mxMouseEvent","sourceState","mxEventSource","eventSource","setEventSource","consumed","getName","getProperties","getProperty","isConsumed","consume","graphX","graphY","getEvent","getSource","isSource","getX","getClientX","getY","getClientY","getGraphX","getGraphY","getCell","isPopupTrigger","preventDefault","touches","isMouseEvent","eventListeners","getEventSource","removeListener","fireEvent","args","listen","updateListenerList","eventName","mxListenerList","entry","attachEvent","updateListener","listenerCount","removeEventListener","detachEvent","removeAllListeners","list","addGestureListeners","startListener","moveListener","endListener","removeGestureListeners","redirectMouseEvents","down","move","up","dblClick","fireMouseEvent","MOUSE_DOWN","MOUSE_MOVE","MOUSE_UP","release","addMouseWheelListener","diff","event","ctrlKey","deltaY","deltaX","disableContextMenu","srcElement","isTouchEvent","pointerType","MSPOINTER_TYPE_TOUCH","mozInputSource","isPenEvent","MSPOINTER_TYPE_PEN","isMultiTouchEvent","MSPOINTER_TYPE_MOUSE","isLeftMouseButton","which","buttons","isMiddleMouseButton","isRightMouseButton","isControlDown","isShiftDown","isMetaDown","isAltDown","shiftKey","altKey","metaKey","getMainEvent","changedTouches","clientX","clientY","stopPropagation","cancelBubble","LABEL_HANDLE","ROTATION_HANDLE","CUSTOM_HANDLE","VIRTUAL_HANDLE","ACTIVATE","RESIZE_START","RESIZE","MOVE_START","MOVE","MOVE_END","PAN_START","PAN","PAN_END","MINIMIZE","HIDE","SHOW","CLOSE","DESTROY","REFRESH","SIZE","SELECT","FIRED","FIRE_MOUSE_EVENT","GESTURE","TAP_AND_HOLD","GET","RECEIVE","CONNECT","DISCONNECT","SUSPEND","RESUME","MARK","ROOT","POST","OPEN","SAVE","BEFORE_ADD_VERTEX","ADD_VERTEX","AFTER_ADD_VERTEX","DONE","EXECUTE","EXECUTED","BEGIN_UPDATE","START_EDIT","END_UPDATE","END_EDIT","BEFORE_UNDO","UNDO","REDO","CHANGE","NOTIFY","LAYOUT_CELLS","CLICK","SCALE","TRANSLATE","SCALE_AND_TRANSLATE","UP","DOWN","ADD","REMOVE","CLEAR","ADD_CELLS","CELLS_ADDED","MOVE_CELLS","CELLS_MOVED","RESIZE_CELLS","CELLS_RESIZED","TOGGLE_CELLS","CELLS_TOGGLED","ORDER_CELLS","CELLS_ORDERED","REMOVE_CELLS","CELLS_REMOVED","GROUP_CELLS","UNGROUP_CELLS","REMOVE_CELLS_FROM_PARENT","FOLD_CELLS","CELLS_FOLDED","ALIGN_CELLS","LABEL_CHANGED","CONNECT_CELL","CELL_CONNECTED","SPLIT_EDGE","FLIP_EDGE","START_EDITING","EDITING_STARTED","EDITING_STOPPED","ADD_OVERLAY","REMOVE_OVERLAY","UPDATE_CELL_SIZE","ESCAPE","DOUBLE_CLICK","START","RESET","method","username","password","withCredentials","decodeSimulateValues","isBinary","responseText","getDocumentElement","responseXML","XMLHttpRequest","overrideMimeType","old","onbeforeunload","form","pars","decodeURIComponent","mxClipboard","STEPSIZE","insertCount","setCells","getCells","isEmpty","cut","removeCells","getSelectionCells","getExportableCells","getTopmostCells","cloneCells","paste","getImportableCells","delta","getDefaultParent","importCells","setSelectionCells","minimizable","movable","replaceNode","installMaximizeHandler","installMinimizeHandler","installCloseHandler","setMinimizable","setTitle","installMoveHandler","replaceChild","mxForm","className","mxImage","mxDivResizer","resizeWidth","resizeHeight","handlingResize","dropHandler","mouseDown","eventConsumer","evtName","me","mxToolbar","mxUndoableEdit","significant","mxUndoManager","closeImage","minimizeImage","normalizeImage","maximizeImage","resizeImage","minimumSize","contentHeightCorrection","touchAction","contentWrapper","activator","activate","hide","scrollable","activeWindow","zIndex","previousWindow","isResizable","resizable","startX","startY","dragHandler","setSize","minimize","getMinimumSize","marginLeft","minimized","maxDisplay","maximize","minSize","maximizable","maximized","minDisplay","docHeight","setLocation","closeImg","setImage","image","marginRight","marginTop","insertBefore","closable","getTable","addButtons","okFunct","cancelFunct","addText","input","addField","addCheckbox","checked","addTextarea","rows","addCombo","isMultiSelect","select","addOption","combo","isSelected","option","getDocumentWidth","getDocumentHeight","l","previewElement","enabled","currentGraph","currentDropTarget","currentPoint","currentGuide","currentHighlight","guidesEnabled","gridEnabled","dragElementZIndex","dragElementOpacity","checkEventSource","setEnabled","isGuidesEnabled","isGridEnabled","setGridEnabled","getCellAt","isActive","mouseMoveHandler","reset","dragExit","removeDragElement","removeListeners","stopDrag","startDrag","mouseMove","mouseUpHandler","mouseUp","pointerEvents","getElementForEvent","elementFromPoint","graphContainsEvent","dragEnter","dragOver","drop","isMouseDown","isMouseTrigger","mxGuide","graphHandler","getGuideStates","mxCellHighlight","panDx","panDy","autoScroll","scrollPointToVisible","autoExtend","isDropEnabled","highlight","isGridEnabledEvent","hideGuide","isEnabledForEvent","off","gridSize","snap","previewOffset","dropTarget","noReset","updateDefaultMode","addItem","pressedIcon","factoryMethod","initialClassName","mouseHandler","backgroundColor","menu","mxPopupMenu","currentImg","isMenuShowing","hideMenu","addActionCombo","options","selectedIndex","addSwitchMode","altIcon","selectedMode","defaultMode","selectMode","addMode","toggle","defaultFunction","domNode","resetMode","forced","addSeparator","addBreak","addLine","hr","undone","redone","isSignificant","notify","die","undo","redo","history","indexOfNextAdd","canUndo","edit","canRedo","undoableEditHappened","undoableEdit","shift","edits","mxUrlConverter","mxPanningManager","thread","active","tdx","tdy","t0x","t0y","scrollbars","mouseListener","stop","addMouseListener","mouseUpListener","createThread","setInterval","panGraph","getDx","getDy","panTo","handleMouseOut","damper","clearInterval","setTranslate","removeMouseListener","mxAutoSaveManager","changeHandler","graphModelChanged","setGraph","mxAnimation","mxMorphing","steps","ease","mxImageBundle","alt","images","mxImageExport","mxAbstractCanvas2D","converter","createUrlConverter","mxXmlCanvas2D","root","writeDefaults","mxSvgCanvas2D","styleEnabled","gradients","defs","createStyle","baseUrl","baseDomain","updateBaseUrl","protocol","host","pathname","lastIndexOf","getBaseUrl","setBaseUrl","getBaseDomain","setBaseDomain","isRelativeUrl","convert","submenuImage","useLeftButtonForPopup","itemCount","autoExpand","smartSeparators","labels","iconCls","willAddSeparator","containsItems","col1","col2","col3","paddingRight","textAlign","createSubmenu","currentSelection","eventReceiver","activeRow","hideSubmenu","showSubmenu","createRange","addCheckmark","item","backgroundImage","backgroundRepeat","backgroundPosition","row","force","showMenu","autoSaveDelay","autoSaveThrottle","autoSaveThreshold","ignoredChanges","lastSnapshot","save","isRunning","startAnimation","updateAnimation","stopAnimation","mxCellStatePreview","animateCell","recurse","getDelta","isVertex","moveState","stopRecursion","getOriginForCell","getParent","geo","getCellGeometry","relative","pgeo","putImage","fallback","getImage","includeOverlays","drawState","visitStatesRecursive","drawCellState","drawOverlays","getLinkForCellState","setLink","drawShape","drawText","mxShape","checkBounds","paint","restore","overlays","states","path","rotateHtml","lastX","lastY","moveOp","lineOp","quadOp","curveOp","closeOp","createState","fillAlpha","strokeAlpha","fillColor","gradientFillAlpha","gradientColor","gradientAlpha","gradientDirection","strokeColor","strokeWidth","dashed","dashPattern","fixDash","lineCap","lineJoin","miterLimit","fontColor","fontBackgroundColor","fontBorderColor","shadow","shadowColor","shadowAlpha","shadowDx","shadowDy","rotationCx","rotationCy","format","addOp","rotatePoint","theta","pop","rotate","setAlpha","setFillAlpha","setStrokeAlpha","setFillColor","setGradient","color1","color2","direction","alpha1","alpha2","setStrokeColor","setStrokeWidth","setDashed","setDashPattern","setLineCap","setLineJoin","setMiterLimit","setFontColor","setFontBackgroundColor","setFontBorderColor","setFontSize","setFontFamily","setFontStyle","setShadow","setShadowColor","setShadowAlpha","setShadowOffset","begin","moveTo","lineTo","quadTo","curveTo","arcTo","curves","end","textEnabled","compressed","toFixed","roundrect","ellipse","aspect","wrap","clip","dir","stroke","fill","fillAndStroke","useDomParser","matchHtmlAlignment","foEnabled","foAltText","foOffset","textOffset","imageOffset","strokeTolerance","minStrokeWidth","refCount","lineHeightCorrection","pointerEventsValue","fontMetricsPadding","cacheOffsetSize","hash","tagName","namespace","getAlternateText","fo","createAlternateContent","anchor","createGradientId","getSvgGradient","gradient","tmpId","getElementById","createSvgGradient","op","addNode","filled","stroked","updateFill","updateStroke","transform","createShadow","createTolerance","originalRoot","getCurrentStrokeWidth","sw","updateStrokeAttributes","createDashPattern","pat","tol","removeAttribute","setAttributeNS","convertHtml","xd","xb","adoptNode","ta","createDiv","div2","div3","updateText","updateTextNodes","addForeignObject","group","g","createCss","getTextCss","flex","block","box","yp","bg","ofl","fw","fh","bgc","lh","css","deco","plainText","createClip","updateFont","textHeight","addTextBackground","bbox","getBBox","ie","mxVmlCanvas2D","setStates","stencil","initStyles","mxStencil","desc","parseDescription","parseConstraints","rotatedHtmlBackground","vmlScale","createVmlElement","coordsize","strokeweight","strokecolor","createStroke","createFill","createTransparentFill","flip","endcap","joinstyle","miterlimit","dashstyle","getVmlDashStyle","tok","createShadowStroke","createShadowFill","cpx0","cpy0","qpx1","qpy1","cpx3","cpy3","cpx1","cpy1","cpx2","cpy2","createRect","margin","inner","wordWrap","rot","maxHeight","real_cos","real_sin","sizeDiv","oh","top_fix","left_fix","divParent","textpathok","tp","on","horizontal","vertical","guideX","guideY","rounded","tolerance","getGuideTolerance","createGuideShape","guide","mxPolyline","isDashed","isStateIgnored","tt","overrideX","stateX","valueX","overrideY","stateY","valueY","ttX","ttY","middle","snapX","centerAlign","override","getOverlayPane","snapY","snapDelta","points","getGuideColor","scrollWidth","antiAlias","minSvgStrokeWidth","boundingBox","svgStrokeTolerance","svgPointerEvents","shapePointerEvents","stencilPointerEvents","outline","useSvgBoundingBox","strokewidth","fillOpacity","strokeOpacity","isParseVml","isHtmlAllowed","getSvgScreenOffset","createSvg","createHtml","createVml","reconfigure","updateBoundsFromPoints","redrawShape","redrawHtmlShape","updateBoundingBox","lastChild","getLabelBounds","isPaintBoundsInverted","getLabelMargins","createVmlGroup","createCanvas","insertAdjacentHTML","destroyCanvas","createSvgCanvas","updateVmlContainer","createVmlCanvas","updateHtmlBounds","updateHtmlFilters","updateHtmlColors","isShadow","east","south","west","north","borderColor","borderWidth","setTransparentBackgroundImage","mxRefCount","releaseSvgGradients","oldGradients","strokeDrawn","updateTransform","configureCanvas","bb","createBoundingBox","createTransparentSvgRectangle","paintEdgeShape","paintVertexShape","getGradientBounds","getShapeRotation","paintBackground","paintForeground","getArcSize","paintGlassEffect","arc","isRounded","addPoints","arcSize","exclude","initialMove","pe","p0","slice","wp","nx1","ny1","nx2","ny2","resetStyles","spacing","startSize","endSize","startArrow","endArrow","glass","setCursor","getCursor","isRoundable","augmentBoundingBox","getRotation","getTextRotation","mxText","verticalTextRotation","grads","defaultLocalized","allowEval","constraints","w0","h0","bgNode","fgNode","conns","parseConstraint","perimeter","mxConnectionConstraint","evaluateTextAttribute","attribute","evaluateAttribute","loc","stack","computeAspect","minScale","drawChildren","disableShadow","drawNode","inverse","parseRegularly","pointCount","segs","childNode","childName","ps","arcsize","factor","mxStencilRegistry","getStencil","stencils","addStencil","mxMarker","markers","addMarker","createMarker","unitX","unitY","mxActor","mxCloud","mxRectangleShape","mxEllipse","mxDoubleEllipse","mxRhombus","mxArrow","arrowWidth","mxArrowConnector","arrowSpacing","family","spacingTop","spacingRight","spacingBottom","spacingLeft","background","clipped","labelPadding","textDirection","updateMargin","mxTriangle","mxHexagon","mxLine","mxImageShape","mxLabel","mxCylinder","mxConnector","mxSwimlane","mxGraphLayout","WeightedCellSorter","weightedValue","mxStackLayout","mxPartitionLayout","mxCompactTreeLayout","invert","mxRadialTreeLayout","mxFastOrganicLayout","mxCircleLayout","radius","mxParallelEdgeLayout","mxCompositeLayout","layouts","master","mxEdgeLabelLayout","mxGraphAbstractHierarchyCell","mxGraphHierarchyNode","connectsAsTarget","connectsAsSource","mxGraphHierarchyEdge","ids","mxGraphHierarchyModel","layout","vertices","roots","tightenToSource","getGraph","vertexMapper","edgeMapper","maxRank","internalVertices","getChildVertices","SOURCESCANSTARTRANK","createInternalCells","j","internalEdge","realEdges","realEdge","targetCell","getVisibleTerminal","internalTargetCell","mxSwimlaneModel","mxHierarchicalLayoutStage","mxMedianHybridCrossingReduction","MedianCellSorter","mxMinimumCycleRemover","mxCoordinateAssignment","intraCellSpacing","interRankCellSpacing","orientation","initialX","parallelEdgeSpacing","mxSwimlaneOrdering","mxHierarchicalLayout","deterministic","createArrow","widthFactor","endOffsetX","endOffsetY","createOpenArrow","diamond","swFactor","tk","redrawPath","events","hw","hh","prev","paintLine","paintCurvedLine","ix","iy","arrow","nx","ny","basex","basey","floorx","floory","p0x","p0y","p1x","p1y","p2x","p2y","p3x","p3y","p5x","p5y","getEdgeWidth","isMarkerStart","getStartArrowWidth","isMarkerEnd","getEndArrowWidth","startWidth","endWidth","edgeWidth","openEnded","isOpenEnded","markerStart","markerEnd","isArrowRounded","i0","orthx","orthy","fns","startNx","startNy","paintMarker","outStartX","outStartY","inEndX","inEndY","dx1","dy1","dist1","tmp1","dist2","strokeWidthFactor","angleFactor","outX","outY","inX","inY","c1x","c1y","c2x","c2y","inStartX","inStartY","ptX","ptY","widthArrowRatio","spaceX","spaceY","baseSpacingTop","baseSpacingBottom","baseSpacingLeft","baseSpacingRight","replaceLinefeeds","ignoreClippedStringSize","ignoreStringSize","textWidthPadding","lastValue","cacheEnabled","update","realHtml","fmt","getAutoDirection","redrawHtmlShapeWithCss3","updateSize","textDiv","updateHtmlFilter","updateHtmlTransform","exec","getContentNode","ow","updateInnerHtml","divs","unrotatedBoundingBox","getHtmlValue","updateValue","bd","enableWrap","maxWidth","getSpacing","mid","preserveImageAspect","useVml","imageSize","indicatorSize","indicatorSpacing","indicatorShape","indicator","indicatorColor","indicatorStrokeColor","indicatorGradientColor","indicatorDirection","paintImage","paintIndicator","getImageBounds","getIndicatorBounds","indicatorImage","hasChildNodes","getCylinderSize","isForeground","sourceMarker","targetMarker","getTitleSize","isHorizontal","shapeVertical","realHorizontal","realFlipH","realFlipV","swimlaneLine","paintRoundedSwimlane","paintSwimlane","paintSeparator","paintDivider","useBoundingBox","moveCell","resizeCell","getConstraint","getCurrentCellStyle","traverse","vertex","directed","func","visited","edgeCount","getEdgeCount","getEdgeAt","getTerminal","isAncestor","traverseAncestors","isVertexMovable","isCellMovable","isVertexIgnored","isCellVisible","isEdgeIgnored","setEdgeStyleEnabled","setOrthogonalEdge","getParentOffset","parentGeo","getGeometry","setEdgePoints","mxGeometry","setRelative","parentOffset","setGeometry","setVertexLocation","getVertexBounds","dx0","dy0","arrangeGroups","topBorder","rightBorder","bottomBorder","leftBorder","updateGroupBounds","nudge","rankIndex","marginBottom","keepFirstLocation","resizeParent","resizeParentMax","resizeLast","borderCollapse","allowGaps","pstate","getIndex","getParentSize","isLayer","currentRoot","getLayoutCells","c1","c2","geo1","geo2","fillValue","isSwimlane","getCellStyle","horz","childStyle","setChildGeometry","isCellCollapsed","updateParentGeometry","pgeo2","resizeVertices","other","getStartSize","maintainParentLocation","groupPadding","groupPaddingTop","groupPaddingRight","groupPaddingBottom","groupPaddingLeft","parentsChanged","moveTree","levelDistance","nodeDistance","resetEdges","prefHozEdgeSep","prefVertEdgeOff","minEdgeJetty","channelBuffer","edgeRouting","sortEdges","alignRanks","maxRankHeight","getConnections","findTreeRoots","Object","parentX","parentY","dfs","findRankHeights","setCellHeights","horizontalLayout","verticalLayout","moveNode","adjustParents","localEdgeProcessing","sortOutgoingEdges","e1","e2","end1","end2","rank","createNode","out","attachParent","layoutLeaf","offsetX","offsetY","siblingOffset","contour","upperHead","createLine","lowerHead","upperTail","lowerTail","sum","merge","total","upper","lower","bridge","a1","a2","line1","line2","line","processNodeOutgoing","parentCell","sortedCells","sortingCriterion","availableWidth","requiredWidth","edgeSpacing","currentXOffset","currentYOffset","maxYOffset","parentBounds","childCell","childBounds","getEdgesBetween","newPoints","angleOffset","rootx","rooty","autoRadius","rowMinX","rowMaxX","rowMinCenX","rowMaxCenX","rowRadi","rootBounds","centerX","centerY","vertexBounds","calcRowDims","maxLeftGrad","maxRightGrad","leftGrad","rightGrad","xLeftLimit","xRightLimit","fullWidth","xProportion","totalTheta","averTheta","nextTheta","lastTheta","rowNum","rowHasChildren","useInputOrigin","disableEdgeStyle","forceConstant","forceConstantSquared","minDistanceLimit","maxDistanceLimit","minDistanceLimitSquared","initialTemp","temperature","maxIterations","iteration","vertexArray","dispX","dispY","cellLocation","radiusSquared","isMoveable","neighbours","indices","allowedToRun","initialBounds","getBoundingBoxFromGeometry","getOpposites","resetEdge","calcRepulsion","calcAttraction","calcPositions","reduceTemperature","minx","miny","moveCells","deltaLength","newXDisp","newYDisp","k","xDelta","yDelta","deltaLengthSquared","displacementX","displacementY","vertexCount","random","deltaLengthWithRadius","moveCircle","getRadius","circle","phi","findParallels","parallels","getEdgeId","trg","route","scx","scy","len","placeLabels","avoid","labRect","dy2","dx2","minRank","nextLayerConnectedCells","previousLayerConnectedCells","getNextLayerConnectedCells","layer","getPreviousLayerConnectedCells","getGeneralPurposeVariable","setGeneralPurposeVariable","setX","setY","hashCode","getRankValue","otherNode","getCoreCell","isReversed","ranks","dfsCount","undirectedEdges","directedEdges","initialRank","startNodes","internalNode","internalNodes","startNodesCopy","edgesToBeMarked","layerDeterminingEdges","allEdgesScanned","minimumLayer","removedCell","currentMaxLayer","fixRanks","rankList","rootsArray","oldRootsArray","seen","dfsRoots","trackAncestors","seenNodes","extendedDfs","connectingEdge","rootId","outgoingEdges","targetNode","ancestors","childHash","hashCodeLength","ranksPerGroup","swimlanes","swimlaneIndex","ii","maxChainDfs","lowerRank","upperRank","chainCount","slIndex","incomingEdges","nestedBestRanks","currentBestCrossings","iterationsWithoutImprovement","maxNoImprovementIterations","calculateCrossings","weightedMedian","transpose","candidateCrossings","numRanks","totalCrossings","calculateRankCrossing","previousRank","tmpIndices","rankPosition","connectedCells","nodeIndices","otherCellRankPosition","concat","firstIndex","treeSize","tree","treeIndex","mainLoopIteration","improved","orderedCells","tempRank","leftCellAboveConnections","leftCellBelowConnections","rightCellAboveConnections","rightCellBelowConnections","leftAbovePositions","leftBelowPositions","rightAbovePositions","rightBelowPositions","leftCell","rightCell","totalCurrentCrossings","totalSwitchedCrossings","ik","downwardSweep","medianRank","rankValue","numCellsForRank","medianValues","reservedPositions","nextLevelConnectedCells","nextRankValue","sorterEntry","medianValue","arrayCount","medianPoint","leftMedian","rightMedian","unseenNodesArray","unseenNodes","modelRoots","seenNodesCopy","jettyPositions","limitX","currentXDelta","widestRank","rankTopY","rankBottomY","widestRankValue","rankWidths","rankY","fineTuning","nextLayerConnectedCache","previousLayerConnectedCache","printStatus","initialCoords","minNode","bestXDelta","medianPos","minPath","setCellLocations","nodeList","nodeWrapper","maxTries","cellWrapper","numNextLayerConnected","numPreviousLayerConnected","medianNextLevel","medianXValue","medianPreviousLevel","numConnectedNeighbours","currentPosition","cellMedian","positionChanged","leftLimit","rightLimit","connectedCell","connectedCellWrapper","rankMedianPosition","weightedValues","cellMap","currentCell","calculatedWeightedValue","leftBuffer","rightBuffer","collection","totalWeight","facade","calculateWidestRank","rankCoordinates","localX","boundsWarning","numEdges","lastRankMaxCellHeight","maxCellHeight","distanceToNextRank","referenceX","edgeStraight","refSegCount","upSegCount","downSegCount","upXPositions","downXPositions","currentX","nextX","repositionValid","rankArray","MAX_VALUE","edgeStyle","mxHierarchicalEdgeStyle","ORTHOGONAL","POLYLINE","CURVE","setEdgePosition","cellIndex","currentCells","currentRank","sorter","connectedEdgeCount","connectedEdges","connections","innerCell","connIndex","numActualEdges","parallelEdgeCount","jettys","layoutReversed","realSource","reversed","arrayOffset","jetty","modelSource","isPort","loopStart","loopLimit","loopDelta","positionX","topChannelY","bottomChannelY","modelTarget","realTarget","processReversedEdge","realCell","positionY","reversedOverSwimlane","cellId","STRAIGHT","mxSwimlaneLayout","mxGraphModel","currentEdit","createUndoableEdit","setRoot","mxRootChange","previousIndex","mxCollapseChange","collapsed","mxVisibleChange","mxCellAttributeChange","mxCell","onInit","moveParent","parentBorder","interHierarchySpacing","edgesCache","edgeSourceTermCache","edgesTargetTermCache","Array","rootsCopy","run","findRoots","best","maxDiff","fanOut","fanIn","cachedEdges","isCollapsed","terminalCache","term","hierarchyVertices","allVertexSet","filledVertexSet","filterDescendants","filledVertexSetEmpty","candidateRoots","vertexSet","cycleStage","layeringStage","crossingStage","placementStage","allVertices","currentComp","vertexID","edgeIsSource","netCount","isSource2","dummyVertexWidth","dummyVertices","getChildCells","insertVertex","layoutBounds","lane","childrenY","maxChildrenY","newGeo","leftGroupBorder","isValidAncestor","laneCounter","otherVertex","otherIndex","maintainEdgeParent","ignoreRelativeEdgeParent","createIds","nextId","updateLevel","endingUpdate","createRoot","isCreateIds","setCreateIds","insert","filterCells","getDescendants","rootChanged","oldRoot","cellAdded","isRoot","parentChanged","updateEdgeParents","getId","setId","createId","collision","updateEdgeParent","getNearestCommonAncestor","origin1","getOrigin","origin2","cell1","cell2","getParentPath","cellRemoved","parentForCellChanged","oldIndex","par","getChildren","getChildEdges","setTerminal","terminalChanged","setTerminals","terminalForCellChanged","insertEdge","removeEdge","getDirectedEdgeCount","outgoing","ignoredEdge","getIncomingEdges","getOutgoingEdges","incoming","includeLoops","tmp2","sources","targets","terminals","topmost","isConnectable","setValue","valueForCellChanged","valueChanged","geometryForCellChanged","styleForCellChanged","setCollapsed","collapsedStateForCellChanged","visibleStateForCellChanged","mergeChildren","to","cloneAllEdges","mapping","mergeChildrenImpl","getParents","parents","cloneCell","includeChildren","clones","cloneCellImpl","restoreClone","ident","cellCloned","cloneChild","connect","isConnect","connectable","mxTransient","newValue","setVertex","setEdge","setConnectable","setParent","removeFromParent","getEdgeIndex","isOutgoing","removeFromTerminal","hasAttribute","userObject","cloneValue","TRANSLATE_CONTROL_POINTS","alternateBounds","sourcePoint","targetPoint","swap","getTerminalPoint","setTerminalPoint","ct","fixedAspect","resolve","t1","t2","mxPerimeter","RectanglePerimeter","orthogonal","pi","beta","tan","EllipsePerimeter","det","xout1","xout2","yout1","yout2","xout","yout","pow","RhombusPerimeter","TrianglePerimeter","corner","HexagonPerimeter","pi2","mxPrintPreview","pageSelector","pageScale","mxStylesheet","putDefaultVertexStyle","createDefaultVertexStyle","putDefaultEdgeStyle","createDefaultEdgeStyle","mxCellState","absoluteOffset","mxGraphSelectionModel","mxSelectionChange","selectionModel","added","removed","mxCellEditor","zoomHandler","isEditing","editingCell","stopEditing","mxCellRenderer","autoOrigin","printOverlays","printControls","printBackgroundImage","targetWindow","clipping","getWindow","getDoctype","appendGraph","forcePageBreaks","keepOpen","previousInitializeOverlay","initializeOverlay","overlay","getDrawPane","initControl","control","handleEvents","clickHandler","isNewWindow","writeHead","currentScale","availableHeight","hpages","vpages","writePageSelector","createPageSelector","addPage","pageBreakAfter","addPageBreak","cov","getCoverPages","apx","getAppendices","pageNum","renderPage","addGraphFragment","insertBackgroundImage","closeDocument","writePostfix","js","pageNumber","pageBreakInside","innerDiv","viewport","previousContainer","getCanvas","backgroundPane","getBackgroundPane","realScale","graphEnabled","tempClip","rendering","orig","svgs","getLinkForCell","putCellStyle","getDefaultVertexStyle","getDefaultEdgeStyle","defaultStyle","tmpStyle","invalidStyle","invalid","visibleSourceState","visibleTargetState","terminalDistance","segments","unscaledWidth","unscaledHeight","getPerimeterBounds","setAbsoluteTerminalPoint","getVisibleTerminalState","setVisibleTerminalState","terminalState","getCellBounds","cellBounds","getPaintBounds","paintBounds","updateCachedBounds","setState","doneResource","updatingSelectionResource","singleSelection","isSingleSelection","setSingleSelection","changeSelection","setCell","getFirstSelectableCell","isCellSelectable","addCell","addCells","removeCell","trigger","modified","autoSize","selectText","emptyLabelText","escapeCancelsEditing","textNode","minResize","wordWrapPadding","blurEnabled","initialValue","contentEditable","isLegacyEditor","installListeners","applyValue","labelChanged","setAlign","getInitialValue","getEditingValue","getCurrentValue","isCancelEditingKeyEvent","focusLost","isStopEditingEvent","keyCode","keypressHandler","clearOnChange","getEmptyLabelText","keyupHandler","resizeThread","clearTimeout","isEnterStopsCellEditing","isEventSource","lw","bds","hpos","vpos","legacySpacing","isWrapping","getEditorBounds","isInvokesStopCellEditing","getBackgroundColor","absoluteRoot","startEditing","tooltipHandler","hideTooltip","bold","italic","isHideLabel","isSelectText","execCommand","cancel","initial","blur","prepareTextarea","getEditingCell","defaultShapes","defaultEdgeShape","defaultVertexShape","defaultTextShape","legacyControlPosition","forceControlClickHandler","registerShape","initializeShape","configureShape","createShape","getShapeConstructor","createIndicatorShape","getShape","getIndicatorShape","getIndicatorColor","getIndicatorGradientColor","getIndicatorImage","postConfigureShape","resolveColor","checkPlaceholderStyles","values","field","referenced","getSwimlane","swimlaneIndicatorColorAttribute","rstate","rshape","getLabelValue","getLabel","createLabel","isForceHtml","isHtmlLabel","getVerticalAlign","isLabelClipped","initializeLabel","forceGetCell","isLabelEvent","nativeDblClickEnabled","createCellOverlays","getCellOverlays","installCellOverlayListeners","createControl","getFoldingImage","foldingEnabled","createControlClickHandler","collapse","foldCells","innerNode","first","isShapeEvent","redrawLabel","wrapping","isTextShapeInvalid","nextScale","getTextScale","isClipping","vis","redrawLabelShape","check","property","rotateLabelBounds","redrawCellOverlays","getBounds","redrawControl","getControlBounds","insertStateAfter","htmlNode","shapes","getShapesForState","shapeChanged","selectionCellsHandler","updateHandler","isShapeInvalid","doRedrawShape","mxEdgeStyle","EntityRelation","segment","isSourceLeft","sourceGeometry","isTargetLeft","targetGeometry","getRoutingCenterY","xe","ye","dep","midY","Loop","transformControlPoint","getRoutingCenterX","ElbowConnector","SideToSide","TopToBottom","SegmentConnector","sourceScaled","targetScaled","controlHints","scalePointArray","scaleCellState","lastPushed","hint","pushPoint","lastInx","hints","currentTerm","currentPt","hozChan","vertChan","currentHint","fixedVertAlign","fixedHozAlign","inHozChan","inVertChan","orthBuffer","orthPointsFallback","dirVectors","wayPoints1","routePatterns","inlineRoutePatterns","vertexSeperations","limits","LEFT_MASK","TOP_MASK","RIGHT_MASK","BOTTOM_MASK","LEFT","TOP","RIGHT","BOTTOM","SIDE_MASK","CENTER_MASK","SOURCE_MASK","TARGET_MASK","VERTEX_MASK","getJettySize","OrthConnector","sourceEdge","targetEdge","sourceX","sourceY","sourceWidth","sourceHeight","targetX","targetY","targetWidth","targetHeight","sourceBuffer","targetBuffer","totalBuffer","tooShort","newRect","portConstraint","sourceCenX","sourceCenY","targetCenX","sourceTopDist","sourceLeftDist","sourceBottomDist","sourceRightDist","dirPref","horPref","vertPref","preferredHorizDist","preferredVertDist","prefOrdering","preferredOrderSet","sourceIndex","targetIndex","routePattern","currentIndex","lastOrientation","initialOrientation","currentOrientation","nextDirection","directionIndex","tar","sou","side","limit","souTar","getRoutePattern","mxStyleRegistry","putValue","mxGraphView","mxCurrentRootChange","isUp","mxGraph","renderHint","stylesheet","mouseListeners","multiplicities","imageBundles","createCellRenderer","setSelectionModel","createSelectionModel","setStylesheet","createStylesheet","createGraphView","graphModelChangeListener","createHandlers","revalidate","mxCellOverlay","tooltip","mxOutline","mxMultiplicity","validNeighbors","countError","typeError","validNeighborsAllowed","mxLayoutManager","undoHandler","beforeUndo","moveHandler","cellsMoved","cellsResized","mxSwimlaneManager","addEnabled","resizeEnabled","addHandler","isAddEnabled","cellsAdded","isResizeEnabled","isCellVisibleFn","oldValidateCellState","validateCellState","oldBounds","oldStates","getStates","oldScale","oldDoRedrawShape","self","oldPaint","resurse","setScale","resetValidationState","validateCell","setGraphBounds","deltas","mxGraphHandler","panHandler","suspended","updatePreview","updateHint","escapeHandler","refreshHandler","currentDx","currentDy","pBounds","getPreviewBounds","livePreviewUsed","setHandlesVisibleForCells","keyHandler","isCloneEvent","isCellsCloneable","isCloneEnabled","cloning","checkPreview","mxPanningHandler","forcePanningHandler","isForcePanningEvent","gestureHandler","eo","isPinchEnabled","initialScale","mouseDownEvent","zoomGraph","mxPopupMenuHandler","inTolerance","mxCellMarker","validColor","invalidColor","mxSelectionCellsHandler","handlers","refresh","getSelectionModel","mxConnectionHandler","mxConstraintHandler","resetHandler","currentFocus","mxRubberband","forceRubberbandHandler","isForceRubberbandEvent","repaint","mxHandle","mxVertexHandler","livePreview","invalidate","validate","mxEdgeHandler","dirty","isRendering","mxElbowEdgeHandler","mxEdgeSegmentHandler","mxKeyHandler","normalKeys","shiftKeys","controlKeys","controlShiftKeys","keydownHandler","keyDown","mxTooltipHandler","mxCellTracker","highlightColor","repaintHandler","mxDefaultKeyHandler","handler","escape","hideProperties","mxDefaultPopupMenu","config","mxDefaultToolbar","mxEditor","actions","addActions","cycleAttributeValues","popupHandler","undoManager","createGraph","toolbar","createToolbar","configure","cycleAttributeName","EMPTY_POINT","updatingDocumentResource","captureDocumentGesture","optimizeVmlReflows","updateStyle","lastNode","lastHtmlNode","lastForegroundNode","lastForegroundHtmlNode","setCurrentRoot","sizeDidChange","scaleAndTranslate","previousScale","previousTranslate","viewStateChanged","removeState","includeEdges","invalidating","prevDisplay","placeholder","getEmptyBounds","validateBackground","createBackgroundPageShape","validateBackgroundImage","validateBackgroundPage","getBackgroundImage","redrawBackgroundImage","pageVisible","getBackgroundPageBounds","backgroundPageShape","isHideOnHover","updateCellState","stateValidated","pState","getChildOffsetForCell","updateVertexState","updateEdgeState","updateVertexLabelOffset","updateFixedTerminalPoints","updatePoints","updateFloatingTerminalPoints","updateEdgeBounds","updateEdgeLabelOffset","fg","keepEdgesInForeground","keepEdgesInBackground","updateFixedTerminalPoint","getConnectionConstraint","getFixedTerminalPoint","getConnectionPoint","updateBoundsFromStencil","asp","getEdgeStyle","getTerminalPort","srcBounds","trgBounds","ignoreScale","isLoopStyleEnabled","tc","defaultLoopStyle","isAllowEval","updateFloatingTerminalPoint","getFloatingTerminalPoint","getNextPoint","orth","isOrthogonal","getPerimeterFunction","opposite","gx","gy","getRelativePoint","totalLength","minDist","xSegment","ySegment","projlen","yDistance","setRendering","setAllowEval","getCellStates","getDecoratorPane","decoratorPane","isContainerEvent","isScrollEvent","outWidth","inWidth","outHeight","inHeight","fireGestureEvent","popupMenuHandler","endHandler","createHtmlPane","updateContainerStyle","onResize","updateHtmlCanvasSize","pane","createVmlPane","getTranslateForRoot","cellEditor","portsEnabled","doubleTapEnabled","doubleTapTimeout","doubleTapTolerance","lastTouchY","lastTouchTime","tapAndHoldEnabled","tapAndHoldDelay","tapAndHoldInProgress","tapAndHoldValid","initialTouchX","initialTouchY","defaultOverlap","defaultParent","alternateEdgeStyle","pageBreaksVisible","pageBreakColor","pageBreakDashed","minPageBreakDist","preferPageSize","escapeEnabled","invokesStopCellEditing","enterStopsCellEditing","useScrollbarsForPanning","exportEnabled","importEnabled","cellsLocked","cellsCloneable","cellsEditable","cellsDeletable","cellsMovable","edgeLabelsMovable","vertexLabelsMovable","dropEnabled","splitEnabled","cellsResizable","cellsBendable","cellsSelectable","cellsDisconnectable","autoSizeCells","autoSizeCellsOnAdd","ignoreScrollbars","translateToScrollPosition","timerAutoScroll","allowAutoPanning","maximumGraphBounds","minimumGraphSize","minimumContainerSize","maximumContainerSize","resizeContainer","allowNegativeCoordinates","constrainChildren","constrainRelativeChildren","extendParents","extendParentsOnAdd","extendParentsOnMove","recursiveResize","collapseToPreferredSize","zoomFactor","keepSelectionVisibleOnZoom","centerZoom","resetViewOnRootChange","resetEdgesOnResize","resetEdgesOnMove","resetEdgesOnConnect","allowLoops","multigraph","connectableEdges","allowDanglingEdges","cloneInvalidEdges","disconnectOnMove","labelsVisible","htmlLabels","swimlaneSelectionEnabled","swimlaneNesting","minFitScale","maxFitScale","collapsedImage","expandedImage","warningImage","alreadyConnectedResource","containsValidationErrorsResource","collapseExpandResource","createCellEditor","createTooltipHandler","createSelectionCellsHandler","connectionHandler","createConnectionHandler","createGraphHandler","panningHandler","createPanningHandler","panningEnabled","createPopupMenuHandler","getStylesheet","getSelectionCellsForChanges","ignoreFn","structureOnly","processChange","updateSelection","removeSelectionCells","setDefaultParent","removeStateForCell","newParent","home","addCellOverlay","removeCellOverlay","removeCellOverlays","clearCellOverlays","setCellWarning","warning","isSelect","setSelectionCell","startEditingAtCell","getSelectionCell","isCellEditable","convertValueToString","cellLabelChanged","isAutoSizeCell","cellSizeUpdated","click","mxe","isTransparentClickEvent","selected","isCellSelected","selectCellForEvent","swimlane","isSwimlaneSelectionEnabled","getSwimlaneAt","reverse","isToggleEvent","tapAndHold","panningTrigger","marker","currentColor","markedState","mark","createEdgeState","panningManager","createPanningManager","getBorderSizes","borderLeftStyle","borderLeftWidth","paddingTop","borderTopStyle","borderTopWidth","borderRightStyle","borderRightWidth","paddingBottom","borderBottomStyle","borderBottomWidth","getPreferredPageSize","page","hCount","vCount","keepOrigin","ignoreWidth","ignoreHeight","getBorder","cssBorder","w1","h1","w2","h2","s2","doResizeContainer","updatePageBreaks","gb","horizontalCount","verticalCount","horizontalPageBreaks","verticalPageBreaks","drawPageBreaks","breaks","pageBreak","ignoreState","postProcessCellStyle","getImageFromBundles","encodeURIComponent","comma","setCellStyle","toggleCellStyle","toggleCellStyles","toggleCellStyleFlags","alignCells","param","flipEdge","addImageBundle","bundle","removeImageBundle","orderCells","back","cellsOrdered","groupCells","getCellsForGroup","createGroupCell","getBoundsForGroup","ungroupCells","removeCellsAfterUngroup","cellsRemoved","addAllEdges","removeCellsFromParent","moveGroup","allowInvalidEdges","keepPosition","trans","getEdgeValidationError","createVertex","createEdge","addEdge","absolute","constrain","parentState","zero","oldState","isAllowNegativeCoordinates","autoSizeCell","isExtendParentsOnAdd","isExtendParent","extendParent","constrainChild","cellConnected","updateCellSize","getDeletableCells","getAllEdges","disconnectTerminal","connected","tstate","splitEdge","newEdge","toggleCells","cellsToggled","checkFoldable","getFoldableCells","cellsFolded","isCellFoldable","swapBounds","willCollapse","updateAlternateBounds","getPreferredSizeForCell","allCells","ignoreChildren","cellStyle","gs2","resizeCells","isRecursiveResize","cellResized","ignoreRelative","resizeChildCells","constrainChildCells","scaleCell","isCellResizable","isCloneInvalidEdges","setAllowNegativeCoordinates","isDisconnectOnMove","isAllowDanglingEdges","isExtendParentsOnMove","disconnect","disconnectGraph","translateCell","getCellContainmentArea","getMaximumGraphBounds","sizeFirst","isConstrainRelativeChildren","isConstrainChild","overlap","getOverlap","getOutlineConstraint","getAllConnectionConstraints","setConnectionConstraint","connectCell","isPortsEnabled","getTerminalForPort","isCellDisconnectable","getCurrentRoot","enterGroup","isValidRoot","exitGroup","includeDescendants","addPoint","ignoreGrid","ignoreHorizontal","ignoreVertical","shiftPreview1","shiftPreview2","zoomIn","zoomOut","zoomActual","zoomTo","cw","ch","sh","scrollRectToVisible","zoomToRect","aspectFactor","rectRight","rectBottom","newHeight","deltaHeightBuffer","upperBuffer","newWidth","deltaWidthBuffer","newScale","scrollCellToVisible","tr2","isChanged","widthLimit","heightLimit","ddx","ddy","isCellConnectable","isLoop","isConstrainedEvent","isIgnoreTerminalEvent","validationAlert","isEdgeValid","isValidConnection","sourceOut","targetIn","validateEdge","validateGraph","context","isValid","getCellValidationError","outCount","inCount","rule","setBackgroundImage","isHtmlLabels","setHtmlLabels","getTooltip","tip","getHandler","getTooltipForNode","getTooltipForCell","getCursorForMouseEvent","getCursorForCell","isTransparentState","setBorder","isResizeContainer","setResizeContainer","isEscapeEnabled","setEscapeEnabled","setInvokesStopCellEditing","setEnterStopsCellEditing","isCellLocked","isCellsLocked","setCellsLocked","getCloneableCells","isCellCloneable","setCellsCloneable","canExportCell","canImportCell","isCellsSelectable","setCellsSelectable","isCellDeletable","isCellsDeletable","setCellsDeletable","isLabelMovable","isCellRotatable","getMovableCells","isCellsMovable","setCellsMovable","setPortsEnabled","getGridSize","setGridSize","getTolerance","setTolerance","isVertexLabelsMovable","setVertexLabelsMovable","isEdgeLabelsMovable","setEdgeLabelsMovable","isSwimlaneNesting","setSwimlaneNesting","setSwimlaneSelectionEnabled","isMultigraph","setMultigraph","isAllowLoops","setAllowDanglingEdges","setConnectableEdges","isConnectableEdges","setCloneInvalidEdges","setAllowLoops","setDisconnectOnMove","setDropEnabled","isSplitEnabled","setSplitEnabled","isCellsResizable","setCellsResizable","isTerminalPointMovable","isCellBendable","isCellsBendable","setCellsBendable","isCellsEditable","setCellsEditable","isCellsDisconnectable","setCellsDisconnectable","isValidSource","isValidTarget","setTooltips","setPanning","isAutoSizeCells","setAutoSizeCells","isExtendParents","setExtendParents","setExtendParentsOnAdd","setExtendParentsOnMove","setRecursiveResize","isConstrainChildren","setConstrainChildren","setConstrainRelativeChildren","isAllowOverlapParent","isValidDropTarget","isSplitTarget","hitsSwimlaneContent","getPointForEvent","addOffset","getCellsBeyond","rightHalfpane","bottomHalfpane","isolate","isSelectionEmpty","getSelectionCount","addSelectionCell","addSelectionCells","removeSelectionCell","selectRegion","selectCellsForEvent","selectNextCell","selectCell","selectPreviousCell","selectParentCell","selectChildCell","isNext","isParent","isChild","sel","selectAll","descendants","selectVertices","selectGroups","selectCells","selectEdges","createHandler","createEdgeHandler","createVertexHandler","createElbowEdgeHandler","createEdgeSegmentHandler","listener","updateMouseEvent","getStateForTouchEvent","isEventIgnored","mouseEvent","lastEvent","mouseMoveRedirect","mouseUpRedirect","isSyntheticEventIgnored","detail","lastMouseX","lastMouseY","ignoreMouseEvents","isEventSourceIgnored","candidate","getEventState","currentTime","fireDoubleClick","lastTouchEvent","lastTouchX","doubleClickCounter","doubleClickFired","lastTouchCell","tapAndHoldThread","consumeMouseEvent","destroyed","graphRenderHint","showViewport","sizerSize","updateOnPan","sizerImage","forceVmlHandles","outlineGraphModelChanged","selectionBorder","redirect","redirect2","sizer","createSizer","setZoomEnabled","getSourceContainerSize","getOutlineOffset","getSourceGraphBounds","sourceScale","scaledGraphBounds","unscaledGraphBounds","unscaledFinderBounds","union","completeWidth","completeHeight","outlineScale","navView","scale2","scale3","hit","allowHandleBoundsCheck","getTranslateForEvent","checkTerminal","checkNeighbors","sourceValue","targetValue","valid","checkType","attrValue","bubbling","isBubbling","setBubbling","getLayout","executeLayoutForCells","getCellsForChanges","getAncestorLayout","getCellsForChange","addCellsWithLayout","addDescendantsWithLayout","addAncestorsWithLayout","sorted","layoutCells","bubble","executeLayout","setHorizontal","setAddEnabled","setResizeEnabled","isSwimlaneIgnored","isCellHorizontal","swimlaneAdded","parentHorizontal","resizeSwimlane","addEdges","translateState","revalidateState","maxCells","highlightEnabled","cloneEnabled","moveEnabled","handlesVisible","updateCursor","selectEnabled","removeEmptyParents","connectOnDrop","scrollOnMove","previewColor","htmlPreview","scaleGrid","rotationEnabled","maxLivePreview","allowLivePreview","setCloneEnabled","isMoveEnabled","setMoveEnabled","isSelectEnabled","setSelectEnabled","isRemoveCellsFromParent","setRemoveCellsFromParent","getInitialCellForEvent","isDelayedSelection","delayedSelection","cellWasClicked","initialCell","createPreviewShape","cellCount","addStates","ignore","opps","isCellMoving","useGuidesForEvent","vector","removeHint","roundLength","livePreviewActive","resetLivePreview","setHighlightColor","remote","updateLivePreview","updatePreviewShape","tempState","originalPointerEvents","pt0","ptn","redrawHandles","resetPreviewStates","suspend","resume","setHandlesVisible","selectDelayed","destroyShapes","guides","shouldRemoveCellsFromParent","shouldRemoveParent","useLeftButtonForPanning","usePopupTrigger","ignoreCell","previewEnabled","useGrid","pinchEnabled","maxScale","isPanningEnabled","setPanningEnabled","setPinchEnabled","isPanningTrigger","consumePanningTrigger","selectOnPopup","clearSelectionOnBackground","triggerX","triggerY","screenX","screenY","isSelectOnPopup","popupTrigger","getCellForPopupEvent","hotspotEnabled","validState","setHotspot","getHotspot","setHotspotEnabled","isHotspotEnabled","hasValidState","getValidState","getMarkedState","unmark","process","setCurrentState","isValidState","getMarkerColor","markCell","getStateToMark","maxHandlers","oldHandlers","isHandlerActive","moveIconFront","moveIconBack","connectImage","targetConnectImage","createTarget","constraintHandler","waypointsEnabled","ignoreMouseDown","connectIconOffset","drillHandler","mouseDownCounter","movePreviewAway","outlineConnect","insertBeforeSource","isInsertBefore","isCreateTarget","setCreateTarget","iconState","redrawIcons","icons","isConnectableCell","isConnecting","validateConnection","getConnectImage","isMoveIconToFrontForState","createIcons","currentState","getIconPosition","destroyIcons","selectedIcon","isStartEvent","currentConstraint","sourceConstraint","waypoints","isImmediateConnectSource","isOutlineConnectEvent","clientLeft","clientTop","gridX","gridY","isHighlightAt","updateCurrentState","isCellEnabled","setFocus","convertWaypoint","snapToPreview","pt2","getTargetPerimeterPoint","getSourcePerimeterPoint","originalPoint","drawPreview","hitsIcon","updateIcons","realPoints","targetPerimeter","sourcePerimeter","isStopEvent","addWaypointForEvent","checkConstraints","getEdgeColor","terminalInserted","createTargetVertex","getAlignmentTolerance","pointImage","focusIcons","focusHighlight","currentFocusArea","focusPoints","getImageForConstraint","destroyFocusHighlight","isKeepFocusEvent","getCellForEvent","existingEdge","mouseleaveHandler","grid","mouse","minDistSq","hl","createHighlightShape","cp","defaultOpacity","sharedDiv","currentY","createMouseEvent","getPosition","setPosition","copyStyle","processEvent","getTotalRotation","flipPoint","snapPoint","isHtmlRequired","initShape","singleSizer","handleImage","parentHighlightEnabled","rotationRaster","rotationCursor","manageSizers","constrainGroupByChildren","rotationHandleVSpacing","horizontalOffset","verticalOffset","selectionBounds","getSelectionBounds","createSelectionShape","sizers","labelShape","isRotationHandleVisible","rotationShape","customHandles","createCustomHandles","updateMinBounds","isCenteredEvent","minBounds","createParentHighlightShape","getSelectionColor","getSelectionStrokeWidth","isSelectionDashed","createSizerShape","isSizerVisible","moveSizerTo","getHandleForEvent","checkShape","isCustomHandleEvent","handle","isLivePreviewBorder","childOffsetX","childOffsetY","preview","getRotationHandlePosition","startAngle","atan","startDist","hideSizers","edgeHandlers","checkTolerance","roundAngle","moveLabel","rotateVertex","resizeVertex","currentAlpha","raster","unscaledBounds","dx3","dy3","dx4","dy4","dx5","dy5","updateParentHighlight","rotateCell","rotateClick","constrained","moveChildren","centered","cdx","cdy","ignoreHandles","getHandlePadding","isCustomHandleVisible","crs","da","parentHighlight","bends","removeEnabled","dblClickRemoveEnabled","mergeRemoveEnabled","straightRemoveEnabled","virtualBendsEnabled","virtualBendOpacity","preferHtml","snapToTerminals","manageLabelHandle","abspoints","getSelectionPoints","targetState","createBends","isVirtualBendsEnabled","virtualBends","createVirtualBends","createLabelHandleShape","initBend","isAddPointEvent","isRemovePointEvent","otherCell","isHandleVisible","bend","createHandleShape","removePoint","isHandleEnabled","labelHandleImage","isAddVirtualBendEvent","isTarget","isLabel","clonePreviewState","getSnapToTerminalTolerance","isSnapToTerminalsEvent","snapToPoint","snapToTerminal","getPreviewTerminalState","getPreviewPoints","updatePreviewState","targetConstraint","setPreviewColor","changeTerminalPoint","changePoints","isClone","addPointAt","getHandleFillColor","checkLabelHandle","xn","yn","bn","redrawInnerBends","destroyBends","flipEnabled","doubleClickOrientationResource","createVirtualBend","dblClickHandler","getCursorForBend","getCurrentPoints","pt1","rpts","straight","bindKey","code","bindShiftKey","bindControlKey","bindControlShiftKey","getFunction","isGraphEvent","boundFunction","ignoreTouchEvents","hideOnHover","setHideOnHover","getStateForEvent","stateSource","resetTimer","restart","keepOnTop","drawHighlight","getStrokeWidth","bindAction","createMenu","conditions","createConditions","addItems","condition","as","enabledCond","addAction","isCell","condNodes","insertFunction","pressed","addActionOption","mode","setMode","addPrototype","ptype","factory","installDropHandler","addVertex","horizontalFlow","edgeGeometry","sprite","loader","askZoomResource","lastSavedResource","currentFileResource","propertiesResource","tasksResource","helpResource","outlineResource","dblClickAction","swimlaneRequired","forcedInserting","templates","defaultEdge","defaultEdgeStyle","defaultGroup","groupBorderSize","filename","postParameterName","escapePostData","urlPost","urlImage","layoutDiagram","swimlaneSpacing","maintainSwimlanes","layoutSwimlanes","cycleAttributeIndex","tasks","tasksWindowImage","tasksTop","help","helpWindowImage","urlHelp","helpWidth","helpHeight","propertiesWidth","propertiesHeight","movePropertiesDialog","validating","isModified","setModified","getUrlImage","showProperties","showTasks","showHelp","showOutline","decode","resetHistory","resetFirstTime","cookie","actionname","addTemplate","template","getTemplate","installDblClickHandler","installUndoHandler","installDrillHandler","installChangeHandler","installInsertHandler","createPopupMenu","createSwimlaneManager","createLayoutManager","swimlaneMgr","layoutMgr","swimlaneLayout","createSwimlaneLayout","diagramLayout","createDiagramLayout","setGraphContainer","rubberband","insertHandler","gs","setToolbarContainer","setStatusContainer","tstamp","toLocaleString","setStatus","setTitleContainer","getTitle","treeLayout","getRootTitle","createGroup","readGraphModel","getUrlPost","data","writeGraphModel","postDiagram","swapStyles","second","createProperties","isPropertiesVisible","yField","xField","widthField","heightField","texts","okFunction","cancelFunction","createTasks","refreshTasks","frame","modename","consumeCycleAttribute","cycleAttribute","isConstrainedMoving","mxCodecRegistry","codecs","aliases","register","codec","classname","addAlias","codecname","getCodec","mxObjectCodec","objects","idrefs","elements","encodeDefaults","putObject","getObject","updateElements","addElement","Error","reference","enc","into","dec","encodeCell","isCellCodec","decodeCell","restoreStructures","decoder","insertIntoGraph","cloneTemplate","getFieldName","attributename","mapped","getAttributeName","fieldname","isExcluded","isReference","beforeEncode","encodeObject","afterEncode","encodeValue","writeAttribute","writePrimitiveAttribute","writeComplexAttribute","convertAttributeToXml","isBooleanAttribute","convertAttributeFromXml","isNumericAttribute","beforeDecode","decodeNode","afterDecode","decodeAttributes","decodeChildren","decodeAttribute","isIgnoredAttribute","processInclude","decodeChild","getFieldTemplate","addObjectValue","isWrite","ref","object","mxCellCodec","rootNode","decodeRoot","rootCell","mxModelCodec","mxRootChangeCodec","childRef","mxChildChangeCodec","mxTerminalChangeCodec","mxGenericChangeCodec","variable","mxGraphCodec","mxGraphViewCodec","mxStylesheetCodec","styleNode","getStringValue","mxDefaultKeyHandlerCodec","mxDefaultToolbarCodec","act","inc","mxDefaultPopupMenuCodec","role","decodeTemplates","decodeUi","setMapContainer","mxEditorCodec","createChainedFunction","_iterableToArray","iter","Symbol","iterator","defineProperty","default","_default","__esModule","_interopRequireDefault","_interopRequireWildcard","React","_InfoCircleFilled","_AntdIcon","InfoCircleFilled","props","assign","displayName","forwardRef","_CheckCircleFilled","CheckCircleFilled","_ExclamationCircleFilled","ExclamationCircleFilled","global","_Base64","Base64","version","b64chars","b64tab","bin","fromCharCode","cb_utob","cc","re_utob","utob","u","cb_encode","ccc","padlen","ord","btoa","_encode","urisafe","m0","encodeURI","re_btou","cb_btou","cccc","btou","cb_decode","_atob","atob","_decode","Uint8Array","noConflict","fromBase64","toBase64","__buffer__","noEnum","enumerable","writable","configurable","extendString","adjustX","adjustY","targetOffset","placements","topLeft","leftTop","topRight","rightTop","bottomRight","rightBottom","bottomLeft","leftBottom","prefixCls","overlayInnerStyle","_typeof","ownKeys","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","_defineProperty","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","overlayClassName","_props$trigger","_props$mouseEnterDela","mouseEnterDelay","_props$mouseLeaveDela","mouseLeaveDelay","overlayStyle","_props$prefixCls","onVisibleChange","afterVisibleChange","transitionName","animation","_props$placement","placement","_props$align","_props$destroyTooltip","destroyTooltipOnHide","defaultVisible","getTooltipContainer","restProps","domRef","extraProps","getOwnPropertyDescriptors","defineProperties","_objectSpread","popupVisible","destroyTooltip","autoDestroy","keepParent","popupClassName","_props$arrowContent","arrowContent","builtinPlacements","popupPlacement","popupAlign","getPopupContainer","onPopupVisibleChange","afterPopupVisibleChange","popupTransitionName","popupAnimation","defaultPopupVisible","destroyPopupOnHide","popupStyle","_extends","hasOwnProperty","autoAdjustOverflowEnabled","autoAdjustOverflowDisabled","getOverflowOptions","autoAdjustOverflow","PresetColorTypes","_slicedToArray","isArray","_arrayWithHoles","_arr","_n","_d","_e","_s","_i","_iterableToArrayLimit","o","minLen","_arrayLikeToArray","_unsupportedIterableToArray","TypeError","_nonIterableRest","arr2","PresetColorRegex","getDisabledCompatibleChildren","elementType","__ANT_BUTTON","__ANT_SWITCH","__ANT_CHECKBOX","disabled","_splitObject","picked","omitted","splitObject","spanStyle","buttonStyle","_classNames2","_React$useContext","getContextPopupContainer","getPrefixCls","_React$useState2","isNoTitle","getTooltipPlacements","arrowPointAtCenter","_config$arrowWidth","_config$horizontalArr","horizontalArrowShift","_config$verticalArrow","verticalArrowShift","placementMap","ignoreShake","getPlacements","customizePrefixCls","openClassName","tempVisible","formattedOverlayInnerStyle","arrowContentStyle","childProps","childCls","customOverlayClassName","onPopupAlign","transformOrigin","defaultProps","_toConsumableArray","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","_isNativeReflectConstruct","Super","NewTarget","_Component","Notice","_super","_this","closeTimer","clearCloseTimer","onClose","startCloseTimer","duration","prevProps","restartCloseTimer","_this2","_this$props","closeIcon","onClick","holder","componentClass","dataOrAriaAttributeProps","reduce","acc","substr","onMouseEnter","onMouseLeave","tabIndex","createPortal","seed","now","getUuid","Notification","notices","hookRefs","Map","notice","holderCallback","maxCount","previousState","noticeIndex","updatedNotices","updateKey","_ref","_this$props2","noticeNodes","_ref2","Boolean","noticeProps","set","delete","Animate","getTransitionName","newInstance","_ref3","getContainer","called","render","notification","removeNotice","component","unmountComponentAtNode","useNotification","notificationInstance","createdRef","_React$useState","setElements","noticeEle","originElements","defaultTop","messageInstance","defaultDuration","rtl","iconMap","success","loading","api","_classNames","IconComponent","messageClass","closePromise","Promise","instance","getMessageInstance","then","rejected","promise","isArgsProps","getRenderPropValue","propValue","__rest","Popover","_a","otherProps","getOverlay"],"mappings":"0GAAA,8GAQQ,WACR,OAAO,SAAUA,MACjB,IAAK,IAAIC,QAAQD,KAAQE,KAAKD,MAAQD,KAAKC,MAC3C,IAAIE,WAAa,GAKbC,SACJ,CAmBCC,QAAS,QAQTC,MAA8B,MAAvBC,UAAUC,WAAqBD,UAAUC,UAAUC,QAAQ,SAAW,EAO7EC,OAA+B,MAAvBH,UAAUC,WAAqBD,UAAUC,UAAUC,QAAQ,WAAa,EAOhFE,QAAgC,MAAvBJ,UAAUC,aAAuBD,UAAUC,UAAUI,MAAM,gBAOpEC,QAAgC,MAAvBN,UAAUC,aAAuBD,UAAUC,UAAUI,MAAM,UAOpEE,UAAkC,MAAvBP,UAAUC,WAAqBD,UAAUC,UAAUC,QAAQ,SAAW,IACtD,MAAzBM,SAASC,cAAiD,GAAzBD,SAASC,cAO5CC,MAAO,eAAgBF,SAASG,cAAc,aAAwC,GAAzBH,SAASC,aAOtEG,WAAY,IAOZC,cAAe,IAObC,MAA8B,MAAvBd,UAAUC,WAChBD,UAAUC,UAAUC,QAAQ,aAAe,GAC3CF,UAAUC,UAAUC,QAAQ,QAAU,GACtCF,UAAUC,UAAUC,QAAQ,SAAW,EAOxCa,MAA8B,MAAvBf,UAAUC,YACfD,UAAUC,UAAUC,QAAQ,WAAa,GAC1CF,UAAUC,UAAUC,QAAQ,SAAW,GAQxCc,MAA8B,MAAvBhB,UAAUC,WAChBD,UAAUC,UAAUC,QAAQ,YAAc,GAC1CF,UAAUC,UAAUC,QAAQ,eAAiB,GAC7CF,UAAUC,UAAUC,QAAQ,eAAiB,GAC7CF,UAAUC,UAAUC,QAAQ,eAAiB,GAC7CF,UAAUC,UAAUC,QAAQ,eAAiB,GAC7CF,UAAUC,UAAUC,QAAQ,eAAiB,GAC7CF,UAAUC,UAAUC,QAAQ,aAAe,EAO5Ce,MAAO,eAAeC,KAAKC,OAAOC,cACT,wCACpBD,OAAe,QAAwB,oBAAXE,QAA0BA,OAAOC,kBADxDC,WAQVC,WAAYxB,UAAUyB,WAAWvB,QAAQ,YAAc,EAOvDwB,OAAS,iBAAiBR,KAAKlB,UAAU2B,UAQzCC,YAAa,WAEZ,GAAK,iBAAiBV,KAAKlB,UAAU2B,UACrC,CACC,IAAIE,EAAK7B,UAAoB,WAAEK,MAAM,0BAErC,GAAS,MAALwB,GAAaA,EAAEC,OAAS,EAE3B,OAAOC,SAASF,EAAE,IAIpB,OAAO,EAZK,GAoBbG,MAAO,aAAad,KAAKlB,UAAUiC,QAOnCC,aAA+B,MAAjBf,OAAOgB,QAAgC,MAAdA,OAAOC,KAAqC,MAAtBD,OAAOC,IAAIC,QAOxEC,MAAiC,oBAAnBC,eASdC,MAAQxC,UAAUC,UAAUC,QAAQ,aAAe,GACpDF,UAAUC,UAAUC,QAAQ,cAAgB,GAC1CF,UAAUC,UAAUC,QAAQ,cAAgB,GAC3CF,UAAUC,UAAUC,QAAQ,eAAiB,GAC9CF,UAAUC,UAAUC,QAAQ,gBAAkB,GAC9CF,UAAUC,UAAUC,QAAQ,gBAAkB,GAC7CF,UAAUC,UAAUC,QAAQ,eAAiB,GAC9CF,UAAUC,UAAUC,QAAQ,gBAAkB,GAC7CF,UAAUC,UAAUC,QAAQ,YAAc,GAC3CF,UAAUC,UAAUC,QAAQ,aAAe,EAO5CuC,OAA2C,+BAAnCzC,UAAU0C,QAAQC,cAO1BC,OAA2C,+BAAnC5C,UAAU0C,QAAQC,cAQ1BE,OAAQrC,SAASsC,iBACI,oCADetC,SAASsC,gBAAgB,6BAC5D,kBAA0D9C,UAAUC,UAAUC,QAAQ,WAAa,EAOpG6C,OAAQ/C,UAAUyB,WAAWvB,QAAQ,OAAS,EAO9C8C,OAAQhD,UAAUyB,WAAWvB,QAAQ,OAAS,EAO9C+C,YAAa,WAAW/B,KAAKlB,UAAUyB,YAQvCyB,SAAU,iBAAkB1C,SAAS2C,gBAOrCC,WAAmC,MAAvBjC,OAAOkC,gBAA0BrD,UAAUyB,WAAWvB,QAAQ,OAAS,GAOnFoD,SAAU9C,SAAS+C,SAASC,KAAKtD,QAAQ,WAAa,GAClDM,SAAS+C,SAASC,KAAKtD,QAAQ,YAAc,EAOjDuD,eAAgB,GAiBlBC,mBAAoB,WAEnB,OAAO7D,SAAS4C,QAAU5C,SAAS+C,QAuBpCe,KAAM,SAASC,EAAKJ,EAAMK,EAAKC,GAK9B,GAHAD,EAAMA,GAAOrD,SAGTX,SAASM,OAEZ0D,EAAIE,MAAM,cAAgBH,EAAM,WAAaJ,EAAO,2CAGrD,CACC,IAAIG,EAAOE,EAAIlD,cAAc,QAE7BgD,EAAKK,aAAa,MAAOJ,GACzBD,EAAKK,aAAa,OAAQR,GAC1BG,EAAKK,aAAa,UAAW,SAC7BL,EAAKK,aAAa,OAAQ,YAEtBF,GAEHH,EAAKK,aAAa,KAAMF,GAGdD,EAAII,qBAAqB,QAAQ,GACpCC,YAAYP,KActBQ,cAAe,SAASC,EAAIC,GAE3B,IAAIC,EAAUzE,SAAS4D,eAAe3B,OAEtC,SAASyC,IAES,KAAXD,GAELF,IAIF,IAAK,IAAII,EAAI,EAAGA,EAAI3E,SAAS4D,eAAe3B,OAAQ0C,IAEnDC,YAAYC,IAAI7E,SAAS4D,eAAee,GAAIH,EAAKE,IAcnDI,QAAS,SAASC,GAEjBpE,SAASuD,MAAM,gBAAgBa,EAAI,kBAqR7BC,KA9QJhF,SAASoB,OAASpB,SAASqD,WAAarD,SAAS6B,SAEpD7B,SAAS+B,YAAc,GACvB/B,SAASiF,KAAM,GAkBe,oBAArB,kBAETC,iBAAkB,GAiBY,oBAArB,kBAETC,iBAAkB,GAgBgB,oBAAzB,sBAETC,oBAAsB,QAiBU,oBAAvB,oBAETC,mBAAoB,GAoBK,oBAAhB,YAA+BC,WAAWrD,OAAS,GAGT,KAA/CqD,WAAWC,UAAUD,WAAWrD,OAAS,KAE5CqD,WAAaA,WAAWC,UAAU,EAAGD,WAAWrD,OAAS,IAG1DjC,SAASwF,SAAWF,YAIpBtF,SAASwF,SAAW,IAoBU,oBAArB,iBAAoCC,gBAAgBxD,OAAS,GAGT,KAAzDwD,gBAAgBF,UAAUE,gBAAgBxD,OAAS,KAEtDwD,gBAAkBA,gBAAgBF,UAAU,EAAGE,gBAAgBxD,OAAS,IAGzEjC,SAAS0F,cAAgBD,iBAIzBzF,SAAS0F,cAAgB1F,SAASwF,SAAW,UAkCpB,oBAAhB,YAA6C,MAAdG,WAExC3F,SAAS4F,SAAWD,WAIpB3F,SAAS4F,SAAY5F,SAAc,MAAIG,UAAU0F,aAAe1F,UAAUyF,SAoB1C,oBAAvB,mBAA2D,MAArBE,kBAE/C9F,SAAS+F,gBAAkBD,kBAI3B9F,SAAS+F,gBAAkB,KAIxBV,mBAEHrF,SAAS8D,KAAK,aAAc9D,SAASwF,SAAW,mBAoBtB,oBAAjB,aAA+C,MAAfQ,cAEzChG,SAASiG,UAAYD,aAIlBhG,SAAS4C,SAER5C,SAAS+C,OAEZ/C,SAAS4C,QAAS,GAMS,MAAvBjC,SAASuF,aAEiB,GAAzBvF,SAASC,cAEZD,SAASuF,WAAWrB,IAAI7E,SAASe,WAAY,gCAAiC,gBAC9EJ,SAASuF,WAAWrB,IAAI7E,SAASgB,cAAe,0CAA2C,kBAI3FL,SAASuF,WAAWrB,IAAI7E,SAASe,WAAY,iCAC7CJ,SAASuF,WAAWrB,IAAI7E,SAASgB,cAAe,6CAK9ChB,SAASU,WAAaC,SAASwF,YAAYlE,QAAU,IAInD+C,KAAOrE,SAASG,cAAc,SAClCkE,KAAKoB,KAAO,WACZpB,KAAKqB,WAAWC,QAAUtG,SAASe,WAAa,mCACzCf,SAASgB,cAAgB,mCAC1BL,SAASyD,qBAAqB,QAAQ,GAAGC,YAAYW,OAK5DrE,SAAS4F,mBAAmBD,QAAUtG,SAASe,WAAa,mCACxDf,SAASgB,cAAgB,mCAGvBqE,mBAEHrF,SAAS8D,KAAK,aAAc9D,SAASwF,SAAW,wBAQlDL,iBAAqE,MAAlBqB,OAAOC,WAG7DzG,SAAS8E,QAAQ9E,SAASwF,SAAS,qBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,gCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,4BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,uBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,yBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,uBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,6BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,4BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,6BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,uBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,4BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,wBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,sBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,uBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,4BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,4BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,yBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,8BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,6BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,8BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,gCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,iCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,0BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,6BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,6BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,kCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,6BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,6BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,6BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,uBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,wBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,0BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,kCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,yBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,wBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,wBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,iCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,0BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,gCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,0BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,wBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,iCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,uBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,0BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,uBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,6BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,wBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,4BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,+BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,+BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,mCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,qCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,oCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,qCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,gCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,sCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,mCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,mCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,iEACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,yDACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,yDACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,0DACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,oDACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,8DACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,oEACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,0DACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2DACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,uDACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,mDACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,+CACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,6BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,uBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,8BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,4BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,qCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,4BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,8BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,+BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,uBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,6BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,yBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,8BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,+BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,iCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,qCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,kCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,sCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,iCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,mCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,qCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,+BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,0CACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,sCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,sCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,+BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,kCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,gCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,qCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,uCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,+BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,mCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,gCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,kCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,qCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,oCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,kCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,0BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,6BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,qBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,2BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,yBACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,0BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,+BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,gCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,mCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,kCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,0BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,8BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,+BACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,sCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,mCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,qCACnCxF,SAAS8E,QAAQ9E,SAASwF,SAAS,4BAKpCzF,WAAWC,cAA+B,IAAbA,SAA2BA,cAAW0G,EAMnE,IAAIC,MACJ,CAUCC,YAAa,UAQbC,OAAO,EAQPC,OAAO,EAQPC,MAAM,EAONC,OAAQ,GASRC,KAAM,WAEL,GAAoB,MAAhBN,MAAMrF,QAAmC,MAAjBX,SAASuG,KACrC,CACC,IAAIC,EAAQR,MAAMC,YAAc,cAAgB5G,SAASC,QAGrDmH,EAAQzG,SAASG,cAAc,SACnCsG,EAAMjD,aAAa,QAAS,QAC5BiD,EAAMjD,aAAa,SAAU,QAE7B,IAAIkD,EAAQ1G,SAASG,cAAc,SAC/BwG,EAAK3G,SAASG,cAAc,MAC5ByG,EAAK5G,SAASG,cAAc,MAChCyG,EAAGC,MAAMC,cAAgB,MAGzBd,MAAMe,SAAW/G,SAASG,cAAc,YACxC6F,MAAMe,SAASvD,aAAa,OAAQ,OACpCwC,MAAMe,SAASvD,aAAa,WAAY,QACxCwC,MAAMe,SAASF,MAAMG,OAAS,OAC9BhB,MAAMe,SAASF,MAAMI,OAAS,OAC9BjB,MAAMe,SAASG,MAAQlB,MAAMK,OAGzBhH,SAASiB,OAAgC,cAAvBN,SAASmH,WAE9BnB,MAAMe,SAASF,MAAMO,MAAQ,MAI7BpB,MAAMe,SAASF,MAAMO,MAAQ,OAG9BR,EAAGlD,YAAYsC,MAAMe,UACrBJ,EAAGjD,YAAYkD,GACfF,EAAMhD,YAAYiD,GAGlBA,EAAK3G,SAASG,cAAc,MAC5B6F,MAAMY,GAAK5G,SAASG,cAAc,MAClC6F,MAAMY,GAAGC,MAAMC,cAAgB,MAC/Bd,MAAMY,GAAGpD,aAAa,SAAU,QAEhCmD,EAAGjD,YAAYsC,MAAMY,IACrBF,EAAMhD,YAAYiD,GAClBF,EAAM/C,YAAYgD,GAGlBV,MAAMqB,UAAU,QAAQ,SAAUC,GAEjCtB,MAAMuB,UAGPvB,MAAMqB,UAAU,OAAO,SAAUC,GAEhC,IAAIE,EAAUC,QAAQC,aAAa1H,SAASuG,MAC5CP,MAAM2B,MAAMH,MAGbxB,MAAMqB,UAAU,SAAS,SAAUC,GAElCtB,MAAME,OAASF,MAAME,MAEjBF,MAAME,MAETF,MAAM2B,MAAM,mBAIZ3B,MAAM2B,MAAM,uBAId3B,MAAMqB,UAAU,QAAQ,SAAUC,GAEjC,IAECG,QAAQG,KAAK5B,MAAMe,SAASG,OAE7B,MAAOW,GAENJ,QAAQK,MAAMD,OAIhB7B,MAAMqB,UAAU,QAAQ,SAAUC,GAEjC,IAECG,QAAQM,MAAM/B,MAAMe,SAASG,OAE9B,MAAOW,GAENJ,QAAQK,MAAMD,OAIhB7B,MAAMqB,UAAU,SAAS,SAAUC,GAElCtB,MAAMe,SAASG,MAAQ,MAIxB,IAAIc,EAAI,EACJC,EAAI,EAqBR,GAnBkC,iBAAvBtH,OAAiB,YAE3BqH,EAAIrH,OAAOuH,YACXD,EAAItH,OAAOwH,aAIXH,EAAKhI,SAAS2C,gBAAgByF,cAAgBpI,SAASuG,KAAK6B,aAC5DH,EAAIjI,SAASuG,KAAK8B,aAGnBrC,MAAMrF,OAAS,IAAI2H,SAAS9B,EAAOC,EAAO8B,KAAKC,IAAI,EAAGP,EAAI,KAAMM,KAAKC,IAAI,EAAGR,EAAI,KAAM,IAAK,KAC3FhC,MAAMrF,OAAO8H,gBAAe,GAC5BzC,MAAMrF,OAAO+H,eAAc,GAC3B1C,MAAMrF,OAAOgI,cAAa,GAC1B3C,MAAMrF,OAAOiI,aAAY,GACzB5C,MAAMrF,OAAOkI,gBAAiB,GAGxBxJ,SAASiB,OAASjB,SAASE,SAAWF,SAASmC,QACnDnC,SAASoB,OAAgC,cAAvBT,SAASmH,YACH,IAAzBnH,SAASC,aACV,CACC,IAAI6I,EAAM9C,MAAMrF,OAAOoI,aAEnBC,EAAgB,SAASC,EAAQ3B,GAEpCtB,MAAMe,SAASF,MAAMG,OAASuB,KAAKC,IAAI,EAAGM,EAAII,aAAe,IAAM,MAGpElD,MAAMrF,OAAOwI,YAAYC,QAAQC,WAAYL,GAC7ChD,MAAMrF,OAAOwI,YAAYC,QAAQE,SAAUN,GAC3ChD,MAAMrF,OAAOwI,YAAYC,QAAQG,UAAWP,GAE5ChD,MAAMe,SAASF,MAAMG,OAAS,UAUjCO,KAAM,WAELvB,MAAMwD,QAAQ/B,QAAQ1G,SAASvB,aAQhC6H,UAAW,SAASoC,EAAKC,GAExB,IAAIC,EAAS3J,SAASG,cAAc,UACpCsH,QAAQlE,MAAMoG,EAAQF,GACtBL,QAAQD,YAAYQ,EAAQ,QAASD,GACrC1D,MAAMY,GAAGlD,YAAYiG,IAQtBC,UAAW,WAEV,OAAoB,MAAhB5D,MAAMrF,QAEFqF,MAAMrF,OAAOiJ,aAYtBC,KAAM,WAEL7D,MAAM8D,YAAW,IAQlBA,WAAY,SAASC,GAEA,MAAhB/D,MAAMrF,QAETqF,MAAMM,OAGa,MAAhBN,MAAMrF,QAETqF,MAAMrF,OAAOmJ,WAAWC,IAoB1BC,MAAO,SAASC,GAEf,GAAIjE,MAAME,MAIT,OAFAF,MAAMwD,QAAQ,YAAYS,IAEnB,IAAIC,MAAOC,WAYpBC,MAAO,SAASH,EAAQI,GAEvB,GAAIrE,MAAME,MACV,CACC,IAAIoE,EAAY,GAAND,EAAW,OAAM,IAAIH,MAAOC,UAAYE,GAAI,OAAS,GAC/DrE,MAAMwD,QAAQ,WAAWS,EAAOK,KAgBlC3C,MAAO,WAEF3B,MAAMG,OAETH,MAAMwD,QAAQe,MAAMpL,KAAMqL,YAgB5BC,KAAM,WAEDzE,MAAMI,MAETJ,MAAMwD,QAAQe,MAAMpL,KAAMqL,YAS5BjH,MAAO,WAIN,IAFA,IAAI0G,EAAS,GAEJjG,EAAI,EAAGA,EAAIwG,UAAUlJ,OAAQ0C,IAErCiG,GAAUO,UAAUxG,GAEhBA,EAAIwG,UAAUlJ,OAAS,IAE1B2I,GAAU,KAIU,MAAlBjE,MAAMe,UAETf,MAAMe,SAASG,MAAQlB,MAAMe,SAASG,MAAQ+C,EAGnB,MAAvBzK,UAAUC,WACbD,UAAUC,UAAUC,QAAQ,eAAiB,IAE7CsG,MAAMe,SAASF,MAAM6D,WAAa,SAClC1E,MAAMe,SAASF,MAAM6D,WAAa,WAGnC1E,MAAMe,SAAS4D,UAAY3E,MAAMe,SAAS6D,cAI1C5E,MAAMK,QAAU4D,GAUlBT,QAAS,WAIR,IAFA,IAAIS,EAAS,GAEJjG,EAAI,EAAGA,EAAIwG,UAAUlJ,OAAQ0C,IAErCiG,GAAUO,UAAUxG,GAEhBA,EAAIwG,UAAUlJ,OAAS,IAE1B2I,GAAU,KAIZjE,MAAMzC,MAAM0G,EAAS,QAKvB7K,WAAW4G,WAAyB,IAAVA,MAAwBA,WAAQD,EAM1D,IAAI8E,iBACJ,CAeCC,WAAY,aAOZC,QAAS,EAQTC,IAAK,SAASC,GAEb,GAAW,MAAPA,EACJ,CACC,GAAwC,MAApCA,EAAIJ,iBAAiBC,YAExB,GAAmB,iBAARG,EACX,CACC,IAAIC,EAAOzD,QAAQ0D,gBAAgBF,EAAIG,aACvCH,EAAIJ,iBAAiBC,YAAcI,EAAO,IAAML,iBAAiBE,cAE1C,mBAARE,IAEfA,EAAIJ,iBAAiBC,YAAc,YAAcD,iBAAiBE,WAIpE,OAAOE,EAAIJ,iBAAiBC,YAG7B,OAAO,MAQRO,MAAO,SAASJ,GAEK,iBAAV,GAAqC,mBAARA,UAE/BA,EAAIJ,iBAAiBC,cAsB/B,SAASQ,eAERnM,KAAKkM,QAlBNjM,WAAWyL,sBAA+C,IAArBA,iBAAmCA,sBAAmB9E,EA0B3FuF,aAAaC,UAAUC,IAAM,KAO7BF,aAAaC,UAAUF,MAAQ,WAE9BlM,KAAKqM,IAAM,IAQZF,aAAaC,UAAUP,IAAM,SAASS,GAErC,IAAInI,EAAKuH,iBAAiBG,IAAIS,GAE9B,OAAOtM,KAAKqM,IAAIlI,IASjBgI,aAAaC,UAAUG,IAAM,SAASD,EAAKvE,GAE1C,IAAI5D,EAAKuH,iBAAiBG,IAAIS,GAC1BE,EAAWxM,KAAKqM,IAAIlI,GAGxB,OAFAnE,KAAKqM,IAAIlI,GAAM4D,EAERyE,GASRL,aAAaC,UAAUK,OAAS,SAASH,GAExC,IAAInI,EAAKuH,iBAAiBG,IAAIS,GAC1BE,EAAWxM,KAAKqM,IAAIlI,GAGxB,cAFOnE,KAAKqM,IAAIlI,GAETqI,GAQRL,aAAaC,UAAUM,QAAU,WAEhC,IAAIC,EAAS,GAEb,IAAK,IAAIL,KAAOtM,KAAKqM,IAEpBM,EAAOC,KAAKN,GAGb,OAAOK,GAQRR,aAAaC,UAAUS,UAAY,WAElC,IAAIF,EAAS,GAEb,IAAK,IAAIL,KAAOtM,KAAKqM,IAEpBM,EAAOC,KAAK5M,KAAKqM,IAAIC,IAGtB,OAAOK,GAcRR,aAAaC,UAAUU,MAAQ,SAASC,GAEvC,IAAK,IAAIT,KAAOtM,KAAKqM,IAEpBU,EAAQT,EAAKtM,KAAKqM,IAAIC,KAIxBrM,WAAWkM,kBAAuC,IAAjBA,aAA+BA,kBAAevF,EAM/E,IAAI9B,YACJ,CA0DCkI,UAAW,GAOXC,UAAW3H,oBAQX4H,kBAAkB,EAQlBC,mBAAmB,EAQnBC,mBAAmB,EAYnBC,oBAAqB,SAAS3I,GAE7B,OAA0B,MAAtBxE,SAASiG,WAELmC,QAAQ/H,QAAQL,SAASiG,UAAWzB,IAAQ,GAkBrD4I,iBAAkB,SAASC,EAAU7I,GAEpC,OAAII,YAAYqI,oBAAsBrI,YAAYuI,oBAAoB3I,GAE9D6I,EAAWzI,YAAYmI,UAIvB,MAwBTO,iBAAkB,SAASD,EAAU7I,GAEpC,GAA0B,MAAtBxE,SAASiG,YAAsBnG,KAAKqN,oBAAoB3I,GAC5D,CACC,IAAI+I,EAAO/I,EAAInE,QAAQ,KAEnBkN,EAAO,IAEV/I,EAAMA,EAAIe,UAAU,EAAGgI,IAIzB,OAAI3I,YAAYsI,mBAAqBtI,YAAYuI,oBAAoB3I,IAAQA,GAAOxE,SAAS+F,gBAErFsH,EAAW,IAAM7I,EAAMI,YAAYmI,UAInC,MA0BTlI,IAAK,SAASwI,EAAU7I,EAAKE,GAK5B,IAHAF,EAAc,MAAPA,EAAeA,EAA6B,MAArBxE,SAAS4F,SACtC5F,SAAS4F,SAAS4H,cAAgBC,YAAYC,OAEpCD,YAAYC,KACvB,CACC,IAAIC,EAAgB/I,YAAYwI,iBAAiBC,EAAU7I,GACvDoJ,EAAgBhJ,YAAY0I,iBAAiBD,EAAU7I,GAEvD0I,EAAoB,WAEvB,GAAqB,MAAjBU,EAEH,GAAIlJ,EAEH0D,QAAQuD,IAAIiC,GAAe,SAASC,GAEnCjJ,YAAYkJ,MAAMD,EAAIE,WACtBrJ,OACE,WAEFA,YAKD,IAEI,IAAImJ,EAAMzF,QAAQ4F,KAAKJ,GAEnBC,EAAII,WAENrJ,YAAYkJ,MAAMD,EAAIE,WAGzB,MAAOG,SAMS,MAAZxJ,GAERA,KAIF,GAAqB,MAAjBiJ,EAEH,GAAIjJ,EAEH0D,QAAQuD,IAAIgC,GAAe,SAASE,GAEnCjJ,YAAYkJ,MAAMD,EAAIE,WACtBb,OACE,WAEFA,YAKD,IAEI,IAAIW,EAAMzF,QAAQ4F,KAAKL,GAEnBE,EAAII,WAENrJ,YAAYkJ,MAAMD,EAAIE,WAGxBb,IAEF,MAAOgB,SASVhB,MAWHY,MAAO,SAASK,GAEf,GAAY,MAARA,EAIH,IAFA,IAAIC,EAAQD,EAAKE,MAAM,MAEd1J,EAAI,EAAGA,EAAIyJ,EAAMnM,OAAQ0C,IAEjC,GAA0B,KAAtByJ,EAAMzJ,GAAG2J,OAAO,GACpB,CACC,IAAIC,EAAQH,EAAMzJ,GAAGtE,QAAQ,KAE7B,GAAIkO,EAAQ,EACZ,CACC,IAAInC,EAAMgC,EAAMzJ,GAAGY,UAAU,EAAGgJ,GAC5BC,EAAMJ,EAAMzJ,GAAG1C,OAEiB,IAAhCmM,EAAMzJ,GAAG8J,WAAWD,EAAM,IAE7BA,IAGD,IAAI3G,EAAQuG,EAAMzJ,GAAGY,UAAUgJ,EAAQ,EAAGC,GAEtC1O,KAAKkN,kBAERnF,EAAQA,EAAM6G,QAAQ,wBAAwB,KAC9C9J,YAAYkI,UAAUV,GAAOuC,SAAS9G,IAItCjD,YAAYkI,UAAUV,GAAOvE,KAmCnC8D,IAAK,SAASS,EAAKwC,EAAQC,GAE1B,IAAIhH,EAAQjD,YAAYkI,UAAUV,GAclC,OAXa,MAATvE,IAEHA,EAAQgH,GAII,MAAThH,GAA2B,MAAV+G,IAEpB/G,EAAQjD,YAAYkK,oBAAoBjH,EAAO+G,IAGzC/G,GAcRiH,oBAAqB,SAASjH,EAAO+G,GAKpC,IAHA,IAAInC,EAAS,GACT8B,EAAQ,KAEH5J,EAAI,EAAGA,EAAIkD,EAAM5F,OAAQ0C,IAClC,CACC,IAAIoK,EAAIlH,EAAMyG,OAAO3J,GAEZ,KAALoK,EAEHR,EAAQ,GAES,MAATA,GAAuB,KAALQ,IAE1BR,EAAQrM,SAASqM,GAAO,IAEX,GAAKA,EAAQK,EAAO3M,QAEhCwK,EAAOC,KAAKkC,EAAOL,IAGpBA,EAAQ,MAES,MAATA,EAERA,GAASQ,EAITtC,EAAOC,KAAKqC,GAId,OAAOtC,EAAOuC,KAAK,KAapB1K,cAAe,SAASI,GAEvBE,YAAYC,IAAI7E,SAASwF,SAAS,oBAAqB,MAAM,WAE5DZ,YAAYC,IAAI7E,SAASwF,SAAS,mBAAoB,KAAMd,QAsB/D,SAASuK,QAAQC,EAAGC,GAEnBrP,KAAKoP,EAAU,MAALA,EAAaA,EAAI,EAC3BpP,KAAKqP,EAAU,MAALA,EAAaA,EAAI,EAuD5B,SAASC,YAAYF,EAAGC,EAAGpH,EAAOJ,GAEjCsH,QAAQI,KAAKvP,KAAMoP,EAAGC,GAEtBrP,KAAKiI,MAAkB,MAATA,EAAiBA,EAAQ,EACvCjI,KAAK6H,OAAoB,MAAVA,EAAkBA,EAAS,EA/E3C5H,WAAW6E,iBAAqC,IAAhBA,YAA8BA,iBAAc8B,EA2B5EuI,QAAQ/C,UAAUgD,EAAI,KAOtBD,QAAQ/C,UAAUiD,EAAI,KAOtBF,QAAQ/C,UAAUoD,OAAS,SAAS1D,GAEnC,OAAc,MAAPA,GAAeA,EAAIsD,GAAKpP,KAAKoP,GAAKtD,EAAIuD,GAAKrP,KAAKqP,GAQxDF,QAAQ/C,UAAUqD,MAAQ,WAGzB,OAAOnH,QAAQmH,MAAMzP,OAGtBC,WAAWkP,aAA6B,IAAZA,QAA0BA,aAAUvI,EA4BhE0I,YAAYlD,UAAY,IAAI+C,QAC5BG,YAAYlD,UAAUH,YAAcqD,YAOpCA,YAAYlD,UAAUnE,MAAQ,KAO9BqH,YAAYlD,UAAUvE,OAAS,KAO/ByH,YAAYlD,UAAUsD,QAAU,SAASN,EAAGC,EAAGvG,EAAGD,GAE9C7I,KAAKoP,EAAIA,EACTpP,KAAKqP,EAAIA,EACTrP,KAAKiI,MAAQa,EACb9I,KAAK6H,OAASgB,GAQlByG,YAAYlD,UAAUuD,WAAa,WAElC,OAAO3P,KAAKoP,EAAIpP,KAAKiI,MAAM,GAQ5BqH,YAAYlD,UAAUwD,WAAa,WAElC,OAAO5P,KAAKqP,EAAIrP,KAAK6H,OAAO,GAQ7ByH,YAAYlD,UAAUrH,IAAM,SAAS8K,GAEpC,GAAY,MAARA,EACJ,CACC,IAAIC,EAAO1G,KAAK2G,IAAI/P,KAAKoP,EAAGS,EAAKT,GAC7BY,EAAO5G,KAAK2G,IAAI/P,KAAKqP,EAAGQ,EAAKR,GAC7BY,EAAO7G,KAAKC,IAAIrJ,KAAKoP,EAAIpP,KAAKiI,MAAO4H,EAAKT,EAAIS,EAAK5H,OACnDiI,EAAO9G,KAAKC,IAAIrJ,KAAKqP,EAAIrP,KAAK6H,OAAQgI,EAAKR,EAAIQ,EAAKhI,QAExD7H,KAAKoP,EAAIU,EACT9P,KAAKqP,EAAIW,EACThQ,KAAKiI,MAAQgI,EAAOH,EACpB9P,KAAK6H,OAASqI,EAAOF,IASvBV,YAAYlD,UAAU+D,UAAY,SAASN,GAE1C,GAAY,MAARA,EACJ,CACC,IAAIO,EAAKpQ,KAAKoP,EAAIpP,KAAKiI,MACnBoI,EAAKR,EAAKT,EAAIS,EAAK5H,MAEnBqI,EAAKtQ,KAAKqP,EAAIrP,KAAK6H,OACnB0I,EAAKV,EAAKR,EAAIQ,EAAKhI,OAEvB7H,KAAKoP,EAAIhG,KAAKC,IAAIrJ,KAAKoP,EAAGS,EAAKT,GAC/BpP,KAAKqP,EAAIjG,KAAKC,IAAIrJ,KAAKqP,EAAGQ,EAAKR,GAC/BrP,KAAKiI,MAAQmB,KAAK2G,IAAIK,EAAIC,GAAMrQ,KAAKoP,EACrCpP,KAAK6H,OAASuB,KAAK2G,IAAIO,EAAIC,GAAMvQ,KAAKqP,IAWxCC,YAAYlD,UAAUoE,KAAO,SAASC,GAErCzQ,KAAKoP,GAAKqB,EACVzQ,KAAKqP,GAAKoB,EACVzQ,KAAKiI,OAAS,EAAIwI,EAClBzQ,KAAK6H,QAAU,EAAI4I,GAQpBnB,YAAYlD,UAAUsE,SAAW,WAEhC,OAAO,IAAIvB,QAAQnP,KAAKoP,EAAGpP,KAAKqP,IAQjCC,YAAYlD,UAAUuE,SAAW,WAEhC,IAAIC,GAAK5Q,KAAKiI,MAAQjI,KAAK6H,QAAU,EACrC7H,KAAKoP,GAAKwB,EACV5Q,KAAKqP,GAAKuB,EACV,IAAIC,EAAM7Q,KAAKiI,MACfjI,KAAKiI,MAAQjI,KAAK6H,OAClB7H,KAAK6H,OAASgJ,GAQfvB,YAAYlD,UAAUoD,OAAS,SAAS1D,GAEvC,OAAc,MAAPA,GAAeA,EAAIsD,GAAKpP,KAAKoP,GAAKtD,EAAIuD,GAAKrP,KAAKqP,GACtDvD,EAAI7D,OAASjI,KAAKiI,OAAS6D,EAAIjE,QAAU7H,KAAK6H,QAQhDyH,YAAYwB,cAAgB,SAASjB,GAEpC,OAAO,IAAIP,YAAYO,EAAKT,EAAGS,EAAKR,EAAGQ,EAAK5H,MAAO4H,EAAKhI,SAGzD5H,WAAWqP,iBAAqC,IAAhBA,YAA8BA,iBAAc1I,EAM5E,IAAImK,UACJ,CAkCCC,eAAgB,SAASC,EAAOC,EAASC,GAExC,IACIC,EAAO,EAEPC,EAAU,WAIb,IAFA,IAAIC,GAAa,EAERzM,EAAI,EAAGA,EAAIqM,EAAQ/O,OAAQ0C,IACpC,CACC,IAAI0M,EAASL,EAAQrM,GAErB,GAAI0M,aAAkBC,kBACrBD,aAAkBE,kBAClBF,aAAkBG,eAClBH,aAAkBI,eAClBJ,aAAkBK,cACnB,CACC,IAAIC,EAAQZ,EAAMa,UAAUC,SAASR,EAAOS,MAAQT,EAAOU,OAAO,GAElE,GAAa,MAATJ,EAIH,GAFAP,GAAa,EAETC,EAAOtF,aAAeuF,kBAAoBP,EAAMiB,MAAMC,OAAOZ,EAAOS,MAEvE1J,QAAQ8J,WAAWP,EAAMQ,MAAMnN,KAAM,IAAMkM,EAzBlC,QA4BV,CACC,IAAIkB,EAAQrB,EAAMa,UAAUQ,MAExBC,GAAMhB,EAAOiB,SAASpD,EAAImC,EAAO/E,SAAS4C,GAAKkD,EAC/CG,GAAMlB,EAAOiB,SAASnD,EAAIkC,EAAO/E,SAAS6C,GAAKiD,EAE/CI,GAAMnB,EAAOiB,SAASvK,MAAQsJ,EAAO/E,SAASvE,OAASqK,EACvDK,GAAMpB,EAAOiB,SAAS3K,OAAS0J,EAAO/E,SAAS3E,QAAUyK,EAEjD,GAARlB,GAEHS,EAAMzC,GAAKmD,EACXV,EAAMxC,GAAKoD,EACXZ,EAAM5J,OAASyK,EACfb,EAAMhK,QAAU8K,IAIhBd,EAAMzC,GAAKmD,EA9CH,GA+CRV,EAAMxC,GAAKoD,EA/CH,GAgDRZ,EAAM5J,OAASyK,EAhDP,GAiDRb,EAAMhK,QAAU8K,EAjDR,IAoDT1B,EAAM2B,aAAaC,OAAOhB,GAG1Bd,UAAU+B,eAAe7B,EAAOM,EAAOS,KAAM,IAAMZ,EAvD1C,MA6DTA,EA7DS,IA6DSE,GAErBF,IACA5P,OAAOuR,WAAW1B,EAAS2B,IAEX,MAAR7B,GAERA,KAIE6B,EAAQ,GACZ3B,KAcEyB,eAAgB,SAAS7B,EAAOe,EAAMiB,GAKxC,IAFA,IAAIC,EAAajC,EAAMiB,MAAMiB,cAAcnB,GAElCnN,EAAE,EAAGA,EAAEqO,EAAYrO,IAC5B,CACC,IAAIoN,EAAQhB,EAAMiB,MAAMkB,WAAWpB,EAAMnN,GACrCwO,EAAapC,EAAMa,UAAUC,SAASE,GAExB,MAAdoB,IAEH/K,QAAQ8J,WAAWiB,EAAWhB,MAAMnN,KAAM+N,GAC1ClC,UAAU+B,eAAe7B,EAAOgB,EAAOgB,IAKzC,IAAIK,EAAQrC,EAAMiB,MAAMqB,SAASvB,GAEjC,GAAa,MAATsB,EAEH,IAASzO,EAAE,EAAGA,EAAEyO,EAAMnR,OAAQ0C,IAC9B,CACC,IAAI2O,EAAYvC,EAAMa,UAAUC,SAASuB,EAAMzO,IAE9B,MAAb2O,GAEHlL,QAAQ8J,WAAWoB,EAAUnB,MAAMnN,KAAM+N,KAW7CQ,QAAS,SAASvO,EAAMwO,EAAMjH,EAAQ2E,EAAM4B,EAAOW,GAElDvC,EAAOA,GAAQ,GACf4B,EAAQA,GAAS,GAEjB,IAAIC,EAAUS,GAAQ,IAItB,GAFApL,QAAQ8J,WAAWlN,EAAM+N,GAErBU,GAA0B,MAAbA,EACjB,CACC,IAAIC,EAAI,WAEJX,EAAU7J,KAAKC,IAAI4J,EAAQ7B,EAAM,GACpC9I,QAAQ8J,WAAWlN,EAAM+N,GAErBA,EAAU,EAEbzR,OAAOuR,WAAWa,EAAGZ,IAIrB9N,EAAKwC,MAAM6D,WAAa,SAEpBkB,GAAUvH,EAAK2O,YAElB3O,EAAK2O,WAAWC,YAAY5O,KAI/B1D,OAAOuR,WAAWa,EAAGZ,QAIrB9N,EAAKwC,MAAM6D,WAAa,SAEpBkB,GAAUvH,EAAK2O,YAElB3O,EAAK2O,WAAWC,YAAY5O,KAOhCjF,WAAW8Q,eAAiC,IAAdA,UAA4BA,eAAYnK,EAMtE,IAAI0B,QACJ,CAuBCyL,cAAqC,QAArB7T,SAAS4F,SAAsB,QAAU,GASzDkO,cAAqC,QAArB9T,SAAS4F,SAAsB,QAAU,GAOzDmO,WAAY/T,SAAS0F,cAAgB,aAYrCsO,cAAe,SAASC,GAEF,MAAjBA,EAAQzM,QAEXyM,EAAQzM,MAAM0M,OAAS,IAGxB,IAAIC,EAAWF,EAAQG,WAEvB,GAAgB,MAAZD,EAIG,IAFA,IAAInB,EAAamB,EAASlS,OAEjB0C,EAAI,EAAGA,EAAIqO,EAAYrO,GAAK,EAEjCyD,QAAQ4L,cAAcG,EAASxP,KAc3C0P,gBAEKrU,SAASE,QAAmC,MAAzBS,SAASC,cAAwBD,SAASC,aAAe,GAExE,SAASqT,GAEf,OAAmB,MAAXA,EAAmBA,EAAQK,aAAe,MAK5C,SAASL,GAEf,OAAmB,MAAXA,EACP3S,OAAOiT,iBAAiBN,EAAS,IACjC,MAWJO,eAAgB,SAAS3M,GAsBxB,MApBa,QAATA,EAEHA,EAAQ,IAES,UAATA,EAERA,EAAQ,IAES,SAATA,IAERA,EAAQ,KAGTA,EAAQ4M,WAAW5M,GAEf6M,MAAM7M,KAETA,EAAQ,GAGFA,GAaR8M,kBAEKC,OAAS,KAET5U,SAASmB,MAEZyT,OAAS,IAED5U,SAASoB,OAASpB,SAASmC,MAEnCyS,OAAS,SAED5U,SAAS2C,MAEjBiS,OAAS,MAED5U,SAASE,OAASS,SAASC,cAAgB,GAAKD,SAASC,aAAe,KAEhFgU,OAAS,MAGH,SAASpN,EAAO3H,EAAMgI,GAE5BL,EAAM3H,GAAQgI,EAEA,MAAV+M,QAAkB/U,EAAKoC,OAAS,IAGnCuF,EADA3H,EAAO+U,OAAS/U,EAAK0F,UAAU,EAAG,GAAGzC,cAAgBjD,EAAK0F,UAAU,IACtDsC,KAejBgN,cAAe,SAAS7P,GAEvB,IAAIwC,EAAQY,QAAQiM,gBAAgBrP,GAEpC,OAAgB,MAATwC,IAAoC,UAAlBA,EAAMsN,UAA0C,QAAlBtN,EAAMsN,WAU9DC,KAAM,SAASC,EAAO3K,GAErB,OAAO,WAEN,OAAOA,EAAMa,MAAM8J,EAAO7J,aAgB5B8J,KAAM,SAASC,MAEd,IAAIzI,OAAS,KAEb,GAAIyI,KAAK7U,QAAQ,aAAe,EAE/B,IAEC4U,KAAK,+BAA+BC,MACpCzI,OAAS0I,wBAETA,wBAA0B,KAE3B,MAAOjH,GAENvH,MAAMyE,KAAK8C,EAAEkH,QAAU,qBAAuBF,WAK/C,IAECzI,OAASwI,KAAKC,MAEf,MAAOhH,GAENvH,MAAMyE,KAAK8C,EAAEkH,QAAU,qBAAuBF,MAIhD,OAAOzI,QASR4I,SAAU,SAASrQ,EAAMsQ,EAAMzN,GAE9B,GAAI7C,EAAKuQ,UAAY9H,YAAY+H,iBACjC,CACC,IAAI7E,EAAM3L,EAAKyQ,aAAaH,GAE5B,GAAW,MAAP3E,GAAeA,GAAO9I,EAEzB,OAAO7C,EAMT,IAFAA,EAAOA,EAAK0Q,WAEG,MAAR1Q,GACP,CACC,IAAIyH,EAASrE,QAAQiN,SAASrQ,EAAMsQ,EAAMzN,GAE1C,GAAc,MAAV4E,EAEH,OAAOA,EAGRzH,EAAOA,EAAK2Q,YAGb,OAAO,MAYR7J,gBAAiB,SAAS4H,GAEzB,IAAIkC,EAAM,KAEV,GAAS,MAALlC,EAEH,GAAc,MAAVA,EAAE7T,KAEL+V,EAAMlC,EAAE7T,UAMR,GAFA+V,EAAMxN,QAAQyN,KAAKnC,EAAEhS,YAEjB,cAAcL,KAAKuU,GACvB,CAEC,IAAIE,GADJF,EAAMxN,QAAQ2N,MAAMH,EAAIrQ,UAAU,KACnBlF,QAAQ,KAEnByV,EAAO,IAEVF,EAAMA,EAAIrQ,UAAU,EAAGuQ,IAM3B,OAAOF,GAcRvV,QAAS,SAAS2V,EAAOpK,GAExB,GAAa,MAAToK,GAAwB,MAAPpK,EAEpB,IAAK,IAAIjH,EAAI,EAAGA,EAAIqR,EAAM/T,OAAQ0C,IAEjC,GAAIqR,EAAMrR,IAAMiH,EAEf,OAAOjH,EAKV,OAAQ,GAcTsR,QAAS,SAASD,EAAOzR,GAExB,GAAa,MAATyR,GAAuB,MAANzR,EAEpB,IAAK,IAAII,EAAI,EAAGA,EAAIqR,EAAM/T,OAAQ0C,IAEjCJ,EAAGyR,EAAMrR,IAIX,OAAOqR,GAoBRzJ,OAAQ,SAASX,EAAKoK,GAErB,IAAIvJ,EAAS,KAEb,GAAqB,iBAAX,EAIT,IAFA,IAAI8B,EAAQnG,QAAQ/H,QAAQ2V,EAAOpK,GAE5B2C,GAAS,GAEfyH,EAAME,OAAO3H,EAAO,GACpB9B,EAASb,EACT2C,EAAQnG,QAAQ/H,QAAQ2V,EAAOpK,GAIjC,IAAK,IAAIQ,KAAO4J,EAEXA,EAAM5J,IAAQR,WAEVoK,EAAM5J,GACbK,EAASb,GAIX,OAAOa,GAoBP0J,OAAQ,SAAStO,EAAOuO,EAAUC,EAAeC,GAEhD,QAAa,MAATzO,GAAkB6M,MAAM7M,EAAM0N,WAA0B,MAAZa,GAC/CvO,EAAMuO,SAAS5I,eAAiB4I,EAAS5I,eAEjB,MAAjB6I,GACNxO,EAAM4N,aAAaY,IAAkBC,IAkBxCC,eAAgB,SAASC,EAAUzE,GAIlC,IAFA,IAAI0E,EAAS1E,EAEI,MAAV0E,GACP,CACC,GAAIA,GAAUD,EAEb,OAAO,EAGRC,EAASA,EAAO9C,WAGjB,OAAO,GAcT+C,cAAe,SAAS1R,EAAMuQ,GAE7BA,EAAWA,GAAY9H,YAAY+H,iBAKnC,IAHA,IAAIrB,EAAW,GACXxD,EAAM3L,EAAK0Q,WAED,MAAP/E,GAEFA,EAAI4E,UAAYA,GAEnBpB,EAASzH,KAAKiE,GAGfA,EAAMA,EAAIgF,YAGX,OAAOxB,GAgBRwC,WAAY,SAAS3S,EAAKgB,EAAM4R,GAE/B,OAAI5W,SAASE,QAAmC,MAAzBS,SAASC,cAAwBD,SAASC,aAAe,IAExEwH,QAAQyO,yBAAyB7S,EAAKgB,EAAM4R,GAI5C5S,EAAI2S,WAAW3R,EAAM4R,IAe9BC,yBAA0B,SAAS7S,EAAKgB,EAAM4R,GAE7C,OAAQ5R,EAAKuQ,UAEZ,KAAK,EAEJ,IAAIuB,EAAU9S,EAAIlD,cAAckE,EAAKoR,UAErC,GAAIpR,EAAK+R,YAAc/R,EAAK+R,WAAW9U,OAAS,EAE/C,IAAK,IAAI0C,EAAI,EAAGA,EAAIK,EAAK+R,WAAW9U,OAAQ0C,IAE3CmS,EAAQ3S,aAAaa,EAAK+R,WAAWpS,GAAGyR,SACvCpR,EAAKyQ,aAAazQ,EAAK+R,WAAWpS,GAAGyR,WAIxC,GAAIQ,GAAe5R,EAAKoP,YAAcpP,EAAKoP,WAAWnS,OAAS,EAE9D,IAAS0C,EAAI,EAAGA,EAAIK,EAAKoP,WAAWnS,OAAQ0C,IAE3CmS,EAAQzS,YAAY+D,QAAQyO,yBAAyB7S,EAAKgB,EAAKoP,WAAWzP,GAAIiS,IAIhF,OAAOE,EAGR,KAAK,EACF,KAAK,EACL,KAAK,EAEJ,OAAO9S,EAAIgT,eAAkC,MAAlBhS,EAAKiS,UAAqBjS,EAAKiS,UAAYjS,EAAK6C,SAWjFqP,kBAAmB,WAElB,IAAIlT,EAAM,KAWT,OATGrD,SAASwW,gBAAkBxW,SAASwW,eAAeC,eAEtDpT,EAAMrD,SAASwW,eAAeC,eAAe,GAAI,GAAI,MAE7C,kBAAmB9V,SAE3B0C,EAAMoE,QAAQiP,uBAGPrT,GAQTqT,oBAAqB,WAEpB,IAAIrT,EAAM,IAAIsT,cAAc,oBAO3B,OANDtT,EAAIuT,OAAQ,EAGZvT,EAAIwT,iBAAkB,EACtBxT,EAAIyT,kBAAmB,EAEfzT,GAwBT0T,SAEKpW,OAAOqW,UAEH,SAASC,GAIf,OAFa,IAAID,WAEHE,gBAAgBD,EAAK,aAK7B,SAASA,GAEf,IAAI5T,EAAMoE,QAAQiP,sBAGlB,OAFArT,EAAI8T,QAAQF,GAEL5T,GAUV+T,eAEKpX,SAASqX,UAEL,WAENrX,SAASqX,UAAUC,SAGZ3W,OAAO4W,aAER,WAEF5W,OAAO4W,eAAeD,MAEzB3W,OAAO4W,eAAeD,QAEd3W,OAAO4W,eAAeC,iBAE9B7W,OAAO4W,eAAeC,mBAMjB,aAeTC,iBAAkB,SAASpT,EAAMqT,GAIhC,IAFA,IAAI1H,EAAM,EAAW3L,EAAKsT,gBAAkBtT,EAAK2Q,YAEnC,MAAPhF,GAAeA,EAAI4E,UAAY9H,YAAY8K,eAClD,CACC,IAAIC,EAAO,EAAW7H,EAAI2H,gBAAkB3H,EAAIgF,YAC5CxH,EAAO/F,QAAQqQ,eAAe9H,GAED,GAA7BvI,QAAQyN,KAAK1H,GAAMlM,QAEtB0O,EAAIgD,WAAWC,YAAYjD,GAG5BA,EAAM6H,IAeRE,aAAc,SAASC,EAAGC,GAezB,OAPAD,GADAA,GADAA,GADAA,GADAA,GAFAA,EAAIE,OAAOF,GAAK,KAEVjK,QAAQ,KAAK,UACbA,QAAQ,KAAK,WACbA,QAAQ,MAAM,UACdA,QAAQ,KAAK,SACbA,QAAQ,KAAK,SAEJ,MAAXkK,GAAmBA,KAEtBD,EAAIA,EAAEjK,QAAQ,MAAO,UAGfiK,GAYRG,MAAO,SAAS9T,GAEf,OAAe,MAARA,GAA+B,iCAAfA,EAAK+T,QAiB7BC,OAAQ,SAAShU,EAAMiU,GAEtB,IAAIrB,EAAM,GAsBV,OApBI5X,SAASE,OAASF,SAASO,QAE9BqX,EAAMxP,QAAQ8Q,aAAalU,EAAM,GAAI,GAAI,IAET,MAAxB1D,OAAO6X,cAGfvB,GADoB,IAAIuB,eACJC,kBAAkBpU,GAElB,MAAZA,EAAK4S,MAEbA,EAAM5S,EAAK4S,IAAIlJ,QAAQ,eAAgB,IACtCA,QAAQ,SAAU,KAClBA,QAAQ,QAAS,OAInBuK,EAAWA,GAAY,QACvBrB,EAAMA,EAAIlJ,QAAQ,MAAOuK,IAqB1BC,aAAc,SAASlU,EAAMqU,EAAKC,EAAQV,EAASW,GAElD,IAAI9M,EAAS,GAEb,GAAY,MAARzH,EAgBH,GAdAqU,EAAc,MAAPA,EAAeA,EAAM,KAC5BC,EAAoB,MAAVA,EAAkBA,EAAS,GACrCV,EAAsB,MAAXA,EAAmBA,EAAU,KAEf,MAArB5T,EAAKwU,cAAwBxU,EAAKwU,cAAgBD,IAErDA,EAAKvU,EAAKwU,aAEwB,MAA9BxU,EAAKyQ,aAAa,UAErBzQ,EAAKb,aAAa,QAASa,EAAKwU,eAI9BxU,EAAKuQ,UAAY9H,YAAYgM,kBAEhChN,EAAOC,KAAKtE,QAAQ8Q,aAAalU,EAAK1B,gBAAiB+V,EAAKC,EAAQV,EAASW,SAEzE,GAAIvU,EAAKuQ,UAAY9H,YAAYiM,4BAIrC,GAAW,OAFP/I,EAAM3L,EAAK0Q,YAId,KAAc,MAAP/E,GAENlE,EAAOC,KAAKtE,QAAQ8Q,aAAavI,EAAK0I,EAAKC,EAAQV,EAASW,IAC5D5I,EAAMA,EAAIgF,iBAIR,GAAI3Q,EAAKuQ,UAAY9H,YAAYkM,kBAEjC9R,EAAQO,QAAQqQ,eAAezT,IAEzB/C,OAAS,GAElBwK,EAAOC,KAAK4M,EAAS,UAASzR,EAAQ,SAAQ+Q,QAG3C,GAAI5T,EAAKuQ,UAAY9H,YAAY8K,cACtC,CACC,IAAI1Q,KAAQO,QAAQqQ,eAAezT,IAEzB/C,OAAS,GAElBwK,EAAOC,KAAK4M,EAASlR,QAAQsQ,aAAatQ,QAAQyN,KAAKhO,IAAQ,GAAS+Q,OAI1E,CACCnM,EAAOC,KAAK4M,EAAS,IAAMtU,EAAKoR,UAIhC,IAaIzF,EAbAiJ,EAAQ5U,EAAK+R,WAEjB,GAAa,MAAT6C,EAEH,IAAK,IAAIjV,EAAI,EAAGA,EAAIiV,EAAM3X,OAAQ0C,IAClC,CACC,IAAIkV,EAAMzR,QAAQsQ,aAAakB,EAAMjV,GAAGkD,OACxC4E,EAAOC,KAAK,IAAMkN,EAAMjV,GAAGyR,SAAW,KAAOyD,EAAM,KAQrD,GAAW,OAFPlJ,EAAM3L,EAAK0Q,YAGf,CAGC,IAFAjJ,EAAOC,KAAK,IAAMkM,GAEJ,MAAPjI,GAENlE,EAAOC,KAAKtE,QAAQ8Q,aAAavI,EAAK0I,EAAKC,EAASD,EAAKT,EAASW,IAClE5I,EAAMA,EAAIgF,YAGXlJ,EAAOC,KAAK4M,EAAS,KAAMtU,EAAKoR,SAAW,IAAMwC,QAIjDnM,EAAOC,KAAK,MAAQkM,GAKvB,OAAOnM,EAAOuC,KAAK,KAYpB8K,0BAA2B,SAASC,GAGnC,IAAIC,EAAS,CAAC,aAAc,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,MAAO,QAAS,MAC9FC,EAAM,GA8CP,OA5CH,SAASC,EAAUC,GAGlB,GAAmB,GAAfA,EAAKlY,QAAoC,MAApBkY,EAAK,GAAG/D,UACX,MAArB+D,EAAK,GAAGC,UAKN,IAAK,IAAIzV,EAAI,EAAGA,EAAIwV,EAAKlY,OAAQ0C,IACjC,CACI,IAAI0V,EAAOF,EAAKxV,GAGD,MAAjB0V,EAAKjE,UAAsC,MAAlBiE,EAAKD,YAChB,GAAfD,EAAKlY,QAAoB,GAAL0C,IAA6B,OAAjB0V,EAAKjE,UACP,QAAhCiE,EAAKD,UAAU5M,cAEZyM,EAAIvN,KAAK,OAIgB,IAAlB2N,EAAK9E,UAAoC,IAAlB8E,EAAK9E,SAE3B8E,EAAKpD,UAAUhV,OAAS,GAE3BgY,EAAIvN,KAAK2N,EAAKpD,WAGW,IAAlBoD,EAAK9E,UAAkB8E,EAAKjG,WAAWnS,OAAS,GAE9DiY,EAAUG,EAAKjG,YAGNzP,EAAIwV,EAAKlY,OAAS,GAAKmG,QAAQ/H,QAAQ2Z,EAAQG,EAAKxV,EAAI,GAAGyR,WAAa,GAE3E6D,EAAIvN,KAAK,QAMnBwN,CAAUH,GAEAE,EAAIjL,KAAK,KAQpBsL,wBAAyB,SAAS1E,EAAK2E,GAKtC,IAFA,IAAIC,EAAU,GAEP5E,EAAI3T,OAAS,GAAmC,MAA9B2T,EAAItH,OAAOsH,EAAI3T,OAAS,IAEhD2T,EAAMA,EAAIrQ,UAAU,EAAGqQ,EAAI3T,OAAS,GACpCuY,GAAWD,EAGZ,OAAO3E,EAAM4E,GAYd/B,eAAgB,SAASzT,GAGxB,OAAIhF,SAASE,YAA4BwG,IAAnB1B,EAAKyV,UAEnBzV,EAAKyV,UAII,MAARzV,EAAgBA,OAA2B0B,IAArB1B,EAAK0V,YAA6B,OAAS,eAAiB,IAc5FC,eAAgB,SAAS3V,EAAMmJ,QAEPzH,IAAnB1B,EAAKyV,UAERzV,EAAKyV,UAAYtM,EAIjBnJ,OAA2B0B,IAArB1B,EAAK0V,YAA6B,OAAS,eAAiBvM,GAepE9F,aAEKrI,SAASE,MAEL,SAAS8E,GAEf,OAAY,MAARA,EAEIA,EAAKoV,UAGN,IAKD,SAASpV,GAEf,OAAY,MAARA,GAEc,IAAImU,eACHC,kBAAkBpU,GAG9B,IAgBV4V,aAEK5a,SAASE,MAEL,SAAS8E,GAEf,GAAY,MAARA,EACJ,CACC,GAAsB,MAAlBA,EAAK6V,UAER,OAAO7V,EAAK6V,UAIZ,IAAIlK,EAAM,GACVA,EAAIjE,KAAK,IAAI1H,EAAKoR,UAElB,IAAIwD,EAAQ5U,EAAK+R,WAEjB,GAAa,MAAT6C,EAEH,IAAK,IAAIjV,EAAI,EAAGA,EAAIiV,EAAM3X,OAAQ0C,IAClC,CACC,IAAIkD,EAAQ+R,EAAMjV,GAAGkD,MAER,MAATA,GAAiBA,EAAM5F,OAAS,IAEnC0O,EAAIjE,KAAK,KACTiE,EAAIjE,KAAKkN,EAAMjV,GAAGyR,UAClBzF,EAAIjE,KAAK,MACTiE,EAAIjE,KAAK7E,GACT8I,EAAIjE,KAAK,MAgBZ,OAX6B,GAAzB1H,EAAKoV,UAAUnY,OAElB0O,EAAIjE,KAAK,OAITiE,EAAIjE,KAAK,KACTiE,EAAIjE,KAAK1H,EAAKoV,WACdzJ,EAAIjE,KAAK,KAAK1H,EAAKoR,SAAS,MAGtBzF,EAAI3B,KAAK,IAIlB,MAAO,IAKD,SAAShK,GAEf,OAAY,MAARA,GAEc,IAAImU,eACHC,kBAAkBpU,GAG9B,IAgBVd,MAAO,SAASuS,EAAQtI,GAEvB,IACInJ,EADMyR,EAAOqE,cACF9D,eAAe7I,GAO9B,OALc,MAAVsI,GAEHA,EAAOpS,YAAYW,GAGbA,GAcRmF,QAAS,SAASsM,EAAQtI,GAEzB,IACInJ,EADMyR,EAAOqE,cACF9D,eAAe7I,GAQ9B,OANc,MAAVsI,IAEHA,EAAOpS,YAAYW,GACnByR,EAAOpS,YAAY1D,SAASG,cAAc,QAGpCkE,GAYR+V,GAAI,SAAStE,EAAQuE,GAEpBA,EAAQA,GAAS,EAGjB,IAFA,IAAID,EAAK,KAEApW,EAAI,EAAGA,EAAIqW,EAAOrW,IAEZ,MAAV8R,IAEHsE,EAAKtE,EAAOqE,cAAcha,cAAc,MACxC2V,EAAOpS,YAAY0W,IAIrB,OAAOA,GAuBRzQ,OAAQ,SAAS2Q,EAAO5Q,EAAOrG,GAI9B,IAAIsG,GAFJtG,EAAc,MAAPA,EAAeA,EAAMrD,UAEXG,cAAc,UAQ/B,OAPAsH,QAAQlE,MAAMoG,EAAQ2Q,GAEtBlR,QAAQD,YAAYQ,EAAQ,SAAS,SAASrC,GAE7CoC,EAAMpC,MAGAqC,GAcR4Q,KAAM,SAASzE,EAAQtI,GAEtB,IAAIgN,EAAIxa,SAASG,cAAc,KAQ/B,OAPAsH,QAAQlE,MAAMiX,EAAGhN,GAEH,MAAVsI,GAEHA,EAAOpS,YAAY8W,GAGbA,GAURC,+BAAgC,SAASpW,GAExCA,EAAKwC,MAAM6T,QAAU,2DACpBrb,SAAS0F,cAAgB,4CAiB3B4V,WAAY,SAAS7E,EAAQtI,EAAMoN,EAAQC,EAAQC,GAElD,OAAOrT,QAAQtE,KAAK2S,EAAQtI,GAAM,WAEjCoN,EAAOG,QAAQF,KACbC,IAoBJE,WAAY,SAASlF,EAAQtI,EAAMoN,EAAQK,EAAWC,EAAKJ,GAE1D,OAAOrT,QAAQtE,KAAK2S,EAAQtI,GAAM,WAEjCoN,EAAOK,GAAWC,KAChBJ,IAgBJ3X,KAAM,SAAS2S,EAAQtI,EAAM9D,EAAOoR,GAEnC,IAAIK,EAAInb,SAASG,cAAc,QAmB/B,OAjBAgb,EAAEtU,MAAMuU,MAAQ,OAChBD,EAAEtU,MAAMwU,eAAiB,YACzBF,EAAEtU,MAAM0M,OAAS,UAEN,MAAPuH,IAEHK,EAAEtU,MAAMyU,YAAcR,EAAI,MAG3B1R,QAAQD,YAAYgS,EAAG,QAASzR,GAChCjC,QAAQlE,MAAM4X,EAAG3N,GAEH,MAAVsI,GAEHA,EAAOpS,YAAYyX,GAGbA,GAQRI,gBAAiB,WAEhB,IAAIC,EAAIxb,SAASuG,KACbkV,EAAIzb,SAAS2C,gBAEjB,IAEC,OAAO,IAAI8L,YAAY,EAAG,EAAG+M,EAAEnT,aAAeoT,EAAEpT,YAAaE,KAAKC,IAAIgT,EAAEpT,cAAgB,EAAGqT,EAAErT,eAE9F,MAAOmF,GAEN,OAAO,IAAIkB,cAUbiN,IAAK,SAASrX,GAEb,IAAIsX,EAAKlU,QAAQ8T,kBACbK,EAAOra,SAAS8C,EAAKwX,YACrBzU,EAAQ7F,SAAS8C,EAAKyX,aAEtBC,EAAStU,QAAQuU,wBAAwB3X,EAAK8V,eAC9C8B,EAAKF,EAAOxN,EACZ2N,EAAKH,EAAOvN,EAIZ2N,GAFInc,SAASuG,KACTvG,SAAS2C,gBACL,EAAOgZ,EAAGvU,OAElBwU,EAAOxU,EAAQ+U,IAElB9X,EAAKwC,MAAM+U,KAAOrT,KAAKC,IAAIyT,EAAIE,EAAQ/U,GAAS,MAGjD,IAAIgV,EAAM7a,SAAS8C,EAAKgY,WACpBrV,EAASzF,SAAS8C,EAAK6E,cAEvBoT,EAASJ,EAAKP,EAAG3U,OAEjBoV,EAAMpV,EAASsV,IAElBjY,EAAKwC,MAAMuV,IAAM7T,KAAKC,IAAI0T,EAAII,EAAStV,GAAU,OA8BnDqG,KAAM,SAASkP,GAEd,IAAIrP,EAAM,IAAIsP,aAAaD,EAAK,KAAM,OAAO,GAG7C,OAFArP,EAAIuP,OAEGvP,GA4CRlC,IAAK,SAASuR,EAAKG,EAAQC,EAASC,EAAQC,EAASC,EAAWC,GAE/D,IAAI7P,EAAM,IAAIsP,aAAaD,EAAK,KAAM,OAClCS,EAAoB9P,EAAI8P,kBAsB5B,OApBID,IAEH7P,EAAI8P,kBAAoB,SAASC,EAAShP,GAIzC,IAAK,IAAIxC,KAFTuR,EAAkBzS,MAAMpL,KAAMqL,WAEduS,EAEfE,EAAQC,iBAAiBzR,EAAKsR,EAAQtR,MAK3B,MAAVmR,GAEH1P,EAAIiQ,UAAUP,GAGf1P,EAAIuP,KAAKC,EAAQC,EAASE,EAASC,GAE5B5P,GAgBRkQ,OAAQ,SAASC,EAAMX,EAAQC,GAe9B,IAbA,IAAIW,EAASD,EAAK/b,OACdwK,EAAS,GACTyR,EAAS,EACT1V,EAAM,WAEK,GAAV0V,GAA0B,MAAXZ,GAElBA,IAGDY,KAGQvZ,EAAI,EAAGA,EAAIqZ,EAAK/b,OAAQ0C,KAEhC,SAAUuY,EAAK3O,GAEdnG,QAAQuD,IAAIuR,GAAK,SAASrP,GAEzB,IAAIsQ,EAAStQ,EAAIuQ,YAEbD,EAAS,KAAOA,EAAS,IAE5B3V,KAIAiE,EAAO8B,GAASV,EAGF,KAFdoQ,GAICZ,EAAO5Q,MAGPjE,GApBJ,CAqBGwV,EAAKrZ,GAAIA,GAGC,GAAVsZ,GAEHZ,EAAO5Q,IA8BT4R,KAAM,SAASnB,EAAKtO,EAAQyO,EAAQC,GAEnC,OAAO,IAAIH,aAAaD,EAAKtO,GAAQwO,KAAKC,EAAQC,IAkBnDgB,OAAQ,SAASpB,EAAKtO,EAAQ5K,EAAKua,GAElC,OAAO,IAAIpB,aAAaD,EAAKtO,GAAQ4P,SAASxa,EAAKua,IAgBpDE,SAAU,SAASvB,EAAKlZ,EAAKqZ,GAExBrd,SAASE,MAEZ8D,EAAI0a,mBAAqB,WAEF,GAAlB1a,EAAI2a,YAEPtB,KAMFrZ,EAAI4a,iBAAiB,OAAQvB,GAAQ,GAGtCrZ,EAAIgK,KAAKkP,IAgBV2B,SAAU,SAAS7I,EAAO5J,EAAKyC,GAE9B,IAAIhH,EAAkB,MAATmO,EAAiBA,EAAM5J,GAAO,KAO3C,OALa,MAATvE,IAEHA,EAAQgH,GAGFhH,GAiBRiX,UAAW,SAAS9I,EAAO5J,EAAKyC,GAE/B,IAAIhH,EAAkB,MAATmO,EAAiBA,EAAM5J,GAAO,KAO3C,OALa,MAATvE,IAEHA,EAAQgH,GAAgB,GAGlBkQ,OAAOlX,IAiBfmX,SAAU,SAAShJ,EAAO5J,EAAKyC,GAE9B,IAAIhH,EAAkB,MAATmO,EAAiBA,EAAM5J,GAAO,KAW3C,OATa,MAATvE,EAEHA,EAAQgH,EAEAhH,GAAS4F,YAAYC,OAE7B7F,EAAQ,MAGFA,GAoBR0H,MAAO,SAAS3D,EAAKqT,EAAYC,GAEhCA,EAAsB,MAAXA,GAAmBA,EAC9B,IAAI3P,EAAQ,KAEZ,GAAW,MAAP3D,GAA0C,mBAApBA,EAAe,YAIrC,IAAK,IAAIjH,KAFZ4K,EAAQ,IAAI3D,EAAIG,YAECH,EAETjH,GAAK6G,iBAAiBC,aAA6B,MAAdwT,GACxC7W,QAAQ/H,QAAQ4e,EAAYta,GAAK,KAE5Bua,GAA6B,iBAAXtT,EAAIjH,GAMpB4K,EAAM5K,GAAKiH,EAAIjH,GAJf4K,EAAM5K,GAAKyD,QAAQmH,MAAM3D,EAAIjH,KAUvC,OAAO4K,GAaX4P,YAAa,SAASrD,EAAGK,GAExB,GAAU,MAALL,GAAkB,MAALK,GAAoB,MAALL,GAAkB,MAALK,GACvC,MAALL,GAAkB,MAALK,GAAaL,EAAE7Z,QAAUka,EAAEla,OAEzC,OAAO,EAEH,GAAS,MAAL6Z,GAAkB,MAALK,EAErB,IAAK,IAAIxX,EAAI,EAAGA,EAAImX,EAAE7Z,OAAQ0C,IAE7B,GAAa,MAARmX,EAAEnX,IAAsB,MAARwX,EAAExX,IACb,MAARmX,EAAEnX,IAAsB,MAARwX,EAAExX,IACV,MAARmX,EAAEnX,IAAsB,MAARwX,EAAExX,KAClBmX,EAAEnX,GAAGuK,GAAKiN,EAAExX,GAAGuK,GAAK4M,EAAEnX,GAAGwK,GAAKgN,EAAExX,GAAGwK,GAEpC,OAAO,EAKV,OAAO,GAcRiQ,aAAc,SAAStD,EAAGK,GAGzB,IAAInB,EAAQ,EAEZ,GAAU,MAALc,GAAkB,MAALK,GAAoB,MAALL,GAAkB,MAALK,GACvC,MAALL,GAAkB,MAALK,GAAaL,EAAE7Z,QAAUka,EAAEla,OAEzC,OAAO,EAEH,GAAS,MAAL6Z,GAAkB,MAALK,EACtB,CACC,IAAK,IAAI/P,KAAO+P,EAEfnB,IAGD,IAAK,IAAI5O,KAAO0P,EAIf,GAFAd,MAEM5S,QAAQsM,MAAMoH,EAAE1P,KAAUhE,QAAQsM,MAAMyH,EAAE/P,KAAU0P,EAAE1P,IAAQ+P,EAAE/P,IAErE,OAAO,EAKV,OAAgB,GAAT4O,GAQRqE,iBAAkB,SAASC,GAK1B,IAHA,IAAIC,EAAO,IAAItT,aACXQ,EAAS,GAEJ9H,EAAI,EAAGA,EAAI2a,EAAIrd,OAAQ0C,IAE1B4a,EAAK5T,IAAI2T,EAAI3a,MAEjB8H,EAAOC,KAAK4S,EAAI3a,IAChB4a,EAAKlT,IAAIiT,EAAI3a,IAAI,IAInB,OAAO8H,GAQRiI,MAAO,SAAS7M,GAEf,MAAwB,iBAAX,GAAuB6M,MAAM7M,IAyB3C2X,OAAQ,SAAS3T,EAAM4T,GAEtB,IAAI/L,EAAI,aACRA,EAAExH,UAAYuT,EAAUvT,UAExBL,EAAKK,UAAY,IAAIwH,EACrB7H,EAAKK,UAAUH,YAAcF,GAY9BnK,SAAU,SAASkK,GAEf,IAAI8T,EAAS,GAEb,IAAK,IAAI/a,KAAKiH,EAEb,IAEe,MAAVA,EAAIjH,GAED+a,GAAU/a,EAAI,cAEM,mBAAXiH,EAAIjH,GAEb+a,GAAU/a,EAAI,mBAES,iBAAXiH,EAAIjH,GAGhB+a,GAAU/a,EAAI,QADNyD,QAAQ0D,gBAAgBF,EAAIjH,GAAGoH,aACR,MAI/B2T,GAAU/a,EAAI,MAAQiH,EAAIjH,GAAK,KAGvC,MAAOuJ,GAENwR,GAAU/a,EAAI,IAAMuJ,EAAEkH,QAIxB,OAAOsK,GAQXC,UAAW,SAASC,GAEnB,OAAO1W,KAAK2W,GAAKD,EAAM,KAQxBE,SAAU,SAASC,GAElB,OAAa,IAANA,EAAY7W,KAAK2W,IAQzBG,YAAa,SAASC,EAAIC,EAAIhQ,EAAIC,EAAIgQ,EAAOC,EAAcC,EAAWnR,EAAGC,GAKlE,GAHND,GAAK+Q,EACL9Q,GAAK+Q,EAEY,IAAPhQ,GAAmB,IAAPC,EAEf,OAAO1D,EAGR,IAAI6T,EAAKD,EACLE,EAAOJ,EACXjQ,EAAKhH,KAAKsX,IAAItQ,GACdC,EAAKjH,KAAKsX,IAAIrQ,GACd,IAWIsQ,EAXAC,GAAOxR,EAAI,EACXyR,GAAOxR,EAAI,EACXyR,EAAO1X,KAAK2X,IAAIN,EAAOrX,KAAK2W,GAAK,KACjCiB,EAAO5X,KAAK6X,IAAIR,EAAOrX,KAAK2W,GAAK,KACjCmB,EAAMJ,EAAOF,EAAMI,EAAOH,EAC1BM,GAAO,EAAIH,EAAOJ,EAAME,EAAOD,EAC/BO,EAAOF,EAAMA,EACbG,EAAOF,EAAMA,EACbG,EAAMlR,EAAKA,EACXmR,EAAMlR,EAAKA,EACXmR,EAAQJ,EAAOE,EAAMD,EAAOE,EAGhC,GAAIC,EAAQ,EAEXpR,EAAKhH,KAAKqY,KAAKD,GAASpR,EACxBC,EAAKjH,KAAKqY,KAAKD,GAASnR,EACxBsQ,EAAM,MAGP,CACC,IAAIe,EAAO,EAEPpB,IAAiBE,IAEpBkB,GAAQ,GAGTf,EAAMe,EAAOtY,KAAKqY,MAAMH,EAAMC,EAAMD,EAAMD,EAAOE,EAAMH,IAASE,EAAMD,EAAOE,EAAMH,IAGpF,IAAIO,EAAMhB,EAAMvQ,EAAK+Q,EAAM9Q,EACvBuR,GAAO,EAAIjB,EAAMtQ,EAAK6Q,EAAM9Q,EAC5ByR,EAAKf,EAAOa,EAAMX,EAAOY,EAAMxS,EAAI,EACnC0S,EAAKd,EAAOW,EAAMb,EAAOc,EAAMvS,EAAI,EACnC4Q,EAAM7W,KAAK2Y,OAAOZ,EAAMS,GAAOvR,GAAK6Q,EAAMS,GAAOvR,GAAMhH,KAAK2Y,MAAM,EAAG,GACrEC,EAAM/B,GAAO,EAAKA,EAAM,EAAI7W,KAAK2W,GAAKE,EAEtCgC,GADJhC,EAAM7W,KAAK2Y,QAAQZ,EAAMS,GAAOvR,IAAM6Q,EAAMS,GAAOvR,GAAMhH,KAAK2Y,OAAOZ,EAAMS,GAAOvR,GAAK6Q,EAAMS,GAAOvR,KACnF,EAAK6P,EAAM,EAAI7W,KAAK2W,GAAKE,EAEhC,GAANO,GAAWyB,EAAK,EAEnBA,GAAM,EAAI7Y,KAAK2W,GAED,GAANS,GAAWyB,EAAK,IAExBA,GAAM,EAAI7Y,KAAK2W,IAoBhB,IAjBA,IAAImC,EAAW,EAALD,EAAS7Y,KAAK2W,GACpBoC,EAAM/Y,KAAKgZ,KAAKF,EAAM,GAAK,EAAIA,EAAMA,GACrCG,EAAOJ,EAAKE,EACZvR,EAAI,EAAE,EAAIxH,KAAK6X,IAAIoB,EAAO,GAAKjZ,KAAK6X,IAAIoB,EAAO,GAAKjZ,KAAK6X,IAAIoB,EAAO,GACpEC,EAASxB,EAAO1Q,EAChBmS,EAASzB,EAAOzQ,EAChBmS,EAASxB,EAAO5Q,EAChBqS,EAASzB,EAAO3Q,EAChBqS,EAAKtZ,KAAK2X,IAAIiB,GACdW,EAAKvZ,KAAK6X,IAAIe,GACdY,GAAMhS,GAAK0R,EAASK,EAAKF,EAASC,GAClCG,GAAMjS,GAAK4R,EAASG,EAAKJ,EAASG,GAClCI,EAAK,EACLC,EAAK,EAEXpW,EAAS,GAEEqW,EAAI,EAAGA,EAAIb,IAAOa,EAC3B,CACIhB,GAAMK,EAINS,EAAKR,GAHLI,EAAKtZ,KAAK2X,IAAIiB,IAGKS,GAFnBE,EAAKvZ,KAAK6X,IAAIe,IAEmBH,EACjCkB,EAAKP,EAASE,EAAKH,EAASI,EAAKb,EACjC,IAAIvP,GAAM3B,GAAK0R,EAASK,EAAKF,EAASC,GAClCjQ,GAAM7B,GAAK4R,EAASG,EAAKJ,EAASG,GAGlCjU,EAAY,EAAJuU,EACZrW,EAAO8B,GAASwQ,OAAO2D,EAAKzC,GAC5BxT,EAAO8B,EAAQ,GAAKwQ,OAAO4D,EAAKzC,GAChCzT,EAAO8B,EAAQ,GAAKwQ,OAAO6D,EAAKvQ,EAAK4N,GACrCxT,EAAO8B,EAAQ,GAAKwQ,OAAO8D,EAAKtQ,EAAK2N,GACrCzT,EAAO8B,EAAQ,GAAKwQ,OAAO6D,EAAK3C,GAChCxT,EAAO8B,EAAQ,GAAKwQ,OAAO8D,EAAK3C,GAEzCwC,EAAKE,EAAKvQ,EACDsQ,EAAKE,EAAKtQ,EAGd,OAAO9F,GAedsW,eAAgB,SAASpT,EAAMqT,EAAUC,GAElC,IAAIxW,EAAS,KAEb,GAAY,MAARkD,GAA4B,MAAZqT,GAAgC,GAAZA,EACxC,CACI,IAAIjD,EAAM3X,QAAQuX,UAAUqD,GACxBnC,EAAM3X,KAAK2X,IAAId,GACfgB,EAAM7X,KAAK6X,IAAIhB,GAEnBkD,EAAY,MAANA,EAAcA,EAAK,IAAIhU,QAAQU,EAAKT,EAAIS,EAAK5H,MAAQ,EAAG4H,EAAKR,EAAIQ,EAAKhI,OAAS,GAErF,IAAIub,EAAK,IAAIjU,QAAQU,EAAKT,EAAGS,EAAKR,GAC9BgU,EAAK,IAAIlU,QAAQU,EAAKT,EAAIS,EAAK5H,MAAO4H,EAAKR,GAC3CiU,EAAK,IAAInU,QAAQkU,EAAGjU,EAAGS,EAAKR,EAAIQ,EAAKhI,QACrC0b,EAAK,IAAIpU,QAAQU,EAAKT,EAAGkU,EAAGjU,GAEhC+T,EAAK9a,QAAQkb,gBAAgBJ,EAAIrC,EAAKE,EAAKkC,GAC3CE,EAAK/a,QAAQkb,gBAAgBH,EAAItC,EAAKE,EAAKkC,GAC3CG,EAAKhb,QAAQkb,gBAAgBF,EAAIvC,EAAKE,EAAKkC,GAC3CI,EAAKjb,QAAQkb,gBAAgBD,EAAIxC,EAAKE,EAAKkC,IAE3CxW,EAAS,IAAI2C,YAAY8T,EAAGhU,EAAGgU,EAAG/T,EAAG,EAAG,IACjCtK,IAAI,IAAIuK,YAAY+T,EAAGjU,EAAGiU,EAAGhU,EAAG,EAAG,IAC1C1C,EAAO5H,IAAI,IAAIuK,YAAYgU,EAAGlU,EAAGkU,EAAGjU,EAAG,EAAG,IAC1C1C,EAAO5H,IAAI,IAAIuK,YAAYiU,EAAGnU,EAAGmU,EAAGlU,EAAG,EAAG,IAG9C,OAAO1C,GAQd6W,gBAAiB,SAASC,EAAI1C,EAAKE,EAAKhS,GAEvCA,EAAU,MAALA,EAAaA,EAAI,IAAIE,QAC1B,IAAIC,EAAIqU,EAAGrU,EAAIH,EAAEG,EACbC,EAAIoU,EAAGpU,EAAIJ,EAAEI,EAGbqU,EAAKrU,EAAI0R,EAAM3R,EAAI6R,EAEvB,OAAO,IAAI9R,QAHFC,EAAI2R,EAAM1R,EAAI4R,EAGChS,EAAEG,EAAGsU,EAAKzU,EAAEI,IAgBrCsU,mBAAoB,SAASC,EAAUC,EAAMC,EAAQ/U,GAEpD,IAAIhH,EAAQO,QAAQyW,SAAS6E,EAASlc,MAAOiG,YAAYoW,sBACxDzb,QAAQyW,SAAS8E,EAAKnc,MAAO,EAAWiG,YAAYqW,6BACnDrW,YAAYsW,6BAA8B,OAE5C,GAAa,MAATlc,EAEH,OAAOgH,EAIP,IAAImV,EAAanc,EAAMnG,WACnBuiB,EAAcxW,YAAYyW,oBAE1BlB,EAAW,EAEkB,GAHD5a,QAAQyW,SAAS6E,EAASlc,MAAOiG,YAAY0W,+BAAgC,KAK5GnB,EAAW5a,QAAQyW,SAAS6E,EAASlc,MAAOiG,YAAY2W,eAAgB,IAGzE,IAAIC,EAAO,EAqBX,GAnBIrB,EAAW,IAEdqB,EAAO,EAEHrB,GAAY,MAEfqB,EAAO,IAGArB,GAAY,KAEpBqB,EAAO,EAEHrB,IAAa,MAEhBqB,EAAO,IAILL,EAAW3jB,QAAQoN,YAAY6W,kBAAoB,EAEtD,OAAQD,GAEP,KAAK,EACJJ,GAAexW,YAAY8W,qBAC3B,MACD,KAAK,EACJN,GAAexW,YAAY+W,oBAC3B,MACD,KAAK,EACJP,GAAexW,YAAYgX,qBAC3B,MACD,KAAK,EACJR,GAAexW,YAAYiX,oBAI9B,GAAIV,EAAW3jB,QAAQoN,YAAYkX,iBAAmB,EAErD,OAAQN,GAEP,KAAK,EACJJ,GAAexW,YAAYiX,oBAC3B,MACD,KAAK,EACJT,GAAexW,YAAY8W,qBAC3B,MACD,KAAK,EACJN,GAAexW,YAAY+W,oBAC3B,MACD,KAAK,EACJP,GAAexW,YAAYgX,qBAI9B,GAAIT,EAAW3jB,QAAQoN,YAAYmX,kBAAoB,EAEtD,OAAQP,GAEP,KAAK,EACJJ,GAAexW,YAAYgX,qBAC3B,MACD,KAAK,EACJR,GAAexW,YAAYiX,oBAC3B,MACD,KAAK,EACJT,GAAexW,YAAY8W,qBAC3B,MACD,KAAK,EACJN,GAAexW,YAAY+W,oBAI9B,GAAIR,EAAW3jB,QAAQoN,YAAYoX,iBAAmB,EAErD,OAAQR,GAEP,KAAK,EACJJ,GAAexW,YAAY+W,oBAC3B,MACD,KAAK,EACJP,GAAexW,YAAYgX,qBAC3B,MACD,KAAK,EACJR,GAAexW,YAAYiX,oBAC3B,MACD,KAAK,EACJT,GAAexW,YAAY8W,qBAK9B,OAAON,GAUTa,uBAAwB,SAASC,GAEhC,IAAItY,EAAS,EAOb,OALAA,GAAUsY,EAAatX,YAAYiX,sBAAwB,EAC3DjY,IAAWsY,EAAatX,YAAY8W,uBAAyB,EAC7D9X,IAAWsY,EAAatX,YAAYgX,uBAAyB,EAC7DhY,IAAWsY,EAAatX,YAAY+W,sBAAwB,GAW7DQ,mBAAoB,SAASrT,EAAOzC,EAAGC,GAEtC,IAAIZ,GAAS,EAEb,GAAIoD,EAAMsT,eAAehjB,OAAS,EAKjC,IAHA,IAAIijB,EAAOvT,EAAMsT,eAAe,GAC5BpV,EAAM,KAEDlL,EAAI,EAAGA,EAAIgN,EAAMsT,eAAehjB,OAAQ0C,IACjD,CACC,IAAIwgB,EAAUxT,EAAMsT,eAAetgB,GAC/BygB,EAAOhd,QAAQid,YAAYH,EAAKhW,EAAGgW,EAAK/V,EAC3CgW,EAAQjW,EAAGiW,EAAQhW,EAAGD,EAAGC,IAEf,MAAPU,GAAeuV,EAAOvV,KAEzBA,EAAMuV,EACN7W,EAAQ5J,EAAI,GAGbugB,EAAOC,EAIT,OAAO5W,GASR+W,kBAAmB,SAAU3V,EAAM4V,EAAG/d,EAAOge,EAAOC,GAEnD,IAAIrJ,EAAIhU,QAAQyW,SAASrX,EAAOiG,YAAYiY,gBAAiBjY,YAAYoX,gBASzE,GARAW,EAAkB,MAATA,EAAiBA,EAAQpd,QAAQyW,SAASrX,EAAOiG,YAAYkY,aAAa,GACnFF,EAAkB,MAATA,EAAiBA,EAAQrd,QAAQyW,SAASrX,EAAOiG,YAAYmY,aAAa,GAEnFL,EAAErW,EAAIhG,KAAK2c,MAAM3c,KAAKC,IAAI,EAAGD,KAAK2G,IAAIF,EAAK5H,MAAOwd,EAAErW,KACpDqW,EAAEpW,EAAIjG,KAAK2c,MAAM3c,KAAKC,IAAI,EAAGD,KAAK2G,IAAIF,EAAKhI,OAAQ4d,EAAEpW,KACrDoW,EAAExd,MAAQmB,KAAK2c,MAAM3c,KAAKC,IAAI,EAAGD,KAAK2G,IAAIF,EAAK5H,MAAOwd,EAAExd,SACxDwd,EAAE5d,OAASuB,KAAK2c,MAAM3c,KAAKC,IAAI,EAAGD,KAAK2G,IAAIF,EAAKhI,OAAQ4d,EAAE5d,UAErD8d,IAAUrJ,GAAK3O,YAAYmX,iBAAmBxI,GAAK3O,YAAY6W,kBAClEkB,IAAUpJ,GAAK3O,YAAYoX,gBAAkBzI,GAAK3O,YAAYkX,gBAChE,CACC,IAAIhU,EAAM4U,EAAErW,EACZqW,EAAErW,EAAIqW,EAAExd,MACRwd,EAAExd,MAAQ4I,GAGN6U,IAAUpJ,GAAK3O,YAAYmX,iBAAmBxI,GAAK3O,YAAY6W,kBAClEmB,IAAUrJ,GAAK3O,YAAYoX,gBAAkBzI,GAAK3O,YAAYkX,mBAE3DhU,EAAM4U,EAAEpW,EACZoW,EAAEpW,EAAIoW,EAAE5d,OACR4d,EAAE5d,OAASgJ,GAGZ,IAAImV,EAAK1W,YAAYwB,cAAc2U,GAwBnC,OAtBInJ,GAAK3O,YAAYmX,iBAEpBkB,EAAG3W,EAAIoW,EAAErW,EACT4W,EAAG5W,EAAIqW,EAAE5d,OACTme,EAAG/d,MAAQwd,EAAEpW,EACb2W,EAAGne,OAAS4d,EAAExd,OAENqU,GAAK3O,YAAYkX,gBAEzBmB,EAAG3W,EAAIoW,EAAE5d,OACTme,EAAG5W,EAAIqW,EAAExd,MACT+d,EAAG/d,MAAQwd,EAAErW,EACb4W,EAAGne,OAAS4d,EAAEpW,GAENiN,GAAK3O,YAAY6W,kBAEzBwB,EAAG3W,EAAIoW,EAAExd,MACT+d,EAAG5W,EAAIqW,EAAEpW,EACT2W,EAAG/d,MAAQwd,EAAE5d,OACbme,EAAGne,OAAS4d,EAAErW,GAGR,IAAIE,YAAYO,EAAKT,EAAI4W,EAAG5W,EAAGS,EAAKR,EAAI2W,EAAG3W,EAAGQ,EAAK5H,MAAQ+d,EAAG/d,MAAQ+d,EAAG5W,EAAGS,EAAKhI,OAASme,EAAGne,OAASme,EAAG3W,IASjH4W,kBAAmB,SAAUC,EAAKC,EAAQC,GAIzC,IAFA,IAAIrW,EAAM,KAEDlL,EAAI,EAAGA,EAAIqhB,EAAI/jB,OAAS,EAAG0C,IACpC,CACC,IAAI4e,EAAKnb,QAAQ+d,aAAaH,EAAIrhB,GAAGuK,EAAG8W,EAAIrhB,GAAGwK,EAAG6W,EAAIrhB,EAAI,GAAGuK,EAAG8W,EAAIrhB,EAAI,GAAGwK,EAC1E8W,EAAO/W,EAAG+W,EAAO9W,EAAG+W,EAAMhX,EAAGgX,EAAM/W,GAEpC,GAAU,MAANoU,EACJ,CACC,IAAIlR,EAAK6T,EAAMhX,EAAIqU,EAAGrU,EAClBqD,EAAK2T,EAAM/W,EAAIoU,EAAGpU,EAClBiX,EAAK,CAACjL,EAAGoI,EAAI8C,OAAQ9T,EAAKA,EAAKF,EAAKA,GAE9B,MAAN+T,IAAsB,MAAPvW,GAAeA,EAAIwW,OAASD,EAAGC,UAEjDxW,EAAMuW,IAKT,OAAe,MAAPvW,EAAeA,EAAIsL,EAAI,MAchCmL,2BAA4B,SAASC,EAAQrD,EAAIC,GAEhD,IAAIpG,EAAMwJ,EAAOpX,EACboN,EAAOgK,EAAOrX,EACd+N,EAASF,EAAMwJ,EAAO5e,OACtBmV,EAAQP,EAAOgK,EAAOxe,MAGtB6H,EAAOsT,EAAGhU,EACVa,EAAOoT,EAAGjU,EAmBd,GAjBIgU,EAAGhU,EAAIiU,EAAGjU,IAEZU,EAAOuT,EAAGjU,EACVa,EAAOmT,EAAGhU,GAIRa,EAAO+M,IAET/M,EAAO+M,GAGLlN,EAAO2M,IAET3M,EAAO2M,GAGL3M,EAAOG,EAET,OAAO,EAIT,IAAID,EAAOoT,EAAG/T,EACVa,EAAOmT,EAAGhU,EACVkD,EAAK8Q,EAAGjU,EAAIgU,EAAGhU,EAEnB,GAAIhG,KAAKsX,IAAInO,GAAM,KACnB,CACE,IAAIyJ,GAAKqH,EAAGhU,EAAI+T,EAAG/T,GAAKkD,EACpB8J,EAAI+G,EAAG/T,EAAI2M,EAAIoH,EAAGhU,EACtBY,EAAOgM,EAAIlM,EAAOuM,EAClBnM,EAAO8L,EAAI/L,EAAOoM,EAGpB,GAAIrM,EAAOE,EACX,CACE,IAAIW,EAAMX,EACVA,EAAOF,EACPA,EAAOa,EAcT,OAVIX,EAAOiN,IAETjN,EAAOiN,GAGLnN,EAAOiN,IAETjN,EAAOiN,KAGLjN,EAAOE,IAmBZwW,SAAU,SAASD,EAAQrX,EAAGC,GAE7B,OAAQoX,EAAOrX,GAAKA,GAAKqX,EAAOrX,EAAIqX,EAAOxe,OAASmH,GAClDqX,EAAOpX,GAAKA,GAAKoX,EAAOpX,EAAIoX,EAAO5e,QAAUwH,GAahDsX,WAAY,SAAS3K,EAAGK,GAEvB,IAAIuK,EAAK5K,EAAE/T,MACP4e,EAAK7K,EAAEnU,OACPif,EAAKzK,EAAEpU,MACP8e,EAAK1K,EAAExU,OAEX,GAAIif,GAAM,GAAKC,GAAM,GAAKH,GAAM,GAAKC,GAAM,EAEvC,OAAO,EAGX,IAAIhF,EAAK7F,EAAE5M,EACP0S,EAAK9F,EAAE3M,EACP2X,EAAK3K,EAAEjN,EACP6X,EAAK5K,EAAEhN,EAOX,OAJA0X,GAAME,EACNL,GAAM/E,EACNgF,GAAM/E,IAHNgF,GAAME,GAKQA,GAAMF,EAAKjF,KACvBkF,EAAKE,GAAMF,EAAKjF,KAChB8E,EAAK/E,GAAM+E,EAAKI,KAChBH,EAAK/E,GAAM+E,EAAKI,IAanBC,kBAAmB,SAASrV,EAAOzC,EAAGC,EAAG8X,EAASpX,EAAK1G,GAMtD,GAHA0G,EAAc,MAAPA,EAAeA,EAAM,EAC5B1G,EAAc,MAAPA,EAAeA,EAAM,GAF5B8d,EAAsB,MAAXA,EAAmBA,EAAU,GAI1B,EACd,CACC,IAAIhE,EAAKtR,EAAMlC,aACXyX,EAAKvV,EAAMjC,aACX9G,EAAI+I,EAAM5J,MACVY,EAAIgJ,EAAMhK,OAEVwf,EAAQ/e,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAY2Z,iBAAmBzV,EAAM0V,KAAKjV,MAEhF+U,EAAQ,IAEP/e,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAY6Z,kBAAkB,IAE/DJ,EAAKvV,EAAMxC,EAAIgY,EAAQ,EACvBxe,EAAIwe,IAIJlE,EAAKtR,EAAMzC,EAAIiY,EAAQ,EACvBve,EAAIue,IAINve,EAAIM,KAAKC,IAAI0G,EAAKjH,EAAIqe,GACtBte,EAAIO,KAAKC,IAAI0G,EAAKlH,EAAIse,GAElB9d,EAAM,IAETP,EAAIM,KAAK2G,IAAIjH,EAAGO,GAChBR,EAAIO,KAAK2G,IAAIlH,EAAGQ,IAGjB,IAAIwG,EAAO,IAAIP,YAAY6T,EAAKra,EAAI,EAAGse,EAAKve,EAAI,EAAGC,EAAGD,GAClD4e,EAAQnf,QAAQuX,UAAUvX,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAY2W,iBAAmB,GAE3F,GAAa,GAATmD,EACJ,CACC,IAAI1G,EAAM3X,KAAK2X,KAAK0G,GAChBxG,EAAM7X,KAAK6X,KAAKwG,GAEhBhE,GADAN,EAAK,IAAIhU,QAAQ0C,EAAMlC,aAAckC,EAAMjC,cACtCtH,QAAQkb,gBAAgB,IAAIrU,QAAQC,EAAGC,GAAI0R,EAAKE,EAAKkC,IAC9D/T,EAAIqU,EAAGrU,EACPC,EAAIoU,EAAGpU,EAGR,OAAO/G,QAAQoe,SAAS7W,EAAMT,EAAGC,GAGlC,OAAO,GAgBRqY,UAAW,SAASC,EAAWC,GAW9B,IATA,IAAIlL,EAAa,EACbQ,EAAY,EAGZ2K,GAAQ,EACR3iB,EAAOyiB,EACPtL,EAAIxb,SAASuG,KACbkV,EAAIzb,SAAS2C,gBAEF,MAAR0B,GAAgBA,GAAQmX,GAAKnX,GAAQoX,IAAMuL,GAClD,CACC,IAAIngB,EAAQY,QAAQiM,gBAAgBrP,GAEvB,MAATwC,IAEHmgB,EAAQA,GAA2B,SAAlBngB,EAAMogB,UAGxB5iB,EAAOA,EAAK2O,WAGb,IAAK+T,IAAiBC,EACtB,CACC,IAAIjL,EAAStU,QAAQuU,wBAAwB8K,EAAU3M,eACvD0B,GAAcE,EAAOxN,EACrB8N,GAAaN,EAAOvN,EAGrB,IAAI0Y,EAAIJ,EAAUK,wBAQlB,OANS,MAALD,IAEHrL,GAAcqL,EAAEtL,KAChBS,GAAa6K,EAAE9K,KAGT,IAAI9N,QAAQuN,EAAYQ,IAShCL,wBAAyB,SAAS3Y,GAEjC,GAAIhE,SAASU,UAEZ,OAAO,IAAIuO,QAAQjL,EAAIkD,KAAK6gB,WAAY/jB,EAAIkD,KAAKoE,WAIjD,IAAI0c,EAAMhkB,EAAIikB,aAAejkB,EAAIkkB,aAKjC,OAAO,IAAIjZ,QAHK,MAAP+Y,QAAsCthB,IAAvBpF,OAAO6mB,YAA6B7mB,OAAO6mB,aAAexnB,SAAS2C,iBAAmB3C,SAASuG,KAAKyM,YAAchT,SAASuG,MAAM6gB,WACzI,MAAPC,QAAsCthB,IAAvBpF,OAAO8mB,YAA6B9mB,OAAO8mB,aAAeznB,SAAS2C,iBAAmB3C,SAASuG,KAAKyM,YAAchT,SAASuG,MAAMoE,YAmB3J+c,gBAAiB,SAASrjB,EAAMsjB,EAAkBC,GAEjDD,EAAwC,MAApBA,GAA4BA,EAChDC,EAAsC,MAAnBA,GAA2BA,EAQ9C,IANA,IAAIvkB,EAAe,MAARgB,EAAgBA,EAAK8V,cAAgBna,SAC5Cwb,EAAInY,EAAIkD,KACRkV,EAAIpY,EAAIV,gBACRmJ,EAAS,IAAIwC,QACb0Y,GAAQ,EAEG,MAAR3iB,GAAgBA,GAAQmX,GAAKnX,GAAQoX,GAC5C,CACM1H,MAAM1P,EAAK+iB,aAAgBrT,MAAM1P,EAAKsG,aAE1CmB,EAAOyC,GAAKlK,EAAK+iB,WACjBtb,EAAO0C,GAAKnK,EAAKsG,WAGlB,IAAI9D,EAAQY,QAAQiM,gBAAgBrP,GAEvB,MAATwC,IAEHmgB,EAAQA,GAA2B,SAAlBngB,EAAMogB,UAGxB5iB,EAAO,EAAqBA,EAAK2O,WAAa,KAG/C,IAAKgU,GAASY,EACd,CACC,IAAIC,EAASpgB,QAAQuU,wBAAwB3Y,GAE7CyI,EAAOyC,GAAKsZ,EAAOtZ,EACnBzC,EAAO0C,GAAKqZ,EAAOrZ,EAGpB,OAAO1C,GAoBRgc,aAAc,SAAShB,EAAWvY,EAAGC,GAEpC,IAAIqZ,EAASpgB,QAAQigB,gBAAgBZ,GAAW,GAC5C/K,EAAStU,QAAQof,UAAUC,GAK/B,OAHA/K,EAAOxN,GAAKsZ,EAAOtZ,EACnBwN,EAAOvN,GAAKqZ,EAAOrZ,EAEZ,IAAIF,QAAQC,EAAIwN,EAAOxN,EAAGC,EAAIuN,EAAOvN,IAgB7C4G,MAAO,SAASH,EAAK8S,GAIpB,OAFAA,EAAQA,GAAS,MAEF,MAAP9S,EAAeA,EAAIlH,QAAQ,IAAIia,OAAO,KAAOD,EAAQ,KAAM,KAAM,IAAM,MAgBhFE,MAAO,SAAShT,EAAK8S,GAIpB,OAFAA,EAAQA,GAAS,MAEF,MAAP9S,EAAeA,EAAIlH,QAAQ,IAAIia,OAAO,IAAMD,EAAQ,MAAO,KAAM,IAAM,MAiBhF7S,KAAM,SAASD,EAAK8S,GAEnB,OAAOtgB,QAAQ2N,MAAM3N,QAAQwgB,MAAMhT,EAAK8S,GAAQA,IAajDG,UAAW,SAAS/F,GAEnB,OAAQpO,MAAMD,WAAWqO,KAAOgG,SAAShG,KAAoB,iBAAP,GAAmBA,EAAEtV,cAAcnN,QAAQ,MAAQ,IAY1G0oB,UAAW,SAASjG,GAEnB,OAAOjK,OAAO3W,SAAS4gB,MAAQjK,OAAOiK,IAUvCkG,IAAK,SAASlG,EAAGyC,GAEhB,OAASzC,EAAIyC,EAAKA,GAAKA,GAmBxBY,aAAc,SAAUlG,EAAIC,EAAI+I,EAAIzF,EAAId,EAAIC,EAAIC,EAAIC,GAEnD,IAAIqG,GAAUrG,EAAKF,IAAOsG,EAAKhJ,IAAS2C,EAAKF,IAAOc,EAAKtD,GAIrDiJ,IAHWvG,EAAKF,IAAOxC,EAAKyC,IAASE,EAAKF,IAAO1C,EAAKyC,IAGxCwG,EACdE,IAHWH,EAAKhJ,IAAOC,EAAKyC,IAASa,EAAKtD,IAAOD,EAAKyC,IAGxCwG,EAElB,OAAGC,GAAM,GAAOA,GAAM,GAAOC,GAAM,GAAOA,GAAM,EAMxC,IAAIna,QAHHgR,EAAKkJ,GAAMF,EAAKhJ,GAChBC,EAAKiJ,GAAM3F,EAAKtD,IAMlB,MAmBRmF,YAAa,SAAS4D,EAAIzF,EAAId,EAAIC,EAAI0G,EAAIC,GAQzC,IACIC,EADAC,GAHJH,GAAMJ,IAHNvG,GAAMuG,IAINK,GAAM9F,IAHNb,GAAMa,GAUF+F,EAFAC,GAAW,IAQXA,GAFAH,EAAK3G,EAAK2G,GAEK3G,GADf4G,EAAK3G,EAAK2G,GACe3G,IAEV,EARH,EAcF6G,EAAUA,GAAW9G,EAAKA,EAAKC,EAAKA,GAIlD,IAAI8G,EAAQJ,EAAKA,EAAKC,EAAKA,EAAKC,EAOhC,OALIE,EAAQ,IAERA,EAAQ,GAGLA,GAmBLC,WAAY,SAAST,EAAIzF,EAAId,EAAIC,EAAI0G,EAAIC,GAE3C,OAAOpgB,KAAKsX,KAAKmC,EAAKa,GAAM6F,GAAM3G,EAAKuG,GAAMK,EAAK5G,EAAKc,EAAKb,EAAKsG,GAChE/f,KAAKqY,MAAMoB,EAAKa,IAAOb,EAAKa,IAAOd,EAAKuG,IAAOvG,EAAKuG,KAkBtDU,YAAa,SAASV,EAAIzF,EAAId,EAAIC,EAAI0G,EAAIC,GAMzC,IAAIM,GAFJP,GAAMJ,IADNtG,GAAMa,IAEN8F,GAAM9F,IAHNd,GAAMuG,GAuBN,OAjBW,GAAPW,IAEAA,EAAMP,EAAK3G,EAAK4G,EAAK3G,GAEX,IAIZiH,GAFAP,GAAM3G,GAEKA,GADX4G,GAAM3G,GACeA,GAEX,IAENiH,EAAM,GAKJA,EAAM,GAAQ,EAAMA,EAAM,EAAO,EAAI,GAS9C9Y,eAAgB,SAASC,EAAOC,GAG5BH,UAAUC,eAAe5F,MAAMpL,KAAMqL,YAStCyH,eAAgB,SAAS7B,EAAOe,EAAMiB,GAExClC,UAAU+B,eAAe1H,MAAMpL,KAAMqL,YAStCoI,QAAS,SAASvO,EAAMwO,EAAMjH,EAAQ2E,EAAM4B,EAAOW,GAElD5C,UAAU0C,QAAQrI,MAAMpL,KAAMqL,YAa/B+G,WAAY,SAASlN,EAAM6C,GAEtBO,QAAQ0Q,MAAM9T,GAIbA,EAAKwC,MAAM6T,OAFRxT,GAAS,IAEQ,GAKA,iBAAoBA,EAAM,EAAK,IAG/C7H,SAASE,aAA4C,IAA3BS,SAAqB,cAAqBA,SAASC,aAAe,GAIhGoE,EAAKwC,MAAM6T,OAFRxT,GAAS,IAEQ,GAIA,iBAAmBA,EAAQ,IAKhD7C,EAAKwC,MAAMuL,QAAWlL,EAAQ,KAcnCgiB,YAAa,SAAS9kB,GAEf,IAAI+kB,EAAY,KAetB,OAbI9pB,SAASM,QAAiC,cAAvBK,SAASmH,aAEzBgiB,EAAYnpB,SAASG,cAAcd,SAASe,WAAa,WAC/CoD,aAAa,MAAOY,GAC9B+kB,EAAUtiB,MAAMuiB,YAAc,UAIpCD,EAAYnpB,SAASG,cAAc,QACzBqD,aAAa,MAAOY,GAC9B+kB,EAAU3lB,aAAa,SAAU,MAG3B2lB,GASRE,UAAW,SAASC,EAAOC,GAE1BA,EAA0B,MAAbA,GAAqBA,EAClC,IAAIC,EAAS,IAAIle,aAwBjB,OAvBAge,EAAMG,MAAK,SAASC,EAAIC,GAEvB,IAAIpH,EAAKiH,EAAOxe,IAAI0e,GAEV,MAANnH,IAEHA,EAAKqH,WAAWC,OAAOH,GAAIhc,MAAMkc,WAAWE,gBAC5CN,EAAO9d,IAAIge,EAAInH,IAGhB,IAAIC,EAAKgH,EAAOxe,IAAI2e,GAEV,MAANnH,IAEHA,EAAKoH,WAAWC,OAAOF,GAAIjc,MAAMkc,WAAWE,gBAC5CN,EAAO9d,IAAIie,EAAInH,IAGhB,IAAIuH,EAAOH,WAAWI,QAAQzH,EAAIC,GAElC,OAAgB,GAARuH,EAAa,EAAOA,EAAO,GAAMR,EAAa,GAAK,KAGrDD,GAaRW,aAAc,SAASpjB,GAEtB,GAAa,MAATA,EACJ,CACC,IACIqjB,EADQrjB,EAAM6G,MAAM,KACF,GAEtB,GAAIwc,EAAUxqB,QAAQ,KAAO,EAE5B,OAAOwqB,EAIT,MAAO,IAaRC,cAAe,SAAStjB,GAEvB,IAAIiF,EAAS,GAEb,GAAa,MAATjF,EAIH,IAFA,IAAIujB,EAAQvjB,EAAM6G,MAAM,KAEf1J,EAAI,EAAGA,EAAIomB,EAAM9oB,OAAQ0C,IAE7BomB,EAAMpmB,GAAGtE,QAAQ,KAAO,GAE3BoM,EAAOC,KAAKqe,EAAMpmB,IAKrB,OAAO8H,GAURue,iBAAkB,SAASxjB,EAAOqjB,GAEjC,GAAa,MAATrjB,GAA8B,MAAbqjB,EAKpB,IAHA,IAAII,EAASzjB,EAAM6G,MAAM,KACrB6c,EAAM,EAEDvmB,EAAI,EAAGA,EAAIsmB,EAAOhpB,OAAQ0C,IACnC,CACC,GAAIsmB,EAAOtmB,IAAMkmB,EAEhB,OAAOK,EAGRA,GAAOD,EAAOtmB,GAAG1C,OAAS,EAI5B,OAAQ,GASTkpB,aAAc,SAAS3jB,EAAOqjB,GAgB7B,OAdIziB,QAAQ4iB,iBAAiBxjB,EAAOqjB,GAAa,IAEnC,MAATrjB,EAEHA,EAAQ,GAEAA,EAAMvF,OAAS,GAAuC,KAAlCuF,EAAM8G,OAAO9G,EAAMvF,OAAS,KAExDuF,GAAS,KAGVA,GAASqjB,GAGHrjB,GASR4jB,gBAAiB,SAAS5jB,EAAOqjB,GAEhC,IAAIpe,EAAS,GAEb,GAAa,MAATjF,EAIH,IAFA,IAAIyjB,EAASzjB,EAAM6G,MAAM,KAEhB1J,EAAI,EAAGA,EAAIsmB,EAAOhpB,OAAQ0C,IAE9BsmB,EAAOtmB,IAAMkmB,GAEhBpe,EAAOC,KAAKue,EAAOtmB,IAKtB,OAAO8H,EAAOuC,KAAK,MASpBqc,oBAAqB,SAAS7jB,GAE7B,IAAIiF,EAAS,GAEb,GAAa,MAATjF,EAIH,IAFA,IAAIyjB,EAASzjB,EAAM6G,MAAM,KAEhB1J,EAAI,EAAGA,EAAIsmB,EAAOhpB,OAAQ0C,IAG9BsmB,EAAOtmB,GAAGtE,QAAQ,MAAQ,GAE7BoM,EAAOC,KAAKue,EAAOtmB,IAKtB,OAAO8H,EAAOuC,KAAK,MAgBpBsc,cAAe,SAAStZ,EAAOiY,EAAO7d,EAAKvE,GAE1C,GAAa,MAAToiB,GAAiBA,EAAMhoB,OAAS,EACpC,CACC+P,EAAMuZ,cACN,IAEC,IAAK,IAAI5mB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC,GAAgB,MAAZslB,EAAMtlB,GACV,CACC,IAAI6C,EAAQY,QAAQojB,SAASxZ,EAAMyZ,SAASxB,EAAMtlB,IAAKyH,EAAKvE,GAC5DmK,EAAMwZ,SAASvB,EAAMtlB,GAAI6C,IAI5B,QAECwK,EAAM0Z,eAkBTF,SAAU,SAAShkB,EAAO4E,EAAKvE,GAE9B,IAAI8jB,EAAmB,MAAT9jB,SAA0C,IAAjBA,EAAY,QAAoBA,EAAM5F,OAAS,GAEtF,GAAa,MAATuF,GAAiC,GAAhBA,EAAMvF,OAEtB0pB,IAEHnkB,EAAQ4E,EAAM,IAAMvE,EAAQ,UAK7B,GAAIL,EAAMjC,UAAU,EAAG6G,EAAInK,OAAS,IAAMmK,EAAM,IAChD,CACC,IAAIoM,EAAOhR,EAAMnH,QAAQ,KAIxBmH,EAFGmkB,EAEKvf,EAAM,IAAMvE,GAAU2Q,EAAO,EAAK,IAAMhR,EAAMjC,UAAUiT,IAIvDA,EAAO,GAAKA,GAAQhR,EAAMvF,OAAS,EAAK,GAAKuF,EAAMjC,UAAUiT,EAAO,OAI/E,CACC,IAAIjK,EAAQ/G,EAAMnH,QAAQ,IAAM+L,EAAM,KAEtC,GAAImC,EAAQ,GAEX,GAAIod,EACJ,CACC,IAAIC,EAAyC,KAAlCpkB,EAAM8G,OAAO9G,EAAMvF,OAAS,GAAa,GAAK,IACzDuF,EAAQA,EAAQokB,EAAMxf,EAAM,IAAMvE,EAAQ,UAKvC2Q,EAAOhR,EAAMnH,QAAQ,IAAKkO,EAAQ,GAIrC/G,EAFGmkB,EAEKnkB,EAAMjC,UAAU,EAAGgJ,EAAQ,GAAKnC,EAAM,IAAMvE,GAAU2Q,EAAO,EAAK,IAAMhR,EAAMjC,UAAUiT,IAIxFhR,EAAMjC,UAAU,EAAGgJ,IAAWiK,EAAO,EAAK,IAAMhR,EAAMjC,UAAUiT,IAM5E,OAAOhR,GA6BRqkB,kBAAmB,SAAS7Z,EAAOiY,EAAO7d,EAAK0f,EAAMjkB,GAEpD,GAAa,MAAToiB,GAAiBA,EAAMhoB,OAAS,EACpC,CACC+P,EAAMuZ,cACN,IAEC,IAAK,IAAI5mB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC,GAAgB,MAAZslB,EAAMtlB,GACV,CACC,IAAI6C,EAAQY,QAAQ2jB,aACnB/Z,EAAMyZ,SAASxB,EAAMtlB,IACrByH,EAAK0f,EAAMjkB,GACZmK,EAAMwZ,SAASvB,EAAMtlB,GAAI6C,IAI5B,QAECwK,EAAM0Z,eAkBTK,aAAc,SAASvkB,EAAO4E,EAAK0f,EAAMjkB,GAExC,GAAa,MAATL,GAAiC,GAAhBA,EAAMvF,OAIzBuF,EAFGK,GAAkB,MAATA,EAEJuE,EAAI,IAAI0f,EAIR1f,EAAI,SAId,CACC,IAAImC,EAAQ/G,EAAMnH,QAAQ+L,EAAI,KAE9B,GAAImC,EAAQ,EACZ,CACC,IAAIqd,EAAuC,KAAhCpkB,EAAM8G,OAAO9G,EAAMvF,OAAO,GAAa,GAAK,IAItDuF,EAFGK,GAAkB,MAATA,EAEJL,EAAQokB,EAAMxf,EAAM,IAAM0f,EAI1BtkB,EAAQokB,EAAMxf,EAAM,SAI9B,CACC,IAAI4f,EAAOxkB,EAAMnH,QAAQ,IAAKkO,GAC1BoC,EAAM,GAITA,EAFGqb,EAAO,EAEHxkB,EAAMjC,UAAUgJ,EAAMnC,EAAInK,OAAO,GAIlCuF,EAAMjC,UAAUgJ,EAAMnC,EAAInK,OAAO,EAAG+pB,GAK1Crb,EAFY,MAAT9I,EAEG3F,SAASyO,GAAOmb,EAEdjkB,EAEF3F,SAASyO,GAAOmb,EAIhB5pB,SAASyO,IAAQmb,EAGxBtkB,EAAQA,EAAMjC,UAAU,EAAGgJ,GAASnC,EAAM,IAAMuE,GAC7Cqb,GAAQ,EAAKxkB,EAAMjC,UAAUymB,GAAQ,KAI1C,OAAOxkB,GAWRykB,oBAAqB,SAASC,EAAOC,GAEpC,IAAI9Z,GAAM,GACNE,GAAM,GAsBV,OAnBI2Z,GAASze,YAAY2e,WAExB/Z,EAAK,EAEG6Z,GAASze,YAAY4e,cAE7Bha,GAAM,GAIH8Z,GAAU1e,YAAY6e,UAEzB/Z,EAAK,EAEG4Z,GAAU1e,YAAY8e,eAE9Bha,GAAM,GAGA,IAAItD,QAAQoD,EAAIE,IA4BxBia,iBAAkB,SAASre,EAAMse,EAAUC,EAAYC,EAAWC,GAEjEH,EAAwB,MAAZA,EAAoBA,EAAWhf,YAAYof,iBACvDH,EAA4B,MAAdA,EAAsBA,EAAajf,YAAYqf,mBAC7D,IAAIC,EAAMpsB,SAASG,cAAc,OAQjC,GALAisB,EAAIvlB,MAAMklB,WAAaA,EACvBK,EAAIvlB,MAAMilB,SAAWvjB,KAAK2c,MAAM4G,GAAY,KAC5CM,EAAIvlB,MAAMwlB,WAAa9jB,KAAK2c,MAAM4G,EAAWhf,YAAYwf,aAAe,KAGvD,MAAbL,EACJ,EACMA,EAAYnf,YAAYyf,YAAczf,YAAYyf,YAEtDH,EAAIvlB,MAAM2lB,WAAa,SAGnBP,EAAYnf,YAAY2f,cAAgB3f,YAAY2f,cAExDL,EAAIvlB,MAAMolB,UAAY,UAGvB,IAAIS,EAAW,IAEVT,EAAYnf,YAAY6f,iBAAmB7f,YAAY6f,gBAE3DD,EAAS3gB,KAAK,cAGVkgB,EAAYnf,YAAY8f,qBAAuB9f,YAAY8f,oBAE/DF,EAAS3gB,KAAK,gBAGX2gB,EAASprB,OAAS,IAErB8qB,EAAIvlB,MAAMwU,eAAiBqR,EAASre,KAAK,MAK3C+d,EAAIvlB,MAAMogB,SAAW,WACrBmF,EAAIvlB,MAAM6D,WAAa,SACvB0hB,EAAIvlB,MAAMgmB,QAAWxtB,SAAkB,UAAI,SAAW,eACtD+sB,EAAIvlB,MAAMimB,KAAO,IAEA,MAAbd,GAEHI,EAAIvlB,MAAMO,MAAQ4kB,EAAY,KAC9BI,EAAIvlB,MAAMkmB,WAAa,UAIvBX,EAAIvlB,MAAMkmB,WAAa,SAIxBX,EAAI3S,UAAYjM,EAChBxN,SAASuG,KAAK7C,YAAY0oB,GAG1B,IAAIY,EAAO,IAAIve,YAAY,EAAG,EAAG2d,EAAItQ,YAAasQ,EAAIljB,cAGtD,OAFAlJ,SAASuG,KAAK0M,YAAYmZ,GAEnBY,GAMRC,WAAY,SAAS7c,EAAOqB,EAAO6X,EAAOhK,EAAIC,GAE7CD,EAAY,MAANA,EAAcA,EAAK,EACzBC,EAAY,MAANA,EAAcA,EAAK,EACzB9N,EAAkB,MAATA,EAAiBA,EAAQ,EAErB,MAAT6X,IAGHA,EAAQ,CADIlZ,EAAM8c,WACHC,YAGhB,IAAIzG,EAAOtW,EAAMa,UACbnF,EAAS,KAGTshB,EAAgB1G,EAAK2G,kBACzB3G,EAAK4G,kBAAiB,GAKtB,IAAIC,EAAW7G,EAAK6G,SAChBC,EAAc9G,EAAK8G,YAEnBpd,EAAMqd,SAAW3gB,YAAY4gB,aAEhChH,EAAK6G,SAAWvtB,SAASsC,gBAAgBwK,YAAY6gB,OAAQ,KAC7DjH,EAAKkH,OAAOlqB,YAAYgjB,EAAK6G,UAG7B7G,EAAK8G,YAAcxtB,SAASsC,gBAAgBwK,YAAY6gB,OAAQ,KAChEjH,EAAKkH,OAAOlqB,YAAYgjB,EAAK8G,eAI7B9G,EAAK6G,SAAW7G,EAAK6G,SAASM,WAAU,GACxCnH,EAAKkH,OAAOlqB,YAAYgjB,EAAK6G,UAG7B7G,EAAK8G,YAAc9G,EAAK8G,YAAYK,WAAU,GAC9CnH,EAAKkH,OAAOlqB,YAAYgjB,EAAK8G,cAI9B,IAAIM,EAAYpH,EAAKqH,eACrBrH,EAAKoH,UAAY,IAAIxf,QAAQgR,EAAIC,GAGjC,IAAIyO,EAAO,IAAIC,sBAAsB7d,EAAMa,UAAWQ,EAAO6X,GAE7D,IAGCxd,GADU,IAAIoiB,SACDC,OAAO/d,EAAMa,WAE3B,QAEC+c,EAAKI,UACL1H,EAAKoH,UAAYA,EACjBpH,EAAKkH,OAAO3a,YAAYyT,EAAK6G,UAC7B7G,EAAKkH,OAAO3a,YAAYyT,EAAK8G,aAC7B9G,EAAK6G,SAAWA,EAChB7G,EAAK8G,YAAcA,EACnB9G,EAAK4G,iBAAiBF,GAGvB,OAAOthB,GAmBRuiB,qBAAsB,SAASC,EAAWle,EAAOme,EAAYC,GAE5D,GAAIF,EAAY,EAIf,OAAO,EAIRE,EAAoB,MAAVA,EAAkBA,EAAS,EAErC,IAAIC,GAHJF,EAA4B,MAAdA,EAAsBA,EAAazhB,YAAY4hB,yBAGzBtnB,MAAkB,EAATonB,EACzCG,EAAsBJ,EAAWvnB,OAAmB,EAATwnB,EAI3CI,EAAcxe,EAAMye,iBAAiBjgB,QACrCkgB,EAAK1e,EAAMa,UAAU8d,WACzBH,EAAYxnB,OAAS0nB,EACrBF,EAAY5nB,QAAU8nB,EACtB,IAAIE,EAAaJ,EAAYxnB,MAYzB6nB,EAJmBD,EAPLJ,EAAY5nB,QAKFynB,EAAqBE,GAY7CO,EAAW3mB,KAAKqY,KAAK0N,GACrBa,EAAuB5mB,KAAKqY,KAAKqO,GACjCG,EAAcF,EAAWC,EACzBE,EAAiBH,EAAWC,EAOhC,GAAIC,EAAc,GAAKC,EAAiBf,EACxC,CACC,IAAIgB,EAAcD,EAAiBf,EACnCe,EAAiBf,EACjBc,GAAeE,EAGZD,EAAiB,GAAKD,EAAcd,IAEnCgB,EAAcF,EAAcd,EAChCc,EAAcd,EACde,GAAkBC,GASnB,IANA,IAAIC,EAAoBhnB,KAAKgZ,KAAK6N,GAAe7mB,KAAKgZ,KAAK8N,GAEvDG,EAAW,EAIRD,EAAoBjB,GAC3B,CAMC,IAAImB,EAAyBlnB,KAAKmnB,MAAMN,GAAeA,EACnDO,EAA4BpnB,KAAKmnB,MAAML,GAAkBA,EAiC7D,GA7B8B,GAA1BI,IAEHA,EAAyBlnB,KAAKmnB,MAAMN,EAAY,GAAKA,GAErB,GAA7BO,IAEHA,EAA4BpnB,KAAKmnB,MAAML,EAAe,GAAKA,GAKxDC,EAAc,EAYlBF,GAPCE,EAFGG,EAAyBE,EAEdF,EAIAE,EAIfN,GAAkCC,EAClCC,EAAoBhnB,KAAKgZ,KAAK6N,GAAe7mB,KAAKgZ,KAAK8N,KAEvDG,EAEe,GAEd,MAUF,OAJkBf,EAAqBW,EACjBJ,EAGP,QAsBhBnlB,KAAM,SAASuG,EAAO/M,EAAKic,EAAIC,EAAItX,EAAGD,GAErCsX,EAAY,MAANA,EAAcA,EAAK,EACzBC,EAAY,MAANA,EAAcA,EAAK,EAEd,MAAPlc,EAGHA,EADU1C,OAAOivB,OACP5vB,SAIVqD,EAAIusB,OAIwB,GAAzB5vB,SAASC,cAEZoD,EAAImG,QAAQ,oFAGb,IAAIoc,EAASxV,EAAMye,iBACfnd,EAAKnJ,KAAKgZ,KAAKjC,EAAKsG,EAAOrX,GAC3BqD,EAAKrJ,KAAKgZ,KAAKhC,EAAKqG,EAAOpX,GAgB/B,GAdS,MAALvG,IAEHA,EAAIM,KAAKgZ,KAAKqE,EAAOxe,MAAQkY,GAAM/W,KAAKgZ,KAAKhZ,KAAKgZ,KAAKqE,EAAOrX,GAAKqX,EAAOrX,IAGlE,MAALvG,IAEHA,EAAIO,KAAKgZ,KAAKqE,EAAO5e,OAASuY,GAAMhX,KAAKgZ,KAAKhZ,KAAKgZ,KAAKqE,EAAOpX,GAAKoX,EAAOpX,IAOxEnP,SAASE,OAAkC,IAAzBS,SAASC,aAC/B,CAKC,IAJA,IAAI4vB,EAAO,eAEPC,EAAO9vB,SAASyD,qBAAqB,QAEhCO,EAAI,EAAGA,EAAI8rB,EAAKxuB,OAAQ0C,IAEhC6rB,GAAQC,EAAK9rB,GAAGkW,UAMjB,IAHA2V,GAAQ,UAGC7rB,EAAI,EAAGA,EAAIhE,SAASwF,YAAYlE,OAAQ0C,IAEhD,IAEC6rB,GAAQ7vB,SAASwF,YAAYxB,GAAG2B,QAEjC,MAAO4H,IAMRsiB,GAAQ,4CAGRA,GAAQ,uDAAyD5nB,EAAI,aAAeD,EAAI,2CAA6C0J,EAAK,UAAYE,EAAK,QAC3Jie,GAAQzf,EAAM0W,UAAUrN,UACxBoW,GAAQ,4BAERxsB,EAAImG,QAAQqmB,GACZxsB,EAAI0sB,YAGL,CAKC,IAJA1sB,EAAImG,QAAQ,gBAERsmB,EAAO9vB,SAASyD,qBAAqB,QAEhCO,EAAI,EAAGA,EAAI8rB,EAAKxuB,OAAQ0C,IAEhCX,EAAImG,QAAQ/B,QAAQwS,aAAa6V,EAAK9rB,KAGvC,IAAIgsB,EAAQhwB,SAASyD,qBAAqB,QAE1C,IAASO,EAAI,EAAGA,EAAIgsB,EAAM1uB,OAAQ0C,IAEjCX,EAAImG,QAAQ/B,QAAQwS,aAAa+V,EAAMhsB,KAGxC,IAAIisB,EAASjwB,SAASyD,qBAAqB,SAE3C,IAASO,EAAI,EAAGA,EAAIisB,EAAO3uB,OAAQ0C,IAElCX,EAAImG,QAAQ/B,QAAQwS,aAAagW,EAAOjsB,KAGzCX,EAAImG,QAAQ,mDACZnG,EAAI0sB,QAEJ,IAAIG,EAAQ7sB,EAAIlD,cAAc,OAC9B+vB,EAAMjJ,SAAW,WACjBiJ,EAAM/b,SAAW,SACjB+b,EAAMrpB,MAAMO,MAAQa,EAAI,KACxBioB,EAAMrpB,MAAMG,OAASgB,EAAI,KAGzB,IAAIokB,EAAM/oB,EAAIlD,cAAc,OAC5BisB,EAAIvlB,MAAMogB,SAAW,WACrBmF,EAAIvlB,MAAM+U,KAAOlK,EAAK,KACtB0a,EAAIvlB,MAAMuV,IAAMxK,EAAK,KAKrB,IAHA,IAAIvN,EAAO+L,EAAM0W,UAAU/R,WACvBob,EAAM,KAEK,MAAR9rB,GACP,CACC,IAAIuK,EAAQvK,EAAKwpB,WAAU,GAEvBxpB,GAAQ+L,EAAMsW,KAAK6G,SAAS6C,iBAE/BF,EAAMxsB,YAAYkL,GAClBuhB,EAAMvhB,GAINwd,EAAI1oB,YAAYkL,GAGjBvK,EAAOA,EAAK2Q,YAGb3R,EAAIkD,KAAK7C,YAAYwsB,GAEC,MAAlB9D,EAAIrX,YAEP1R,EAAIkD,KAAK7C,YAAY0oB,GAGX,MAAP+D,IAEHA,EAAItpB,MAAMwpB,SAAW,GACrBF,EAAItpB,MAAMypB,UAAY,GACtBH,EAAIpb,WAAWvR,aAAa,YAAa,aAAekO,EAAK,IAAME,EAAK,MAM1E,OAFAnK,QAAQ4L,cAAchQ,EAAIkD,MAEnBlD,GAeRktB,YAAa,SAASngB,GAErB,IAAIiX,EAAM1mB,OAAOivB,OACJxf,EAAMye,iBACnBpnB,QAAQoC,KAAKuG,EAAOiX,EAAIrnB,UAExB,IAAIwwB,EAAQ,WAEXnJ,EAAIoJ,QACJpJ,EAAImJ,QACJnJ,EAAI0I,SAKD1wB,SAASmC,MAEZ6lB,EAAInV,WAAWse,EAAO,KAItBA,KAgBFzoB,MAAO,SAASP,EAASkpB,GAErB,GAAIA,EACJ,CACF,IAAItE,EAAMpsB,SAASG,cAAc,OAEjCisB,EAAIvlB,MAAMsN,SAAW,SACrBiY,EAAIvlB,MAAMO,MAAQ,QAClBglB,EAAIvlB,MAAMG,OAAS,SAEf2pB,EAAM3wB,SAASG,cAAc,QAC1BsZ,UAAYhS,QAAQsQ,aAAavQ,GAAS,GAC7CuG,QAAQ,MAAM,QAAQA,QAAQ,KAAM,UAExCqe,EAAI1oB,YAAYitB,IAIZtJ,EAAM,IAAI/e,SAAS,eAAgB8jB,EAF/BpsB,SAASuG,KAAK8B,YAGnB,EAAE,IAFGE,KAAKC,IAAIxI,SAASuG,KAAK6B,cAAgB,EAAGpI,SAAS2C,gBAAgByF,cAE/D,EAAE,IAAK,IAAK,KAAK,GAAO,IAEhCQ,aAAY,GAChBye,EAAIvd,YAAW,OAGhB,CAIK,IAMIud,EACAsJ,EATJtxB,SAASiB,QAEL+mB,EAAM1mB,OAAOivB,QAChB5vB,SAASwJ,QAAQ,QAAQ/B,QAAQsQ,aAAavQ,GAAS,SACxD6f,EAAIrnB,SAAS+vB,WAKTY,GADAtJ,EAAM1mB,OAAOivB,QACH5vB,SAASG,cAAc,QACjCsZ,UAAYhS,QAAQsQ,aAAavQ,GAAS,GAC7CuG,QAAQ,MAAM,QAAQA,QAAQ,KAAM,UACrCsZ,EAAIrnB,SAASuG,KAAK7C,YAAYitB,MAgBpC7oB,MAAO,SAAS2M,GAEf3M,MAAM2M,IAcPmc,OAAQ,SAASnc,EAASvG,GAEzB,OAAO0iB,OAAOnc,EAA0B,MAAhBvG,EAAwBA,EAAe,KAahE2iB,QAAS,SAASpc,GAEjB,OAAOoc,QAAQpc,IAkBhBqc,MAAO,SAASrc,EAASrN,EAAO2oB,EAAOgB,GAEtC,IAAI3E,EAAMpsB,SAASG,cAAc,OACjCisB,EAAIvlB,MAAMmqB,QAAU,OAEpB,IAAIC,EAAMjxB,SAASG,cAAc,OACjC8wB,EAAIztB,aAAa,MAAOutB,GAAQtpB,QAAQ2L,YACxC6d,EAAIztB,aAAa,SAAU,UAC3BytB,EAAIpqB,MAAMC,cAAgB,SAC1BslB,EAAI1oB,YAAYutB,GAEhB7E,EAAI1oB,YAAY1D,SAASqW,eAAe,MACxC+V,EAAI1oB,YAAY1D,SAASqW,eAAe,MACxC+V,EAAI1oB,YAAY1D,SAASqW,eAAe,MACxC5O,QAAQlE,MAAM6oB,EAAK3X,GAEnB,IAAIxM,EAAIjI,SAASuG,KAAK8B,YAClBL,EAAKhI,SAASuG,KAAK6B,cAAgBpI,SAAS2C,gBAAgByF,aAC5DqC,EAAO,IAAInC,SAASrE,YAAY+G,IAAIvD,QAAQyL,gBAC/CzL,QAAQyL,cAAekZ,GAAMnkB,EAAEb,GAAO,EAAGY,EAAE,EAAGZ,EAAO,MACrD,GAAO,GAER,GAAI2oB,EACJ,CACCtoB,QAAQ2S,GAAGgS,GAEX,IAAIpc,EAAMhQ,SAASG,cAAc,KAC7BwJ,EAAS3J,SAASG,cAAc,UAEhCd,SAASE,MAEZoK,EAAO9C,MAAMlB,QAAU,cAIvBgE,EAAOnG,aAAa,QAAS,eAG9B4F,QAAQD,YAAYQ,EAAQ,SAAS,SAASrC,GAE7CmD,EAAK2jB,aAGN3mB,QAAQlE,MAAMoG,EAAQ1F,YAAY+G,IAAIvD,QAAQ0L,gBAC7C1L,QAAQ0L,eAETnD,EAAItM,YAAYiG,GAChByiB,EAAI1oB,YAAYsM,GAEhBvI,QAAQ2S,GAAGgS,GAEX3hB,EAAK7B,aAAY,GAKlB,OAFA6B,EAAKX,YAAW,GAETW,GAuERymB,cAAe,SAAS5d,EAAS6d,EAAQznB,EAAO0nB,EAAa1f,EAAIE,EAAIyf,EACnEC,EAAcC,EAAsBC,GAErC,IAAIC,EAAa,IAAIC,aAAape,EAAS5J,GAkD3C,OAjDA+nB,EAAWE,WAAa,IAAIrjB,QAAe,MAANoD,EAAcA,EAAK,EAChD,MAANE,EAAcA,EAAK9E,YAAY8kB,yBACjCH,EAAWJ,WAAaA,EAIxBI,EAAWI,kBAAiB,GAEA,MAAxBN,IAEHE,EAAWF,qBAAuBA,GAId,MAAjBC,IAEHC,EAAWD,cAAgBA,GAI5BC,EAAWK,iBAAmB,SAASxqB,GAEtC,MAA0B,mBAAZ,EAA0B6pB,EAAO7pB,GAAO6pB,GAIpC,MAAfC,IAEHK,EAAWM,kBAAoB,WAE9B,OAAOX,EAAYvD,WAAU,IAG1ByD,IAEHG,EAAWO,qBAAuB,SAAS5hB,GAE1C,IAAItH,EAAMsoB,EAAYvD,WAAU,GAE5B5lB,EAAI1G,SAASuH,EAAIjC,MAAMO,OACvBY,EAAIzG,SAASuH,EAAIjC,MAAMG,QAI3B,OAHA8B,EAAIjC,MAAMO,MAAQmB,KAAK2c,MAAMjd,EAAImI,EAAMsW,KAAKjV,OAAS,KACrD3I,EAAIjC,MAAMG,OAASuB,KAAK2c,MAAMld,EAAIoI,EAAMsW,KAAKjV,OAAS,KAE/C3I,KAKH2oB,IAnwIHxd,OAwwIN7U,WAAWqI,aAA6B,IAAZA,QAA0BA,aAAU1B,EAM/D,IAAI+G,YACJ,CAWAmlB,gBAAiB,GAQjBC,iBAAkB,EAQlBC,iBAAkB,EAOlBC,qBAAsB,QAOtBC,sBAAuB,SAOvBC,uBAAwB,UAOxB5E,YAAa,MAOb6E,YAAa,MAObC,kBAAmB,YAOnBC,mBAAoB,aAOpBC,mBAAoB,aAOpB/E,OAAQ,6BAORgF,SAAU,+BAOVC,SAAU,+BAQVC,YAAa,OAQbC,gBAAiB,OAOjBC,gBAAiB,EAOjBC,gBAAiB,EAOjBC,eAAgB,EAOhBpe,iBAAkB,EAOlBqe,mBAAoB,EAOpBtb,cAAe,EAOfub,eAAgB,EAOhBC,0BAA2B,EAO3BC,gBAAiB,EAOjBC,gCAAiC,EAOjCta,iBAAkB,EAOlBF,kBAAmB,EAOnBya,sBAAuB,GAOvBxa,2BAA4B,GAO5Bya,kBAAmB,GAQnB5B,wBAAyB,GAOzB6B,oBAAqB,UAOrBC,sBAAuB,UAQvBC,wBAAyB,UAQzBC,8BAA+B,EAQ/BC,sBAAuB,EAOvBC,eAAgB,EAQhBC,kBAAmB,IAOnBC,sBAAuB,OAOvBC,oBAAqB,OAOrBC,oBAAqB,UAOrBC,uBAAwB,UAOxBC,mBAAoB,YAOpBC,2BAA4B,YAO5BC,eAAgB,UAQhBC,gBAAiB,UAUjBC,qBAAsB,UAUtBC,6BAA8B,UAQ9BC,kBAAmB,UAQnBC,YAAa,UAQbC,cAAe,UAQfC,qBAAsB,UAQtBC,uBAAwB,UAQxBC,6BAA8B,EAQ9BC,2BAA4B,EAQ5BC,yBAAyB,EAQzBC,uBAAuB,EAQvBC,YAAa,UAQbC,kBAAmB,EAQnBC,cAAe,UAQfC,oBAAsBj2B,SAAc,MAAI,EAAI,EAO5Ck2B,YAAa,EAObC,kBAAmB,EAQnBC,iBAAkB,UAQlBC,mBAAoB,QAQpBC,uBAAwB,SAQxBC,yBAA0B,UAQ1BC,wBAAyB,UAQzBC,yBAA0B,UAQ1BC,2BAA4B,UAO5B5J,mBAAoB,kBAOpBD,iBAAkB,GASlB8J,uBAAwB,GAOxB1J,YAAa,IASb2J,UAAW,SAQXC,sBAAsB,EAYtBC,kBAAmB,EAOnBC,kBAAmB,GAOnBC,mBAAoB,EAQpBC,kBAAmB,GASnBC,eAAgB,GAQhBC,0BAA2B,IAO3BC,aAAc,GAOdC,cAAe,EAOfC,YAAa,GAObC,WAAY,GAQZlI,wBAAyB,IAAIjgB,YAAY,EAAG,EAAG,IAAK,MAQpDooB,yBAA0B,IAAIpoB,YAAY,EAAG,EAAG,KAAM,KAQtDqoB,4BAA6B,IAAIroB,YAAY,EAAG,EAAG,IAAK,MAQxDsoB,6BAA8B,IAAItoB,YAAY,EAAG,EAAG,KAAM,KAO1D1B,KAAM,OAWNiqB,gBAAiB,YAUjBC,kBAAmB,aAUnBC,kBAAmB,aAUnBhU,sBAAuB,iBAUvBM,+BAAgC,yBAShCL,6BAA8B,uBAS9BC,6BAA8B,uBAQ9B+T,cAAe,UAQfC,mBAAoB,cAQpBC,qBAAsB,gBAQtBC,mBAAoB,cAYpBC,qBAAsB,gBAgBtBC,eAAgB,WAWhBC,iBAAkB,aAQlBC,aAAc,QAQdC,aAAc,QASdC,cAAe,SAQfC,cAAe,SASfC,qBAAsB,gBAQtBC,cAAe,SAQfC,cAAe,SAQfC,eAAgB,UAQhBC,eAAgB,UAShBC,sBAAuB,iBAavBC,kBAAmB,aAQnB3U,eAAgB,WAUhB4U,gBAAiB,YAWjBC,qBAAsB,gBAStBC,yBAA0B,oBAQ1BC,aAAc,SAWdC,oBAAqB,gBAcrBC,yBAA0B,oBAU1BC,kBAAmB,cASnBC,qBAAsB,iBAUtBC,kBAAmB,cAenBC,YAAa,QAiBbC,qBAAsB,gBAQtBC,kBAAmB,aAgBnBC,qBAAsB,gBAgBtBC,8BAA+B,wBAS/BC,mBAAoB,cAUpBC,kBAAmB,aAUnBC,2BAA4B,qBAS5BC,YAAa,QAYbC,YAAa,QASbC,kBAAmB,aASnBC,mBAAoB,cASpBC,uBAAwB,kBASxBC,mBAAoB,cASpB3U,YAAa,QAQbC,YAAa,QASb2U,cAAe,UASfC,kBAAmB,cAQnBC,4BAA6B,uBAQ7BC,wBAAyB,mBAQzBC,oBAAqB,eAUrBC,sBAAuB,iBASvBC,sBAAuB,iBAUvBC,sBAAuB,iBAQvBC,4BAA6B,uBAS7BC,8BAA+B,yBAS/BC,wBAAyB,mBAQzBC,sBAAuB,iBAQvBC,uBAAwB,kBAUxBC,0BAA2B,qBAQ3BC,aAAc,SASdC,cAAe,UAcfC,eAAgB,WAShBC,iBAAkB,aASlBC,cAAe,UAUfrU,gBAAiB,YASjBsU,oBAAqB,eASrBC,cAAe,UASfC,gBAAiB,YAQjBC,aAAc,SAYdC,mBAAoB,cASpBC,eAAgB,UAYhBC,cAAe,UASfC,aAAc,SAYdC,cAAe,UASfC,uBAAwB,kBAUxBC,+BAAgC,yBAUhCC,+BAAgC,yBAahCC,wBAAyB,mBASzBC,cAAe,UASfC,kBAAmB,aASnBC,mBAAoB,cASpBC,qBAAsB,gBAStBC,oBAAqB,eAarBrV,iBAAkB,aAUlB5B,gBAAiB,YAWjBkX,6BAA8B,uBAW9BC,YAAa,QAQbC,gBAAiB,YASjBC,iBAAkB,aAQlBC,eAAgB,WAShBC,gBAAiB,YASjBC,aAAc,SAUdC,eAAgB,WAShBC,eAAgB,WAShBC,eAAgB,WAShBC,yBAA0B,oBAS1BC,eAAgB,WAShBC,cAAe,UASfC,gBAAiB,YAWjBC,mBAAoB,cAWpBC,oBAAqB,eASrBC,gBAAiB,YASjBC,gBAAiB,YASjBC,gBAAiB,YAQjBC,YAAa,QAQbC,WAAY,YAWZC,iBAAkB,YASlBC,wBAAyB,kBASzBC,wBAAyB,kBASzBC,WAAY,YAUZC,sBAAuB,iBAUvBC,uBAAwB,iBAUxBC,uBAAwB,iBAOxBrR,UAAW,EAOXE,YAAa,EAObE,eAAgB,EAOhBC,mBAAoB,EAQpBiR,gBAAiB,YAQjBC,cAAe,UAQfC,qBAAsB,gBAQtBC,cAAe,UAQfC,WAAY,OAQZC,YAAa,QAQbC,YAAa,QAQbC,sBAAuB,iBAQvBC,YAAa,QAQbC,eAAgB,WAQhBC,eAAgB,WAQhBC,gBAAiB,YAQjBC,YAAa,QAQbC,YAAa,QAQbC,eAAgB,WAQhBC,cAAe,UAOfC,cAAe,UAOfC,mBAAoB,cAOpBC,YAAa,QAObC,iBAAkB,YAOlBC,WAAY,OAOZC,gBAAiB,WAOjBC,WAAY,OAOZC,cAAe,UAOfC,mBAAoB,cAOpB5T,WAAY,OAOZ6T,aAAc,SAOd5T,YAAa,QAObC,UAAW,MAOX4T,aAAc,SAOd3T,aAAc,SAOdjI,gBAAiB,QAOjBM,gBAAiB,QAOjBC,eAAgB,OAOhBF,eAAgB,OAQhBwb,uBAAwB,GAQxBC,oBAAqB,OAQrBC,mBAAoB,MAQpBC,mBAAoB,MAOpBpc,oBAAqB,EAOrBQ,oBAAqB,EAOrBH,qBAAsB,EAOtBE,qBAAsB,EAOtBD,oBAAqB,EAOrB+b,mBAAoB,GAOpBC,eAAgB,WAOhBC,iBAAkB,aAQlBC,gBAAiB,iBAQjBC,0BAA2B,0BAQ3BC,eAAgB,gBAQhBC,qBAAsB,sBAQtBC,sBAAuB,uBAQvBC,qBAAsB,sBAQtBC,kBAAmB,mBAQnBC,kBAAmB,mBAQnBC,oBAAqB,qBAQrBC,kBAAmB,mBAQnBC,kBAAmB,mBAQnBC,mBAAoB,qBAgCrB,SAASC,cAAczhC,GAEtBC,KAAKD,KAAOA,EACZC,KAAKyhC,WAAa,GAElB,IAAK,IAAI58B,EAAI,EAAGA,EAAIwG,UAAUlJ,OAAQ0C,GAAK,EAElB,MAApBwG,UAAUxG,EAAI,KAEjB7E,KAAKyhC,WAAWp2B,UAAUxG,IAAMwG,UAAUxG,EAAI,IAoHjD,SAAS68B,aAAav5B,EAAK0J,GAE1B7R,KAAKmI,IAAMA,EACXnI,KAAK6R,MAAQA,EACb7R,KAAK2hC,YAAc9vB,EAwOpB,SAAS+vB,cAAcC,GAEtB7hC,KAAK8hC,eAAeD,GAxYrB5hC,WAAW0N,iBAAqC,IAAhBA,YAA8BA,iBAAc/G,EAgD5E46B,cAAcp1B,UAAUrM,KAAO,KAO/ByhC,cAAcp1B,UAAUq1B,WAAa,KAOrCD,cAAcp1B,UAAU21B,UAAW,EAOnCP,cAAcp1B,UAAU41B,QAAU,WAEjC,OAAOhiC,KAAKD,MAQbyhC,cAAcp1B,UAAU61B,cAAgB,WAEvC,OAAOjiC,KAAKyhC,YAQbD,cAAcp1B,UAAU81B,YAAc,SAAS51B,GAE9C,OAAOtM,KAAKyhC,WAAWn1B,IAQxBk1B,cAAcp1B,UAAU+1B,WAAa,WAEpC,OAAOniC,KAAK+hC,UAQbP,cAAcp1B,UAAUg2B,QAAU,WAEjCpiC,KAAK+hC,UAAW,GAGjB9hC,WAAWuhC,mBAAyC,IAAlBA,cAAgCA,mBAAgB56B,EAoDlF86B,aAAat1B,UAAU21B,UAAW,EAOlCL,aAAat1B,UAAUjE,IAAM,KAQ7Bu5B,aAAat1B,UAAUi2B,OAAS,KAQhCX,aAAat1B,UAAUk2B,OAAS,KAOhCZ,aAAat1B,UAAUyF,MAAQ,KAQ/B6vB,aAAat1B,UAAUu1B,YAAc,KAOrCD,aAAat1B,UAAUm2B,SAAW,WAEjC,OAAOviC,KAAKmI,KAQbu5B,aAAat1B,UAAUo2B,UAAY,WAElC,OAAOv4B,QAAQu4B,UAAUxiC,KAAKmI,MAQ/Bu5B,aAAat1B,UAAUq2B,SAAW,SAASpwB,GAE1C,OAAa,MAATA,GAEI/J,QAAQmO,eAAepE,EAAMnN,KAAMlF,KAAKwiC,cAWjDd,aAAat1B,UAAUs2B,KAAO,WAE7B,OAAOz4B,QAAQ04B,WAAW3iC,KAAKuiC,aAQhCb,aAAat1B,UAAUw2B,KAAO,WAE7B,OAAO34B,QAAQ44B,WAAW7iC,KAAKuiC,aAQhCb,aAAat1B,UAAU02B,UAAY,WAElC,OAAO9iC,KAAKqiC,QAQbX,aAAat1B,UAAU22B,UAAY,WAElC,OAAO/iC,KAAKsiC,QAQbZ,aAAat1B,UAAU2F,SAAW,WAEjC,OAAO/R,KAAK6R,OAQb6vB,aAAat1B,UAAU42B,QAAU,WAEhC,IAAInxB,EAAQ7R,KAAK+R,WAEjB,OAAa,MAATF,EAEIA,EAAMG,KAGP,MAQR0vB,aAAat1B,UAAU62B,eAAiB,WAEvC,OAAOh5B,QAAQg5B,eAAejjC,KAAKuiC,aAQpCb,aAAat1B,UAAU+1B,WAAa,WAEnC,OAAOniC,KAAK+hC,UAgBbL,aAAat1B,UAAUg2B,QAAU,SAASc,IAEzCA,EAAoC,MAAlBA,EAA0BA,EACtB,MAApBljC,KAAKmI,IAAIg7B,SAAmBl5B,QAAQm5B,aAAapjC,KAAKmI,OAElCnI,KAAKmI,IAAI+6B,gBAE9BljC,KAAKmI,IAAI+6B,iBAKNhjC,SAASE,QAEZJ,KAAKmI,IAAIgc,aAAc,GAIxBnkB,KAAK+hC,UAAW,GAGjB9hC,WAAWyhC,kBAAuC,IAAjBA,aAA+BA,kBAAe96B,EAwC/Eg7B,cAAcx1B,UAAUi3B,eAAiB,KAOzCzB,cAAcx1B,UAAU6hB,eAAgB,EAOxC2T,cAAcx1B,UAAUy1B,YAAc,KAOtCD,cAAcx1B,UAAU8hB,gBAAkB,WAEzC,OAAOluB,KAAKiuB,eAQb2T,cAAcx1B,UAAU+hB,iBAAmB,SAASpmB,GAEnD/H,KAAKiuB,cAAgBlmB,GAQtB65B,cAAcx1B,UAAUk3B,eAAiB,WAExC,OAAOtjC,KAAK6hC,aAQbD,cAAcx1B,UAAU01B,eAAiB,SAAS/5B,GAEjD/H,KAAK6hC,YAAc95B,GAWpB65B,cAAcx1B,UAAUpC,YAAc,SAASjK,EAAMwK,GAEzB,MAAvBvK,KAAKqjC,iBAERrjC,KAAKqjC,eAAiB,IAGvBrjC,KAAKqjC,eAAez2B,KAAK7M,GACzBC,KAAKqjC,eAAez2B,KAAKrC,IAQ1Bq3B,cAAcx1B,UAAUm3B,eAAiB,SAASh5B,GAEjD,GAA2B,MAAvBvK,KAAKqjC,eAIR,IAFA,IAAIx+B,EAAI,EAEDA,EAAI7E,KAAKqjC,eAAelhC,QAE1BnC,KAAKqjC,eAAex+B,EAAE,IAAM0F,EAE/BvK,KAAKqjC,eAAejtB,OAAOvR,EAAG,GAI9BA,GAAK,GAyBT+8B,cAAcx1B,UAAUo3B,UAAY,SAASr7B,EAAK2B,GAEjD,GAA2B,MAAvB9J,KAAKqjC,gBAA0BrjC,KAAKkuB,kBACxC,CACY,MAAP/lB,IAEHA,EAAM,IAAIq5B,eAGG,MAAV13B,IAEHA,EAAS9J,KAAKsjC,kBAGD,MAAVx5B,IAEHA,EAAS9J,MAKV,IAFA,IAAIyjC,EAAO,CAAC35B,EAAQ3B,GAEXtD,EAAI,EAAGA,EAAI7E,KAAKqjC,eAAelhC,OAAQ0C,GAAK,EACrD,CACC,IAAI6+B,EAAS1jC,KAAKqjC,eAAex+B,GAEnB,MAAV6+B,GAAkBA,GAAUv7B,EAAI65B,WAEnChiC,KAAKqjC,eAAex+B,EAAE,GAAGuG,MAAMpL,KAAMyjC,MAMzCxjC,WAAW2hC,mBAAyC,IAAlBA,cAAgCA,mBAAgBh7B,EAMlF,IAAIqD,QACJ,CAsBCD,aAEK25B,mBAAqB,SAASxvB,EAASyvB,EAAWr5B,GAEvB,MAA1B4J,EAAQ0vB,iBAEX1vB,EAAQ0vB,eAAiB,IAG1B,IAAIC,EAAQ,CAAC/jC,KAAM6jC,EAAWhwB,EAAGrJ,GACjC4J,EAAQ0vB,eAAej3B,KAAKk3B,IAGzBtiC,OAAOsd,iBAEH,SAAS3K,EAASyvB,EAAWr5B,GAEnC4J,EAAQ2K,iBAAiB8kB,EAAWr5B,GAAO,GAC3Co5B,mBAAmBxvB,EAASyvB,EAAWr5B,IAKjC,SAAS4J,EAASyvB,EAAWr5B,GAEnC4J,EAAQ4vB,YAAY,KAAOH,EAAWr5B,GACtCo5B,mBAAmBxvB,EAASyvB,EAAWr5B,KAU1Cg5B,gBAEKS,eAAiB,SAAS7vB,EAASyvB,EAAWr5B,GAEjD,GAA8B,MAA1B4J,EAAQ0vB,eACZ,CAGC,IAFA,IAAII,EAAgB9vB,EAAQ0vB,eAAe1hC,OAElC0C,EAAI,EAAGA,EAAIo/B,EAAep/B,IAIlC,GAFYsP,EAAQ0vB,eAAeh/B,GAEzB+O,GAAKrJ,EACf,CACC4J,EAAQ0vB,eAAeztB,OAAOvR,EAAG,GACjC,MAImC,GAAjCsP,EAAQ0vB,eAAe1hC,SAE1BgS,EAAQ0vB,eAAiB,QAKxBriC,OAAO0iC,oBAEH,SAAS/vB,EAASyvB,EAAWr5B,GAEnC4J,EAAQ+vB,oBAAoBN,EAAWr5B,GAAO,GAC9Cy5B,eAAe7vB,EAASyvB,EAAWr5B,IAK7B,SAAS4J,EAASyvB,EAAWr5B,GAEnC4J,EAAQgwB,YAAY,KAAOP,EAAWr5B,GACtCy5B,eAAe7vB,EAASyvB,EAAWr5B,KAUtC65B,mBAAoB,SAASjwB,GAE5B,IAAIkwB,EAAOlwB,EAAQ0vB,eAEnB,GAAY,MAARQ,EAEH,KAAOA,EAAKliC,OAAS,GACrB,CACC,IAAI2hC,EAAQO,EAAK,GACjBp6B,QAAQs5B,eAAepvB,EAAS2vB,EAAM/jC,KAAM+jC,EAAMlwB,KAcrD0wB,oBAAqB,SAASp/B,EAAMq/B,EAAeC,EAAcC,GAE3C,MAAjBF,GAEHt6B,QAAQD,YAAY9E,EAAOhF,SAAmB,WAAI,cAAgB,YAAaqkC,GAG5D,MAAhBC,GAEHv6B,QAAQD,YAAY9E,EAAOhF,SAAmB,WAAI,cAAgB,YAAaskC,GAG7D,MAAfC,GAEHx6B,QAAQD,YAAY9E,EAAOhF,SAAmB,WAAI,YAAc,UAAWukC,IAGvEvkC,SAASuD,YAAcvD,SAASqD,WAEf,MAAjBghC,GAEHt6B,QAAQD,YAAY9E,EAAM,aAAcq/B,GAGrB,MAAhBC,GAEHv6B,QAAQD,YAAY9E,EAAM,YAAas/B,GAGrB,MAAfC,GAEHx6B,QAAQD,YAAY9E,EAAM,WAAYu/B,KAWzCC,uBAAwB,SAASx/B,EAAMq/B,EAAeC,EAAcC,GAE9C,MAAjBF,GAEHt6B,QAAQs5B,eAAer+B,EAAOhF,SAAmB,WAAI,cAAgB,YAAaqkC,GAG/D,MAAhBC,GAEHv6B,QAAQs5B,eAAer+B,EAAOhF,SAAmB,WAAI,cAAgB,YAAaskC,GAGhE,MAAfC,GAEHx6B,QAAQs5B,eAAer+B,EAAOhF,SAAmB,WAAI,YAAc,UAAWukC,IAG1EvkC,SAASuD,YAAcvD,SAASqD,WAEf,MAAjBghC,GAEHt6B,QAAQs5B,eAAer+B,EAAM,aAAcq/B,GAGxB,MAAhBC,GAEHv6B,QAAQs5B,eAAer+B,EAAM,YAAas/B,GAGxB,MAAfC,GAEHx6B,QAAQs5B,eAAer+B,EAAM,WAAYu/B,KAe5CE,oBAAqB,SAASz/B,EAAM+L,EAAOY,EAAO+yB,EAAMC,EAAMC,EAAIC,GAEjE,IAAIhzB,EAAW,SAAS5J,GAEvB,MAAyB,mBAAX,EAAyB0J,EAAM1J,GAAO0J,GAGrD5H,QAAQq6B,oBAAoBp/B,GAAM,SAAUiD,GAE/B,MAARy8B,EAEHA,EAAKz8B,GAEI8B,QAAQk4B,WAAWh6B,IAE5B8I,EAAM+zB,eAAe/6B,QAAQg7B,WAAY,IAAIvD,aAAav5B,EAAK4J,EAAS5J,QAG1E,SAAUA,GAEG,MAAR08B,EAEHA,EAAK18B,GAEI8B,QAAQk4B,WAAWh6B,IAE5B8I,EAAM+zB,eAAe/6B,QAAQi7B,WAAY,IAAIxD,aAAav5B,EAAK4J,EAAS5J,QAG1E,SAAUA,GAEC,MAAN28B,EAEHA,EAAG38B,GAEM8B,QAAQk4B,WAAWh6B,IAE5B8I,EAAM+zB,eAAe/6B,QAAQk7B,SAAU,IAAIzD,aAAav5B,EAAK4J,EAAS5J,QAIxE8B,QAAQD,YAAY9E,EAAM,YAAY,SAAUiD,GAE/C,GAAgB,MAAZ48B,EAEHA,EAAS58B,QAEL,IAAK8B,QAAQk4B,WAAWh6B,GAC7B,CACC,IAAI0I,EAAMkB,EAAS5J,GACnB8I,EAAM8zB,SAAS58B,EAAa,MAAP0I,EAAeA,EAAImB,KAAO,WAclDozB,QAAS,SAASjxB,GAEjB,IAEC,GAAe,MAAXA,EACJ,CACClK,QAAQm6B,mBAAmBjwB,GAE3B,IAAIE,EAAWF,EAAQG,WAEvB,GAAgB,MAAZD,EAIG,IAFA,IAAInB,EAAamB,EAASlS,OAEjB0C,EAAI,EAAGA,EAAIqO,EAAYrO,GAAK,EAEpCoF,QAAQm7B,QAAQ/wB,EAASxP,KAKnC,MAAOuJ,MAiCRi3B,sBAAuB,SAAS96B,EAAOkU,GAEtC,GAAa,MAATlU,EACJ,CA4BC,GAFAkU,EAAmB,MAAVA,EAAiBA,EAASjd,OAE/BtB,SAASoB,QAAUpB,SAASqD,SAChC,CACC,IAAI+O,EAAQ,EAEZrI,QAAQD,YAAYyU,EAAQ,gBAAgB,SAAStW,GAEpD8B,QAAQm4B,QAAQj6B,GAChBmK,EAAQ,KAGTrI,QAAQD,YAAYyU,EAAQ,iBAAiB,SAAStW,GAErD8B,QAAQm4B,QAAQj6B,GAChB,IAAIm9B,EAAOhzB,EAAQnK,EAAImK,MAEnBlJ,KAAKsX,IAAI4kB,GAAQ,KAEpB/6B,EAAMpC,EAAKm9B,EAAO,GAAG,GACrBhzB,EAAQnK,EAAImK,UAIdrI,QAAQD,YAAYyU,EAAQ,cAAc,SAAStW,GAElD8B,QAAQm4B,QAAQj6B,MAIlB8B,QAAQD,YAAYyU,EAAQ,SAvDT,SAAStW,GAKhB,MAAPA,IAEHA,EAAM3G,OAAO+jC,OAIVp9B,EAAIq9B,SAEPr9B,EAAI+6B,iBAGQ/6B,EAAIs9B,QAGbr8B,KAAKsX,IAAIvY,EAAIu9B,QAAU,IAAOt8B,KAAKsX,IAAIvY,EAAIs9B,QAAU,KAExDl7B,EAAMpC,EAAoB,GAAdA,EAAIs9B,QAAiBt9B,EAAIu9B,OAAS,GAAKv9B,EAAIs9B,OAAS,QA2CpEE,mBAAoB,SAASxxB,GAE5BlK,QAAQD,YAAYmK,EAAS,eAAe,SAAShM,GAOpD,OALIA,EAAI+6B,gBAEP/6B,EAAI+6B,kBAGE,MASTV,UAAW,SAASr6B,GAEnB,OAA0B,MAAlBA,EAAIy9B,WAAsBz9B,EAAIy9B,WAAaz9B,EAAIsW,QAQxD0jB,WAAY,SAASh6B,GAEpB,OAAyB,MAAlBA,EAAIg6B,YAAsBh6B,EAAIg6B,YAQtC0D,aAAc,SAAS19B,GAEtB,OAA2B,MAAnBA,EAAI29B,YAA2C,SAAnB39B,EAAI29B,aAA0B39B,EAAI29B,cACrE39B,EAAI49B,qBAAgD,MAAtB59B,EAAI69B,eACV,GAAtB79B,EAAI69B,eAAmD,GAA7B79B,EAAI7B,KAAK/F,QAAQ,UAQ/C0lC,WAAY,SAAS99B,GAEpB,OAA2B,MAAnBA,EAAI29B,YAA2C,OAAnB39B,EAAI29B,aAAwB39B,EAAI29B,cACnE39B,EAAI+9B,mBAA8C,MAAtB/9B,EAAI69B,eACR,GAAtB79B,EAAI69B,eAAiD,GAA3B79B,EAAI7B,KAAK/F,QAAQ,QAQ/C4lC,kBAAmB,SAASh+B,GAE3B,OAAoB,MAAZA,EAAI7B,MAA6C,GAA7B6B,EAAI7B,KAAK/F,QAAQ,UAAgC,MAAf4H,EAAIg7B,SAAmBh7B,EAAIg7B,QAAQhhC,OAAS,GAQ3GihC,aAAc,SAASj7B,GAEtB,OAA2B,MAAnBA,EAAI29B,YAA2C,SAAnB39B,EAAI29B,aAA0B39B,EAAI29B,cACrE39B,EAAIi+B,qBAAgD,MAAtBj+B,EAAI69B,eACX,GAAtB79B,EAAI69B,eAAmD,GAA7B79B,EAAI7B,KAAK/F,QAAQ,UAW9C8lC,kBAAmB,SAASl+B,GAI3B,QAAI,YAAaA,IAAoB,aAAZA,EAAI7B,MAAmC,aAAZ6B,EAAI7B,KAI/C,UAAW6B,EAEQ,IAAdA,EAAIm+B,MAIW,IAAfn+B,EAAIqC,OARK,GAAfrC,EAAIo+B,SAmBbC,oBAAqB,SAASr+B,GAE7B,MAAI,UAAWA,EAEa,IAAdA,EAAIm+B,MAIW,IAAfn+B,EAAIqC,QAWnBi8B,mBAAoB,SAASt+B,GAE5B,MAAI,UAAWA,EAEa,IAAdA,EAAIm+B,MAIW,IAAfn+B,EAAIqC,QAWnBy4B,eAAgB,SAAS96B,GAExB,OAAO8B,QAAQw8B,mBAAmBt+B,IAASjI,SAASmD,QAAU4G,QAAQy8B,cAAcv+B,KAClF8B,QAAQ08B,YAAYx+B,KAAS8B,QAAQ28B,WAAWz+B,KAAS8B,QAAQ48B,UAAU1+B,IAQ9Ew+B,YAAa,SAASx+B,GAErB,OAAe,MAAPA,GAAeA,EAAI2+B,UAQ5BD,UAAW,SAAS1+B,GAEnB,OAAe,MAAPA,GAAeA,EAAI4+B,QAQ5BL,cAAe,SAASv+B,GAEvB,OAAe,MAAPA,GAAeA,EAAIq9B,SAQ5BoB,WAAY,SAASz+B,GAEpB,OAAe,MAAPA,GAAeA,EAAI6+B,SAQ5BC,aAAc,SAAS74B,GAWtB,MATe,cAAVA,EAAE9H,MAAkC,aAAV8H,EAAE9H,MAAqC,MAAb8H,EAAE+0B,SAAmC,MAAhB/0B,EAAE+0B,QAAQ,GAIrE,YAAV/0B,EAAE9H,MAA0C,MAApB8H,EAAE84B,gBAAiD,MAAvB94B,EAAE84B,eAAe,KAE7E94B,EAAIA,EAAE84B,eAAe,IAJrB94B,EAAIA,EAAE+0B,QAAQ,GAOR/0B,GAQRu0B,WAAY,SAASv0B,GAEpB,OAAOnE,QAAQg9B,aAAa74B,GAAG+4B,SAQhCtE,WAAY,SAASz0B,GAEpB,OAAOnE,QAAQg9B,aAAa74B,GAAGg5B,SAgBhChF,QAAS,SAASj6B,EAAK+6B,EAAgBmE,GAGtCA,EAAsC,MAAnBA,GAA2BA,GAD9CnE,EAAoC,MAAlBA,GAA0BA,KAKvC/6B,EAAI+6B,gBAEHmE,GAEHl/B,EAAIk/B,kBAGLl/B,EAAI+6B,kBAEImE,IAERl/B,EAAIm/B,cAAe,IAKrBn/B,EAAIg6B,YAAa,EAGZh6B,EAAI+6B,iBAER/6B,EAAIgc,aAAc,IAepBojB,cAAe,EASfC,iBAAkB,EASlBC,eAAgB,IAWhBC,gBAAiB,IAWjBzC,WAAY,YAOZC,WAAY,YAOZC,SAAU,UAOVwC,SAAU,WAOVC,aAAc,cAOdC,OAAQ,SAOR39B,WAAY,YAOZ49B,WAAY,YAOZC,KAAM,OAONC,SAAU,UAOVC,UAAW,WAOXC,IAAK,MAOLC,QAAS,SAOTC,SAAU,WAOVh+B,UAAW,YAOXD,SAAU,WAOVk+B,KAAM,OAONC,KAAM,OAONC,MAAO,QAOPC,QAAS,UAOTC,QAAS,UAOTC,KAAM,OAONC,OAAQ,SAORC,MAAO,QAOPC,iBAAkB,iBAOlBC,QAAS,UAOTC,aAAc,aAOdC,IAAK,MAOLC,QAAS,UAOTC,QAAS,UAOTC,WAAY,aAOZC,QAAS,UAOTC,OAAQ,SAORC,KAAM,OAONC,KAAM,OAONC,KAAM,OAONC,KAAM,OAONC,KAAM,OAONC,kBAAmB,kBAOnBC,WAAY,YAOZC,iBAAkB,iBAOlBC,KAAM,OAONC,QAAS,UAOTC,SAAU,WAOVC,aAAc,cAOdC,WAAY,YAOZC,WAAY,YAOZC,SAAU,UAOVC,YAAa,aAObC,KAAM,OAONC,KAAM,OAONC,OAAQ,SAORC,OAAQ,SAORC,aAAc,cAOdC,MAAO,QAOPC,MAAO,QAOPC,UAAW,YAOXC,oBAAqB,oBAOrBC,GAAI,KAOJC,KAAM,OAONC,IAAK,MAOLC,OAAQ,SAORC,MAAO,QAOPC,UAAW,WAOXC,YAAa,aAObC,WAAY,YAOZC,YAAa,aAObC,aAAc,cAOdC,cAAe,eAOfC,aAAc,cAOdC,cAAe,eAOfC,YAAa,aAObC,cAAe,eAOfC,aAAc,cAOdC,cAAe,eAOfC,YAAa,aAObC,cAAe,eAOfC,yBAA0B,wBAO1BC,WAAY,YAOZC,aAAc,cAOdC,YAAa,aAObC,cAAe,eAOfC,aAAc,cAOdC,eAAgB,gBAOhBC,WAAY,YAOZC,UAAW,WAOXC,cAAe,eAOfC,gBAAiB,iBAOjBC,gBAAiB,iBAOjBC,YAAa,aAObC,eAAgB,gBAOhBC,iBAAkB,iBAOlBC,OAAQ,SAORC,aAAc,cAOdC,MAAO,QAOPC,MAAO,SA5zCFpJ,eApCAL,mBA67CN,SAAStmB,aAAaD,EAAKtO,EAAQu+B,EAAQ51B,EAAO61B,EAAUC,GAE3DvtC,KAAKod,IAAMA,EACXpd,KAAK8O,OAASA,EACd9O,KAAKqtC,OAASA,GAAU,OACxBrtC,KAAKyX,MAAkB,MAATA,GAAiBA,EAC/BzX,KAAKstC,SAAWA,EAChBttC,KAAKutC,SAAWA,EAhGjBttC,WAAWgK,aAA6B,IAAZA,QAA0BA,aAAUrD,EAwGhEyW,aAAajR,UAAUgR,IAAM,KAO7BC,aAAajR,UAAU0C,OAAS,KAQhCuO,aAAajR,UAAUihC,OAAS,KAOhChwB,aAAajR,UAAUqL,MAAQ,KAS/B4F,aAAajR,UAAUqR,QAAS,EAQhCJ,aAAajR,UAAUohC,iBAAkB,EAOzCnwB,aAAajR,UAAUkhC,SAAW,KAOlCjwB,aAAajR,UAAUmhC,SAAW,KAOlClwB,aAAajR,UAAU0R,QAAU,KASjCT,aAAajR,UAAUqhC,sBAAuB,EAO9CpwB,aAAajR,UAAUshC,SAAW,WAEjC,OAAO1tC,KAAKyd,QAQbJ,aAAajR,UAAU4R,UAAY,SAASjW,GAE3C/H,KAAKyd,OAAS1V,GAQfsV,aAAajR,UAAU6B,QAAU,WAEhC,OAAOjO,KAAK8d,QAAQ6vB,cAQrBtwB,aAAajR,UAAU+B,QAAU,WAEhC,OAAkC,GAA3BnO,KAAK8d,QAAQe,YAQrBxB,aAAajR,UAAUwhC,mBAAqB,WAE3C,IAAI1pC,EAAMlE,KAAKkZ,SAEf,OAAW,MAAPhV,EAEIA,EAAIV,gBAGL,MASR6Z,aAAajR,UAAU8M,OAAS,WAE/B,IAAIpB,EAAM9X,KAAK8d,QAAQ+vB,YAYvB,OALIhtC,SAASC,cAAgB,GAAY,MAAPgX,GAAsC,MAAvBA,EAAItU,mBAEpDsU,EAAMxP,QAAQsP,SAAS5X,KAAK8d,QAAQ6vB,eAG9B71B,GAQRuF,aAAajR,UAAU6B,QAAU,WAEhC,OAAOjO,KAAK8d,QAAQ6vB,cASrBtwB,aAAajR,UAAUkS,UAAY,WAElC,OAAwB,MAAhBte,KAAK8d,QAAmB9d,KAAK8d,QAAQO,OAAS,MAQvDhB,aAAajR,UAAUse,OAElBlpB,OAAOssC,eAEH,WAEN,IAAI//B,EAAM,IAAI+/B,eAQd,OALI9tC,KAAK0tC,YAAc3/B,EAAIggC,kBAE1BhgC,EAAIggC,iBAAiB,sCAGfhgC,GAGyB,oBAAnB,cAEP,WAGN,OAAO,IAAIyJ,cAAc,2BALtB,EAyBN6F,aAAajR,UAAUkR,KAAO,SAASC,EAAQC,EAASE,EAASC,GAEhE3d,KAAK8d,QAAU9d,KAAK0qB,SAEA,MAAhB1qB,KAAK8d,UAEM,MAAVP,IAEHvd,KAAK8d,QAAQc,mBAAqBtW,QAAQ2M,KAAKjV,MAAM,WAEhDA,KAAKmO,YAERoP,EAAOvd,MACPA,KAAK8d,QAAQc,mBAAqB,UAKrC5e,KAAK8d,QAAQ2S,KAAKzwB,KAAKqtC,OAAQrtC,KAAKod,IAAKpd,KAAKyX,MAC7CzX,KAAKstC,SAAUttC,KAAKutC,UACrBvtC,KAAK6d,kBAAkB7d,KAAK8d,QAAS9d,KAAK8O,QAEtCtN,OAAOssC,gBAAkB9tC,KAAKwtC,kBAEjCxtC,KAAK8d,QAAQ0vB,gBAAkB,SAG3BttC,SAASU,YAAuC,MAAzBC,SAASC,cAAwBD,SAASC,aAAe,IACpFU,OAAOssC,gBAA6B,MAAXpwB,GAAgC,MAAbC,IAE5C3d,KAAK8d,QAAQJ,QAAUA,EACvB1d,KAAK8d,QAAQH,UAAYA,GAG1B3d,KAAK8d,QAAQR,KAAKtd,KAAK8O,UA4BzBuO,aAAajR,UAAUyR,kBAAoB,SAASC,EAAShP,GAE9C,MAAVA,GAEHgP,EAAQC,iBAAiB,eAAgB,sCAe3CV,aAAajR,UAAUsS,SAAW,SAASxa,EAAKua,GAG/C,IAAIuvB,EAAM,MADV9pC,EAAMA,GAAOrD,WAGFA,WAEVmtC,EAAMxsC,OAAOysC,eACbzsC,OAAOysC,eAAiB,MAGzB,IAAIC,EAAOhqC,EAAIlD,cAAc,QAC7BktC,EAAK7pC,aAAa,SAAUrE,KAAKqtC,QACjCa,EAAK7pC,aAAa,SAAUrE,KAAKod,KAEnB,MAAVqB,GAEHyvB,EAAK7pC,aAAa,SAAUoa,GAG7ByvB,EAAKxmC,MAAMgmB,QAAU,OACrBwgB,EAAKxmC,MAAM6D,WAAa,SAOxB,IALA,IAAI4iC,EAAQnuC,KAAK8O,OAAOvO,QAAQ,KAAO,EACtCP,KAAK8O,OAAOP,MAAM,KAClBvO,KAAK8O,OAAOP,QAGJ1J,EAAE,EAAGA,EAAEspC,EAAKhsC,OAAQ0C,IAC7B,CACC,IAAIumB,EAAM+iB,EAAKtpC,GAAGtE,QAAQ,KAE1B,GAAI6qB,EAAM,EACV,CACC,IAAIrrB,EAAOouC,EAAKtpC,GAAGY,UAAU,EAAG2lB,GAC5BrjB,EAAQomC,EAAKtpC,GAAGY,UAAU2lB,EAAI,GAE9BprB,KAAKytC,uBAER1lC,EAAQqmC,mBAAmBrmC,IAG5B,IAAIH,EAAW1D,EAAIlD,cAAc,YACjC4G,EAASvD,aAAa,OAAQ,OAC9BuD,EAASvD,aAAa,OAAQtE,GAC9BuI,QAAQlE,MAAMwD,EAAUG,GACxBmmC,EAAK3pC,YAAYqD,IAInB1D,EAAIkD,KAAK7C,YAAY2pC,GACrBA,EAAK1vB,SAEkB,MAAnB0vB,EAAKr6B,YAERq6B,EAAKr6B,WAAWC,YAAYo6B,GAGlB,MAAPF,IAEHxsC,OAAOysC,eAAiBD,IAI1B/tC,WAAWod,kBAAuC,IAAjBA,aAA+BA,kBAAezW,EAM/E,IAAIynC,YACJ,CA4ECC,SAAU,GAOVC,YAAa,EAObpkB,MAAO,KAOPqkB,SAAU,SAASrkB,GAElBkkB,YAAYlkB,MAAQA,GAQrBskB,SAAU,WAET,OAAOJ,YAAYlkB,OAQpBukB,QAAS,WAER,OAAiC,MAA1BL,YAAYI,YAepBE,IAAK,SAAS19B,EAAOkZ,GAMpB,OAJAA,EAAQkkB,YAAY5lC,KAAKwI,EAAOkZ,GAChCkkB,YAAYE,YAAc,EAC1BF,YAAYO,YAAY39B,EAAOkZ,GAExBA,GAcRykB,YAAa,SAAS39B,EAAOkZ,GAE5BlZ,EAAM29B,YAAYzkB,IAenB1hB,KAAM,SAASwI,EAAOkZ,GAErBA,EAAQA,GAASlZ,EAAM49B,oBACvB,IAAIliC,EAASsE,EAAM69B,mBAAmB79B,EAAMiB,MAAM68B,gBAAgB5kB,IAIlE,OAHAkkB,YAAYE,YAAc,EAC1BF,YAAYG,SAASv9B,EAAM+9B,WAAWriC,IAE/BA,GAkBRsiC,MAAO,SAASh+B,GAEf,IAAIkZ,EAAQ,KAEZ,IAAKkkB,YAAYK,UACjB,CACCvkB,EAAQlZ,EAAMi+B,mBAAmBb,YAAYI,YAC7C,IAAIU,EAAQd,YAAYE,YAAcF,YAAYC,SAC9C33B,EAAS1F,EAAMm+B,mBACnBjlB,EAAQlZ,EAAMo+B,YAAYllB,EAAOglB,EAAOA,EAAOx4B,GAG/C03B,YAAYE,cACZt9B,EAAMq+B,kBAAkBnlB,GAGzB,OAAOA,IAkMT,SAAShhB,SAAS9B,EAAOgB,EAAS+G,EAAGC,EAAGpH,EAAOJ,EAAQ0nC,EAAaC,EAASC,EAAa/nC,GAE1E,MAAXW,IAEHknC,EAA8B,MAAfA,GAAuBA,EACtCvvC,KAAKqI,QAAUA,EACfrI,KAAKmH,KAAKiI,EAAGC,EAAGpH,EAAOJ,EAAQH,GAE/B1H,KAAK0vC,yBACL1vC,KAAK2vC,yBACL3vC,KAAK4vC,sBACL5vC,KAAK6vC,eAAeN,GACpBvvC,KAAK8vC,SAASzoC,IAEC,MAAXmoC,GAAmBA,IAEtBxvC,KAAK+vC,qBAGa,MAAfN,GAAiD,MAA1BA,EAAY57B,WAEtC47B,EAAY57B,WAAWm8B,aAAahwC,KAAKitB,IAAKwiB,GAI9C5uC,SAASuG,KAAK7C,YAAYvE,KAAKitB,MAw6BlC,SAASgjB,OAAOC,GAEflwC,KAAKsH,MAAQzG,SAASG,cAAc,SACpChB,KAAKsH,MAAM4oC,UAAYA,EACvBlwC,KAAKoH,KAAOvG,SAASG,cAAc,SAEnChB,KAAKsH,MAAM/C,YAAYvE,KAAKoH,MAuM7B,SAAS+oC,QAAQlrC,EAAKgD,EAAOJ,GAE5B7H,KAAKiF,IAAMA,EACXjF,KAAKiI,MAAQA,EACbjI,KAAK6H,OAASA,EAiEf,SAASuoC,aAAanjB,EAAKtF,GAE1B,GAAkC,OAA9BsF,EAAI3W,SAAS5I,cACjB,CACkB,MAAbia,IAEHA,EAAYnmB,QAGbxB,KAAKitB,IAAMA,EACX,IAAIvlB,EAAQY,QAAQiM,gBAAgB0Y,GAEvB,MAATvlB,IAEH1H,KAAKqwC,YAA6B,QAAf3oC,EAAMO,MACzBjI,KAAKswC,aAA+B,QAAhB5oC,EAAMG,QAG3BoC,QAAQD,YAAY2d,EAAW,SAC9Brf,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEtBnI,KAAKuwC,iBAETvwC,KAAKuwC,gBAAiB,EACtBvwC,KAAK8H,SACL9H,KAAKuwC,gBAAiB,OAKzBvwC,KAAK8H,UAsGP,SAASyqB,aAAape,EAASq8B,GAE9BxwC,KAAKmU,QAAUA,EACfnU,KAAKwwC,YAAcA,EAGnBvmC,QAAQq6B,oBAAoBnwB,EAAS7L,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEhEnI,KAAKywC,UAAUtoC,OAIhB8B,QAAQD,YAAYmK,EAAS,aAAa,SAAShM,GAElD8B,QAAQm4B,QAAQj6B,MAGjBnI,KAAK0wC,cAAgB,SAAS5mC,EAAQ3B,GAErC,IAAIwoC,EAAUxoC,EAAI+5B,YAAY,aAC1B0O,EAAKzoC,EAAI+5B,YAAY,SAErByO,GAAW1mC,QAAQg7B,YAEtB2L,EAAGxO,WA+rBN,SAASyO,UAAUlpB,GAElB3nB,KAAK2nB,UAAYA,EAyiBlB,SAASmpB,eAAehtB,EAAQitB,GAE/B/wC,KAAK8jB,OAASA,EACd9jB,KAAKkR,QAAU,GACflR,KAAK+wC,YAA8B,MAAfA,GAAuBA,EA4O5C,SAASC,cAAcnjB,GAEtB7tB,KAAK6tB,KAAgB,MAARA,EAAgBA,EAAO,IACpC7tB,KAAKkM,QAzgGNjM,WAAWouC,iBAAqC,IAAhBA,YAA8BA,iBAAcznC,EA8N5EuC,SAASiD,UAAY,IAAIw1B,cACzBz4B,SAASiD,UAAUH,YAAc9C,SAOjCA,SAASiD,UAAU6kC,WAAa/wC,SAAS0F,cAAgB,aAOzDuD,SAASiD,UAAU8kC,cAAgBhxC,SAAS0F,cAAgB,gBAO5DuD,SAASiD,UAAU+kC,eAAiBjxC,SAAS0F,cAAgB,iBAO7DuD,SAASiD,UAAUglC,cAAgBlxC,SAAS0F,cAAgB,gBAO5DuD,SAASiD,UAAUilC,YAAcnxC,SAAS0F,cAAgB,cAO1DuD,SAASiD,UAAUxB,SAAU,EAQ7BzB,SAASiD,UAAUklC,YAAc,IAAIhiC,YAAY,EAAG,EAAG,GAAI,IAQ3DnG,SAASiD,UAAU1C,gBAAiB,EAQpCP,SAASiD,UAAUmlC,wBAAoD,GAAzB1wC,SAASC,cAA8C,GAAzBD,SAASC,aAAqB,EAAI,EAO9GqI,SAASiD,UAAU/E,MAAQ,KAO3B8B,SAASiD,UAAU/D,QAAU,KAO7Bc,SAASiD,UAAUjF,KAAO,SAASiI,EAAGC,EAAGpH,EAAOJ,EAAQH,GAEvDA,EAAkB,MAATA,EAAiBA,EAAQ,WAElC1H,KAAKitB,IAAMpsB,SAASG,cAAc,OAClChB,KAAKitB,IAAIijB,UAAYxoC,EAErB1H,KAAKitB,IAAIvlB,MAAM+U,KAAOrN,EAAI,KAC1BpP,KAAKitB,IAAIvlB,MAAMuV,IAAM5N,EAAI,KACzBrP,KAAKsH,MAAQzG,SAASG,cAAc,SACpChB,KAAKsH,MAAM4oC,UAAYxoC,EAGnBxH,SAASuD,aAEZzD,KAAKitB,IAAIvlB,MAAM8pC,YAAc,QAIjB,MAATvpC,IAEE/H,SAASU,YAEbZ,KAAKitB,IAAIvlB,MAAMO,MAAQA,EAAQ,MAGhCjI,KAAKsH,MAAMI,MAAMO,MAAQA,EAAQ,MAGpB,MAAVJ,IAEE3H,SAASU,YAEbZ,KAAKitB,IAAIvlB,MAAMG,OAASA,EAAS,MAGlC7H,KAAKsH,MAAMI,MAAMG,OAASA,EAAS,MAIpC,IAAIN,EAAQ1G,SAASG,cAAc,SAC/BwG,EAAK3G,SAASG,cAAc,MAEhChB,KAAKqH,MAAQxG,SAASG,cAAc,MACpChB,KAAKqH,MAAM6oC,UAAYxoC,EAAQ,QAE/B1H,KAAKumC,QAAU1lC,SAASG,cAAc,OACtChB,KAAKumC,QAAQ7+B,MAAMogB,SAAW,WAC9B9nB,KAAKumC,QAAQ7+B,MAAMgmB,QAAU,eAC7B1tB,KAAKumC,QAAQ7+B,MAAMsV,MAAQ,MAC3Bhd,KAAKumC,QAAQ7+B,MAAMuV,IAAM,MACzBjd,KAAKqH,MAAM9C,YAAYvE,KAAKumC,SAE5B/+B,EAAGjD,YAAYvE,KAAKqH,OACpBE,EAAMhD,YAAYiD,GAGlBA,EAAK3G,SAASG,cAAc,MAC5BhB,KAAKyH,GAAK5G,SAASG,cAAc,MACjChB,KAAKyH,GAAGyoC,UAAYxoC,EAAQ,OAEC,GAAzB7G,SAASC,eAEZd,KAAKyH,GAAGC,MAAMG,OAAS,QAGxB7H,KAAKyxC,eAAiB5wC,SAASG,cAAc,OAC7ChB,KAAKyxC,eAAevB,UAAYxoC,EAAQ,OACxC1H,KAAKyxC,eAAe/pC,MAAMO,MAAQ,OAClCjI,KAAKyxC,eAAeltC,YAAYvE,KAAKqI,UAIjCnI,SAASU,WAAoD,OAAvCZ,KAAKqI,QAAQiO,SAAStT,iBAE/ChD,KAAKyxC,eAAe/pC,MAAMG,OAAS,QAIpC7H,KAAKyH,GAAGlD,YAAYvE,KAAKyxC,gBACzBjqC,EAAGjD,YAAYvE,KAAKyH,IACpBF,EAAMhD,YAAYiD,GAClBxH,KAAKsH,MAAM/C,YAAYgD,GACvBvH,KAAKitB,IAAI1oB,YAAYvE,KAAKsH,OAG1B,IAAIoqC,EAAYppC,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE3CnI,KAAK2xC,cAGN1nC,QAAQq6B,oBAAoBtkC,KAAKqH,MAAOqqC,GACxCznC,QAAQq6B,oBAAoBtkC,KAAKsH,MAAOoqC,GAExC1xC,KAAK4xC,QASNzoC,SAASiD,UAAU0jC,SAAW,SAASzoC,GAKtC,IAFA,IAAI4K,EAAQjS,KAAKqH,MAAMuO,WAEP,MAAT3D,GACP,CACC,IAAIyG,EAAOzG,EAAM4D,YAEb5D,EAAMwD,UAAY9H,YAAY8K,eAEjCxG,EAAM4B,WAAWC,YAAY7B,GAG9BA,EAAQyG,EAGTpQ,QAAQlE,MAAMpE,KAAKqH,MAAOA,GAAS,IACnCrH,KAAKqH,MAAM9C,YAAYvE,KAAKumC,UAQ7Bp9B,SAASiD,UAAU7C,cAAgB,SAASsoC,IAGhB,MAAvBxxC,UAAUC,WACbD,UAAUC,UAAUC,QAAQ,cAAgB,KAI3CP,KAAKyxC,eAAe/pC,MAAMsN,SAFvB68B,EAEkC,OAIA,WAUxC1oC,SAASiD,UAAUulC,SAAW,WAE7B,GAAIxoC,SAAS2oC,cAAgB9xC,KAC7B,CACC,IAAI0H,EAAQY,QAAQiM,gBAAgBvU,KAAK4J,cACrC6E,EAAkB,MAAT/G,EAAiBA,EAAMqqC,OAAS,EAE7C,GAAI5oC,SAAS2oC,aACb,CACC,IAAInoC,EAAMR,SAAS2oC,aAAaloC,aAErB,MAAPD,GAA4B,MAAbA,EAAIjC,QAEtBiC,EAAIjC,MAAMqqC,OAAStjC,GAIrB,IAAIujC,EAAiB7oC,SAAS2oC,aAC9B9xC,KAAK4J,aAAalC,MAAMqqC,OAAS3vC,SAASqM,GAAS,EACnDtF,SAAS2oC,aAAe9xC,KAExBA,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ09B,SAAU,iBAAkBqK,MASvE7oC,SAASiD,UAAUxC,WAAa,WAE/B,OAAO5J,KAAKitB,KAQb9jB,SAASiD,UAAUmQ,IAAM,WAExBjU,QAAQiU,IAAIvc,KAAKitB,MAQlB9jB,SAASiD,UAAU6lC,YAAc,WAEhC,OAAmB,MAAfjyC,KAAK8H,QAE4B,QAA7B9H,KAAK8H,OAAOJ,MAAMgmB,SAoB3BvkB,SAASiD,UAAU5C,aAAe,SAAS0oC,GAE1C,GAAIA,EAEH,GAAmB,MAAflyC,KAAK8H,OACT,CACC9H,KAAK8H,OAASjH,SAASG,cAAc,OACrChB,KAAK8H,OAAOJ,MAAMogB,SAAW,WAC7B9nB,KAAK8H,OAAOJ,MAAMyV,OAAS,MAC3Bnd,KAAK8H,OAAOJ,MAAMsV,MAAQ,MAE1Bhd,KAAK8H,OAAOzD,aAAa,MAAOrE,KAAKqxC,aACrCrxC,KAAK8H,OAAOJ,MAAM0M,OAAS,YAE3B,IAAI+9B,EAAS,KACTC,EAAS,KACTnqC,EAAQ,KACRJ,EAAS,KAETwf,EAAQ/e,QAAQ2M,KAAKjV,MAAM,SAASmI,GAMvCnI,KAAK2xC,WACLQ,EAASloC,QAAQ04B,WAAWx6B,GAC5BiqC,EAASnoC,QAAQ44B,WAAW16B,GAC5BF,EAAQjI,KAAKitB,IAAItQ,YACjB9U,EAAS7H,KAAKitB,IAAIljB,aAElBE,QAAQq6B,oBAAoBzjC,SAAU,KAAMwxC,EAAa7B,GACzDxwC,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ29B,aAAc,QAASz/B,IAChE8B,QAAQm4B,QAAQj6B,MAKbkqC,EAAc/pC,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE7C,GAAc,MAAVgqC,GAA4B,MAAVC,EACtB,CACC,IAAI7/B,EAAKtI,QAAQ04B,WAAWx6B,GAAOgqC,EAC/B1/B,EAAKxI,QAAQ44B,WAAW16B,GAAOiqC,EAEnCpyC,KAAKsyC,QAAQrqC,EAAQsK,EAAI1K,EAAS4K,GAElCzS,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ49B,OAAQ,QAAS1/B,IAC1D8B,QAAQm4B,QAAQj6B,OAIdqoC,EAAcloC,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE/B,MAAVgqC,GAA4B,MAAVC,IAErBD,EAAS,KACTC,EAAS,KACTnoC,QAAQy6B,uBAAuB7jC,SAAU,KAAMwxC,EAAa7B,GAC5DxwC,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQC,WAAY,QAAS/B,IAC9D8B,QAAQm4B,QAAQj6B,OAIlB8B,QAAQq6B,oBAAoBtkC,KAAK8H,OAAQuf,EAAOgrB,EAAa7B,GAC7DxwC,KAAKitB,IAAI1oB,YAAYvE,KAAK8H,aAI1B9H,KAAK8H,OAAOJ,MAAMgmB,QAAU,cAGN,MAAf1tB,KAAK8H,SAEb9H,KAAK8H,OAAOJ,MAAMgmB,QAAU,SAS9BvkB,SAASiD,UAAUkmC,QAAU,SAASrqC,EAAOJ,GAE5CI,EAAQmB,KAAKC,IAAIrJ,KAAKsxC,YAAYrpC,MAAOA,GACzCJ,EAASuB,KAAKC,IAAIrJ,KAAKsxC,YAAYzpC,OAAQA,GAGtC3H,SAASU,YAEbZ,KAAKitB,IAAIvlB,MAAMO,MAASA,EAAQ,KAChCjI,KAAKitB,IAAIvlB,MAAMG,OAASA,EAAS,MAGlC7H,KAAKsH,MAAMI,MAAMO,MAASA,EAAQ,KAClCjI,KAAKsH,MAAMI,MAAMG,OAASA,EAAS,KAE9B3H,SAASU,YAEbZ,KAAKyxC,eAAe/pC,MAAMG,OAAU7H,KAAKitB,IAAIljB,aAC5C/J,KAAKqH,MAAM0C,aAAe/J,KAAKuxC,wBAA2B,OAS7DpoC,SAASiD,UAAUyjC,eAAiB,SAASN,GAE5CvvC,KAAKuyC,SAAS7qC,MAAMgmB,QAAU,EAAgB,GAAK,QAUpDvkB,SAASiD,UAAUomC,eAAiB,WAEnC,OAAO,IAAIljC,YAAY,EAAG,EAAG,EAAGtP,KAAKqH,MAAM0C,eAQ5CZ,SAASiD,UAAUujC,uBAAyB,WAE3C3vC,KAAKuyC,SAAW1xC,SAASG,cAAc,OAEvChB,KAAKuyC,SAASluC,aAAa,MAAOrE,KAAKkxC,eACvClxC,KAAKuyC,SAASluC,aAAa,QAAS,YACpCrE,KAAKuyC,SAAS7qC,MAAM0M,OAAS,UAC7BpU,KAAKuyC,SAAS7qC,MAAM+qC,WAAa,MACjCzyC,KAAKuyC,SAAS7qC,MAAMgmB,QAAU,OAE9B1tB,KAAKumC,QAAQhiC,YAAYvE,KAAKuyC,UAE9B,IAAIG,GAAY,EACZC,EAAa,KACb9qC,EAAS,KAET0C,EAAQjC,QAAQ2M,KAAKjV,MAAM,SAASmI,GAIvC,GAFAnI,KAAK2xC,WAEAe,EA2CJA,GAAY,EAEZ1yC,KAAKuyC,SAASluC,aAAa,MAAOrE,KAAKkxC,eACvClxC,KAAKuyC,SAASluC,aAAa,QAAS,YACpCrE,KAAKyxC,eAAe/pC,MAAMgmB,QAAU,GACpC1tB,KAAK4yC,SAASlrC,MAAMgmB,QAAUilB,EAEzBzyC,SAASU,YAEbZ,KAAKitB,IAAIvlB,MAAMG,OAASA,GAGzB7H,KAAKsH,MAAMI,MAAMG,OAASA,EAEP,MAAf7H,KAAK8H,SAER9H,KAAK8H,OAAOJ,MAAM6D,WAAa,IAGhCvL,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQG,UAAW,QAASjC,QA7D9D,CACCuqC,GAAY,EAEZ1yC,KAAKuyC,SAASluC,aAAa,MAAOrE,KAAKmxC,gBACvCnxC,KAAKuyC,SAASluC,aAAa,QAAS,aACpCrE,KAAKyxC,eAAe/pC,MAAMgmB,QAAU,OACpCilB,EAAa3yC,KAAK4yC,SAASlrC,MAAMgmB,QAEjC1tB,KAAK4yC,SAASlrC,MAAMgmB,QAAU,OAC9B7lB,EAAS7H,KAAKsH,MAAMI,MAAMG,OAE1B,IAAIgrC,EAAU7yC,KAAKwyC,iBAEfK,EAAQhrC,OAAS,IAEf3H,SAASU,YAEbZ,KAAKitB,IAAIvlB,MAAMG,OAASgrC,EAAQhrC,OAAS,MAG1C7H,KAAKsH,MAAMI,MAAMG,OAASgrC,EAAQhrC,OAAS,MAGxCgrC,EAAQ5qC,MAAQ,IAEd/H,SAASU,YAEbZ,KAAKitB,IAAIvlB,MAAMO,MAAQ4qC,EAAQ5qC,MAAQ,MAGxCjI,KAAKsH,MAAMI,MAAMO,MAAQ4qC,EAAQ5qC,MAAQ,MAGvB,MAAfjI,KAAK8H,SAER9H,KAAK8H,OAAOJ,MAAM6D,WAAa,UAGhCvL,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQm+B,SAAU,QAASjgC,IA0B7D8B,QAAQm4B,QAAQj6B,MAGjB8B,QAAQq6B,oBAAoBtkC,KAAKuyC,SAAUhoC,IAQ5CpB,SAASiD,UAAU9C,eAAiB,SAASwpC,GAE5C9yC,KAAK4yC,SAASlrC,MAAMgmB,QAAU,EAAgB,GAAK,QAQpDvkB,SAASiD,UAAUsjC,uBAAyB,WAE3C1vC,KAAK4yC,SAAW/xC,SAASG,cAAc,OAEvChB,KAAK4yC,SAASvuC,aAAa,MAAOrE,KAAKoxC,eACvCpxC,KAAK4yC,SAASvuC,aAAa,QAAS,YACpCrE,KAAK4yC,SAASlrC,MAAM0M,OAAS,UAC7BpU,KAAK4yC,SAASlrC,MAAM+qC,WAAa,MACjCzyC,KAAK4yC,SAASlrC,MAAM0M,OAAS,UAC7BpU,KAAK4yC,SAASlrC,MAAMgmB,QAAU,OAE9B1tB,KAAKumC,QAAQhiC,YAAYvE,KAAK4yC,UAE9B,IAAIG,GAAY,EACZ3jC,EAAI,KACJC,EAAI,KACJxH,EAAS,KACTI,EAAQ,KACR+qC,EAAa,KAEbzoC,EAAQjC,QAAQ2M,KAAKjV,MAAM,SAASmI,GAIvC,GAFAnI,KAAK2xC,WAE8B,QAA/B3xC,KAAK4yC,SAASlrC,MAAMgmB,QACxB,CACC,GAAKqlB,EAiDJA,GAAY,EAEZ/yC,KAAK4yC,SAASvuC,aAAa,MAAOrE,KAAKoxC,eACvCpxC,KAAK4yC,SAASvuC,aAAa,QAAS,YACpCrE,KAAKyxC,eAAe/pC,MAAMgmB,QAAU,GACpC1tB,KAAKuyC,SAAS7qC,MAAMgmB,QAAUslB,EAG9BhzC,KAAKitB,IAAIvlB,MAAM+U,KAAOrN,EAAE,KACxBpP,KAAKitB,IAAIvlB,MAAMuV,IAAM5N,EAAE,KAElBnP,SAASU,YAEbZ,KAAKitB,IAAIvlB,MAAMG,OAASA,EACxB7H,KAAKitB,IAAIvlB,MAAMO,MAAQA,EAID,QAFVK,QAAQiM,gBAAgBvU,KAAKyxC,gBAE/Bz8B,UAAqC,MAAfhV,KAAK8H,SAEpC9H,KAAKyxC,eAAe/pC,MAAMG,OAAU7H,KAAKitB,IAAIljB,aAC5C/J,KAAKqH,MAAM0C,aAAe/J,KAAKuxC,wBAA2B,OAI7DvxC,KAAKsH,MAAMI,MAAMG,OAASA,EAC1B7H,KAAKsH,MAAMI,MAAMO,MAAQA,EAEN,MAAfjI,KAAK8H,SAER9H,KAAK8H,OAAOJ,MAAM6D,WAAa,IAGhCvL,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQG,UAAW,QAASjC,QAjF9D,CACC4qC,GAAY,EAEZ/yC,KAAK4yC,SAASvuC,aAAa,MAAOrE,KAAKmxC,gBACvCnxC,KAAK4yC,SAASvuC,aAAa,QAAS,aACpCrE,KAAKyxC,eAAe/pC,MAAMgmB,QAAU,GACpCslB,EAAahzC,KAAKuyC,SAAS7qC,MAAMgmB,QACjC1tB,KAAKuyC,SAAS7qC,MAAMgmB,QAAU,OAG9Bte,EAAIhN,SAASpC,KAAKitB,IAAIvlB,MAAM+U,MAC5BpN,EAAIjN,SAASpC,KAAKitB,IAAIvlB,MAAMuV,KAC5BpV,EAAS7H,KAAKsH,MAAMI,MAAMG,OAC1BI,EAAQjI,KAAKsH,MAAMI,MAAMO,MAEzBjI,KAAKitB,IAAIvlB,MAAM+U,KAAO,MACtBzc,KAAKitB,IAAIvlB,MAAMuV,IAAM,MACrB,IAAIg2B,EAAY7pC,KAAKC,IAAIxI,SAASuG,KAAK6B,cAAgB,EAAGpI,SAAS2C,gBAAgByF,cAAgB,GAE9F/I,SAASU,YAEbZ,KAAKitB,IAAIvlB,MAAMO,MAASpH,SAASuG,KAAK8B,YAAc,EAAK,KACzDlJ,KAAKitB,IAAIvlB,MAAMG,OAAUorC,EAAY,EAAK,MAG3CjzC,KAAKsH,MAAMI,MAAMO,MAASpH,SAASuG,KAAK8B,YAAc,EAAK,KAC3DlJ,KAAKsH,MAAMI,MAAMG,OAAUorC,EAAY,EAAK,KAEzB,MAAfjzC,KAAK8H,SAER9H,KAAK8H,OAAOJ,MAAM6D,WAAa,UAG3BrL,SAASU,WAIS,QAFV0H,QAAQiM,gBAAgBvU,KAAKyxC,gBAE/Bz8B,UAAqC,MAAfhV,KAAK8H,SAEpC9H,KAAKyxC,eAAe/pC,MAAMG,OAAU7H,KAAKitB,IAAIljB,aAC5C/J,KAAKqH,MAAM0C,aAAe/J,KAAKuxC,wBAA2B,MAI7DvxC,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQE,SAAU,QAAShC,IAwC7D8B,QAAQm4B,QAAQj6B,OAIlB8B,QAAQq6B,oBAAoBtkC,KAAK4yC,SAAUroC,GAC3CN,QAAQD,YAAYhK,KAAKqH,MAAO,WAAYkD,IAQ7CpB,SAASiD,UAAU2jC,mBAAqB,WAEvC/vC,KAAKqH,MAAMK,MAAM0M,OAAS,OAE1BnK,QAAQq6B,oBAAoBtkC,KAAKqH,MAChCiB,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE3B,IAAIgqC,EAASloC,QAAQ04B,WAAWx6B,GAC5BiqC,EAASnoC,QAAQ44B,WAAW16B,GAC5BiH,EAAIpP,KAAK0iC,OACTrzB,EAAIrP,KAAK4iC,OAITyP,EAAc/pC,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE7C,IAAIoK,EAAKtI,QAAQ04B,WAAWx6B,GAAOgqC,EAC/B1/B,EAAKxI,QAAQ44B,WAAW16B,GAAOiqC,EACnCpyC,KAAKkzC,YAAY9jC,EAAImD,EAAIlD,EAAIoD,GAC7BzS,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ89B,KAAM,QAAS5/B,IACxD8B,QAAQm4B,QAAQj6B,MAGbqoC,EAAcloC,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE7C8B,QAAQy6B,uBAAuB7jC,SAAU,KAAMwxC,EAAa7B,GAC5DxwC,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ+9B,SAAU,QAAS7/B,IAC5D8B,QAAQm4B,QAAQj6B,MAGjB8B,QAAQq6B,oBAAoBzjC,SAAU,KAAMwxC,EAAa7B,GACzDxwC,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ69B,WAAY,QAAS3/B,IAC9D8B,QAAQm4B,QAAQj6B,OAIdjI,SAASuD,aAEZzD,KAAKqH,MAAMK,MAAM8pC,YAAc,SAShCroC,SAASiD,UAAU8mC,YAAc,SAAS9jC,EAAGC,GAE7CrP,KAAKitB,IAAIvlB,MAAM+U,KAAOrN,EAAI,KAC1BpP,KAAKitB,IAAIvlB,MAAMuV,IAAM5N,EAAI,MAQ1BlG,SAASiD,UAAUs2B,KAAO,WAEzB,OAAOtgC,SAASpC,KAAKitB,IAAIvlB,MAAM+U,OAQhCtT,SAASiD,UAAUw2B,KAAO,WAEzB,OAAOxgC,SAASpC,KAAKitB,IAAIvlB,MAAMuV,MAShC9T,SAASiD,UAAUwjC,oBAAsB,WAExC5vC,KAAKmzC,SAAWtyC,SAASG,cAAc,OAEvChB,KAAKmzC,SAAS9uC,aAAa,MAAOrE,KAAKixC,YACvCjxC,KAAKmzC,SAAS9uC,aAAa,QAAS,SACpCrE,KAAKmzC,SAASzrC,MAAM+qC,WAAa,MACjCzyC,KAAKmzC,SAASzrC,MAAM0M,OAAS,UAC7BpU,KAAKmzC,SAASzrC,MAAMgmB,QAAU,OAE9B1tB,KAAKumC,QAAQhiC,YAAYvE,KAAKmzC,UAE9BlpC,QAAQq6B,oBAAoBtkC,KAAKmzC,SAChC7qC,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE3BnI,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQs+B,MAAO,QAASpgC,IAErDnI,KAAK0J,eAER1J,KAAKivB,UAILjvB,KAAK2K,YAAW,GAGjBV,QAAQm4B,QAAQj6B,QAanBgB,SAASiD,UAAUgnC,SAAW,SAASC,GAEtCrzC,KAAKqzC,MAAQxyC,SAASG,cAAc,OACpChB,KAAKqzC,MAAMhvC,aAAa,MAAOgvC,GAC/BrzC,KAAKqzC,MAAMhvC,aAAa,QAAS,QACjCrE,KAAKqzC,MAAM3rC,MAAM4rC,YAAc,MAC/BtzC,KAAKqzC,MAAM3rC,MAAM+qC,WAAa,MAC9BzyC,KAAKqzC,MAAM3rC,MAAM6rC,UAAY,OAE7BvzC,KAAKqH,MAAMmsC,aAAaxzC,KAAKqzC,MAAOrzC,KAAKqH,MAAMuO,aAYhDzM,SAASiD,UAAU3C,YAAc,SAASgqC,GAEzCzzC,KAAKmzC,SAASzrC,MAAMgmB,QAAU,EAAa,GAAK,QAQjDvkB,SAASiD,UAAU3B,UAAY,WAE9B,OAAgB,MAAZzK,KAAKitB,KAEyB,QAA1BjtB,KAAKitB,IAAIvlB,MAAMgmB,SAexBvkB,SAASiD,UAAUzB,WAAa,SAASC,GAExB,MAAZ5K,KAAKitB,KAAejtB,KAAKyK,aAAeG,IAEvCA,EAEH5K,KAAK0K,OAIL1K,KAAK4xC,SAURzoC,SAASiD,UAAU1B,KAAO,WAEzB1K,KAAKitB,IAAIvlB,MAAMgmB,QAAU,GACzB1tB,KAAK2xC,WAEL,IAAIjqC,EAAQY,QAAQiM,gBAAgBvU,KAAKyxC,gBAEpCvxC,SAASU,WAAgC,QAAlB8G,EAAMsN,UAAqC,MAAfhV,KAAK8H,QACvB,QAArC9H,KAAKyxC,eAAe/pC,MAAMgmB,UAE1B1tB,KAAKyxC,eAAe/pC,MAAMG,OAAU7H,KAAKitB,IAAIljB,aAC3C/J,KAAKqH,MAAM0C,aAAe/J,KAAKuxC,wBAA2B,MAG7DvxC,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQq+B,QAQ1Cn/B,SAASiD,UAAUwlC,KAAO,WAEzB5xC,KAAKitB,IAAIvlB,MAAMgmB,QAAU,OACzB1tB,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQo+B,QAS1Cl/B,SAASiD,UAAU6iB,QAAU,WAE5BjvB,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQu+B,UAEzB,MAAZxoC,KAAKitB,MAERhjB,QAAQm7B,QAAQplC,KAAKitB,KACrBjtB,KAAKitB,IAAIpZ,WAAWC,YAAY9T,KAAKitB,KACrCjtB,KAAKitB,IAAM,MAGZjtB,KAAKqH,MAAQ,KACbrH,KAAKqI,QAAU,KACfrI,KAAKyxC,eAAiB,MAGvBxxC,WAAWkJ,cAA+B,IAAbA,SAA2BA,cAAWvC,EA6BnEqpC,OAAO7jC,UAAU9E,MAAQ,KAQzB2oC,OAAO7jC,UAAUhF,MAAO,EAOxB6oC,OAAO7jC,UAAUsnC,SAAW,WAE3B,OAAO1zC,KAAKsH,OASb2oC,OAAO7jC,UAAUunC,WAAa,SAASC,EAASC,GAE/C,IAAIrsC,EAAK3G,SAASG,cAAc,MAC5ByG,EAAK5G,SAASG,cAAc,MAChCwG,EAAGjD,YAAYkD,GACfA,EAAK5G,SAASG,cAAc,MAG5B,IAAIwJ,EAAS3J,SAASG,cAAc,UACpCsH,QAAQlE,MAAMoG,EAAQ1F,YAAY+G,IAAI,OAAS,MAC/CpE,EAAGlD,YAAYiG,GAEfP,QAAQD,YAAYQ,EAAQ,SAAS,WAEpCopC,OAIDppC,EAAS3J,SAASG,cAAc,UAChCsH,QAAQlE,MAAMoG,EAAQ1F,YAAY+G,IAAI,WAAa,UACnDpE,EAAGlD,YAAYiG,GAEfP,QAAQD,YAAYQ,EAAQ,SAAS,WAEpCqpC,OAGDrsC,EAAGjD,YAAYkD,GACfzH,KAAKoH,KAAK7C,YAAYiD,IAQvByoC,OAAO7jC,UAAU0nC,QAAU,SAAS/zC,EAAMgI,EAAOzB,GAEhD,IAAIytC,EAAQlzC,SAASG,cAAc,SAKnC,OAHA+yC,EAAM1vC,aAAa,OAAQiC,GAAQ,QACnCytC,EAAMhsC,MAAQA,EAEP/H,KAAKg0C,SAASj0C,EAAMg0C,IAQ5B9D,OAAO7jC,UAAU6nC,YAAc,SAASl0C,EAAMgI,GAE7C,IAAIgsC,EAAQlzC,SAASG,cAAc,SAWnC,OATA+yC,EAAM1vC,aAAa,OAAQ,YAC3BrE,KAAKg0C,SAASj0C,EAAMg0C,GAGhBhsC,IAEHgsC,EAAMG,SAAU,GAGVH,GAQR9D,OAAO7jC,UAAU+nC,YAAc,SAASp0C,EAAMgI,EAAOqsC,GAEpD,IAAIL,EAAQlzC,SAASG,cAAc,YAUnC,OARId,SAASiB,OAEZizC,IAGDL,EAAM1vC,aAAa,OAAQ+vC,GAAQ,GACnCL,EAAMhsC,MAAQA,EAEP/H,KAAKg0C,SAASj0C,EAAMg0C,IAQ5B9D,OAAO7jC,UAAUioC,SAAW,SAASt0C,EAAMu0C,EAAezmB,GAEzD,IAAI0mB,EAAS1zC,SAASG,cAAc,UAYpC,OAVY,MAAR6sB,GAEH0mB,EAAOlwC,aAAa,OAAQwpB,GAGzBymB,GAEHC,EAAOlwC,aAAa,WAAY,QAG1BrE,KAAKg0C,SAASj0C,EAAMw0C,IAQ5BtE,OAAO7jC,UAAUooC,UAAY,SAASC,EAAOt5B,EAAOpT,EAAO2sC,GAE1D,IAAIC,EAAS9zC,SAASG,cAAc,UAEpCsH,QAAQ+B,QAAQsqC,EAAQx5B,GACxBw5B,EAAOtwC,aAAa,QAAS0D,GAEzB2sC,GAEHC,EAAOtwC,aAAa,WAAYqwC,GAGjCD,EAAMlwC,YAAYowC,IASnB1E,OAAO7jC,UAAU4nC,SAAW,SAASj0C,EAAMg0C,GAE1C,IAAIvsC,EAAK3G,SAASG,cAAc,MAC5ByG,EAAK5G,SAASG,cAAc,MAShC,OARAsH,QAAQlE,MAAMqD,EAAI1H,GAClByH,EAAGjD,YAAYkD,IAEfA,EAAK5G,SAASG,cAAc,OACzBuD,YAAYwvC,GACfvsC,EAAGjD,YAAYkD,GACfzH,KAAKoH,KAAK7C,YAAYiD,GAEfusC,GAGR9zC,WAAWgwC,YAA2B,IAAXA,OAAyBA,YAASrpC,EA2B7DupC,QAAQ/jC,UAAUnH,IAAM,KAOxBkrC,QAAQ/jC,UAAUnE,MAAQ,KAO1BkoC,QAAQ/jC,UAAUvE,OAAS,KAE3B5H,WAAWkwC,aAA6B,IAAZA,QAA0BA,aAAUvpC,EAgFhEwpC,aAAahkC,UAAUikC,aAAc,EAOrCD,aAAahkC,UAAUkkC,cAAe,EAOtCF,aAAahkC,UAAUmkC,gBAAiB,EAOxCH,aAAahkC,UAAUtE,OAAS,WAE/B,IAAIgB,EAAI9I,KAAK40C,mBACT/rC,EAAI7I,KAAK60C,oBAETC,EAAI1yC,SAASpC,KAAKitB,IAAIvlB,MAAM+U,MAC5BsL,EAAI3lB,SAASpC,KAAKitB,IAAIvlB,MAAMsV,OAC5BpM,EAAIxO,SAASpC,KAAKitB,IAAIvlB,MAAMuV,KAC5BZ,EAAIja,SAASpC,KAAKitB,IAAIvlB,MAAMyV,QAE5Bnd,KAAKqwC,cACPz7B,MAAMkgC,KACNlgC,MAAMmT,IACP+sB,GAAK,GACL/sB,GAAK,GACLjf,EAAIif,EAAI+sB,EAAI,IAEZ90C,KAAKitB,IAAIvlB,MAAMO,MAASa,EAAIif,EAAI+sB,EAAG,MAGhC90C,KAAKswC,eACP17B,MAAMhE,KACNgE,MAAMyH,IACPzL,GAAK,GACLyL,GAAK,GACLxT,EAAI+H,EAAIyL,EAAI,IAEZrc,KAAKitB,IAAIvlB,MAAMG,OAAUgB,EAAI+H,EAAIyL,EAAG,OAUtC+zB,aAAahkC,UAAUwoC,iBAAmB,WAEzC,OAAO/zC,SAASuG,KAAK8B,aAStBknC,aAAahkC,UAAUyoC,kBAAoB,WAE1C,OAAOh0C,SAASuG,KAAK6B,cAGtBhJ,WAAWmwC,kBAAuC,IAAjBA,aAA+BA,kBAAexpC,EAqD/E2rB,aAAanmB,UAAU+H,QAAU,KAQjCoe,aAAanmB,UAAUokC,YAAc,KAOrCje,aAAanmB,UAAUomB,WAAa,KAQpCD,aAAanmB,UAAU6lB,YAAc,KAOrCM,aAAanmB,UAAU2oC,eAAiB,KAOxCxiB,aAAanmB,UAAU4oC,SAAU,EAOjCziB,aAAanmB,UAAU6oC,aAAe,KAOtC1iB,aAAanmB,UAAU8oC,kBAAoB,KAO3C3iB,aAAanmB,UAAU+oC,aAAe,KAOtC5iB,aAAanmB,UAAUgpC,aAAe,KAOtC7iB,aAAanmB,UAAUipC,iBAAmB,KAO1C9iB,aAAanmB,UAAU8lB,YAAa,EAOpCK,aAAanmB,UAAUkpC,eAAgB,EAOvC/iB,aAAanmB,UAAUmpC,aAAc,EAOrChjB,aAAanmB,UAAUgmB,sBAAuB,EAO9CG,aAAanmB,UAAUopC,kBAAoB,IAO3CjjB,aAAanmB,UAAUqpC,mBAAqB,GAQ5CljB,aAAanmB,UAAUspC,kBAAmB,EAO1CnjB,aAAanmB,UAAUuH,UAAY,WAElC,OAAO3T,KAAKg1C,SAQbziB,aAAanmB,UAAUupC,WAAa,SAAS5tC,GAE5C/H,KAAKg1C,QAAUjtC,GAQhBwqB,aAAanmB,UAAUwpC,gBAAkB,WAExC,OAAO51C,KAAKs1C,eAQb/iB,aAAanmB,UAAUsmB,iBAAmB,SAAS3qB,GAElD/H,KAAKs1C,cAAgBvtC,GAQtBwqB,aAAanmB,UAAUypC,cAAgB,WAEtC,OAAO71C,KAAKu1C,aAQbhjB,aAAanmB,UAAU0pC,eAAiB,SAAS/tC,GAEhD/H,KAAKu1C,YAAcxtC,GASpBwqB,aAAanmB,UAAUumB,iBAAmB,SAASxqB,GAElD,OAAO,MASRoqB,aAAanmB,UAAUimB,cAAgB,SAASphB,EAAO7B,EAAGC,EAAGlH,GAE5D,OAAO8I,EAAM8kC,UAAU3mC,EAAGC,IAS3BkjB,aAAanmB,UAAUwmB,kBAAoB,SAASzqB,GAEnD,OAAOnI,KAAKmU,QAAQua,WAAU,IAS/B6D,aAAanmB,UAAUymB,qBAAuB,SAAS5hB,GAEtD,OAAO,MAQRshB,aAAanmB,UAAU4pC,SAAW,WAEjC,OAAgC,MAAzBh2C,KAAKi2C,kBAQb1jB,aAAanmB,UAAU8pC,MAAQ,WAEL,MAArBl2C,KAAKi1C,eAERj1C,KAAKm2C,SAASn2C,KAAKi1C,cACnBj1C,KAAKi1C,aAAe,MAGrBj1C,KAAKo2C,oBACLp2C,KAAKq2C,kBACLr2C,KAAKs2C,YAwBN/jB,aAAanmB,UAAUqkC,UAAY,SAAStoC,GAEvCnI,KAAKg1C,UAAY/qC,QAAQk4B,WAAWh6B,IAAiC,MAAzBnI,KAAKi2C,mBAEpDj2C,KAAKu2C,UAAUpuC,GACfnI,KAAKi2C,iBAAmB3tC,QAAQ2M,KAAKjV,KAAMA,KAAKw2C,WAChDx2C,KAAKy2C,eAAiBnuC,QAAQ2M,KAAKjV,KAAMA,KAAK02C,SAC9CzsC,QAAQq6B,oBAAoBzjC,SAAU,KAAMb,KAAKi2C,iBAAkBj2C,KAAKy2C,gBAEpEv2C,SAASqD,WAAa0G,QAAQm5B,aAAaj7B,KAE9CnI,KAAK6hC,YAAc53B,QAAQu4B,UAAUr6B,GACrC8B,QAAQq6B,oBAAoBtkC,KAAK6hC,YAAa,KAAM7hC,KAAKi2C,iBAAkBj2C,KAAKy2C,mBAUnFlkB,aAAanmB,UAAUmqC,UAAY,SAASpuC,GAE3CnI,KAAKiyB,YAAcjyB,KAAK4yB,kBAAkBzqB,GAC1CnI,KAAKiyB,YAAYvqB,MAAMogB,SAAW,WAClC9nB,KAAKiyB,YAAYvqB,MAAMqqC,OAAS/xC,KAAKw1C,kBACrCltC,QAAQ8J,WAAWpS,KAAKiyB,YAAajyB,KAAKy1C,oBAEtCz1C,KAAK01C,kBAAoBx1C,SAAS+C,SAErCjD,KAAKiyB,YAAYvqB,MAAMivC,cAAgB,SASzCpkB,aAAanmB,UAAUkqC,SAAW,WAKjCt2C,KAAKo2C,qBAQN7jB,aAAanmB,UAAUgqC,kBAAoB,WAElB,MAApBp2C,KAAKiyB,cAE2B,MAA/BjyB,KAAKiyB,YAAYpe,YAEpB7T,KAAKiyB,YAAYpe,WAAWC,YAAY9T,KAAKiyB,aAG9CjyB,KAAKiyB,YAAc,OASrBM,aAAanmB,UAAUwqC,mBAAqB,SAASzuC,GAEpD,OAAS8B,QAAQ47B,aAAa19B,IAAQ8B,QAAQg8B,WAAW99B,GACvDtH,SAASg2C,iBAAiB5sC,QAAQ04B,WAAWx6B,GAAM8B,QAAQ44B,WAAW16B,IACrE8B,QAAQu4B,UAAUr6B,IAQtBoqB,aAAanmB,UAAU0qC,mBAAqB,SAAS7lC,EAAO9I,GAE3D,IAAIiH,EAAInF,QAAQ04B,WAAWx6B,GACvBkH,EAAIpF,QAAQ44B,WAAW16B,GACvByU,EAAStU,QAAQof,UAAUzW,EAAM0W,WACjCe,EAASpgB,QAAQigB,kBACjB5e,EAAM3J,KAAK42C,mBAAmBzuC,GAElC,GAAInI,KAAK01C,iBAER,KAAc,MAAP/rC,GAAeA,GAAOsH,EAAM0W,WAElChe,EAAMA,EAAIkK,WAKZ,OAAc,MAAPlK,GAAeyF,GAAKwN,EAAOxN,EAAIsZ,EAAOtZ,GAAKC,GAAKuN,EAAOvN,EAAIqZ,EAAOrZ,GACxED,GAAKwN,EAAOxN,EAAIsZ,EAAOtZ,EAAI6B,EAAM0W,UAAUhL,aAC3CtN,GAAKuN,EAAOvN,EAAIqZ,EAAOrZ,EAAI4B,EAAM0W,UAAU5d,cAU7CwoB,aAAanmB,UAAUoqC,UAAY,SAASruC,GAE3C,IAAI8I,EAAQjR,KAAK2yB,iBAAiBxqB,GA4BlC,GAzBa,MAAT8I,GAAkBjR,KAAK82C,mBAAmB7lC,EAAO9I,KAEpD8I,EAAQ,MAGLA,GAASjR,KAAKi1C,eAEQ,MAArBj1C,KAAKi1C,cAERj1C,KAAKm2C,SAASn2C,KAAKi1C,aAAc9sC,GAGlCnI,KAAKi1C,aAAehkC,EAEK,MAArBjR,KAAKi1C,cAERj1C,KAAK+2C,UAAU/2C,KAAKi1C,aAAc9sC,IAIX,MAArBnI,KAAKi1C,cAERj1C,KAAKg3C,SAASh3C,KAAKi1C,aAAc9sC,GAGV,MAApBnI,KAAKiyB,aAA+C,MAAvBjyB,KAAK+0C,gBAAkE,WAAxC/0C,KAAK+0C,eAAertC,MAAM6D,WAuB7D,MAApBvL,KAAKiyB,cAEbjyB,KAAKiyB,YAAYvqB,MAAM6D,WAAa,cAxBrC,CACC,IAAI6D,EAAInF,QAAQ04B,WAAWx6B,GACvBkH,EAAIpF,QAAQ44B,WAAW16B,GAEQ,MAA/BnI,KAAKiyB,YAAYpe,YAEpBhT,SAASuG,KAAK7C,YAAYvE,KAAKiyB,aAGhCjyB,KAAKiyB,YAAYvqB,MAAM6D,WAAa,UAEb,MAAnBvL,KAAKwyB,aAERpjB,GAAKpP,KAAKwyB,WAAWpjB,EACrBC,GAAKrP,KAAKwyB,WAAWnjB,GAGtB,IAAIuN,EAAStU,QAAQuU,wBAAwBhc,UAE7Cb,KAAKiyB,YAAYvqB,MAAM+U,KAAQrN,EAAIwN,EAAOxN,EAAK,KAC/CpP,KAAKiyB,YAAYvqB,MAAMuV,IAAO5N,EAAIuN,EAAOvN,EAAK,KAO/CpF,QAAQm4B,QAAQj6B,IASjBoqB,aAAanmB,UAAUsqC,QAAU,SAASvuC,GAEzC,GAAyB,MAArBnI,KAAKi1C,aACT,CACC,GAAyB,MAArBj1C,KAAKm1C,eAAgD,MAAvBn1C,KAAK+0C,gBACE,UAAxC/0C,KAAK+0C,eAAertC,MAAM6D,YAC3B,CACC,IAAI+G,EAAQtS,KAAKi1C,aAAa1tB,KAAKjV,MAC/B9K,EAAKxH,KAAKi1C,aAAa1tB,KAAKoH,UAC5Bvf,EAAIpP,KAAKm1C,aAAa/lC,EAAIkD,EAAQ9K,EAAG4H,EACrCC,EAAIrP,KAAKm1C,aAAa9lC,EAAIiD,EAAQ9K,EAAG6H,EAEzCrP,KAAKi3C,KAAKj3C,KAAKi1C,aAAc9sC,EAAKnI,KAAKk1C,kBAAmB9lC,EAAGC,GAG9DrP,KAAKm2C,SAASn2C,KAAKi1C,cACnBj1C,KAAKi1C,aAAe,KAGrBj1C,KAAKs2C,WACLt2C,KAAKq2C,kBAELpsC,QAAQm4B,QAAQj6B,IAQjBoqB,aAAanmB,UAAUiqC,gBAAkB,WAEhB,MAApBr2C,KAAK6hC,cAER53B,QAAQy6B,uBAAuB1kC,KAAK6hC,YAAa,KAAM7hC,KAAKi2C,iBAAkBj2C,KAAKy2C,gBACnFz2C,KAAK6hC,YAAc,MAGpB53B,QAAQy6B,uBAAuB7jC,SAAU,KAAMb,KAAKi2C,iBAAkBj2C,KAAKy2C,gBAC3Ez2C,KAAKi2C,iBAAmB,KACxBj2C,KAAKy2C,eAAiB,MAQvBlkB,aAAanmB,UAAU2qC,UAAY,SAAS9lC,EAAO9I,GAElD8I,EAAMimC,aAAc,EACpBjmC,EAAMkmC,eAAiBltC,QAAQm5B,aAAaj7B,GAC5CnI,KAAK+0C,eAAiB/0C,KAAK6yB,qBAAqB5hB,GAErB,MAAvBjR,KAAK+0C,gBAA0B/0C,KAAK01C,kBAAoBx1C,SAAS+C,SAEpEjD,KAAK+0C,eAAertC,MAAMivC,cAAgB,QAIvC32C,KAAK41C,mBAA4C,MAAvB51C,KAAK+0C,iBAElC/0C,KAAKo1C,aAAe,IAAIgC,QAAQnmC,EAAOA,EAAMomC,aAAaC,mBAGvDt3C,KAAKoyB,uBAERpyB,KAAKq1C,iBAAmB,IAAIkC,gBAAgBtmC,EAAOtD,YAAY4nB,oBAIhEtkB,EAAMjH,YAAYC,QAAQ4+B,iBAAkB7oC,KAAK0wC,gBAQlDne,aAAanmB,UAAU+pC,SAAW,SAASllC,EAAO9I,GAEjDnI,KAAKk1C,kBAAoB,KACzBl1C,KAAKm1C,aAAe,KACpBlkC,EAAMimC,aAAc,EAGpBjmC,EAAMsyB,eAAevjC,KAAK0wC,eAEC,MAAvB1wC,KAAK+0C,iBAE8B,MAAlC/0C,KAAK+0C,eAAelhC,YAEvB7T,KAAK+0C,eAAelhC,WAAWC,YAAY9T,KAAK+0C,gBAGjD/0C,KAAK+0C,eAAiB,MAGE,MAArB/0C,KAAKo1C,eAERp1C,KAAKo1C,aAAanmB,UAClBjvB,KAAKo1C,aAAe,MAGQ,MAAzBp1C,KAAKq1C,mBAERr1C,KAAKq1C,iBAAiBpmB,UACtBjvB,KAAKq1C,iBAAmB,OAU1B9iB,aAAanmB,UAAU4qC,SAAW,SAAS/lC,EAAO9I,GAEjD,IAAIyU,EAAStU,QAAQof,UAAUzW,EAAM0W,WACjCe,EAASpgB,QAAQigB,gBAAgBtX,EAAM0W,WACvCvY,EAAInF,QAAQ04B,WAAWx6B,GAAOyU,EAAOxN,EAAIsZ,EAAOtZ,EAAI6B,EAAMumC,MAC1DnoC,EAAIpF,QAAQ44B,WAAW16B,GAAOyU,EAAOvN,EAAIqZ,EAAOrZ,EAAI4B,EAAMwmC,MAQ9D,GANIxmC,EAAMymC,aAAkC,MAAnB13C,KAAKkyB,YAAsBlyB,KAAKkyB,aAExDjhB,EAAM0mC,qBAAqBvoC,EAAGC,EAAG4B,EAAM2mC,YAIX,MAAzB53C,KAAKq1C,kBAA4BpkC,EAAM4mC,gBAC3C,CACC73C,KAAKk1C,kBAAoBl1C,KAAKqyB,cAAcphB,EAAO7B,EAAGC,EAAGlH,GACzD,IAAI0J,EAAQZ,EAAMa,UAAUC,SAAS/R,KAAKk1C,mBAC1Cl1C,KAAKq1C,iBAAiByC,UAAUjmC,GAIjC,GAA2B,MAAvB7R,KAAK+0C,eACT,CACuC,MAAlC/0C,KAAK+0C,eAAelhC,aAEvB5C,EAAM0W,UAAUpjB,YAAYvE,KAAK+0C,gBAEjC/0C,KAAK+0C,eAAertC,MAAMqqC,OAAS,IACnC/xC,KAAK+0C,eAAertC,MAAMogB,SAAW,YAGtC,IAAIytB,EAAcv1C,KAAK61C,iBAAmB5kC,EAAM8mC,mBAAmB5vC,GAC/D6vC,GAAY,EAGhB,GAAyB,MAArBh4C,KAAKo1C,cAAwBp1C,KAAKo1C,aAAa6C,kBAAkB9vC,GACrE,CAEC,IAEIse,EAAS,IAAInX,YAAY,EAAG,EAFxBlN,SAASpC,KAAK+0C,eAAertC,MAAMO,OACnC7F,SAASpC,KAAK+0C,eAAertC,MAAMG,SAEvCsnC,EAAQ,IAAIhgC,QAAQC,EAAGC,GAE3B2oC,GAAY,EACZ5oC,GAFA+/B,EAAQnvC,KAAKo1C,aAAavQ,KAAKpe,EAAQ0oB,EAAOoG,GAAa,IAEjDnmC,EACVC,EAAI8/B,EAAM9/B,OAEN,GAAIkmC,EACT,CACC,IAAIjjC,EAAQrB,EAAMsW,KAAKjV,MACnB9K,EAAKyJ,EAAMsW,KAAKoH,UAChBupB,EAAMjnC,EAAMknC,SAAW,EAC3B/oC,GAAK6B,EAAMmnC,KAAKhpC,EAAIkD,EAAQ9K,EAAG4H,EAAI8oC,GAAO1wC,EAAG4H,GAAKkD,EAClDjD,GAAK4B,EAAMmnC,KAAK/oC,EAAIiD,EAAQ9K,EAAG6H,EAAI6oC,GAAO1wC,EAAG6H,GAAKiD,EAG1B,MAArBtS,KAAKo1C,cAAwB4C,GAEhCh4C,KAAKo1C,aAAaxD,OAGO,MAAtB5xC,KAAKq4C,gBAERjpC,GAAKpP,KAAKq4C,cAAcjpC,EACxBC,GAAKrP,KAAKq4C,cAAchpC,GAGzBrP,KAAK+0C,eAAertC,MAAM+U,KAAOrT,KAAK2c,MAAM3W,GAAK,KACjDpP,KAAK+0C,eAAertC,MAAMuV,IAAM7T,KAAK2c,MAAM1W,GAAK,KAChDrP,KAAK+0C,eAAertC,MAAM6D,WAAa,UAGxCvL,KAAKm1C,aAAe,IAAIhmC,QAAQC,EAAGC,IASpCkjB,aAAanmB,UAAU6qC,KAAO,SAAShmC,EAAO9I,EAAKmwC,EAAYlpC,EAAGC,GAEjErP,KAAKwwC,YAAYplC,MAAMpL,KAAMqL,WAMW,UAApC4F,EAAM0W,UAAUjgB,MAAM6D,YAEzB0F,EAAM0W,UAAU2J,SAIlBrxB,WAAWsyB,kBAAuC,IAAjBA,aAA+BA,kBAAe3rB,EAiC/EiqC,UAAUzkC,UAAY,IAAIw1B,cAC1BiP,UAAUzkC,UAAUH,YAAc4kC,UAOlCA,UAAUzkC,UAAUub,UAAY,KAOhCkpB,UAAUzkC,UAAU4oC,SAAU,EAU9BnE,UAAUzkC,UAAUmsC,SAAU,EAa9B1H,UAAUzkC,UAAUosC,mBAAoB,EAoBxC3H,UAAUzkC,UAAUqsC,QAAU,SAASpxC,EAAOuqB,EAAMrnB,EAAOmuC,EAAahxC,EAAOixC,GAE9E,IAAI7mB,EAAMjxB,SAASG,cAAuB,MAAR4wB,EAAgB,MAAQ,UACtDgnB,EAAmBlxC,IAA4B,MAAjBixC,EAChC,gBAAkB,iBACpB7mB,EAAIoe,UAAY0I,EAChB9mB,EAAIztB,aAAa,MAAOutB,GAEX,MAATvqB,IAES,MAARuqB,EAEHE,EAAIztB,aAAa,QAASgD,GAI1BiB,QAAQlE,MAAM0tB,EAAKzqB,IAIrBrH,KAAK2nB,UAAUpjB,YAAYutB,GAGd,MAATvnB,IAEHN,QAAQD,YAAY8nB,EAAK,QAASvnB,GAE9BrK,SAASqD,UAEZ0G,QAAQD,YAAY8nB,EAAK,WAAYvnB,IAIvC,IAAIsuC,EAAevwC,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE3B,MAAfuwC,EAEH5mB,EAAIztB,aAAa,MAAOutB,GAIxBE,EAAIpqB,MAAMoxC,gBAAkB,MA8D9B,OAxDA7uC,QAAQq6B,oBAAoBxS,EAAKxpB,QAAQ2M,KAAKjV,MAAM,SAASmI,GAY5D,GAVmB,MAAfuwC,EAEH5mB,EAAIztB,aAAa,MAAOq0C,GAIxB5mB,EAAIpqB,MAAMoxC,gBAAkB,OAIR,MAAjBH,EACJ,CACkB,MAAb34C,KAAK+4C,OAER/4C,KAAK+4C,KAAO,IAAIC,YAChBh5C,KAAK+4C,KAAK5xC,QAGX,IAAIie,EAAOplB,KAAKi5C,WAOhB,GALIj5C,KAAK+4C,KAAKG,iBAEbl5C,KAAK+4C,KAAKI,WAGP/zB,GAAQ0M,EACZ,CAEC9xB,KAAKi5C,WAAannB,EAClB9xB,KAAK+4C,KAAKJ,cAAgBA,EAE1B,IAAIvyB,EAAQ,IAAIjX,QACf2iB,EAAIpV,WACJoV,EAAI5U,UAAY4U,EAAI/nB,cACrB/J,KAAK+4C,KAAKnwC,MAAMwd,EAAMhX,EAAGgX,EAAM/W,EAAG,KAAMlH,GAGpCnI,KAAK+4C,KAAKG,kBAEbpnB,EAAIoe,UAAY0I,EAAmB,WAEnC54C,KAAK+4C,KAAKI,SAAW,WAEpBH,YAAY5sC,UAAU+sC,SAAS/tC,MAAMpL,MACrC8xB,EAAIoe,UAAY0I,EAChB54C,KAAKi5C,WAAa,YAKnB,KAAMJ,GAEV5uC,QAAQD,YAAY8nB,EAAK,WAAY+mB,GAE9B/mB,GAaR+e,UAAUzkC,UAAUioC,SAAW,SAAS3sC,GAEvC,IAAIulB,EAAMpsB,SAASG,cAAc,OACjCisB,EAAIvlB,MAAMgmB,QAAU,SACpBT,EAAIijB,UAAY,0BAEhB,IAAIqE,EAAS1zC,SAASG,cAAc,UAMpC,OALAuzC,EAAOrE,UAAYxoC,GAAS,iBAC5BulB,EAAI1oB,YAAYgwC,GAEhBv0C,KAAK2nB,UAAUpjB,YAAY0oB,GAEpBsnB,GAeR1D,UAAUzkC,UAAUgtC,eAAiB,SAAS/xC,EAAOK,GAEpD,IAAI6sC,EAAS1zC,SAASG,cAAc,UAiBpC,OAhBAuzC,EAAOrE,UAAYxoC,GAAS,iBAC5B1H,KAAKw0C,UAAUD,EAAQltC,EAAO,MAE9B4C,QAAQD,YAAYuqC,EAAQ,UAAU,SAASpsC,GAE9C,IAAIJ,EAAQwsC,EAAO8E,QAAQ9E,EAAO+E,eAClC/E,EAAO+E,cAAgB,EAEJ,MAAfvxC,EAAMwC,OAETxC,EAAMwC,MAAMpC,MAIdnI,KAAK2nB,UAAUpjB,YAAYgwC,GAEpBA,GAgBR1D,UAAUzkC,UAAUooC,UAAY,SAASC,EAAOptC,EAAOU,GAEtD,IAAI4sC,EAAS9zC,SAASG,cAAc,UAcpC,OAbAsH,QAAQ+B,QAAQsqC,EAAQttC,GAEH,mBAAX,EAETstC,EAAOpqC,MAAQxC,EAIf4sC,EAAOtwC,aAAa,QAAS0D,GAG9B0sC,EAAMlwC,YAAYowC,GAEXA,GAUR9D,UAAUzkC,UAAUmtC,cAAgB,SAASlyC,EAAOuqB,EAAMrnB,EAAOmuC,EAAahxC,GAE7E,IAAIoqB,EAAMjxB,SAASG,cAAc,OA4DjC,OA3DA8wB,EAAI8mB,iBAAmBlxC,GAAS,gBAChCoqB,EAAIoe,UAAYpe,EAAI8mB,iBACpB9mB,EAAIztB,aAAa,MAAOutB,GACxBE,EAAI0nB,QAAUd,EAED,MAATrxC,GAEHyqB,EAAIztB,aAAa,QAASgD,GAG3B4C,QAAQD,YAAY8nB,EAAK,QAASxpB,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE7D,IAmBI0I,EAjBO,OAFPA,EAAM7Q,KAAKy5C,aAAaD,UAI3Bx5C,KAAKy5C,aAAaD,QAAUx5C,KAAKy5C,aAAa9jC,aAAa,OAC3D3V,KAAKy5C,aAAap1C,aAAa,MAAOwM,IAItC7Q,KAAKy5C,aAAavJ,UAAYlwC,KAAKy5C,aAAab,iBAG7C54C,KAAKw4C,oBAERx4C,KAAK05C,YAAc5nB,GAGpB9xB,KAAKy5C,aAAe3nB,EAIT,OAFPjhB,EAAMihB,EAAI0nB,UAIb1nB,EAAI0nB,QAAU1nB,EAAInc,aAAa,OAC/Bmc,EAAIztB,aAAa,MAAOwM,IAIxBihB,EAAIoe,UAAYpe,EAAI8mB,iBAAiB,WAGtC54C,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ0+B,SACzCp+B,QAGDvK,KAAK2nB,UAAUpjB,YAAYutB,GAEH,MAApB9xB,KAAK05C,cAER15C,KAAK05C,YAAc5nB,EAInB9xB,KAAK25C,WAAW7nB,GAChBvnB,KAGMunB,GAaR+e,UAAUzkC,UAAUwtC,QAAU,SAASvyC,EAAOuqB,EAAMrnB,EAAOmuC,EAAahxC,EAAOmyC,GAE9EA,EAAoB,MAAVA,GAAkBA,EAC5B,IAAI/nB,EAAMjxB,SAASG,cAAuB,MAAR4wB,EAAgB,MAAQ,UAoC1D,OAlCAE,EAAI8mB,iBAAmBlxC,GAAS,gBAChCoqB,EAAIoe,UAAYpe,EAAI8mB,iBACpB9mB,EAAIztB,aAAa,MAAOutB,GACxBE,EAAI0nB,QAAUd,EAED,MAATrxC,GAEHyqB,EAAIztB,aAAa,QAASgD,GAGvBrH,KAAKg1C,SAAW6E,IAEnB5vC,QAAQD,YAAY8nB,EAAK,QAASxpB,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE7DnI,KAAK25C,WAAW7nB,EAAKvnB,GACrBvK,KAAKu4C,SAAU,MAGhBtuC,QAAQD,YAAY8nB,EAAK,WAAYxpB,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEhEnI,KAAK25C,WAAW7nB,EAAKvnB,GACrBvK,KAAKu4C,SAAU,MAGQ,MAApBv4C,KAAK05C,cAER15C,KAAK05C,YAAc5nB,EACnB9xB,KAAK85C,gBAAkBvvC,EACvBvK,KAAK25C,WAAW7nB,EAAKvnB,KAIvBvK,KAAK2nB,UAAUpjB,YAAYutB,GAEpBA,GAUR+e,UAAUzkC,UAAUutC,WAAa,SAASI,EAASxvC,GAMhD,IAcGsG,EAlBD7Q,KAAKy5C,cAAgBM,IAEC,MAArB/5C,KAAKy5C,eAIG,OAFP5oC,EAAM7Q,KAAKy5C,aAAaD,UAI3Bx5C,KAAKy5C,aAAaD,QAAUx5C,KAAKy5C,aAAa9jC,aAAa,OAC3D3V,KAAKy5C,aAAap1C,aAAa,MAAOwM,IAItC7Q,KAAKy5C,aAAavJ,UAAYlwC,KAAKy5C,aAAab,kBAIlD54C,KAAKy5C,aAAeM,EAGT,OAFPlpC,EAAM7Q,KAAKy5C,aAAaD,UAI3Bx5C,KAAKy5C,aAAaD,QAAUx5C,KAAKy5C,aAAa9jC,aAAa,OAC3D3V,KAAKy5C,aAAap1C,aAAa,MAAOwM,IAItC7Q,KAAKy5C,aAAavJ,UAAYlwC,KAAKy5C,aAAab,iBAAiB,WAGlE54C,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ0+B,OAAQ,WAAYp+B,MAU/DsmC,UAAUzkC,UAAU4tC,UAAY,SAASC,IAEnCA,GAAWj6C,KAAKu4C,SAAYv4C,KAAKy5C,cAAgBz5C,KAAK05C,aAK1D15C,KAAK25C,WAAW35C,KAAK05C,YAAa15C,KAAK85C,kBAazCjJ,UAAUzkC,UAAU8tC,aAAe,SAAStoB,GAE3C,OAAO5xB,KAAKy4C,QAAQ,KAAM7mB,EAAM,OAQjCif,UAAUzkC,UAAU+tC,SAAW,WAE9B7xC,QAAQ2S,GAAGjb,KAAK2nB,YAQjBkpB,UAAUzkC,UAAUguC,QAAU,WAE7B,IAAIC,EAAKx5C,SAASG,cAAc,MAEhCq5C,EAAG3yC,MAAM4rC,YAAc,MACvB+G,EAAGh2C,aAAa,OAAQ,KAExBrE,KAAK2nB,UAAUpjB,YAAY81C,IAQ5BxJ,UAAUzkC,UAAU6iB,QAAU,WAE7BhlB,QAAQm7B,QAAQplC,KAAK2nB,WACrB3nB,KAAK2nB,UAAY,KACjB3nB,KAAK05C,YAAc,KACnB15C,KAAK85C,gBAAkB,KACvB95C,KAAKy5C,aAAe,KAEH,MAAbz5C,KAAK+4C,MAER/4C,KAAK+4C,KAAK9pB,WAIZhvB,WAAW4wC,eAAiC,IAAdA,UAA4BA,eAAYjqC,EA8DtEkqC,eAAe1kC,UAAU0X,OAAS,KASlCgtB,eAAe1kC,UAAU8E,QAAU,KAQnC4/B,eAAe1kC,UAAU2kC,YAAc,KAOvCD,eAAe1kC,UAAUkuC,QAAS,EAOlCxJ,eAAe1kC,UAAUmuC,QAAS,EAOlCzJ,eAAe1kC,UAAUsiC,QAAU,WAElC,OAA8B,GAAvB1uC,KAAKkR,QAAQ/O,QAQrB2uC,eAAe1kC,UAAUouC,cAAgB,WAExC,OAAOx6C,KAAK+wC,aASbD,eAAe1kC,UAAUrH,IAAM,SAASwM,GAEvCvR,KAAKkR,QAAQtE,KAAK2E,IASnBu/B,eAAe1kC,UAAUquC,OAAS,aAQlC3J,eAAe1kC,UAAUsuC,IAAM,aAO/B5J,eAAe1kC,UAAUuuC,KAAO,WAE/B,IAAK36C,KAAKs6C,OACV,CACCt6C,KAAK8jB,OAAO0f,UAAU,IAAIhC,cAAcv3B,QAAQigC,aAGhD,IAFA,IAESrlC,EAFG7E,KAAKkR,QAAQ/O,OAEJ,EAAG0C,GAAK,EAAGA,IAChC,CACC,IAAI0M,EAASvR,KAAKkR,QAAQrM,GAEJ,MAAlB0M,EAAOqK,QAEVrK,EAAOqK,UAEgB,MAAfrK,EAAOopC,MAEfppC,EAAOopC,OAIR36C,KAAK8jB,OAAO0f,UAAU,IAAIhC,cAAcv3B,QAAQ+/B,SAAU,SAAUz4B,IAGrEvR,KAAKs6C,QAAS,EACdt6C,KAAKu6C,QAAS,EACdv6C,KAAK8jB,OAAO0f,UAAU,IAAIhC,cAAcv3B,QAAQmgC,WAGjDpqC,KAAKy6C,UAQN3J,eAAe1kC,UAAUwuC,KAAO,WAE/B,IAAK56C,KAAKu6C,OACV,CACCv6C,KAAK8jB,OAAO0f,UAAU,IAAIhC,cAAcv3B,QAAQigC,aAGhD,IAFA,IAAIhvB,EAAQlb,KAAKkR,QAAQ/O,OAEhB0C,EAAI,EAAGA,EAAIqW,EAAOrW,IAC3B,CACC,IAAI0M,EAASvR,KAAKkR,QAAQrM,GAEJ,MAAlB0M,EAAOqK,QAEVrK,EAAOqK,UAEgB,MAAfrK,EAAOqpC,MAEfrpC,EAAOqpC,OAIR56C,KAAK8jB,OAAO0f,UAAU,IAAIhC,cAAcv3B,QAAQ+/B,SAAU,SAAUz4B,IAGrEvR,KAAKs6C,QAAS,EACdt6C,KAAKu6C,QAAS,EACdv6C,KAAK8jB,OAAO0f,UAAU,IAAIhC,cAAcv3B,QAAQmgC,WAGjDpqC,KAAKy6C,UAGNx6C,WAAW6wC,oBAA2C,IAAnBA,eAAiCA,oBAAiBlqC,EAmFrFoqC,cAAc5kC,UAAY,IAAIw1B,cAC9BoP,cAAc5kC,UAAUH,YAAc+kC,cAQtCA,cAAc5kC,UAAUyhB,KAAO,KAO/BmjB,cAAc5kC,UAAUyuC,QAAU,KAOlC7J,cAAc5kC,UAAU0uC,eAAiB,EAOzC9J,cAAc5kC,UAAUsiC,QAAU,WAEjC,OAA8B,GAAvB1uC,KAAK66C,QAAQ14C,QAQrB6uC,cAAc5kC,UAAUF,MAAQ,WAE/BlM,KAAK66C,QAAU,GACf76C,KAAK86C,eAAiB,EACtB96C,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQkhC,SAQ1C6F,cAAc5kC,UAAU2uC,QAAU,WAEjC,OAAO/6C,KAAK86C,eAAiB,GAQ9B9J,cAAc5kC,UAAUuuC,KAAO,WAE3B,KAAO36C,KAAK86C,eAAiB,GAC7B,CACI,IAAIE,EAAOh7C,KAAK66C,UAAU76C,KAAK86C,gBAGrC,GAFME,EAAKL,OAEPK,EAAKR,gBACH,CACCx6C,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQqgC,KAAM,OAAQ0Q,IACpD,SAUZhK,cAAc5kC,UAAU6uC,QAAU,WAEjC,OAAOj7C,KAAK86C,eAAiB96C,KAAK66C,QAAQ14C,QAQ3C6uC,cAAc5kC,UAAUwuC,KAAO,WAI3B,IAFA,IAAI53B,EAAIhjB,KAAK66C,QAAQ14C,OAEdnC,KAAK86C,eAAiB93B,GAC7B,CACI,IAAIg4B,EAAQh7C,KAAK66C,QAAQ76C,KAAK86C,kBAG9B,GAFAE,EAAKJ,OAEDI,EAAKR,gBACT,CACCx6C,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQsgC,KAAM,OAAQyQ,IACpD,SAUZhK,cAAc5kC,UAAU8uC,qBAAuB,SAASC,GAEvDn7C,KAAK+V,OAED/V,KAAK6tB,KAAO,GACf7tB,KAAK6tB,MAAQ7tB,KAAK66C,QAAQ14C,QAE1BnC,KAAK66C,QAAQO,QAGdp7C,KAAK66C,QAAQjuC,KAAKuuC,GAClBn7C,KAAK86C,eAAiB96C,KAAK66C,QAAQ14C,OACnCnC,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQghC,IAAK,OAAQkQ,KASvDnK,cAAc5kC,UAAU2J,KAAO,WAE9B,GAAI/V,KAAK66C,QAAQ14C,OAASnC,KAAK86C,eAK9B,IAHA,IAAIO,EAAQr7C,KAAK66C,QAAQzkC,OAAOpW,KAAK86C,eACpC96C,KAAK66C,QAAQ14C,OAASnC,KAAK86C,gBAEnBj2C,EAAI,EAAGA,EAAIw2C,EAAMl5C,OAAQ0C,IAEjCw2C,EAAMx2C,GAAG61C,OAKZz6C,WAAW+wC,mBAAyC,IAAlBA,cAAgCA,mBAAgBpqC,EAYlF,IAAI00C,eAAiB,aA2JrB,SAASC,iBAAiBtqC,GAEzBjR,KAAKw7C,OAAS,KACdx7C,KAAKy7C,QAAS,EACdz7C,KAAK07C,IAAM,EACX17C,KAAK27C,IAAM,EACX37C,KAAK47C,IAAM,EACX57C,KAAK67C,IAAM,EACX77C,KAAKuS,GAAK,EACVvS,KAAKyS,GAAK,EACVzS,KAAK87C,YAAa,EAClB97C,KAAKioB,WAAa,EAClBjoB,KAAKwL,UAAY,EAEjBxL,KAAK+7C,cACL,CACItL,UAAW,SAAS3mC,EAAQ8mC,KAC5B4F,UAAW,SAAS1sC,EAAQ8mC,KAC5B8F,QAASpuC,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ8mC,GAExC5wC,KAAKy7C,QAERz7C,KAAKg8C,WAKX/qC,EAAMgrC,iBAAiBj8C,KAAK+7C,eAE5B/7C,KAAKk8C,gBAAkB5zC,QAAQ2M,KAAKjV,MAAM,WAEjCA,KAAKy7C,QAERz7C,KAAKg8C,UAKX/xC,QAAQD,YAAYnJ,SAAU,UAAWb,KAAKk8C,iBAE9C,IAAIC,EAAe7zC,QAAQ2M,KAAKjV,MAAM,WAMjC,OAJAA,KAAK87C,WAAaxzC,QAAQyM,cAAc9D,EAAM0W,WAC9C3nB,KAAKioB,WAAahX,EAAM0W,UAAUM,WAClCjoB,KAAKwL,UAAYyF,EAAM0W,UAAUnc,UAE1BhK,OAAO46C,YAAY9zC,QAAQ2M,KAAKjV,MAAM,WAKhD,GAHAA,KAAK07C,KAAO17C,KAAKuS,GACjBvS,KAAK27C,KAAO37C,KAAKyS,GAEbzS,KAAK87C,WACT,CACC,IAAIr/B,GAAQxL,EAAM0W,UAAUM,WAAa7e,KAAKgZ,KAAKpiB,KAAKuS,IACpD0K,GAAOhM,EAAM0W,UAAUnc,UAAYpC,KAAKgZ,KAAKpiB,KAAKyS,IACtDxB,EAAMorC,SAAS5/B,EAAMQ,GACrBhM,EAAMumC,MAAQx3C,KAAKioB,WAAahX,EAAM0W,UAAUM,WAChDhX,EAAMwmC,MAAQz3C,KAAKwL,UAAYyF,EAAM0W,UAAUnc,UAC/CyF,EAAMuyB,UAAU,IAAIhC,cAAcv3B,QAAQi+B,WAK1Cj3B,EAAMorC,SAASr8C,KAAKs8C,QAASt8C,KAAKu8C,YAEhCv8C,KAAKgT,UAGVhT,KAAKg2C,SAAW,WAEf,OAAOyF,QAGRz7C,KAAKs8C,MAAQ,WAEZ,OAAOlzC,KAAK2c,MAAM/lB,KAAK07C,MAGxB17C,KAAKu8C,MAAQ,WAEZ,OAAOnzC,KAAK2c,MAAM/lB,KAAK27C,MAGxB37C,KAAKqnB,MAAQ,WAEZrnB,KAAK47C,IAAM3qC,EAAMsW,KAAKoH,UAAUvf,EAChCpP,KAAK67C,IAAM5qC,EAAMsW,KAAKoH,UAAUtf,EAChCrP,KAAKy7C,QAAS,GAGfz7C,KAAKw8C,MAAQ,SAASptC,EAAGC,EAAGvG,EAAGD,GAEzB7I,KAAKy7C,QAETz7C,KAAKqnB,QAGHrnB,KAAKioB,WAAahX,EAAM0W,UAAUM,WAClCjoB,KAAKwL,UAAYyF,EAAM0W,UAAUnc,UAEpC1C,EAAU,MAALA,EAAaA,EAAI,EACtBD,EAAU,MAALA,EAAaA,EAAI,EAEtB,IAAIoG,EAAIgC,EAAM0W,UACd3nB,KAAKuS,GAAKnD,EAAItG,EAAImG,EAAEgZ,WAAahZ,EAAE/F,YAE/BlJ,KAAKuS,GAAK,GAAKnJ,KAAKsX,IAAI1gB,KAAKuS,IAAMvS,KAAKqvB,OAE3CrvB,KAAKuS,GAAKvS,KAAKqvB,OAASrvB,KAAKuS,GAErBvS,KAAKy8C,eAEbz8C,KAAKuS,GAAKnJ,KAAKC,IAAIrJ,KAAKuS,GAAI,GAI5BvS,KAAKuS,GAAK,EAGI,GAAXvS,KAAKuS,KAERvS,KAAKuS,GAAKnD,EAAIH,EAAEgZ,WAEZjoB,KAAKuS,GAAK,GAAKvS,KAAKuS,GAAKvS,KAAKqvB,OAEjCrvB,KAAKuS,GAAKvS,KAAKuS,GAAKvS,KAAKqvB,OAEjBrvB,KAAKy8C,eAEbz8C,KAAKuS,GAAKnJ,KAAK2G,IAAI,EAAG/P,KAAKuS,IAI3BvS,KAAKuS,GAAK,GAIZvS,KAAKyS,GAAKpD,EAAIxG,EAAIoG,EAAEzD,UAAYyD,EAAEhG,aAE9BjJ,KAAKyS,GAAK,GAAKrJ,KAAKsX,IAAI1gB,KAAKyS,IAAMzS,KAAKqvB,OAE3CrvB,KAAKyS,GAAKzS,KAAKqvB,OAASrvB,KAAKyS,GAErBzS,KAAKy8C,eAEbz8C,KAAKyS,GAAKrJ,KAAKC,IAAIrJ,KAAKyS,GAAI,GAI5BzS,KAAKyS,GAAK,EAGI,GAAXzS,KAAKyS,KAERzS,KAAKyS,GAAKpD,EAAIJ,EAAEzD,UAEZxL,KAAKyS,GAAK,GAAKzS,KAAKyS,GAAKzS,KAAKqvB,OAEjCrvB,KAAKyS,GAAKzS,KAAKyS,GAAKzS,KAAKqvB,OAEjBrvB,KAAKy8C,eAEbz8C,KAAKyS,GAAKrJ,KAAK2G,IAAI,EAAG/P,KAAKyS,IAI3BzS,KAAKyS,GAAK,GAIG,GAAXzS,KAAKuS,IAAsB,GAAXvS,KAAKyS,IAExBzS,KAAKuS,IAAMvS,KAAK08C,OAChB18C,KAAKyS,IAAMzS,KAAK08C,OAEG,MAAf18C,KAAKw7C,SAERx7C,KAAKw7C,OAASW,MAGQ,MAAfn8C,KAAKw7C,SAEbh6C,OAAOm7C,cAAc38C,KAAKw7C,QAC1Bx7C,KAAKw7C,OAAS,OAIhBx7C,KAAKg8C,KAAO,WAEX,GAAIh8C,KAAKy7C,OAaR,GAXAz7C,KAAKy7C,QAAS,EAEK,MAAfz7C,KAAKw7C,SAERh6C,OAAOm7C,cAAc38C,KAAKw7C,QAC1Bx7C,KAAKw7C,OAAS,MAGfx7C,KAAK07C,IAAM,EACX17C,KAAK27C,IAAM,EAEN37C,KAAK87C,WAaT7qC,EAAMumC,MAAQ,EACdvmC,EAAMwmC,MAAQ,EACdxmC,EAAMuyB,UAAU,IAAIhC,cAAcv3B,QAAQi+B,UAd3C,CACC,IAAI3e,EAAKtY,EAAMumC,MACXhuB,EAAKvY,EAAMwmC,MAEF,GAANluB,GAAiB,GAANC,IAEdvY,EAAMorC,SAAS,EAAG,GAClBprC,EAAMsW,KAAKq1B,aAAa58C,KAAK47C,IAAMryB,EAAKtY,EAAMsW,KAAKjV,MAAOtS,KAAK67C,IAAMryB,EAAKvY,EAAMsW,KAAKjV,UAY5FtS,KAAKivB,QAAU,WAEdhe,EAAM4rC,oBAAoB78C,KAAK+7C,eAC/B9xC,QAAQs5B,eAAe1iC,SAAU,UAAWb,KAAKk8C,kBAgEnD,SAASlD,YAAYL,GAEpB34C,KAAK24C,cAAgBA,EAEA,MAAjBA,GAEH34C,KAAKmH,OAimBP,SAAS21C,kBAAkB7rC,GAG1BjR,KAAK+8C,cAAgBz0C,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAEpDnI,KAAK2T,aAER3T,KAAKg9C,kBAAkB70C,EAAI+5B,YAAY,QAAQhxB,YAIjDlR,KAAKi9C,SAAShsC,GAkMf,SAASisC,YAAYlqC,GAEpBhT,KAAKgT,MAAkB,MAATA,EAAiBA,EAAQ,GAoHxC,SAASmqC,WAAWlsC,EAAOmsC,EAAOC,EAAMrqC,GAEvCkqC,YAAY3tC,KAAKvP,KAAMgT,GACvBhT,KAAKiR,MAAQA,EACbjR,KAAKo9C,MAAkB,MAATA,EAAiBA,EAAQ,EACvCp9C,KAAKq9C,KAAgB,MAARA,EAAgBA,EAAO,IA+PrC,SAASC,cAAcC,GAEtBv9C,KAAKw9C,OAAS,GACdx9C,KAAKu9C,IAAc,MAAPA,GAAeA,EAwF5B,SAASE,iBA8JT,SAASC,qBAOR19C,KAAK29C,UAAY39C,KAAK49C,qBAEtB59C,KAAKk2C,QA4oBN,SAAS2H,cAAcC,GAEtBJ,mBAAmBnuC,KAAKvP,MAOxBA,KAAK89C,KAAOA,EAGZ99C,KAAK+9C,gBAktCN,SAASC,cAAcF,EAAMG,GAE5BP,mBAAmBnuC,KAAKvP,MAOxBA,KAAK89C,KAAOA,EAOZ99C,KAAKk+C,UAAY,GAOjBl+C,KAAKm+C,KAAO,KAOZn+C,KAAKi+C,aAAgC,MAAhBA,GAAwBA,EAE7C,IAAIjtB,EAAM,KAGV,GAAI8sB,EAAK9iC,eAAiBna,SAC1B,CAIC,IAHA,IAAIqE,EAAO44C,EAGI,MAAR54C,GAAiC,OAAjBA,EAAKoR,UAE3BpR,EAAOA,EAAK2O,WAGbmd,EAAM9rB,EAGI,MAAP8rB,IAGOA,EAAI1sB,qBAAqB,QAE3BnC,OAAS,IAEhBnC,KAAKm+C,KAAOntB,EAAI1sB,qBAAqB,QAAQ,IAI7B,MAAbtE,KAAKm+C,OAERn+C,KAAKm+C,KAAOn+C,KAAKgB,cAAc,QAET,MAAlBgwB,EAAIpb,WAEPob,EAAIwiB,aAAaxzC,KAAKm+C,KAAMntB,EAAIpb,YAIhCob,EAAIzsB,YAAYvE,KAAKm+C,OAKnBn+C,KAAKi+C,cAERj+C,KAAKm+C,KAAK55C,YAAYvE,KAAKo+C,gBAxxH9B9C,eAAelvC,UAAU4oC,SAAU,EAOnCsG,eAAelvC,UAAUiyC,QAAU,KAOnC/C,eAAelvC,UAAUkyC,WAAa,KAOtChD,eAAelvC,UAAUmyC,cAAgB,WAExCv+C,KAAKs+C,WAAa16C,SAAS46C,SAAW,KAAO56C,SAAS66C,KACtDz+C,KAAKq+C,QAAUr+C,KAAKs+C,WAAa16C,SAAS86C,SAC1C,IAAI7tC,EAAM7Q,KAAKq+C,QAAQM,YAAY,KAG/B9tC,EAAM,IAET7Q,KAAKq+C,QAAUr+C,KAAKq+C,QAAQ54C,UAAU,EAAGoL,EAAM,KASjDyqC,eAAelvC,UAAUuH,UAAY,WAEpC,OAAO3T,KAAKg1C,SAQbsG,eAAelvC,UAAUupC,WAAa,SAAS5tC,GAE9C/H,KAAKg1C,QAAUjtC,GAQhBuzC,eAAelvC,UAAUwyC,WAAa,WAErC,OAAO5+C,KAAKq+C,SAQb/C,eAAelvC,UAAUyyC,WAAa,SAAS92C,GAE9C/H,KAAKq+C,QAAUt2C,GAQhBuzC,eAAelvC,UAAU0yC,cAAgB,WAExC,OAAO9+C,KAAKs+C,YAQbhD,eAAelvC,UAAU2yC,cAAgB,SAASh3C,GAEjD/H,KAAKs+C,WAAav2C,GAQnBuzC,eAAelvC,UAAU4yC,cAAgB,SAAS5hC,GAEjD,OAAc,MAAPA,GAAsC,MAAvBA,EAAI3X,UAAU,EAAG,IAAqC,WAAvB2X,EAAI3X,UAAU,EAAG,IAC9C,YAAvB2X,EAAI3X,UAAU,EAAG,IAA4C,cAAxB2X,EAAI3X,UAAU,EAAG,KAC/B,WAAvB2X,EAAI3X,UAAU,EAAG,IASnB61C,eAAelvC,UAAU6yC,QAAU,SAAS7hC,GAmB3C,OAjBIpd,KAAK2T,aAAe3T,KAAKg/C,cAAc5hC,KAEjB,MAArBpd,KAAK4+C,cAER5+C,KAAKu+C,gBAKLnhC,EAFoB,KAAjBA,EAAI5O,OAAO,GAERxO,KAAK8+C,gBAAkB1hC,EAIvBpd,KAAK4+C,aAAexhC,GAIrBA,GAGRnd,WAAWq7C,oBAA2C,IAAnBA,eAAiCA,oBAAiB10C,EAqPrF20C,iBAAiBnvC,UAAUswC,OAAS,EAAE,EAOtCnB,iBAAiBnvC,UAAU4G,MAAQ,GAOnCuoC,iBAAiBnvC,UAAUqwC,gBAAiB,EAO5ClB,iBAAiBnvC,UAAUijB,OAAS,EAEpCpvB,WAAWs7C,sBAA+C,IAArBA,iBAAmCA,sBAAmB30C,EA6C3FoyC,YAAY5sC,UAAY,IAAIw1B,cAC5BoX,YAAY5sC,UAAUH,YAAc+sC,YAOpCA,YAAY5sC,UAAU8yC,aAAeh/C,SAAS0F,cAAgB,eAO9DozC,YAAY5sC,UAAU2lC,OAAS,MAS/BiH,YAAY5sC,UAAUusC,cAAgB,KAQtCK,YAAY5sC,UAAU+yC,uBAAwB,EAO9CnG,YAAY5sC,UAAU4oC,SAAU,EAOhCgE,YAAY5sC,UAAUgzC,UAAY,EAOlCpG,YAAY5sC,UAAUizC,YAAa,EAQnCrG,YAAY5sC,UAAUkzC,iBAAkB,EAOxCtG,YAAY5sC,UAAUmzC,QAAS,EAO/BvG,YAAY5sC,UAAUjF,KAAO,WAG5BnH,KAAKsH,MAAQzG,SAASG,cAAc,SACpChB,KAAKsH,MAAM4oC,UAAY,cAEvBlwC,KAAKuH,MAAQ1G,SAASG,cAAc,SACpChB,KAAKsH,MAAM/C,YAAYvE,KAAKuH,OAG5BvH,KAAKitB,IAAMpsB,SAASG,cAAc,OAClChB,KAAKitB,IAAIijB,UAAY,cACrBlwC,KAAKitB,IAAIvlB,MAAMgmB,QAAU,SACzB1tB,KAAKitB,IAAIvlB,MAAMqqC,OAAS/xC,KAAK+xC,OAC7B/xC,KAAKitB,IAAI1oB,YAAYvE,KAAKsH,OAG1B2C,QAAQ07B,mBAAmB3lC,KAAKitB,MASjC+rB,YAAY5sC,UAAUuH,UAAY,WAEjC,OAAO3T,KAAKg1C,SASbgE,YAAY5sC,UAAUupC,WAAa,SAASX,GAE3Ch1C,KAAKg1C,QAAUA,GAahBgE,YAAY5sC,UAAU62B,eAAiB,SAAS2N,GAE/C,OAAOA,EAAG3N,kBAAqBjjC,KAAKm/C,uBAAyBl1C,QAAQo8B,kBAAkBuK,EAAGrO,aAuB3FyW,YAAY5sC,UAAUqsC,QAAU,SAASpxC,EAAOgsC,EAAO9oC,EAAOoM,EAAQ6oC,EAASxK,EAASyG,GAEvF9kC,EAASA,GAAU3W,KACnBA,KAAKo/C,YAGDzoC,EAAO8oC,mBAEN9oC,EAAO+oC,eAEV1/C,KAAKk6C,aAAavjC,GAAQ,GAG3BA,EAAO8oC,kBAAmB,GAG3B9oC,EAAO+oC,eAAgB,EACvB,IAAIl4C,EAAK3G,SAASG,cAAc,MAChCwG,EAAG0oC,UAAY,kBACf,IAAIyP,EAAO9+C,SAASG,cAAc,MAIlC,GAHA2+C,EAAKzP,UAAY,kBAGJ,MAATmD,EACJ,CACC,IAAIvhB,EAAMjxB,SAASG,cAAc,OACjC8wB,EAAI7sB,IAAMouC,EACVsM,EAAKp7C,YAAYutB,QAEb,GAAe,MAAX0tB,EACT,CACC,IAAIvyB,EAAMpsB,SAASG,cAAc,OACjCisB,EAAIijB,UAAYsP,EAChBG,EAAKp7C,YAAY0oB,GAKlB,GAFAzlB,EAAGjD,YAAYo7C,GAEX3/C,KAAKu/C,OACT,CACC,IAAIK,EAAO/+C,SAASG,cAAc,MAClC4+C,EAAK1P,UAAY,mBACH,MAAX8E,GAAoBA,EAA2B,GAAhB,eAElC1sC,QAAQlE,MAAMw7C,EAAMv4C,GACpBu4C,EAAKxzB,MAAQ,OACb5kB,EAAGjD,YAAYq7C,GAEf,IAAIC,EAAOh/C,SAASG,cAAc,MAClC6+C,EAAK3P,UAAY,mBACH,MAAX8E,GAAoBA,EAA2B,GAAhB,eAClC6K,EAAKn4C,MAAMo4C,aAAe,MAC1BD,EAAKn4C,MAAMq4C,UAAY,QAEvBv4C,EAAGjD,YAAYs7C,GAEG,MAAdlpC,EAAOsW,KAEVjtB,KAAKggD,cAAcrpC,GAMrB,GAFAA,EAAOpP,MAAMhD,YAAYiD,GAEX,GAAVi0C,GAA8B,GAAXzG,EACvB,CACC,IAAIiL,EAAmB,KAEvBh2C,QAAQq6B,oBAAoB98B,EAC3Bc,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE3BnI,KAAKkgD,cAAgB14C,EAEjBmP,EAAOwpC,WAAa34C,GAAMmP,EAAOwpC,WAAaxpC,IAEzB,MAApBA,EAAOwpC,WAAwD,MAAnCxpC,EAAOwpC,UAAUlzB,IAAIpZ,YAEpD7T,KAAKogD,YAAYzpC,GAGJ,MAAVnP,EAAGylB,MAENjtB,KAAKqgD,YAAY1pC,EAAQnP,GACzBmP,EAAOwpC,UAAY34C,IAKK,MAAtB3G,SAASqX,YAAsBhY,SAASU,WAAsC,GAAzBC,SAASC,eAEjEm/C,EAAmBp/C,SAASqX,UAAUooC,eAGvCr2C,QAAQm4B,QAAQj6B,MAEjBG,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEvBwO,EAAOwpC,WAAa34C,GAAMmP,EAAOwpC,WAAaxpC,IAEzB,MAApBA,EAAOwpC,WAAwD,MAAnCxpC,EAAOwpC,UAAUlzB,IAAIpZ,YAEpD7T,KAAKogD,YAAYzpC,GAGd3W,KAAKq/C,YAAwB,MAAV73C,EAAGylB,MAEzBjtB,KAAKqgD,YAAY1pC,EAAQnP,GACzBmP,EAAOwpC,UAAY34C,IAKrBA,EAAG0oC,UAAY,0BAEhB5nC,QAAQ2M,KAAKjV,MAAM,SAASmI,GAI3B,GAAInI,KAAKkgD,eAAiB14C,EAC1B,CAOC,GANImP,EAAOwpC,WAAa34C,GAEvBxH,KAAKm5C,WAIkB,MAApB8G,EACJ,CAEC,IAECA,EAAiB1L,SAElB,MAAOnmC,IAKP6xC,EAAmB,KAGP,MAAT11C,GAEHA,EAAMpC,GAIRnI,KAAKkgD,cAAgB,KACrBj2C,QAAQm4B,QAAQj6B,OAKlB8B,QAAQD,YAAYxC,EAAI,WACvBc,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE3BX,EAAG0oC,UAAY,sBAKlB,OAAO1oC,GAMRwxC,YAAY5sC,UAAUm0C,aAAe,SAASC,EAAM1uB,GAEnD,IAAIrqB,EAAK+4C,EAAK5qC,WAAWC,YACzBpO,EAAGC,MAAM+4C,gBAAkB,QAAW3uB,EAAM,KAC5CrqB,EAAGC,MAAMg5C,iBAAmB,YAC5Bj5C,EAAGC,MAAMi5C,mBAAqB,WAc/B3H,YAAY5sC,UAAU4zC,cAAgB,SAASrpC,GAE9CA,EAAOrP,MAAQzG,SAASG,cAAc,SACtC2V,EAAOrP,MAAM4oC,UAAY,cAEzBv5B,EAAOpP,MAAQ1G,SAASG,cAAc,SACtC2V,EAAOrP,MAAM/C,YAAYoS,EAAOpP,OAEhCoP,EAAOsW,IAAMpsB,SAASG,cAAc,OACpC2V,EAAOsW,IAAIijB,UAAY,cAEvBv5B,EAAOsW,IAAIvlB,MAAMogB,SAAW,WAC5BnR,EAAOsW,IAAIvlB,MAAMgmB,QAAU,SAC3B/W,EAAOsW,IAAIvlB,MAAMqqC,OAAS/xC,KAAK+xC,OAE/Bp7B,EAAOsW,IAAI1oB,YAAYoS,EAAOrP,OAE9B,IAAIwqB,EAAMjxB,SAASG,cAAc,OACjC8wB,EAAIztB,aAAa,MAAOrE,KAAKk/C,cAG7Bz3C,GAAKkP,EAAOf,WAAWC,YAAYA,YACnCpO,GAAGlD,YAAYutB,IAQhBknB,YAAY5sC,UAAUi0C,YAAc,SAAS1pC,EAAQiqC,GAEpD,GAAe,MAAXA,EAAI3zB,IACR,CACC2zB,EAAI3zB,IAAIvlB,MAAM+U,KAAQ9F,EAAOsW,IAAIvQ,WAChCkkC,EAAIlkC,WAAWkkC,EAAIjkC,YAAc,EAAK,KACvCikC,EAAI3zB,IAAIvlB,MAAMuV,IAAOtG,EAAOsW,IAAI/P,UAAU0jC,EAAI1jC,UAAa,KAC3Drc,SAASuG,KAAK7C,YAAYq8C,EAAI3zB,KAG9B,IAAIxQ,EAAOra,SAASw+C,EAAI3zB,IAAIvQ,YACxBzU,EAAQ7F,SAASw+C,EAAI3zB,IAAItQ,aACzBC,EAAStU,QAAQuU,wBAAwBhc,UAEzCwb,EAAIxb,SAASuG,KACbkV,EAAIzb,SAAS2C,gBAIbiZ,EAAOxU,EAFC2U,EAAOxN,GAAKiN,EAAEnT,aAAeoT,EAAEpT,eAI1C03C,EAAI3zB,IAAIvlB,MAAM+U,KAAOrT,KAAKC,IAAI,EAAIsN,EAAOsW,IAAIvQ,WAAazU,GAAU/H,SAAc,MAAI,GAAK,IAAO,MAGnGoI,QAAQiU,IAAIqkC,EAAI3zB,OAelB+rB,YAAY5sC,UAAU8tC,aAAe,SAASvjC,EAAQkqC,GAIrD,GAFAlqC,EAASA,GAAU3W,KAEfA,KAAKs/C,kBAAoBuB,EAE5BlqC,EAAO8oC,kBAAmB,OAEtB,GAAoB,MAAhB9oC,EAAOpP,MAChB,CACCoP,EAAO8oC,kBAAmB,EAC1B,IAAIj4C,EAAK3G,SAASG,cAAc,MAE5B2+C,EAAO9+C,SAASG,cAAc,MAClC2+C,EAAKzP,UAAY,kBACjByP,EAAKj4C,MAAMmqB,QAAU,YAErBrqB,EAAGjD,YAAYo7C,GAEf,IAAIC,EAAO/+C,SAASG,cAAc,MAClC4+C,EAAKl4C,MAAMmqB,QAAU,YACrB+tB,EAAKv7C,aAAa,UAAW,KAE7B,IAAIg2C,EAAKx5C,SAASG,cAAc,MAChCq5C,EAAGh2C,aAAa,OAAQ,KACxBu7C,EAAKr7C,YAAY81C,GAEjB7yC,EAAGjD,YAAYq7C,GAEfjpC,EAAOpP,MAAMhD,YAAYiD,KAkB3BwxC,YAAY5sC,UAAUxD,MAAQ,SAASwG,EAAGC,EAAG2C,EAAM7J,GAElD,GAAgB,MAAZnI,KAAKitB,KAA6B,MAAdjtB,KAAKuH,OAAuC,MAAtBvH,KAAK24C,cACnD,CAKC,IAJA34C,KAAKitB,IAAIvlB,MAAM+U,KAAOrN,EAAI,KAC1BpP,KAAKitB,IAAIvlB,MAAMuV,IAAM5N,EAAI,KAGO,MAAzBrP,KAAKuH,MAAMqO,YAEjB3L,QAAQm7B,QAAQplC,KAAKuH,MAAMqO,YAC3B5V,KAAKuH,MAAMuM,YAAY9T,KAAKuH,MAAMqO,YAGnC5V,KAAKo/C,UAAY,EACjBp/C,KAAK24C,cAAc34C,KAAMgS,EAAM7J,GAE3BnI,KAAKo/C,UAAY,IAEpBp/C,KAAK8gD,WACL9gD,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQq+B,UAU5C0Q,YAAY5sC,UAAU8sC,cAAgB,WAErC,OAAmB,MAAZl5C,KAAKitB,KAAejtB,KAAKitB,IAAIpZ,YAAchT,SAASuG,MAQ5D4xC,YAAY5sC,UAAU00C,SAAW,WAG5BjgD,SAASC,cAAgB,IAE5Bd,KAAKitB,IAAIvlB,MAAM6T,OAAS,QAIzB1a,SAASuG,KAAK7C,YAAYvE,KAAKitB,KAC/B3kB,QAAQiU,IAAIvc,KAAKitB,MAQlB+rB,YAAY5sC,UAAU+sC,SAAW,WAEhB,MAAZn5C,KAAKitB,MAEmB,MAAvBjtB,KAAKitB,IAAIpZ,YAEZ7T,KAAKitB,IAAIpZ,WAAWC,YAAY9T,KAAKitB,KAGtCjtB,KAAKogD,YAAYpgD,MACjBA,KAAK0/C,eAAgB,EACrB1/C,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQo+B,SAa3C2Q,YAAY5sC,UAAUg0C,YAAc,SAASzpC,GAEpB,MAApBA,EAAOwpC,YAEVngD,KAAKogD,YAAYzpC,EAAOwpC,WAEe,MAAnCxpC,EAAOwpC,UAAUlzB,IAAIpZ,YAExB8C,EAAOwpC,UAAUlzB,IAAIpZ,WAAWC,YAAY6C,EAAOwpC,UAAUlzB,KAG9DtW,EAAOwpC,UAAY,OASrBnH,YAAY5sC,UAAU6iB,QAAU,WAEf,MAAZjvB,KAAKitB,MAERhjB,QAAQm7B,QAAQplC,KAAKitB,KAEM,MAAvBjtB,KAAKitB,IAAIpZ,YAEZ7T,KAAKitB,IAAIpZ,WAAWC,YAAY9T,KAAKitB,KAGtCjtB,KAAKitB,IAAM,OAIbhtB,WAAW+4C,iBAAqC,IAAhBA,YAA8BA,iBAAcpyC,EAgD5Ek2C,kBAAkB1wC,UAAY,IAAIw1B,cAClCkb,kBAAkB1wC,UAAUH,YAAc6wC,kBAO1CA,kBAAkB1wC,UAAU6E,MAAQ,KASpC6rC,kBAAkB1wC,UAAU20C,cAAgB,GAW5CjE,kBAAkB1wC,UAAU40C,iBAAmB,EAS/ClE,kBAAkB1wC,UAAU60C,kBAAoB,EAOhDnE,kBAAkB1wC,UAAU80C,eAAiB,EAO7CpE,kBAAkB1wC,UAAU+0C,aAAe,EAO3CrE,kBAAkB1wC,UAAU4oC,SAAU,EAOtC8H,kBAAkB1wC,UAAU2wC,cAAgB,KAQ5CD,kBAAkB1wC,UAAUuH,UAAY,WAEvC,OAAO3T,KAAKg1C,SAab8H,kBAAkB1wC,UAAUupC,WAAa,SAAS5tC,GAEjD/H,KAAKg1C,QAAUjtC,GAQhB+0C,kBAAkB1wC,UAAU6wC,SAAW,SAAShsC,GAE7B,MAAdjR,KAAKiR,OAERjR,KAAKiR,MAAM8c,WAAWwV,eAAevjC,KAAK+8C,eAG3C/8C,KAAKiR,MAAQA,EAEK,MAAdjR,KAAKiR,OAERjR,KAAKiR,MAAM8c,WAAW/jB,YAAYC,QAAQugC,OAAQxqC,KAAK+8C,gBASzDD,kBAAkB1wC,UAAUg1C,KAAO,aAUnCtE,kBAAkB1wC,UAAU4wC,kBAAoB,SAAS9rC,GAExD,IACI/F,IADM,IAAIJ,MAAOC,UACLhL,KAAKmhD,cAAgB,IAEjCh2C,EAAKnL,KAAK+gD,eACZ/gD,KAAKkhD,gBAAkBlhD,KAAKihD,mBAC5B91C,EAAKnL,KAAKghD,kBAEXhhD,KAAKohD,OACLphD,KAAKk2C,SAKLl2C,KAAKkhD,kBASPpE,kBAAkB1wC,UAAU8pC,MAAQ,WAEnCl2C,KAAKmhD,cAAe,IAAIp2C,MAAOC,UAC/BhL,KAAKkhD,eAAiB,GAQvBpE,kBAAkB1wC,UAAU6iB,QAAU,WAErCjvB,KAAKi9C,SAAS,OAGfh9C,WAAW68C,uBAAiD,IAAtBA,kBAAoCA,uBAAoBl2C,EA4B9Fs2C,YAAY9wC,UAAY,IAAIw1B,cAC5Bsb,YAAY9wC,UAAUH,YAAcixC,YAOpCA,YAAY9wC,UAAU4G,MAAQ,KAO9BkqC,YAAY9wC,UAAUovC,OAAS,KAO/B0B,YAAY9wC,UAAUi1C,UAAY,WAEjC,OAAsB,MAAfrhD,KAAKw7C,QAQb0B,YAAY9wC,UAAUk1C,eAAiB,WAEnB,MAAfthD,KAAKw7C,SAERx7C,KAAKw7C,OAASh6C,OAAO46C,YAAY9zC,QAAQ2M,KAAKjV,KAAMA,KAAKuhD,iBAAkBvhD,KAAKgT,SAWlFkqC,YAAY9wC,UAAUm1C,gBAAkB,WAEvCvhD,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ8/B,WAQ1CmT,YAAY9wC,UAAUo1C,cAAgB,WAElB,MAAfxhD,KAAKw7C,SAERh6C,OAAOm7C,cAAc38C,KAAKw7C,QAC1Bx7C,KAAKw7C,OAAS,KACdx7C,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ6/B,SAI3C7pC,WAAWi9C,iBAAqC,IAAhBA,YAA8BA,iBAAct2C,EAsD5Eu2C,WAAW/wC,UAAY,IAAI8wC,YAC3BC,WAAW/wC,UAAUH,YAAckxC,WAOnCA,WAAW/wC,UAAU6E,MAAQ,KAO7BksC,WAAW/wC,UAAUgxC,MAAQ,KAO7BD,WAAW/wC,UAAUgF,KAAO,EAQ5B+rC,WAAW/wC,UAAUixC,KAAO,KAS5BF,WAAW/wC,UAAU+d,MAAQ,KAO7BgzB,WAAW/wC,UAAUm1C,gBAAkB,WAEtCrE,YAAY9wC,UAAUm1C,gBAAgBn2C,MAAMpL,KAAMqL,WAClD,IAAIw5B,EAAO,IAAI4c,mBAAmBzhD,KAAKiR,OAEvC,GAAkB,MAAdjR,KAAKmqB,MAGR,IAAK,IAAItlB,EAAI,EAAGA,EAAI7E,KAAKmqB,MAAMhoB,OAAQ0C,IAEtC7E,KAAK0hD,YAAY1hD,KAAKmqB,MAAMtlB,GAAIggC,GAAM,QAOvC7kC,KAAK0hD,YAAY1hD,KAAKiR,MAAM8c,WAAWC,UAAW6W,GAAM,GAGzD7kC,KAAK0K,KAAKm6B,IAENA,EAAK6J,WAAa1uC,KAAKoR,QAAUpR,KAAKo9C,QAEzCp9C,KAAKwhD,iBASPrE,WAAW/wC,UAAU1B,KAAO,SAASm6B,GAEpCA,EAAKn6B,QAQNyyC,WAAW/wC,UAAUs1C,YAAc,SAAS1vC,EAAM6yB,EAAM8c,GAEvD,IAAI9vC,EAAQ7R,KAAKiR,MAAMa,UAAUC,SAASC,GACtCm9B,EAAQ,KAEZ,GAAa,MAATt9B,IAIHs9B,EAAQnvC,KAAK4hD,SAAS/vC,GAElB7R,KAAKiR,MAAM8c,WAAW8zB,SAAS7vC,KAAqB,GAAXm9B,EAAM//B,GAAqB,GAAX+/B,EAAM9/B,IACnE,CACC,IAAIsf,EAAY3uB,KAAKiR,MAAMsW,KAAKqH,eAC5Btc,EAAQtS,KAAKiR,MAAMsW,KAAKqI,WAE5Buf,EAAM//B,GAAKuf,EAAUvf,EAAIkD,EACzB68B,EAAM9/B,GAAKsf,EAAUtf,EAAIiD,EAEzBuyB,EAAKid,UAAUjwC,GAAQs9B,EAAM//B,EAAIpP,KAAKq9C,MAAOlO,EAAM9/B,EAAIrP,KAAKq9C,MAI9D,GAAIsE,IAAY3hD,KAAK+hD,cAAclwC,EAAOs9B,GAIzC,IAFA,IAAIj8B,EAAalT,KAAKiR,MAAM8c,WAAW5a,cAAcnB,GAE5CnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/B7E,KAAK0hD,YAAY1hD,KAAKiR,MAAM8c,WAAW3a,WAAWpB,EAAMnN,GAAIggC,EAAM8c,IAWrExE,WAAW/wC,UAAU21C,cAAgB,SAASlwC,EAAOs9B,GAEpD,OAAgB,MAATA,IAA6B,GAAXA,EAAM//B,GAAqB,GAAX+/B,EAAM9/B,IAShD8tC,WAAW/wC,UAAUw1C,SAAW,SAAS/vC,GAExC,IAAI6W,EAAS1oB,KAAKgiD,iBAAiBnwC,EAAMG,MACrC2c,EAAY3uB,KAAKiR,MAAMa,UAAU8c,eACjCtc,EAAQtS,KAAKiR,MAAMa,UAAU8d,WAC7BxgB,EAAIyC,EAAMzC,EAAIkD,EAAQqc,EAAUvf,EAChCC,EAAIwC,EAAMxC,EAAIiD,EAAQqc,EAAUtf,EAEpC,OAAO,IAAIF,SAASuZ,EAAOtZ,EAAIA,GAAKkD,GAAQoW,EAAOrZ,EAAIA,GAAKiD,IAU7D6qC,WAAW/wC,UAAU41C,iBAAmB,SAAShwC,GAEhD,IAAIrF,EAAS,KAEb,GAAY,MAARqF,EACJ,CACC,IAAI2E,EAAS3W,KAAKiR,MAAM8c,WAAWk0B,UAAUjwC,GACzCkwC,EAAMliD,KAAKiR,MAAMkxC,gBAAgBnwC,GAIrC,GAHArF,EAAS3M,KAAKgiD,iBAAiBrrC,GAGpB,MAAPurC,EAEH,GAAIA,EAAIE,SACR,CACC,IAAIC,EAAOriD,KAAKiR,MAAMkxC,gBAAgBxrC,GAE1B,MAAR0rC,IAEH11C,EAAOyC,GAAK8yC,EAAI9yC,EAAIizC,EAAKp6C,MACzB0E,EAAO0C,GAAK6yC,EAAI7yC,EAAIgzC,EAAKx6C,aAK1B8E,EAAOyC,GAAK8yC,EAAI9yC,EAChBzC,EAAO0C,GAAK6yC,EAAI7yC,EAKnB,GAAc,MAAV1C,EACJ,CACC,IAAIiE,EAAI5Q,KAAKiR,MAAMsW,KAAKqH,eACxBjiB,EAAS,IAAIwC,SAASyB,EAAExB,GAAIwB,EAAEvB,GAG/B,OAAO1C,GAGR1M,WAAWk9C,gBAAmC,IAAfA,WAA6BA,gBAAav2C,EA8DzE02C,cAAclxC,UAAUoxC,OAAS,KAOjCF,cAAclxC,UAAUoxC,OAAS,KAQjCF,cAAclxC,UAAUk2C,SAAW,SAASh2C,EAAKvE,EAAOw6C,GAEvDviD,KAAKw9C,OAAOlxC,GAAO,CAACvE,MAAOA,EAAOw6C,SAAUA,IAU7CjF,cAAclxC,UAAUo2C,SAAW,SAASl2C,GAE3C,IAAIK,EAAS,KAEb,GAAW,MAAPL,EACJ,CACC,IAAIwlB,EAAM9xB,KAAKw9C,OAAOlxC,GAEX,MAAPwlB,IAEHnlB,EAAU3M,KAAQ,IAAI8xB,EAAIywB,SAAWzwB,EAAI/pB,OAI3C,OAAO4E,GAGR1M,WAAWq9C,mBAAyC,IAAlBA,cAAgCA,mBAAgB12C,EA2ClF62C,cAAcrxC,UAAUq2C,iBAAkB,EAO1ChF,cAAcrxC,UAAUs2C,UAAY,SAAS7wC,EAAO4c,GAEtC,MAAT5c,IAEH7R,KAAK2iD,qBAAqB9wC,EAAO4c,EAAQnmB,QAAQ2M,KAAKjV,MAAM,WAE3DA,KAAK4iD,cAAcx3C,MAAMpL,KAAMqL,eAI5BrL,KAAKyiD,iBAERziD,KAAK2iD,qBAAqB9wC,EAAO4c,EAAQnmB,QAAQ2M,KAAKjV,MAAM,WAE3DA,KAAK6iD,aAAaz3C,MAAMpL,KAAMqL,iBAWlCoyC,cAAcrxC,UAAUu2C,qBAAuB,SAAS9wC,EAAO4c,EAAQ1hB,GAEtE,GAAa,MAAT8E,EACJ,CACC9E,EAAQ8E,EAAO4c,GAKf,IAHA,IAAIxd,EAAQY,EAAM0V,KAAKtW,MACnBiC,EAAajC,EAAMiB,MAAMiB,cAActB,EAAMG,MAExCnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIwO,EAAapC,EAAMsW,KAAKxV,SAASd,EAAMiB,MAAMkB,WAAWvB,EAAMG,KAAMnN,IACxE7E,KAAK2iD,qBAAqBtvC,EAAYob,EAAQ1hB,MAUjD0wC,cAAcrxC,UAAU02C,oBAAsB,SAASjxC,EAAO4c,GAE7D,OAAO,MAQRgvB,cAAcrxC,UAAUw2C,cAAgB,SAAS/wC,EAAO4c,GAGvD,IAAIzqB,EAAOhE,KAAK8iD,oBAAoBjxC,EAAO4c,GAE/B,MAARzqB,GAEHyqB,EAAOs0B,QAAQ/+C,GAIhBhE,KAAKgjD,UAAUnxC,EAAO4c,GACtBzuB,KAAKijD,SAASpxC,EAAO4c,GAET,MAARzqB,GAEHyqB,EAAOs0B,QAAQ,OASjBtF,cAAcrxC,UAAU42C,UAAY,SAASnxC,EAAO4c,GAE/C5c,EAAMQ,iBAAiB6wC,SAAWrxC,EAAMQ,MAAM8wC,gBAEjD10B,EAAO2yB,OACPvvC,EAAMQ,MAAM+wC,MAAM30B,GAClBA,EAAO40B,YAST5F,cAAcrxC,UAAU62C,SAAW,SAASpxC,EAAO4c,GAEhC,MAAd5c,EAAMxD,MAAgBwD,EAAMxD,KAAK80C,gBAEpC10B,EAAO2yB,OACPvvC,EAAMxD,KAAK+0C,MAAM30B,GACjBA,EAAO40B,YAUT5F,cAAcrxC,UAAUy2C,aAAe,SAAShxC,EAAO4c,GAEhC,MAAlB5c,EAAMyxC,UAETzxC,EAAMyxC,SAASx2C,OAAM,SAAS3I,EAAIkO,GAE7BA,aAAiB6wC,SAEpB7wC,EAAM+wC,MAAM30B,OAOhBxuB,WAAWw9C,mBAAyC,IAAlBA,cAAgCA,mBAAgB72C,EAiClF82C,mBAAmBtxC,UAAUyF,MAAQ,KAOrC6rC,mBAAmBtxC,UAAUm3C,OAAS,KAOtC7F,mBAAmBtxC,UAAUo3C,KAAO,KAOpC9F,mBAAmBtxC,UAAUq3C,YAAa,EAO1C/F,mBAAmBtxC,UAAUs3C,MAAQ,EAOrChG,mBAAmBtxC,UAAUu3C,MAAQ,EAOrCjG,mBAAmBtxC,UAAUw3C,OAAS,IAOtClG,mBAAmBtxC,UAAUy3C,OAAS,IAOtCnG,mBAAmBtxC,UAAU03C,OAAS,IAOtCpG,mBAAmBtxC,UAAU23C,QAAU,IAOvCrG,mBAAmBtxC,UAAU43C,QAAU,IAOvCtG,mBAAmBtxC,UAAUuqC,eAAgB,EAO7C+G,mBAAmBtxC,UAAUwxC,mBAAqB,WAEjD,OAAO,IAAItC,gBAQZoC,mBAAmBtxC,UAAU8pC,MAAQ,WAEpCl2C,KAAK6R,MAAQ7R,KAAKikD,cAClBjkD,KAAKujD,OAAS,IAQf7F,mBAAmBtxC,UAAU63C,YAAc,WAE1C,MAAO,CACN1xC,GAAI,EACJE,GAAI,EACJH,MAAO,EACPmV,MAAO,EACPy8B,UAAW,EACXC,YAAa,EACbC,UAAW,KACXC,kBAAmB,EACnBC,cAAe,KACfC,cAAe,EACfC,kBAAmB,KACnBC,YAAa,KACbC,YAAa,EACbC,QAAQ,EACRC,YAAa,MACbC,SAAS,EACTC,QAAS,OACTC,SAAU,QACVC,WAAY,GACZC,UAAW,UACXC,oBAAqB,KACrBC,gBAAiB,KACjBx4B,SAAUhf,YAAYof,iBACtBH,WAAYjf,YAAYqf,mBACxBF,UAAW,EACXs4B,QAAQ,EACRC,YAAa13C,YAAY+lB,YACzB4xB,YAAa33C,YAAYmmB,eACzByxB,SAAU53C,YAAYimB,gBACtB4xB,SAAU73C,YAAYkmB,gBACtB3Q,SAAU,EACVuiC,WAAY,EACZC,WAAY,IASdhI,mBAAmBtxC,UAAUu5C,OAAS,SAAS59C,GAE9C,OAAOqB,KAAK2c,MAAMpR,WAAW5M,KAQ9B21C,mBAAmBtxC,UAAUw5C,MAAQ,WAEpC,GAAiB,MAAb5lD,KAAKwjD,OAERxjD,KAAKwjD,KAAK52C,KAAKvB,UAAU,IAErBA,UAAUlJ,OAAS,GAItB,IAFA,IAAI0W,EAAI7Y,KAAK6R,MAEJhN,EAAI,EAAGA,EAAIwG,UAAUlJ,OAAQ0C,GAAK,EAE1C7E,KAAK0jD,MAAQr4C,UAAUxG,EAAI,GAC3B7E,KAAK2jD,MAAQt4C,UAAUxG,GAEvB7E,KAAKwjD,KAAK52C,KAAK5M,KAAK2lD,QAAQ3lD,KAAK0jD,MAAQ7qC,EAAEtG,IAAMsG,EAAEvG,QACnDtS,KAAKwjD,KAAK52C,KAAK5M,KAAK2lD,QAAQ3lD,KAAK2jD,MAAQ9qC,EAAEpG,IAAMoG,EAAEvG,SAWvDorC,mBAAmBtxC,UAAUy5C,YAAc,SAASz2C,EAAGC,EAAGy2C,EAAO3iC,EAAIiE,GAEpE,IAAInH,EAAM6lC,GAAS18C,KAAK2W,GAAK,KAE7B,OAAOzX,QAAQkb,gBAAgB,IAAIrU,QAAQC,EAAGC,GAAIjG,KAAK2X,IAAId,GAC1D7W,KAAK6X,IAAIhB,GAAM,IAAI9Q,QAAQgU,EAAIiE,KAQjCs2B,mBAAmBtxC,UAAUg1C,KAAO,WAEnCphD,KAAKujD,OAAO32C,KAAK5M,KAAK6R,OACtB7R,KAAK6R,MAAQvJ,QAAQmH,MAAMzP,KAAK6R,QAQjC6rC,mBAAmBtxC,UAAUi3C,QAAU,WAElCrjD,KAAKujD,OAAOphD,OAAS,IAExBnC,KAAK6R,MAAQ7R,KAAKujD,OAAOwC,QAS3BrI,mBAAmBtxC,UAAU22C,QAAU,SAAS/+C,KAUhD05C,mBAAmBtxC,UAAUkG,MAAQ,SAASvK,GAE7C/H,KAAK6R,MAAMS,OAASvK,EACpB/H,KAAK6R,MAAM6yC,aAAe38C,GAQ3B21C,mBAAmBtxC,UAAUuiB,UAAY,SAASpc,EAAIE,GAErDzS,KAAK6R,MAAMU,IAAMA,EACjBvS,KAAK6R,MAAMY,IAAMA,GAQlBirC,mBAAmBtxC,UAAU45C,OAAS,SAASF,EAAOpgC,EAAOC,EAAOxC,EAAIiE,KAUxEs2B,mBAAmBtxC,UAAU65C,SAAW,SAASl+C,GAEhD/H,KAAK6R,MAAM4V,MAAQ1f,GAQpB21C,mBAAmBtxC,UAAU85C,aAAe,SAASn+C,GAEpD/H,KAAK6R,MAAMqyC,UAAYn8C,GAQxB21C,mBAAmBtxC,UAAU+5C,eAAiB,SAASp+C,GAEtD/H,KAAK6R,MAAMsyC,YAAcp8C,GAQ1B21C,mBAAmBtxC,UAAUg6C,aAAe,SAASr+C,GAEhDA,GAAS4F,YAAYC,OAExB7F,EAAQ,MAGT/H,KAAK6R,MAAMuyC,UAAYr8C,EACvB/H,KAAK6R,MAAMyyC,cAAgB,MAQ5B5G,mBAAmBtxC,UAAUi6C,YAAc,SAASC,EAAQC,EAAQn3C,EAAGC,EAAGvG,EAAGD,EAAG29C,EAAWC,EAAQC,GAElG,IAAI7tC,EAAI7Y,KAAK6R,MACbgH,EAAEurC,UAAYkC,EACdztC,EAAEwrC,kBAA+B,MAAVoC,EAAkBA,EAAS,EAClD5tC,EAAEyrC,cAAgBiC,EAClB1tC,EAAE0rC,cAA2B,MAAVmC,EAAkBA,EAAS,EAC9C7tC,EAAE2rC,kBAAoBgC,GAQvB9I,mBAAmBtxC,UAAUu6C,eAAiB,SAAS5+C,GAElDA,GAAS4F,YAAYC,OAExB7F,EAAQ,MAGT/H,KAAK6R,MAAM4yC,YAAc18C,GAQ1B21C,mBAAmBtxC,UAAUw6C,eAAiB,SAAS7+C,GAEtD/H,KAAK6R,MAAM6yC,YAAc38C,GAQ1B21C,mBAAmBtxC,UAAUy6C,UAAY,SAAS9+C,EAAO88C,GAExD7kD,KAAK6R,MAAM8yC,OAAS58C,EACpB/H,KAAK6R,MAAMgzC,QAAUA,GAQtBnH,mBAAmBtxC,UAAU06C,eAAiB,SAAS/+C,GAEtD/H,KAAK6R,MAAM+yC,YAAc78C,GAQ1B21C,mBAAmBtxC,UAAU26C,WAAa,SAASh/C,GAElD/H,KAAK6R,MAAMizC,QAAU/8C,GAQtB21C,mBAAmBtxC,UAAU46C,YAAc,SAASj/C,GAEnD/H,KAAK6R,MAAMkzC,SAAWh9C,GAQvB21C,mBAAmBtxC,UAAU66C,cAAgB,SAASl/C,GAErD/H,KAAK6R,MAAMmzC,WAAaj9C,GAQzB21C,mBAAmBtxC,UAAU86C,aAAe,SAASn/C,GAEhDA,GAAS4F,YAAYC,OAExB7F,EAAQ,MAGT/H,KAAK6R,MAAMozC,UAAYl9C,GAQxB21C,mBAAmBtxC,UAAU+6C,uBAAyB,SAASp/C,GAE1DA,GAAS4F,YAAYC,OAExB7F,EAAQ,MAGT/H,KAAK6R,MAAMqzC,oBAAsBn9C,GAQlC21C,mBAAmBtxC,UAAUg7C,mBAAqB,SAASr/C,GAEtDA,GAAS4F,YAAYC,OAExB7F,EAAQ,MAGT/H,KAAK6R,MAAMszC,gBAAkBp9C,GAQ9B21C,mBAAmBtxC,UAAUi7C,YAAc,SAASt/C,GAEnD/H,KAAK6R,MAAM8a,SAAWhY,WAAW5M,IAQlC21C,mBAAmBtxC,UAAUk7C,cAAgB,SAASv/C,GAErD/H,KAAK6R,MAAM+a,WAAa7kB,GAQzB21C,mBAAmBtxC,UAAUm7C,aAAe,SAASx/C,GAEvC,MAATA,IAEHA,EAAQ,GAGT/H,KAAK6R,MAAMib,UAAY/kB,GAQxB21C,mBAAmBtxC,UAAUo7C,UAAY,SAASxS,GAEjDh1C,KAAK6R,MAAMuzC,OAASpQ,GAQrB0I,mBAAmBtxC,UAAUq7C,eAAiB,SAAS1/C,GAElDA,GAAS4F,YAAYC,OAExB7F,EAAQ,MAGT/H,KAAK6R,MAAMwzC,YAAct9C,GAQ1B21C,mBAAmBtxC,UAAUs7C,eAAiB,SAAS3/C,GAEtD/H,KAAK6R,MAAMyzC,YAAcv9C,GAQ1B21C,mBAAmBtxC,UAAUu7C,gBAAkB,SAASp1C,EAAIE,GAE3DzS,KAAK6R,MAAM0zC,SAAWhzC,EACtBvS,KAAK6R,MAAM2zC,SAAW/yC,GAQvBirC,mBAAmBtxC,UAAUw7C,MAAQ,WAEpC5nD,KAAK0jD,MAAQ,EACb1jD,KAAK2jD,MAAQ,EACb3jD,KAAKwjD,KAAO,IAQb9F,mBAAmBtxC,UAAUy7C,OAAS,SAASz4C,EAAGC,GAEjDrP,KAAK4lD,MAAM5lD,KAAK4jD,OAAQx0C,EAAGC,IAQ5BquC,mBAAmBtxC,UAAU07C,OAAS,SAAS14C,EAAGC,GAEjDrP,KAAK4lD,MAAM5lD,KAAK6jD,OAAQz0C,EAAGC,IAQ5BquC,mBAAmBtxC,UAAU27C,OAAS,SAAS5+B,EAAIzF,EAAId,EAAIC,GAE1D7iB,KAAK4lD,MAAM5lD,KAAK8jD,OAAQ36B,EAAIzF,EAAId,EAAIC,IAQrC66B,mBAAmBtxC,UAAU47C,QAAU,SAAS7+B,EAAIzF,EAAId,EAAIC,EAAIC,EAAIC,GAEnE/iB,KAAK4lD,MAAM5lD,KAAK+jD,QAAS56B,EAAIzF,EAAId,EAAIC,EAAIC,EAAIC,IAS9C26B,mBAAmBtxC,UAAU67C,MAAQ,SAASjhC,EAAIC,EAAI5G,EAAOC,EAAcC,EAAWnR,EAAGC,GAExF,IAAI64C,EAAS5/C,QAAQ4X,YAAYlgB,KAAK0jD,MAAO1jD,KAAK2jD,MAAO38B,EAAIC,EAAI5G,EAAOC,EAAcC,EAAWnR,EAAGC,GAEpG,GAAc,MAAV64C,EAEH,IAAK,IAAIrjD,EAAI,EAAGA,EAAIqjD,EAAO/lD,OAAQ0C,GAAK,EAEvC7E,KAAKgoD,QAAQE,EAAOrjD,GAAIqjD,EAAOrjD,EAAI,GAAIqjD,EAAOrjD,EAAI,GACjDqjD,EAAOrjD,EAAI,GAAIqjD,EAAOrjD,EAAI,GAAIqjD,EAAOrjD,EAAI,KAU7C64C,mBAAmBtxC,UAAUwkB,MAAQ,SAASzH,EAAIzF,EAAId,EAAIC,EAAIC,EAAIC,GAEjE/iB,KAAK4lD,MAAM5lD,KAAKgkD,UAQjBtG,mBAAmBtxC,UAAU+7C,IAAM,aAEnCloD,WAAWy9C,wBAAmD,IAAvBA,mBAAqCA,wBAAqB92C,EAkDjG0B,QAAQoX,OAAOm+B,cAAeH,oBAO9BG,cAAczxC,UAAUg8C,aAAc,EAQtCvK,cAAczxC,UAAUi8C,YAAa,EAOrCxK,cAAczxC,UAAU2xC,cAAgB,WAEvC,IAAIxjC,GAGJA,EAAOva,KAAKgB,cAAc,eACrBqD,aAAa,SAAUsJ,YAAYqf,oBACxChtB,KAAK89C,KAAKv5C,YAAYgW,IAEtBA,EAAOva,KAAKgB,cAAc,aACrBqD,aAAa,OAAQsJ,YAAYof,kBACtC/sB,KAAK89C,KAAKv5C,YAAYgW,IAGtBA,EAAOva,KAAKgB,cAAc,gBACrBqD,aAAa,QAASsJ,YAAY+lB,aACvC1zB,KAAK89C,KAAKv5C,YAAYgW,IAEtBA,EAAOva,KAAKgB,cAAc,gBACrBqD,aAAa,QAASsJ,YAAYmmB,gBACvC9zB,KAAK89C,KAAKv5C,YAAYgW,IAEtBA,EAAOva,KAAKgB,cAAc,iBACrBqD,aAAa,KAAMsJ,YAAYimB,iBACpCrZ,EAAKlW,aAAa,KAAMsJ,YAAYkmB,iBACpC7zB,KAAK89C,KAAKv5C,YAAYgW,IAQvBsjC,cAAczxC,UAAUu5C,OAAS,SAAS59C,GAEzC,OAAO4M,WAAWA,WAAW5M,GAAOugD,QAAQ,KAQ7CzK,cAAczxC,UAAUpL,cAAgB,SAASjB,GAEhD,OAAOC,KAAK89C,KAAK9iC,cAAcha,cAAcjB,IAQ9C89C,cAAczxC,UAAUg1C,KAAO,WAE1BphD,KAAKqoD,YAER3K,mBAAmBtxC,UAAUg1C,KAAKh2C,MAAMpL,KAAMqL,WAG/CrL,KAAK89C,KAAKv5C,YAAYvE,KAAKgB,cAAc,UAQ1C68C,cAAczxC,UAAUi3C,QAAU,WAE7BrjD,KAAKqoD,YAER3K,mBAAmBtxC,UAAUi3C,QAAQj4C,MAAMpL,KAAMqL,WAGlDrL,KAAK89C,KAAKv5C,YAAYvE,KAAKgB,cAAc,aAY1C68C,cAAczxC,UAAUkG,MAAQ,SAASvK,GAEjC,IAAIwS,EAAOva,KAAKgB,cAAc,SAC9BuZ,EAAKlW,aAAa,QAAS0D,GAC3B/H,KAAK89C,KAAKv5C,YAAYgW,IAa9BsjC,cAAczxC,UAAUuiB,UAAY,SAASpc,EAAIE,GAEhD,IAAI8H,EAAOva,KAAKgB,cAAc,aAC9BuZ,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAOpzC,IACpCgI,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAOlzC,IACpCzS,KAAK89C,KAAKv5C,YAAYgW,IAiBvBsjC,cAAczxC,UAAU45C,OAAS,SAASF,EAAOpgC,EAAOC,EAAOxC,EAAIiE,GAElE,IAAI7M,EAAOva,KAAKgB,cAAc,WAEjB,GAAT8kD,GAAcpgC,GAASC,KAE1BpL,EAAKlW,aAAa,QAASrE,KAAK2lD,OAAOG,IACvCvrC,EAAKlW,aAAa,QAAS,EAAU,IAAM,KAC3CkW,EAAKlW,aAAa,QAAS,EAAU,IAAM,KAC3CkW,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAOxiC,IACpC5I,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAOv+B,IACpCpnB,KAAK89C,KAAKv5C,YAAYgW,KAcxBsjC,cAAczxC,UAAU65C,SAAW,SAASl+C,GAE3C,GAAI/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAM4V,OAAS1f,EAEvB,OAGD21C,mBAAmBtxC,UAAU65C,SAAS76C,MAAMpL,KAAMqL,WAGnD,IAAIkP,EAAOva,KAAKgB,cAAc,SAC9BuZ,EAAKlW,aAAa,QAASrE,KAAK2lD,OAAO59C,IACvC/H,KAAK89C,KAAKv5C,YAAYgW,IAavBsjC,cAAczxC,UAAU85C,aAAe,SAASn+C,GAE/C,GAAI/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAMqyC,WAAan8C,EAE3B,OAGD21C,mBAAmBtxC,UAAU85C,aAAa96C,MAAMpL,KAAMqL,WAGvD,IAAIkP,EAAOva,KAAKgB,cAAc,aAC9BuZ,EAAKlW,aAAa,QAASrE,KAAK2lD,OAAO59C,IACvC/H,KAAK89C,KAAKv5C,YAAYgW,IAavBsjC,cAAczxC,UAAU+5C,eAAiB,SAASp+C,GAEjD,GAAI/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAMsyC,aAAep8C,EAE7B,OAGD21C,mBAAmBtxC,UAAU+5C,eAAe/6C,MAAMpL,KAAMqL,WAGzD,IAAIkP,EAAOva,KAAKgB,cAAc,eAC9BuZ,EAAKlW,aAAa,QAASrE,KAAK2lD,OAAO59C,IACvC/H,KAAK89C,KAAKv5C,YAAYgW,IAYvBsjC,cAAczxC,UAAUg6C,aAAe,SAASr+C,GAO/C,GALIA,GAAS4F,YAAYC,OAExB7F,EAAQ,MAGL/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAMuyC,WAAar8C,EAE3B,OAGD21C,mBAAmBtxC,UAAUg6C,aAAah7C,MAAMpL,KAAMqL,WAGvD,IAAIkP,EAAOva,KAAKgB,cAAc,aAC9BuZ,EAAKlW,aAAa,QAAmB,MAAT0D,EAAiBA,EAAQ4F,YAAYC,MACjE5N,KAAK89C,KAAKv5C,YAAYgW,IAuBvBsjC,cAAczxC,UAAUi6C,YAAc,SAASC,EAAQC,EAAQn3C,EAAGC,EAAGvG,EAAGD,EAAG29C,EAAWC,EAAQC,GAE7F,GAAc,MAAVJ,GAA4B,MAAVC,EACtB,CACC7I,mBAAmBtxC,UAAUi6C,YAAYj7C,MAAMpL,KAAMqL,WAErD,IAAIkP,EAAOva,KAAKgB,cAAc,YAC9BuZ,EAAKlW,aAAa,KAAMiiD,GACxB/rC,EAAKlW,aAAa,KAAMkiD,GACxBhsC,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOv2C,IACnCmL,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOt2C,IACnCkL,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAO78C,IACnCyR,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAO98C,IAGlB,MAAb29C,GAEHjsC,EAAKlW,aAAa,YAAamiD,GAGlB,MAAVC,GAEHlsC,EAAKlW,aAAa,SAAUoiD,GAGf,MAAVC,GAEHnsC,EAAKlW,aAAa,SAAUqiD,GAG7B1mD,KAAK89C,KAAKv5C,YAAYgW,KAaxBsjC,cAAczxC,UAAUu6C,eAAiB,SAAS5+C,GAOjD,GALIA,GAAS4F,YAAYC,OAExB7F,EAAQ,MAGL/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAM4yC,aAAe18C,EAE7B,OAGD21C,mBAAmBtxC,UAAUu6C,eAAev7C,MAAMpL,KAAMqL,WAGzD,IAAIkP,EAAOva,KAAKgB,cAAc,eAC9BuZ,EAAKlW,aAAa,QAAmB,MAAT0D,EAAiBA,EAAQ4F,YAAYC,MACjE5N,KAAK89C,KAAKv5C,YAAYgW,IAYvBsjC,cAAczxC,UAAUw6C,eAAiB,SAAS7+C,GAEjD,GAAI/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAM6yC,aAAe38C,EAE7B,OAGD21C,mBAAmBtxC,UAAUw6C,eAAex7C,MAAMpL,KAAMqL,WAGzD,IAAIkP,EAAOva,KAAKgB,cAAc,eAC9BuZ,EAAKlW,aAAa,QAASrE,KAAK2lD,OAAO59C,IACvC/H,KAAK89C,KAAKv5C,YAAYgW,IAcvBsjC,cAAczxC,UAAUy6C,UAAY,SAAS9+C,EAAO88C,GAEnD,GAAI7kD,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAM8yC,QAAU58C,EAExB,OAGD21C,mBAAmBtxC,UAAUy6C,UAAUz7C,MAAMpL,KAAMqL,WAGpD,IAAIkP,EAAOva,KAAKgB,cAAc,UAC9BuZ,EAAKlW,aAAa,SAAU,EAAU,IAAM,KAE7B,MAAXwgD,GAEHtqC,EAAKlW,aAAa,UAAW,EAAY,IAAM,KAGhDrE,KAAK89C,KAAKv5C,YAAYgW,IAevBsjC,cAAczxC,UAAU06C,eAAiB,SAAS/+C,GAEjD,GAAI/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAM+yC,aAAe78C,EAE7B,OAGD21C,mBAAmBtxC,UAAU06C,eAAe17C,MAAMpL,KAAMqL,WAGzD,IAAIkP,EAAOva,KAAKgB,cAAc,eAC9BuZ,EAAKlW,aAAa,UAAW0D,GAC7B/H,KAAK89C,KAAKv5C,YAAYgW,IAavBsjC,cAAczxC,UAAU26C,WAAa,SAASh/C,GAE7C,GAAI/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAMizC,SAAW/8C,EAEzB,OAGD21C,mBAAmBtxC,UAAU26C,WAAW37C,MAAMpL,KAAMqL,WAGrD,IAAIkP,EAAOva,KAAKgB,cAAc,WAC9BuZ,EAAKlW,aAAa,MAAO0D,GACzB/H,KAAK89C,KAAKv5C,YAAYgW,IAavBsjC,cAAczxC,UAAU46C,YAAc,SAASj/C,GAE9C,GAAI/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAMkzC,UAAYh9C,EAE1B,OAGD21C,mBAAmBtxC,UAAU46C,YAAY57C,MAAMpL,KAAMqL,WAGtD,IAAIkP,EAAOva,KAAKgB,cAAc,YAC9BuZ,EAAKlW,aAAa,OAAQ0D,GAC1B/H,KAAK89C,KAAKv5C,YAAYgW,IAYvBsjC,cAAczxC,UAAU66C,cAAgB,SAASl/C,GAEhD,GAAI/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAMmzC,YAAcj9C,EAE5B,OAGD21C,mBAAmBtxC,UAAU66C,cAAc77C,MAAMpL,KAAMqL,WAGxD,IAAIkP,EAAOva,KAAKgB,cAAc,cAC9BuZ,EAAKlW,aAAa,QAAS0D,GAC3B/H,KAAK89C,KAAKv5C,YAAYgW,IAYvBsjC,cAAczxC,UAAU86C,aAAe,SAASn/C,GAE/C,GAAI/H,KAAKooD,YACT,CAMC,GALIrgD,GAAS4F,YAAYC,OAExB7F,EAAQ,MAGL/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAMozC,WAAal9C,EAE3B,OAGD21C,mBAAmBtxC,UAAU86C,aAAa97C,MAAMpL,KAAMqL,WAGvD,IAAIkP,EAAOva,KAAKgB,cAAc,aAC9BuZ,EAAKlW,aAAa,QAAmB,MAAT0D,EAAiBA,EAAQ4F,YAAYC,MACjE5N,KAAK89C,KAAKv5C,YAAYgW,KAaxBsjC,cAAczxC,UAAU+6C,uBAAyB,SAASp/C,GAEzD,GAAI/H,KAAKooD,YACT,CAMC,GALIrgD,GAAS4F,YAAYC,OAExB7F,EAAQ,MAGL/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAMqzC,qBAAuBn9C,EAErC,OAGD21C,mBAAmBtxC,UAAU+6C,uBAAuB/7C,MAAMpL,KAAMqL,WAGjE,IAAIkP,EAAOva,KAAKgB,cAAc,uBAC9BuZ,EAAKlW,aAAa,QAAmB,MAAT0D,EAAiBA,EAAQ4F,YAAYC,MACjE5N,KAAK89C,KAAKv5C,YAAYgW,KAaxBsjC,cAAczxC,UAAUg7C,mBAAqB,SAASr/C,GAErD,GAAI/H,KAAKooD,YACT,CAMC,GALIrgD,GAAS4F,YAAYC,OAExB7F,EAAQ,MAGL/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAMszC,iBAAmBp9C,EAEjC,OAGD21C,mBAAmBtxC,UAAUg7C,mBAAmBh8C,MAAMpL,KAAMqL,WAG7D,IAAIkP,EAAOva,KAAKgB,cAAc,mBAC9BuZ,EAAKlW,aAAa,QAAmB,MAAT0D,EAAiBA,EAAQ4F,YAAYC,MACjE5N,KAAK89C,KAAKv5C,YAAYgW,KAaxBsjC,cAAczxC,UAAUi7C,YAAc,SAASt/C,GAE9C,GAAI/H,KAAKooD,YACT,CACC,GAAIpoD,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAM8a,UAAY5kB,EAE1B,OAGD21C,mBAAmBtxC,UAAUi7C,YAAYj8C,MAAMpL,KAAMqL,WAGtD,IAAIkP,EAAOva,KAAKgB,cAAc,YAC9BuZ,EAAKlW,aAAa,OAAQ0D,GAC1B/H,KAAK89C,KAAKv5C,YAAYgW,KAcxBsjC,cAAczxC,UAAUk7C,cAAgB,SAASv/C,GAEhD,GAAI/H,KAAKooD,YACT,CACC,GAAIpoD,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAM+a,YAAc7kB,EAE5B,OAGD21C,mBAAmBtxC,UAAUk7C,cAAcl8C,MAAMpL,KAAMqL,WAGxD,IAAIkP,EAAOva,KAAKgB,cAAc,cAC9BuZ,EAAKlW,aAAa,SAAU0D,GAC5B/H,KAAK89C,KAAKv5C,YAAYgW,KAcxBsjC,cAAczxC,UAAUm7C,aAAe,SAASx/C,GAE/C,GAAI/H,KAAKooD,YACT,CAMC,GALa,MAATrgD,IAEHA,EAAQ,GAGL/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAMib,WAAa/kB,EAE3B,OAGD21C,mBAAmBtxC,UAAUm7C,aAAan8C,MAAMpL,KAAMqL,WAGvD,IAAIkP,EAAOva,KAAKgB,cAAc,aAC9BuZ,EAAKlW,aAAa,QAAS0D,GAC3B/H,KAAK89C,KAAKv5C,YAAYgW,KAaxBsjC,cAAczxC,UAAUo7C,UAAY,SAASz/C,GAE5C,GAAI/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAMuzC,QAAUr9C,EAExB,OAGD21C,mBAAmBtxC,UAAUo7C,UAAUp8C,MAAMpL,KAAMqL,WAGpD,IAAIkP,EAAOva,KAAKgB,cAAc,UAC9BuZ,EAAKlW,aAAa,UAAW,EAAU,IAAM,KAC7CrE,KAAK89C,KAAKv5C,YAAYgW,IAYvBsjC,cAAczxC,UAAUq7C,eAAiB,SAAS1/C,GAEjD,GAAI/H,KAAKqoD,WACT,CAMC,GALItgD,GAAS4F,YAAYC,OAExB7F,EAAQ,MAGL/H,KAAK6R,MAAMwzC,aAAet9C,EAE7B,OAGD21C,mBAAmBtxC,UAAUq7C,eAAer8C,MAAMpL,KAAMqL,WAGzD,IAAIkP,EAAOva,KAAKgB,cAAc,eAC9BuZ,EAAKlW,aAAa,QAAmB,MAAT0D,EAAiBA,EAAQ4F,YAAYC,MACjE5N,KAAK89C,KAAKv5C,YAAYgW,IAavBsjC,cAAczxC,UAAUs7C,eAAiB,SAAS3/C,GAEjD,GAAI/H,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAMyzC,aAAev9C,EAE7B,OAGD21C,mBAAmBtxC,UAAUs7C,eAAet8C,MAAMpL,KAAMqL,WAGzD,IAAIkP,EAAOva,KAAKgB,cAAc,eAC9BuZ,EAAKlW,aAAa,QAAS0D,GAC3B/H,KAAK89C,KAAKv5C,YAAYgW,IAcvBsjC,cAAczxC,UAAUu7C,gBAAkB,SAASp1C,EAAIE,GAEtD,GAAIzS,KAAKqoD,WACT,CACC,GAAIroD,KAAK6R,MAAM0zC,UAAYhzC,GAAMvS,KAAK6R,MAAM2zC,UAAY/yC,EAEvD,OAGDirC,mBAAmBtxC,UAAUu7C,gBAAgBv8C,MAAMpL,KAAMqL,WAG1D,IAAIkP,EAAOva,KAAKgB,cAAc,gBAC9BuZ,EAAKlW,aAAa,KAAMkO,GACxBgI,EAAKlW,aAAa,KAAMoO,GACxBzS,KAAK89C,KAAKv5C,YAAYgW,IAgBvBsjC,cAAczxC,UAAUyD,KAAO,SAAST,EAAGC,EAAGvG,EAAGD,GAEhD,IAAI0R,EAAOva,KAAKgB,cAAc,QAC9BuZ,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOv2C,IACnCmL,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOt2C,IACnCkL,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAO78C,IACnCyR,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAO98C,IACnC7I,KAAK89C,KAAKv5C,YAAYgW,IAiBvBsjC,cAAczxC,UAAUm8C,UAAY,SAASn5C,EAAGC,EAAGvG,EAAGD,EAAG0J,EAAIE,GAE5D,IAAI8H,EAAOva,KAAKgB,cAAc,aAC9BuZ,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOv2C,IACnCmL,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOt2C,IACnCkL,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAO78C,IACnCyR,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAO98C,IACnC0R,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAOpzC,IACpCgI,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAOlzC,IACpCzS,KAAK89C,KAAKv5C,YAAYgW,IAevBsjC,cAAczxC,UAAUo8C,QAAU,SAASp5C,EAAGC,EAAGvG,EAAGD,GAEnD,IAAI0R,EAAOva,KAAKgB,cAAc,WAC9BuZ,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOv2C,IACnCmL,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOt2C,IACnCkL,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAO78C,IACnCyR,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAO98C,IACnC7I,KAAK89C,KAAKv5C,YAAYgW,IAmBvBsjC,cAAczxC,UAAUinC,MAAQ,SAASjkC,EAAGC,EAAGvG,EAAGD,EAAG5D,EAAKwjD,EAAQ/iC,EAAOC,GAExE1gB,EAAMjF,KAAK29C,UAAUsB,QAAQh6C,GAG7B,IAAIsV,EAAOva,KAAKgB,cAAc,SAC9BuZ,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOv2C,IACnCmL,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOt2C,IACnCkL,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAO78C,IACnCyR,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAO98C,IACnC0R,EAAKlW,aAAa,MAAOY,GACzBsV,EAAKlW,aAAa,SAAU,EAAW,IAAM,KAC7CkW,EAAKlW,aAAa,QAAS,EAAU,IAAM,KAC3CkW,EAAKlW,aAAa,QAAS,EAAU,IAAM,KAC3CrE,KAAK89C,KAAKv5C,YAAYgW,IAQvBsjC,cAAczxC,UAAUw7C,MAAQ,WAE/B5nD,KAAK89C,KAAKv5C,YAAYvE,KAAKgB,cAAc,UACzChB,KAAK0jD,MAAQ,EACb1jD,KAAK2jD,MAAQ,GAad9F,cAAczxC,UAAUy7C,OAAS,SAASz4C,EAAGC,GAE5C,IAAIkL,EAAOva,KAAKgB,cAAc,QAC9BuZ,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOv2C,IACnCmL,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOt2C,IACnCrP,KAAK89C,KAAKv5C,YAAYgW,GACtBva,KAAK0jD,MAAQt0C,EACbpP,KAAK2jD,MAAQt0C,GAadwuC,cAAczxC,UAAU07C,OAAS,SAAS14C,EAAGC,GAE5C,IAAIkL,EAAOva,KAAKgB,cAAc,QAC9BuZ,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOv2C,IACnCmL,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOt2C,IACnCrP,KAAK89C,KAAKv5C,YAAYgW,GACtBva,KAAK0jD,MAAQt0C,EACbpP,KAAK2jD,MAAQt0C,GAedwuC,cAAczxC,UAAU27C,OAAS,SAAS5+B,EAAIzF,EAAId,EAAIC,GAErD,IAAItI,EAAOva,KAAKgB,cAAc,QAC9BuZ,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAOx8B,IACpC5O,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAOjiC,IACpCnJ,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAO/iC,IACpCrI,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAO9iC,IACpC7iB,KAAK89C,KAAKv5C,YAAYgW,GACtBva,KAAK0jD,MAAQ9gC,EACb5iB,KAAK2jD,MAAQ9gC,GAiBdg7B,cAAczxC,UAAU47C,QAAU,SAAS7+B,EAAIzF,EAAId,EAAIC,EAAIC,EAAIC,GAE9D,IAAIxI,EAAOva,KAAKgB,cAAc,SAC9BuZ,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAOx8B,IACpC5O,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAOjiC,IACpCnJ,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAO/iC,IACpCrI,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAO9iC,IACpCtI,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAO7iC,IACpCvI,EAAKlW,aAAa,KAAMrE,KAAK2lD,OAAO5iC,IACpC/iB,KAAK89C,KAAKv5C,YAAYgW,GACtBva,KAAK0jD,MAAQ5gC,EACb9iB,KAAK2jD,MAAQ5gC,GAQd86B,cAAczxC,UAAUwkB,MAAQ,WAE/B5wB,KAAK89C,KAAKv5C,YAAYvE,KAAKgB,cAAc,WA4B1C68C,cAAczxC,UAAUiC,KAAO,SAASe,EAAGC,EAAGvG,EAAGD,EAAGiN,EAAKsW,EAAOC,EAAQq8B,EAAM/C,EAAQ3wC,EAAU2zC,EAAMzlC,EAAU0lC,GAE/G,GAAI5oD,KAAKooD,aAAsB,MAAPtyC,EACxB,CACKxN,QAAQ+N,OAAOP,KAElBA,EAAMxN,QAAQwS,aAAahF,IAG5B,IAAIyE,EAAOva,KAAKgB,cAAc,QAC9BuZ,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOv2C,IACnCmL,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAOt2C,IACnCkL,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAO78C,IACnCyR,EAAKlW,aAAa,IAAKrE,KAAK2lD,OAAO98C,IACnC0R,EAAKlW,aAAa,MAAOyR,GAEZ,MAATsW,GAEH7R,EAAKlW,aAAa,QAAS+nB,GAGd,MAAVC,GAEH9R,EAAKlW,aAAa,SAAUgoB,GAG7B9R,EAAKlW,aAAa,OAAQ,EAAS,IAAM,KAE3B,MAAVshD,IAEHA,EAAS,IAGVprC,EAAKlW,aAAa,SAAUshD,GAEZ,MAAZ3wC,GAEHuF,EAAKlW,aAAa,WAAY2Q,GAGnB,MAAR2zC,GAEHpuC,EAAKlW,aAAa,OAAQ,EAAS,IAAM,KAG1B,MAAZ6e,GAEH3I,EAAKlW,aAAa,WAAY6e,GAGpB,MAAP0lC,GAEHruC,EAAKlW,aAAa,MAAOukD,GAG1B5oD,KAAK89C,KAAKv5C,YAAYgW,KASxBsjC,cAAczxC,UAAUy8C,OAAS,WAEhC7oD,KAAK89C,KAAKv5C,YAAYvE,KAAKgB,cAAc,YAQ1C68C,cAAczxC,UAAU08C,KAAO,WAE9B9oD,KAAK89C,KAAKv5C,YAAYvE,KAAKgB,cAAc,UAQ1C68C,cAAczxC,UAAU28C,cAAgB,WAEvC/oD,KAAK89C,KAAKv5C,YAAYvE,KAAKgB,cAAc,gBAG1Cf,WAAW49C,mBAAyC,IAAlBA,cAAgCA,mBAAgBj3C,EA8IlF0B,QAAQoX,OAAOs+B,cAAeN,oBAK9B,WAIC,GAFAM,cAAc5xC,UAAU48C,cAAgB9oD,SAASE,OAA8B,mBAAdyX,WAAqD,mBAAlBwB,cAEhG2kC,cAAc5xC,UAAU48C,aAI3B,IAEC,IAAI9kD,GAAM,IAAI2T,WAAYE,gBAAgB,YAAa,aACvDimC,cAAc5xC,UAAU48C,aAAsB,MAAP9kD,EAExC,MAAOkK,GAEN4vC,cAAc5xC,UAAU48C,cAAe,GAf1C,GAyBAhL,cAAc5xC,UAAUlH,KAAO,KAQ/B84C,cAAc5xC,UAAU68C,oBAAqB,EAO7CjL,cAAc5xC,UAAUg8C,aAAc,EAOtCpK,cAAc5xC,UAAU88C,WAAY,EASpClL,cAAc5xC,UAAU+8C,UAAY,WAOpCnL,cAAc5xC,UAAUg9C,SAAW,EAOnCpL,cAAc5xC,UAAUi9C,WAAa,EAOrCrL,cAAc5xC,UAAUk9C,YAAc,EAOtCtL,cAAc5xC,UAAUm9C,gBAAkB,EAO1CvL,cAAc5xC,UAAUo9C,eAAiB,EAOzCxL,cAAc5xC,UAAUq9C,SAAW,EAOnCzL,cAAc5xC,UAAUs9C,qBAAuB,EAO/C1L,cAAc5xC,UAAUu9C,mBAAqB,MAQ7C3L,cAAc5xC,UAAUw9C,mBAAqB,GAQ7C5L,cAAc5xC,UAAUy9C,iBAAkB,EAO1C7L,cAAc5xC,UAAUu5C,OAAS,SAAS59C,GAEzC,OAAO4M,WAAWA,WAAW5M,GAAOugD,QAAQ,KAW7CtK,cAAc5xC,UAAUwyC,WAAa,WAEpC,IAAI/6C,EAAOrC,OAAOoC,SAASC,KACvBimD,EAAOjmD,EAAK86C,YAAY,KAO5B,OALImL,EAAO,IAEVjmD,EAAOA,EAAK4B,UAAU,EAAGqkD,IAGnBjmD,GAQRm6C,cAAc5xC,UAAU8pC,MAAQ,WAE/BwH,mBAAmBtxC,UAAU8pC,MAAM9qC,MAAMpL,KAAMqL,WAC/CrL,KAAKk+C,UAAY,IAQlBF,cAAc5xC,UAAUgyC,YAAc,SAAShvC,GAE9C,IAAI1H,EAAQ1H,KAAKgB,cAAc,SAM/B,OALA0G,EAAMrD,aAAa,OAAQ,YAC3BiE,QAAQlE,MAAMsD,EAAO,mBAAqBiG,YAAYqf,mBACpD,cAAgBrf,YAAYof,iBAC5B,oCAEKrlB,GAQRs2C,cAAc5xC,UAAUpL,cAAgB,SAAS+oD,EAASC,GAEzD,GAA+C,MAA3ChqD,KAAK89C,KAAK9iC,cAAc7X,gBAE3B,OAAOnD,KAAK89C,KAAK9iC,cAAc7X,gBAAgB6mD,GAAar8C,YAAY6gB,OAAQu7B,GAIhF,IAAIpgD,EAAM3J,KAAK89C,KAAK9iC,cAAcha,cAAc+oD,GAOhD,OALiB,MAAbC,GAEHrgD,EAAItF,aAAa,QAAS2lD,GAGpBrgD,GASTq0C,cAAc5xC,UAAU69C,iBAAmB,SAASC,EAAI96C,EAAGC,EAAGvG,EAAGD,EAAGiN,EAAKsW,EAAOC,EAAQq8B,EAAM/C,EAAQ3wC,EAAU2zC,EAAMzlC,GAErH,OAAe,MAAPpN,EAAe9V,KAAKmpD,UAAY,MAQzCnL,cAAc5xC,UAAU+9C,uBAAyB,SAASD,EAAI96C,EAAGC,EAAGvG,EAAGD,EAAGiN,EAAKsW,EAAOC,EAAQq8B,EAAM/C,EAAQ3wC,EAAU2zC,EAAMzlC,GAE3H,IAAI7U,EAAOrO,KAAKiqD,iBAAiBC,EAAI96C,EAAGC,EAAGvG,EAAGD,EAAGiN,EAAKsW,EAAOC,EAAQq8B,EAAM/C,EAAQ3wC,EAAU2zC,EAAMzlC,GAC/FrK,EAAI7Y,KAAK6R,MAEb,GAAY,MAARxD,GAAgBwK,EAAE8T,SAAW,EACjC,CACC,IAAIla,EAAM4Z,GAAU1e,YAAY6e,UAAa,EAC3CH,GAAU1e,YAAY8e,aAAgB,EAAI,GACxC29B,EAAUh+B,GAASze,YAAY4e,YAAe,MAChDH,GAASze,YAAY2e,WAAc,QACpC,SAEGixB,EAAMv9C,KAAKgB,cAAc,QAC7Bu8C,EAAIl5C,aAAa,IAAK+E,KAAK2c,MAAM3W,EAAIyJ,EAAEtG,KACvCgrC,EAAIl5C,aAAa,IAAK+E,KAAK2c,MAAM1W,EAAIwJ,EAAEpG,GAAKA,EAAKoG,EAAE8T,WACnD4wB,EAAIl5C,aAAa,OAAQwU,EAAEosC,WAAa,SACxC1H,EAAIl5C,aAAa,cAAewU,EAAE+T,YAClC2wB,EAAIl5C,aAAa,YAAa+E,KAAK2c,MAAMlN,EAAE8T,UAAY,MAGzC,SAAVy9B,GAEH7M,EAAIl5C,aAAa,cAAe+lD,IAG5BvxC,EAAEiU,UAAYnf,YAAYyf,YAAczf,YAAYyf,WAExDmwB,EAAIl5C,aAAa,cAAe,SAG5BwU,EAAEiU,UAAYnf,YAAY2f,cAAgB3f,YAAY2f,aAE1DiwB,EAAIl5C,aAAa,aAAc,UAGhC,IAAIkpB,EAAW,GAmBf,OAjBK1U,EAAEiU,UAAYnf,YAAY6f,iBAAmB7f,YAAY6f,gBAE7DD,EAAS3gB,KAAK,cAGViM,EAAEiU,UAAYnf,YAAY8f,qBAAuB9f,YAAY8f,oBAEjEF,EAAS3gB,KAAK,gBAGX2gB,EAASprB,OAAS,GAErBo7C,EAAIl5C,aAAa,kBAAmBkpB,EAASre,KAAK,MAGnD5G,QAAQlE,MAAMm5C,EAAKlvC,GAEZkvC,EAIP,OAAO,MASTS,cAAc5xC,UAAUi+C,iBAAmB,SAAShjC,EAAO8gC,EAAK1B,EAAQC,EAAQF,GAGxD,KAAnBn/B,EAAM7Y,OAAO,KAEhB6Y,EAAQA,EAAM5hB,UAAU,IAGJ,KAAjB0iD,EAAI35C,OAAO,KAEd25C,EAAMA,EAAI1iD,UAAU,IAKrB4hB,EAAQA,EAAM3Z,cAAgB,IAAM+4C,EACpC0B,EAAMA,EAAIz6C,cAAgB,IAAMg5C,EAGhC,IAAIkC,EAAM,KAEV,GAAiB,MAAbpC,GAAqBA,GAAa74C,YAAYmX,gBAEjD8jC,EAAM,SAEF,GAAIpC,GAAa74C,YAAYoX,eAEjC6jC,EAAM,QAGP,CACC,IAAI/3C,EAAMwW,EACVA,EAAQ8gC,EACRA,EAAMt3C,EAEF21C,GAAa74C,YAAY6W,gBAE5BokC,EAAM,IAEEpC,GAAa74C,YAAYkX,iBAEjC+jC,EAAM,KAIR,MAAO,eAAiBvhC,EAAQ,IAAM8gC,EAAM,IAAMS,GAQnD5K,cAAc5xC,UAAUk+C,eAAiB,SAASjjC,EAAO8gC,EAAK1B,EAAQC,EAAQF,GAE7E,IAAIriD,EAAKnE,KAAKqqD,iBAAiBhjC,EAAO8gC,EAAK1B,EAAQC,EAAQF,GACvD+D,EAAWvqD,KAAKk+C,UAAU/5C,GAE9B,GAAgB,MAAZomD,EACJ,CACC,IAAIv5B,EAAMhxB,KAAK89C,KAAK7sB,gBAEhBrlB,EAAU,EACV4+C,EAAQrmD,EAAK,IAAMyH,EAEvB,GAAW,MAAPolB,EAIH,IAFAu5B,EAAWv5B,EAAIhW,cAAcyvC,eAAeD,GAEzB,MAAZD,GAAoBA,EAASt5B,iBAAmBD,GAEtDw5B,EAAQrmD,EAAK,IAAMyH,IACnB2+C,EAAWv5B,EAAIhW,cAAcyvC,eAAeD,QAM7CA,EAAQ,QAAUxqD,KAAKypD,SAGR,MAAZc,KAEHA,EAAWvqD,KAAK0qD,kBAAkBrjC,EAAO8gC,EAAK1B,EAAQC,EAAQF,IACrDniD,aAAa,KAAMmmD,GAEX,MAAbxqD,KAAKm+C,KAERn+C,KAAKm+C,KAAK55C,YAAYgmD,GAItBv5B,EAAIzsB,YAAYgmD,IAIlBvqD,KAAKk+C,UAAU/5C,GAAMomD,EAGtB,OAAOA,EAAS50C,aAAa,OAQ9BqoC,cAAc5xC,UAAUs+C,kBAAoB,SAASrjC,EAAO8gC,EAAK1B,EAAQC,EAAQF,GAEhF,IAAI+D,EAAWvqD,KAAKgB,cAAc,kBAClCupD,EAASlmD,aAAa,KAAM,MAC5BkmD,EAASlmD,aAAa,KAAM,MAC5BkmD,EAASlmD,aAAa,KAAM,MAC5BkmD,EAASlmD,aAAa,KAAM,MAEX,MAAbmiD,GAAqBA,GAAa74C,YAAYmX,gBAEjDylC,EAASlmD,aAAa,KAAM,QAEpBmiD,GAAa74C,YAAYoX,eAEjCwlC,EAASlmD,aAAa,KAAM,QAEpBmiD,GAAa74C,YAAY6W,gBAEjC+lC,EAASlmD,aAAa,KAAM,QAEpBmiD,GAAa74C,YAAYkX,gBAEjC0lC,EAASlmD,aAAa,KAAM,QAG7B,IAAIsmD,EAAMlE,EAAS,EAAK,iBAAmBA,EAAS,GAEhDzK,EAAOh8C,KAAKgB,cAAc,QAY9B,OAXAg7C,EAAK33C,aAAa,SAAU,MAC5B23C,EAAK33C,aAAa,QAAS,cAAgBgjB,EAAQsjC,GACnDJ,EAAShmD,YAAYy3C,GAErB2O,EAAMjE,EAAS,EAAK,iBAAmBA,EAAS,IAEhD1K,EAAOh8C,KAAKgB,cAAc,SACrBqD,aAAa,SAAU,QAC5B23C,EAAK33C,aAAa,QAAS,cAAgB8jD,EAAMwC,GACjDJ,EAAShmD,YAAYy3C,GAEduO,GAQRvM,cAAc5xC,UAAUw+C,QAAU,SAASC,EAAQC,GAElD,IAAI5lD,EAAOlF,KAAKkF,KACZ2T,EAAI7Y,KAAK6R,MAEb,GAAY,MAAR3M,EACJ,CACC,GAAqB,QAAjBA,EAAKoR,SACT,CAEC,KAAiB,MAAbtW,KAAKwjD,MAAgBxjD,KAAKwjD,KAAKrhD,OAAS,GAM3C,OAJA+C,EAAKb,aAAa,IAAKrE,KAAKwjD,KAAKt0C,KAAK,MAQpC27C,GAAyB,MAAfhyC,EAAEurC,UAEfpkD,KAAK+qD,aAEI/qD,KAAKi+C,eAGO,WAAjB/4C,EAAKoR,UAAyBpW,SAASyC,MAE1CuC,EAAKb,aAAa,OAAQ,eAI1Ba,EAAKb,aAAa,OAAQ,QAI3BwmD,GAAS,GAGNC,GAA4B,MAAjBjyC,EAAE4rC,YAEhBzkD,KAAKgrD,eAEIhrD,KAAKi+C,cAEd/4C,EAAKb,aAAa,SAAU,QAGV,MAAfwU,EAAEoyC,WAAqBpyC,EAAEoyC,UAAU9oD,OAAS,GAE/C+C,EAAKb,aAAa,YAAawU,EAAEoyC,WAG9BpyC,EAAEusC,QAELplD,KAAK89C,KAAKv5C,YAAYvE,KAAKkrD,aAAahmD,IAIrClF,KAAKupD,gBAAkB,IAAMsB,GAEhC7qD,KAAK89C,KAAKv5C,YAAYvE,KAAKmrD,gBAAgBjmD,IAIxClF,KAAK22C,cAERzxC,EAAKb,aAAa,iBAAkBrE,KAAK2pD,oBAGhC3pD,KAAK22C,eAAsC,MAArB32C,KAAKorD,cAEpClmD,EAAKb,aAAa,iBAAkB,SAIf,QAAjBa,EAAKoR,UAAuC,QAAjBpR,EAAKoR,UAAuC,WAAjBpR,EAAKoR,UACjC,QAA7BpR,EAAKyQ,aAAa,SAAkD,eAA7BzQ,EAAKyQ,aAAa,SAC3B,QAA/BzQ,EAAKyQ,aAAa,WAA8D,QAAvCzQ,EAAKyQ,aAAa,oBAG3D3V,KAAK89C,KAAKv5C,YAAYW,GAGvBlF,KAAKkF,KAAO,OASd84C,cAAc5xC,UAAU2+C,WAAa,WAEpC,IAAIlyC,EAAI7Y,KAAK6R,MAOb,IALIgH,EAAE4O,MAAQ,GAAK5O,EAAEqrC,UAAY,IAEhClkD,KAAKkF,KAAKb,aAAa,eAAgBwU,EAAE4O,MAAQ5O,EAAEqrC,WAGjC,MAAfrrC,EAAEurC,UAEL,GAAuB,MAAnBvrC,EAAEyrC,cACN,CACC,IAAIngD,EAAKnE,KAAKsqD,eAAevxC,OAAOF,EAAEurC,WAAYrrC,OAAOF,EAAEyrC,eAC1DzrC,EAAEwrC,kBAAmBxrC,EAAE0rC,cAAe1rC,EAAE2rC,mBAEzC,GAAKtkD,SAASqC,cAAiBrC,SAASE,OAAUF,SAASO,SACzDP,SAASS,SAAWX,KAAK89C,KAAK9iC,eAAiBna,SAQhDb,KAAKkF,KAAKb,aAAa,OAAQ,QAAUF,EAAK,SAP/C,CAEC,IAAIwsB,EAAO3wB,KAAK4+C,aAAahwC,QAAQ,YAAa,QAClD5O,KAAKkF,KAAKb,aAAa,OAAQ,OAASssB,EAAO,IAAMxsB,EAAK,WAS3DnE,KAAKkF,KAAKb,aAAa,OAAQ0U,OAAOF,EAAEurC,WAAW12C,gBAUtDswC,cAAc5xC,UAAUi/C,sBAAwB,WAE/C,OAAOjiD,KAAKC,IAAIrJ,KAAKwpD,eAAgBpgD,KAAKC,IAAI,IAAMrJ,KAAK2lD,OAAO3lD,KAAK6R,MAAM6yC,YAAc1kD,KAAK6R,MAAMS,UAQrG0rC,cAAc5xC,UAAU4+C,aAAe,WAEtC,IAAInyC,EAAI7Y,KAAK6R,MAEb7R,KAAKkF,KAAKb,aAAa,SAAU0U,OAAOF,EAAE4rC,aAAa/2C,gBAEnDmL,EAAE4O,MAAQ,GAAK5O,EAAEsrC,YAAc,IAElCnkD,KAAKkF,KAAKb,aAAa,iBAAkBwU,EAAE4O,MAAQ5O,EAAEsrC,aAGtD,IAAImH,EAAKtrD,KAAKqrD,wBAEJ,GAANC,GAEHtrD,KAAKkF,KAAKb,aAAa,eAAgBinD,GAGd,QAAtBtrD,KAAKkF,KAAKoR,UAEbtW,KAAKurD,yBAGF1yC,EAAE8rC,QAEL3kD,KAAKkF,KAAKb,aAAa,mBAAoBrE,KAAKwrD,mBAC7C3yC,EAAS,QAAI,EAAIA,EAAE6rC,aAAe7rC,EAAEvG,SASzC0rC,cAAc5xC,UAAUm/C,uBAAyB,WAEhD,IAAI1yC,EAAI7Y,KAAK6R,MAQb,GALkB,MAAdgH,EAAEksC,UAAkC,SAAdlsC,EAAEksC,UAE3B/kD,KAAKkF,KAAKb,aAAa,kBAAmBwU,EAAEksC,UAG5B,MAAblsC,EAAEisC,QACN,CAEC,IAAI/8C,EAAQ8Q,EAAEisC,QAED,QAAT/8C,IAEHA,EAAQ,QAII,QAATA,GAEH/H,KAAKkF,KAAKb,aAAa,iBAAkB0D,GAKvB,MAAhB8Q,EAAEmsC,YAAwBhlD,KAAKi+C,cAAgC,IAAhBplC,EAAEmsC,YAEpDhlD,KAAKkF,KAAKb,aAAa,oBAAqBwU,EAAEmsC,aAShDhH,cAAc5xC,UAAUo/C,kBAAoB,SAASl5C,GAEpD,IAAIm5C,EAAM,GAEV,GAAuC,iBAA5BzrD,KAAK6R,MAAiB,YACjC,CACC,IAAIpE,EAAOzN,KAAK6R,MAAM+yC,YAAYr2C,MAAM,KAExC,GAAId,EAAKtL,OAAS,EAEjB,IAAK,IAAI0C,EAAI,EAAGA,EAAI4I,EAAKtL,OAAQ0C,IAEhC4mD,EAAI5mD,GAAKoa,OAAOxR,EAAK5I,IAAMyN,EAK9B,OAAOm5C,EAAIv8C,KAAK,MAQjB8uC,cAAc5xC,UAAU++C,gBAAkB,SAASjmD,GAElD,IAAIwmD,EAAMxmD,EAAKwpB,WAAU,GACrB48B,EAAK32C,WAAW+2C,EAAI/1C,aAAa,iBAAmB,GAAK3V,KAAKupD,gBAalE,OAZAmC,EAAIrnD,aAAa,iBAAkB,UACnCqnD,EAAIrnD,aAAa,aAAc,UAC/BqnD,EAAIC,gBAAgB,oBACpBD,EAAIrnD,aAAa,eAAgBinD,GACjCI,EAAIrnD,aAAa,OAAQ,QAMzBqnD,EAAIrnD,aAAa,SAAWnE,SAAc,MAAI,OAAS,SAEhDwrD,GAQR1N,cAAc5xC,UAAU8+C,aAAe,SAAShmD,GAE/C,IAAIkgD,EAASlgD,EAAKwpB,WAAU,GACxB7V,EAAI7Y,KAAK6R,MAiBb,MAdmC,QAA/BuzC,EAAOzvC,aAAa,SAAuBzV,SAASyC,OAAwC,eAA/ByiD,EAAOzvC,aAAa,SAEpFyvC,EAAO/gD,aAAa,OAAQwU,EAAEwsC,aAGM,QAAjCD,EAAOzvC,aAAa,WAEvByvC,EAAO/gD,aAAa,SAAUwU,EAAEwsC,aAGjCD,EAAO/gD,aAAa,YAAa,aAAerE,KAAK2lD,OAAO9sC,EAAE0sC,SAAW1sC,EAAEvG,OAC1E,IAAMtS,KAAK2lD,OAAO9sC,EAAE2sC,SAAW3sC,EAAEvG,OAAS,KAAOuG,EAAEoyC,WAAa,KACjE7F,EAAO/gD,aAAa,UAAWwU,EAAEysC,aAE1BF,GAQRpH,cAAc5xC,UAAU22C,QAAU,SAAS/+C,GAE1C,GAAY,MAARA,EAEHhE,KAAK89C,KAAO99C,KAAKorD,iBAGlB,CACCprD,KAAKorD,aAAeprD,KAAK89C,KAEzB,IAAI54C,EAAOlF,KAAKgB,cAAc,KAIH,MAAvBkE,EAAK0mD,gBAA2B5rD,KAAK89C,KAAK9iC,eAAiBna,UAAqC,MAAzBA,SAASC,aAEnFoE,EAAKb,aAAa,aAAcL,GAIhCkB,EAAK0mD,eAAej+C,YAAY8lB,SAAU,aAAczvB,GAGzDhE,KAAK89C,KAAKv5C,YAAYW,GACtBlF,KAAK89C,KAAO54C,IASd84C,cAAc5xC,UAAU45C,OAAS,SAASF,EAAOpgC,EAAOC,EAAOxC,EAAIiE,GAElE,GAAa,GAAT0+B,GAAcpgC,GAASC,EAC3B,CACC,IAAI9M,EAAI7Y,KAAK6R,MAWb,GAVAsR,GAAMtK,EAAEtG,GACR6U,GAAMvO,EAAEpG,GAER0Q,GAAMtK,EAAEvG,MACR8U,GAAMvO,EAAEvG,MAERuG,EAAEoyC,UAAYpyC,EAAEoyC,WAAa,GAIzBvlC,GAASC,EAEZmgC,GAAS,SAEL,GAAIpgC,GAASC,EAClB,CACC,IAAI9D,EAAK,EAAUsB,EAAK,EACpBzQ,EAAK,GAAW,EAAI,EAEpBoP,EAAK,EAAUsF,EAAK,EACpBzU,EAAK,GAAW,EAAI,EAExBkG,EAAEoyC,WAAa,aAAejrD,KAAK2lD,OAAO9jC,GAAM,IAAM7hB,KAAK2lD,OAAO7jC,GAAnD,UACH9hB,KAAK2lD,OAAOjzC,GAAM,IAAM1S,KAAK2lD,OAAOhzC,GADjC,cAEC3S,KAAK2lD,QAAQ9jC,GAAM,IAAM7hB,KAAK2lD,QAAQ7jC,GAAM,KAGzD4D,GAASC,EAAQA,KAEpBmgC,IAAU,GAGE,GAATA,IAEHjtC,EAAEoyC,WAAa,UAAYjrD,KAAK2lD,OAAOG,GAAS,IAAM9lD,KAAK2lD,OAAOxiC,GAAM,IAAMnjB,KAAK2lD,OAAOv+B,GAAM,KAGjGvO,EAAEqK,SAAWrK,EAAEqK,SAAW4iC,EAC1BjtC,EAAE4sC,WAAatiC,EACftK,EAAE6sC,WAAat+B,IASjB42B,cAAc5xC,UAAUw7C,MAAQ,WAE/BlK,mBAAmBtxC,UAAUw7C,MAAMx8C,MAAMpL,KAAMqL,WAC/CrL,KAAKkF,KAAOlF,KAAKgB,cAAc,SAQhCg9C,cAAc5xC,UAAUyD,KAAO,SAAST,EAAGC,EAAGvG,EAAGD,GAEhD,IAAIgQ,EAAI7Y,KAAK6R,MACTmR,EAAIhjB,KAAKgB,cAAc,QAC3BgiB,EAAE3e,aAAa,IAAKrE,KAAK2lD,QAAQv2C,EAAIyJ,EAAEtG,IAAMsG,EAAEvG,QAC/C0Q,EAAE3e,aAAa,IAAKrE,KAAK2lD,QAAQt2C,EAAIwJ,EAAEpG,IAAMoG,EAAEvG,QAC/C0Q,EAAE3e,aAAa,QAASrE,KAAK2lD,OAAO78C,EAAI+P,EAAEvG,QAC1C0Q,EAAE3e,aAAa,SAAUrE,KAAK2lD,OAAO98C,EAAIgQ,EAAEvG,QAE3CtS,KAAKkF,KAAO8d,GAQbg7B,cAAc5xC,UAAUm8C,UAAY,SAASn5C,EAAGC,EAAGvG,EAAGD,EAAG0J,EAAIE,GAE5DzS,KAAK6P,KAAKT,EAAGC,EAAGvG,EAAGD,GAEf0J,EAAK,GAERvS,KAAKkF,KAAKb,aAAa,KAAMrE,KAAK2lD,OAAOpzC,EAAKvS,KAAK6R,MAAMS,QAGtDG,EAAK,GAERzS,KAAKkF,KAAKb,aAAa,KAAMrE,KAAK2lD,OAAOlzC,EAAKzS,KAAK6R,MAAMS,SAS3D0rC,cAAc5xC,UAAUo8C,QAAU,SAASp5C,EAAGC,EAAGvG,EAAGD,GAEnD,IAAIgQ,EAAI7Y,KAAK6R,MACTmR,EAAIhjB,KAAKgB,cAAc,WAE3BgiB,EAAE3e,aAAa,KAAMrE,KAAK2lD,QAAQv2C,EAAItG,EAAI,EAAI+P,EAAEtG,IAAMsG,EAAEvG,QACxD0Q,EAAE3e,aAAa,KAAMrE,KAAK2lD,QAAQt2C,EAAIxG,EAAI,EAAIgQ,EAAEpG,IAAMoG,EAAEvG,QACxD0Q,EAAE3e,aAAa,KAAMyE,EAAI,EAAI+P,EAAEvG,OAC/B0Q,EAAE3e,aAAa,KAAMwE,EAAI,EAAIgQ,EAAEvG,OAC/BtS,KAAKkF,KAAO8d,GAQbg7B,cAAc5xC,UAAUinC,MAAQ,SAASjkC,EAAGC,EAAGvG,EAAGD,EAAG5D,EAAKwjD,EAAQ/iC,EAAOC,GAExE1gB,EAAMjF,KAAK29C,UAAUsB,QAAQh6C,GAG7BwjD,EAAoB,MAAVA,GAAkBA,EAC5B/iC,EAAkB,MAATA,GAAiBA,EAC1BC,EAAkB,MAATA,GAAiBA,EAE1B,IAAI9M,EAAI7Y,KAAK6R,MACbzC,GAAKyJ,EAAEtG,GACPlD,GAAKwJ,EAAEpG,GAEP,IAAIvN,EAAOlF,KAAKgB,cAAc,SAC9BkE,EAAKb,aAAa,IAAKrE,KAAK2lD,OAAOv2C,EAAIyJ,EAAEvG,OAAStS,KAAKspD,aACvDpkD,EAAKb,aAAa,IAAKrE,KAAK2lD,OAAOt2C,EAAIwJ,EAAEvG,OAAStS,KAAKspD,aACvDpkD,EAAKb,aAAa,QAASrE,KAAK2lD,OAAO78C,EAAI+P,EAAEvG,QAC7CpN,EAAKb,aAAa,SAAUrE,KAAK2lD,OAAO98C,EAAIgQ,EAAEvG,QAGnB,MAAvBpN,EAAK0mD,eAER1mD,EAAKb,aAAa,aAAcY,GAIhCC,EAAK0mD,eAAej+C,YAAY8lB,SAAU,aAAcxuB,GAGpDwjD,GAEJvjD,EAAKb,aAAa,sBAAuB,SAGtCwU,EAAE4O,MAAQ,GAAK5O,EAAEqrC,UAAY,IAEhCh/C,EAAKb,aAAa,UAAWwU,EAAE4O,MAAQ5O,EAAEqrC,WAG1C,IAAI18C,EAAKxH,KAAK6R,MAAMo5C,WAAa,GAEjC,GAAIvlC,GAASC,EACb,CACC,IAAIjT,EAAK,EACLC,EAAK,EACLJ,EAAK,EACLE,EAAK,EAELiT,IAEHhT,GAAM,EACNH,GAAMzJ,EAAI,EAAIsG,GAGXuW,IAEHhT,GAAM,EACNF,GAAM5J,EAAI,EAAIwG,GAIf7H,GAAM,SAAWkL,EAAK,IAAMC,EAAK,cAAiBJ,EAAKsG,EAAEvG,MAAS,IAAOG,EAAKoG,EAAEvG,MAAS,IAGtF9K,EAAGrF,OAAS,GAEf+C,EAAKb,aAAa,YAAamD,GAG3BxH,KAAK22C,eAETzxC,EAAKb,aAAa,iBAAkB,QAGrCrE,KAAK89C,KAAKv5C,YAAYW,IAQvB84C,cAAc5xC,UAAUy/C,YAAc,SAAS9xC,GAE9C,GAAI/Z,KAAKgpD,aACT,CACC,IAAI9kD,GAAM,IAAI2T,WAAYE,gBAAgBgC,EAAK,aAEpC,MAAP7V,IAKwB,UAH3B6V,GAAM,IAAIV,eAAgBC,kBAAkBpV,EAAIkD,OAGxC3B,UAAU,EAAG,KAEpBsU,EAAMA,EAAItU,UAAUsU,EAAIxZ,QAAQ,IAAK,GAAK,IAGM,WAA7CwZ,EAAItU,UAAUsU,EAAI5X,OAAS,EAAG4X,EAAI5X,UAErC4X,EAAMA,EAAItU,UAAU,EAAGsU,EAAI5X,OAAS,SAIlC,IAA+B,MAA3BtB,SAASwW,gBAAoE,MAA1CxW,SAASwW,eAAeC,eACpE,CACC,IAAIw0C,EAAKjrD,SAASwW,eAAeC,eAAe,+BAAgC,OAAQ,MACpFy0C,EAAKD,EAAG9qD,cAAc,QAC1B8qD,EAAGtoD,gBAAgBe,YAAYwnD,GAE/B,IAAI9+B,EAAMpsB,SAASG,cAAc,OACjCisB,EAAI3S,UAAYP,EAGhB,IAFA,IAAI9H,EAAQgb,EAAIrX,WAEA,MAAT3D,GACP,CACC,IAAIyG,EAAOzG,EAAM4D,YACjBk2C,EAAGxnD,YAAYunD,EAAGE,UAAU/5C,IAC5BA,EAAQyG,EAGT,OAAOqzC,EAAGzxC,UAIV,IAAI2xC,EAAKprD,SAASG,cAAc,YAKhCirD,EAAG3xC,UAAYP,EAAInL,QAAQ,SAAU,aACpCA,QAAQ,SAAU,YAAYA,QAAQ,SAAU,YAChDA,QAAQ,QAAS,YAAYA,QAAQ,QAAS,YAC9CA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QACrCmL,EAAMkyC,EAAGlkD,MAAM6G,QAAQ,KAAM,SAASA,QAAQ,YAAa,QAC1DA,QAAQ,YAAa,QAAQA,QAAQ,aAAc,SACnDA,QAAQ,QAAS,UAAUA,QAAQ,QAAS,UAC5CA,QAAQ,iBAAkB,SAG5B,OAAOmL,GAQRikC,cAAc5xC,UAAU8/C,UAAY,SAASp2C,GAE5C,IAAIiE,EAAMjE,EAQV,GANKxN,QAAQ+N,OAAO0D,KAEnBA,EAAM,aAAe/Z,KAAK6rD,YAAY9xC,GAAO,gBAIzC7Z,SAASE,OAAUF,SAASO,UAAWI,SAASsC,gBAuCpD,OARImF,QAAQ+N,OAAO0D,KAElBA,EAAM,aAAezR,QAAQ4Q,OAAOa,GAAO,gBAG5CA,EAAM,6CAA+CA,EAAM,SAGnDzR,QAAQsP,SAASmC,GAAKvW,gBArC9B,IAAIypB,EAAMpsB,SAASsC,gBAAgB,+BAAgC,OAEnE,GAAImF,QAAQ+N,OAAO0D,GACnB,CACC,IAAIoyC,EAAOtrD,SAASG,cAAc,OAC9BorD,EAAOD,EAAKz9B,WAAU,GAGtB1uB,KAAK89C,KAAK9iC,eAAiBna,SAE9BsrD,EAAK5nD,YAAYwV,EAAI2U,WAAU,IAI/By9B,EAAK5nD,YAAYwV,GAGlBqyC,EAAK7nD,YAAY4nD,GACjBl/B,EAAI1oB,YAAY6nD,QAIhBn/B,EAAI3S,UAAYP,EAGjB,OAAOkT,GAmBT+wB,cAAc5xC,UAAUigD,WAAa,SAASj9C,EAAGC,EAAGvG,EAAGD,EAAGujB,EAAOC,EAAQq8B,EAAM1zC,EAAU2zC,EAAMzlC,EAAUhe,GAE5F,MAARA,GAAmC,MAAnBA,EAAK0Q,YAAoD,MAA9B1Q,EAAK0Q,WAAWA,YAE9D5V,KAAKssD,gBAAgBl9C,EAAGC,EAAGvG,EAAGD,EAAGujB,EAAOC,EAAQq8B,EAAM1zC,EAAU2zC,EAAMzlC,EAAUhe,EAAK0Q,aASvFooC,cAAc5xC,UAAUmgD,iBAAmB,SAASn9C,EAAGC,EAAGvG,EAAGD,EAAGiN,EAAKsW,EAAOC,EAAQq8B,EAAM/C,EAAQ3wC,EAAU2zC,EAAMzlC,EAAU0lC,EAAK37B,EAAK6wB,GAErI,IAAI0O,EAAQxsD,KAAKgB,cAAc,KAC3BkpD,EAAKlqD,KAAKgB,cAAc,iBAkB5B,GAfAkpD,EAAG7lD,aAAa,QAAS,wCACzB6lD,EAAG7lD,aAAa,iBAAkB,QAG9B4oB,EAAIjS,eAAiBna,WAExBosB,EAAM3kB,QAAQyO,yBAAyBmzC,EAAGlvC,cAAeiS,GAAK,IAG/Di9B,EAAG3lD,YAAY0oB,GACfu/B,EAAMjoD,YAAY2lD,GAElBlqD,KAAKssD,gBAAgBl9C,EAAGC,EAAGvG,EAAGD,EAAGujB,EAAOC,EAAQq8B,EAAM1zC,EAAU2zC,EAAMzlC,EAAUspC,GAG5ExsD,KAAK89C,KAAK9iC,eAAiBna,SAC/B,CACC,IAAI08C,EAAMv9C,KAAKmqD,uBAAuBD,EAAI96C,EAAGC,EAAGvG,EAAGD,EAAGiN,EAAKsW,EAAOC,EAAQq8B,EAAM/C,EAAQ3wC,EAAU2zC,EAAMzlC,GAExG,GAAW,MAAPq6B,EACJ,CACC2M,EAAG7lD,aAAa,mBAAoB,oDACpC,IAAIinD,EAAKtrD,KAAKgB,cAAc,UAC5BsqD,EAAG/mD,YAAY2lD,GACfoB,EAAG/mD,YAAYg5C,GACfiP,EAAMjoD,YAAY+mD,IAIpBxN,EAAKv5C,YAAYioD,IAMlBxO,cAAc5xC,UAAUkgD,gBAAkB,SAASl9C,EAAGC,EAAGvG,EAAGD,EAAGujB,EAAOC,EAAQq8B,EAAM1zC,EAAU2zC,EAAMzlC,EAAUupC,GAE7G,IAAI5zC,EAAI7Y,KAAK6R,MAAMS,MAEnB0rC,cAAc0O,UAAU5jD,EAAI,EAAGD,EAAGujB,EAAOC,EAAQq8B,EAAM1zC,EAAU2zC,EAC7B,MAAlC3oD,KAAK6R,MAAMqzC,oBAA+BllD,KAAK6R,MAAMqzC,oBAAsB,KAC7C,MAA9BllD,KAAK6R,MAAMszC,gBAA2BnlD,KAAK6R,MAAMszC,gBAAkB,KACpE,uCACE94B,GAAU1e,YAAY6e,UAAa,aACnCH,GAAU1e,YAAY8e,aAAgB,WAAa,UAFrD,8BAG+BL,GAASze,YAAY2e,WAAc,aAChEF,GAASze,YAAY4e,YAAe,WAAa,UAAc,KACjEvsB,KAAK2sD,aAAc9zC,EAAGvQ,QAAQ2M,KAAKjV,MAAM,SAASuS,EAAIE,EAAIm6C,EAAMpM,EAAMqM,GAEtEz9C,GAAKpP,KAAK6R,MAAMU,GAChBlD,GAAKrP,KAAK6R,MAAMY,GAEhB,IAAIy3C,EAAKuC,EAAE72C,WACPqX,EAAMi9B,EAAGt0C,WACTk3C,EAAM7/B,EAAIrX,WACVvH,EAAOy+C,EAAIl3C,WACXmS,GAAM/nB,KAAe,WAAIA,KAAK6R,MAAMqR,SAAW,IAAmB,MAAZA,EAAoBA,EAAW,GACrFtS,GAAuB,GAAjB5Q,KAAKopD,SAAiB,aAAeppD,KAAKopD,SAAW,IAAMppD,KAAKopD,SAAW,IAAM,KACnF,GAALvwC,EAAU,SAAWA,EAAI,IAAM,IAElCxK,EAAKhK,aAAa,QAASwoD,GAC3BC,EAAIzoD,aAAa,QAASm8C,GAG1B0J,EAAG7lD,aAAa,QAAS+E,KAAKgZ,KAAK,EAAIhZ,KAAK2G,IAAI,EAAG8I,GAAK,KAAO,KAC/DqxC,EAAG7lD,aAAa,SAAU+E,KAAKgZ,KAAK,EAAIhZ,KAAK2G,IAAI,EAAG8I,GAAK,KAAO,KAChE,IAAIk0C,EAAK3jD,KAAK2c,MAAM1W,EAAIoD,GAUpBs6C,EAAK,EAER7C,EAAG7lD,aAAa,IAAK0oD,IAIrB7C,EAAGyB,gBAAgB,KACnBiB,GAAQ,gBAAkBG,EAAK,QAGhC9/B,EAAI5oB,aAAa,QAASuoD,EAAO,gBAAkBxjD,KAAK2c,MAAM3W,EAAImD,GAAM,OAK/D,KAJT3B,GAAY,GAALmX,EAAW,UAAYA,EAAI,IAAM3Y,EAAI,IAAMC,EAAI,IAAO,IAM5Do9C,EAAEpoD,aAAa,YAAauM,GAI5B67C,EAAEd,gBAAgB,aAGK,GAApB3rD,KAAK6R,MAAM4V,MAEdglC,EAAEpoD,aAAa,UAAWrE,KAAK6R,MAAM4V,OAIrCglC,EAAEd,gBAAgB,gBAQrB3N,cAAc0O,UAAY,SAAS5jD,EAAGD,EAAGujB,EAAOC,EAAQq8B,EAAM1zC,EAAU2zC,EAAMqE,EAAI39B,EAAQu9B,EAAMC,EAAOh0C,EAAGjU,GAEzG,IAAI47C,EAAO,sDAAyDp0B,GAASze,YAAY2e,WAAc,OACpGF,GAASze,YAAY4e,YAAe,QAAU,UAAa,KAC1D9I,EAAKnb,QAAQ6jB,oBAAoBC,EAAOC,GACxC4gC,EAAM,qBACNC,EAAK,eACLC,EAAK,gBACL56C,EAAKkR,EAAGrU,EAAItG,EACZ2J,EAAKgR,EAAGpU,EAAIxG,EAEZ8/C,GAEHuE,EAAK,UAAY9jD,KAAK2c,MAAMjd,GAAK,OACjC03C,GAAQ,eAAiBp3C,KAAK2c,MAAMld,GAAK,OACzC4J,EAAK,GAEe,QAAZuC,GAIR63C,GAAS,8BACTrM,IAHA0M,EAAK,UAAY9jD,KAAK2c,MAAMjd,GAAK,SACjCqkD,EAAK,WAAa/jD,KAAK2c,MAAMld,GAAK,SAId,SAAZmM,GAGR63C,GAAS,gBACTrM,GAFA0M,EAAK,UAAY9jD,KAAK2c,MAAMjd,GAAK,OAGjC2J,EAAK,EAED5J,EAAI,IAEP23C,GAAQ,eAAiBp3C,KAAK2c,MAAMld,GAAK,UAK1CokD,EAAM,GACNx6C,EAAK,GAGN,IAAI26C,EAAM,GAEA,MAANJ,IAEHI,GAAO,qBAAuBJ,EAAK,MAGtB,MAAV39B,IAEH+9B,GAAO,qBAAuB/9B,EAAS,MAG7B,IAAP49B,GAAatE,EAEhBkE,GAASO,EAIT5M,GAAQ4M,EAGL1E,GAAQ5/C,EAAI,GAEf+jD,GAAS,mCAAqCl/C,YAAYmpB,UAAY,KACtEo2B,EAAK,UAAY9jD,KAAK2c,MAAMjd,GAAK,OAEtB,IAAPmkD,GAAyB,QAAZj4C,IAEhBvC,EAAK,KAKNo6C,GAAS,wBAEE,IAAPI,IAEH16C,EAAK,IAIP3N,EAAS2N,EAAIE,EAAIm6C,EAAOM,EAAKC,EAAI3M,EAAOyM,EAAKJ,EAAOI,IAQrDjP,cAAc5xC,UAAUugD,WAAa,WAEpC,IAAI9zC,EAAI7Y,KAAK6R,MACTw7C,EAAM1/C,YAAgC,qBAAKkL,EAAE8T,SAAWhf,YAAYwf,YAAe,KACrFxf,YAAYwf,YAAcntB,KAAK0pD,qBAC7B4D,EAAM,qCAAuCz0C,EAAE8T,SAAzC,oBACS9T,EAAE+T,WAAa,YAAc/T,EAAEosC,UAAY,kBAAoBoI,EACjF,sBAAyBrtD,KAAkB,cAAIA,KAAK2pD,mBAAqB,QAAU,MAE/E9wC,EAAEiU,UAAYnf,YAAYyf,YAAczf,YAAYyf,YAExDkgC,GAAO,wBAGHz0C,EAAEiU,UAAYnf,YAAY2f,cAAgB3f,YAAY2f,cAE1DggC,GAAO,wBAGR,IAAIC,EAAO,GAiBX,OAfK10C,EAAEiU,UAAYnf,YAAY6f,iBAAmB7f,YAAY6f,gBAE7D+/B,EAAK3gD,KAAK,cAGNiM,EAAEiU,UAAYnf,YAAY8f,qBAAuB9f,YAAY8f,oBAEjE8/B,EAAK3gD,KAAK,gBAGP2gD,EAAKprD,OAAS,IAEjBmrD,GAAO,oBAAsBC,EAAKr+C,KAAK,KAAO,MAGxCo+C,GAWRtP,cAAc5xC,UAAUiC,KAAO,SAASe,EAAGC,EAAGvG,EAAGD,EAAGiN,EAAKsW,EAAOC,EAAQq8B,EAAM/C,EAAQ3wC,EAAU2zC,EAAMzlC,EAAU0lC,GAE/G,GAAI5oD,KAAKooD,aAAsB,MAAPtyC,EAIvB,GAFAoN,EAAwB,MAAZA,EAAoBA,EAAW,EAEvCljB,KAAKkpD,WAAuB,QAAVvD,EACtB,CACC,IAAI14B,EAAMjtB,KAAKksD,UAAUp2C,GAGd,MAAPmX,IAEQ,MAAP27B,GAEH37B,EAAI5oB,aAAa,MAAOukD,GAGzB5oD,KAAKusD,iBAAiBn9C,EAAGC,EAAGvG,EAAGD,EAAGiN,EAAKsW,EAAOC,EAAQq8B,EACrD/C,EAAQ3wC,EAAU2zC,EAAMzlC,EAAU0lC,EAAK37B,EAAKjtB,KAAK89C,YAKnD99C,KAAKwtD,UAAUp+C,EAAIpP,KAAK6R,MAAMU,GAAIlD,EAAIrP,KAAK6R,MAAMY,GAAI3J,EAAGD,EAAGiN,EAC1DsW,EAAOC,EAAQq8B,EAAM1zC,EAAU2zC,EAAMzlC,EAAU0lC,IAUnD5K,cAAc5xC,UAAUqhD,WAAa,SAASr+C,EAAGC,EAAGvG,EAAGD,GAatD,IANA,IAAI1E,EAAK,YALTiL,EAAIhG,KAAK2c,MAAM3W,IAKW,KAJ1BC,EAAIjG,KAAK2c,MAAM1W,IAIqB,KAHpCvG,EAAIM,KAAK2c,MAAMjd,IAG+B,KAF9CD,EAAIO,KAAK2c,MAAMld,IAIX+C,EAAU,EACViF,EAAM1M,EAAK,IAAMyH,EAGkB,MAAhC/K,SAAS4pD,eAAe55C,IAE9BA,EAAM1M,EAAK,OAASyH,EAGrB+8C,KAAO3oD,KAAKgB,cAAc,YAC1B2nD,KAAKtkD,aAAa,KAAMwM,GAExB,IAAIhB,EAAO7P,KAAKgB,cAAc,QAQ9B,OAPA6O,EAAKxL,aAAa,IAAK+K,GACvBS,EAAKxL,aAAa,IAAKgL,GACvBQ,EAAKxL,aAAa,QAASyE,GAC3B+G,EAAKxL,aAAa,SAAUwE,GAE5B8/C,KAAKpkD,YAAYsL,GAEV84C,MASR3K,cAAc5xC,UAAUohD,UAAY,SAASp+C,EAAGC,EAAGvG,EAAGD,EAAGiN,EAAKsW,EAAOC,EAAQq8B,EAAM1zC,EAAU2zC,EAAMzlC,EAAU0lC,GAE5G1lC,EAAwB,MAAZA,EAAoBA,EAAW,EAC3C,IAAIrK,EAAI7Y,KAAK6R,MACTgc,EAAOhV,EAAE8T,SACTznB,EAAOlF,KAAKgB,cAAc,KAC1BwG,EAAKqR,EAAEoyC,WAAa,GAcxB,GAbAjrD,KAAK0tD,WAAWxoD,GAGA,GAAZge,IAEH1b,GAAM,UAAY0b,EAAY,IAAMljB,KAAK2lD,OAAOv2C,EAAIyJ,EAAEvG,OAAS,IAAMtS,KAAK2lD,OAAOt2C,EAAIwJ,EAAEvG,OAAS,KAGtF,MAAPs2C,GAEH1jD,EAAKb,aAAa,YAAaukD,GAG5BD,GAAQ7/C,EAAI,GAAKD,EAAI,EACzB,CACC,IAAIsa,EAAK/T,EACLgY,EAAK/X,EAEL+c,GAASze,YAAYwyB,aAExBhd,GAAMra,EAAI,EAEFsjB,GAASze,YAAY4e,cAE7BpJ,GAAMra,GAGS,QAAZkM,IAECqX,GAAU1e,YAAYyyB,aAEzBhZ,GAAMve,EAAI,EAEFwjB,GAAU1e,YAAY8e,eAE9BrF,GAAMve,IAKR,IAAIoG,EAAIjP,KAAKytD,WAAWtqC,EAAKtK,EAAEvG,MAAQ,EAAG8U,EAAKvO,EAAEvG,MAAQ,EAAGxJ,EAAI+P,EAAEvG,MAAQ,EAAGzJ,EAAIgQ,EAAEvG,MAAQ,GAY3F,GAViB,MAAbtS,KAAKm+C,KAERn+C,KAAKm+C,KAAK55C,YAAY0K,GAKtBjP,KAAK89C,KAAKv5C,YAAY0K,GAGlB/O,SAASqC,cAAiBrC,SAASE,OAAUF,SAASO,SACzDP,SAASS,SAAWX,KAAK89C,KAAK9iC,eAAiBna,SAQhDqE,EAAKb,aAAa,YAAa,QAAU4K,EAAE0G,aAAa,MAAQ,SAPjE,CAEC,IAAIgb,EAAO3wB,KAAK4+C,aAAahwC,QAAQ,YAAa,QAClD1J,EAAKb,aAAa,YAAa,OAASssB,EAAO,IAAM1hB,EAAE0G,aAAa,MAAQ,MAS9E,IAAIy0C,EAAUh+B,GAASze,YAAY4e,YAAe,MAC7CH,GAASze,YAAYwyB,aAAgB,SACtC,QAGU,SAAViqB,GAEHllD,EAAKb,aAAa,cAAe+lD,GAG7BpqD,KAAKi+C,cAAgBpwB,GAAQlgB,YAAYof,kBAE7C7nB,EAAKb,aAAa,YAAcwpB,EAAOhV,EAAEvG,MAAS,MAG/C9K,EAAGrF,OAAS,GAEf+C,EAAKb,aAAa,YAAamD,GAG5BqR,EAAE4O,MAAQ,GAEbviB,EAAKb,aAAa,UAAWwU,EAAE4O,OAGhC,IAAInZ,EAAQwH,EAAIvH,MAAM,MAClB8+C,EAAKjkD,KAAK2c,MAAM8H,EAAOlgB,YAAYwf,aACnCwgC,EAAa9/B,GAAQvf,EAAMnM,OAAS,GAAKkrD,EAEzCjmC,EAAK/X,EAAIwe,EAAO,EAEhBxB,GAAU1e,YAAYyyB,aAIxBhZ,GAFe,QAAZpS,EAEGnM,EAAI,GAIC7I,KAAKipD,oBAAsBN,GAAQ9/C,EAAI,EAAKO,KAAK2G,IAAI49C,EAAY9kD,GAAK8kD,GAAc,EAIxFthC,GAAU1e,YAAY8e,eAI7BrF,GAFe,QAAZpS,EAEGnM,GAII7I,KAAKipD,oBAAsBN,GAAQ9/C,EAAI,EAAKO,KAAK2G,IAAI49C,EAAY9kD,GAAK8kD,GACrE,GAIb,IAAK,IAAI9oD,EAAI,EAAGA,EAAIyJ,EAAMnM,OAAQ0C,IAClC,CAEC,GAAIyJ,EAAMzJ,GAAG1C,OAAS,GAAKmG,QAAQyN,KAAKzH,EAAMzJ,IAAI1C,OAAS,EAC3D,CACC,IAAIkM,EAAOrO,KAAKgB,cAAc,QAE9BqN,EAAKhK,aAAa,IAAKrE,KAAK2lD,OAAOv2C,EAAIyJ,EAAEvG,OAAStS,KAAKqpD,YACvDh7C,EAAKhK,aAAa,IAAKrE,KAAK2lD,OAAOv+B,EAAKvO,EAAEvG,OAAStS,KAAKqpD,YAExD/gD,QAAQlE,MAAMiK,EAAMC,EAAMzJ,IAC1BK,EAAKX,YAAY8J,GAGlB+Y,GAAMimC,EAGPrtD,KAAK89C,KAAKv5C,YAAYW,GACtBlF,KAAK4tD,kBAAkB1oD,EAAM4Q,EAAK1G,EAAGC,EAAGvG,EAAgB,QAAZkM,EAAsBnM,EAAI8kD,EAAYvhC,EAAOC,EAAQrX,IASlGgpC,cAAc5xC,UAAUshD,WAAa,SAASxoD,GAE7C,IAAI2T,EAAI7Y,KAAK6R,MAEb3M,EAAKb,aAAa,OAAQwU,EAAEosC,WAEvBjlD,KAAKi+C,cAAgBplC,EAAE+T,YAAcjf,YAAYqf,oBAErD9nB,EAAKb,aAAa,cAAewU,EAAE+T,aAG/B/T,EAAEiU,UAAYnf,YAAYyf,YAAczf,YAAYyf,WAExDloB,EAAKb,aAAa,cAAe,SAG7BwU,EAAEiU,UAAYnf,YAAY2f,cAAgB3f,YAAY2f,aAE1DpoB,EAAKb,aAAa,aAAc,UAGjC,IAAIkpB,EAAW,IAEV1U,EAAEiU,UAAYnf,YAAY6f,iBAAmB7f,YAAY6f,gBAE7DD,EAAS3gB,KAAK,cAGViM,EAAEiU,UAAYnf,YAAY8f,qBAAuB9f,YAAY8f,oBAEjEF,EAAS3gB,KAAK,gBAGX2gB,EAASprB,OAAS,GAErB+C,EAAKb,aAAa,kBAAmBkpB,EAASre,KAAK,OASrD8uC,cAAc5xC,UAAUwhD,kBAAoB,SAAS1oD,EAAM4Q,EAAK1G,EAAGC,EAAGvG,EAAGD,EAAGujB,EAAOC,EAAQrX,GAE1F,IAAI6D,EAAI7Y,KAAK6R,MAEb,GAA6B,MAAzBgH,EAAEqsC,qBAAoD,MAArBrsC,EAAEssC,gBACvC,CACC,IAAI0I,EAAO,KAEX,GAAgB,QAAZ74C,GAAkC,SAAZA,EAErBoX,GAASze,YAAYwyB,aAExB/wB,GAAKtG,EAAI,EAEDsjB,GAASze,YAAY4e,cAE7Bnd,GAAKtG,GAGFujB,GAAU1e,YAAYyyB,aAEzB/wB,GAAKxG,EAAI,EAEDwjB,GAAU1e,YAAY8e,eAE9Bpd,GAAKxG,GAGNglD,EAAO,IAAIv+C,aAAaF,EAAI,GAAKyJ,EAAEvG,MAAOjD,EAAIwJ,EAAEvG,OAAQxJ,EAAI,GAAK+P,EAAEvG,OAAQzJ,EAAI,GAAKgQ,EAAEvG,YAElF,GAAoB,MAAhBpN,EAAK4oD,SAAmB9tD,KAAK89C,KAAK9iC,eAAiBna,SAG3D,IAECgtD,EAAO3oD,EAAK4oD,UACZ,IAAIC,EAAK7tD,SAASE,OAASF,SAAS+C,OACpC4qD,EAAO,IAAIv+C,YAAYu+C,EAAKz+C,EAAGy+C,EAAKx+C,GAAK,EAAO,EAAI,GAAIw+C,EAAK5lD,MAAO4lD,EAAKhmD,QAAU,EAAO,EAAI,IAE/F,MAAOuG,QAMR,CAEC,IAAI6e,EAAMpsB,SAASG,cAAc,OAGjCisB,EAAIvlB,MAAMwlB,WAAcvf,YAAgC,qBAAKkL,EAAE8T,SAAWhf,YAAYwf,YAAe,KAAOxf,YAAYwf,YACxHF,EAAIvlB,MAAMilB,SAAW9T,EAAE8T,SAAW,KAClCM,EAAIvlB,MAAMklB,WAAa/T,EAAE+T,WACzBK,EAAIvlB,MAAMkmB,WAAa,SACvBX,EAAIvlB,MAAMogB,SAAW,WACrBmF,EAAIvlB,MAAM6D,WAAa,SACvB0hB,EAAIvlB,MAAMgmB,QAAWxtB,SAAkB,UAAI,SAAW,eACtD+sB,EAAIvlB,MAAMimB,KAAO,KAEZ9U,EAAEiU,UAAYnf,YAAYyf,YAAczf,YAAYyf,YAExDH,EAAIvlB,MAAM2lB,WAAa,SAGnBxU,EAAEiU,UAAYnf,YAAY2f,cAAgB3f,YAAY2f,cAE1DL,EAAIvlB,MAAMolB,UAAY,UAGvBhX,EAAMxN,QAAQsQ,aAAa9C,GAAK,GAChCmX,EAAI3S,UAAYxE,EAAIlH,QAAQ,MAAO,SAEnC/N,SAASuG,KAAK7C,YAAY0oB,GACtBnkB,EAAImkB,EAAItQ,YACR9T,EAAIokB,EAAIljB,aACZkjB,EAAIpZ,WAAWC,YAAYmZ,GAEvBb,GAASze,YAAYwyB,aAExB/wB,GAAKtG,EAAI,EAEDsjB,GAASze,YAAY4e,cAE7Bnd,GAAKtG,GAGFujB,GAAU1e,YAAYyyB,aAEzB/wB,GAAKxG,EAAI,EAEDwjB,GAAU1e,YAAY8e,eAE9Bpd,GAAKxG,GAGNglD,EAAO,IAAIv+C,aAAaF,EAAI,GAAKyJ,EAAEvG,OAAQjD,EAAI,GAAKwJ,EAAEvG,MAAOxJ,EAAI+P,EAAEvG,OAAQzJ,EAAI,GAAKgQ,EAAEvG,OAGvF,GAAY,MAARu7C,EACJ,CACC,IAAI7qC,EAAIhjB,KAAKgB,cAAc,QAC3BgiB,EAAE3e,aAAa,OAAQwU,EAAEqsC,qBAAuB,QAChDliC,EAAE3e,aAAa,SAAUwU,EAAEssC,iBAAmB,QAC9CniC,EAAE3e,aAAa,IAAK+E,KAAKmnB,MAAMs9B,EAAKz+C,EAAI,IACxC4T,EAAE3e,aAAa,IAAK+E,KAAKmnB,MAAMs9B,EAAKx+C,EAAI,IACxC2T,EAAE3e,aAAa,QAAS+E,KAAKgZ,KAAKyrC,EAAK5lD,MAAQ,IAC/C+a,EAAE3e,aAAa,SAAU+E,KAAKgZ,KAAKyrC,EAAKhmD,SAExC,IAAIyjD,EAA2B,MAArBzyC,EAAEssC,gBAA2B/7C,KAAKC,IAAI,EAAGrJ,KAAK2lD,OAAO9sC,EAAEvG,QAAU,EAC3E0Q,EAAE3e,aAAa,eAAgBinD,GAG3BtrD,KAAK89C,KAAK9iC,eAAiBna,UAAkC,GAAtByH,QAAQ4gB,IAAIoiC,EAAI,IAE1DtoC,EAAE3e,aAAa,YAAa,uBAG7Ba,EAAKsuC,aAAaxwB,EAAG9d,EAAK0Q,eAU7BooC,cAAc5xC,UAAUy8C,OAAS,WAEhC7oD,KAAK4qD,SAAQ,GAAO,IAQrB5M,cAAc5xC,UAAU08C,KAAO,WAE9B9oD,KAAK4qD,SAAQ,GAAM,IAQpB5M,cAAc5xC,UAAU28C,cAAgB,WAEvC/oD,KAAK4qD,SAAQ,GAAM,IAGpB3qD,WAAW+9C,mBAAyC,IAAlBA,cAAgCA,mBAAgBp3C,EAqClF,IAAIonD,cAAgB,SAASlQ,GAE5BJ,mBAAmBnuC,KAAKvP,MAOxBA,KAAK89C,KAAOA,GAkjCb,SAAS1G,QAAQnmC,EAAOsyC,GAEvBvjD,KAAKiR,MAAQA,EACbjR,KAAKiuD,UAAU1K,GAkfhB,SAASL,QAAQgL,GAEhBluD,KAAKkuD,QAAUA,EACfluD,KAAKmuD,aAqwDN,SAASC,UAAUC,GAElBruD,KAAKquD,KAAOA,EACZruD,KAAKsuD,mBACLtuD,KAAKuuD,mBA7yGNjmD,QAAQoX,OAAOsuC,cAAetQ,oBAO9BsQ,cAAc5hD,UAAUlH,KAAO,KAO/B8oD,cAAc5hD,UAAUg8C,aAAc,EAOtC4F,cAAc5hD,UAAUw3C,OAAS,IAOjCoK,cAAc5hD,UAAUy3C,OAAS,IAOjCmK,cAAc5hD,UAAU23C,QAAU,IAOlCiK,cAAc5hD,UAAU43C,QAAU,IAQlCgK,cAAc5hD,UAAUoiD,sBAAwB,GAOhDR,cAAc5hD,UAAUqiD,SAAW,EAOnCT,cAAc5hD,UAAUpL,cAAgB,SAASjB,GAEhD,OAAOc,SAASG,cAAcjB,IAS/BiuD,cAAc5hD,UAAUsiD,iBAAmB,SAAS3uD,GAEnD,OAAOC,KAAKgB,cAAcd,SAASe,WAAa,IAAMlB,IAQvDiuD,cAAc5hD,UAAUw+C,QAAU,SAASC,EAAQC,GAElD,IAAI5lD,EAAOlF,KAAKkF,KACZ2T,EAAI7Y,KAAK6R,MAEb,GAAY,MAAR3M,EACJ,CACC,GAAqB,SAAjBA,EAAKoR,SACT,CAEC,KAAiB,MAAbtW,KAAKwjD,MAAgBxjD,KAAKwjD,KAAKrhD,OAAS,GAS3C,OAPA+C,EAAKs+C,KAAOxjD,KAAKwjD,KAAKt0C,KAAK,KAAO,KAClChK,EAAKwC,MAAMO,MAAQjI,KAAK89C,KAAKp2C,MAAMO,MACnC/C,EAAKwC,MAAMG,OAAS7H,KAAK89C,KAAKp2C,MAAMG,OACpC3C,EAAKypD,UAAYvsD,SAAS8C,EAAKwC,MAAMO,OAAS,IAAM7F,SAAS8C,EAAKwC,MAAMG,QAQ1E3C,EAAK0pD,aAAe5uD,KAAK2lD,OAAOv8C,KAAKC,IAAI,EAAGwP,EAAE6rC,YAAc7rC,EAAEvG,MAAQtS,KAAKyuD,WAAa,KAEpF51C,EAAEusC,QAELplD,KAAK89C,KAAKv5C,YAAYvE,KAAKkrD,aAAahmD,EACvC2lD,GAAyB,MAAfhyC,EAAEurC,UACZ0G,GAA4B,MAAjBjyC,EAAE4rC,cAGXqG,GAA4B,MAAjBjyC,EAAE4rC,aAEhBv/C,EAAK4lD,QAAU,OACf5lD,EAAK2pD,YAAch2C,EAAE4rC,aAIrBv/C,EAAK4lD,QAAU,QAGhB5lD,EAAKX,YAAYvE,KAAK8uD,gBAElBjE,GAAyB,MAAfhyC,EAAEurC,UAEfl/C,EAAKX,YAAYvE,KAAK+uD,eAEd/uD,KAAK22C,eAAmC,SAAjBzxC,EAAKoR,UACpCtW,KAAKwjD,KAAKxjD,KAAKwjD,KAAKrhD,OAAS,IAAMnC,KAAKgkD,QAMxC9+C,EAAK2lD,OAAS,QAJd3lD,EAAKX,YAAYvE,KAAKgvD,yBAQvBhvD,KAAK89C,KAAKv5C,YAAYW,KASxB8oD,cAAc5hD,UAAU4iD,sBAAwB,WAE/C,IAAIlG,EAAO9oD,KAAK0uD,iBAAiB,QAIjC,OAHA5F,EAAK7jD,IAAM/E,SAAS0F,cAAgB,mBACpCkjD,EAAKxiD,KAAO,OAELwiD,GAQRkF,cAAc5hD,UAAU2iD,WAAa,WAEpC,IAAIl2C,EAAI7Y,KAAK6R,MAITi3C,EAAO9oD,KAAK0uD,iBAAiB,QAGjC,GAFA5F,EAAK7sC,MAAQpD,EAAEurC,UAEQ,MAAnBvrC,EAAEyrC,cACN,CACCwE,EAAKxiD,KAAO,WACZwiD,EAAKzb,OAAS,OACdyb,EAAKvC,OAAS1tC,EAAEyrC,cAChB,IAAIjkC,EAAQ,IAAMxH,EAAEqK,SAEhBrK,EAAE2rC,mBAAqB72C,YAAYkX,eAEtCxE,GAAS,IAA+B,KAAxBrgB,KAAK89C,KAAKp2C,MAAMunD,KAAe,IAAM,GAE7Cp2C,EAAE2rC,mBAAqB72C,YAAYoX,eAE3C1E,GAAS,IAA+B,KAAxBrgB,KAAK89C,KAAKp2C,MAAMunD,KAAe,IAAM,GAE7Cp2C,EAAE2rC,mBAAqB72C,YAAY6W,gBAE3CnE,GAAS,KAAgC,KAAxBrgB,KAAK89C,KAAKp2C,MAAMunD,MAAgB,IAAM,GAItD5uC,GAAmC,KAAxBrgB,KAAK89C,KAAKp2C,MAAMunD,MAAgB,IAAM,EAGvB,KAAxBjvD,KAAK89C,KAAKp2C,MAAMunD,MAAuC,KAAxBjvD,KAAK89C,KAAKp2C,MAAMunD,OAElD5uC,IAAU,GAIXyoC,EAAKzoC,MAAQ/X,QAAQ4gB,IAAI7I,EAAO,KAChCyoC,EAAK71C,QAAW4F,EAAE4O,MAAQ5O,EAAEwrC,kBAAoB,IAAO,IACvDyE,EAAKzkD,aAAanE,SAASgB,cAAgB,YAAc2X,EAAE4O,MAAQ5O,EAAE0rC,cAAgB,IAAO,UAEpF1rC,EAAE4O,MAAQ,GAAK5O,EAAEqrC,UAAY,KAErC4E,EAAK71C,QAAW4F,EAAE4O,MAAQ5O,EAAEqrC,UAAY,IAAO,KAGhD,OAAO4E,GAORkF,cAAc5hD,UAAU0iD,aAAe,WAEtC,IAAIj2C,EAAI7Y,KAAK6R,MACTg3C,EAAS7oD,KAAK0uD,iBAAiB,UAenC,OAdA7F,EAAOqG,OAASr2C,EAAEisC,SAAW,OAC7B+D,EAAOsG,UAAYt2C,EAAEksC,UAAY,QACjC8D,EAAOuG,WAAav2C,EAAEmsC,YAAc,MAEhCnsC,EAAE4O,MAAQ,GAAK5O,EAAEsrC,YAAc,KAElC0E,EAAO51C,QAAW4F,EAAE4O,MAAQ5O,EAAEsrC,YAAc,IAAO,KAGhDtrC,EAAE8rC,SAELkE,EAAOwG,UAAYrvD,KAAKsvD,mBAGlBzG,GASRmF,cAAc5hD,UAAUkjD,gBAAkB,WAEzC,IAAI3iD,EAAS,OAEb,GAAuC,iBAA5B3M,KAAK6R,MAAiB,YACjC,CACC,IAAI09C,EAAMvvD,KAAK6R,MAAM+yC,YAAYr2C,MAAM,KAEnCghD,EAAIptD,OAAS,GAAe,GAAVotD,EAAI,KAEzB5iD,EAAS,OAIX,OAAOA,GAQRqhD,cAAc5hD,UAAU8+C,aAAe,SAAShmD,EAAM2lD,EAAQC,GAE7D,IAAIjyC,EAAI7Y,KAAK6R,MACToO,GAAOpH,EAAEqK,UAAY9Z,KAAK2W,GAAK,KAC/BgB,EAAM3X,KAAK2X,IAAId,GACfgB,EAAM7X,KAAK6X,IAAIhB,GAEf1N,EAAKsG,EAAE0sC,SAAW1sC,EAAEvG,MACpBG,EAAKoG,EAAE2sC,SAAW3sC,EAAEvG,MAEI,KAAxBtS,KAAK89C,KAAKp2C,MAAMunD,KAEnB18C,IAAO,EAEyB,KAAxBvS,KAAK89C,KAAKp2C,MAAMunD,OAExBx8C,IAAO,GAGR,IAAI2yC,EAASlgD,EAAKwpB,WAAU,GAqC5B,OApCA02B,EAAO19C,MAAM+qC,WAAarpC,KAAK2c,MAAMxT,EAAKwO,EAAMtO,EAAKwO,GAAO,KAC5DmkC,EAAO19C,MAAM6rC,UAAYnqC,KAAK2c,MAAMxT,EAAK0O,EAAMxO,EAAKsO,GAAO,KAG9B,GAAzBlgB,SAASC,eAEZskD,EAAOwJ,aAAe1pD,EAAK0pD,aAEN,SAAjB1pD,EAAKoR,WAER8uC,EAAO5B,KAAOxjD,KAAKwjD,KAAKt0C,KAAK,KAAO,KACpCk2C,EAAO19C,MAAMO,MAAQjI,KAAK89C,KAAKp2C,MAAMO,MACrCm9C,EAAO19C,MAAMG,OAAS7H,KAAK89C,KAAKp2C,MAAMG,OACtCu9C,EAAOuJ,UAAYvsD,SAAS8C,EAAKwC,MAAMO,OAAS,IAAM7F,SAAS8C,EAAKwC,MAAMG,UAIxEijD,GAEH1F,EAAOyJ,YAAch2C,EAAEwsC,YACvBD,EAAO7gD,YAAYvE,KAAKwvD,uBAIxBpK,EAAO0F,QAAU,QAGdD,EAEHzF,EAAO7gD,YAAYvE,KAAKyvD,oBAIxBrK,EAAOyF,OAAS,QAGVzF,GAQR4I,cAAc5hD,UAAUqjD,iBAAmB,WAE1C,IAAI3G,EAAO9oD,KAAK0uD,iBAAiB,QAIjC,OAHA5F,EAAK7sC,MAAQjc,KAAK6R,MAAMwzC,YACxByD,EAAK71C,QAAWjT,KAAK6R,MAAM4V,MAAQznB,KAAK6R,MAAMyzC,YAAc,IAAO,IAE5DwD,GAQRkF,cAAc5hD,UAAUojD,mBAAqB,WAE5C,IAAI3G,EAAS7oD,KAAK8uD,eAGlB,OAFAjG,EAAO51C,QAAWjT,KAAK6R,MAAM4V,MAAQznB,KAAK6R,MAAMyzC,YAAc,IAAO,IAE9DuD,GAQRmF,cAAc5hD,UAAU45C,OAAS,SAASF,EAAOpgC,EAAOC,EAAOxC,EAAIiE,GAE9D1B,GAASC,EAEZmgC,GAAS,IAEDpgC,EAER1lB,KAAK89C,KAAKp2C,MAAMunD,KAAO,IAEftpC,IAER3lB,KAAK89C,KAAKp2C,MAAMunD,KAAO,MAGpBvpC,GAASC,EAAQA,KAEpBmgC,IAAU,GAGX9lD,KAAK89C,KAAKp2C,MAAMwb,SAAW4iC,EAC3B9lD,KAAK6R,MAAMqR,SAAWljB,KAAK6R,MAAMqR,SAAW4iC,EAC5C9lD,KAAK6R,MAAM4zC,WAAatiC,EACxBnjB,KAAK6R,MAAM6zC,WAAat+B,GAQzB4mC,cAAc5hD,UAAUw7C,MAAQ,WAE/BlK,mBAAmBtxC,UAAUw7C,MAAMx8C,MAAMpL,KAAMqL,WAC/CrL,KAAKkF,KAAOlF,KAAK0uD,iBAAiB,SAClC1uD,KAAKkF,KAAKwC,MAAMogB,SAAW,YAQ5BkmC,cAAc5hD,UAAU27C,OAAS,SAAS5+B,EAAIzF,EAAId,EAAIC,GAErD,IAAIhK,EAAI7Y,KAAK6R,MAET69C,GAAQ1vD,KAAK0jD,MAAQ7qC,EAAEtG,IAAMsG,EAAEvG,MAC/Bq9C,GAAQ3vD,KAAK2jD,MAAQ9qC,EAAEpG,IAAMoG,EAAEvG,MAC/Bs9C,GAAQzmC,EAAKtQ,EAAEtG,IAAMsG,EAAEvG,MACvBu9C,GAAQnsC,EAAK7K,EAAEpG,IAAMoG,EAAEvG,MACvBw9C,GAAQltC,EAAK/J,EAAEtG,IAAMsG,EAAEvG,MACvBy9C,GAAQltC,EAAKhK,EAAEpG,IAAMoG,EAAEvG,MAEvB09C,EAAON,EAAO,EAAE,GAAKE,EAAOF,GAC5BO,EAAON,EAAO,EAAE,GAAKE,EAAOF,GAE5BO,EAAOJ,EAAO,EAAE,GAAKF,EAAOE,GAC5BK,EAAOJ,EAAO,EAAE,GAAKF,EAAOE,GAEhC/vD,KAAKwjD,KAAK52C,KAAK,KAAO5M,KAAK2lD,OAAOqK,GAAQ,IAAMhwD,KAAK2lD,OAAOsK,GAC1D,IAAMjwD,KAAK2lD,OAAOuK,GAAQ,IAAMlwD,KAAK2lD,OAAOwK,GAC5C,IAAMnwD,KAAK2lD,OAAOmK,GAAQ,IAAM9vD,KAAK2lD,OAAOoK,IAC9C/vD,KAAK0jD,MAASoM,EAAOj3C,EAAEvG,MAASuG,EAAEtG,GAClCvS,KAAK2jD,MAASoM,EAAOl3C,EAAEvG,MAASuG,EAAEpG,IASnCu7C,cAAc5hD,UAAUgkD,WAAa,SAAS95C,EAAUlH,EAAGC,EAAGvG,EAAGD,GAEhE,IAAIgQ,EAAI7Y,KAAK6R,MACTmR,EAAIhjB,KAAK0uD,iBAAiBp4C,GAO9B,OANA0M,EAAEtb,MAAMogB,SAAW,WACnB9E,EAAEtb,MAAM+U,KAAOzc,KAAK2lD,QAAQv2C,EAAIyJ,EAAEtG,IAAMsG,EAAEvG,OAAS,KACnD0Q,EAAEtb,MAAMuV,IAAMjd,KAAK2lD,QAAQt2C,EAAIwJ,EAAEpG,IAAMoG,EAAEvG,OAAS,KAClD0Q,EAAEtb,MAAMO,MAAQjI,KAAK2lD,OAAO78C,EAAI+P,EAAEvG,OAAS,KAC3C0Q,EAAEtb,MAAMG,OAAS7H,KAAK2lD,OAAO98C,EAAIgQ,EAAEvG,OAAS,KAErC0Q,GAQRgrC,cAAc5hD,UAAUyD,KAAO,SAAST,EAAGC,EAAGvG,EAAGD,GAEhD7I,KAAKkF,KAAOlF,KAAKowD,WAAW,OAAQhhD,EAAGC,EAAGvG,EAAGD,IAQ9CmlD,cAAc5hD,UAAUm8C,UAAY,SAASn5C,EAAGC,EAAGvG,EAAGD,EAAG0J,EAAIE,GAE5DzS,KAAKkF,KAAOlF,KAAKowD,WAAW,YAAahhD,EAAGC,EAAGvG,EAAGD,GAElD7I,KAAKkF,KAAKb,aAAa,UAAW+E,KAAKC,IAAS,IAALkJ,EAAWzJ,EAAQ,IAAL2J,EAAW5J,GAAK,MAQ1EmlD,cAAc5hD,UAAUo8C,QAAU,SAASp5C,EAAGC,EAAGvG,EAAGD,GAEnD7I,KAAKkF,KAAOlF,KAAKowD,WAAW,OAAQhhD,EAAGC,EAAGvG,EAAGD,IAQ9CmlD,cAAc5hD,UAAUinC,MAAQ,SAASjkC,EAAGC,EAAGvG,EAAGD,EAAG5D,EAAKwjD,EAAQ/iC,EAAOC,GAExE,IAAIzgB,EAAO,KAEX,GAAKujD,EAML,EAECvjD,EAAOlF,KAAKowD,WAAW,OAAQhhD,EAAGC,EAAGvG,EAAGD,IACnCiiD,QAAU,QAGf,IAAIhC,EAAO9oD,KAAK0uD,iBAAiB,QACjC5F,EAAKL,OAAS,EAAW,SAAW,SACpCK,EAAK9C,OAAS,OACd8C,EAAKxiD,KAAO,QACZwiD,EAAK7jD,IAAMA,EAEXC,EAAKX,YAAYukD,QAhBjB5jD,EAAOlF,KAAKowD,WAAW,QAAShhD,EAAGC,EAAGvG,EAAGD,IACpC5D,IAAMA,EAkBRygB,GAASC,EAEZzgB,EAAKwC,MAAMwb,SAAW,MAEdwC,EAERxgB,EAAKwC,MAAMunD,KAAO,IAEVtpC,IAERzgB,EAAKwC,MAAMunD,KAAO,MAGfjvD,KAAK6R,MAAM4V,MAAQ,GAAKznB,KAAK6R,MAAMqyC,UAAY,KAIlDh/C,EAAKwC,MAAM6T,QAAU,iBAAoBvb,KAAK6R,MAAM4V,MAAQznB,KAAK6R,MAAMqyC,UAAY,IAAO,KAG3FlkD,KAAK89C,KAAKv5C,YAAYW,IAQvB8oD,cAAc5hD,UAAU8/C,UAAY,SAASp2C,EAAKsW,EAAOC,EAAQrX,GAEhE,IAAIiY,EAAMjtB,KAAKgB,cAAc,OACzB6Q,EAAQ7R,KAAK6R,MAEby7C,EAAM,GAYV,GAViC,MAA7Bz7C,EAAMqzC,sBAEToI,GAAO,oBAAsBhlD,QAAQsQ,aAAa/G,EAAMqzC,qBAAuB,KAGnD,MAAzBrzC,EAAMszC,kBAETmI,GAAO,oBAAsBhlD,QAAQsQ,aAAa/G,EAAMszC,iBAAmB,KAGxE78C,QAAQ+N,OAAOP,GAElBmX,EAAI1oB,YAAYuR,QAIhB,GAAgB,QAAZd,GAAkC,SAAZA,EAC1B,CACC,IAAIm3C,EAAOnsD,KAAKgB,cAAc,OAC9BmrD,EAAKzkD,MAAMlB,QAAU8mD,EACrBnB,EAAKzkD,MAAMgmB,QAAWxtB,SAAkB,UAAI,SAAW,eACvDisD,EAAKzkD,MAAMimB,KAAO,IAClBw+B,EAAKzkD,MAAMwU,eAAiB,UAC5BiwC,EAAK7xC,UAAYxE,EACjBmX,EAAI1oB,YAAY4nD,QAIhBl/B,EAAIvlB,MAAMlB,QAAU8mD,EACpBrgC,EAAI3S,UAAYxE,EAIlB,IAAIpO,EAAQulB,EAAIvlB,MAwBhB,OAtBAA,EAAMilB,SAAY9a,EAAM8a,SAAW3sB,KAAKyuD,SAAY,KACpD/mD,EAAMklB,WAAa/a,EAAM+a,WACzBllB,EAAMuU,MAAQpK,EAAMozC,UACpBv9C,EAAMC,cAAgB,MACtBD,EAAMq4C,UAAY3zB,GAAS,OAC3B1kB,EAAMwlB,WAAcvf,YAAgC,qBAAKkE,EAAM8a,SAAWhf,YAAYwf,YAAcntB,KAAKyuD,SAAY,KAAO9gD,YAAYwf,aAEnItb,EAAMib,UAAYnf,YAAYyf,YAAczf,YAAYyf,YAE5D1lB,EAAM2lB,WAAa,SAGfxb,EAAMib,UAAYnf,YAAY2f,cAAgB3f,YAAY2f,cAE9D5lB,EAAMolB,UAAY,WAGdjb,EAAMib,UAAYnf,YAAY6f,iBAAmB7f,YAAY6f,iBAEjE9lB,EAAMwU,eAAiB,aAGjB+Q,GAUR+gC,cAAc5hD,UAAUiC,KAAO,SAASe,EAAGC,EAAGvG,EAAGD,EAAGiN,EAAKsW,EAAOC,EAAQq8B,EAAM/C,EAAQ3wC,EAAU2zC,EAAMzlC,EAAU0lC,GAE/G,GAAI5oD,KAAKooD,aAAsB,MAAPtyC,EACxB,CACC,IAAI+C,EAAI7Y,KAAK6R,MAEb,GAAc,QAAV8zC,EACJ,CACC,GAAkB,MAAd9sC,EAAEqK,SACN,CACC,IAAIO,EAAKzjB,KAAK6lD,YAAYz2C,EAAGC,EAAGwJ,EAAEqK,SAAUrK,EAAE4sC,WAAY5sC,EAAE6sC,YAE5Dt2C,EAAIqU,EAAGrU,EACPC,EAAIoU,EAAGpU,EAGqB,GAAzBxO,SAASC,cAAsBZ,SAASa,OAa3CqO,GAAKyJ,EAAEvG,MACPjD,GAAKwJ,EAAEvG,QAZPlD,GAAKyJ,EAAEtG,GACPlD,GAAKwJ,EAAEpG,GAGS,QAAZuC,GAAsBqX,GAAU1e,YAAY6e,YAE/Cnd,GAAK,IAgBP,IAAIqR,EAAgC,GAAzB7f,SAASC,cAAsBZ,SAASa,MAA0Cf,KAAKgB,cAAc,OAApDhB,KAAK0uD,iBAAiB,SAClFhuC,EAAIhZ,MAAMogB,SAAW,WACrBpH,EAAIhZ,MAAMgmB,QAAU,SACpBhN,EAAIhZ,MAAM+U,KAAOzc,KAAK2lD,OAAOv2C,GAAK,KAClCsR,EAAIhZ,MAAMuV,IAAMjd,KAAK2lD,OAAOt2C,GAAK,KACjCqR,EAAIhZ,MAAMimB,KAAO9U,EAAEvG,MAEnB,IAAIw6C,EAAM9sD,KAAKgB,cAAc,OAC7B8rD,EAAIplD,MAAMogB,SAAW,WACrBglC,EAAIplD,MAAMgmB,QAAU,SAEpB,IAAI2iC,EAAS/nD,QAAQ6jB,oBAAoBC,EAAOC,GAC5C9Z,EAAK89C,EAAOjhD,EACZqD,EAAK49C,EAAOhhD,EAEZ4d,EAAMjtB,KAAKksD,UAAUp2C,EAAKsW,EAAOC,EAAQrX,GACzCs7C,EAAQtwD,KAAKgB,cAAc,OAEpB,MAAP4nD,GAEH37B,EAAI5oB,aAAa,MAAOukD,GAGrBF,GAAQ5/C,EAAI,GAEV6/C,IAEJ17B,EAAIvlB,MAAMO,MAAQmB,KAAK2c,MAAMjd,GAAK,MAGnCmkB,EAAIvlB,MAAM6oD,SAAW5iD,YAAYmpB,UACjC7J,EAAIvlB,MAAMkmB,WAAa,SAGG,cAAtBX,EAAIvlB,MAAM6oD,UAIS,OAFlB1/C,EAAMoc,GAEFrX,YAAiD,OAA3B/E,EAAI+E,WAAWU,WAE5CzF,EAAI+E,WAAWlO,MAAMO,MAAQ,SAM/BglB,EAAIvlB,MAAMkmB,WAAa,SAGxB,IAAI4iC,EAAM33C,EAAEqK,UAAYA,GAAY,GA+BpC,GA7BIljB,KAAKyjD,YAAqB,GAAP+M,GAEtBF,EAAM5oD,MAAMgmB,QAAU,SACtB4iC,EAAM5oD,MAAMimB,KAAO,IACnB2iC,EAAM/rD,YAAY0oB,GAGW,GAAzBpsB,SAASC,cAAsBZ,SAASa,OAA+B,OAAtBf,KAAK89C,KAAKxnC,SAO9DoK,EAAInc,YAAY+rD,IALhBxD,EAAIvoD,YAAY+rD,GAChB5vC,EAAInc,YAAYuoD,KAOgB,GAAzBjsD,SAASC,cAAsBZ,SAASa,OAOhDksB,EAAIvlB,MAAMgmB,QAAU,SACpBhN,EAAInc,YAAY0oB,KANhB6/B,EAAIvoD,YAAY0oB,GAChBvM,EAAInc,YAAYuoD,IASS,OAAtB9sD,KAAK89C,KAAKxnC,SACd,CAEC,IAAIzG,EAAO7P,KAAK0uD,iBAAiB,QACjC7+C,EAAKi7C,QAAU,QACfj7C,EAAKg7C,OAAS,QAEdh7C,EAAKtL,YAAYmc,GACjB1gB,KAAK89C,KAAKv5C,YAAYsL,QAItB7P,KAAK89C,KAAKv5C,YAAYmc,GA8BvB,GA3BIioC,GAEH17B,EAAIvlB,MAAMsN,SAAW,SACrBiY,EAAIvlB,MAAMO,MAAQmB,KAAK2c,MAAMjd,GAAK,KAE7B5I,SAASU,YAEbqsB,EAAIvlB,MAAM+oD,UAAYrnD,KAAK2c,MAAMld,GAAK,OAGnB,QAAZmM,GAIRiY,EAAIvlB,MAAMsN,SAAW,SACrBiY,EAAIvlB,MAAMO,MAASmB,KAAKC,IAAI,EAAGP,GAAK,EAAK,KACzCmkB,EAAIvlB,MAAMG,OAAUuB,KAAKC,IAAI,EAAGR,GAAK,EAAK,MAEtB,SAAZmM,IAIRiY,EAAIvlB,MAAMsN,SAAW,SACrBiY,EAAIvlB,MAAMO,MAASmB,KAAKC,IAAI,EAAGP,GAAK,EAAK,KACzCmkB,EAAIvlB,MAAM+oD,UAAarnD,KAAKC,IAAI,EAAGR,GAAK,EAAK,MAG1C7I,KAAKyjD,YAAqB,GAAP+M,EACvB,CACC,IAAIvwC,EAAMuwC,GAAOpnD,KAAK2W,GAAK,KAGvB2wC,EAAW/7C,WAAWA,WAAWvL,KAAK2X,IAAId,IAAMqoC,QAAQ,IACxDqI,EAAWh8C,WAAWA,WAAWvL,KAAK6X,KAAKhB,IAAMqoC,QAAQ,KAE7DroC,GAAO,EAAI7W,KAAK2W,IACN,IAAGE,GAAO,EAAI7W,KAAK2W,KAC7BE,GAAO7W,KAAK2W,IACF3W,KAAK2W,GAAK,IAAGE,EAAM7W,KAAK2W,GAAKE,GAEvC,IAAIc,EAAM3X,KAAK2X,IAAId,GACfgB,EAAM7X,KAAK6X,IAAIhB,GAGU,GAAzBpf,SAASC,cAAsBZ,SAASa,QAE3CksB,EAAIvlB,MAAMgmB,QAAU,eACpB4iC,EAAM5oD,MAAMgmB,QAAU,eACtBo/B,EAAIplD,MAAMgmB,QAAU,gBAGrBT,EAAIvlB,MAAM6D,WAAa,SACvB0hB,EAAIvlB,MAAMogB,SAAW,WACrBjnB,SAASuG,KAAK7C,YAAY0oB,GAE1B,IAAI2jC,EAAU3jC,EAEY,MAAtB2jC,EAAQh7C,YAAqD,OAA/Bg7C,EAAQh7C,WAAWU,WAEpDs6C,EAAUA,EAAQh7C,YAGnB,IAAI/E,EAAM+/C,EAAQj0C,YAAc,EAC5Bk0C,EAAKD,EAAQ7mD,aAEb4+C,GAEH7/C,EAAIM,KAAK2G,IAAIjH,EAAG+H,GAChBggD,EAAKznD,KAAK2G,IAAI8gD,EAAIhoD,IAIlBC,EAAI+H,EAID63C,IAEHz7B,EAAIvlB,MAAMO,MAAQa,EAAI,MAInB5I,SAASU,YAAc+nD,GAAoB,SAAZ3zC,IAAwB67C,EAAKhoD,IAE/DgoD,EAAKhoD,EAGLokB,EAAIvlB,MAAMG,OAASgpD,EAAK,MAKzB,IAAIC,IAFJjoD,EAAIgoD,GAEehoD,EAAIkY,EAAMjY,GAAKmY,GAAO,EAAI0vC,EAAW7nD,GAAKyJ,EAAK,IAAOm+C,EAAW7nD,GAAK4J,EAAK,IAC1Fs+C,GAAYjoD,EAAIA,EAAIiY,EAAMlY,GAAKoY,GAAO,EAAIyvC,EAAW5nD,GAAKyJ,EAAK,IAAOo+C,EAAW9nD,GAAK4J,EAAK,IAE/F,GAAoB,SAAhBiO,EAAIpK,UAA6C,OAAtBtW,KAAK89C,KAAKxnC,SACzC,CAEC,IAAI8U,EAAMprB,KAAKgB,cAAc,OAC7BoqB,EAAI1jB,MAAMgmB,QAAU,eACpBtC,EAAI1jB,MAAMogB,SAAW,WACrBsD,EAAI1jB,MAAM+U,KAAOzc,KAAK2lD,OAAOv2C,GAAK2hD,EAAWjoD,EAAI,GAAK+P,EAAEvG,OAAS,KACjE8Y,EAAI1jB,MAAMuV,IAAMjd,KAAK2lD,OAAOt2C,GAAKyhD,EAAUjoD,EAAI,GAAKgQ,EAAEvG,OAAS,KAE/DoO,EAAI7M,WAAWtP,YAAY6mB,GAC3BA,EAAI7mB,YAAYmc,OAGjB,CACC,IAAIiP,EAA+B,GAAzB9uB,SAASC,cAAsBZ,SAASa,MAAa8X,EAAEvG,MAAN,EAE3DoO,EAAIhZ,MAAM+U,KAAOzc,KAAK2lD,OAAOv2C,GAAK2hD,EAAWjoD,EAAI,GAAK6mB,GAAM,KAC5DjP,EAAIhZ,MAAMuV,IAAMjd,KAAK2lD,OAAOt2C,GAAKyhD,EAAUjoD,EAAI,GAAK8mB,GAAM,KAI3D2gC,EAAM5oD,MAAM6T,OAAS,gDAAgDm1C,EAAS,SAC7EC,EAAS,UAAWA,EAAU,SAASD,EAAS,gCACjDJ,EAAM5oD,MAAMoxC,gBAAkB94C,KAAKwuD,sBAE/BxuD,KAAK6R,MAAM4V,MAAQ,IAEtB6oC,EAAM5oD,MAAM6T,QAAU,iBAAuC,IAAnBvb,KAAK6R,MAAM4V,MAAe,KAIrE6oC,EAAM/rD,YAAY0oB,GAClBA,EAAIvlB,MAAMogB,SAAW,GACrBmF,EAAIvlB,MAAM6D,WAAa,QAEnB,GAA6B,GAAzB1K,SAASC,cAAqBZ,SAASa,MAChD,CACCksB,EAAIvlB,MAAMC,cAAgB,MAEtB3H,KAAK6R,MAAM4V,MAAQ,IAEtB/G,EAAIhZ,MAAM6T,OAAS,iBAAuC,IAAnBvb,KAAK6R,MAAM4V,MAAe,KAIlE,IAAIupC,EAAY/jC,EAAIpZ,WACpBoZ,EAAIvlB,MAAM6D,WAAa,SACvB1K,SAASuG,KAAK7C,YAAY0oB,GAE1BnkB,EAAImkB,EAAItQ,YACJk0C,EAAK5jC,EAAIljB,aAGT7J,SAASU,WAAa+nD,GAAQkI,EAAKhoD,IAEtCgoD,EAAKhoD,EAGLokB,EAAIvlB,MAAMG,OAASgpD,EAAK,MAGzBhoD,EAAIgoD,EAEJ5jC,EAAIvlB,MAAM6D,WAAa,GACvBylD,EAAUzsD,YAAY0oB,GAEtBvM,EAAIhZ,MAAM+U,KAAOzc,KAAK2lD,OAAOv2C,EAAItG,EAAIyJ,EAAKvS,KAAK6R,MAAMS,OAAS,KAC9DoO,EAAIhZ,MAAMuV,IAAMjd,KAAK2lD,OAAOt2C,EAAIxG,EAAI4J,EAAKzS,KAAK6R,MAAMS,OAAS,UAIzDtS,KAAK6R,MAAM4V,MAAQ,IAEtBwF,EAAIvlB,MAAM6T,OAAS,iBAAuC,IAAnBvb,KAAK6R,MAAM4V,MAAe,KAIlEqlC,EAAIplD,MAAM+U,KAAa,IAALlK,EAAY,IAC9Bu6C,EAAIplD,MAAMuV,IAAY,IAALxK,EAAY,SAK9BzS,KAAKwtD,UAAUp+C,EAAGC,EAAGvG,EAAGD,EAAGP,QAAQsQ,aAAa9C,GAAK,GAAQsW,EAAOC,EAAQq8B,EAAM/C,EAAQ3wC,EAAU2zC,EAAMzlC,EAAU0lC,KAUvHoF,cAAc5hD,UAAUohD,UAAY,SAASp+C,EAAGC,EAAGvG,EAAGD,EAAGiN,EAAKsW,EAAOC,EAAQq8B,EAAM/C,EAAQ3wC,EAAU2zC,EAAMzlC,EAAU0lC,GAGpH,IAAI/vC,EAAI7Y,KAAK6R,MACbzC,GAAKA,EAAIyJ,EAAEtG,IAAMsG,EAAEvG,MACnBjD,GAAKA,EAAIwJ,EAAEpG,IAAMoG,EAAEvG,MAEnB,IAAIpN,EAAOlF,KAAK0uD,iBAAiB,SACjCxpD,EAAKwC,MAAMO,MAAQ,MACnB/C,EAAKwC,MAAMG,OAAS,MACpB3C,EAAK4lD,QAAU,QAEf,IAAIhC,EAAO9oD,KAAK0uD,iBAAiB,QACjC5F,EAAK7sC,MAAQpD,EAAEosC,UACf6D,EAAK71C,QAAqB,IAAV4F,EAAE4O,MAAe,IACjCviB,EAAKX,YAAYukD,GAEjB,IAAItF,EAAOxjD,KAAK0uD,iBAAiB,QACjClL,EAAKyN,WAAa,OAClBzN,EAAKthD,EAAI,KAAOlC,KAAK2lD,OAAO,GAAK,IAAM3lD,KAAK2lD,OAAO,GAAK,MAAQ3lD,KAAK2lD,OAAO,GAAK,IAAM3lD,KAAK2lD,OAAO,GAEnGzgD,EAAKX,YAAYi/C,GAGjB,IAAI0N,EAAKlxD,KAAK0uD,iBAAiB,YAC/BwC,EAAGxpD,MAAMlB,QAAU,gBAAkB4lB,EACrC8kC,EAAGxpD,MAAM0kB,MAAQA,EACjB8kC,EAAGxpD,MAAMklB,WAAa/T,EAAE+T,WACxBskC,EAAGpmD,OAASgL,EACZo7C,EAAGC,GAAK,OAGR,IAAItjC,EAAOhV,EAAE8T,SAAW9T,EAAEvG,MAAQtS,KAAKyuD,SACvCyC,EAAGxpD,MAAMilB,SAAWkB,EAAO,MAGtBhV,EAAEiU,UAAYnf,YAAYyf,YAAczf,YAAYyf,YAExD8jC,EAAGxpD,MAAM2lB,WAAa,SAIlBxU,EAAEiU,UAAYnf,YAAY2f,cAAgB3f,YAAY2f,cAE1D4jC,EAAGxpD,MAAMolB,UAAY,WAIjBjU,EAAEiU,UAAYnf,YAAY6f,iBAAmB7f,YAAY6f,iBAE7D0jC,EAAGxpD,MAAMwU,eAAiB,aAG3B,IACIyxC,EAAa9/B,GADL/X,EAAIvH,MAAM,MACSpM,OAAS,GAAK0rB,EAAOlgB,YAAYwf,YAC5D5a,EAAK,EACLE,EAAK,EAWT,GATI4Z,GAAU1e,YAAY8e,aAEzBha,GAAOk7C,EAAa,EAEZthC,GAAU1e,YAAYyyB,eAE9B3tB,EAAKk7C,EAAa,GAGH,MAAZzqC,EACJ,CACChe,EAAKwC,MAAMwb,SAAWA,EACtB,IAAIjD,EAAMiD,GAAY9Z,KAAK2W,GAAK,KAChCxN,EAAKnJ,KAAK6X,IAAIhB,GAAOxN,EACrBA,EAAKrJ,KAAK2X,IAAId,GAAOxN,EAStBvN,EAAKX,YAAY2sD,GACjBhsD,EAAKwC,MAAM+U,KAAOzc,KAAK2lD,OAAOv2C,EAAImD,GAAM,KACxCrN,EAAKwC,MAAMuV,IAAMjd,KAAK2lD,OAAOt2C,EAAIoD,GAAM,KAEvCzS,KAAK89C,KAAKv5C,YAAYW,IAQvB8oD,cAAc5hD,UAAUy8C,OAAS,WAEhC7oD,KAAK4qD,SAAQ,GAAO,IAQrBoD,cAAc5hD,UAAU08C,KAAO,WAE9B9oD,KAAK4qD,SAAQ,GAAM,IAQpBoD,cAAc5hD,UAAU28C,cAAgB,WAEvC/oD,KAAK4qD,SAAQ,GAAM,IAGpB3qD,WAAW+tD,mBAAyC,IAAlBA,cAAgCA,mBAAgBpnD,EA0BlFwwC,QAAQhrC,UAAU6E,MAAQ,KAO1BmmC,QAAQhrC,UAAUm3C,OAAS,KAO3BnM,QAAQhrC,UAAUglD,YAAa,EAO/Bha,QAAQhrC,UAAUilD,UAAW,EAO7Bja,QAAQhrC,UAAUklD,OAAS,KAO3Bla,QAAQhrC,UAAUmlD,OAAS,KAO3Bna,QAAQhrC,UAAUolD,SAAU,EAO5Bpa,QAAQhrC,UAAUqlD,UAAY,EAO9Bra,QAAQhrC,UAAU6hD,UAAY,SAAS1K,GAEtCvjD,KAAKujD,OAASA,GASfnM,QAAQhrC,UAAU6rC,kBAAoB,SAAS9vC,GAE9C,OAAO,GAQRivC,QAAQhrC,UAAUslD,kBAAoB,SAASnc,GAE9C,OAAQA,GAAev1C,KAAKiR,MAAMskC,YAAev1C,KAAKiR,MAAMknC,SAAW,EAAIn4C,KAAKyxD,WAcjFra,QAAQhrC,UAAUulD,iBAAmB,SAASP,GAE7C,IAAIQ,EAAQ,IAAIC,WAAW,GAAIlkD,YAAYqoB,YAAaroB,YAAYsoB,mBAGpE,OAFA27B,EAAME,UAAW,EAEVF,GAQRxa,QAAQhrC,UAAU2lD,eAAiB,SAASlgD,GAE3C,OAAO,GAQRulC,QAAQhrC,UAAUy4B,KAAO,SAASpe,EAAQ0oB,EAAOoG,EAAa9lC,GAE7D,GAAmB,MAAfzP,KAAKujD,SAAmBvjD,KAAKoxD,YAAcpxD,KAAKqxD,WAAuB,MAAV5qC,GAA2B,MAAT0oB,EACnF,CACWnvC,KAAKiR,MAAMa,UAAU6c,UAA/B,IACIrc,EAAQtS,KAAKiR,MAAMa,UAAUQ,MAC7B0/C,EAAKhyD,KAAK0xD,kBAAkBnc,GAAejjC,EAC3C+J,EAAIoK,EAAOhX,QACf4M,EAAEjN,GAAK+/B,EAAM//B,EACbiN,EAAEhN,GAAK8/B,EAAM9/B,EACb,IAAI4iD,GAAY,EACZC,EAAS,KACTC,EAAS,KACTC,GAAY,EACZC,EAAS,KACTC,EAAS,KACTC,EAAMP,EACNQ,EAAMR,EACNv1C,EAAOJ,EAAEjN,EACT4N,EAAQX,EAAEjN,EAAIiN,EAAEpU,MAChBke,EAAS9J,EAAE1M,aACXsN,EAAMZ,EAAEhN,EACR8N,EAASd,EAAEhN,EAAIgN,EAAExU,OACjB4qD,EAASp2C,EAAEzM,aAGf,SAAS8iD,EAAMtjD,EAAGyC,EAAO8gD,GAExB,IAAIC,GAAW,EAEXD,GAAevpD,KAAKsX,IAAItR,EAAI+W,GAAUosC,GAEzCpjB,EAAM//B,EAAIA,EAAIqX,EAAO9W,aACrB4iD,EAAMnpD,KAAKsX,IAAItR,EAAI+W,GACnBysC,GAAW,GAEFD,IAELvpD,KAAKsX,IAAItR,EAAIqN,GAAQ81C,GAExBpjB,EAAM//B,EAAIA,EAAIqX,EAAOrX,EACrBmjD,EAAMnpD,KAAKsX,IAAItR,EAAIqN,GACnBm2C,GAAW,GAEHxpD,KAAKsX,IAAItR,EAAI4N,GAASu1C,IAE9BpjB,EAAM//B,EAAIA,EAAIqX,EAAOrX,EAAIqX,EAAOxe,MAChCsqD,EAAMnpD,KAAKsX,IAAItR,EAAI4N,GACnB41C,GAAW,IAITA,IAEHV,EAASrgD,EACTsgD,EAAS/iD,EAEU,MAAfpP,KAAKsxD,SAERtxD,KAAKsxD,OAAStxD,KAAK2xD,kBAAiB,GAKpC3xD,KAAKsxD,OAAOhjC,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YACxD5gB,YAAYylB,YAAczlB,YAAY4gB,YACvCvuB,KAAKsxD,OAAO3a,eAAgB,EAC5B32C,KAAKsxD,OAAOnqD,KAAKnH,KAAKiR,MAAMa,UAAU+gD,oBAIxCZ,EAAYA,GAAaW,EAI1B,SAASE,EAAMzjD,EAAGwC,EAAO8gD,GAExB,IAAIC,GAAW,EAEXD,GAAevpD,KAAKsX,IAAIrR,EAAIojD,GAAUD,GAEzCrjB,EAAM9/B,EAAIA,EAAIoX,EAAO7W,aACrB4iD,EAAMppD,KAAKsX,IAAIrR,EAAKojD,GACpBG,GAAW,GAEFD,IAELvpD,KAAKsX,IAAIrR,EAAI4N,GAAOu1C,GAEvBrjB,EAAM9/B,EAAIA,EAAIoX,EAAOpX,EACrBmjD,EAAMppD,KAAKsX,IAAIrR,EAAI4N,GACnB21C,GAAW,GAEHxpD,KAAKsX,IAAIrR,EAAI8N,GAAUq1C,IAE/BrjB,EAAM9/B,EAAIA,EAAIoX,EAAOpX,EAAIoX,EAAO5e,OAChC2qD,EAAMppD,KAAKsX,IAAIrR,EAAI8N,GACnBy1C,GAAW,IAITA,IAEHP,EAASxgD,EACTygD,EAASjjD,EAEU,MAAfrP,KAAKuxD,SAERvxD,KAAKuxD,OAASvxD,KAAK2xD,kBAAiB,GAKpC3xD,KAAKuxD,OAAOjjC,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YACxD5gB,YAAYylB,YAAczlB,YAAY4gB,YACvCvuB,KAAKuxD,OAAO5a,eAAgB,EAC5B32C,KAAKuxD,OAAOpqD,KAAKnH,KAAKiR,MAAMa,UAAU+gD,oBAIxCT,EAAYA,GAAaQ,EAG1B,IAAK,IAAI/tD,EAAI,EAAGA,EAAI7E,KAAKujD,OAAOphD,OAAQ0C,IACxC,CACC,IAAIgN,EAAS7R,KAAKujD,OAAO1+C,GAEZ,MAATgN,GAAkB7R,KAAK+xD,eAAelgD,KAGrC7R,KAAKoxD,aAERsB,EAAMnjD,KAAKvP,KAAM6R,EAAMlC,aAAckC,GAAO,GAC5C6gD,EAAMnjD,KAAKvP,KAAM6R,EAAMzC,EAAGyC,GAAO,GACjC6gD,EAAMnjD,KAAKvP,KAAM6R,EAAMzC,EAAIyC,EAAM5J,MAAO4J,GAAO,GAG7B,MAAdA,EAAMG,MAET0gD,EAAMnjD,KAAKvP,KAAM6R,EAAMlC,aAAckC,GAAO,IAK1C7R,KAAKqxD,WAERyB,EAAMvjD,KAAKvP,KAAM6R,EAAMjC,aAAciC,GAAO,GAC5CihD,EAAMvjD,KAAKvP,KAAM6R,EAAMxC,EAAGwC,GAAO,GACjCihD,EAAMvjD,KAAKvP,KAAM6R,EAAMxC,EAAIwC,EAAMhK,OAAQgK,GAAO,GAG9B,MAAdA,EAAMG,MAET8gD,EAAMvjD,KAAKvP,KAAM6R,EAAMjC,aAAciC,GAAO,KAOhD7R,KAAKiR,MAAM8hD,UAAU5jB,EAAO1oB,GAAS8uB,EAAa0c,EAAWG,GAC7DjjB,EAAQnvC,KAAK4hD,SAASn7B,EAAQyrC,EAAQ/iB,EAAM//B,EAAGijD,EAAQljB,EAAM9/B,GAG7D,IAAIJ,EAAIjP,KAAKiR,MAAM0W,UAEnB,GAAKsqC,GAA4B,MAAfjyD,KAAKsxD,QAIlB,GAAmB,MAAftxD,KAAKsxD,OACd,CACC,IAAIthD,EAAO,KACDE,EAAO,KAEH,MAAVgiD,GAA4B,MAAVzrC,IAErBzW,EAAO5G,KAAK2G,IAAI0W,EAAOpX,EAAI8/B,EAAM9/B,EAAIrP,KAAKiR,MAAMwmC,MAAOya,EAAO7iD,GAC9Da,EAAO9G,KAAKC,IAAIod,EAAOpX,EAAIoX,EAAO5e,OAASsnC,EAAM9/B,EAAIrP,KAAKiR,MAAMwmC,MAAOya,EAAO7iD,EAAI6iD,EAAOrqD,SAKzF7H,KAAKsxD,OAAO0B,OAFD,MAARhjD,GAAwB,MAARE,EAEE,CAAC,IAAIf,QAAQgjD,EAAQniD,GAAO,IAAIb,QAAQgjD,EAAQjiD,IAIhD,CAAC,IAAIf,QAAQgjD,GAASnyD,KAAKiR,MAAMwmC,OACrD,IAAItoC,QAAQgjD,EAAQljD,EAAExD,aAAe,EAAIzL,KAAKiR,MAAMwmC,QAGtDz3C,KAAKsxD,OAAOzI,OAAS7oD,KAAKizD,cAAcf,GAAQ,GAChDlyD,KAAKsxD,OAAOpsD,KAAKwC,MAAM6D,WAAa,UACpCvL,KAAKsxD,OAAOz+C,eAzBZ7S,KAAKsxD,OAAOpsD,KAAKwC,MAAM6D,WAAa,SA4BrC,GAAK6mD,GAA4B,MAAfpyD,KAAKuxD,QAIlB,GAAmB,MAAfvxD,KAAKuxD,OACd,CACC,IAAIzhD,EAAO,KACDG,EAAO,KAEH,MAAVoiD,GAA4B,MAAV5rC,IAErB3W,EAAO1G,KAAK2G,IAAI0W,EAAOrX,EAAI+/B,EAAM//B,EAAIpP,KAAKiR,MAAMumC,MAAO6a,EAAOjjD,GAC9Da,EAAO7G,KAAKC,IAAIod,EAAOrX,EAAIqX,EAAOxe,MAAQknC,EAAM//B,EAAIpP,KAAKiR,MAAMumC,MAAO6a,EAAOjjD,EAAIijD,EAAOpqD,QAKxFjI,KAAKuxD,OAAOyB,OAFD,MAARljD,GAAwB,MAARG,EAEE,CAAC,IAAId,QAAQW,EAAMwiD,GAAS,IAAInjD,QAAQc,EAAMqiD,IAI9C,CAAC,IAAInjD,SAASnP,KAAKiR,MAAMumC,MAAO8a,GACpD,IAAInjD,QAAQF,EAAEikD,YAAc,EAAIlzD,KAAKiR,MAAMumC,MAAO8a,IAGpDtyD,KAAKuxD,OAAO1I,OAAS7oD,KAAKizD,cAAcZ,GAAQ,GAChDryD,KAAKuxD,OAAOrsD,KAAKwC,MAAM6D,WAAa,UACpCvL,KAAKuxD,OAAO1+C,eAzBZ7S,KAAKuxD,OAAOrsD,KAAKwC,MAAM6D,WAAa,SA6BtC,OAAO4jC,GAQRiI,QAAQhrC,UAAUw1C,SAAW,SAASn7B,EAAQyrC,EAAQ3/C,EAAI8/C,EAAQ5/C,GAEjE,IAAIoG,EAAI7Y,KAAKiR,MAAMsW,KAAKjV,MAYxB,OAVItS,KAAKwxD,SAAsB,MAAVU,GAAiC,MAAfA,EAAOlgD,QAE7CO,EAAKnJ,KAAK2c,OAAOU,EAAOrX,EAAImD,GAAMsG,GAAKA,EAAI4N,EAAOrX,IAG/CpP,KAAKwxD,SAAsB,MAAVa,GAAiC,MAAfA,EAAOrgD,QAE7CS,EAAKrJ,KAAK2c,OAAOU,EAAOpX,EAAIoD,GAAMoG,GAAKA,EAAI4N,EAAOpX,GAG5C,IAAIF,QAAQoD,EAAIE,IAQxB2kC,QAAQhrC,UAAU6mD,cAAgB,SAASphD,EAAOu/C,GAEjD,OAAOzjD,YAAYqoB,aAQpBohB,QAAQhrC,UAAUwlC,KAAO,WAExB5xC,KAAK2K,YAAW,IAQjBysC,QAAQhrC,UAAUzB,WAAa,SAASC,GAEpB,MAAf5K,KAAKsxD,SAERtxD,KAAKsxD,OAAOpsD,KAAKwC,MAAM6D,WAAa,EAAY,UAAY,UAG1C,MAAfvL,KAAKuxD,SAERvxD,KAAKuxD,OAAOrsD,KAAKwC,MAAM6D,WAAa,EAAY,UAAY,WAS9D6rC,QAAQhrC,UAAU6iB,QAAU,WAER,MAAfjvB,KAAKsxD,SAERtxD,KAAKsxD,OAAOriC,UACZjvB,KAAKsxD,OAAS,MAGI,MAAftxD,KAAKuxD,SAERvxD,KAAKuxD,OAAOtiC,UACZjvB,KAAKuxD,OAAS,OAIhBtxD,WAAWm3C,aAA6B,IAAZA,QAA0BA,aAAUxwC,EA4EhEs8C,QAAQ92C,UAAUkiB,QAAU,KAO5B40B,QAAQ92C,UAAUkG,MAAQ,EAO1B4wC,QAAQ92C,UAAU+mD,WAAY,EAO9BjQ,QAAQ92C,UAAUgnD,kBAAoB,EAOtClQ,QAAQ92C,UAAUqa,OAAS,KAO3By8B,QAAQ92C,UAAU4mD,OAAS,KAO3B9P,QAAQ92C,UAAUlH,KAAO,KAOzBg+C,QAAQ92C,UAAUyF,MAAQ,KAO1BqxC,QAAQ92C,UAAU1E,MAAQ,KAQ1Bw7C,QAAQ92C,UAAUinD,YAAc,KAOhCnQ,QAAQ92C,UAAU8hD,QAAU,KAQ5BhL,QAAQ92C,UAAUknD,mBAAqB,EAOvCpQ,QAAQ92C,UAAUuqC,eAAgB,EAOlCuM,QAAQ92C,UAAUmnD,iBAAmB,MAQrCrQ,QAAQ92C,UAAUonD,oBAAqB,EAQvCtQ,QAAQ92C,UAAUqnD,sBAAuB,EAOzCvQ,QAAQ92C,UAAUqiD,SAAW,EAU7BvL,QAAQ92C,UAAUsnD,SAAU,EAO5BxQ,QAAQ92C,UAAUxB,SAAU,EAQ5Bs4C,QAAQ92C,UAAUunD,mBAAoB,EAYtCzQ,QAAQ92C,UAAUjF,KAAO,SAASwgB,GAEhB,MAAb3nB,KAAKkF,OAERlF,KAAKkF,KAAOlF,KAAK0qB,OAAO/C,GAEP,MAAbA,GAEHA,EAAUpjB,YAAYvE,KAAKkF,QAU9Bg+C,QAAQ92C,UAAU+hD,WAAa,SAASxmC,GAEvC3nB,KAAK4zD,YAAc,EACnB5zD,KAAKkjB,SAAW,EAChBljB,KAAKiT,QAAU,IACfjT,KAAK6zD,YAAc,IACnB7zD,KAAK8zD,cAAgB,IACrB9zD,KAAK0lB,OAAQ,EACb1lB,KAAK2lB,OAAQ,GAUdu9B,QAAQ92C,UAAU2nD,WAAa,WAE9B,OAAO,GASR7Q,QAAQ92C,UAAU4nD,cAAgB,WAEjC,OAAO,GAQR9Q,QAAQ92C,UAAU6nD,mBAAqB,WAEtC,IAAI3I,EAAKtrD,KAAKkuD,SAAuC,WAA5BluD,KAAKkuD,QAAQ0F,YAA2B30C,OAAOjf,KAAKkuD,QAAQ0F,aAAe5zD,KAAK4zD,YAEzG,OAAoE,GAA5DtrD,QAAQ4gB,IAAI9f,KAAKC,IAAI,EAAGD,KAAK2c,MAAMulC,EAAKtrD,KAAKsS,QAAS,GAAW,GAAM,GAehF4wC,QAAQ92C,UAAUse,OAAS,SAAS/C,GAkBnC,OAdiB,MAAbA,GAAkD,MAA7BA,EAAUsJ,gBAE3BjxB,KAAKk0D,UAAUvsC,GAEW,GAAzB9mB,SAASC,eAAsBZ,SAAS4C,QAC/C9C,KAAKsuB,SAAW3gB,YAAYylB,aAAepzB,KAAKg0D,gBAE1Ch0D,KAAKm0D,WAAWxsC,GAIhB3nB,KAAKo0D,UAAUzsC,IAWxBu7B,QAAQ92C,UAAU8nD,UAAY,WAE7B,OAAOrzD,SAASsC,gBAAgBwK,YAAY6gB,OAAQ,MAQrD00B,QAAQ92C,UAAUgoD,UAAY,WAE7B,IAAIlvD,EAAOrE,SAASG,cAAcd,SAASe,WAAa,UAGxD,OAFAiE,EAAKwC,MAAMogB,SAAW,WAEf5iB,GAURg+C,QAAQ92C,UAAU+nD,WAAa,WAE9B,IAAIjvD,EAAOrE,SAASG,cAAc,OAGlC,OAFAkE,EAAKwC,MAAMogB,SAAW,WAEf5iB,GASRg+C,QAAQ92C,UAAUioD,YAAc,WAE/Br0D,KAAK6S,UAQNqwC,QAAQ92C,UAAUyG,OAAS,WAE1B7S,KAAKs0D,yBAEDt0D,KAAK4K,SAAW5K,KAAKmjD,eAExBnjD,KAAKkF,KAAKwC,MAAM6D,WAAa,UAC7BvL,KAAKkM,QAEqB,OAAtBlM,KAAKkF,KAAKoR,WAAsBtW,KAAKg0D,iBAAoB9zD,SAAS4C,OAMrE9C,KAAKu0D,cAJLv0D,KAAKw0D,kBAONx0D,KAAKy0D,sBAILz0D,KAAKkF,KAAKwC,MAAM6D,WAAa,SAC7BvL,KAAKqzD,YAAc,OASrBnQ,QAAQ92C,UAAUF,MAAQ,WAEzB,GAAiC,MAA7BlM,KAAKkF,KAAK+rB,gBAEb,KAA8B,MAAvBjxB,KAAKkF,KAAKwvD,WAEhB10D,KAAKkF,KAAK4O,YAAY9T,KAAKkF,KAAKwvD,gBAKjC10D,KAAKkF,KAAKwC,MAAMlB,QAAU,sBAAwC,MAAfxG,KAAKoU,OACtD,UAAYpU,KAAKoU,OAAS,IAAO,IACnCpU,KAAKkF,KAAKoV,UAAY,IASxB4oC,QAAQ92C,UAAUkoD,uBAAyB,WAE1C,IAAIpuC,EAAMlmB,KAAKgzD,OAEf,GAAW,MAAP9sC,GAAeA,EAAI/jB,OAAS,GAAe,MAAV+jB,EAAI,GACzC,CACClmB,KAAKymB,OAAS,IAAInX,YAAY2P,OAAOiH,EAAI,GAAG9W,GAAI6P,OAAOiH,EAAI,GAAG7W,GAAI,EAAG,GAErE,IAAK,IAAIxK,EAAI,EAAGA,EAAI7E,KAAKgzD,OAAO7wD,OAAQ0C,IAEzB,MAAVqhB,EAAIrhB,IAEP7E,KAAKymB,OAAO1hB,IAAI,IAAIuK,YAAY2P,OAAOiH,EAAIrhB,GAAGuK,GAAI6P,OAAOiH,EAAIrhB,GAAGwK,GAAI,EAAG,MAa3E6zC,QAAQ92C,UAAUuoD,eAAiB,SAAS9kD,GAE3C,IAAIyM,EAAIhU,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYiY,gBAAiBjY,YAAYoX,gBAC1E0B,EAAS5W,EAGb,GAAIyM,GAAK3O,YAAYmX,iBAAmBxI,GAAK3O,YAAY6W,iBAC1C,MAAdxkB,KAAK6R,OAAoC,MAAnB7R,KAAK6R,MAAMxD,MACjCrO,KAAK6R,MAAMxD,KAAKumD,wBACjB,CAEC,IAAI/jD,GADJ4V,EAASA,EAAOhX,SACCxH,MACjBwe,EAAOxe,MAAQwe,EAAO5e,OACtB4e,EAAO5e,OAASgJ,EAGjB,IAAI4U,EAAIzlB,KAAK60D,gBAAgBpuC,GAE7B,GAAS,MAALhB,EACJ,CACC,IAAIC,EAAwE,KAAhEpd,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYkY,aAAa,GAC9DF,EAAwE,KAAhErd,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYmY,aAAa,GAiBlE,OAdkB,MAAd9lB,KAAK6R,OAAoC,MAAnB7R,KAAK6R,MAAMxD,MACpCrO,KAAK6R,MAAMxD,KAAKumD,0BAEZ/jD,EAAM4U,EAAErW,EACZqW,EAAErW,EAAIqW,EAAE5d,OACR4d,EAAE5d,OAAS4d,EAAExd,MACbwd,EAAExd,MAAQwd,EAAEpW,EACZoW,EAAEpW,EAAIwB,EAENA,EAAM6U,EACNA,EAAQC,EACRA,EAAQ9U,GAGFvI,QAAQkd,kBAAkB3V,EAAM4V,EAAGzlB,KAAK0H,MAAOge,EAAOC,GAG9D,OAAO9V,GAURqzC,QAAQ92C,UAAUyoD,gBAAiB,SAAShlD,GAE3C,OAAO,MAQRqzC,QAAQ92C,UAAU+2C,YAAc,WAE/B,OAASvuC,MAAM5U,KAAKsS,QAAU0W,SAAShpB,KAAKsS,QAAUtS,KAAKsS,MAAQ,GAClD,MAAftS,KAAKymB,SAAmB7R,MAAM5U,KAAKymB,OAAOrX,KAAOwF,MAAM5U,KAAKymB,OAAOpX,KAClEuF,MAAM5U,KAAKymB,OAAOxe,SAAW2M,MAAM5U,KAAKymB,OAAO5e,SAChD7H,KAAKymB,OAAOxe,MAAQ,GAAKjI,KAAKymB,OAAO5e,OAAS,GAQjDq7C,QAAQ92C,UAAU0oD,eAAiB,WAElC,IAAI5vD,EAAOrE,SAASG,cAAcd,SAASe,WAAa,UAKxD,OAJAiE,EAAKwC,MAAMogB,SAAW,WACtB5iB,EAAKwC,MAAMO,MAAQjI,KAAKkF,KAAKwC,MAAMO,MACnC/C,EAAKwC,MAAMG,OAAS7H,KAAKkF,KAAKwC,MAAMG,OAE7B3C,GAQRg+C,QAAQ92C,UAAUmoD,YAAc,WAE/B,IAAI9lC,EAASzuB,KAAK+0D,eAEJ,MAAVtmC,IAGHA,EAAOkoB,cAAgB32C,KAAK22C,cAE5B32C,KAAKojD,MAAM30B,GAEPzuB,KAAKkF,MAAQupB,EAAOqvB,MAGvB99C,KAAKkF,KAAK8vD,mBAAmB,YAAavmC,EAAOqvB,KAAK/iC,WAG7B,OAAtB/a,KAAKkF,KAAKoR,UAA8C,GAAzBzV,SAASC,eAK3Cd,KAAKkF,KAAKwC,MAAM6T,OAAS,GAGzBjT,QAAQgT,+BAA+Btb,KAAKkF,OAG7ClF,KAAKi1D,cAAcxmC,KASrBy0B,QAAQ92C,UAAU2oD,aAAe,WAEhC,IAAItmC,EAAS,KA+Bb,OA5BiC,MAA7BzuB,KAAKkF,KAAK+rB,gBAEbxC,EAASzuB,KAAKk1D,kBAENh1D,SAAS4C,SAEjB9C,KAAKm1D,qBACL1mC,EAASzuB,KAAKo1D,mBAGD,MAAV3mC,GAAkBzuB,KAAK0zD,UAE1BjlC,EAAOm4B,eAAe5mD,KAAK4zD,aAC3BnlC,EAAOk4B,eAAe3mD,KAAK6oD,QAEN,MAAjB7oD,KAAK8xD,UAERrjC,EAAOo4B,UAAU7mD,KAAK8xD,UAGvBrjC,EAAOm4B,eAAiB,aACxBn4B,EAAOk4B,eAAiB,aACxBl4B,EAAO23B,aAAe,aACtB33B,EAAO43B,YAAc,aACrB53B,EAAOo4B,UAAY,aACnBp4B,EAAOpgB,KAAO,cAGRogB,GAQRy0B,QAAQ92C,UAAU8oD,gBAAkB,WAEnC,IAAIzmC,EAAS,IAAIuvB,cAAch+C,KAAKkF,MAAM,GAC1CupB,EAAO86B,gBAAmBvpD,KAAkB,cAAIA,KAAKszD,mBAAqB,EAC1E7kC,EAAOk7B,mBAAqB3pD,KAAKuzD,iBACjC,IAAIrb,EAAMl4C,KAAKi0D,qBAsBf,OApBW,GAAP/b,EAEHl4C,KAAKkF,KAAKb,aAAa,YAAa,aAAe6zC,EAAM,IAAMA,EAAM,KAIrEl4C,KAAKkF,KAAKymD,gBAAgB,aAG3Bl9B,EAAO+6B,eAAiBxpD,KAAKozD,kBAExBpzD,KAAKmzD,YAGT1kC,EAAOk3B,OAAS,SAAS59C,GAExB,OAAOqB,KAAK2c,MAAMpR,WAAW5M,MAIxB0mB,GAQRy0B,QAAQ92C,UAAUgpD,gBAAkB,WAGnC,IAAIlwD,EAAiC,GAAzBrE,SAASC,cAAqBd,KAAK+zD,aAAgB/zD,KAAK80D,iBAAmB90D,KAAKkF,KACxFupB,EAAS,IAAIu/B,cAAc9oD,GAAM,GAErC,GAAmB,IAAfA,EAAK+T,OACT,CACC,IAAInQ,EAAIM,KAAKC,IAAI,EAAGD,KAAK2c,MAAM/lB,KAAKymB,OAAOxe,QACvCY,EAAIO,KAAKC,IAAI,EAAGD,KAAK2c,MAAM/lB,KAAKymB,OAAO5e,SAC3C3C,EAAKypD,UAAa7lD,EAAI9I,KAAKyuD,SAAY,IAAO5lD,EAAI7I,KAAKyuD,SACvDhgC,EAAOnc,MAAMtS,KAAKyuD,UAClBhgC,EAAOggC,SAAWzuD,KAAKyuD,SAIxB,IAAI51C,EAAI7Y,KAAKsS,MAGb,OAFAmc,EAAOE,WAAWvlB,KAAK2c,MAAM/lB,KAAKymB,OAAOrX,EAAIyJ,IAAKzP,KAAK2c,MAAM/lB,KAAKymB,OAAOpX,EAAIwJ,IAEtE4V,GAQRy0B,QAAQ92C,UAAU+oD,mBAAqB,WAEtCn1D,KAAKkF,KAAKwC,MAAM+U,KAAOrT,KAAK2c,MAAM/lB,KAAKymB,OAAOrX,GAAK,KACnDpP,KAAKkF,KAAKwC,MAAMuV,IAAM7T,KAAK2c,MAAM/lB,KAAKymB,OAAOpX,GAAK,KAClD,IAAIvG,EAAIM,KAAKC,IAAI,EAAGD,KAAK2c,MAAM/lB,KAAKymB,OAAOxe,QACvCY,EAAIO,KAAKC,IAAI,EAAGD,KAAK2c,MAAM/lB,KAAKymB,OAAO5e,SAC3C7H,KAAKkF,KAAKwC,MAAMO,MAAQa,EAAI,KAC5B9I,KAAKkF,KAAKwC,MAAMG,OAASgB,EAAI,KAC7B7I,KAAKkF,KAAKwC,MAAMsN,SAAW,WAQ5BkuC,QAAQ92C,UAAUooD,gBAAkB,WAGnCx0D,KAAKq1D,iBAAiBr1D,KAAKkF,MAC3BlF,KAAKs1D,kBAAkBt1D,KAAKkF,MAC5BlF,KAAKu1D,iBAAiBv1D,KAAKkF,OAQ5Bg+C,QAAQ92C,UAAUkpD,kBAAoB,SAASpwD,GAE9C,IAAI0O,EAAI,GAgBR,GAdI5T,KAAKiT,QAAU,MAElBW,GAAK,iBAAoB5T,KAAY,QAAI,KAGtCA,KAAKw1D,WAGR5hD,GAAK,uDACQxK,KAAK2c,MAAMpY,YAAYimB,gBAAkB5zB,KAAKsS,OADtD,YAEQlJ,KAAK2c,MAAMpY,YAAYkmB,gBAAkB7zB,KAAKsS,OAFtD,aAGS3E,YAAYgmB,gBAAkB,MAG5B,MAAb3zB,KAAK8oD,MAAgB9oD,KAAK8oD,MAAQn7C,YAAYC,MAAQ5N,KAAKuqD,UAAYvqD,KAAKuqD,UAAY58C,YAAYC,KACxG,CACC,IAAIyZ,EAAQrnB,KAAK8oD,KACbX,EAAMnoD,KAAKuqD,SACXjkD,EAAO,IAEP+jB,EAAS,CAACorC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,GACtChN,EAAyB,MAAlB5oD,KAAKwmD,UAAqBn8B,EAAOrqB,KAAKwmD,WAAa,EAO9D,GAL8B,MAA1BxmD,KAAKwkD,oBAERoE,EAAMtgD,QAAQ4gB,IAAI0/B,EAAMv+B,EAAOrqB,KAAKwkD,mBAAqB,EAAG,IAGlD,GAAPoE,EACJ,CACCtiD,EAAO,IACP,IAAIuK,EAAMwW,EACVA,EAAQ8gC,EACRA,EAAMt3C,OAES,GAAP+3C,GAEJ/3C,EAAMwW,EACVA,EAAQ8gC,EACRA,EAAMt3C,GAES,GAAP+3C,IAERtiD,EAAO,KAGRsN,GAAK,6DACiByT,EAAQ,mBAAuB8gC,EACpD,oBAAwB7hD,EAAO,KAGjCpB,EAAKwC,MAAM6T,OAAS3H,GAQrBsvC,QAAQ92C,UAAUmpD,iBAAmB,SAASrwD,GAE7C,IAAI+W,EAAQjc,KAAK6oD,OAEJ,MAAT5sC,GAAiBA,GAAStO,YAAYC,MAEzC1I,EAAKwC,MAAMmuD,YAAc55C,EAErBjc,KAAK8xD,SAER5sD,EAAKwC,MAAMuiB,YAAc,SAEjBjqB,KAAK4zD,YAAc,IAE3B1uD,EAAKwC,MAAMuiB,YAAc,SAG1B/kB,EAAKwC,MAAMouD,YAAc1sD,KAAKC,IAAI,EAAGD,KAAKgZ,KAAKpiB,KAAK4zD,YAAc5zD,KAAKsS,QAAU,MAIjFpN,EAAKwC,MAAMouD,YAAc,MAKb,OAFb75C,EAASjc,KAAY,QAAI,KAAOA,KAAK8oD,OAEhB7sC,GAAStO,YAAYC,MAEzC1I,EAAKwC,MAAMoxC,gBAAkB78B,EAC7B/W,EAAKwC,MAAM+4C,gBAAkB,QAErBzgD,KAAK22C,cAEZzxC,EAAKwC,MAAMoxC,gBAAkB,cAEG,GAAzBj4C,SAASC,aAEjBwH,QAAQgT,+BAA+BpW,GAIvClF,KAAK+1D,8BAA8B7wD,IASrCg+C,QAAQ92C,UAAUipD,iBAAmB,SAASnwD,GAE7C,IAAIomD,EAAMzqD,SAASC,cAAgB,EAAK,EAAIsI,KAAKgZ,KAAKpiB,KAAK4zD,YAAc5zD,KAAKsS,OAC9EpN,EAAKwC,MAAMouD,YAAc1sD,KAAKC,IAAI,EAAGiiD,GAAM,KAC3CpmD,EAAKwC,MAAMsN,SAAW,SAEtB9P,EAAKwC,MAAM+U,KAAOrT,KAAK2c,MAAM/lB,KAAKymB,OAAOrX,EAAIk8C,EAAK,GAAK,KACvDpmD,EAAKwC,MAAMuV,IAAM7T,KAAK2c,MAAM/lB,KAAKymB,OAAOpX,EAAIi8C,EAAK,GAAK,KAE3B,cAAvBzqD,SAASmH,aAEZsjD,GAAMA,GAGPpmD,EAAKwC,MAAMO,MAAQmB,KAAK2c,MAAM3c,KAAKC,IAAI,EAAGrJ,KAAKymB,OAAOxe,MAAQqjD,IAAO,KACrEpmD,EAAKwC,MAAMG,OAASuB,KAAK2c,MAAM3c,KAAKC,IAAI,EAAGrJ,KAAKymB,OAAO5e,OAASyjD,IAAO,MASxEpI,QAAQ92C,UAAU6oD,cAAgB,SAASxmC,GAG1C,GAAIA,aAAkBuvB,cACtB,CAEC,IAAK,IAAI1xC,KAAOmiB,EAAOyvB,UACvB,CACC,IAAIqM,EAAW97B,EAAOyvB,UAAU5xC,GAEhB,MAAZi+C,IAEHA,EAASyL,YAAczL,EAASyL,YAAc,GAAK,GAIrDh2D,KAAKi2D,oBAAoBj2D,KAAKk2D,cAC9Bl2D,KAAKk2D,aAAeznC,EAAOyvB,YAS7BgF,QAAQ92C,UAAUg3C,MAAQ,SAASn0C,GAElC,IAAIknD,GAAc,EAElB,GAAS,MAALlnD,GAAajP,KAAK0zD,QACtB,CACC,IAAI7K,EAAS55C,EAAE45C,OAEf55C,EAAE45C,OAAS,WAEVsN,GAAc,EACdtN,EAAOz9C,MAAMpL,KAAMqL,YAGpB,IAAI09C,EAAgB95C,EAAE85C,cAEtB95C,EAAE85C,cAAgB,WAEjBoN,GAAc,EACdpN,EAAc39C,MAAMpL,KAAMqL,YAK5B,IAAIwN,EAAI7Y,KAAKsS,MACTlD,EAAIpP,KAAKymB,OAAOrX,EAAIyJ,EACpBxJ,EAAIrP,KAAKymB,OAAOpX,EAAIwJ,EACpB/P,EAAI9I,KAAKymB,OAAOxe,MAAQ4Q,EACxBhQ,EAAI7I,KAAKymB,OAAO5e,OAASgR,EAE7B,GAAI7Y,KAAK40D,wBACT,CACC,IAAIhkD,GAAK9H,EAAID,GAAK,EAClBuG,GAAKwB,EACLvB,GAAKuB,EACL,IAAIC,EAAM/H,EACVA,EAAID,EACJA,EAAIgI,EAGL7Q,KAAKo2D,gBAAgBnnD,EAAGG,EAAGC,EAAGvG,EAAGD,GACjC7I,KAAKq2D,gBAAgBpnD,EAAGG,EAAGC,EAAGvG,EAAGD,GAGjC,IAAImkD,EAAK,KAET,GAAqB,MAAhBhtD,KAAKkuD,SAAkC,MAAfluD,KAAKgzD,QAAkBhzD,KAAKwzD,oBACvC,MAAhBxzD,KAAKkuD,SAAmBluD,KAAKyzD,qBAC/B,CACC,IAAI6C,EAAKt2D,KAAKu2D,oBAEd,GAAIv2D,KAAKsuB,SAAW3gB,YAAY4gB,YAE/By+B,EAAKhtD,KAAKw2D,8BAA8BF,EAAGlnD,EAAGknD,EAAGjnD,EAAGinD,EAAGruD,MAAOquD,EAAGzuD,QACjE7H,KAAKkF,KAAKX,YAAYyoD,OAGvB,CACC,IAAIn9C,EAAOZ,EAAEmhD,WAAW,OAAQkG,EAAGlnD,EAAIyJ,EAAGy9C,EAAGjnD,EAAIwJ,EAAGy9C,EAAGruD,MAAQ4Q,EAAGy9C,EAAGzuD,OAASgR,GAC9EhJ,EAAKtL,YAAY0K,EAAE+/C,yBACnBn/C,EAAKi7C,QAAU,QACf77C,EAAE6uC,KAAKv5C,YAAYsL,IAIrB,GAAoB,MAAhB7P,KAAKkuD,QAERluD,KAAKkuD,QAAQlL,UAAU/zC,EAAGjP,KAAMoP,EAAGC,EAAGvG,EAAGD,QAOzC,GAFAoG,EAAE23C,eAAe5mD,KAAK4zD,aAEH,MAAf5zD,KAAKgzD,OACT,CAIC,IAFA,IAAI9sC,EAAM,GAEDrhB,EAAI,EAAGA,EAAI7E,KAAKgzD,OAAO7wD,OAAQ0C,IAEjB,MAAlB7E,KAAKgzD,OAAOnuD,IAEfqhB,EAAItZ,KAAK,IAAIuC,QAAQnP,KAAKgzD,OAAOnuD,GAAGuK,EAAIyJ,EAAG7Y,KAAKgzD,OAAOnuD,GAAGwK,EAAIwJ,IAIhE7Y,KAAKy2D,eAAexnD,EAAGiX,QAKvBlmB,KAAK02D,iBAAiBznD,EAAGG,EAAGC,EAAGvG,EAAGD,GAI1B,MAANmkD,GAAyB,MAAX/9C,EAAE4C,OAAsC,MAArB5C,EAAE4C,MAAMo5C,WAE5C+B,EAAG3oD,aAAa,YAAa4K,EAAE4C,MAAMo5C,WAI7B,MAALh8C,GAAajP,KAAK0zD,UAAYyC,IAEjClnD,EAAEY,KAAKT,EAAGC,EAAGvG,EAAGD,GAChBoG,EAAE45C,WASJ3F,QAAQ92C,UAAUiqD,gBAAkB,SAASpnD,EAAGG,EAAGC,EAAGvG,EAAGD,GAExD,IAAI4E,EAAO,KA6BX,GA3BkB,MAAdzN,KAAK0H,QAER+F,EAAOzN,KAAK0H,MAAmB,aAGhCuH,EAAEg3C,SAASjmD,KAAKiT,QAAU,KAC1BhE,EAAEi3C,aAAalmD,KAAK6zD,YAAc,KAClC5kD,EAAEk3C,eAAenmD,KAAK8zD,cAAgB,KAGjB,MAAjB9zD,KAAKw1D,UAERvmD,EAAEu4C,UAAUxnD,KAAKw1D,UAIG,MAAjBx1D,KAAK8xD,UAER7iD,EAAE43C,UAAU7mD,KAAK8xD,SAAyB,MAAd9xD,KAAK0H,OACmC,GAAnEY,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYsuB,gBAAgB,IAG/C,MAARxuB,GAEHwB,EAAE63C,eAAer5C,GAGD,MAAbzN,KAAK8oD,MAAgB9oD,KAAK8oD,MAAQn7C,YAAYC,MAAQ5N,KAAKuqD,UAAYvqD,KAAKuqD,UAAY58C,YAAYC,KACxG,CACC,IAAIyO,EAAIrc,KAAK22D,kBAAkB1nD,EAAGG,EAAGC,EAAGvG,EAAGD,GAC3CoG,EAAEo3C,YAAYrmD,KAAK8oD,KAAM9oD,KAAKuqD,SAAUluC,EAAEjN,EAAGiN,EAAEhN,EAAGgN,EAAEpU,MAAOoU,EAAExU,OAAQ7H,KAAKwkD,wBAI1Ev1C,EAAEm3C,aAAapmD,KAAK8oD,MAGrB75C,EAAE03C,eAAe3mD,KAAK6oD,SAQvB3F,QAAQ92C,UAAUuqD,kBAAoB,SAAS1nD,EAAGG,EAAGC,EAAGvG,EAAGD,GAE1D,OAAO,IAAIyG,YAAYF,EAAGC,EAAGvG,EAAGD,IAQjCq6C,QAAQ92C,UAAUgqD,gBAAkB,SAASnnD,EAAGG,EAAGC,EAAGvG,EAAGD,GAKxDoG,EAAEqD,MAAMtS,KAAKsS,OACbrD,EAAE+2C,OAAOhmD,KAAK42D,mBAAoB52D,KAAK0lB,MAAO1lB,KAAK2lB,MAAOvW,EAAItG,EAAI,EAAGuG,EAAIxG,EAAI,IAQ9Eq6C,QAAQ92C,UAAUsqD,iBAAmB,SAASznD,EAAGG,EAAGC,EAAGvG,EAAGD,GAEzD7I,KAAK62D,gBAAgB5nD,EAAGG,EAAGC,EAAGvG,EAAGD,GAE5B7I,KAAK0zD,SAAyB,MAAd1zD,KAAK0H,OAC+B,GADdY,QAAQyW,SAClD/e,KAAK0H,MAAOiG,YAAY6vB,yBAA0B,KAElDvuB,EAAEu4C,WAAU,GACZxnD,KAAK82D,gBAAgB7nD,EAAGG,EAAGC,EAAGvG,EAAGD,KASnCq6C,QAAQ92C,UAAUyqD,gBAAkB,SAAS5nD,EAAGG,EAAGC,EAAGvG,EAAGD,KAOzDq6C,QAAQ92C,UAAU0qD,gBAAkB,SAAS7nD,EAAGG,EAAGC,EAAGvG,EAAGD,KAOzDq6C,QAAQ92C,UAAUqqD,eAAiB,SAASxnD,EAAGiX,KAO/Cg9B,QAAQ92C,UAAU2qD,WAAa,SAASjuD,EAAGD,GAE1C,IAAIkf,EAAI,EAER,GAA2E,KAAvEzf,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY0uB,uBAAwB,GAEpEtU,EAAI3e,KAAK2G,IAAIjH,EAAI,EAAGM,KAAK2G,IAAIlH,EAAI,EAAGP,QAAQyW,SAAS/e,KAAK0H,MACzDiG,YAAYyuB,cAAezuB,YAAY2pB,cAAgB,QAGzD,CACC,IAAI1jB,EAAItL,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYyuB,cACR,IAAxCzuB,YAAY0pB,2BAAmC,IAChDtP,EAAI3e,KAAK2G,IAAIjH,EAAI8K,EAAG/K,EAAI+K,GAGzB,OAAOmU,GAQRm7B,QAAQ92C,UAAU4qD,iBAAmB,SAAS/nD,EAAGG,EAAGC,EAAGvG,EAAGD,EAAGouD,GAE5D,IAAI3L,EAAKliD,KAAKgZ,KAAKpiB,KAAK4zD,YAAc,GAGtC3kD,EAAEo3C,YAAY,UAAW,UAAWj3C,EAAGC,EAAGvG,EAAO,GAAJD,EAAS,QAAS,GAAK,IACpEoG,EAAE24C,QACFqP,GAAO,EAAI3L,EAEPtrD,KAAKk3D,WAERjoD,EAAE44C,OAAOz4C,EAAIk8C,EAAK2L,EAAK5nD,EAAIi8C,GAC3Br8C,EAAE84C,OAAO34C,EAAIk8C,EAAIj8C,EAAIi8C,EAAIl8C,EAAIk8C,EAAIj8C,EAAIi8C,EAAK2L,GAC1ChoD,EAAE64C,OAAO14C,EAAIk8C,EAAIj8C,EAVP,GAUWxG,GACrBoG,EAAE84C,OAAO34C,EAAQ,GAAJtG,EAASuG,EAAQ,GAAJxG,EAASuG,EAAItG,EAAIwiD,EAAIj8C,EAXrC,GAWyCxG,GACnDoG,EAAE64C,OAAO14C,EAAItG,EAAIwiD,EAAIj8C,EAAIi8C,EAAK2L,GAC9BhoD,EAAE84C,OAAO34C,EAAItG,EAAIwiD,EAAIj8C,EAAIi8C,EAAIl8C,EAAItG,EAAIwiD,EAAK2L,EAAK5nD,EAAIi8C,KAInDr8C,EAAE44C,OAAOz4C,EAAIk8C,EAAIj8C,EAAIi8C,GACrBr8C,EAAE64C,OAAO14C,EAAIk8C,EAAIj8C,EAlBP,GAkBWxG,GACrBoG,EAAE84C,OAAO34C,EAAQ,GAAJtG,EAASuG,EAAQ,GAAJxG,EAASuG,EAAItG,EAAIwiD,EAAIj8C,EAnBrC,GAmByCxG,GACnDoG,EAAE64C,OAAO14C,EAAItG,EAAIwiD,EAAIj8C,EAAIi8C,IAG1Br8C,EAAE2hB,QACF3hB,EAAE65C,QAQH5F,QAAQ92C,UAAU+qD,UAAY,SAASloD,EAAGiX,EAAKsrC,EAAS4F,EAASxmC,EAAOymC,EAASC,GAEhF,GAAW,MAAPpxC,GAAeA,EAAI/jB,OAAS,EAChC,CACCm1D,EAA8B,MAAfA,GAAuBA,EACtC,IAAIC,EAAKrxC,EAAIA,EAAI/jB,OAAS,GAG1B,GAAIyuB,GAAS4gC,EACb,CAEC,IAAIgG,GADJtxC,EAAMA,EAAIuxC,SACG,GACTC,EAAK,IAAIvoD,QAAQooD,EAAGnoD,GAAKooD,EAAGpoD,EAAImoD,EAAGnoD,GAAK,EAAGmoD,EAAGloD,GAAKmoD,EAAGnoD,EAAIkoD,EAAGloD,GAAK,GACtE6W,EAAI9P,OAAO,EAAG,EAAGshD,GAGlB,IAAIj0C,EAAKyC,EAAI,GACTrhB,EAAI,EAYR,IATIyyD,EAEHroD,EAAE44C,OAAOpkC,EAAGrU,EAAGqU,EAAGpU,GAIlBJ,EAAE64C,OAAOrkC,EAAGrU,EAAGqU,EAAGpU,GAGZxK,GAAK,EAAUqhB,EAAI/jB,OAAS+jB,EAAI/jB,OAAS,IAChD,CACC,IAAI0O,EAAMqV,EAAI5d,QAAQ4gB,IAAIrkB,EAAGqhB,EAAI/jB,SAC7BoQ,EAAKkR,EAAGrU,EAAIyB,EAAIzB,EAChBqD,EAAKgR,EAAGpU,EAAIwB,EAAIxB,EAEpB,GAAImiD,IAAkB,GAANj/C,GAAiB,GAANE,KAAwB,MAAX4kD,GAAmB/uD,QAAQ/H,QAAQ82D,EAASxyD,EAAI,GAAK,GAC7F,CAIC,IAAIygB,EAAOlc,KAAKqY,KAAKlP,EAAKA,EAAKE,EAAKA,GAChCklD,EAAMplD,EAAKnJ,KAAK2G,IAAIqnD,EAAS9xC,EAAO,GAAKA,EACzCsyC,EAAMnlD,EAAKrJ,KAAK2G,IAAIqnD,EAAS9xC,EAAO,GAAKA,EAEzC6D,EAAKtY,EAAIzB,EAAIuoD,EACbj0C,EAAK7S,EAAIxB,EAAIuoD,EACjB3oD,EAAE64C,OAAO3+B,EAAIzF,GAQb,IAHA,IAAIhL,EAAOwN,EAAI5d,QAAQ4gB,IAAIrkB,EAAI,EAAGqhB,EAAI/jB,SAG/B0C,EAAIqhB,EAAI/jB,OAAS,GAAmC,GAA9BiH,KAAK2c,MAAMrN,EAAKtJ,EAAIyB,EAAIzB,IAAyC,GAA9BhG,KAAK2c,MAAMrN,EAAKrJ,EAAIwB,EAAIxB,IAEvFqJ,EAAOwN,EAAI5d,QAAQ4gB,IAAIrkB,EAAI,EAAGqhB,EAAI/jB,SAClC0C,IAGD0N,EAAKmG,EAAKtJ,EAAIyB,EAAIzB,EAClBqD,EAAKiG,EAAKrJ,EAAIwB,EAAIxB,EAElBiW,EAAOlc,KAAKC,IAAI,EAAGD,KAAKqY,KAAKlP,EAAKA,EAAKE,EAAKA,IAC5C,IAAIolD,EAAMtlD,EAAKnJ,KAAK2G,IAAIqnD,EAAS9xC,EAAO,GAAKA,EACzCwyC,EAAMrlD,EAAKrJ,KAAK2G,IAAIqnD,EAAS9xC,EAAO,GAAKA,EAEzC1C,EAAK/R,EAAIzB,EAAIyoD,EACbh1C,EAAKhS,EAAIxB,EAAIyoD,EAEjB7oD,EAAE84C,OAAOl3C,EAAIzB,EAAGyB,EAAIxB,EAAGuT,EAAIC,GAC3BhS,EAAM,IAAI1B,QAAQyT,EAAIC,QAItB5T,EAAE64C,OAAOj3C,EAAIzB,EAAGyB,EAAIxB,GAGrBoU,EAAK5S,EACLhM,IAGG+rB,EAEH3hB,EAAE2hB,QAIF3hB,EAAE64C,OAAOyP,EAAGnoD,EAAGmoD,EAAGloD,KAUrB6zC,QAAQ92C,UAAU2rD,YAAc,WAE/B/3D,KAAKmuD,aAELnuD,KAAKg4D,QAAU,SAERh4D,KAAK8oD,YACL9oD,KAAKuqD,gBACLvqD,KAAKwkD,yBACLxkD,KAAK6oD,cACL7oD,KAAKi4D,iBACLj4D,KAAKk4D,eACLl4D,KAAKm4D,kBACLn4D,KAAKo4D,gBACLp4D,KAAKwmD,iBACLxmD,KAAKw1D,gBACLx1D,KAAK8xD,gBACL9xD,KAAKk3D,iBACLl3D,KAAKq4D,OAsCbnV,QAAQ92C,UAAUhB,MAAQ,SAASyG,GAKlC,GAHA7R,KAAK6R,MAAQA,EACb7R,KAAK0H,MAAQmK,EAAMnK,MAED,MAAd1H,KAAK0H,MACT,CA0BC,GAzBA1H,KAAK8oD,KAAOxgD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYurB,gBAAiBl5B,KAAK8oD,MAC3E9oD,KAAKuqD,SAAWjiD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY2rB,oBAAqBt5B,KAAKuqD,UACnFvqD,KAAKwkD,kBAAoBl8C,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY4rB,yBAA0Bv5B,KAAKwkD,mBACjGxkD,KAAKiT,QAAU3K,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYqqB,cAAeh4B,KAAKiT,SAC5EjT,KAAK6zD,YAAcvrD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYsqB,mBAAoBj4B,KAAK6zD,aACrF7zD,KAAK8zD,cAAgBxrD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYuqB,qBAAsBl4B,KAAK8zD,eACzF9zD,KAAK6oD,OAASvgD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY6rB,kBAAmBx5B,KAAK6oD,QAC/E7oD,KAAK4zD,YAActrD,QAAQ0W,UAAUhf,KAAK0H,MAAOiG,YAAY+rB,kBAAmB15B,KAAK4zD,aACrF5zD,KAAKg4D,QAAU1vD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY8uB,cAAez8B,KAAKg4D,SAC5Eh4D,KAAKi4D,UAAY3vD,QAAQ0W,UAAUhf,KAAK0H,MAAOiG,YAAY2Z,gBAAiBtnB,KAAKi4D,WACjFj4D,KAAKk4D,QAAU5vD,QAAQ0W,UAAUhf,KAAK0H,MAAOiG,YAAYguB,cAAe37B,KAAKk4D,SAC7El4D,KAAKm4D,WAAa7vD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY+tB,iBAAkB17B,KAAKm4D,YAClFn4D,KAAKo4D,SAAW9vD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY8tB,eAAgBz7B,KAAKo4D,UAC9Ep4D,KAAKkjB,SAAW5a,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY2W,eAAgBtkB,KAAKkjB,UAC9EljB,KAAKwmD,UAAYl+C,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYiY,gBAAiB5lB,KAAKwmD,WAChFxmD,KAAK0lB,MAAoE,GAA5Dpd,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYkY,YAAa,GACnE7lB,KAAK2lB,MAAoE,GAA5Drd,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYmY,YAAa,GAG/C,MAAhB9lB,KAAKkuD,UAERluD,KAAK0lB,MAA2D,GAAnDpd,QAAQyW,SAAS/e,KAAK0H,MAAO,eAAgB,IAAW1H,KAAK0lB,MAC1E1lB,KAAK2lB,MAA2D,GAAnDrd,QAAQyW,SAAS/e,KAAK0H,MAAO,eAAgB,IAAW1H,KAAK2lB,OAGvE3lB,KAAKwmD,WAAa74C,YAAY6W,iBAAmBxkB,KAAKwmD,WAAa74C,YAAYmX,gBACnF,CACC,IAAIjU,EAAM7Q,KAAK0lB,MACf1lB,KAAK0lB,MAAQ1lB,KAAK2lB,MAClB3lB,KAAK2lB,MAAQ9U,EAGd7Q,KAAKw1D,SAAoF,GAAzEltD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY4tB,aAAcv7B,KAAKw1D,UAC5Ex1D,KAAK8xD,SAAoF,GAAzExpD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYouB,aAAc/7B,KAAK8xD,UAC5E9xD,KAAKk3D,UAAuF,GAA3E5uD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYuuB,cAAel8B,KAAKk3D,WAC9El3D,KAAKq4D,MAA6E,GAArE/vD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYwsB,YAAan6B,KAAKq4D,OAEpEr4D,KAAK8oD,MAAQn7C,YAAYC,OAE5B5N,KAAK8oD,KAAO,MAGT9oD,KAAKuqD,UAAY58C,YAAYC,OAEhC5N,KAAKuqD,SAAW,MAGbvqD,KAAK6oD,QAAUl7C,YAAYC,OAE9B5N,KAAK6oD,OAAS,QAcjB3F,QAAQ92C,UAAUksD,UAAY,SAASlkD,GAExB,MAAVA,IAEHA,EAAS,IAGVpU,KAAKoU,OAASA,EAEG,MAAbpU,KAAKkF,OAERlF,KAAKkF,KAAKwC,MAAM0M,OAASA,IAS3B8uC,QAAQ92C,UAAUmsD,UAAY,WAE7B,OAAOv4D,KAAKoU,QAQb8uC,QAAQ92C,UAAUosD,YAAc,WAE/B,OAAO,GASRtV,QAAQ92C,UAAUqoD,kBAAoB,WAIrC,GAAIz0D,KAAK2zD,mBAAkC,MAAb3zD,KAAKkF,MAA6C,MAA7BlF,KAAKkF,KAAK+rB,gBAE5D,IAEC,IAAI5U,EAAIrc,KAAKkF,KAAK4oD,UAElB,GAAIzxC,EAAEpU,MAAQ,GAAKoU,EAAExU,OAAS,EAO7B,OALA7H,KAAKqzD,YAAc,IAAI/jD,YAAY+M,EAAEjN,EAAGiN,EAAEhN,EAAGgN,EAAEpU,MAAOoU,EAAExU,aAGxD7H,KAAKqzD,YAAY7iD,KAAKxQ,KAAK4zD,YAAc5zD,KAAKsS,MAAQ,GAKxD,MAAMlE,IAMP,GAAmB,MAAfpO,KAAKymB,OACT,CACC,IAAIonC,EAAO7tD,KAAKu2D,oBAEhB,GAAY,MAAR1I,EACJ,CACC7tD,KAAKy4D,mBAAmB5K,GACxB,IAAI2C,EAAMxwD,KAAK42D,mBAEJ,GAAPpG,IAEH3C,EAAOvlD,QAAQ2a,eAAe4qC,EAAM2C,IAItCxwD,KAAKqzD,YAAcxF,IAUrB3K,QAAQ92C,UAAUmqD,kBAAoB,WAErC,IAAID,EAAKt2D,KAAKymB,OAAOhX,QAQrB,OANqB,MAAhBzP,KAAKkuD,UAAoBluD,KAAKwmD,WAAa74C,YAAY6W,iBAC3DxkB,KAAKwmD,WAAa74C,YAAYmX,kBAAqB9kB,KAAK40D,0BAExD0B,EAAG3lD,WAGG2lD,GAQRpT,QAAQ92C,UAAUqsD,mBAAqB,SAAS5K,GAE3C7tD,KAAKw1D,WAER3H,EAAK5lD,OAASmB,KAAKgZ,KAAKzU,YAAYimB,gBAAkB5zB,KAAKsS,OAC3Du7C,EAAKhmD,QAAUuB,KAAKgZ,KAAKzU,YAAYkmB,gBAAkB7zB,KAAKsS,QAI7Du7C,EAAKr9C,KAAKxQ,KAAK4zD,YAAc5zD,KAAKsS,MAAQ,IAQ3C4wC,QAAQ92C,UAAUwoD,sBAAwB,WAGzC,OAAuB,MAAhB50D,KAAKkuD,UAAoBluD,KAAKwmD,WAAa74C,YAAY6W,iBAC5DxkB,KAAKwmD,WAAa74C,YAAYmX,kBAQjCo+B,QAAQ92C,UAAUssD,YAAc,WAE/B,OAAyB,MAAjB14D,KAAKkjB,SAAoBljB,KAAKkjB,SAAW,GAQlDggC,QAAQ92C,UAAUusD,gBAAkB,WAEnC,IAAInI,EAAMxwD,KAAK04D,cAOf,OALqE,GAAjEpwD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY6Z,iBAAkB,KAE9DgpC,GAAOoI,OAAOxsD,UAAUysD,sBAGlBrI,GAQRtN,QAAQ92C,UAAUwqD,iBAAmB,WAEpC,IAAIpG,EAAMxwD,KAAK04D,cAkBf,OAhBsB,MAAlB14D,KAAKwmD,YAEJxmD,KAAKwmD,WAAa74C,YAAY6W,gBAEjCgsC,GAAO,IAECxwD,KAAKwmD,WAAa74C,YAAYkX,eAEtC2rC,GAAO,IAECxwD,KAAKwmD,WAAa74C,YAAYmX,kBAEtC0rC,GAAO,KAIFA,GAQRtN,QAAQ92C,UAAUoqD,8BAAgC,SAASpnD,EAAGC,EAAGvG,EAAGD,GAEnE,IAAIgH,EAAOhP,SAASsC,gBAAgBwK,YAAY6gB,OAAQ,QASxD,OARA3e,EAAKxL,aAAa,IAAK+K,GACvBS,EAAKxL,aAAa,IAAKgL,GACvBQ,EAAKxL,aAAa,QAASyE,GAC3B+G,EAAKxL,aAAa,SAAUwE,GAC5BgH,EAAKxL,aAAa,OAAQ,QAC1BwL,EAAKxL,aAAa,SAAU,QAC5BwL,EAAKxL,aAAa,iBAAkB,OAE7BwL,GAURqzC,QAAQ92C,UAAU2pD,8BAAgC,SAAS7wD,GAE1DA,EAAKwC,MAAM+4C,gBAAkB,QAAWvgD,SAAS0F,cAAgB,sBAQlEs9C,QAAQ92C,UAAU6pD,oBAAsB,SAAS6C,GAEhD,GAAa,MAATA,EAEH,IAAK,IAAIxsD,KAAOwsD,EAChB,CACC,IAAIvO,EAAWuO,EAAMxsD,GAEL,MAAZi+C,IAEHA,EAASyL,YAAczL,EAASyL,YAAc,GAAK,EAExB,GAAvBzL,EAASyL,YAA0C,MAAvBzL,EAAS12C,YAExC02C,EAAS12C,WAAWC,YAAYy2C,MAarCrH,QAAQ92C,UAAU6iB,QAAU,WAEV,MAAbjvB,KAAKkF,OAER+E,QAAQm7B,QAAQplC,KAAKkF,MAEO,MAAxBlF,KAAKkF,KAAK2O,YAEb7T,KAAKkF,KAAK2O,WAAWC,YAAY9T,KAAKkF,MAGvClF,KAAKkF,KAAO,MAIblF,KAAKi2D,oBAAoBj2D,KAAKk2D,cAC9Bl2D,KAAKk2D,aAAe,MAGrBj2D,WAAWijD,aAA6B,IAAZA,QAA0BA,aAAUt8C,EAuNhE0B,QAAQoX,OAAO0uC,UAAWlL,SAQ1BkL,UAAU2K,kBAAmB,EAS7B3K,UAAU4K,WAAY,EAOtB5K,UAAUhiD,UAAUiiD,KAAO,KAO3BD,UAAUhiD,UAAU6sD,YAAc,KAOlC7K,UAAUhiD,UAAUq8C,OAAS,KAO7B2F,UAAUhiD,UAAU8sD,GAAK,KAOzB9K,UAAUhiD,UAAU+sD,GAAK,KAOzB/K,UAAUhiD,UAAUgtD,OAAS,KAO7BhL,UAAUhiD,UAAUitD,OAAS,KAO7BjL,UAAUhiD,UAAUwnD,YAAc,KAOlCxF,UAAUhiD,UAAUkiD,iBAAmB,WAGtCtuD,KAAKq5D,OAASr5D,KAAKquD,KAAK/pD,qBAAqB,cAAc,GAC3DtE,KAAKo5D,OAASp5D,KAAKquD,KAAK/pD,qBAAqB,cAAc,GAC3DtE,KAAKk5D,GAAKj6C,OAAOjf,KAAKquD,KAAK14C,aAAa,MAAQ,KAChD3V,KAAKm5D,GAAKl6C,OAAOjf,KAAKquD,KAAK14C,aAAa,MAAQ,KAKhD,IAAI8yC,EAASzoD,KAAKquD,KAAK14C,aAAa,UACpC3V,KAAKyoD,OAAoB,MAAVA,EAAkBA,EAAS,WAM1C,IAAI6C,EAAKtrD,KAAKquD,KAAK14C,aAAa,eAChC3V,KAAK4zD,YAAqB,MAANtI,EAAcA,EAAK,KASxC8C,UAAUhiD,UAAUmiD,iBAAmB,WAEtC,IAAI+K,EAAQt5D,KAAKquD,KAAK/pD,qBAAqB,eAAe,GAE1D,GAAa,MAATg1D,EACJ,CACC,IAAIzoD,EAAMvI,QAAQsO,cAAc0iD,GAEhC,GAAW,MAAPzoD,GAAeA,EAAI1O,OAAS,EAChC,CACCnC,KAAKi5D,YAAc,GAEnB,IAAK,IAAIp0D,EAAI,EAAGA,EAAIgM,EAAI1O,OAAQ0C,IAE/B7E,KAAKi5D,YAAYrsD,KAAK5M,KAAKu5D,gBAAgB1oD,EAAIhM,QAWnDupD,UAAUhiD,UAAUmtD,gBAAkB,SAASr0D,GAE9C,IAAIkK,EAAI6P,OAAO/Z,EAAKyQ,aAAa,MAC7BtG,EAAI4P,OAAO/Z,EAAKyQ,aAAa,MAC7B6jD,EAA8C,KAAlCt0D,EAAKyQ,aAAa,aAC9B5V,EAAOmF,EAAKyQ,aAAa,QAE7B,OAAO,IAAI8jD,uBAAuB,IAAItqD,QAAQC,EAAGC,GAAImqD,EAAWz5D,IAUjEquD,UAAUhiD,UAAUstD,sBAAwB,SAASx0D,EAAMy0D,EAAWtnD,GAErE,IAAI1F,EAAS3M,KAAK45D,kBAAkB10D,EAAMy0D,EAAWtnD,GACjDwnD,EAAM30D,EAAKyQ,aAAa,aAO5B,OALKy4C,UAAU2K,kBAA2B,MAAPc,GAAuB,KAAPA,KAElDltD,EAAS7H,YAAY+G,IAAIc,IAGnBA,GAWRyhD,UAAUhiD,UAAUwtD,kBAAoB,SAAS10D,EAAMy0D,EAAWtnD,GAEjE,IAAI1F,EAASzH,EAAKyQ,aAAagkD,GAE/B,GAAc,MAAVhtD,EACJ,CACC,IAAI0B,EAAO/F,QAAQqQ,eAAezT,GAElC,GAAY,MAARmJ,GAAgB+/C,UAAU4K,UAC9B,CACC,IAAIzuD,EAAQjC,QAAQ6M,KAAK9G,GAEJ,mBAAX,IAET1B,EAASpC,EAAM8H,KAKlB,OAAO1F,GAQRyhD,UAAUhiD,UAAU42C,UAAY,SAASv0B,EAAQpc,EAAOjD,EAAGC,EAAGvG,EAAGD,GAEhE,IAAIixD,EAAQrrC,EAAO80B,OAAOkU,QAQtBjR,EAAYl+C,QAAQyW,SAAS1M,EAAM3K,MAAOiG,YAAYiY,gBAAiB,MACvE6iC,EAASzoD,KAAK+5D,cAAc1nD,EAAM3K,MAAO0H,EAAGC,EAAGvG,EAAGD,EAAG29C,GACrDwT,EAAW5wD,KAAK2G,IAAI04C,EAAOxgD,MAAOwgD,EAAO5gD,QACzCyjD,EAA0B,WAApBtrD,KAAK4zD,YACb30C,OAAO3W,QAAQ0W,UAAU3M,EAAM3K,MAAOiG,YAAY+rB,kBAAmB,IACrEza,OAAOjf,KAAK4zD,aAAeoG,EAC7BvrC,EAAOm4B,eAAe0E,GAGH,MAAfj5C,EAAM3K,OAAyF,KAAxEY,QAAQyW,SAAS1M,EAAM3K,MAAOiG,YAAYwrB,qBAAsB,OAE1F1K,EAAOk4B,eAAeh5C,YAAYC,MAClC6gB,EAAO5e,KAAKT,EAAGC,EAAGvG,EAAGD,GACrB4lB,EAAOo6B,SACPp6B,EAAOk4B,eAAet0C,EAAMw2C,SAG7B7oD,KAAKi6D,aAAaxrC,EAAQpc,EAAOjD,EAAGC,EAAGvG,EAAGD,EAAG7I,KAAKo5D,OAAQ3Q,GAAQ,GAAO,GACzEzoD,KAAKi6D,aAAaxrC,EAAQpc,EAAOjD,EAAGC,EAAGvG,EAAGD,EAAG7I,KAAKq5D,OAAQ5Q,GAAQ,GAChEp2C,EAAMqhD,SAA0B,MAAfrhD,EAAM3K,OACiC,GADhBY,QAAQyW,SACjD1M,EAAM3K,MAAOiG,YAAY6vB,yBAA0B,IAGhD/O,EAAO80B,OAAOphD,QAAU23D,EAAM33D,SAEjCssB,EAAO80B,OAASuW,IASlB1L,UAAUhiD,UAAU6tD,aAAe,SAASxrC,EAAQpc,EAAOjD,EAAGC,EAAGvG,EAAGD,EAAG3D,EAAMujD,EAAQyR,EAAe9W,GAEnG,GAAY,MAARl+C,GAAgB4D,EAAI,GAAKD,EAAI,EAIhC,IAFA,IAAIgI,EAAM3L,EAAK0Q,WAED,MAAP/E,GAEFA,EAAI4E,UAAY9H,YAAY+H,kBAE/B1V,KAAKm6D,SAAS1rC,EAAQpc,EAAOxB,EAAK43C,EAAQyR,EAAe9W,GAG1DvyC,EAAMA,EAAIgF,aAkBbu4C,UAAUhiD,UAAU2tD,cAAgB,SAAS1nD,EAAOjD,EAAGC,EAAGvG,EAAGD,EAAG29C,GAE/D,IAAIrmC,EAAK/Q,EACLgR,EAAK/Q,EACLqD,EAAK5J,EAAI9I,KAAKk5D,GACdvmD,EAAK9J,EAAI7I,KAAKm5D,GAEdiB,EAAW5T,GAAa74C,YAAY6W,iBAAmBgiC,GAAa74C,YAAYmX,gBAEpF,GAAIs1C,EACJ,CACCznD,EAAK7J,EAAI9I,KAAKm5D,GACdzmD,EAAK7J,EAAI7I,KAAKk5D,GAEd,IAAI/pB,GAASrmC,EAAID,GAAK,EAEtBsX,GAAMgvB,EACN/uB,GAAM+uB,EAqBP,MAlBmB,SAAfnvC,KAAKyoD,SAGR/1C,EADAC,EAAKvJ,KAAK2G,IAAI2C,EAAIC,GAIdynD,GAEHj6C,IAAOtX,EAAI7I,KAAKk5D,GAAKxmD,GAAM,EAC3B0N,IAAOtX,EAAI9I,KAAKm5D,GAAKxmD,GAAM,IAI3BwN,IAAOrX,EAAI9I,KAAKk5D,GAAKxmD,GAAM,EAC3B0N,IAAOvX,EAAI7I,KAAKm5D,GAAKxmD,GAAM,IAItB,IAAIrD,YAAY6Q,EAAIC,EAAI1N,EAAIC,IAQpCy7C,UAAUhiD,UAAU+tD,SAAW,SAAS1rC,EAAQpc,EAAOnN,EAAMujD,EAAQyR,EAAe9W,GAEnF,IAAIrjD,EAAOmF,EAAKoR,SACZ6J,EAAKsoC,EAAOr5C,EACZgR,EAAKqoC,EAAOp5C,EACZqD,EAAK+1C,EAAOxgD,MACZ0K,EAAK81C,EAAO5gD,OACZmyD,EAAW5wD,KAAK2G,IAAI2C,EAAIC,GAE5B,GAAY,QAAR5S,EAEH0uB,EAAO2yB,YAEH,GAAY,WAARrhD,EAER0uB,EAAO40B,eAEH,GAAID,EACT,CACC,GAAY,QAARrjD,EACJ,CACC0uB,EAAOm5B,QAEP,IAAIyS,GAAiB,EAErB,GAAoC,KAAhCn1D,EAAKyQ,aAAa,WACtB,CACC0kD,GAAiB,EASjB,IAPA,IAAIjD,EAAUn4C,OAAO/Z,EAAKyQ,aAAa,YACnC2kD,EAAa,EACbC,EAAO,GAGPC,EAAYt1D,EAAK0Q,WAED,MAAb4kD,GACP,CACC,GAAIA,EAAU/kD,UAAY9H,YAAY+H,iBACtC,CACC,IAAI+kD,EAAYD,EAAUlkD,SAE1B,GAAiB,QAAbmkD,GAAoC,QAAbA,EAY3B,CAECJ,GAAiB,EACjB,MAbiB,QAAbI,GAAsC,GAAfF,EAAKp4D,QAE/Bo4D,EAAK3tD,KAAK,IAGX2tD,EAAKA,EAAKp4D,OAAS,GAAGyK,KAAK,IAAIuC,QAAQgR,EAAKlB,OAAOu7C,EAAU7kD,aAAa,MAAQjD,EACjF0N,EAAKnB,OAAOu7C,EAAU7kD,aAAa,MAAQhD,IAC5C2nD,IAUFE,EAAYA,EAAU3kD,YAGvB,IAAKwkD,GAAkBC,EAAa,EAEnC,IAAK,IAAIz1D,EAAI,EAAGA,EAAI01D,EAAKp4D,OAAQ0C,IACjC,CACC,IAAI+rB,GAAQ,EAAO8pC,EAAKH,EAAK11D,GAAG,GAAI0yD,EAAKgD,EAAK11D,GAAG01D,EAAK11D,GAAG1C,OAAS,GAE9Du4D,EAAGtrD,GAAKmoD,EAAGnoD,GAAKsrD,EAAGrrD,GAAKkoD,EAAGloD,IAE9BkrD,EAAK11D,GAAGkhD,MACRn1B,GAAQ,GAGT5wB,KAAKm3D,UAAU1oC,EAAQ8rC,EAAK11D,IAAI,EAAMuyD,EAASxmC,QAKhDypC,GAAiB,EAInB,GAAIA,EAKH,IAFIG,EAAYt1D,EAAK0Q,WAED,MAAb4kD,GAEFA,EAAU/kD,UAAY9H,YAAY+H,kBAErC1V,KAAKm6D,SAAS1rC,EAAQpc,EAAOmoD,EAAW/R,EAAQyR,EAAe9W,GAGhEoX,EAAYA,EAAU3kD,iBAIpB,GAAY,SAAR9V,EAER0uB,EAAOmC,aAEH,GAAY,QAAR7wB,EAER0uB,EAAOo5B,OAAO1nC,EAAKlB,OAAO/Z,EAAKyQ,aAAa,MAAQjD,EAAI0N,EAAKnB,OAAO/Z,EAAKyQ,aAAa,MAAQhD,QAE1F,GAAY,QAAR5S,EAER0uB,EAAOq5B,OAAO3nC,EAAKlB,OAAO/Z,EAAKyQ,aAAa,MAAQjD,EAAI0N,EAAKnB,OAAO/Z,EAAKyQ,aAAa,MAAQhD,QAE1F,GAAY,QAAR5S,EAER0uB,EAAOs5B,OAAO5nC,EAAKlB,OAAO/Z,EAAKyQ,aAAa,OAASjD,EACnD0N,EAAKnB,OAAO/Z,EAAKyQ,aAAa,OAAShD,EACvCwN,EAAKlB,OAAO/Z,EAAKyQ,aAAa,OAASjD,EACvC0N,EAAKnB,OAAO/Z,EAAKyQ,aAAa,OAAShD,QAErC,GAAY,SAAR5S,EAER0uB,EAAOu5B,QAAQ7nC,EAAKlB,OAAO/Z,EAAKyQ,aAAa,OAASjD,EACpD0N,EAAKnB,OAAO/Z,EAAKyQ,aAAa,OAAShD,EACvCwN,EAAKlB,OAAO/Z,EAAKyQ,aAAa,OAASjD,EACvC0N,EAAKnB,OAAO/Z,EAAKyQ,aAAa,OAAShD,EACvCwN,EAAKlB,OAAO/Z,EAAKyQ,aAAa,OAASjD,EACvC0N,EAAKnB,OAAO/Z,EAAKyQ,aAAa,OAAShD,QAErC,GAAY,OAAR5S,EAER0uB,EAAOw5B,MAAMhpC,OAAO/Z,EAAKyQ,aAAa,OAASjD,EAC7CuM,OAAO/Z,EAAKyQ,aAAa,OAAShD,EAClCsM,OAAO/Z,EAAKyQ,aAAa,oBACzBsJ,OAAO/Z,EAAKyQ,aAAa,mBACzBsJ,OAAO/Z,EAAKyQ,aAAa,eACzBwK,EAAKlB,OAAO/Z,EAAKyQ,aAAa,MAAQjD,EACtC0N,EAAKnB,OAAO/Z,EAAKyQ,aAAa,MAAQhD,QAEpC,GAAY,QAAR5S,EAER0uB,EAAO5e,KAAKsQ,EAAKlB,OAAO/Z,EAAKyQ,aAAa,MAAQjD,EAChD0N,EAAKnB,OAAO/Z,EAAKyQ,aAAa,MAAQhD,EACtCsM,OAAO/Z,EAAKyQ,aAAa,MAAQjD,EACjCuM,OAAO/Z,EAAKyQ,aAAa,MAAQhD,QAE/B,GAAY,aAAR5S,EACT,CACC,IAAI46D,EAAU17C,OAAO/Z,EAAKyQ,aAAa,YAExB,GAAXglD,IAEHA,EAAkD,IAAxChtD,YAAY0pB,2BAGvB,IAAIvuB,EAAImW,OAAO/Z,EAAKyQ,aAAa,MAAQjD,EACrC7J,EAAIoW,OAAO/Z,EAAKyQ,aAAa,MAAQhD,EACrCioD,EAAS37C,OAAO07C,GAAW,IAC3B5yC,EAAI3e,KAAK2G,IAAIjH,EAAI8xD,EAAQ/xD,EAAI+xD,GAEjCnsC,EAAO85B,UAAUpoC,EAAKlB,OAAO/Z,EAAKyQ,aAAa,MAAQjD,EACrD0N,EAAKnB,OAAO/Z,EAAKyQ,aAAa,MAAQhD,EACtC7J,EAAGD,EAAGkf,EAAGA,QAEP,GAAY,WAARhoB,EAER0uB,EAAO+5B,QAAQroC,EAAKlB,OAAO/Z,EAAKyQ,aAAa,MAAQjD,EACpD0N,EAAKnB,OAAO/Z,EAAKyQ,aAAa,MAAQhD,EACtCsM,OAAO/Z,EAAKyQ,aAAa,MAAQjD,EACjCuM,OAAO/Z,EAAKyQ,aAAa,MAAQhD,QAE9B,GAAY,SAAR5S,GAER,IAAKsS,EAAMqhD,QACX,CACC,IAAIzuD,EAAMjF,KAAK45D,kBAAkB10D,EAAM,MAAOmN,GAE9Coc,EAAO4kB,MAAMlzB,EAAKlB,OAAO/Z,EAAKyQ,aAAa,MAAQjD,EAClD0N,EAAKnB,OAAO/Z,EAAKyQ,aAAa,MAAQhD,EACtCsM,OAAO/Z,EAAKyQ,aAAa,MAAQjD,EACjCuM,OAAO/Z,EAAKyQ,aAAa,MAAQhD,EACjC1N,GAAK,EAAqC,KAA9BC,EAAKyQ,aAAa,SACA,KAA9BzQ,EAAKyQ,aAAa,gBAGhB,GAAY,QAAR5V,GAER,IAAKsS,EAAMqhD,QACX,CACC,IAAI59C,EAAM9V,KAAK05D,sBAAsBx0D,EAAM,MAAOmN,GAC9C6Q,EAA4C,KAAjChe,EAAKyQ,aAAa,aAAsB,GAAK,EAE5D,GAAwC,KAApCzQ,EAAKyQ,aAAa,eACtB,CACC,IAAIsM,EAAK5P,EAAM6Q,SAGXwC,EAAqE,GAA7Dpd,QAAQyW,SAAS1M,EAAM3K,MAAOiG,YAAYkY,YAAa,GAC/DF,EAAqE,GAA7Drd,QAAQyW,SAAS1M,EAAM3K,MAAOiG,YAAYmY,YAAa,GAE/DJ,GAASC,EAEZzC,GAAYjB,EAEJyD,GAASC,EAEjBzC,GAAYjB,EAIZiB,GAAYjB,EAIdiB,GAAYhe,EAAKyQ,aAAa,YAE9B8Y,EAAOpgB,KAAK8R,EAAKlB,OAAO/Z,EAAKyQ,aAAa,MAAQjD,EAChD0N,EAAKnB,OAAO/Z,EAAKyQ,aAAa,MAAQhD,EACtC,EAAG,EAAGmD,EAAK5Q,EAAKyQ,aAAa,UAAY,OACzCzQ,EAAKyQ,aAAa,WAAa,OAAO,EAAO,GAC7C,MAAM,EAAOuN,SAGZ,GAAY,iBAARnjB,EACT,CACC,IAAImuD,EAAU2M,kBAAkBC,WAAW51D,EAAKyQ,aAAa,SAE7D,GAAe,MAAXu4C,EACJ,CACC,IAAI9+C,EAAI+Q,EAAKlB,OAAO/Z,EAAKyQ,aAAa,MAAQjD,EAC1CrD,EAAI+Q,EAAKnB,OAAO/Z,EAAKyQ,aAAa,MAAQhD,EAC1C7J,EAAImW,OAAO/Z,EAAKyQ,aAAa,MAAQjD,EACrC7J,EAAIoW,OAAO/Z,EAAKyQ,aAAa,MAAQhD,EAEzCu7C,EAAQlL,UAAUv0B,EAAQpc,EAAOjD,EAAGC,EAAGvG,EAAGD,SAGvC,GAAY,cAAR9I,EAER0uB,EAAOs6B,qBAEH,GAAY,QAARhpD,EAER0uB,EAAOq6B,YAEH,GAAY,UAAR/oD,EAER0uB,EAAOo6B,cAEH,GAAY,eAAR9oD,EACT,CACC,IAAI8Y,EAAmC,KAA9B3T,EAAKyQ,aAAa,SAAmB,EAAIqkD,EAClDvrC,EAAOm4B,eAAe3nC,OAAO/Z,EAAKyQ,aAAa,UAAYkD,QAEvD,GAAY,UAAR9Y,EAER0uB,EAAOo4B,UAAyC,KAA/B3hD,EAAKyQ,aAAa,gBAE/B,GAAY,eAAR5V,EACT,CACC,IAAIgI,EAAQ7C,EAAKyQ,aAAa,WAE9B,GAAa,MAAT5N,EACJ,CACC,IAAI8I,EAAM9I,EAAMwG,MAAM,KAClBk9C,EAAM,GAEV,IAAS5mD,EAAI,EAAGA,EAAIgM,EAAI1O,OAAQ0C,IAE3BgM,EAAIhM,GAAG1C,OAAS,GAEnBspD,EAAI7+C,KAAKqS,OAAOpO,EAAIhM,IAAMm1D,GAI5BjyD,EAAQ0jD,EAAIv8C,KAAK,KACjBuf,EAAOq4B,eAAe/+C,QAGP,eAARhI,EAER0uB,EAAOk4B,eAAezhD,EAAKyQ,aAAa,UAExB,WAAR5V,EAER0uB,EAAOs4B,WAAW7hD,EAAKyQ,aAAa,QAEpB,YAAR5V,EAER0uB,EAAOu4B,YAAY9hD,EAAKyQ,aAAa,SAErB,cAAR5V,EAER0uB,EAAOw4B,cAAchoC,OAAO/Z,EAAKyQ,aAAa,WAE9B,aAAR5V,EAER0uB,EAAO23B,aAAalhD,EAAKyQ,aAAa,UAEtB,SAAR5V,GAIQ,aAARA,GAIQ,eAARA,EANR0uB,EAAOw3B,SAAS/gD,EAAKyQ,aAAa,UAUlB,aAAR5V,EAER0uB,EAAOy4B,aAAahiD,EAAKyQ,aAAa,UAEtB,aAAR5V,EAER0uB,EAAO84B,aAAariD,EAAKyQ,aAAa,UAEtB,cAAR5V,EAER0uB,EAAO64B,cAAcpiD,EAAKyQ,aAAa,WAEvB,YAAR5V,GAER0uB,EAAO44B,YAAYpoC,OAAO/Z,EAAKyQ,aAAa,SAAWqkD,IAGpDE,GAA0B,cAARn6D,GAAgC,QAARA,GAA0B,UAARA,IAE/Dm6D,GAAgB,EAChBzrC,EAAO+4B,WAAU,MAKpBvnD,WAAWmuD,eAAiC,IAAdA,UAA4BA,eAAYxnD,EAwBtE,IAAIi0D,kBACJ,CAOCE,SAAU,GAOVC,WAAY,SAASj7D,EAAMmuD,GAE1B2M,kBAAkBE,SAASh7D,GAAQmuD,GAQpC4M,WAAY,SAAS/6D,GAEpB,OAAO86D,kBAAkBE,SAASh7D,KAKpCE,WAAW46D,uBAAiD,IAAtBA,kBAAoCA,uBAAoBj0D,EAM9F,IAAIq0D,SACJ,CAWCC,QAAS,GAQTC,UAAW,SAAS70D,EAAMiE,GAEzB0wD,SAASC,QAAQ50D,GAAQiE,GAQ1B6wD,aAAc,SAAS3sC,EAAQpc,EAAO/L,EAAMixD,EAAI8D,EAAOC,EAAOztC,EAAM/J,EAAQwnC,EAAIT,GAE/E,IAAItgD,EAAQ0wD,SAASC,QAAQ50D,GAE7B,OAAiB,MAATiE,EAAiBA,EAAMkkB,EAAQpc,EAAO/L,EAAMixD,EAAI8D,EAAOC,EAAOztC,EAAM/J,EAAQwnC,EAAIT,GAAU,OAyNpG,SAAS0Q,QAAQ90C,EAAQqiC,EAAMD,EAAQ+K,GAEtC1Q,QAAQ3zC,KAAKvP,MACbA,KAAKymB,OAASA,EACdzmB,KAAK8oD,KAAOA,EACZ9oD,KAAK6oD,OAASA,EACd7oD,KAAK4zD,YAA8B,MAAfA,EAAuBA,EAAc,EAgE1D,SAAS4H,QAAQ/0C,EAAQqiC,EAAMD,EAAQ+K,GAEtC2H,QAAQhsD,KAAKvP,MACbA,KAAKymB,OAASA,EACdzmB,KAAK8oD,KAAOA,EACZ9oD,KAAK6oD,OAASA,EACd7oD,KAAK4zD,YAA8B,MAAfA,EAAuBA,EAAc,EAmD1D,SAAS6H,iBAAiBh1C,EAAQqiC,EAAMD,EAAQ+K,GAE/C1Q,QAAQ3zC,KAAKvP,MACbA,KAAKymB,OAASA,EACdzmB,KAAK8oD,KAAOA,EACZ9oD,KAAK6oD,OAASA,EACd7oD,KAAK4zD,YAA8B,MAAfA,EAAuBA,EAAc,EA4H1D,SAAS8H,UAAUj1C,EAAQqiC,EAAMD,EAAQ+K,GAExC1Q,QAAQ3zC,KAAKvP,MACbA,KAAKymB,OAASA,EACdzmB,KAAK8oD,KAAOA,EACZ9oD,KAAK6oD,OAASA,EACd7oD,KAAK4zD,YAA8B,MAAfA,EAAuBA,EAAc,EAkE1D,SAAS+H,gBAAgBl1C,EAAQqiC,EAAMD,EAAQ+K,GAE9C1Q,QAAQ3zC,KAAKvP,MACbA,KAAKymB,OAASA,EACdzmB,KAAK8oD,KAAOA,EACZ9oD,KAAK6oD,OAASA,EACd7oD,KAAK4zD,YAA8B,MAAfA,EAAuBA,EAAc,EA0F1D,SAASgI,UAAUn1C,EAAQqiC,EAAMD,EAAQ+K,GAExC1Q,QAAQ3zC,KAAKvP,MACbA,KAAKymB,OAASA,EACdzmB,KAAK8oD,KAAOA,EACZ9oD,KAAK6oD,OAASA,EACd7oD,KAAK4zD,YAA8B,MAAfA,EAAuBA,EAAc,EA6D1D,SAAS/B,WAAWmB,EAAQnK,EAAQ+K,GAEnC1Q,QAAQ3zC,KAAKvP,MACbA,KAAKgzD,OAASA,EACdhzD,KAAK6oD,OAASA,EACd7oD,KAAK4zD,YAA8B,MAAfA,EAAuBA,EAAc,EA0I1D,SAASiI,QAAQ7I,EAAQlK,EAAMD,EAAQ+K,EAAakI,EAAY9D,EAASE,GAExEhV,QAAQ3zC,KAAKvP,MACbA,KAAKgzD,OAASA,EACdhzD,KAAK8oD,KAAOA,EACZ9oD,KAAK6oD,OAASA,EACd7oD,KAAK4zD,YAA8B,MAAfA,EAAuBA,EAAc,EACzD5zD,KAAK87D,WAA4B,MAAdA,EAAsBA,EAAanuD,YAAY6pB,YAClEx3B,KAAKg4D,QAAsB,MAAXA,EAAmBA,EAAUrqD,YAAY4pB,cACzDv3B,KAAKk4D,QAAsB,MAAXA,EAAmBA,EAAUvqD,YAAY8pB,WA6G1D,SAASskC,iBAAiB/I,EAAQlK,EAAMD,EAAQ+K,EAAakI,EAAY9D,EAASE,GAEjFhV,QAAQ3zC,KAAKvP,MACbA,KAAKgzD,OAASA,EACdhzD,KAAK8oD,KAAOA,EACZ9oD,KAAK6oD,OAASA,EACd7oD,KAAK4zD,YAA8B,MAAfA,EAAuBA,EAAc,EACzD5zD,KAAK87D,WAA4B,MAAdA,EAAsBA,EAAanuD,YAAY6pB,YAClEx3B,KAAKg8D,aAA2B,MAAXhE,EAAmBA,EAAUrqD,YAAY4pB,cAC9Dv3B,KAAKi4D,UAAYtqD,YAAY8pB,WAAa,EAC1Cz3B,KAAKk4D,QAAUvqD,YAAY8pB,WAAa,EAufzC,SAASmhC,OAAO7wD,EAAO0e,EAAQ2F,EAAOC,EAAQpQ,EAC7CggD,EAAQpuC,EAAMf,EAAWkrC,EAASkE,EAAYC,EAC9CC,EAAeC,EAAajL,EAAYkL,EAAYjtC,EACpDq5B,EAAM6T,EAASvnD,EAAUwnD,EAAcC,GAEvCvZ,QAAQ3zC,KAAKvP,MACbA,KAAK+H,MAAQA,EACb/H,KAAKymB,OAASA,EACdzmB,KAAKic,MAAkB,MAATA,EAAiBA,EAAQ,QACvCjc,KAAKosB,MAAkB,MAATA,EAAiBA,EAAQze,YAAYwyB,aACnDngC,KAAKqsB,OAAoB,MAAVA,EAAkBA,EAAS1e,YAAYyyB,aACtDpgC,KAAKi8D,OAAoB,MAAVA,EAAkBA,EAAStuD,YAAYqf,mBACtDhtB,KAAK6tB,KAAgB,MAARA,EAAgBA,EAAOlgB,YAAYof,iBAChD/sB,KAAK8sB,UAA0B,MAAbA,EAAqBA,EAAYnf,YAAYqpB,kBAC/Dh3B,KAAKg4D,QAAU51D,SAAS41D,GAAW,GACnCh4D,KAAKk8D,WAAal8D,KAAKg4D,QAAU51D,SAAS85D,GAAc,GACxDl8D,KAAKm8D,aAAen8D,KAAKg4D,QAAU51D,SAAS+5D,GAAgB,GAC5Dn8D,KAAKo8D,cAAgBp8D,KAAKg4D,QAAU51D,SAASg6D,GAAiB,GAC9Dp8D,KAAKq8D,YAAcr8D,KAAKg4D,QAAU51D,SAASi6D,GAAe,GAC1Dr8D,KAAKoxD,WAA4B,MAAdA,GAAsBA,EACzCpxD,KAAKs8D,WAAaA,EAClBt8D,KAAKqvB,OAASA,EACdrvB,KAAK0oD,KAAgB,MAARA,GAAgBA,EAC7B1oD,KAAKu8D,QAAsB,MAAXA,GAAmBA,EACnCv8D,KAAKgV,SAAwB,MAAZA,EAAoBA,EAAW,UAChDhV,KAAKw8D,aAAgC,MAAhBA,EAAwBA,EAAe,EAC5Dx8D,KAAKy8D,cAAgBA,EACrBz8D,KAAKkjB,SAAW,EAChBljB,KAAK08D,eAk1CN,SAASC,aAERpB,QAAQhsD,KAAKvP,MA4Cd,SAAS48D,YAERrB,QAAQhsD,KAAKvP,MA8Cd,SAAS68D,OAAOp2C,EAAQoiC,EAAQ+K,GAE/B1Q,QAAQ3zC,KAAKvP,MACbA,KAAKymB,OAASA,EACdzmB,KAAK6oD,OAASA,EACd7oD,KAAK4zD,YAA8B,MAAfA,EAAuBA,EAAc,EAkD1D,SAASkJ,aAAar2C,EAAQ4sB,EAAOyV,EAAMD,EAAQ+K,GAElD1Q,QAAQ3zC,KAAKvP,MACbA,KAAKymB,OAASA,EACdzmB,KAAKqzC,MAAQA,EACbrzC,KAAK8oD,KAAOA,EACZ9oD,KAAK6oD,OAASA,EACd7oD,KAAK4zD,YAA8B,MAAfA,EAAuBA,EAAc,EACzD5zD,KAAKolD,QAAS,EA6Of,SAAS2X,QAAQt2C,EAAQqiC,EAAMD,EAAQ+K,GAEtC6H,iBAAiBlsD,KAAKvP,KAAMymB,EAAQqiC,EAAMD,EAAQ+K,GAuRnD,SAASoJ,WAAWv2C,EAAQqiC,EAAMD,EAAQ+K,GAEzC1Q,QAAQ3zC,KAAKvP,MACbA,KAAKymB,OAASA,EACdzmB,KAAK8oD,KAAOA,EACZ9oD,KAAK6oD,OAASA,EACd7oD,KAAK4zD,YAA8B,MAAfA,EAAuBA,EAAc,EAmH1D,SAASqJ,YAAYjK,EAAQnK,EAAQ+K,GAEpC/B,WAAWtiD,KAAKvP,KAAMgzD,EAAQnK,EAAQ+K,GAyJvC,SAASsJ,WAAWz2C,EAAQqiC,EAAMD,EAAQ+K,GAEzC1Q,QAAQ3zC,KAAKvP,MACbA,KAAKymB,OAASA,EACdzmB,KAAK8oD,KAAOA,EACZ9oD,KAAK6oD,OAASA,EACd7oD,KAAK4zD,YAA8B,MAAfA,EAAuBA,EAAc,EA8c1D,SAASuJ,cAAclsD,GAEtBjR,KAAKiR,MAAQA,EAyed,SAASmsD,mBAAmBprD,EAAMqrD,GAEjCr9D,KAAKgS,KAAOA,EACZhS,KAAKq9D,cAAgBA,EAkGtB,SAASC,cAAcrsD,EAAOmgD,EAAY4G,EAAS73C,EAAIC,EAAIiP,GAE1D8tC,cAAc5tD,KAAKvP,KAAMiR,GACzBjR,KAAKoxD,WAA4B,MAAdA,GAAsBA,EACzCpxD,KAAKg4D,QAAsB,MAAXA,EAAmBA,EAAU,EAC7Ch4D,KAAKmgB,GAAY,MAANA,EAAcA,EAAK,EAC9BngB,KAAKogB,GAAY,MAANA,EAAcA,EAAK,EAC9BpgB,KAAKqvB,OAAoB,MAAVA,EAAkBA,EAAS,EAmlB3C,SAASkuC,kBAAkBtsD,EAAOmgD,EAAY4G,EAAS3oC,GAEtD8tC,cAAc5tD,KAAKvP,KAAMiR,GACzBjR,KAAKoxD,WAA4B,MAAdA,GAAsBA,EACzCpxD,KAAKg4D,QAAUA,GAAW,EAC1Bh4D,KAAKqvB,OAASA,GAAU,EA2OzB,SAASmuC,oBAAoBvsD,EAAOmgD,EAAYqM,GAE/CN,cAAc5tD,KAAKvP,KAAMiR,GACzBjR,KAAKoxD,WAA4B,MAAdA,GAAsBA,EACzCpxD,KAAKy9D,OAAoB,MAAVA,GAAkBA,EAylClC,SAASC,mBAAmBzsD,GAE3BusD,oBAAoBjuD,KAAKvP,KAAMiR,GAAQ,GA+TxC,SAAS0sD,oBAAoB1sD,GAE5BksD,cAAc5tD,KAAKvP,KAAMiR,GAqlB1B,SAAS2sD,eAAe3sD,EAAO4sD,GAE9BV,cAAc5tD,KAAKvP,KAAMiR,GACzBjR,KAAK69D,OAAoB,MAAVA,EAAkBA,EAAS,IA+N3C,SAASC,qBAAqB7sD,GAE7BksD,cAAc5tD,KAAKvP,KAAMiR,GAmN1B,SAAS8sD,kBAAkB9sD,EAAO+sD,EAASC,GAE1Cd,cAAc5tD,KAAKvP,KAAMiR,GACzBjR,KAAKg+D,QAAUA,EACfh+D,KAAKi+D,OAASA,EA+Ff,SAASC,kBAAkBjtD,EAAO4sD,GAEjCV,cAAc5tD,KAAKvP,KAAMiR,GAwJ1B,SAASktD,+BAERn+D,KAAKoP,EAAI,GACTpP,KAAKqP,EAAI,GACTrP,KAAK6uB,KAAO,GA2Mb,SAASuvC,qBAAqBpsD,GAE7BmsD,6BAA6B/yD,MAAMpL,KAAMqL,WACzCrL,KAAKgS,KAAOA,EACZhS,KAAKmE,GAAKuH,iBAAiBG,IAAImG,GAC/BhS,KAAKq+D,iBAAmB,GACxBr+D,KAAKs+D,iBAAmB,GAyNzB,SAASC,qBAAqBjrD,GAE7B6qD,6BAA6B/yD,MAAMpL,KAAMqL,WACzCrL,KAAKsT,MAAQA,EACbtT,KAAKw+D,IAAM,GAEX,IAAK,IAAI35D,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAEjC7E,KAAKw+D,IAAI5xD,KAAKlB,iBAAiBG,IAAIyH,EAAMzO,KAiM3C,SAAS45D,sBAAsBC,EAAQC,EAAUC,EAAOjoD,EAAQkoD,GAEnDH,EAAOI,WACnB9+D,KAAK6+D,gBAAkBA,EACvB7+D,KAAK4+D,MAAQA,EACb5+D,KAAK2W,OAASA,EAId3W,KAAK++D,aAAe,IAAI5yD,aACxBnM,KAAKg/D,WAAa,IAAI7yD,aACtBnM,KAAKi/D,QAAU,EACf,IAAIC,EAAmB,GAEP,MAAZP,IAEHA,EAAW3+D,KAAKiR,MAAMkuD,iBAAiBxoD,IAGxC3W,KAAKi/D,QAAUj/D,KAAKo/D,oBAIpBp/D,KAAKq/D,oBAAoBX,EAAQC,EAAUO,GAI3C,IAAK,IAAIr6D,EAAI,EAAGA,EAAI85D,EAASx8D,OAAQ0C,IACrC,CAGC,IAFA,IAAIyO,EAAQ4rD,EAAiBr6D,GAAGy5D,iBAEvBgB,EAAI,EAAGA,EAAIhsD,EAAMnR,OAAQm9D,IAClC,CACC,IAAIC,EAAejsD,EAAMgsD,GACrBE,EAAYD,EAAajsD,MAI7B,GAAiB,MAAbksD,GAAqBA,EAAUr9D,OAAS,EAC5C,CACC,IAAIs9D,EAAWD,EAAU,GACrBE,EAAahB,EAAOiB,mBACtBF,GAAU,GACRG,EAAqB5/D,KAAK++D,aAAalzD,IAAI6zD,GAE3CR,EAAiBr6D,IAAM+6D,IAO1BF,EAAahB,EAAOiB,mBAClBF,GAAU,GACZG,EAAqB5/D,KAAK++D,aAAalzD,IAAI6zD,IAGlB,MAAtBE,GACCV,EAAiBr6D,IAAM+6D,IAE3BL,EAAa9gD,OAASmhD,EAE4B,GAA9CA,EAAmBvB,iBAAiBl8D,SAEvCy9D,EAAmBvB,iBAAmB,IAGnC/1D,QAAQ/H,QAAQq/D,EAAmBvB,iBAAkBkB,GAAgB,GAExEK,EAAmBvB,iBAAiBzxD,KAAK2yD,KAQ7CL,EAAiBr6D,GAAGgqB,KAAK,GAAK,GA+lBhC,SAASgxC,gBAAgBnB,EAAQC,EAAUC,EAAOjoD,EAAQkoD,GAE7CH,EAAOI,WACnB9+D,KAAK6+D,gBAAkBA,EACvB7+D,KAAK4+D,MAAQA,EACb5+D,KAAK2W,OAASA,EAId3W,KAAK++D,aAAe,IAAI5yD,aACxBnM,KAAKg/D,WAAa,IAAI7yD,aACtBnM,KAAKi/D,QAAU,EACf,IAAIC,EAAmB,GAEP,MAAZP,IAEHA,EAAW3+D,KAAKiR,MAAMkuD,iBAAiBxoD,IAGxC3W,KAAKi/D,QAAUj/D,KAAKo/D,oBAIpBp/D,KAAKq/D,oBAAoBX,EAAQC,EAAUO,GAI3C,IAAK,IAAIr6D,EAAI,EAAGA,EAAI85D,EAASx8D,OAAQ0C,IACrC,CAGC,IAFA,IAAIyO,EAAQ4rD,EAAiBr6D,GAAGy5D,iBAEvBgB,EAAI,EAAGA,EAAIhsD,EAAMnR,OAAQm9D,IAClC,CACC,IAAIC,EAAejsD,EAAMgsD,GACrBE,EAAYD,EAAajsD,MAI7B,GAAiB,MAAbksD,GAAqBA,EAAUr9D,OAAS,EAC5C,CACC,IAAIs9D,EAAWD,EAAU,GACrBE,EAAahB,EAAOiB,mBACtBF,GAAU,GACRG,EAAqB5/D,KAAK++D,aAAalzD,IAAI6zD,GAE3CR,EAAiBr6D,IAAM+6D,IAO1BF,EAAahB,EAAOiB,mBAClBF,GAAU,GACZG,EAAqB5/D,KAAK++D,aAAalzD,IAAI6zD,IAGlB,MAAtBE,GACCV,EAAiBr6D,IAAM+6D,IAE3BL,EAAa9gD,OAASmhD,EAE4B,GAA9CA,EAAmBvB,iBAAiBl8D,SAEvCy9D,EAAmBvB,iBAAmB,IAGnC/1D,QAAQ/H,QAAQq/D,EAAmBvB,iBAAkBkB,GAAgB,GAExEK,EAAmBvB,iBAAiBzxD,KAAK2yD,KAQ7CL,EAAiBr6D,GAAGgqB,KAAK,GAAK,GA0sBhC,SAASixC,6BAmCT,SAASC,gCAAgCrB,GAExC1+D,KAAK0+D,OAASA,EA6lBf,SAASsB,oBA+DT,SAASC,sBAAsBvB,GAE9B1+D,KAAK0+D,OAASA,EAqHf,SAASwB,uBAAuBxB,EAAQyB,EAAkBC,EACzDC,EAAaC,EAAUC,GAEvBvgE,KAAK0+D,OAASA,EACd1+D,KAAKmgE,iBAAmBA,EACxBngE,KAAKogE,qBAAuBA,EAC5BpgE,KAAKqgE,YAAcA,EACnBrgE,KAAKsgE,SAAWA,EAChBtgE,KAAKugE,oBAAsBA,EAksD5B,SAASC,mBAAmB9B,GAE3B1+D,KAAK0+D,OAASA,EAwGf,SAAS+B,qBAAqBxvD,EAAOovD,EAAaK,GAEjDvD,cAAc5tD,KAAKvP,KAAMiR,GACzBjR,KAAKqgE,YAA8B,MAAfA,EAAuBA,EAAc1yD,YAAY6W,gBACrExkB,KAAK0gE,cAAkC,MAAjBA,GAAyBA,GAz6ZhD,WAEC,SAASC,EAAYC,GAIpB,OAFAA,EAA8B,MAAfA,EAAuBA,EAAc,EAE7C,SAASnyC,EAAQpc,EAAO/L,EAAMixD,EAAI8D,EAAOC,EAAOztC,EAAM/J,EAAQwnC,EAAIT,GAKxE,IAAIgW,EAAaxF,EAAQ/P,EAAK,MAC1BwV,EAAaxF,EAAQhQ,EAAK,MAE9B+P,GAAiBxtC,EAAOy9B,EACxBgQ,GAAiBztC,EAAOy9B,EAExB,IAAI7nC,EAAK8zC,EAAG9nD,QACZgU,EAAGrU,GAAKyxD,EACRp9C,EAAGpU,GAAKyxD,EAER,IAAIltD,EAAKtN,GAAQqH,YAAY+xB,eAAiBp5B,GAAQqH,YAAYgyB,mBAAsB,EAAI,EAAI,EAIhG,OAHA43B,EAAGnoD,IAAMisD,EAAQznD,EAAIitD,EACrBtJ,EAAGloD,IAAMisD,EAAQ1nD,EAAIktD,EAEd,WAENryC,EAAOm5B,QACPn5B,EAAOo5B,OAAOpkC,EAAGrU,EAAGqU,EAAGpU,GACvBof,EAAOq5B,OAAOrkC,EAAGrU,EAAIisD,EAAQC,EAAQsF,EAAan9C,EAAGpU,EAAIisD,EAAQD,EAAQuF,GAErEt6D,GAAQqH,YAAY+xB,eAAiBp5B,GAAQqH,YAAYgyB,oBAE5DlR,EAAOq5B,OAAOrkC,EAAGrU,EAAY,EAARisD,EAAY,EAAG53C,EAAGpU,EAAY,EAARisD,EAAY,GAGxD7sC,EAAOq5B,OAAOrkC,EAAGrU,EAAIksD,EAAQsF,EAAcvF,EAAO53C,EAAGpU,EAAIisD,EAAQD,EAAQuF,GACzEnyC,EAAOmC,QAEHi6B,EAEHp8B,EAAOs6B,gBAIPt6B,EAAOo6B,WAWX,SAASkY,EAAgBH,GAIxB,OAFAA,EAA8B,MAAfA,EAAuBA,EAAc,EAE7C,SAASnyC,EAAQpc,EAAO/L,EAAMixD,EAAI8D,EAAOC,EAAOztC,EAAM/J,EAAQwnC,EAAIT,GAKxE,IAAIgW,EAAaxF,EAAQ/P,EAAK,MAC1BwV,EAAaxF,EAAQhQ,EAAK,MAE9B+P,GAAiBxtC,EAAOy9B,EACxBgQ,GAAiBztC,EAAOy9B,EAExB,IAAI7nC,EAAK8zC,EAAG9nD,QAOZ,OANAgU,EAAGrU,GAAKyxD,EACRp9C,EAAGpU,GAAKyxD,EAERvJ,EAAGnoD,GAAmB,GAAbyxD,EACTtJ,EAAGloD,GAAmB,GAAbyxD,EAEF,WAENryC,EAAOm5B,QACPn5B,EAAOo5B,OAAOpkC,EAAGrU,EAAIisD,EAAQC,EAAQsF,EAAan9C,EAAGpU,EAAIisD,EAAQD,EAAQuF,GACzEnyC,EAAOq5B,OAAOrkC,EAAGrU,EAAGqU,EAAGpU,GACvBof,EAAOq5B,OAAOrkC,EAAGrU,EAAIksD,EAAQsF,EAAcvF,EAAO53C,EAAGpU,EAAIisD,EAAQD,EAAQuF,GACzEnyC,EAAOo6B,WA+BV,SAASmY,EAAQvyC,EAAQpc,EAAO/L,EAAMixD,EAAI8D,EAAOC,EAAOztC,EAAM/J,EAAQwnC,EAAIT,GAOzE,IAAIoW,EAAY36D,GAAQqH,YAAYsyB,cAAkB,MAAS,MAC3D4gC,EAAaxF,EAAQ/P,EAAK2V,EAC1BH,EAAaxF,EAAQhQ,EAAK2V,EAE9B5F,GAAiBxtC,EAAOy9B,EACxBgQ,GAAiBztC,EAAOy9B,EAExB,IAAI7nC,EAAK8zC,EAAG9nD,QACZgU,EAAGrU,GAAKyxD,EACRp9C,EAAGpU,GAAKyxD,EAERvJ,EAAGnoD,IAAMisD,EAAQwF,EACjBtJ,EAAGloD,IAAMisD,EAAQwF,EAGjB,IAAII,EAAO56D,GAAQqH,YAAYsyB,cAAkB,EAAI,IAErD,OAAO,WAENxR,EAAOm5B,QACPn5B,EAAOo5B,OAAOpkC,EAAGrU,EAAGqU,EAAGpU,GACvBof,EAAOq5B,OAAOrkC,EAAGrU,EAAIisD,EAAQ,EAAIC,EAAQ4F,EAAIz9C,EAAGpU,EAAIgsD,EAAQ6F,EAAK5F,EAAQ,GACzE7sC,EAAOq5B,OAAOrkC,EAAGrU,EAAIisD,EAAO53C,EAAGpU,EAAIisD,GACnC7sC,EAAOq5B,OAAOrkC,EAAGrU,EAAIisD,EAAQ,EAAIC,EAAQ4F,EAAIz9C,EAAGpU,EAAIisD,EAAQ,EAAID,EAAQ6F,GACxEzyC,EAAOmC,QAEHi6B,EAEHp8B,EAAOs6B,gBAIPt6B,EAAOo6B,UAvGVoS,SAASE,UAAU,UAAWwF,EAAY,IAC1C1F,SAASE,UAAU,cAAewF,EAAY,IAC9C1F,SAASE,UAAU,QAASwF,EAAY,IACxC1F,SAASE,UAAU,YAAawF,EAAY,IAmC5C1F,SAASE,UAAU,OAAQ4F,EAAgB,IAC3C9F,SAASE,UAAU,WAAY4F,EAAgB,IAE/C9F,SAASE,UAAU,QAAQ,SAAS1sC,EAAQpc,EAAO/L,EAAMixD,EAAI8D,EAAOC,EAAOztC,EAAM/J,EAAQwnC,EAAIT,GAE5F,IAAI7uC,EAAI6R,EAAO,EAEXpK,EAAK8zC,EAAG9nD,QAIZ,OAHA8nD,EAAGnoD,GAAKisD,EAAQr/C,EAChBu7C,EAAGloD,GAAKisD,EAAQt/C,EAET,WAENyS,EAAO+5B,QAAQ/kC,EAAGrU,EAAI4M,EAAGyH,EAAGpU,EAAI2M,EAAG6R,EAAMA,GAErCg9B,EAEHp8B,EAAOs6B,gBAIPt6B,EAAOo6B,aAiDVoS,SAASE,UAAU,UAAW6F,GAC9B/F,SAASE,UAAU,cAAe6F,GAhKnC,GAmKA/gE,WAAWg7D,cAA+B,IAAbA,SAA2BA,cAAWr0D,EA0DnE0B,QAAQoX,OAAO67C,QAASrY,SAOxBqY,QAAQnvD,UAAUsqD,iBAAmB,SAASznD,EAAGG,EAAGC,EAAGvG,EAAGD,GAEzDoG,EAAE0f,UAAUvf,EAAGC,GACfJ,EAAE24C,QACF5nD,KAAKmhE,WAAWlyD,EAAGG,EAAGC,EAAGvG,EAAGD,GAC5BoG,EAAE85C,iBAQHwS,QAAQnvD,UAAU+0D,WAAa,SAASlyD,EAAGG,EAAGC,EAAGvG,EAAGD,GAEnD,IAAIZ,EAAQa,EAAE,EACdmG,EAAE44C,OAAO,EAAGh/C,GACZoG,EAAE+4C,QAAQ,EAAG,EAAIn/C,EAAI,EAAG,EAAG,EAAIA,EAAI,EAAGC,EAAI,EAAG,EAAID,EAAI,GACrDoG,EAAE+4C,QAAQl/C,EAAI,EAAIb,EAAO,EAAIY,EAAI,EAAGC,EAAI,EAAIb,EAAO,EAAGa,EAAI,EAAG,GAC7DmG,EAAE+4C,QAAQl/C,EAAI,EAAIb,EAAO,EAAGa,EAAI,EAAIb,EAAO,EAAIY,EAAI,EAAGC,EAAI,EAAG,EAAID,EAAI,GACrEoG,EAAE+4C,QAAQl/C,EAAG,EAAID,EAAI,EAAGC,EAAG,EAAID,EAAI,EAAGC,EAAGD,GACzCoG,EAAE2hB,SAGH3wB,WAAWs7D,aAA6B,IAAZA,QAA0BA,aAAU30D,EAuChE0B,QAAQoX,OAAO87C,QAASD,SAOxBC,QAAQpvD,UAAU+0D,WAAa,SAASlyD,EAAGG,EAAGC,EAAGvG,EAAGD,GAEnDoG,EAAE44C,OAAO,IAAO/+C,EAAG,IAAOD,GAC1BoG,EAAE+4C,QAAQ,IAAOl/C,EAAG,IAAOD,EAAG,EAAG,GAAMA,EAAG,IAAOC,EAAG,IAAOD,GAC3DoG,EAAE+4C,QAAQ,EAAG,IAAOn/C,EAAG,IAAOC,EAAG,GAAMD,EAAG,IAAOC,EAAG,GAAMD,GAC1DoG,EAAE+4C,QAAQ,GAAMl/C,EAAGD,EAAG,GAAMC,EAAGD,EAAG,GAAMC,EAAG,GAAMD,GACjDoG,EAAE+4C,QAAQl/C,EAAG,GAAMD,EAAGC,EAAG,GAAMD,EAAG,KAAQC,EAAG,GAAMD,GACnDoG,EAAE+4C,QAAQl/C,EAAG,GAAMD,EAAG,GAAMC,EAAG,GAAMD,EAAG,KAAQC,EAAG,GAAMD,GACzDoG,EAAE+4C,QAAQ,GAAMl/C,EAAG,IAAOD,EAAG,GAAMC,EAAG,IAAOD,EAAG,IAAOC,EAAG,IAAOD,GACjEoG,EAAE2hB,SAGH3wB,WAAWu7D,aAA6B,IAAZA,QAA0BA,aAAU50D,EAsChE0B,QAAQoX,OAAO+7C,iBAAkBvY,SAOjCuY,iBAAiBrvD,UAAU4nD,cAAgB,WAE1C,IAAIoN,GAAS,EAOb,OALkB,MAAdphE,KAAK0H,QAER05D,EAAgF,KAAvE94D,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYwrB,qBAAsB,OAGjEn5B,KAAKk3D,YAAcl3D,KAAKq4D,OAA0B,GAAjBr4D,KAAKkjB,WAAkBk+C,GACjD,MAAbphE,KAAK8oD,MAAgB9oD,KAAK8oD,MAAQn7C,YAAYC,OAQjD6tD,iBAAiBrvD,UAAUyqD,gBAAkB,SAAS5nD,EAAGG,EAAGC,EAAGvG,EAAGD,GAEjE,IAAIu4D,GAAS,EAOb,GALkB,MAAdphE,KAAK0H,QAER05D,EAAgF,KAAvE94D,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYwrB,qBAAsB,MAGrEioC,GAAwB,MAAbphE,KAAK8oD,MAAgB9oD,KAAK8oD,MAAQn7C,YAAYC,MAC5C,MAAf5N,KAAK6oD,QAAkB7oD,KAAK6oD,QAAUl7C,YAAYC,KACpD,CAMC,GALKwzD,GAAwB,MAAbphE,KAAK8oD,MAAgB9oD,KAAK8oD,MAAQn7C,YAAYC,OAE7DqB,EAAE0nC,eAAgB,GAGf32C,KAAKk3D,UACT,CACC,IAAInvC,EAAI,EAER,GAA2E,KAAvEzf,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY0uB,uBAAwB,GAEpEtU,EAAI3e,KAAK2G,IAAIjH,EAAI,EAAGM,KAAK2G,IAAIlH,EAAI,EAAGP,QAAQyW,SAAS/e,KAAK0H,MACzDiG,YAAYyuB,cAAezuB,YAAY2pB,cAAgB,QAGzD,CACC,IAAI1jB,EAAItL,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYyuB,cACR,IAAxCzuB,YAAY0pB,2BAAmC,IAChDtP,EAAI3e,KAAK2G,IAAIjH,EAAI8K,EAAG/K,EAAI+K,GAGzB3E,EAAEs5C,UAAUn5C,EAAGC,EAAGvG,EAAGD,EAAGkf,EAAGA,QAI3B9Y,EAAEY,KAAKT,EAAGC,EAAGvG,EAAGD,GAGjBoG,EAAE85C,kBASJ0S,iBAAiBrvD,UAAUosD,YAAc,SAASvpD,EAAGG,EAAGC,EAAGvG,EAAGD,GAE7D,OAAO,GAQR4yD,iBAAiBrvD,UAAU0qD,gBAAkB,SAAS7nD,EAAGG,EAAGC,EAAGvG,EAAGD,GAE7D7I,KAAKq4D,QAAUr4D,KAAK0zD,SAAwB,MAAb1zD,KAAK8oD,MAAgB9oD,KAAK8oD,MAAQn7C,YAAYC,MAEhF5N,KAAKg3D,iBAAiB/nD,EAAGG,EAAGC,EAAGvG,EAAGD,EAAG7I,KAAK+2D,WAAWjuD,EAAI9I,KAAK4zD,YAAa/qD,EAAI7I,KAAK4zD,eAItF3zD,WAAWw7D,sBAA+C,IAArBA,iBAAmCA,sBAAmB70D,EAsC3F0B,QAAQoX,OAAOg8C,UAAWxY,SAO1BwY,UAAUtvD,UAAUsqD,iBAAmB,SAASznD,EAAGG,EAAGC,EAAGvG,EAAGD,GAE3DoG,EAAEu5C,QAAQp5C,EAAGC,EAAGvG,EAAGD,GACnBoG,EAAE85C,iBAGH9oD,WAAWy7D,eAAiC,IAAdA,UAA4BA,eAAY90D,EA2DtE0B,QAAQoX,OAAOi8C,gBAAiBzY,SAOhCyY,gBAAgBvvD,UAAUqiD,SAAW,GAOrCkN,gBAAgBvvD,UAAUyqD,gBAAkB,SAAS5nD,EAAGG,EAAGC,EAAGvG,EAAGD,GAEhEoG,EAAEu5C,QAAQp5C,EAAGC,EAAGvG,EAAGD,GACnBoG,EAAE85C,iBAQH4S,gBAAgBvvD,UAAU0qD,gBAAkB,SAAS7nD,EAAGG,EAAGC,EAAGvG,EAAGD,GAEhE,IAAK7I,KAAK0zD,QACV,CACC,IAAIrD,EAAS/nD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY0rB,aAAcjwB,KAAK2G,IAAI,EAAI/P,KAAK4zD,YAAaxqD,KAAK2G,IAAIjH,EAAI,EAAGD,EAAI,KACvHuG,GAAKihD,EACLhhD,GAAKghD,EAELxnD,GAAK,EAAIwnD,GADTvnD,GAAK,EAAIunD,GAID,GAAKxnD,EAAI,GAEhBoG,EAAEu5C,QAAQp5C,EAAGC,EAAGvG,EAAGD,GAGpBoG,EAAE45C,WASJ8S,gBAAgBvvD,UAAUuoD,eAAiB,SAAS9kD,GAEnD,IAAIwgD,EAAU/nD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY0rB,aAAcjwB,KAAK2G,IAAI,EAAI/P,KAAK4zD,YACrFxqD,KAAK2G,IAAIF,EAAK5H,MAAQ,EAAIjI,KAAKsS,MAAOzC,EAAKhI,OAAS,EAAI7H,KAAKsS,SAAYtS,KAAKsS,MAEhF,OAAO,IAAIhD,YAAYO,EAAKT,EAAIihD,EAAQxgD,EAAKR,EAAIghD,EAAQxgD,EAAK5H,MAAQ,EAAIooD,EAAQxgD,EAAKhI,OAAS,EAAIwoD,IAGrGpwD,WAAW07D,qBAA6C,IAApBA,gBAAkCA,qBAAkB/0D,EAsCxF0B,QAAQoX,OAAOk8C,UAAW1Y,SAO1B0Y,UAAUxvD,UAAUosD,YAAc,WAEjC,OAAO,GAQRoD,UAAUxvD,UAAUsqD,iBAAmB,SAASznD,EAAGG,EAAGC,EAAGvG,EAAGD,GAE3D,IAAIw4D,EAAKv4D,EAAI,EACTw4D,EAAKz4D,EAAI,EAETuuD,EAAU9uD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYyuB,cAAezuB,YAAY2pB,cAAgB,EAClGroB,EAAE24C,QACF5nD,KAAKm3D,UAAUloD,EAAG,CAAC,IAAIE,QAAQC,EAAIiyD,EAAIhyD,GAAI,IAAIF,QAAQC,EAAItG,EAAGuG,EAAIiyD,GAAK,IAAInyD,QAAQC,EAAIiyD,EAAIhyD,EAAIxG,GAC1F,IAAIsG,QAAQC,EAAGC,EAAIiyD,IAAMthE,KAAKk3D,UAAWE,GAAS,GACvDnoD,EAAE85C,iBAGH9oD,WAAW27D,eAAiC,IAAdA,UAA4BA,eAAYh1D,EAqCtE0B,QAAQoX,OAAOmyC,WAAY3O,SAO3B2O,WAAWzlD,UAAUssD,YAAc,WAElC,OAAO,GAQR7G,WAAWzlD,UAAUwqD,iBAAmB,WAEvC,OAAO,GAQR/E,WAAWzlD,UAAUwoD,sBAAwB,WAE5C,OAAO,GAQR/C,WAAWzlD,UAAUqqD,eAAiB,SAASxnD,EAAGiX,GAEjD,IAAIq7C,EAAOtyD,EAAE06C,mBACb16C,EAAE06C,mBAAqB,SAEL,MAAd3pD,KAAK0H,OAAyD,GAAxC1H,KAAK0H,MAAMiG,YAAYwuB,cAEhDn8B,KAAKwhE,UAAUvyD,EAAGiX,EAAKlmB,KAAKk3D,WAI5Bl3D,KAAKyhE,gBAAgBxyD,EAAGiX,GAGzBjX,EAAE06C,mBAAqB4X,GAQxB1P,WAAWzlD,UAAUo1D,UAAY,SAASvyD,EAAGiX,EAAKsrC,GAEjD,IAAI4F,EAAU9uD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYyuB,cAAezuB,YAAY2pB,cAAgB,EAClGroB,EAAE24C,QACF5nD,KAAKm3D,UAAUloD,EAAGiX,EAAKsrC,EAAS4F,GAAS,GACzCnoD,EAAE45C,UAQHgJ,WAAWzlD,UAAUq1D,gBAAkB,SAASxyD,EAAGiX,GAElDjX,EAAE24C,QAEF,IAAInkC,EAAKyC,EAAI,GACTlD,EAAIkD,EAAI/jB,OAEZ8M,EAAE44C,OAAOpkC,EAAGrU,EAAGqU,EAAGpU,GAElB,IAAK,IAAIxK,EAAI,EAAGA,EAAIme,EAAI,EAAGne,IAC3B,CACC,IAAI2yD,EAAKtxC,EAAIrhB,GACTue,EAAK8C,EAAIrhB,EAAI,GACb68D,GAAMlK,EAAGpoD,EAAIgU,EAAGhU,GAAK,EACrBuyD,GAAMnK,EAAGnoD,EAAI+T,EAAG/T,GAAK,EAEzBJ,EAAE84C,OAAOyP,EAAGpoD,EAAGooD,EAAGnoD,EAAGqyD,EAAIC,GAGtBnK,EAAKtxC,EAAIlD,EAAI,GACbI,EAAK8C,EAAIlD,EAAI,GAEjB/T,EAAE84C,OAAOyP,EAAGpoD,EAAGooD,EAAGnoD,EAAG+T,EAAGhU,EAAGgU,EAAG/T,GAC9BJ,EAAE45C,UAGH5oD,WAAW4xD,gBAAmC,IAAfA,WAA6BA,gBAAajrD,EAiDzE0B,QAAQoX,OAAOm8C,QAAS3Y,SAOxB2Y,QAAQzvD,UAAUqsD,mBAAqB,SAAS5K,GAE/C3K,QAAQ92C,UAAUqsD,mBAAmBrtD,MAAMpL,KAAMqL,WAEjD,IAAIvC,EAAIM,KAAKC,IAAIrJ,KAAK87D,WAAY97D,KAAKk4D,SACvCrK,EAAKr9C,MAAM1H,EAAI,EAAI9I,KAAK4zD,aAAe5zD,KAAKsS,QAQ7CupD,QAAQzvD,UAAUqqD,eAAiB,SAASxnD,EAAGiX,GAG9C,IAAI8xC,EAAWrqD,YAAY4pB,cACvBtvB,EAAQ0F,YAAY6pB,YACpBoqC,EAAQj0D,YAAY8pB,WAGpB+/B,EAAKtxC,EAAI,GACTqxC,EAAKrxC,EAAIA,EAAI/jB,OAAS,GACtBoQ,EAAKglD,EAAGnoD,EAAIooD,EAAGpoD,EACfqD,EAAK8kD,EAAGloD,EAAImoD,EAAGnoD,EACfiW,EAAOlc,KAAKqY,KAAKlP,EAAKA,EAAKE,EAAKA,GAChCtQ,EAASmjB,EAAO,EAAI0yC,EAAU4J,EAG9BC,EAAKtvD,EAAK+S,EACVw8C,EAAKrvD,EAAK6S,EACVy8C,EAAQ5/D,EAAS0/D,EACjBG,EAAQ7/D,EAAS2/D,EACjBG,EAASh6D,EAAQ65D,EAAG,EACpBI,GAAUj6D,EAAQ45D,EAAG,EAGrBM,EAAM3K,EAAGpoD,EAAI6yD,EAAS,EAAIjK,EAAU6J,EACpCO,EAAM5K,EAAGnoD,EAAI6yD,EAAS,EAAIlK,EAAU8J,EACpCO,EAAMF,EAAMF,EACZK,EAAMF,EAAMF,EACZK,EAAMF,EAAMN,EACZS,EAAMF,EAAMN,EACZS,EAAMF,EAAMN,EACZS,EAAMF,EAAMN,EAEZS,EAAMF,EAAM,EAAIR,EAChBW,EAAMF,EAAM,EAAIR,EAEpBjzD,EAAE24C,QACF34C,EAAE44C,OAAOsa,EAAKC,GACdnzD,EAAE64C,OAAOua,EAAKC,GACdrzD,EAAE64C,OAAOya,EAAKC,GACdvzD,EAAE64C,OAAO2a,EAAKC,GACdzzD,EAAE64C,OAAOyP,EAAGnoD,EAAI4oD,EAAU6J,EAAItK,EAAGloD,EAAI2oD,EAAU8J,GAC/C7yD,EAAE64C,OAAO6a,EAAKC,GACd3zD,EAAE64C,OAAO6a,EAAMV,EAAQW,EAAMV,GAC7BjzD,EAAE2hB,QAEF3hB,EAAE85C,iBAGH9oD,WAAW47D,aAA6B,IAAZA,QAA0BA,aAAUj1D,EAkDhE0B,QAAQoX,OAAOq8C,iBAAkB7Y,SAQjC6Y,iBAAiB3vD,UAAUunD,mBAAoB,EAO/CoI,iBAAiB3vD,UAAU2rD,YAAc,WAExC7U,QAAQ92C,UAAU2rD,YAAY3sD,MAAMpL,KAAMqL,WAE1CrL,KAAKg8D,aAAeruD,YAAY4pB,eAMjCwkC,iBAAiB3vD,UAAUhB,MAAQ,SAASyG,GAE3CqxC,QAAQ92C,UAAUhB,MAAMA,MAAMpL,KAAMqL,WAElB,MAAdrL,KAAK0H,QAER1H,KAAKi4D,UAAqG,EAAzF3vD,QAAQ0W,UAAUhf,KAAK0H,MAAOiG,YAAY2Z,gBAAiB3Z,YAAY8pB,WAAa,GACrGz3B,KAAKk4D,QAAiG,EAAvF5vD,QAAQ0W,UAAUhf,KAAK0H,MAAOiG,YAAYguB,cAAehuB,YAAY8pB,WAAa,KASnGskC,iBAAiB3vD,UAAUqsD,mBAAqB,SAAS5K,GAExD3K,QAAQ92C,UAAUqsD,mBAAmBrtD,MAAMpL,KAAMqL,WAEjD,IAAIvC,EAAI9I,KAAK6iE,eAET7iE,KAAK8iE,kBAERh6D,EAAIM,KAAKC,IAAIP,EAAG9I,KAAK+iE,uBAGlB/iE,KAAKgjE,gBAERl6D,EAAIM,KAAKC,IAAIP,EAAG9I,KAAKijE,qBAGtBpV,EAAKr9C,MAAM1H,EAAI,EAAI9I,KAAK4zD,aAAe5zD,KAAKsS,QAQ7CypD,iBAAiB3vD,UAAUqqD,eAAiB,SAASxnD,EAAGiX,GAGvD,IAAIw+B,EAAc1kD,KAAK4zD,YAEnB5zD,KAAK0zD,UAERhP,EAAct7C,KAAKC,IAAI,EAAGf,QAAQ0W,UAAUhf,KAAK0H,MAAOiG,YAAY+rB,kBAAmB15B,KAAK4zD,eAoB7F,IAjBA,IAAIsP,EAAaljE,KAAK+iE,qBAAuBre,EACzCye,EAAWnjE,KAAKijE,mBAAqBve,EACrC0e,EAAYpjE,KAAK0zD,QAAU1zD,KAAK6iE,eAAiBne,EAAc1kD,KAAK6iE,eACpEQ,EAAYrjE,KAAKsjE,cACjBC,EAAcvjE,KAAK8iE,gBACnBU,EAAYxjE,KAAKgjE,cACjBhL,EAAU,EAAc,EAAIh4D,KAAKg8D,aAAetX,EAAc,EAC9DuT,EAAYj4D,KAAKi4D,UAAYvT,EAC7BwT,EAAUl4D,KAAKk4D,QAAUxT,EACzBwS,EAAYl3D,KAAKyjE,iBAGjBlM,EAAKrxC,EAAIA,EAAI/jB,OAAS,GAGtBuhE,EAAK,EAEFA,EAAKx9C,EAAI/jB,OAAS,GAAK+jB,EAAIw9C,GAAIt0D,GAAK8W,EAAI,GAAG9W,GAAK8W,EAAIw9C,GAAIr0D,GAAK6W,EAAI,GAAG7W,GAE1Eq0D,IAGD,IAAInxD,EAAK2T,EAAIw9C,GAAIt0D,EAAI8W,EAAI,GAAG9W,EACxBqD,EAAKyT,EAAIw9C,GAAIr0D,EAAI6W,EAAI,GAAG7W,EACxBiW,EAAOlc,KAAKqY,KAAKlP,EAAKA,EAAKE,EAAKA,GAEpC,GAAY,GAAR6S,EAAJ,CAMA,IACIuyC,EAEAC,EAHA+J,EAAKtvD,EAAK+S,EACLqyC,EAAMkK,EACXC,EAAKrvD,EAAK6S,EACLsyC,EAAMkK,EACX6B,EAAQP,EAAYtB,EACpB8B,GAASR,EAAYvB,EAGrBgC,EAAM,GAEN3M,EAEHjoD,EAAE+3C,YAAY,SAEN9gC,EAAI/jB,OAAS,GAGrB8M,EAAEg4C,cAAc,MAGjBh4C,EAAE24C,QAEF,IAAIkc,EAAUjC,EACVkC,EAAUjC,EAEd,GAAIyB,IAAgBF,EAEnBrjE,KAAKgkE,YAAY/0D,EAAGiX,EAAI,GAAG9W,EAAG8W,EAAI,GAAG7W,EAAGwyD,EAAIC,EAAI7J,EAAWiL,EAAYE,EAAWpL,GAAS,OAG5F,CACC,IAAIiM,EAAY/9C,EAAI,GAAG9W,EAAIu0D,EAAQ,EAAI3L,EAAU6J,EAC7CqC,EAAYh+C,EAAI,GAAG7W,EAAIu0D,EAAQ,EAAI5L,EAAU8J,EAC7CqC,EAASj+C,EAAI,GAAG9W,EAAIu0D,EAAQ,EAAI3L,EAAU6J,EAC1CuC,EAASl+C,EAAI,GAAG7W,EAAIu0D,EAAQ,EAAI5L,EAAU8J,EAE1CuB,GAEHp0D,EAAE44C,OAAOoc,EAAWC,GAEpBL,EAAIj3D,MAAK,WAERqC,EAAE64C,OAAOqc,EAAQC,QAKlBn1D,EAAE44C,OAAOsc,EAAQC,GACjBn1D,EAAE64C,OAAOmc,EAAWC,IAQtB,IAJA,IAAIG,EAAM,EACNC,EAAM,EACNC,EAAQ,EAEH1/D,EAAI,EAAGA,EAAIqhB,EAAI/jB,OAAS,EAAG0C,IACpC,CAEC,IAAIumB,EAAM9iB,QAAQuhB,YAAY3D,EAAIrhB,GAAGuK,EAAG8W,EAAIrhB,GAAGwK,EAAG6W,EAAIrhB,EAAE,GAAGuK,EAAG8W,EAAIrhB,EAAE,GAAGwK,EAAG6W,EAAIrhB,EAAE,GAAGuK,EAAG8W,EAAIrhB,EAAE,GAAGwK,GAO/F,GALAg1D,EAAMn+C,EAAIrhB,EAAE,GAAGuK,EAAI8W,EAAIrhB,EAAE,GAAGuK,EAC5Bk1D,EAAMp+C,EAAIrhB,EAAE,GAAGwK,EAAI6W,EAAIrhB,EAAE,GAAGwK,EAIf,IAFbk1D,EAAQn7D,KAAKqY,KAAK4iD,EAAMA,EAAMC,EAAMA,IAGpC,CAIC,IAAIE,EAAO3C,GAHXlK,EAAM0M,EAAME,GAGUzC,GAFtBlK,EAAM0M,EAAMC,GAGR1zD,EAAMzH,KAAKC,IAAID,KAAKqY,MAAM+iD,EAAO,GAAK,GAAI,KAG9C3M,EAAOgK,EAAKlK,EACZG,EAAOgK,EAAKlK,EAEZ,IAAI6M,EAAQr7D,KAAKqY,KAAKo2C,EAAMA,EAAMC,EAAMA,GAExC,GAAa,GAAT2M,EACJ,CACC5M,GAAY4M,EACZ3M,GAAY2M,EAGZ,IAAIC,EAAoBt7D,KAAKC,IAAIwH,EAAKzH,KAAK2G,IAAI/P,KAAK4zD,YAAc,IAAM,IAAM,MAC1E+Q,EAAsB,GAAPv5C,GAAY8rC,EAAa9tD,KAAKC,IAAI,GAAKq7D,GAAqBt7D,KAAKC,IAAIwH,EAAK,KAEzF+zD,EAAO1+C,EAAIrhB,EAAE,GAAGuK,EAAI0oD,EAAMsL,EAAY,EAAIuB,EAC1CE,EAAO3+C,EAAIrhB,EAAE,GAAGwK,EAAIwoD,EAAMuL,EAAY,EAAIuB,EAC1CG,EAAM5+C,EAAIrhB,EAAE,GAAGuK,EAAI0oD,EAAMsL,EAAY,EAAIuB,EACzCI,EAAM7+C,EAAIrhB,EAAE,GAAGwK,EAAIwoD,EAAMuL,EAAY,EAAIuB,EAE7C,GAAW,GAAPv5C,GAAa8rC,EAcZ,IAAY,GAAR9rC,EACT,CACC,IAAI45C,EAAMF,EAAMhD,EAAKsB,EACjB6B,EAAMF,EAAMlD,EAAKuB,EACjB8B,EAAMJ,EAAMlN,EAAMwL,EAClB+B,EAAMJ,EAAMpN,EAAMyL,EACtBn0D,EAAE64C,OAAOkd,EAAKC,GACdh2D,EAAE84C,OAAO6c,EAAMC,EAAMK,EAAKC,GAE1B,SAAU/1D,EAAGC,GAEZw0D,EAAIj3D,MAAK,WAERqC,EAAE64C,OAAO14C,EAAGC,MAJd,CAMGy1D,EAAKC,QAIR91D,EAAE64C,OAAO8c,EAAMC,GAEf,SAAUz1D,EAAGC,GAEZ,IAAI21D,EAAMJ,EAAO9C,EAAKsB,EAClB6B,EAAMJ,EAAOhD,EAAKuB,EAClB8B,EAAMN,EAAOhN,EAAMwL,EACnB+B,EAAMN,EAAOlN,EAAMyL,EAEvBS,EAAIj3D,MAAK,WAERqC,EAAE84C,OAAO34C,EAAGC,EAAG21D,EAAKC,MAErBpB,EAAIj3D,MAAK,WAERqC,EAAE64C,OAAOod,EAAKC,MAbhB,CAeGL,EAAKC,QA9CR91D,EAAE64C,OAAO8c,EAAMC,GAEf,SAAUz1D,EAAGC,GAEZw0D,EAAIj3D,MAAK,WAERqC,EAAE64C,OAAO14C,EAAGC,MAJd,CAMGy1D,EAAKC,GAyCTlD,EAAKlK,EACLmK,EAAKlK,IAQR,GAHA+L,EAAQP,EAAYxL,EACpBgM,GAAUR,EAAYzL,EAElB6L,IAAcH,EAEjBrjE,KAAKgkE,YAAY/0D,EAAGsoD,EAAGnoD,EAAGmoD,EAAGloD,GAAIwyD,GAAKC,EAAI5J,EAASiL,EAAUC,EAAWpL,GAAS,OAGlF,CACC/oD,EAAE64C,OAAOyP,EAAGnoD,EAAI4oD,EAAUL,EAAMgM,EAAQ,EAAGpM,EAAGloD,EAAI2oD,EAAUJ,EAAMgM,EAAQ,GAE1E,IAAIwB,EAAW7N,EAAGnoD,EAAI4oD,EAAUL,EAAMgM,EAAQ,EAC1C0B,EAAW9N,EAAGloD,EAAI2oD,EAAUJ,EAAMgM,EAAQ,EAEzCP,GAMJp0D,EAAE44C,OAAOud,EAAUC,GAEnBxB,EAAIztD,OAAO,EAAG,GAAG,WAEhBnH,EAAE44C,OAAOud,EAAUC,OARpBp2D,EAAE64C,OAAOsd,EAAUC,GAarB,IAASxgE,EAAIg/D,EAAI1hE,OAAS,EAAG0C,GAAK,EAAGA,IAEpCg/D,EAAIh/D,KAGDw+D,GAEHp0D,EAAEk5C,MACFl5C,EAAE45C,WAIF55C,EAAE2hB,QACF3hB,EAAE85C,iBAIH95C,EAAEu4C,WAAU,GAGZv4C,EAAEg4C,cAAc,GAEZiQ,GAEHjoD,EAAE+3C,YAAY,QAGX9gC,EAAI/jB,OAAS,IAIhB8M,EAAEg4C,cAAc,GACZsc,IAAgBF,IAEnBp0D,EAAE24C,QACF5nD,KAAKgkE,YAAY/0D,EAAGiX,EAAI,GAAG9W,EAAG8W,EAAI,GAAG7W,EAAGy0D,EAASC,EAAS9L,EAAWiL,EAAYE,EAAWpL,GAAS,GACrG/oD,EAAE45C,SACF55C,EAAEk5C,OAGCqb,IAAcH,IAEjBp0D,EAAE24C,QACF5nD,KAAKgkE,YAAY/0D,EAAGsoD,EAAGnoD,EAAGmoD,EAAGloD,GAAIwyD,GAAKC,EAAI5J,EAASiL,EAAUC,EAAWpL,GAAS,GACjF/oD,EAAE45C,SACF55C,EAAEk5C,UAUL4T,iBAAiB3vD,UAAU43D,YAAc,SAAS/0D,EAAGq2D,EAAKC,EAAK1D,EAAIC,EAAIj0C,EAAMiuC,EAAYsH,EAAWpL,EAASV,GAE5G,IAAIkO,EAAkBpC,EAAYtH,EAC9B6H,EAAQP,EAAYtB,EAAK,EACzB8B,GAASR,EAAYvB,EAAK,EAE1B4D,GAAUzN,EAAUnqC,GAAQg0C,EAC5B6D,GAAU1N,EAAUnqC,GAAQi0C,EAE5BxK,EAEHroD,EAAE44C,OAAOyd,EAAM3B,EAAQ8B,EAAQF,EAAM3B,EAAQ8B,GAI7Cz2D,EAAE64C,OAAOwd,EAAM3B,EAAQ8B,EAAQF,EAAM3B,EAAQ8B,GAG9Cz2D,EAAE64C,OAAOwd,EAAM3B,EAAQ6B,EAAkBC,EAAQF,EAAM3B,EAAQ4B,EAAkBE,GACjFz2D,EAAE64C,OAAOwd,EAAMtN,EAAU6J,EAAI0D,EAAMvN,EAAU8J,GAC7C7yD,EAAE64C,OAAOwd,EAAM3B,EAAQ6B,EAAkBC,EAAQF,EAAM3B,EAAQ4B,EAAkBE,GACjFz2D,EAAE64C,OAAOwd,EAAM3B,EAAQ8B,EAAQF,EAAM3B,EAAQ8B,IAQ9C3J,iBAAiB3vD,UAAUq3D,eAAiB,WAE3C,OAAOzjE,KAAKk3D,WAQb6E,iBAAiB3vD,UAAU22D,mBAAqB,WAE/C,OAAOp1D,YAAY6pB,aAQpBukC,iBAAiB3vD,UAAU62D,iBAAmB,WAE7C,OAAOt1D,YAAY6pB,aAQpBukC,iBAAiB3vD,UAAUy2D,aAAe,WAEzC,OAAOl1D,YAAY6pB,YAAc,GAQlCukC,iBAAiB3vD,UAAUk3D,YAAc,WAExC,OAAO,GAQRvH,iBAAiB3vD,UAAU02D,cAAgB,WAE1C,OAAQx6D,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY+tB,iBAAkB/tB,YAAYC,OAASD,YAAYC,MAQrGmuD,iBAAiB3vD,UAAU42D,YAAc,WAExC,OAAQ16D,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY8tB,eAAgB9tB,YAAYC,OAASD,YAAYC,MAEnG3N,WAAW87D,sBAA+C,IAArBA,iBAAmCA,sBAAmBn1D,EA8F3F0B,QAAQoX,OAAOk5C,OAAQ1V,SAQvB0V,OAAOxsD,UAAUu5D,eAAiB,EAQlC/M,OAAOxsD,UAAUw5D,kBAAoB,EAOrChN,OAAOxsD,UAAUy5D,gBAAkB,EAOnCjN,OAAOxsD,UAAU05D,iBAAmB,EAQpClN,OAAOxsD,UAAU25D,kBAAmB,EAOpCnN,OAAOxsD,UAAUysD,sBAAwB,GAUzCD,OAAOxsD,UAAU45D,yBAA0B,EAS3CpN,OAAOxsD,UAAU65D,kBAAmB,EASpCrN,OAAOxsD,UAAU85D,iBAA6C,GAAzBrlE,SAASC,cAAsBZ,SAASa,MAAa,EAAJ,EAOtF63D,OAAOxsD,UAAU+5D,UAAY,KAO7BvN,OAAOxsD,UAAUg6D,cAAe,EAQhCxN,OAAOxsD,UAAU2nD,WAAa,WAE7B,OAAO,GASR6E,OAAOxsD,UAAU4nD,cAAgB,WAEhC,OAAgC,GAAzBnzD,SAASC,cAAqBZ,SAASa,OAQ/C63D,OAAOxsD,UAAU6nD,mBAAqB,WAErC,OAAO,GAQR2E,OAAOxsD,UAAU+2C,YAAc,WAE9B,OAASvuC,MAAM5U,KAAKsS,QAAU0W,SAAShpB,KAAKsS,QAAUtS,KAAKsS,MAAQ,GAClD,MAAftS,KAAKymB,SAAmB7R,MAAM5U,KAAKymB,OAAOrX,KAAOwF,MAAM5U,KAAKymB,OAAOpX,KAClEuF,MAAM5U,KAAKymB,OAAOxe,SAAW2M,MAAM5U,KAAKymB,OAAO5e,SAQnD+wD,OAAOxsD,UAAUg3C,MAAQ,SAASn0C,EAAGo3D,GAGpC,IAAIxtD,EAAI7Y,KAAKsS,MACTlD,EAAIpP,KAAKymB,OAAOrX,EAAIyJ,EACpBxJ,EAAIrP,KAAKymB,OAAOpX,EAAIwJ,EACpB/P,EAAI9I,KAAKymB,OAAOxe,MAAQ4Q,EACxBhQ,EAAI7I,KAAKymB,OAAO5e,OAASgR,EAK7B,GAHA7Y,KAAKo2D,gBAAgBnnD,EAAGG,EAAGC,EAAGvG,EAAGD,GACjC7I,KAAKq2D,gBAAgBpnD,EAAGG,EAAGC,EAAGvG,EAAGD,GAE7Bw9D,EAEHp3D,EAAEo9C,WAAWj9C,EAAGC,EAAGvG,EAAGD,EAAG7I,KAAKosB,MAAOpsB,KAAKqsB,OAAQrsB,KAAK0oD,KAAM1oD,KAAKgV,SAChEhV,KAAKu8D,QAASv8D,KAAK24D,kBAAmB34D,KAAKkF,UAG9C,CAEC,IAAIohE,EAAWh+D,QAAQ+N,OAAOrW,KAAK+H,QAAU/H,KAAKsuB,SAAW3gB,YAAY4lB,mBAGrEgzC,EAAOD,GAAYr3D,aAAa++C,cAAiB,OAAS,GAC1Dj0C,EAAM/Z,KAAK+H,MAEVu+D,GAAmB,QAAPC,IAEhBxsD,EAAMzR,QAAQsQ,aAAamB,GAAK,IAGtB,QAAPwsD,GAAkBj+D,QAAQ+N,OAAOrW,KAAK+H,SAEzCgS,EAAMzR,QAAQkS,wBAAwBT,EAAK,oBAI5CA,GAAQzR,QAAQ+N,OAAOrW,KAAK+H,QAAU/H,KAAK+lE,kBAA2B,QAAPQ,EAC9DxsD,EAAInL,QAAQ,MAAO,SAAWmL,EAE/B,IAAI6uC,EAAM5oD,KAAKy8D,cAEX7T,GAAOj7C,YAAY2yB,qBAAwBgmC,IAE9C1d,EAAM5oD,KAAKwmE,oBAGR5d,GAAOj7C,YAAY4yB,oBAAsBqoB,GAAOj7C,YAAY6yB,qBAE/DooB,EAAM,MAGP35C,EAAEZ,KAAKe,EAAGC,EAAGvG,EAAGD,EAAGkR,EAAK/Z,KAAKosB,MAAOpsB,KAAKqsB,OAAQrsB,KAAK0oD,KAAM6d,EAC3DvmE,KAAKgV,SAAUhV,KAAKu8D,QAASv8D,KAAK24D,kBAAmB/P,KASxDgQ,OAAOxsD,UAAUyG,OAAS,WAEzB,GAAI7S,KAAK4K,SAAW5K,KAAKmjD,eAAiBnjD,KAAKomE,cAAgBpmE,KAAKmmE,WAAanmE,KAAK+H,QACpFO,QAAQ+N,OAAOrW,KAAK+H,QAAU/H,KAAKsuB,SAAW3gB,YAAY4lB,oBAE3D,GAA0B,OAAtBvzB,KAAKkF,KAAKoR,WAAsBtW,KAAKg0D,iBAAoB9zD,SAAS4C,OAuBtE,CACC,IAAI2rB,EAASzuB,KAAK+0D,eAEJ,MAAVtmC,GAAuC,MAArBA,EAAO49B,YAG5B59B,EAAOkoB,cAAgB32C,KAAK22C,cAE5B32C,KAAKojD,MAAM30B,GAAQ,GACnBzuB,KAAKi1D,cAAcxmC,GACnBzuB,KAAKy0D,qBAKLvR,QAAQ92C,UAAUyG,OAAOzH,MAAMpL,KAAMqL,gBApClCnL,SAAS+C,OAEZjD,KAAKymE,2BAILzmE,KAAK0mE,WAAW1mE,KAAKkF,KAAqB,MAAdlF,KAAK6R,OAA4C,MAA3B7R,KAAK6R,MAAM0V,KAAKo/C,SAE9DzmE,SAASE,QAAmC,MAAzBS,SAASC,cAAwBD,SAASC,cAAgB,GAEhFd,KAAK4mE,mBAIL5mE,KAAK6mE,uBAIP7mE,KAAKy0D,yBAwBNvR,QAAQ92C,UAAUyG,OAAOzH,MAAMpL,KAAMqL,WAEjC/C,QAAQ+N,OAAOrW,KAAK+H,QAAU/H,KAAKsuB,SAAW3gB,YAAY4lB,mBAE7DvzB,KAAKmmE,UAAYnmE,KAAK+H,MAItB/H,KAAKmmE,UAAY,MAUpBvN,OAAOxsD,UAAU2rD,YAAc,WAE9B7U,QAAQ92C,UAAU2rD,YAAY3sD,MAAMpL,KAAMqL,WAE1CrL,KAAKic,MAAQ,QACbjc,KAAKosB,MAAQze,YAAYwyB,aACzBngC,KAAKqsB,OAAS1e,YAAYyyB,aAC1BpgC,KAAKi8D,OAAStuD,YAAYqf,mBAC1BhtB,KAAK6tB,KAAOlgB,YAAYof,iBACxB/sB,KAAK8sB,UAAYnf,YAAYqpB,kBAC7Bh3B,KAAKg4D,QAAU,EACfh4D,KAAKk8D,WAAa,EAClBl8D,KAAKm8D,aAAe,EACpBn8D,KAAKo8D,cAAgB,EACrBp8D,KAAKq8D,YAAc,EACnBr8D,KAAKoxD,YAAa,SACXpxD,KAAKs8D,kBACLt8D,KAAKqvB,OACZrvB,KAAKy8D,cAAgB9uD,YAAYkpB,8BAC1B72B,KAAKqwD,QAYbuI,OAAOxsD,UAAUhB,MAAQ,SAASyG,GAEjC,IAAIm8B,EAAMhuC,KAAKg4D,QACf9U,QAAQ92C,UAAUhB,MAAMA,MAAMpL,KAAMqL,WAElB,MAAdrL,KAAK0H,QAER1H,KAAK8sB,UAAYxkB,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYwvB,gBAAiBn9B,KAAK8sB,WAChF9sB,KAAKi8D,OAAS3zD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYsvB,iBAAkBj9B,KAAKi8D,QAC9Ej8D,KAAK6tB,KAAOvlB,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYuvB,eAAgBl9B,KAAK6tB,MAC1E7tB,KAAKic,MAAQ3T,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYqvB,gBAAiBh9B,KAAKic,OAC5Ejc,KAAKosB,MAAQ9jB,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYgsB,YAAa35B,KAAKosB,OACxEpsB,KAAKqsB,OAAS/jB,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYisB,qBAAsB55B,KAAKqsB,QAClFrsB,KAAKg4D,QAAU51D,SAASkG,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY8uB,cAAez8B,KAAKg4D,UACrFh4D,KAAKk8D,WAAa95D,SAASkG,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY+uB,kBAAmB18B,KAAKk8D,WAAaluB,IAAQhuC,KAAKg4D,QACtHh4D,KAAKm8D,aAAe/5D,SAASkG,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYkvB,oBAAqB78B,KAAKm8D,aAAenuB,IAAQhuC,KAAKg4D,QAC5Hh4D,KAAKo8D,cAAgBh6D,SAASkG,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYivB,qBAAsB58B,KAAKo8D,cAAgBpuB,IAAQhuC,KAAKg4D,QAC/Hh4D,KAAKq8D,YAAcj6D,SAASkG,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYgvB,mBAAoB38B,KAAKq8D,YAAcruB,IAAQhuC,KAAKg4D,QACzHh4D,KAAKoxD,WAAa9oD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY6Z,iBAAkBxnB,KAAKoxD,YAClFpxD,KAAKs8D,WAAah0D,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYgtB,4BAA6B36B,KAAKs8D,YAC7Ft8D,KAAKqvB,OAAS/mB,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYitB,wBAAyB56B,KAAKqvB,QACrFrvB,KAAKy8D,cAAgBn0D,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYyqB,qBAAsBzqB,YAAYkpB,wBAChG72B,KAAKiT,QAAU3K,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYwqB,mBAAoB,KAC5En4B,KAAK08D,gBAGN18D,KAAK2lB,MAAQ,KACb3lB,KAAK0lB,MAAQ,MAWdkzC,OAAOxsD,UAAUo6D,iBAAmB,WAGnC,IAAI31D,EAAM,4EAA4Ei2D,KAAK9mE,KAAK+H,OAGhG,OAAe,MAAP8I,GAAeA,EAAI1O,OAAS,GAAK0O,EAAI,GAAK,IACjDlD,YAAY6yB,mBAAqB7yB,YAAY4yB,oBAQ/Cq4B,OAAOxsD,UAAU26D,eAAiB,WAEjC,IAAIp6D,EAAS3M,KAAKkF,KAgBlB,OAdc,MAAVyH,IAKFA,EAF6B,MAA1BA,EAAOskB,gBAEDjxB,KAAKkF,KAAK0Q,WAAWA,WAKrBjJ,EAAOiJ,WAAWA,WAAWA,WAAWA,WAAWA,YAIvDjJ,GAQRisD,OAAOxsD,UAAUqoD,kBAAoB,WAEpC,IAAIvvD,EAAOlF,KAAKkF,KAChBlF,KAAKqzD,YAAcrzD,KAAKymB,OAAOhX,QAC/B,IAAI+gD,EAAMxwD,KAAK24D,kBAEX9vD,EAAmB,MAAd7I,KAAK0H,MAAiBY,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYmsB,qBAAsBnsB,YAAYwyB,cAAgB,KACtHj+B,EAAmB,MAAdlC,KAAK0H,MAAiBY,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYosB,8BAA+BpsB,YAAYyyB,cAAgB,KAEnI,KAAKpgC,KAAKimE,kBAA4B,MAAR/gE,GAAiC,QAAjBlF,KAAKgV,UAAwBhV,KAAKu8D,SAC9Ev8D,KAAKgmE,yBAA2Bn9D,GAAK8E,YAAYwyB,cAAgBj+B,GAAKyL,YAAYyyB,cACpF,CACC,IAAI4mC,EAAK,KACLnW,EAAK,KAET,GAA4B,MAAxB3rD,EAAK+rB,gBAER,GAAuB,MAAnB/rB,EAAK0Q,YAAoD,MAA9B1Q,EAAK0Q,WAAWA,YACP,iBAAvC1Q,EAAK0Q,WAAWA,WAAWU,SAI3Bu6C,GADA3rD,EAAOA,EAAK0Q,WAAWA,WAAWA,WAAWA,YACnC7L,aAAe/J,KAAKsS,MAI7B00D,EAFoB,SAAjBhnE,KAAKgV,SAEHhV,KAAKqzD,YAAYprD,MAIjB/C,EAAKyX,YAAc3c,KAAKsS,WAK9B,IAEC,IAAI+J,EAAInX,EAAK4oD,UAgBb,YAb0B,iBAAf9tD,KAAU,OAA6C,GAA5BsI,QAAQyN,KAAK/V,KAAK+H,QAIpC,GAAXsU,EAAEpU,OAA0B,GAAZoU,EAAExU,OAF1B7H,KAAKqzD,YAAc,KAQnBrzD,KAAKqzD,YAAc,IAAI/jD,YAAY+M,EAAEjN,EAAGiN,EAAEhN,EAAGgN,EAAEpU,MAAOoU,EAAExU,SAK1D,MAAOuG,QAOT,CACC,IAAI3G,EAAoB,MAAdzH,KAAK6R,MAAiB7R,KAAK6R,MAAM0V,KAAKo/C,QAAU,KAG1D,GAAwB,MAApB3mE,KAAK2c,aAA4C,MAArB3c,KAAK+J,aAEpCi9D,EAAKhnE,KAAK2c,YAAc3c,KAAKsS,MAC7Bu+C,EAAK7wD,KAAK+J,aAAe/J,KAAKsS,UAG/B,CAGW,MAAN7K,IAEHzH,KAAK0tD,WAAWjmD,GAChBzH,KAAK0mE,WAAWj/D,GAAI,GACpBzH,KAAKinE,gBAAgBx/D,GAErBvC,EAAOuC,GAGR,IAAImpD,EAAU1rD,EAEd,GAA6B,GAAzBrE,SAASC,cAAsBZ,SAASa,MAuCb,MAAtB6vD,EAAQh7C,YAAqD,OAA/Bg7C,EAAQh7C,WAAWU,WAEzDs6C,EAAUA,EAAQh7C,gBAxCnB,CACC,IAAI9M,EAAIM,KAAK2c,MAAM/lB,KAAKymB,OAAOxe,MAAQjI,KAAKsS,OAE5C,GAAItS,KAAK0oD,MAAQ5/C,EAAI,GAKpB,GAHA5D,EAAKwC,MAAM6oD,SAAW5iD,YAAYmpB,UAClC5xB,EAAKwC,MAAMkmB,WAAa,SAEG,cAAvB1oB,EAAKwC,MAAM6oD,SACf,CAEC,IAAI2W,EAAOtW,EAAQtsD,qBAAqB,OAEpC4iE,EAAK/kE,OAAS,IAEjByuD,EAAUsW,EAAKA,EAAK/kE,OAAS,IAG9B6kE,EAAKpW,EAAQj0C,YAAc,EAC3BuqD,EAAOlnE,KAAKkF,KAAKZ,qBAAqB,OAElCtE,KAAKu8D,UAERyK,EAAK59D,KAAK2G,IAAIjH,EAAGk+D,IAIdE,EAAK/kE,OAAS,IAEjB+kE,EAAKA,EAAK/kE,OAAS,GAAGuF,MAAMO,MAAQ++D,EAAK,YAM3C9hE,EAAKwC,MAAMkmB,WAAa,SAQ1B5tB,KAAK2c,YAAci0C,EAAQj0C,YAAc3c,KAAKkmE,iBAC9ClmE,KAAK+J,aAAe6mD,EAAQ7mD,aAE5Bi9D,EAAKhnE,KAAK2c,YAAc3c,KAAKsS,MAC7Bu+C,EAAK7wD,KAAK+J,aAAe/J,KAAKsS,OAItB,MAAN00D,GAAoB,MAANnW,IAEjB7wD,KAAKqzD,YAAc,IAAI/jD,YAAYtP,KAAKymB,OAAOrX,EAC9CpP,KAAKymB,OAAOpX,EAAG23D,EAAInW,IAItB,GAAwB,MAApB7wD,KAAKqzD,YAER,GAAW,GAAP7C,EACJ,CAEC,IAAI3C,EAAOvlD,QAAQ2a,eAAe,IAAI3T,YACrCtP,KAAKqwD,OAAOjhD,EAAIpP,KAAKqzD,YAAYprD,MACjCjI,KAAKqwD,OAAOhhD,EAAIrP,KAAKqzD,YAAYxrD,OACjC7H,KAAKqzD,YAAYprD,MAAOjI,KAAKqzD,YAAYxrD,QACzC2oD,EAAK,IAAIrhD,QAAQ,EAAG,IAErBnP,KAAKmnE,qBAAuB73D,YAAYwB,cAAc9Q,KAAKqzD,aAC3DrzD,KAAKmnE,qBAAqB/3D,GAAKpP,KAAKqwD,OAAOjhD,EAAIpP,KAAKmnE,qBAAqBl/D,MACzEjI,KAAKmnE,qBAAqB93D,GAAKrP,KAAKqwD,OAAOhhD,EAAIrP,KAAKmnE,qBAAqBt/D,OAEzE7H,KAAKqzD,YAAYjkD,GAAKy+C,EAAKz+C,EAC3BpP,KAAKqzD,YAAYhkD,GAAKw+C,EAAKx+C,EAC3BrP,KAAKqzD,YAAYprD,MAAQ4lD,EAAK5lD,MAC9BjI,KAAKqzD,YAAYxrD,OAASgmD,EAAKhmD,YAI/B7H,KAAKqzD,YAAYjkD,GAAKpP,KAAKqwD,OAAOjhD,EAAIpP,KAAKqzD,YAAYprD,MACvDjI,KAAKqzD,YAAYhkD,GAAKrP,KAAKqwD,OAAOhhD,EAAIrP,KAAKqzD,YAAYxrD,OACvD7H,KAAKmnE,qBAAuB,MAU/BvO,OAAOxsD,UAAUwqD,iBAAmB,WAEnC,OAAO,GAQRgC,OAAOxsD,UAAUusD,gBAAkB,WAElC,OAAsB,MAAd34D,KAAK6R,OAAqC,MAApB7R,KAAK6R,MAAMQ,MAAiBrS,KAAK6R,MAAMQ,MAAMsmD,kBAAoB,GAShGC,OAAOxsD,UAAUwoD,sBAAwB,WAExC,OAAQ50D,KAAKoxD,YAA4B,MAAdpxD,KAAK6R,OAAiB7R,KAAK6R,MAAM0V,KAAKtW,MAAMiB,MAAM2vC,SAAS7hD,KAAK6R,MAAMG,OAQlG4mD,OAAOxsD,UAAUiqD,gBAAkB,SAASpnD,EAAGG,EAAGC,EAAGvG,EAAGD,GAEvDq6C,QAAQ92C,UAAUiqD,gBAAgBjrD,MAAMpL,KAAMqL,WAE9C4D,EAAEi4C,aAAalnD,KAAKic,OACpBhN,EAAEk4C,uBAAuBnnD,KAAKs8D,YAC9BrtD,EAAEm4C,mBAAmBpnD,KAAKqvB,QAC1BpgB,EAAEq4C,cAActnD,KAAKi8D,QACrBhtD,EAAEo4C,YAAYrnD,KAAK6tB,MACnB5e,EAAEs4C,aAAavnD,KAAK8sB,YAQrB8rC,OAAOxsD,UAAU+oD,mBAAqB,WAErCn1D,KAAKkF,KAAKwC,MAAM+U,KAAOrT,KAAK2c,MAAM/lB,KAAKymB,OAAOrX,GAAK,KACnDpP,KAAKkF,KAAKwC,MAAMuV,IAAM7T,KAAK2c,MAAM/lB,KAAKymB,OAAOpX,GAAK,KAClDrP,KAAKkF,KAAKwC,MAAMO,MAAQ,MACxBjI,KAAKkF,KAAKwC,MAAMG,OAAS,MACzB7H,KAAKkF,KAAKwC,MAAMsN,SAAW,WAQ5B4jD,OAAOxsD,UAAUg7D,aAAe,WAE/B,IAAIrtD,EAAM/Z,KAAK+H,MAWf,OATI/H,KAAKsuB,SAAW3gB,YAAY4lB,qBAE/BxZ,EAAMzR,QAAQsQ,aAAamB,GAAK,IAIjCA,EAAMzR,QAAQkS,wBAAwBT,EAAK,mBAC3CA,EAAO/Z,KAAqB,iBAAI+Z,EAAInL,QAAQ,MAAO,SAAWmL,GAU/D6+C,OAAOxsD,UAAUugD,WAAa,WAE7B,IAAIU,EAAM1/C,YAAgC,qBAAK3N,KAAK6tB,KAAOlgB,YAAYwf,YAAe,KACrFxf,YAAYwf,YAETmgC,EAAM,qCAAuCttD,KAAK6tB,KAA5C,oBACS7tB,KAAKi8D,OAAS,YAAcj8D,KAAKic,MAAQ,kBAAoBoxC,EAC/E,sBAAyBrtD,KAAkB,cAAI,MAAQ,QAAU,MAE7DA,KAAK8sB,UAAYnf,YAAYyf,YAAczf,YAAYyf,YAE3DkgC,GAAO,wBAGHttD,KAAK8sB,UAAYnf,YAAY2f,cAAgB3f,YAAY2f,cAE7DggC,GAAO,wBAGR,IAAIC,EAAO,GAiBX,OAfKvtD,KAAK8sB,UAAYnf,YAAY6f,iBAAmB7f,YAAY6f,gBAEhE+/B,EAAK3gD,KAAK,cAGN5M,KAAK8sB,UAAYnf,YAAY8f,qBAAuB9f,YAAY8f,oBAEpE8/B,EAAK3gD,KAAK,gBAGP2gD,EAAKprD,OAAS,IAEjBmrD,GAAO,oBAAsBC,EAAKr+C,KAAK,KAAO,MAGxCo+C,GAQRsL,OAAOxsD,UAAUooD,gBAAkB,WAElC,GAAIt0D,SAAS+C,OAEZjD,KAAKymE,8BAGN,CACC,IAAI/+D,EAAQ1H,KAAKkF,KAAKwC,MAGtBA,EAAMkmB,WAAa,SACnBlmB,EAAMsN,SAAW,GACjBtN,EAAMO,MAAQ,GACdP,EAAMG,OAAS,GAEf7H,KAAKqnE,cACLrnE,KAAK0tD,WAAW1tD,KAAKkF,MACrBlF,KAAK0mE,WAAW1mE,KAAKkF,KAAqB,MAAdlF,KAAK6R,OAA4C,MAA3B7R,KAAK6R,MAAM0V,KAAKo/C,SAElE3mE,KAAK2c,YAAc,KACnB3c,KAAK+J,aAAe,KAEhB7J,SAASE,QAAmC,MAAzBS,SAASC,cAAwBD,SAASC,cAAgB,GAEhFd,KAAK4mE,mBAIL5mE,KAAK6mE,wBAURjO,OAAOxsD,UAAUq6D,wBAA0B,WAE1C,IAAI39D,EAAIM,KAAKC,IAAI,EAAGD,KAAK2c,MAAM/lB,KAAKymB,OAAOxe,MAAQjI,KAAKsS,QACpDzJ,EAAIO,KAAKC,IAAI,EAAGD,KAAK2c,MAAM/lB,KAAKymB,OAAO5e,OAAS7H,KAAKsS,QACrDs6C,EAAO,6BAA+BxjD,KAAK2c,MAAM/lB,KAAKymB,OAAOrX,GAAtD,YACAhG,KAAK2c,MAAM/lB,KAAKymB,OAAOpX,GAAK,6BACnCw9C,EAAQ7sD,KAAK2sD,aAEjB3O,cAAc0O,UAAU5jD,EAAI,EAAGD,EAAG7I,KAAKosB,MAAOpsB,KAAKqsB,OAAQrsB,KAAK0oD,KAAM1oD,KAAKgV,SAAUhV,KAAKu8D,QACrE,MAAnBv8D,KAAKs8D,WAAsBh0D,QAAQsQ,aAAa5Y,KAAKs8D,YAAc,KACpD,MAAft8D,KAAKqvB,OAAkB/mB,QAAQsQ,aAAa5Y,KAAKqvB,QAAU,KAC5Du9B,EAAMC,EAAO7sD,KAAKsS,MAAOhK,QAAQ2M,KAAKjV,MAAM,SAASuS,EAAIE,EAAIm6C,EAAMpM,EAAMqM,EAAOI,GAEhF,IAAIllC,EAAI/nB,KAAK24D,kBACTnxD,GAAqB,GAAdxH,KAAKsS,MAAc,SAAWtS,KAAKsS,MAAQ,KAAO,KACrD,GAALyV,EAAU,UAAYA,EAAI,QAAU,KACnB,GAAjB/nB,KAAKqwD,OAAOjhD,GAA2B,GAAjBpP,KAAKqwD,OAAOhhD,EACnC,aAAgC,IAAhBrP,KAAKqwD,OAAOjhD,EAAW,KACrB,IAAhBpP,KAAKqwD,OAAOhhD,EAAW,KAAO,IAExB,IAAN7H,IAEHA,EAAK,qCAAuCA,EAAK,MAGvC,IAAPylD,GAEHL,GAAQpM,EACRA,EAAO,0CAA4Ch5C,GAInDg5C,GAAQh5C,EAGLxH,KAAKiT,QAAU,MAElB45C,GAAS,YAAe7sD,KAAKiT,QAAU,IAAO,MAG/CjT,KAAKkF,KAAKb,aAAa,QAASuoD,GAEhC,IAAIl8B,EAAQpoB,QAAQ+N,OAAOrW,KAAK+H,OAAU/H,KAAK+H,MAAMgT,UAAY/a,KAAKonE,eAE1C,MAAxBpnE,KAAKkF,KAAK0Q,aAEb5V,KAAKkF,KAAKoV,UAAY,aAAeoW,EAAM,gBAG5C1wB,KAAKkF,KAAK0Q,WAAWA,WAAWvR,aAAa,QAASwoD,GACtD7sD,KAAKkF,KAAK0Q,WAAWvR,aAAa,QAASm8C,QAS7CoY,OAAOxsD,UAAUy6D,oBAAsB,WAEtC,IAAI/gB,EAAQ9lD,KAAK24D,kBACbjxD,EAAQ1H,KAAKkF,KAAKwC,MAClB6K,EAAKvS,KAAKqwD,OAAOjhD,EACjBqD,EAAKzS,KAAKqwD,OAAOhhD,EAER,GAATy2C,GAEHx9C,QAAQuM,iBAAiBnN,EAAO,kBAA0B,KAAL6K,EAAF,KAAiC,KAALE,EAAY,KAC3FnK,QAAQuM,iBAAiBnN,EAAO,YAAa,aAAqB,IAAL6K,EAAhB,KAA8C,IAALE,EAAzC,YACjCzS,KAAKsS,MAAQ,YAAcwzC,EAAQ,UAI/Cx9C,QAAQuM,iBAAiBnN,EAAO,kBAAmB,SACnDY,QAAQuM,iBAAiBnN,EAAO,YAAa,SAAW1H,KAAKsS,MAAhB,eACvB,IAALC,EAD4B,KACE,IAALE,EAAY,OAGvD/K,EAAM+U,KAAOrT,KAAK2c,MAAM/lB,KAAKymB,OAAOrX,EAAIhG,KAAKgZ,KAAK7P,GAAwB,QAAjBvS,KAAKgV,UAC5C,SAAjBhV,KAAKgV,SAAuB,EAAI,KAAO,KACxCtN,EAAMuV,IAAM7T,KAAK2c,MAAM/lB,KAAKymB,OAAOpX,EAAIoD,GAAwB,QAAjBzS,KAAKgV,SAAsB,EAAI,IAAM,KAE/EhV,KAAKiT,QAAU,IAElBvL,EAAMuL,QAAUjT,KAAKiT,QAAU,IAI/BvL,EAAMuL,QAAU,IASlB2lD,OAAOxsD,UAAU66D,gBAAkB,SAASt9D,GAE3C,GAAIrB,QAAQ+N,OAAOrW,KAAK+H,OAEvB4B,EAAI2Q,UAAYta,KAAK+H,MAAMgT,cAG5B,CACC,IAAIhB,EAAM/Z,KAAK+H,MAEX/H,KAAKsuB,SAAW3gB,YAAY4lB,qBAG/BxZ,EAAMzR,QAAQsQ,aAAamB,GAAK,IAIjCA,EAAMzR,QAAQkS,wBAAwBT,EAAK,qBAE3CA,EAAM,uDADNA,EAAO/Z,KAAqB,iBAAI+Z,EAAInL,QAAQ,MAAO,SAAWmL,GACM,SAEpEpQ,EAAI2Q,UAAYP,IASlB6+C,OAAOxsD,UAAUw6D,iBAAmB,WAEnC,IAAIl/D,EAAQ1H,KAAKkF,KAAKwC,MAClB6K,EAAKvS,KAAKqwD,OAAOjhD,EACjBqD,EAAKzS,KAAKqwD,OAAOhhD,EACjBwJ,EAAI7Y,KAAKsS,MAGbhK,QAAQ8J,WAAWpS,KAAKkF,KAAMlF,KAAKiT,SAGnC,IAAI+zD,EAAK,EACLnW,EAAK,EACLppD,EAAoB,MAAdzH,KAAK6R,MAAiB7R,KAAK6R,MAAM0V,KAAKo/C,QAAU,KACtD/V,EAAU5wD,KAAKkF,KAGnB,GAAU,MAANuC,EACJ,CACCA,EAAGC,MAAMsN,SAAW,GACpBvN,EAAGC,MAAMG,OAAS,GAClBJ,EAAGC,MAAMO,MAAQ,GAEjBjI,KAAK0tD,WAAWjmD,GAChBzH,KAAK0mE,WAAWj/D,GAAI,GACpBzH,KAAKinE,gBAAgBx/D,GAErB,IAAIqB,EAAIM,KAAK2c,MAAM/lB,KAAKymB,OAAOxe,MAAQjI,KAAKsS,OAExCtS,KAAK0oD,MAAQ5/C,EAAI,GAEpBrB,EAAGC,MAAMkmB,WAAa,SACtBnmB,EAAGC,MAAM6oD,SAAW5iD,YAAYmpB,UAChCkwC,EAAKl+D,EAED9I,KAAKu8D,UAERyK,EAAK59D,KAAK2G,IAAIi3D,EAAIhnE,KAAKymB,OAAOxe,QAG/BR,EAAGC,MAAMO,MAAQ++D,EAAK,MAItBv/D,EAAGC,MAAMkmB,WAAa,SAKG,OAF1BgjC,EAAUnpD,GAEEmO,YAAqD,OAA/Bg7C,EAAQh7C,WAAWU,WAEpDs6C,EAAUA,EAAQh7C,WAEd5V,KAAK0oD,MAA6B,cAArBjhD,EAAGC,MAAM6oD,WAEzBK,EAAQlpD,MAAMO,MAAQ,UAKnBjI,KAAKu8D,SAAWv8D,KAAK0oD,MAAQ5/C,EAAI,IAErCk+D,EAAKpW,EAAQj0C,YAAc3c,KAAKkmE,iBAChCz+D,EAAGC,MAAMO,MAAQ++D,EAAK,MAGvBnW,EAAKD,EAAQ7mD,aAAe,EAExB7J,SAASU,WAA4B,MAAfZ,KAAKqvB,QAAkBrvB,KAAKqvB,QAAU1hB,YAAYC,OAE3EijD,GAAM,QAGuB,MAAtBD,EAAQh7C,YAAqD,OAA/Bg7C,EAAQh7C,WAAWU,WAGzDu6C,GADAD,EAAUA,EAAQh7C,YACL7L,cAGdi9D,EAAKpW,EAAQj0C,YAAc3c,KAAKkmE,iBAE5BlmE,KAAKu8D,UAER1L,EAAKznD,KAAK2G,IAAI8gD,EAAI7wD,KAAKymB,OAAO5e,SAG3BiB,EAAI9I,KAAKymB,OAAOxe,MAAQ4Q,EAA5B,IACIhQ,EAAI7I,KAAKymB,OAAO5e,OAASgR,EAGR,QAAjB7Y,KAAKgV,UAER67C,EAAKhoD,EACLm+D,EAAKl+D,GAEoB,SAAjB9I,KAAKgV,WAEb67C,EAAKD,EAAQnlD,aACbu7D,EAAKl+D,GAIN9I,KAAK2c,YAAcqqD,EACnBhnE,KAAK+J,aAAe8mD,EAGhB3wD,SAASU,YAAcZ,KAAKu8D,SAA6B,SAAjBv8D,KAAKgV,UAAuBnM,EAAI,IAE3EA,EAAIO,KAAK2G,IAAIlH,EAAGgoD,GAChBnpD,EAAMG,OAASuB,KAAK2c,MAAMld,GAAK,MAI/BA,EAAIgoD,EAGgB,QAAjB7wD,KAAKgV,UAAuC,SAAjBhV,KAAKgV,WAE/BhV,KAAKu8D,UAERyK,EAAK59D,KAAK2G,IAAIjH,EAAGk+D,IAGlBl+D,EAAIk+D,GAGC9mE,SAASU,WAAaZ,KAAKu8D,SAAYv8D,KAAK0oD,QAEhDhhD,EAAMO,MAAQmB,KAAK2c,MAAMjd,GAAK,OAIhCD,GAAKgQ,EACL/P,GAAK+P,EAGL,IAAIoH,EAAMjgB,KAAK24D,mBAAqBvvD,KAAK2W,GAAK,KAG1C2wC,EAAW/7C,WAAWA,WAAWvL,KAAK2X,IAAId,IAAMqoC,QAAQ,IACxDqI,EAAWh8C,WAAWA,WAAWvL,KAAK6X,KAAKhB,IAAMqoC,QAAQ,KAE7DroC,GAAO,EAAI7W,KAAK2W,IAEN,IAETE,GAAO,EAAI7W,KAAK2W,KAGjBE,GAAO7W,KAAK2W,IAEF3W,KAAK2W,GAAK,IAEnBE,EAAM7W,KAAK2W,GAAKE,GAGjB,IAAIc,EAAM3X,KAAK2X,IAAId,GACfgB,EAAM7X,KAAK6X,KAAKhB,GAEhB4B,EAAK/Y,IAAMyJ,EAAK,IAChBuP,EAAKjZ,IAAM4J,EAAK,IAEhBq+C,GAAWjoD,EAAIA,EAAIkY,EAAMjY,EAAImY,GAAO,EAAI0vC,EAAW9uC,EAAK6uC,EAAW5uC,EACnEivC,GAAYjoD,EAAIA,EAAIiY,EAAMlY,EAAIoY,GAAO,EAAIyvC,EAAW7uC,EAAK8uC,EAAW7uC,EAExE,GAAW,GAAP7B,EACJ,CACC,IAAIrM,EAAI,gDAAkD88C,EAAW,SACpEC,EAAW,UAAaA,EAAY,SAAWD,EAAW,gCAEvC,MAAhBhpD,EAAM6T,QAAkB7T,EAAM6T,OAAOpZ,OAAS,EAEjDuF,EAAM6T,QAAU,IAAM3H,EAItBlM,EAAM6T,OAAS3H,EAKbnB,EAAK,EAEY,QAAjBzS,KAAKgV,UAAsB9U,SAASU,YAEnCZ,KAAKqsB,QAAU1e,YAAY6e,UAE9B/Z,GAAM,EAEEzS,KAAKqsB,QAAU1e,YAAY8e,aAEnCha,GAAM,EAINA,GAAM,GAIR/K,EAAMimB,KAAO9U,EACbnR,EAAM+U,KAAOrT,KAAK2c,MAAM/lB,KAAKymB,OAAOrX,EAAI2hD,EAAWjoD,EAAI,GAAK,KAC5DpB,EAAMuV,IAAM7T,KAAK2c,MAAM/lB,KAAKymB,OAAOpX,EAAIyhD,EAAUjoD,EAAI,EAAI4J,GAAM,MAQhEmmD,OAAOxsD,UAAUi7D,YAAc,WAE9B,GAAI/+D,QAAQ+N,OAAOrW,KAAK+H,OAEvB/H,KAAKkF,KAAKoV,UAAY,GACtBta,KAAKkF,KAAKX,YAAYvE,KAAK+H,WAG5B,CACC,IAAIgS,EAAM/Z,KAAK+H,MAEX/H,KAAKsuB,SAAW3gB,YAAY4lB,qBAE/BxZ,EAAMzR,QAAQsQ,aAAamB,GAAK,IAIjCA,EAAMzR,QAAQkS,wBAAwBT,EAAK,mBAC3CA,EAAO/Z,KAAqB,iBAAI+Z,EAAInL,QAAQ,MAAO,SAAWmL,EAC9D,IAAIizC,EAAyB,MAAnBhtD,KAAKs8D,YAAsBt8D,KAAKs8D,YAAc3uD,YAAYC,KAAQ5N,KAAKs8D,WAAa,KAC1FgL,EAAqB,MAAftnE,KAAKqvB,QAAkBrvB,KAAKqvB,QAAU1hB,YAAYC,KAAQ5N,KAAKqvB,OAAS,KAElF,GAAqB,QAAjBrvB,KAAKgV,UAAuC,SAAjBhV,KAAKgV,SAEzB,MAANg4C,IAEHhtD,KAAKkF,KAAKwC,MAAMoxC,gBAAkBkU,GAGzB,MAANsa,IAEHtnE,KAAKkF,KAAKwC,MAAM2nB,OAAS,aAAei4C,OAI1C,CACC,IAAIha,EAAM,GAEA,MAANN,IAEHM,GAAO,oBAAsBhlD,QAAQsQ,aAAao0C,GAAM,KAG/C,MAANsa,IAEHha,GAAO,oBAAsBhlD,QAAQsQ,aAAa0uD,GAAM,KAQzDvtD,EAAM,sBAAwBuzC,EAAxB,kHAFI3/C,YAAgC,qBAAK3N,KAAK6tB,KAAOlgB,YAAYwf,YAAe,KACrFxf,YAAYwf,aAE+C,KAAOpT,EAAM,SAG1E/Z,KAAKkF,KAAKoV,UAAYP,EAGtB,IAAImtD,EAAOlnE,KAAKkF,KAAKZ,qBAAqB,OAE1C,GAAI4iE,EAAK/kE,OAAS,EAClB,CACC,IAAIymD,EAAM5oD,KAAKy8D,cAEX7T,GAAOj7C,YAAY2yB,qBAAuBtgC,KAAKsuB,SAAW3gB,YAAY4lB,qBAEzEq1B,EAAM5oD,KAAKwmE,oBAGR5d,GAAOj7C,YAAY4yB,oBAAsBqoB,GAAOj7C,YAAY6yB,mBAE/D0mC,EAAKA,EAAK/kE,OAAS,GAAGkC,aAAa,MAAOukD,GAI1Cse,EAAKA,EAAK/kE,OAAS,GAAGwpD,gBAAgB,UAW1CiN,OAAOxsD,UAAUshD,WAAa,SAASxoD,GAEtC,IAAIwC,EAAQxC,EAAKwC,MAEjBA,EAAMwlB,WAAcvf,YAAgC,qBAAK3N,KAAK6tB,KAAOlgB,YAAYwf,YAAe,KAAOxf,YAAYwf,YACnHzlB,EAAMilB,SAAW3sB,KAAK6tB,KAAO,KAC7BnmB,EAAMklB,WAAa5sB,KAAKi8D,OACxBv0D,EAAMC,cAAgB,MACtBD,EAAMuU,MAAQjc,KAAKic,OAEdjc,KAAK8sB,UAAYnf,YAAYyf,YAAczf,YAAYyf,UAE3D1lB,EAAM2lB,WAAa,OAInB3lB,EAAM2lB,WAAa,IAGfrtB,KAAK8sB,UAAYnf,YAAY2f,cAAgB3f,YAAY2f,YAE7D5lB,EAAMolB,UAAY,SAIlBplB,EAAMolB,UAAY,GAGnB,IAAIS,EAAW,IAEVvtB,KAAK8sB,UAAYnf,YAAY6f,iBAAmB7f,YAAY6f,gBAEhED,EAAS3gB,KAAK,cAGV5M,KAAK8sB,UAAYnf,YAAY8f,qBAAuB9f,YAAY8f,oBAEpEF,EAAS3gB,KAAK,gBAGflF,EAAMwU,eAAiBqR,EAASre,KAAK,KAEjClP,KAAKosB,OAASze,YAAYwyB,aAE7Bz4B,EAAMq4C,UAAY,SAEV//C,KAAKosB,OAASze,YAAY4e,YAElC7kB,EAAMq4C,UAAY,QAIlBr4C,EAAMq4C,UAAY,QASpB6Y,OAAOxsD,UAAUs6D,WAAa,SAASxhE,EAAMqiE,GAE5C,IAAIz+D,EAAIM,KAAKC,IAAI,EAAGD,KAAK2c,MAAM/lB,KAAKymB,OAAOxe,MAAQjI,KAAKsS,QACpDzJ,EAAIO,KAAKC,IAAI,EAAGD,KAAK2c,MAAM/lB,KAAKymB,OAAO5e,OAAS7H,KAAKsS,QACrD5K,EAAQxC,EAAKwC,MA+BjB,GA3BI1H,KAAKu8D,SAER70D,EAAMsN,SAAW,SAEZ9U,SAASU,UAOb8G,EAAMO,MAAQa,EAAI,MALlBpB,EAAM+oD,UAAY5nD,EAAI,KACtBnB,EAAM8/D,SAAW1+D,EAAI,OAOG,QAAjB9I,KAAKgV,UAEbtN,EAAMO,MAASa,EAAI,EAAK,KACxBpB,EAAMG,OAAUgB,EAAI,EAAK,KACzBnB,EAAMsN,SAAW,UAEQ,SAAjBhV,KAAKgV,WAEbtN,EAAMO,MAASa,EAAI,EAAK,KACxBpB,EAAM+oD,UAAa5nD,EAAI,EAAK,KAC5BnB,EAAMsN,SAAW,UAGdhV,KAAK0oD,MAAQ5/C,EAAI,GAMpB,GAJApB,EAAM6oD,SAAW5iD,YAAYmpB,UAC7BpvB,EAAMkmB,WAAa,SACnBlmB,EAAMO,MAAQa,EAAI,KAEdy+D,GAA+B,QAAjBvnE,KAAKgV,UAAuC,SAAjBhV,KAAKgV,SAClD,CACC,IAAI47C,EAAU1rD,EAEY,MAAtB0rD,EAAQh7C,YAAqD,OAA/Bg7C,EAAQh7C,WAAWU,WAEpDs6C,EAAUA,EAAQh7C,WAES,cAAvB1Q,EAAKwC,MAAM6oD,WAEdK,EAAQlpD,MAAMO,MAAQ,SAIxB,IAAI4I,EAAM+/C,EAAQj0C,YAGlB,GAAW,GAAP9L,EACJ,CACC,IAAI0wD,EAAOr8D,EAAK2O,WAChB3O,EAAKwC,MAAM6D,WAAa,SACxB1K,SAASuG,KAAK7C,YAAYW,GAC1B2L,EAAM+/C,EAAQj0C,YACdzX,EAAKwC,MAAM6D,WAAa,GACxBg2D,EAAKh9D,YAAYW,GAGlB2L,GAAO,EAEH7Q,KAAKu8D,UAER1rD,EAAMzH,KAAK2G,IAAIc,EAAK/H,IAGrBpB,EAAMO,MAAQ4I,EAAM,WAKrBnJ,EAAMkmB,WAAa,UASrBgrC,OAAOxsD,UAAUswD,aAAe,WAE/B18D,KAAKqwD,OAAS/nD,QAAQ6jB,oBAAoBnsB,KAAKosB,MAAOpsB,KAAKqsB,SAQ5DusC,OAAOxsD,UAAUq7D,WAAa,WA+B7B,OAAO,IAAIt4D,QA1BPnP,KAAKosB,OAASze,YAAYwyB,cAEvBngC,KAAKq8D,YAAcr8D,KAAKm8D,cAAgB,EAEtCn8D,KAAKosB,OAASze,YAAY4e,aAE5BvsB,KAAKm8D,aAAen8D,KAAK8lE,iBAI1B9lE,KAAKq8D,YAAcr8D,KAAK6lE,gBAG1B7lE,KAAKqsB,QAAU1e,YAAYyyB,cAExBpgC,KAAKk8D,WAAal8D,KAAKo8D,eAAiB,EAEtCp8D,KAAKqsB,QAAU1e,YAAY8e,cAE7BzsB,KAAKo8D,cAAgBp8D,KAAK4lE,kBAI3B5lE,KAAKk8D,WAAal8D,KAAK2lE,iBAM9B1lE,WAAW24D,YAA2B,IAAXA,OAAyBA,YAAShyD,EAuB7D0B,QAAQoX,OAAOi9C,WAAYpB,SAO3BoB,WAAWvwD,UAAUosD,YAAc,WAElC,OAAO,GAQRmE,WAAWvwD,UAAU+0D,WAAa,SAASlyD,EAAGG,EAAGC,EAAGvG,EAAGD,GAEtD,IAAIuuD,EAAU9uD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYyuB,cAAezuB,YAAY2pB,cAAgB,EAClGt3B,KAAKm3D,UAAUloD,EAAG,CAAC,IAAIE,QAAQ,EAAG,GAAI,IAAIA,QAAQrG,EAAG,GAAMD,GAAI,IAAIsG,QAAQ,EAAGtG,IAAK7I,KAAKk3D,UAAWE,GAAS,IAG7Gn3D,WAAW08D,gBAAmC,IAAfA,WAA6BA,gBAAa/1D,EAuBzE0B,QAAQoX,OAAOk9C,UAAWrB,SAO1BqB,UAAUxwD,UAAU+0D,WAAa,SAASlyD,EAAGG,EAAGC,EAAGvG,EAAGD,GAErD,IAAIuuD,EAAU9uD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYyuB,cAAezuB,YAAY2pB,cAAgB,EAClGt3B,KAAKm3D,UAAUloD,EAAG,CAAC,IAAIE,QAAQ,IAAOrG,EAAG,GAAI,IAAIqG,QAAQ,IAAOrG,EAAG,GAAI,IAAIqG,QAAQrG,EAAG,GAAMD,GAAI,IAAIsG,QAAQ,IAAOrG,EAAGD,GACnG,IAAIsG,QAAQ,IAAOrG,EAAGD,GAAI,IAAIsG,QAAQ,EAAG,GAAMtG,IAAK7I,KAAKk3D,UAAWE,GAAS,IAGjGn3D,WAAW28D,eAAiC,IAAdA,UAA4BA,eAAYh2D,EAqCtE0B,QAAQoX,OAAOm9C,OAAQ3Z,SAOvB2Z,OAAOzwD,UAAUsqD,iBAAmB,SAASznD,EAAGG,EAAGC,EAAGvG,EAAGD,GAExD,IAAI6+D,EAAMr4D,EAAIxG,EAAI,EAElBoG,EAAE24C,QACF34C,EAAE44C,OAAOz4C,EAAGs4D,GACZz4D,EAAE64C,OAAO14C,EAAItG,EAAG4+D,GAChBz4D,EAAE45C,UAGH5oD,WAAW48D,YAA2B,IAAXA,OAAyBA,YAASj2D,EAyC7D0B,QAAQoX,OAAOo9C,aAAcrB,kBAO7BqB,aAAa1wD,UAAUu7D,qBAAsB,EAO7C7K,aAAa1wD,UAAU6nD,mBAAqB,WAE3C,OAAO,GAoBR6I,aAAa1wD,UAAUhB,MAAQ,SAASyG,GAEvCqxC,QAAQ92C,UAAUhB,MAAMA,MAAMpL,KAAMqL,WAEpCrL,KAAK8oD,KAAO,KACZ9oD,KAAK6oD,OAAS,KACd7oD,KAAKuqD,SAAW,KAEE,MAAdvqD,KAAK0H,QAER1H,KAAK2nE,oBAA0F,GAApEr/D,QAAQ0W,UAAUhf,KAAK0H,MAAOiG,YAAYqsB,mBAAoB,GAGzFh6B,KAAK0lB,MAAQ1lB,KAAK0lB,OAA0D,GAAjDpd,QAAQyW,SAAS/e,KAAK0H,MAAO,aAAc,GACtE1H,KAAK2lB,MAAQ3lB,KAAK2lB,OAA0D,GAAjDrd,QAAQyW,SAAS/e,KAAK0H,MAAO,aAAc,KAUxEo1D,aAAa1wD,UAAU4nD,cAAgB,WAEtC,OAAQh0D,KAAK2nE,qBAUd7K,aAAa1wD,UAAU+nD,WAAa,WAEnC,IAAIjvD,EAAOrE,SAASG,cAAc,OAGlC,OAFAkE,EAAKwC,MAAMogB,SAAW,WAEf5iB,GAQR43D,aAAa1wD,UAAUosD,YAAc,SAASvpD,EAAGG,EAAGC,EAAGvG,EAAGD,GAEzD,OAAO,GAQRi0D,aAAa1wD,UAAUsqD,iBAAmB,SAASznD,EAAGG,EAAGC,EAAGvG,EAAGD,GAE9D,GAAkB,MAAd7I,KAAKqzC,MACT,CACC,IAAIyV,EAAOxgD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY4sB,uBAAwB,MACxEsuB,EAASvgD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY6sB,mBAAoB,MAE9D,MAARsuB,IAGH75C,EAAEm3C,aAAa0C,GACf75C,EAAE03C,eAAekC,GACjB55C,EAAEY,KAAKT,EAAGC,EAAGvG,EAAGD,GAChBoG,EAAE85C,iBAIH95C,EAAEokC,MAAMjkC,EAAGC,EAAGvG,EAAGD,EAAG7I,KAAKqzC,MAAOrzC,KAAK2nE,qBAAqB,GAAO,GAInD,OAFV9e,EAASvgD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY6sB,mBAAoB,SAIzEvrB,EAAEu4C,WAAU,GACZv4C,EAAE03C,eAAekC,GACjB55C,EAAEY,KAAKT,EAAGC,EAAGvG,EAAGD,GAChBoG,EAAE45C,eAKH4S,iBAAiBrvD,UAAUyqD,gBAAgBzrD,MAAMpL,KAAMqL,YASzDyxD,aAAa1wD,UAAUooD,gBAAkB,WAQxC,GANAx0D,KAAKkF,KAAKwC,MAAM+U,KAAOrT,KAAK2c,MAAM/lB,KAAKymB,OAAOrX,GAAK,KACnDpP,KAAKkF,KAAKwC,MAAMuV,IAAM7T,KAAK2c,MAAM/lB,KAAKymB,OAAOpX,GAAK,KAClDrP,KAAKkF,KAAKwC,MAAMO,MAAQmB,KAAKC,IAAI,EAAGD,KAAK2c,MAAM/lB,KAAKymB,OAAOxe,QAAU,KACrEjI,KAAKkF,KAAKwC,MAAMG,OAASuB,KAAKC,IAAI,EAAGD,KAAK2c,MAAM/lB,KAAKymB,OAAO5e,SAAW,KACvE7H,KAAKkF,KAAKoV,UAAY,GAEJ,MAAdta,KAAKqzC,MACT,CACC,IAAIyV,EAAOxgD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY4sB,uBAAwB,IACxEsuB,EAASvgD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY6sB,mBAAoB,IAC1Ex6B,KAAKkF,KAAKwC,MAAMoxC,gBAAkBgQ,EAClC9oD,KAAKkF,KAAKwC,MAAMmuD,YAAchN,EAG9B,IAAI+e,EAAS1nE,SAASM,SAAqC,MAAzBK,SAASC,cAAwBD,SAASC,cAAgB,IAAuB,GAAjBd,KAAKkjB,SACnG4O,EAAMjxB,SAASG,cAAc,EAAWd,SAASe,WAAa,SAAW,OAC7E6wB,EAAIztB,aAAa,SAAU,KAC3BytB,EAAIpqB,MAAMogB,SAAW,WACrBgK,EAAI7sB,IAAMjF,KAAKqzC,MAEf,IAAI93B,EAAUvb,KAAKiT,QAAU,IAAO,iBAAmBjT,KAAKiT,QAAU,IAAM,GAC5EjT,KAAKkF,KAAKwC,MAAM6T,OAASA,EAErBvb,KAAK0lB,OAAS1lB,KAAK2lB,MAEtBpK,GAAU,2DAEFvb,KAAK0lB,MAEbnK,GAAU,yDAEFvb,KAAK2lB,QAEbpK,GAAU,sEAGPuW,EAAIpqB,MAAM6T,QAAUA,IAEvBuW,EAAIpqB,MAAM6T,OAASA,GAGA,SAAhBuW,EAAIxb,SAEPwb,EAAIpqB,MAAMwb,SAAWljB,KAAKkjB,SAED,GAAjBljB,KAAKkjB,SAGb5a,QAAQuM,iBAAiBid,EAAIpqB,MAAO,YAAa,UAAY1H,KAAKkjB,SAAW,QAI7E5a,QAAQuM,iBAAiBid,EAAIpqB,MAAO,YAAa,IAIlDoqB,EAAIpqB,MAAMO,MAAQjI,KAAKkF,KAAKwC,MAAMO,MAClC6pB,EAAIpqB,MAAMG,OAAS7H,KAAKkF,KAAKwC,MAAMG,OAEnC7H,KAAKkF,KAAKwC,MAAM+4C,gBAAkB,GAClCzgD,KAAKkF,KAAKX,YAAYutB,QAItB9xB,KAAK+1D,8BAA8B/1D,KAAKkF,OAI1CjF,WAAW68D,kBAAuC,IAAjBA,aAA+BA,kBAAel2D,EAkC/E0B,QAAQoX,OAAOq9C,QAAStB,kBAQxBsB,QAAQ3wD,UAAUy7D,UAAYl6D,YAAYwpB,kBAO1C4lC,QAAQ3wD,UAAU4rD,QAAU,EAO5B+E,QAAQ3wD,UAAU07D,cAAgB,GAOlC/K,QAAQ3wD,UAAU27D,iBAAmB,EAOrChL,QAAQ3wD,UAAUjF,KAAO,SAASwgB,GAEjCu7B,QAAQ92C,UAAUjF,KAAKiE,MAAMpL,KAAMqL,WAER,MAAvBrL,KAAKgoE,iBAERhoE,KAAKioE,UAAY,IAAIjoE,KAAKgoE,eAC1BhoE,KAAKioE,UAAU35C,QAAUtuB,KAAKsuB,QAC9BtuB,KAAKioE,UAAU9gE,KAAKnH,KAAKkF,QAU3B63D,QAAQ3wD,UAAUyG,OAAS,WAEJ,MAAlB7S,KAAKioE,YAERjoE,KAAKioE,UAAUnf,KAAO9oD,KAAKkoE,eAC3BloE,KAAKioE,UAAUpf,OAAS7oD,KAAKmoE,qBAC7BnoE,KAAKioE,UAAU1d,SAAWvqD,KAAKooE,uBAC/BpoE,KAAKioE,UAAUzhB,UAAYxmD,KAAKqoE,mBAChCroE,KAAKioE,UAAUp1D,UAGhBqwC,QAAQ92C,UAAUyG,OAAOzH,MAAMpL,KAAMqL,YAStC0xD,QAAQ3wD,UAAU4nD,cAAgB,WAEjC,OAAOyH,iBAAiBrvD,UAAU4nD,cAAc5oD,MAAMpL,KAAMqL,YACpC,MAAvBrL,KAAKkoE,gBAAiD,MAAvBloE,KAAKgoE,gBAQtCjL,QAAQ3wD,UAAU0qD,gBAAkB,SAAS7nD,EAAGG,EAAGC,EAAGvG,EAAGD,GAExD7I,KAAKsoE,WAAWr5D,EAAGG,EAAGC,EAAGvG,EAAGD,GAC5B7I,KAAKuoE,eAAet5D,EAAGG,EAAGC,EAAGvG,EAAGD,GAEhC4yD,iBAAiBrvD,UAAU0qD,gBAAgB1rD,MAAMpL,KAAMqL,YAQxD0xD,QAAQ3wD,UAAUk8D,WAAa,SAASr5D,EAAGG,EAAGC,EAAGvG,EAAGD,GAEnD,GAAkB,MAAd7I,KAAKqzC,MACT,CACC,IAAI5sB,EAASzmB,KAAKwoE,eAAep5D,EAAGC,EAAGvG,EAAGD,GAC1CoG,EAAEokC,MAAM5sB,EAAOrX,EAAGqX,EAAOpX,EAAGoX,EAAOxe,MAAOwe,EAAO5e,OAAQ7H,KAAKqzC,OAAO,GAAO,GAAO,KASrF0pB,QAAQ3wD,UAAUo8D,eAAiB,SAASp5D,EAAGC,EAAGvG,EAAGD,GAEpD,IAAIujB,EAAQ9jB,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYssB,kBAAmBtsB,YAAY2e,YAChFD,EAAS/jB,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYusB,2BAA4BvsB,YAAYyyB,cAC1Fn4B,EAAQK,QAAQ0W,UAAUhf,KAAK0H,MAAOiG,YAAY0sB,kBAAmB1sB,YAAYwpB,mBACjFtvB,EAASS,QAAQ0W,UAAUhf,KAAK0H,MAAOiG,YAAY2sB,mBAAoB3sB,YAAYwpB,mBACnF6gC,EAAU1vD,QAAQ0W,UAAUhf,KAAK0H,MAAOiG,YAAY8uB,cAAez8B,KAAKg4D,SAAW,EA4BvF,OA1BI5rC,GAASze,YAAYwyB,aAExB/wB,IAAMtG,EAAIb,GAAS,EAEXmkB,GAASze,YAAY4e,YAE7Bnd,GAAKtG,EAAIb,EAAQ+vD,EAIjB5oD,GAAK4oD,EAGF3rC,GAAU1e,YAAY6e,UAEzBnd,GAAK2oD,EAEG3rC,GAAU1e,YAAY8e,aAE9Bpd,GAAKxG,EAAIhB,EAASmwD,EAIlB3oD,IAAMxG,EAAIhB,GAAU,EAGd,IAAIyH,YAAYF,EAAGC,EAAGpH,EAAOJ,IAQrCk1D,QAAQ3wD,UAAUm8D,eAAiB,SAASt5D,EAAGG,EAAGC,EAAGvG,EAAGD,GAEvD,GAAsB,MAAlB7I,KAAKioE,UAERjoE,KAAKioE,UAAUxhD,OAASzmB,KAAKyoE,mBAAmBr5D,EAAGC,EAAGvG,EAAGD,GACzD7I,KAAKioE,UAAU7kB,MAAMn0C,QAEjB,GAA2B,MAAvBjP,KAAK0oE,eACd,CACC,IAAIjiD,EAASzmB,KAAKyoE,mBAAmBr5D,EAAGC,EAAGvG,EAAGD,GAC9CoG,EAAEokC,MAAM5sB,EAAOrX,EAAGqX,EAAOpX,EAAGoX,EAAOxe,MAAOwe,EAAO5e,OAAQ7H,KAAK0oE,gBAAgB,GAAO,GAAO,KAS9F3L,QAAQ3wD,UAAUq8D,mBAAqB,SAASr5D,EAAGC,EAAGvG,EAAGD,GAExD,IAAIujB,EAAQ9jB,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYssB,kBAAmBtsB,YAAY2e,YAChFD,EAAS/jB,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYusB,2BAA4BvsB,YAAYyyB,cAC1Fn4B,EAAQK,QAAQ0W,UAAUhf,KAAK0H,MAAOiG,YAAYytB,sBAAuBp7B,KAAK8nE,eAC9EjgE,EAASS,QAAQ0W,UAAUhf,KAAK0H,MAAOiG,YAAY0tB,uBAAwBr7B,KAAK8nE,eAChF9P,EAAUh4D,KAAKg4D,QAAU,EA4B7B,OA1BI5rC,GAASze,YAAY4e,YAExBnd,GAAKtG,EAAIb,EAAQ+vD,EAET5rC,GAASze,YAAYwyB,aAE7B/wB,IAAMtG,EAAIb,GAAS,EAInBmH,GAAK4oD,EAGF3rC,GAAU1e,YAAY8e,aAEzBpd,GAAKxG,EAAIhB,EAASmwD,EAEV3rC,GAAU1e,YAAY6e,UAE9Bnd,GAAK2oD,EAIL3oD,IAAMxG,EAAIhB,GAAU,EAGd,IAAIyH,YAAYF,EAAGC,EAAGpH,EAAOJ,IAOrCk1D,QAAQ3wD,UAAUooD,gBAAkB,WAKnC,IAHAiH,iBAAiBrvD,UAAUooD,gBAAgBppD,MAAMpL,KAAMqL,WAGjDrL,KAAKkF,KAAKyjE,iBAEf3oE,KAAKkF,KAAK4O,YAAY9T,KAAKkF,KAAKwvD,WAGjC,GAAkB,MAAd10D,KAAKqzC,MACT,CACC,IAAInuC,EAAOrE,SAASG,cAAc,OAClCkE,EAAKwC,MAAMogB,SAAW,WACtB5iB,EAAKb,aAAa,SAAU,KAE5B,IAAIoiB,EAASzmB,KAAKwoE,eAAexoE,KAAKymB,OAAOrX,EAAGpP,KAAKymB,OAAOpX,EAAGrP,KAAKymB,OAAOxe,MAAOjI,KAAKymB,OAAO5e,QAC9F4e,EAAOrX,GAAKpP,KAAKymB,OAAOrX,EACxBqX,EAAOpX,GAAKrP,KAAKymB,OAAOpX,EAExBnK,EAAKwC,MAAM+U,KAAOrT,KAAK2c,MAAMU,EAAOrX,GAAK,KACzClK,EAAKwC,MAAMuV,IAAM7T,KAAK2c,MAAMU,EAAOpX,GAAK,KACxCnK,EAAKwC,MAAMO,MAAQmB,KAAK2c,MAAMU,EAAOxe,OAAS,KAC9C/C,EAAKwC,MAAMG,OAASuB,KAAK2c,MAAMU,EAAO5e,QAAU,KAEhD3C,EAAKD,IAAMjF,KAAKqzC,MAEhBrzC,KAAKkF,KAAKX,YAAYW,KAIxBjF,WAAW88D,aAA6B,IAAZA,QAA0BA,aAAUn2D,EAwChE0B,QAAQoX,OAAOs9C,WAAY9Z,SAQ3B8Z,WAAW5wD,UAAUqkD,UAAY,GAOjCuM,WAAW5wD,UAAUknD,mBAAqB,EAO1C0J,WAAW5wD,UAAUsqD,iBAAmB,SAASznD,EAAGG,EAAGC,EAAGvG,EAAGD,GAE5DoG,EAAE0f,UAAUvf,EAAGC,GACfJ,EAAE24C,QACF5nD,KAAKmhE,WAAWlyD,EAAGG,EAAGC,EAAGvG,EAAGD,GAAG,GAC/BoG,EAAE85C,gBAEG/oD,KAAK0zD,SAAyB,MAAd1zD,KAAK0H,OAC+B,GADdY,QAAQyW,SAClD/e,KAAK0H,MAAOiG,YAAY6vB,yBAA0B,KAElDvuB,EAAEu4C,WAAU,GACZv4C,EAAE24C,QACF5nD,KAAKmhE,WAAWlyD,EAAGG,EAAGC,EAAGvG,EAAGD,GAAG,GAC/BoG,EAAE45C,WASJmU,WAAW5wD,UAAUw8D,gBAAkB,SAASx5D,EAAGC,EAAGvG,EAAGD,GAExD,OAAOO,KAAK2G,IAAI/P,KAAKywD,UAAWrnD,KAAK2c,MAAMld,EAAI,KAQhDm0D,WAAW5wD,UAAU+0D,WAAa,SAASlyD,EAAGG,EAAGC,EAAGvG,EAAGD,EAAGggE,GAEzD,IAAIp2D,EAAKzS,KAAK4oE,gBAAgBx5D,EAAGC,EAAGvG,EAAGD,IAElCggE,GAA6B,MAAb7oE,KAAK8oD,OAAmB+f,GAA6B,MAAb7oE,KAAK8oD,QAEjE75C,EAAE44C,OAAO,EAAGp1C,GACZxD,EAAE+4C,QAAQ,EAAG,EAAIv1C,EAAI3J,EAAG,EAAI2J,EAAI3J,EAAG2J,GAG9Bo2D,IAEJ55D,EAAE45C,SACF55C,EAAE24C,UAICihB,IAEJ55D,EAAE44C,OAAO,EAAGp1C,GACZxD,EAAE+4C,QAAQ,GAAIv1C,EAAK,EAAG3J,GAAI2J,EAAK,EAAG3J,EAAG2J,GACrCxD,EAAE64C,OAAOh/C,EAAGD,EAAI4J,GAChBxD,EAAE+4C,QAAQl/C,EAAGD,EAAI4J,EAAK,EAAG,EAAG5J,EAAI4J,EAAK,EAAG,EAAG5J,EAAI4J,GAC/CxD,EAAE2hB,UAIJ3wB,WAAW+8D,gBAAmC,IAAfA,WAA6BA,gBAAap2D,EAoCzE0B,QAAQoX,OAAOu9C,YAAapL,YAQ5BoL,YAAY7wD,UAAUqoD,kBAAoB,WAEzCz0D,KAAK2zD,kBAAkC,MAAd3zD,KAAK0H,OAAyD,GAAxC1H,KAAK0H,MAAMiG,YAAYwuB,cACtE+mB,QAAQ92C,UAAUqoD,kBAAkBrpD,MAAMpL,KAAMqL,YAQjD4xD,YAAY7wD,UAAUqqD,eAAiB,SAASxnD,EAAGiX,GAKlD,IAAI4iD,EAAe9oE,KAAKo7D,aAAansD,EAAGiX,GAAK,GACzC6iD,EAAe/oE,KAAKo7D,aAAansD,EAAGiX,GAAK,GAE7C2rC,WAAWzlD,UAAUqqD,eAAerrD,MAAMpL,KAAMqL,WAGhD4D,EAAEm3C,aAAapmD,KAAK6oD,QACpB55C,EAAEu4C,WAAU,GACZv4C,EAAE43C,WAAU,GAEQ,MAAhBiiB,GAEHA,IAGmB,MAAhBC,GAEHA,KAUF9L,YAAY7wD,UAAUgvD,aAAe,SAASnsD,EAAGiX,EAAKpC,GAErD,IAAInX,EAAS,KACTqW,EAAIkD,EAAI/jB,OACRmE,EAAOgC,QAAQyW,SAAS/e,KAAK0H,MAAO,EAAWiG,YAAY+tB,iBAAmB/tB,YAAY8tB,gBAC1F+7B,EAAK,EAAWtxC,EAAI,GAAKA,EAAIlD,EAAI,GACjCu0C,EAAK,EAAWrxC,EAAI,GAAKA,EAAIlD,EAAI,GAErC,GAAY,MAAR1c,GAAsB,MAANkxD,GAAoB,MAAND,EAClC,CAIC,IAHA,IAAIr8C,EAAQ,EAGLA,EAAQ8H,EAAI,GAAgC,GAA3B5Z,KAAK2c,MAAMyxC,EAAGpoD,EAAImoD,EAAGnoD,IAAsC,GAA3BhG,KAAK2c,MAAMyxC,EAAGnoD,EAAIkoD,EAAGloD,IAE5EmoD,EAAK,EAAWtxC,EAAI,EAAIhL,GAASgL,EAAIlD,EAAI,EAAI9H,GAC7CA,IAID,IAAI3I,EAAKglD,EAAGnoD,EAAIooD,EAAGpoD,EACfqD,EAAK8kD,EAAGloD,EAAImoD,EAAGnoD,EAEfiW,EAAOlc,KAAKC,IAAI,EAAGD,KAAKqY,KAAKlP,EAAKA,EAAKE,EAAKA,IAE5C4oD,EAAQ9oD,EAAK+S,EACbg2C,EAAQ7oD,EAAK6S,EAEbuI,EAAOvlB,QAAQ0W,UAAUhf,KAAK0H,MAAO,EAAWiG,YAAY2Z,gBAAkB3Z,YAAYguB,cAAehuB,YAAYupB,oBAIrH2zB,EAA2F,GAAlF7qD,KAAK0H,MAAM,EAAWiG,YAAYmuB,gBAAkBnuB,YAAYkuB,eAE7ElvB,EAASsuD,SAASG,aAAansD,EAAGjP,KAAMsG,EAAMixD,EAAI8D,EAAOC,EAAOztC,EAAM/J,EAAQ9jB,KAAK4zD,YAAa/I,GAGjG,OAAOl+C,GAQRswD,YAAY7wD,UAAUqsD,mBAAqB,SAAS5K,GAEnD3K,QAAQ92C,UAAUqsD,mBAAmBrtD,MAAMpL,KAAMqL,WAGjD,IAAIwiB,EAAO,EAEPvlB,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY+tB,iBAAkB/tB,YAAYC,OAASD,YAAYC,OAE/FigB,EAAOvlB,QAAQ0W,UAAUhf,KAAK0H,MAAOiG,YAAY2Z,gBAAiB3Z,YAAYupB,oBAAsB,GAGjG5uB,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY8tB,eAAgB9tB,YAAYC,OAASD,YAAYC,OAE7FigB,EAAOzkB,KAAKC,IAAIwkB,EAAMvlB,QAAQ0W,UAAUhf,KAAK0H,MAAOiG,YAAYguB,cAAehuB,YAAYupB,qBAAuB,GAGnH22B,EAAKr9C,KAAKqd,EAAO7tB,KAAKsS,QAGvBrS,WAAWg9D,iBAAqC,IAAhBA,YAA8BA,iBAAcr2D,EA2C5E0B,QAAQoX,OAAOw9C,WAAYha,SAQ3Bga,WAAW9wD,UAAUy7D,UAAY,GAOjC3K,WAAW9wD,UAAUosD,YAAc,SAASvpD,EAAGG,EAAGC,EAAGvG,EAAGD,GAEvD,OAAO,GAQRq0D,WAAW9wD,UAAU48D,aAAe,WAEnC,OAAO5/D,KAAKC,IAAI,EAAGf,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY2Z,gBAAiB3Z,YAAYspB,qBAQ1FimC,WAAW9wD,UAAUuoD,eAAiB,SAAS9kD,GAE9C,IAAIwX,EAAQrnB,KAAKgpE,eACbviD,EAAS,IAAInX,YAAYO,EAAKT,EAAGS,EAAKR,EAAGQ,EAAK5H,MAAO4H,EAAKhI,QAC1DupD,EAAapxD,KAAKipE,eAElBvjD,EAAoE,GAA5Dpd,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYkY,YAAa,GAC9DF,EAAoE,GAA5Drd,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYmY,YAAa,GAG9DojD,EAAiBlpE,KAAKwmD,WAAa74C,YAAY6W,iBACjDxkB,KAAKwmD,WAAa74C,YAAYmX,gBAC5BqkD,EAAiB/X,IAAe8X,EAEhCE,GAAaD,GAAkBzjD,IAAU1lB,KAAKwmD,WAAa74C,YAAYmX,iBACzE9kB,KAAKwmD,WAAa74C,YAAYkX,gBAC5BwkD,EAAYF,GAAkBxjD,IAAU3lB,KAAKwmD,WAAa74C,YAAYmX,iBACxE9kB,KAAKwmD,WAAa74C,YAAYkX,gBAGhC,GAAKqkD,EAaAr4D,EAAMzH,KAAK2G,IAAI0W,EAAOxe,MAAOof,EAAQrnB,KAAKsS,QAE1C82D,GAAaC,KAEhB5iD,EAAOrX,GAAKqX,EAAOxe,MAAQ4I,GAG5B4V,EAAOxe,MAAQ4I,MAnBhB,CACC,IAAIA,EAAMzH,KAAK2G,IAAI0W,EAAO5e,OAAQwf,EAAQrnB,KAAKsS,QAE3C82D,GAAaC,KAEhB5iD,EAAOpX,GAAKoX,EAAO5e,OAASgJ,GAG7B4V,EAAO5e,OAASgJ,EAcjB,OAAO4V,GAQRy2C,WAAW9wD,UAAUuqD,kBAAoB,SAAS1nD,EAAGG,EAAGC,EAAGvG,EAAGD,GAE7D,IAAIwe,EAAQrnB,KAAKgpE,eAEjB,OAAIhpE,KAAKipE,eAGD,IAAI35D,YAAYF,EAAGC,EAAGvG,EAD7Bue,EAAQje,KAAK2G,IAAIsX,EAAOxe,IAMjB,IAAIyG,YAAYF,EAAGC,EAD1BgY,EAAQje,KAAK2G,IAAIsX,EAAOve,GACYD,IAStCq0D,WAAW9wD,UAAU2qD,WAAa,SAASjuD,EAAGD,EAAGwe,GAIhD,OAAOA,GAFC/e,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYyuB,cAAuD,IAAxCzuB,YAAY0pB,2BAAmC,KAE5F,GAQpB6lC,WAAW9wD,UAAU68D,aAAe,WAEnC,OAAwE,GAAjE3gE,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY6Z,iBAAkB,IAQnE01C,WAAW9wD,UAAUsqD,iBAAmB,SAASznD,EAAGG,EAAGC,EAAGvG,EAAGD,GAE5D,IAAIwe,EAAQrnB,KAAKgpE,eACblgB,EAAOxgD,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYyrB,yBAA0BzrB,YAAYC,MACtF07D,EAAmF,GAApEhhE,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAYiuB,oBAAqB,GAC7E7T,EAAI,EAIPV,EAFGrnB,KAAKipE,eAEA7/D,KAAK2G,IAAIsX,EAAOxe,GAIhBO,KAAK2G,IAAIsX,EAAOve,GAGzBmG,EAAE0f,UAAUvf,EAAGC,GAEVrP,KAAKk3D,WAMTnvC,EAAI/nB,KAAK+2D,WAAWjuD,EAAGD,EAAGwe,GAC1BU,EAAI3e,KAAK2G,KAAM/P,KAAKipE,eAAkBpgE,EAAIC,GAAKue,EAAOje,KAAK2G,IAAIsX,EAAOU,IACtE/nB,KAAKupE,qBAAqBt6D,EAAGG,EAAGC,EAAGvG,EAAGD,EAAGwe,EAAOU,EAAG+gC,EAAMwgB,IANzDtpE,KAAKwpE,cAAcv6D,EAAGG,EAAGC,EAAGvG,EAAGD,EAAGwe,EAAOyhC,EAAMwgB,GAShD,IAAIx9C,EAAMxjB,QAAQyW,SAAS/e,KAAK0H,MAAOiG,YAAY8rB,qBAAsB9rB,YAAYC,MAGrF,GAFA5N,KAAKypE,eAAex6D,EAAGG,EAAGC,EAAGvG,EAAGD,EAAGwe,EAAOyE,GAExB,MAAd9rB,KAAKqzC,MACT,CACC,IAAI5sB,EAASzmB,KAAKwoE,eAAep5D,EAAGC,EAAGvG,EAAGD,GAC1CoG,EAAEokC,MAAM5sB,EAAOrX,EAAIA,EAAGqX,EAAOpX,EAAIA,EAAGoX,EAAOxe,MAAOwe,EAAO5e,OACvD7H,KAAKqzC,OAAO,GAAO,GAAO,GAGzBrzC,KAAKq4D,QAERppD,EAAEu4C,WAAU,GACZxnD,KAAKg3D,iBAAiB/nD,EAAG,EAAG,EAAGnG,EAAGue,EAAOU,KAS3Cm1C,WAAW9wD,UAAUo9D,cAAgB,SAASv6D,EAAGG,EAAGC,EAAGvG,EAAGD,EAAGwe,EAAOyhC,EAAMwgB,GAEzEr6D,EAAE24C,QAEE5nD,KAAKipE,gBAERh6D,EAAE44C,OAAO,EAAGxgC,GACZpY,EAAE64C,OAAO,EAAG,GACZ74C,EAAE64C,OAAOh/C,EAAG,GACZmG,EAAE64C,OAAOh/C,EAAGue,GACZpY,EAAE85C,gBAEE1hC,EAAQxe,IAEPigD,GAAQn7C,YAAYC,KAEvBqB,EAAE0nC,eAAgB,EAIlB1nC,EAAEm3C,aAAa0C,GAGhB75C,EAAE24C,QACF34C,EAAE44C,OAAO,EAAGxgC,GACZpY,EAAE64C,OAAO,EAAGj/C,GACZoG,EAAE64C,OAAOh/C,EAAGD,GACZoG,EAAE64C,OAAOh/C,EAAGue,GAERyhC,GAAQn7C,YAAYC,KAEvBqB,EAAE45C,SAIF55C,EAAE85C,mBAMJ95C,EAAE44C,OAAOxgC,EAAO,GAChBpY,EAAE64C,OAAO,EAAG,GACZ74C,EAAE64C,OAAO,EAAGj/C,GACZoG,EAAE64C,OAAOzgC,EAAOxe,GAChBoG,EAAE85C,gBAEE1hC,EAAQve,IAEPggD,GAAQn7C,YAAYC,KAEvBqB,EAAE0nC,eAAgB,EAIlB1nC,EAAEm3C,aAAa0C,GAGhB75C,EAAE24C,QACF34C,EAAE44C,OAAOxgC,EAAO,GAChBpY,EAAE64C,OAAOh/C,EAAG,GACZmG,EAAE64C,OAAOh/C,EAAGD,GACZoG,EAAE64C,OAAOzgC,EAAOxe,GAEZigD,GAAQn7C,YAAYC,KAEvBqB,EAAE45C,SAIF55C,EAAE85C,kBAKDugB,GAEHtpE,KAAK0pE,aAAaz6D,EAAGG,EAAGC,EAAGvG,EAAGD,EAAGwe,EAAOyhC,GAAQn7C,YAAYC,OAS9DsvD,WAAW9wD,UAAUm9D,qBAAuB,SAASt6D,EAAGG,EAAGC,EAAGvG,EAAGD,EAAGwe,EAAOU,EAAG+gC,EAAMwgB,GAEnFr6D,EAAE24C,QAEE5nD,KAAKipE,gBAERh6D,EAAE44C,OAAO/+C,EAAGue,GACZpY,EAAE64C,OAAOh/C,EAAGif,GACZ9Y,EAAE84C,OAAOj/C,EAAG,EAAGA,EAAIM,KAAK2G,IAAIjH,EAAI,EAAGif,GAAI,GACvC9Y,EAAE64C,OAAO1+C,KAAK2G,IAAIjH,EAAI,EAAGif,GAAI,GAC7B9Y,EAAE84C,OAAO,EAAG,EAAG,EAAGhgC,GAClB9Y,EAAE64C,OAAO,EAAGzgC,GACZpY,EAAE85C,gBAEE1hC,EAAQxe,IAEPigD,GAAQn7C,YAAYC,KAEvBqB,EAAE0nC,eAAgB,EAIlB1nC,EAAEm3C,aAAa0C,GAGhB75C,EAAE24C,QACF34C,EAAE44C,OAAO,EAAGxgC,GACZpY,EAAE64C,OAAO,EAAGj/C,EAAIkf,GAChB9Y,EAAE84C,OAAO,EAAGl/C,EAAGO,KAAK2G,IAAIjH,EAAI,EAAGif,GAAIlf,GACnCoG,EAAE64C,OAAOh/C,EAAIM,KAAK2G,IAAIjH,EAAI,EAAGif,GAAIlf,GACjCoG,EAAE84C,OAAOj/C,EAAGD,EAAGC,EAAGD,EAAIkf,GACtB9Y,EAAE64C,OAAOh/C,EAAGue,GAERyhC,GAAQn7C,YAAYC,KAEvBqB,EAAE45C,SAIF55C,EAAE85C,mBAMJ95C,EAAE44C,OAAOxgC,EAAO,GAChBpY,EAAE64C,OAAO//B,EAAG,GACZ9Y,EAAE84C,OAAO,EAAG,EAAG,EAAG3+C,KAAK2G,IAAIlH,EAAI,EAAGkf,IAClC9Y,EAAE64C,OAAO,EAAGj/C,EAAIO,KAAK2G,IAAIlH,EAAI,EAAGkf,IAChC9Y,EAAE84C,OAAO,EAAGl/C,EAAGkf,EAAGlf,GAClBoG,EAAE64C,OAAOzgC,EAAOxe,GAChBoG,EAAE85C,gBAEE1hC,EAAQve,IAEPggD,GAAQn7C,YAAYC,KAEvBqB,EAAE0nC,eAAgB,EAIlB1nC,EAAEm3C,aAAa0C,GAGhB75C,EAAE24C,QACF34C,EAAE44C,OAAOxgC,EAAOxe,GAChBoG,EAAE64C,OAAOh/C,EAAIif,EAAGlf,GAChBoG,EAAE84C,OAAOj/C,EAAGD,EAAGC,EAAGD,EAAIO,KAAK2G,IAAIlH,EAAI,EAAGkf,IACtC9Y,EAAE64C,OAAOh/C,EAAGM,KAAK2G,IAAIlH,EAAI,EAAGkf,IAC5B9Y,EAAE84C,OAAOj/C,EAAG,EAAGA,EAAIif,EAAG,GACtB9Y,EAAE64C,OAAOzgC,EAAO,GAEZyhC,GAAQn7C,YAAYC,KAEvBqB,EAAE45C,SAIF55C,EAAE85C,kBAKDugB,GAEHtpE,KAAK0pE,aAAaz6D,EAAGG,EAAGC,EAAGvG,EAAGD,EAAGwe,EAAOyhC,GAAQn7C,YAAYC,OAS9DsvD,WAAW9wD,UAAUs9D,aAAe,SAASz6D,EAAGG,EAAGC,EAAGvG,EAAGD,EAAGwe,EAAO+9B,GAE7DA,GAEJn2C,EAAEu4C,WAAU,GAGbv4C,EAAE24C,QAEE5nD,KAAKipE,gBAERh6D,EAAE44C,OAAO,EAAGxgC,GACZpY,EAAE64C,OAAOh/C,EAAGue,KAIZpY,EAAE44C,OAAOxgC,EAAO,GAChBpY,EAAE64C,OAAOzgC,EAAOxe,IAGjBoG,EAAE45C,UAQHqU,WAAW9wD,UAAUq9D,eAAiB,SAASx6D,EAAGG,EAAGC,EAAGvG,EAAGD,EAAGwe,EAAOpL,GAEhEA,GAAStO,YAAYC,OAExBqB,EAAE03C,eAAe1qC,GACjBhN,EAAE43C,WAAU,GACZ53C,EAAE24C,QAEE5nD,KAAKipE,gBAERh6D,EAAE44C,OAAO/+C,EAAGue,GACZpY,EAAE64C,OAAOh/C,EAAGD,KAIZoG,EAAE44C,OAAOxgC,EAAO,GAChBpY,EAAE64C,OAAOh/C,EAAG,IAGbmG,EAAE45C,SACF55C,EAAE43C,WAAU,KASdqW,WAAW9wD,UAAUo8D,eAAiB,SAASp5D,EAAGC,EAAGvG,EAAGD,GAEvD,OAAI7I,KAAKipE,eAED,IAAI35D,YAAYF,EAAItG,EAAI9I,KAAK6nE,UAAWx4D,EAAGrP,KAAK6nE,UAAW7nE,KAAK6nE,WAIhE,IAAIv4D,YAAYF,EAAGC,EAAGrP,KAAK6nE,UAAW7nE,KAAK6nE,YAIpD5nE,WAAWi9D,gBAAmC,IAAfA,WAA6BA,gBAAat2D,EAqCzEu2D,cAAc/wD,UAAU6E,MAAQ,KAQhCksD,cAAc/wD,UAAUu9D,gBAAiB,EAOzCxM,cAAc/wD,UAAUuK,OAAS,KAkBjCwmD,cAAc/wD,UAAUw9D,SAAW,SAAS53D,EAAM5C,EAAGC,KAerD8tD,cAAc/wD,UAAUy9D,WAAa,SAAS73D,EAAMyU,KAWpD02C,cAAc/wD,UAAUwP,QAAU,SAASjF,KAO3CwmD,cAAc/wD,UAAU0yD,SAAW,WAElC,OAAO9+D,KAAKiR,OAoBbksD,cAAc/wD,UAAU09D,cAAgB,SAASx9D,EAAK0F,EAAM6R,EAAMC,GAEjE,OAAO9jB,KAAKiR,MAAM84D,oBAAoB/3D,GAAM1F,IAkC7C6wD,cAAc6M,SAAW,SAASC,EAAQC,EAAUC,EAAMtmD,EAAMumD,GAE/D,GAAY,MAARD,GAA0B,MAAVF,IAEnBC,EAAwB,MAAZA,GAAoBA,IAChCE,EAAUA,GAAW,IAAIj+D,cAEZN,IAAIo+D,IACjB,CACCG,EAAQ79D,IAAI09D,GAAQ,GACpB,IAAIt9D,EAASw9D,EAAKF,EAAQpmD,GAE1B,GAAc,MAAVlX,GAAkBA,EACtB,CACC,IAAI09D,EAAYrqE,KAAKiR,MAAMiB,MAAMo4D,aAAaL,GAE9C,GAAII,EAAY,EAEf,IAAK,IAAIxlE,EAAI,EAAGA,EAAIwlE,EAAWxlE,IAC/B,CACC,IAAIuJ,EAAIpO,KAAKiR,MAAMiB,MAAMq4D,UAAUN,EAAQplE,GACvC49B,EAAWziC,KAAKiR,MAAMiB,MAAMs4D,YAAYp8D,GAAG,IAAS67D,EAExD,IAAKC,GAAYznC,EACjB,CACC,IAAI/pB,EAAO1Y,KAAKiR,MAAMsW,KAAKo4C,mBAAmBvxD,GAAIq0B,GAClDziC,KAAKgqE,SAAStxD,EAAMwxD,EAAUC,EAAM/7D,EAAGg8D,QAoB9CjN,cAAc/wD,UAAUq+D,WAAa,SAAS9zD,EAAQ1E,EAAOy4D,GAE5D,IAAKA,EAEJ,OAAQ1qE,KAAKiR,MAAMiB,MAAM+vC,UAAUhwC,IAAU0E,EAG9C,GAAI1E,GAAS0E,EAEZ,OAAO,EAGR,KAAgB,MAAT1E,GAAiBA,GAAS0E,GAEhC1E,EAAQjS,KAAKiR,MAAMiB,MAAM+vC,UAAUhwC,GAGpC,OAAOA,GAAS0E,GAcjBwmD,cAAc/wD,UAAUu+D,gBAAkB,SAAS34D,GAElD,OAAOhS,KAAKiR,MAAM25D,cAAc54D,IAajCmrD,cAAc/wD,UAAUy+D,gBAAkB,SAASZ,GAElD,OAAQjqE,KAAKiR,MAAM8c,WAAW8zB,SAASooB,KACrCjqE,KAAKiR,MAAM65D,cAAcb,IAa5B9M,cAAc/wD,UAAU2+D,cAAgB,SAASlnD,GAEhD,IAAI3R,EAAQlS,KAAKiR,MAAM8c,WAEvB,OAAQ7b,EAAMC,OAAO0R,KACnB7jB,KAAKiR,MAAM65D,cAAcjnD,IACO,MAAjC3R,EAAMs4D,YAAY3mD,GAAM,IACU,MAAlC3R,EAAMs4D,YAAY3mD,GAAM,IAQ1Bs5C,cAAc/wD,UAAU4+D,oBAAsB,SAASnnD,EAAM9b,GAE5D/H,KAAKiR,MAAMua,cAAc7d,YAAY+sB,kBACnC,EAAU,IAAM,IAAK,CAAC7W,KAQzBs5C,cAAc/wD,UAAU6+D,kBAAoB,SAASpnD,EAAM9b,GAE1D/H,KAAKiR,MAAMua,cAAc7d,YAAY2qB,iBACnC,EAAU,IAAM,IAAK,CAACzU,KASzBs5C,cAAc/wD,UAAU8+D,gBAAkB,SAASv0D,GAElD,IAAIhK,EAAS,IAAIwC,QAEjB,GAAc,MAAVwH,GAAkBA,GAAU3W,KAAK2W,OACrC,CACC,IAAIzE,EAAQlS,KAAKiR,MAAM8c,WAEvB,GAAI7b,EAAMu4D,WAAWzqE,KAAK2W,OAAQA,GAIjC,IAFA,IAAIw0D,EAAYj5D,EAAMk5D,YAAYz0D,GAE3BA,GAAU3W,KAAK2W,QAErBhK,EAAOyC,EAAIzC,EAAOyC,EAAI+7D,EAAU/7D,EAChCzC,EAAO0C,EAAI1C,EAAO0C,EAAI87D,EAAU97D,EAEhCsH,EAASzE,EAAM+vC,UAAUtrC,GACzBw0D,EAAYj5D,EAAMk5D,YAAYz0D,GAKjC,OAAOhK,GASRwwD,cAAc/wD,UAAUi/D,cAAgB,SAASxnD,EAAMmvC,GAEtD,GAAY,MAARnvC,EACJ,CACC,IAAI3R,EAAQlS,KAAKiR,MAAMiB,MACnBM,EAAWN,EAAMk5D,YAAYvnD,GAYjC,GAVgB,MAAZrR,GAEHA,EAAW,IAAI84D,YACNC,aAAY,GAIrB/4D,EAAWA,EAAS/C,QAGF,MAAfzP,KAAK2W,QAA4B,MAAVq8C,EAM1B,IAJA,IAAIr8C,EAASzE,EAAM+vC,UAAUp+B,GAEzB2nD,EAAexrE,KAAKkrE,gBAAgBv0D,GAE/B9R,EAAI,EAAGA,EAAImuD,EAAO7wD,OAAQ0C,IAElCmuD,EAAOnuD,GAAGuK,EAAI4jD,EAAOnuD,GAAGuK,EAAIo8D,EAAap8D,EACzC4jD,EAAOnuD,GAAGwK,EAAI2jD,EAAOnuD,GAAGwK,EAAIm8D,EAAan8D,EAI3CmD,EAASwgD,OAASA,EAClB9gD,EAAMu5D,YAAY5nD,EAAMrR,KAmB1B2qD,cAAc/wD,UAAUs/D,kBAAoB,SAAS15D,EAAM5C,EAAGC,GAE7D,IAAI6C,EAAQlS,KAAKiR,MAAM8c,WACnBvb,EAAWN,EAAMk5D,YAAYp5D,GAC7BrF,EAAS,KAEb,GAAgB,MAAZ6F,EACJ,CAKC,GAJA7F,EAAS,IAAI2C,YAAYF,EAAGC,EAAGmD,EAASvK,MAAOuK,EAAS3K,QAIpD7H,KAAK2pE,eACT,CACC,IAAI93D,EAAQ7R,KAAKiR,MAAMa,UAAUC,SAASC,GAE1C,GAAa,MAATH,GAA+B,MAAdA,EAAMxD,MAA0C,MAA1BwD,EAAMxD,KAAKglD,YACtD,CACC,IAAI/gD,EAAQtS,KAAKiR,MAAMa,UAAUQ,MAC7Bw6C,EAAMj7C,EAAMxD,KAAKglD,YAEjBxhD,EAAMxD,KAAKglD,YAAYjkD,EAAIyC,EAAMzC,IAEpCA,IAAMyC,EAAMzC,EAAI09C,EAAI19C,GAAKkD,EACzB3F,EAAO1E,MAAQ6kD,EAAI7kD,OAGhB4J,EAAMxD,KAAKglD,YAAYhkD,EAAIwC,EAAMxC,IAEpCA,IAAMwC,EAAMxC,EAAIy9C,EAAIz9C,GAAKiD,EACzB3F,EAAO9E,OAASilD,EAAIjlD,SAKvB,GAAmB,MAAf7H,KAAK2W,OACT,CACC,IAAIA,EAASzE,EAAM+vC,UAAUjwC,GAE7B,GAAc,MAAV2E,GAAkBA,GAAU3W,KAAK2W,OACrC,CACC,IAAI60D,EAAexrE,KAAKkrE,gBAAgBv0D,GAExCvH,GAAQo8D,EAAap8D,EACrBC,GAAQm8D,EAAan8D,GAInBmD,EAASpD,GAAKA,GAAKoD,EAASnD,GAAKA,KAEpCmD,EAAWA,EAAS/C,SACXL,EAAIA,EACboD,EAASnD,EAAIA,EAEb6C,EAAMu5D,YAAYz5D,EAAMQ,IAI1B,OAAO7F,GASRwwD,cAAc/wD,UAAUu/D,gBAAkB,SAAS35D,GAElD,IAAIkwC,EAAMliD,KAAKiR,MAAM8c,WAAWq9C,YAAYp5D,GAK5C,GAAIhS,KAAK2pE,eACT,CACC,IAAI93D,EAAQ7R,KAAKiR,MAAMa,UAAUC,SAASC,GAE1C,GAAa,MAATH,GAA+B,MAAdA,EAAMxD,MAA0C,MAA1BwD,EAAMxD,KAAKglD,YACtD,CACC,IAAI/gD,EAAQtS,KAAKiR,MAAMa,UAAUQ,MAC7BzB,EAAMgB,EAAMxD,KAAKglD,YAEjBuY,EAAMxiE,KAAKC,IAAIwI,EAAMzC,EAAIyB,EAAIzB,EAAG,GAAKkD,EACrCu5D,EAAMziE,KAAKC,IAAIwI,EAAMxC,EAAIwB,EAAIxB,EAAG,GAAKiD,EACrC+xD,EAAMj7D,KAAKC,IAAKwH,EAAIzB,EAAIyB,EAAI5I,OAAU4J,EAAMzC,EAAIyC,EAAM5J,OAAQ,GAAKqK,EACjEgyD,EAAMl7D,KAAKC,IAAKwH,EAAIxB,EAAIwB,EAAIhJ,QAAWgK,EAAMxC,EAAIwC,EAAMhK,QAAS,GAAKyK,EAE3E4vC,EAAM,IAAI5yC,YAAY4yC,EAAI9yC,EAAIw8D,EAAK1pB,EAAI7yC,EAAIw8D,EAAK3pB,EAAIj6C,MAAQ2jE,EAAMvH,EAAKniB,EAAIr6C,OAASgkE,EAAMvH,IAI5F,GAAmB,MAAftkE,KAAK2W,OACT,CACC,IAAIA,EAAS3W,KAAKiR,MAAM8c,WAAWk0B,UAAUjwC,GAG7C,GAFAkwC,EAAMA,EAAIzyC,QAEI,MAAVkH,GAAkBA,GAAU3W,KAAK2W,OACrC,CACC,IAAI60D,EAAexrE,KAAKkrE,gBAAgBv0D,GACxCurC,EAAI9yC,EAAI8yC,EAAI9yC,EAAIo8D,EAAap8D,EAC7B8yC,EAAI7yC,EAAI6yC,EAAI7yC,EAAIm8D,EAAan8D,GAI/B,OAAO,IAAIC,YAAY4yC,EAAI9yC,EAAG8yC,EAAI7yC,EAAG6yC,EAAIj6C,MAAOi6C,EAAIr6C,SAQrDs1D,cAAc/wD,UAAU0/D,cAAgB,SAAS3hD,EAAOkF,EAAQ08C,EAAWC,EAAaC,EAAcC,GAErG,OAAOlsE,KAAKiR,MAAMk7D,kBAAkBhiD,EAAOkF,GAAQ,EAAM08C,EAAWC,EAAaC,EAAcC,IAyBhG9O,mBAAmBhxD,UAAUixD,cAAgB,EAO7CD,mBAAmBhxD,UAAUggE,OAAQ,EAOrChP,mBAAmBhxD,UAAUg+D,SAAU,EAOvChN,mBAAmBhxD,UAAUigE,UAAY,KAOzCjP,mBAAmBhxD,UAAU4F,KAAO,KAOpCorD,mBAAmBhxD,UAAUye,QAAU,SAAS7O,EAAGK,GAElD,OAAS,MAALL,GAAkB,MAALK,EAEZA,EAAEghD,cAAgBrhD,EAAEqhD,eAEf,EAEAhhD,EAAEghD,cAAgBrhD,EAAEqhD,cAErB,EAIHhhD,EAAE+vD,OAEG,EAID,EAMF,GAITnsE,WAAWk9D,mBAAyC,IAAlBA,cAAgCA,mBAAgBv2D,EAsClF02D,cAAclxD,UAAY,IAAI+wD,cAC9BG,cAAclxD,UAAUH,YAAcqxD,cAOtCA,cAAclxD,UAAUglD,WAAa,KAOrCkM,cAAclxD,UAAU4rD,QAAU,KAOlCsF,cAAclxD,UAAU+T,GAAK,KAO7Bm9C,cAAclxD,UAAUgU,GAAK,KAO7Bk9C,cAAclxD,UAAUijB,OAAS,EAOjCiuC,cAAclxD,UAAUmnC,UAAY,EAOpC+pB,cAAclxD,UAAUqmC,WAAa,EAOrC6qB,cAAclxD,UAAUknC,YAAc,EAOtCgqB,cAAclxD,UAAUkgE,aAAe,EAQvChP,cAAclxD,UAAUmgE,mBAAoB,EAQ5CjP,cAAclxD,UAAU08C,MAAO,EAQ/BwU,cAAclxD,UAAUogE,cAAe,EAQvClP,cAAclxD,UAAUqgE,iBAAkB,EAQ1CnP,cAAclxD,UAAUsgE,YAAa,EAOrCpP,cAAclxD,UAAUs8C,KAAO,KAO/B4U,cAAclxD,UAAUugE,gBAAiB,EAOzCrP,cAAclxD,UAAUwgE,WAAY,EAOpCtP,cAAclxD,UAAU+rC,SAAW,EAOnCmlB,cAAclxD,UAAU68D,aAAe,WAEtC,OAAOjpE,KAAKoxD,YAQbkM,cAAclxD,UAAUw9D,SAAW,SAAS53D,EAAM5C,EAAGC,GAEpD,IAAI6C,EAAQlS,KAAKiR,MAAM8c,WACnBpX,EAASzE,EAAM+vC,UAAUjwC,GACzBo/C,EAAapxD,KAAKipE,eAEtB,GAAY,MAARj3D,GAA0B,MAAV2E,EACpB,CACC,IAAI9R,EAAI,EACJugB,EAAO,EACPlS,EAAahB,EAAMiB,cAAcwD,GACjC5O,EAAQ,EAAeqH,EAAIC,EAC3Bw9D,EAAS7sE,KAAKiR,MAAMa,UAAUC,SAAS4E,GAS3C,IAPc,MAAVk2D,IAEH9kE,GAAS,EAAe8kE,EAAOz9D,EAAIy9D,EAAOx9D,GAG3CtH,GAAS/H,KAAKiR,MAAMsW,KAAKjV,MAEpBzN,EAAI,EAAGA,EAAIqO,EAAYrO,IAC5B,CACC,IAAIoN,EAAQC,EAAMkB,WAAWuD,EAAQ9R,GAErC,GAAIoN,GAASD,EACb,CACC,IAAIyU,EAASvU,EAAMk5D,YAAYn5D,GAE/B,GAAc,MAAVwU,EACJ,CACC,IAAI5V,EAAM,EACT4V,EAAOrX,EAAIqX,EAAOxe,MAAQ,EAC1Bwe,EAAOpX,EAAIoX,EAAO5e,OAAS,EAE5B,GAAIud,GAAQrd,GAAS8I,EAAM9I,EAE1B,MAGDqd,EAAOvU,IAMV,IAAInC,EAAMiI,EAAOm2D,SAAS96D,GAC1BtD,EAAMtF,KAAKC,IAAI,EAAGxE,GAAMA,EAAI6J,EAAO,EAAI,IAEvCwD,EAAMnN,IAAI4R,EAAQ3E,EAAMtD,KAU1B4uD,cAAclxD,UAAU2gE,cAAgB,SAASp2D,GAEhD,IAAIzE,EAAQlS,KAAKiR,MAAM8c,WACnBs0B,EAAOnwC,EAAMk5D,YAAYz0D,GAa7B,OAR4B,MAAxB3W,KAAKiR,MAAM0W,YAA+B,MAAR06B,GACrCnwC,EAAM86D,QAAQr2D,IAAYA,GAAU3W,KAAKiR,MAAMa,UAAUm7D,eAIzD5qB,EAAO,IAAI/yC,YAAY,EAAG,EAFdtP,KAAKiR,MAAM0W,UAAUhL,YAAc,EAClC3c,KAAKiR,MAAM0W,UAAU5d,aAAe,IAI3Cs4C,GAQRib,cAAclxD,UAAU8gE,eAAiB,SAASv2D,GAMjD,IAJA,IAAIzE,EAAQlS,KAAKiR,MAAM8c,WACnB7a,EAAahB,EAAMiB,cAAcwD,GACjCwT,EAAQ,GAEHtlB,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQC,EAAMkB,WAAWuD,EAAQ9R,IAEhC7E,KAAK6qE,gBAAgB54D,IAAUjS,KAAK2qE,gBAAgB14D,IAExDkY,EAAMvd,KAAKqF,GAeb,OAXIjS,KAAK4sE,WAERziD,EAAMG,KAAKhiB,QAAQ2M,KAAKjV,MAAM,SAASmtE,EAAIC,GAE1C,IAAIC,EAAOrtE,KAAKiR,MAAMkxC,gBAAgBgrB,GAClCG,EAAOttE,KAAKiR,MAAMkxC,gBAAgBirB,GAEtC,OAAQC,EAAKh+D,GAAKi+D,EAAKj+D,EAAK,EAAMg+D,EAAKh+D,EAAIi+D,EAAKj+D,EAAI,EAAK,GAAK,MAIzD8a,GAQRmzC,cAAclxD,UAAUgsC,KAAO,SAASrwC,GAEvC,GAAqB,MAAjB/H,KAAKm4C,UAAoBn4C,KAAKm4C,SAAW,IAE5CpwC,EAAQqB,KAAKC,IAAItB,EAAO/H,KAAKm4C,WAEjBn4C,KAAKm4C,SAAW,EAC5B,CACC,IAAIjvB,EAAMnhB,EAAQ/H,KAAKm4C,SACvBpwC,GAASmhB,EAAMlpB,KAAKm4C,SAAW,EAAKn4C,KAAKm4C,SAAWjvB,GAAQA,EAI9D,OAAOnhB,GAWRu1D,cAAclxD,UAAUwP,QAAU,SAASjF,GAE1C,GAAc,MAAVA,EACJ,CACC,IAAI0rC,EAAOriD,KAAK+sE,cAAcp2D,GAC1By6C,EAAapxD,KAAKipE,eAClB/2D,EAAQlS,KAAKiR,MAAM8c,WACnBw/C,EAAY,KAEJ,MAARlrB,IAEHkrB,EAAY,EAAelrB,EAAKx6C,OAAS7H,KAAKuzC,UAAYvzC,KAAKssE,aAC9DjqB,EAAKp6C,MAAQjI,KAAKyyC,WAAazyC,KAAKszC,aAGtCi6B,GAAa,EAAIvtE,KAAKqvB,OACtB,IAAIlP,EAAKngB,KAAKmgB,GAAKngB,KAAKqvB,OAASrvB,KAAKyyC,WAClCryB,EAAKpgB,KAAKogB,GAAKpgB,KAAKqvB,OAASrvB,KAAKuzC,UAGtC,GAAIvzC,KAAKiR,MAAMu8D,WAAW72D,GAC1B,CAEC,IAAIjP,EAAQ1H,KAAKiR,MAAMw8D,aAAa92D,GAChC0Q,EAAQ/e,QAAQ0W,UAAUtX,EAAOiG,YAAY2Z,gBAAiB3Z,YAAYspB,mBAC1Ey2C,EAAsE,GAA/DplE,QAAQyW,SAASrX,EAAOiG,YAAY6Z,kBAAkB,GAErD,MAAR66B,IAIFh7B,EAFGqmD,EAEKtkE,KAAK2G,IAAIsX,EAAOg7B,EAAKx6C,QAIrBuB,KAAK2G,IAAIsX,EAAOg7B,EAAKp6C,QAI3BmpD,GAAcsc,IAEjBH,GAAalmD,GAGVqmD,EAEHttD,GAAMiH,EAINlH,GAAMkH,EAIRnV,EAAMuZ,cACN,IAQC,IANA,IAAI5a,EAAM,EACNuU,EAAO,KACP+gD,EAAY,EACZzR,EAAY,KACZvqC,EAAQnqB,KAAKktE,eAAev2D,GAEvB9R,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CACC,IAAIoN,EAAQkY,EAAMtlB,GACdq9C,EAAMhwC,EAAMk5D,YAAYn5D,GAE5B,GAAW,MAAPiwC,EACJ,CACCA,EAAMA,EAAIzyC,QAEO,MAAbzP,KAAK0oD,MAAwB,MAARtjC,IAEnBgsC,GAAchsC,EAAKhW,EAAIgW,EAAKnd,MAChCi6C,EAAIj6C,MAAQ,EAAIjI,KAAKg4D,QAAUh4D,KAAK0oD,OAClC0I,GAAchsC,EAAK/V,EAAI+V,EAAKvd,OAC9Bq6C,EAAIr6C,OAAS,EAAI7H,KAAKg4D,QAAUh4D,KAAK0oD,QAErCtjC,EAAO,KAEHgsC,EAEHhxC,GAAMvP,EAAM7Q,KAAKg4D,QAIjB73C,GAAMtP,EAAM7Q,KAAKg4D,QAGlBnnD,EAAM,GAIRA,EAAMzH,KAAKC,IAAIwH,EAAK,EAAeqxC,EAAIr6C,OAASq6C,EAAIj6C,OACpD,IAAIqjD,EAAK,EAET,IAAKtrD,KAAK2sE,eACV,CACC,IAAIgB,EAAa3tE,KAAKiR,MAAMw8D,aAAax7D,GACzCq5C,EAAKhjD,QAAQ0W,UAAU2uD,EAAYhgE,YAAY+rB,kBAAmB,GAGnE,GAAY,MAARtU,EACJ,CACC,IAAIyJ,EAAOs3C,EAAYnmE,KAAKg4D,QAAU5uD,KAAKmnB,MAAM+6B,EAAK,GAElD8F,EAEHlP,EAAI9yC,EAAIpP,KAAKo4C,MAAOp4C,KAAc,UAAIoJ,KAAKC,IAAIwlB,EAAMqzB,EAAI9yC,GACxDyf,GAAQ7uB,KAAKyyC,YAAczyC,KAAKyyC,WAIjCyP,EAAI7yC,EAAIrP,KAAKo4C,MAAOp4C,KAAc,UAAIoJ,KAAKC,IAAIwlB,EAAMqzB,EAAI7yC,GACxDwf,GAAQ7uB,KAAKuzC,WAAavzC,KAAKuzC,eAGxBvzC,KAAKusE,oBAEVnb,EAEHlP,EAAI9yC,EAAKpP,KAAK4sE,WAAa1qB,EAAI9yC,EAAI+Q,EAAM/W,KAAKC,IAAIrJ,KAAKo4C,KAAK8J,EAAI9yC,EAC/DpP,KAAKyyC,YAAczyC,KAAKyyC,WAAYtyB,GAAMA,EAI3C+hC,EAAI7yC,EAAKrP,KAAK4sE,WAAa1qB,EAAI7yC,EAAI+Q,EAAMhX,KAAKC,IAAIrJ,KAAKo4C,KAAK8J,EAAI7yC,EAC/DrP,KAAKuzC,WAAavzC,KAAKuzC,UAAWnzB,GAAMA,GAIvCgxC,EAEHlP,EAAI7yC,EAAI+Q,EAIR8hC,EAAI9yC,EAAI+Q,EAGLngB,KAAK8oD,MAAqB,MAAbykB,IAEZnc,EAEHlP,EAAIr6C,OAAS0lE,EAIbrrB,EAAIj6C,MAAQslE,GAIVnc,EAEHlP,EAAIj6C,MAAQjI,KAAKo4C,KAAK8J,EAAIj6C,OAI1Bi6C,EAAIr6C,OAAS7H,KAAKo4C,KAAK8J,EAAIr6C,QAG5B7H,KAAK4tE,iBAAiB37D,EAAOiwC,GAC7BwS,EAAYziD,EACZmT,EAAO88B,EAINikB,EAFG/U,EAEShsC,EAAKhW,EAAIgW,EAAKnd,MAAQmB,KAAKmnB,MAAM+6B,EAAK,GAItClmC,EAAK/V,EAAI+V,EAAKvd,OAASuB,KAAKmnB,MAAM+6B,EAAK,IAKlDtrD,KAAKwsE,cAAwB,MAARnqB,GAAwB,MAARj9B,IAAiBplB,KAAKiR,MAAM48D,gBAAgBl3D,GAEpF3W,KAAK8tE,qBAAqBn3D,EAAQ0rC,EAAMj9B,GAEhCplB,KAAK0sE,YAAsB,MAARrqB,GAAwB,MAARj9B,GAA6B,MAAbsvC,IAEvDtD,EAEHhsC,EAAKnd,MAAQo6C,EAAKp6C,MAAQmd,EAAKhW,EAAIpP,KAAKg4D,QAAUh4D,KAAKszC,YAActzC,KAAKyyC,WAI1ErtB,EAAKvd,OAASw6C,EAAKx6C,OAASud,EAAK/V,EAAIrP,KAAKg4D,QAAUh4D,KAAKssE,aAG1DtsE,KAAK4tE,iBAAiBlZ,EAAWtvC,IAGnC,QAEClT,EAAM0Z,eAaT0xC,cAAclxD,UAAUwhE,iBAAmB,SAAS37D,EAAOiwC,GAE1D,IAAIorB,EAAOttE,KAAKiR,MAAMkxC,gBAAgBlwC,GAE1B,MAARq7D,GAAgBprB,EAAI9yC,GAAKk+D,EAAKl+D,GAAK8yC,EAAI7yC,GAAKi+D,EAAKj+D,GACpD6yC,EAAIj6C,OAASqlE,EAAKrlE,OAASi6C,EAAIr6C,QAAUylE,EAAKzlE,QAE9C7H,KAAKiR,MAAM8c,WAAW09C,YAAYx5D,EAAOiwC,IAY3Cob,cAAclxD,UAAU0hE,qBAAuB,SAASn3D,EAAQ0rC,EAAMj9B,GAErE,IAAIgsC,EAAapxD,KAAKipE,eAClB/2D,EAAQlS,KAAKiR,MAAM8c,WAEnBggD,EAAQ1rB,EAAK5yC,QAEjB,GAAI2hD,EACJ,CACC,IAAIvgD,EAAMuU,EAAKhW,EAAIgW,EAAKnd,MAAQjI,KAAKszC,YAActzC,KAAKqvB,OAEpDrvB,KAAKysE,gBAERsB,EAAM9lE,MAAQmB,KAAKC,IAAI0kE,EAAM9lE,MAAO4I,GAIpCk9D,EAAM9lE,MAAQ4I,OAKXA,EAAMuU,EAAK/V,EAAI+V,EAAKvd,OAAS7H,KAAKssE,aAAetsE,KAAKqvB,OAEtDrvB,KAAKysE,gBAERsB,EAAMlmE,OAASuB,KAAKC,IAAI0kE,EAAMlmE,OAAQgJ,GAItCk9D,EAAMlmE,OAASgJ,EAIbwxC,EAAKjzC,GAAK2+D,EAAM3+D,GAAKizC,EAAKhzC,GAAK0+D,EAAM1+D,GACxCgzC,EAAKp6C,OAAS8lE,EAAM9lE,OAASo6C,EAAKx6C,QAAUkmE,EAAMlmE,QAElDqK,EAAMu5D,YAAY90D,EAAQo3D,IAI5B9tE,WAAWq9D,mBAAyC,IAAlBA,cAAgCA,mBAAgB12D,EAuClF22D,kBAAkBnxD,UAAY,IAAI+wD,cAClCI,kBAAkBnxD,UAAUH,YAAcsxD,kBAQ1CA,kBAAkBnxD,UAAUglD,WAAa,KAQzCmM,kBAAkBnxD,UAAU4rD,QAAU,KAQtCuF,kBAAkBnxD,UAAUijB,OAAS,KAOrCkuC,kBAAkBnxD,UAAU4hE,gBAAiB,EAO7CzQ,kBAAkBnxD,UAAU68D,aAAe,WAE1C,OAAOjpE,KAAKoxD,YAQbmM,kBAAkBnxD,UAAUw9D,SAAW,SAAS53D,EAAM5C,EAAGC,GAExD,IAAI6C,EAAQlS,KAAKiR,MAAM8c,WACnBpX,EAASzE,EAAM+vC,UAAUjwC,GAE7B,GAAY,MAARA,GACO,MAAV2E,EACD,CACC,IAAI9R,EAAI,EACJugB,EAAO,EACPlS,EAAahB,EAAMiB,cAAcwD,GAIrC,IAAK9R,EAAI,EAAGA,EAAIqO,EAAYrO,IAC5B,CACC,IAAIoN,EAAQC,EAAMkB,WAAWuD,EAAQ9R,GACjC4hB,EAASzmB,KAAK2rE,gBAAgB15D,GAElC,GAAc,MAAVwU,EACJ,CACC,IAAI5V,EAAM4V,EAAOrX,EAAIqX,EAAOxe,MAAQ,EAEpC,GAAImd,EAAOhW,GAAKyB,EAAMzB,EAErB,MAGDgW,EAAOvU,GAKT,IAAInC,EAAMiI,EAAOm2D,SAAS96D,GAC1BtD,EAAMtF,KAAKC,IAAI,EAAGxE,GAAMA,EAAI6J,EAAO,EAAI,IAEvCwD,EAAMnN,IAAI4R,EAAQ3E,EAAMtD,KAU1B6uD,kBAAkBnxD,UAAUwP,QAAU,SAASjF,GAE9C,IAAIy6C,EAAapxD,KAAKipE,eAClB/2D,EAAQlS,KAAKiR,MAAM8c,WACnBs0B,EAAOnwC,EAAMk5D,YAAYz0D,GAe7B,GAV4B,MAAxB3W,KAAKiR,MAAM0W,YACJ,MAAR06B,GACFnwC,EAAM86D,QAAQr2D,IACdA,GAAU3W,KAAKiR,MAAMa,UAAUm7D,eAI/B5qB,EAAO,IAAI/yC,YAAY,EAAG,EAFdtP,KAAKiR,MAAM0W,UAAUhL,YAAc,EAClC3c,KAAKiR,MAAM0W,UAAU5d,aAAe,IAItC,MAARs4C,EACJ,CAIC,IAHA,IAAIhuC,EAAW,GACXnB,EAAahB,EAAMiB,cAAcwD,GAE5B9R,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQC,EAAMkB,WAAWuD,EAAQ9R,IAEhC7E,KAAK6qE,gBAAgB54D,IACzBjS,KAAK2qE,gBAAgB14D,IAErBoC,EAASzH,KAAKqF,GAIhB,IAAI+Q,EAAI3O,EAASlS,OAEjB,GAAI6gB,EAAI,EACR,CACC,IAAI7C,EAAKngB,KAAKqvB,OACVjP,EAAKpgB,KAAKqvB,OACV4+C,EAAQ,EAAe5rB,EAAKx6C,OAASw6C,EAAKp6C,MAC9CgmE,GAAS,EAAIjuE,KAAKqvB,OAElB,IAAIxB,EAAQ7tB,KAAKiR,MAAMu8D,WAAW72D,GACjC3W,KAAKiR,MAAMi9D,aAAav3D,GACxB,IAAIrH,YAEL2+D,GAAS,EAAepgD,EAAKhmB,OAASgmB,EAAK5lB,MAC3CkY,GAAU0N,EAAK5lB,MACfmY,GAAUyN,EAAKhmB,OAEf,IAAIgJ,EAAM7Q,KAAKqvB,QAAUrM,EAAI,GAAKhjB,KAAKg4D,QACnCjwD,EAAQ,GACTs6C,EAAKp6C,MAAQkY,EAAKtP,GAAOmS,GACzBq/B,EAAKx6C,OAASuY,EAAKvP,GAAOmS,EAI7B,GAAIjb,EAAQ,EACZ,CACCmK,EAAMuZ,cACN,IAEC,IAAS5mB,EAAI,EAAGA,EAAIme,EAAGne,IACvB,CACKoN,EAAQoC,EAASxP,GAArB,IACIq9C,EAAMhwC,EAAMk5D,YAAYn5D,GAEjB,MAAPiwC,KAEHA,EAAMA,EAAIzyC,SACNL,EAAI+Q,EACR+hC,EAAI7yC,EAAI+Q,EAEJgxC,GAECpxD,KAAKguE,iBAER9rB,EAAIj6C,MAAQF,EACZm6C,EAAIr6C,OAASomE,GAGd9tD,GAAMpY,EAAQ/H,KAAKg4D,UAIfh4D,KAAKguE,iBAER9rB,EAAIr6C,OAASE,EACbm6C,EAAIj6C,MAAQgmE,GAGb7tD,GAAMrY,EAAQ/H,KAAKg4D,SAGpB9lD,EAAMu5D,YAAYx5D,EAAOiwC,KAI5B,QAEChwC,EAAM0Z,iBAOX3rB,WAAWs9D,uBAAiD,IAAtBA,kBAAoCA,uBAAoB32D,EAmC9F42D,oBAAoBpxD,UAAY,IAAI+wD,cACpCK,oBAAoBpxD,UAAUH,YAAcuxD,oBAO5CA,oBAAoBpxD,UAAUglD,WAAa,KAO3CoM,oBAAoBpxD,UAAUqxD,OAAS,KAQvCD,oBAAoBpxD,UAAUogE,cAAe,EAS7ChP,oBAAoBpxD,UAAU+hE,wBAAyB,EAOvD3Q,oBAAoBpxD,UAAUgiE,aAAe,GAO7C5Q,oBAAoBpxD,UAAUiiE,gBAAkB,EAOhD7Q,oBAAoBpxD,UAAUkiE,kBAAoB,EAOlD9Q,oBAAoBpxD,UAAUmiE,mBAAqB,EAOnD/Q,oBAAoBpxD,UAAUoiE,iBAAmB,EAQjDhR,oBAAoBpxD,UAAUqiE,eAAiB,KAQ/CjR,oBAAoBpxD,UAAUsiE,UAAW,EAQzClR,oBAAoBpxD,UAAUg+D,QAAU,KAOxC5M,oBAAoBpxD,UAAUuiE,cAAgB,GAO9CnR,oBAAoBpxD,UAAUwiE,aAAe,GAQ7CpR,oBAAoBpxD,UAAUyiE,YAAa,EAO3CrR,oBAAoBpxD,UAAU0iE,eAAiB,EAO/CtR,oBAAoBpxD,UAAU2iE,gBAAkB,EAOhDvR,oBAAoBpxD,UAAU4iE,aAAe,EAQ7CxR,oBAAoBpxD,UAAU6iE,cAAgB,EAO9CzR,oBAAoBpxD,UAAU8iE,aAAc,EAQ5C1R,oBAAoBpxD,UAAU+iE,WAAY,EAQ1C3R,oBAAoBpxD,UAAUgjE,YAAa,EAQ3C5R,oBAAoBpxD,UAAUijE,cAAgB,KAO9C7R,oBAAoBpxD,UAAU0xC,KAAO,KAQrC0f,oBAAoBpxD,UAAUlH,KAAO,KAYrCs4D,oBAAoBpxD,UAAUy+D,gBAAkB,SAASZ,GAExD,OAAO9M,cAAc/wD,UAAUy+D,gBAAgBz/D,MAAMpL,KAAMqL,YACd,GAA5CrL,KAAKiR,MAAMq+D,eAAerF,GAAQ9nE,QAQpCq7D,oBAAoBpxD,UAAU68D,aAAe,WAE5C,OAAOjpE,KAAKoxD,YAkBboM,oBAAoBpxD,UAAUwP,QAAU,SAASjF,EAAQmnC,GAExD99C,KAAK2W,OAASA,EACd,IAAIzE,EAAQlS,KAAKiR,MAAM8c,WAEvB,GAAY,MAAR+vB,EAGH,GAAI99C,KAAKiR,MAAMsC,SAASoD,EAAQzE,EAAM+vC,UAAUtrC,GAC/C3W,KAAKy9D,QAASz9D,KAAKy9D,QAAQ,GAAOt7D,OAAS,EAE3CnC,KAAK89C,KAAOnnC,MAMb,CACC,IAAIioD,EAAQ5+D,KAAKiR,MAAMs+D,cAAc54D,GAAQ,EAAM3W,KAAKy9D,QAExD,GAAImB,EAAMz8D,OAAS,EAElB,IAAK,IAAI0C,EAAI,EAAGA,EAAI+5D,EAAMz8D,OAAQ0C,IAEjC,IAAK7E,KAAK6qE,gBAAgBjM,EAAM/5D,KAC/B7E,KAAKiR,MAAMsC,SAASqrD,EAAM/5D,GAAI,KAC7B7E,KAAKy9D,QAASz9D,KAAKy9D,QAAQ,GAAOt7D,OAAS,EAC7C,CACCnC,KAAK89C,KAAO8gB,EAAM/5D,GAClB,YAQJ7E,KAAK89C,KAAOA,EAGb,GAAiB,MAAb99C,KAAK89C,KACT,CACK99C,KAAKwsE,aAERxsE,KAAKyuE,eAAiB,IAAIe,OAI1BxvE,KAAKyuE,eAAiB,KAIvBzuE,KAAKyvE,QAAU,KACfzvE,KAAK0vE,QAAU,KAEX/4D,GAAU3W,KAAK89C,MAAkC,MAA1B5rC,EAAM2vC,SAASlrC,IAAmB3W,KAAKmuE,wBAItD,OAFPjsB,EAAMliD,KAAKiR,MAAMkxC,gBAAgBxrC,MAIpC3W,KAAKyvE,QAAUvtB,EAAI9yC,EACnBpP,KAAK0vE,QAAUxtB,EAAI7yC,GAIrB6C,EAAMuZ,cAEN,IAYC,GAVAzrB,KAAKoqE,QAAU,IAAIoF,OACnBxvE,KAAKkF,KAAOlF,KAAK2vE,IAAI3vE,KAAK89C,KAAMnnC,GAE5B3W,KAAKovE,aAERpvE,KAAKqvE,cAAgB,GACrBrvE,KAAK4vE,gBAAgB5vE,KAAKkF,KAAM,GAChClF,KAAK6vE,eAAe7vE,KAAKkF,KAAM,IAGf,MAAblF,KAAKkF,KACT,CACClF,KAAK0+D,OAAO1+D,KAAKkF,MACjB,IAAIib,EAAKngB,KAAKiR,MAAMknC,SAChB/3B,EAAKD,EAET,IAAKngB,KAAK0uE,SACV,CACC,IAAIjiB,EAAIzsD,KAAK2rE,gBAAgB3rE,KAAK89C,MAEzB,MAAL2O,IAEHtsC,EAAKssC,EAAEr9C,EACPgR,EAAKqsC,EAAEp9C,GAIT,IA8CK6yC,EA9CDz7B,EAAS,KAWb,GAAc,OAPbA,EAFGzmB,KAAKipE,eAECjpE,KAAK8vE,iBAAiB9vE,KAAKkF,KAAMib,EAAIC,GAIrCpgB,KAAK+vE,eAAe/vE,KAAKkF,KAAM,KAAMib,EAAIC,IAInD,CACC,IAAI7N,EAAK,EACLE,EAAK,EAELgU,EAAOrX,EAAI,IAEdmD,EAAKnJ,KAAKsX,IAAIP,EAAKsG,EAAOrX,IAGvBqX,EAAOpX,EAAI,IAEdoD,EAAKrJ,KAAKsX,IAAIN,EAAKqG,EAAOpX,IAGjB,GAANkD,GAAiB,GAANE,GAEdzS,KAAKgwE,SAAShwE,KAAKkF,KAAMqN,EAAIE,GAG1BzS,KAAKwsE,cAERxsE,KAAKiwE,gBAGFjwE,KAAKkvE,aAGRlvE,KAAKkwE,oBAAoBlwE,KAAKkF,MAKZ,MAAhBlF,KAAKyvE,SAAmC,MAAhBzvE,KAAK0vE,SAIrB,OAFPxtB,EAAMliD,KAAKiR,MAAMkxC,gBAAgBxrC,OAIpCurC,EAAMA,EAAIzyC,SACNL,EAAIpP,KAAKyvE,QACbvtB,EAAI7yC,EAAIrP,KAAK0vE,QACbx9D,EAAMu5D,YAAY90D,EAAQurC,KAK9B,QAEChwC,EAAM0Z,eAUT4xC,oBAAoBpxD,UAAU4jE,SAAW,SAAS9qE,EAAMqN,EAAIE,GAE3DvN,EAAKkK,GAAKmD,EACVrN,EAAKmK,GAAKoD,EACVzS,KAAKoL,MAAMlG,GAIX,IAFA,IAAI+M,EAAQ/M,EAAK+M,MAED,MAATA,GAENjS,KAAKgwE,SAAS/9D,EAAOM,EAAIE,GACzBR,EAAQA,EAAMyG,MAUhB8kD,oBAAoBpxD,UAAU+jE,kBAAoB,SAASrsD,EAAQxQ,GAElE,IAAI+W,EAAS,IAAIle,aAEjBmH,EAAMgX,MAAK,SAAS8lD,EAAIC,GAEvB,IAAIC,EAAOF,EAAG5F,YAAY4F,EAAG5F,aAAY,IAAU1mD,GAC/CV,EAAKiH,EAAOxe,IAAIykE,GAEV,MAANltD,IAEHA,EAAKqH,WAAWC,OAAO4lD,GAAM/hE,MAAMkc,WAAWE,gBAC9CN,EAAO9d,IAAI+jE,EAAMltD,IAGlB,IAAImtD,EAAOF,EAAG7F,YAAY6F,EAAG7F,aAAY,IAAU1mD,GAC/CT,EAAKgH,EAAOxe,IAAI0kE,GAQpB,OANU,MAANltD,IAEHA,EAAKoH,WAAWC,OAAO6lD,GAAMhiE,MAAMkc,WAAWE,gBAC9CN,EAAO9d,IAAIgkE,EAAMltD,IAGXoH,WAAWI,QAAQzH,EAAIC,OAUhCm6C,oBAAoBpxD,UAAUwjE,gBAAkB,SAAS1qE,EAAMsrE,IAE9B,MAA5BxwE,KAAKqvE,cAAcmB,IAAiBxwE,KAAKqvE,cAAcmB,GAAQtrE,EAAK2C,UAEvE7H,KAAKqvE,cAAcmB,GAAQtrE,EAAK2C,QAKjC,IAFA,IAAIoK,EAAQ/M,EAAK+M,MAED,MAATA,GAENjS,KAAK4vE,gBAAgB39D,EAAOu+D,EAAO,GACnCv+D,EAAQA,EAAMyG,MAUhB8kD,oBAAoBpxD,UAAUyjE,eAAiB,SAAS3qE,EAAMsrE,GAE7B,MAA5BxwE,KAAKqvE,cAAcmB,IAAiBxwE,KAAKqvE,cAAcmB,GAAQtrE,EAAK2C,SAEvE3C,EAAK2C,OAAS7H,KAAKqvE,cAAcmB,IAKlC,IAFA,IAAIv+D,EAAQ/M,EAAK+M,MAED,MAATA,GAENjS,KAAK6vE,eAAe59D,EAAOu+D,EAAO,GAClCv+D,EAAQA,EAAMyG,MAWhB8kD,oBAAoBpxD,UAAUujE,IAAM,SAAS39D,EAAM2E,GAElD,IAAIxS,EAAKsmB,WAAWC,OAAO1Y,GACvB9M,EAAO,KAEX,GAAY,MAAR8M,GAAoC,MAApBhS,KAAKoqE,QAAQjmE,KAAgBnE,KAAK6qE,gBAAgB74D,GACtE,CACChS,KAAKoqE,QAAQjmE,GAAM6N,EACnB9M,EAAOlF,KAAKywE,WAAWz+D,GAEvB,IAAIE,EAAQlS,KAAKiR,MAAM8c,WACnBwzC,EAAO,KACPmP,EAAM1wE,KAAKiR,MAAMsC,SAASvB,EAAM2E,EAAQ3W,KAAKy9D,QAASz9D,KAAKy9D,QAAQ,GAAO,GAC1El2C,EAAOvnB,KAAKiR,MAAMa,UAElB9R,KAAKmvE,WAERnvE,KAAKmwE,kBAAkBn+D,EAAM0+D,GAG9B,IAAK,IAAI7rE,EAAI,EAAGA,EAAI6rE,EAAIvuE,OAAQ0C,IAChC,CACC,IAAIgf,EAAO6sD,EAAI7rE,GAEf,IAAK7E,KAAK+qE,cAAclnD,GACxB,CAEK7jB,KAAK6uE,YAER7uE,KAAKqrE,cAAcxnD,EAAM,MAGtB7jB,KAAKkvE,cAERlvE,KAAKgrE,oBAAoBnnD,GAAM,GAC/B7jB,KAAKqrE,cAAcxnD,EAAM,OAI1B,IAAIhS,EAAQ0V,EAAKxV,SAAS8R,GACtBpF,EAAmB,MAAT5M,EAAiBA,EAAM8tD,mBAAmB3/D,KAAKy9D,QAAUl2C,EAAKo4C,mBAAmB97C,EAAM7jB,KAAKy9D,QACtG5sD,EAAM7Q,KAAK2vE,IAAIlxD,EAAQ9H,GAEhB,MAAP9F,GAA4C,MAA7BqB,EAAMk5D,YAAY3sD,KAExB,MAAR8iD,EAEHr8D,EAAK+M,MAAQpB,EAIb0wD,EAAK7oD,KAAO7H,EAGb0wD,EAAO1wD,KAMX,OAAO3L,GASRs4D,oBAAoBpxD,UAAUsyD,OAAS,SAASx5D,GAE/C,GAAY,MAARA,EACJ,CAGC,IAFA,IAAI+M,EAAQ/M,EAAK+M,MAED,MAATA,GAENjS,KAAK0+D,OAAOzsD,GACZA,EAAQA,EAAMyG,KAGG,MAAdxT,EAAK+M,MAERjS,KAAK2wE,aAAazrE,EAAMlF,KAAKkP,KAAKhK,IAIlClF,KAAK4wE,WAAW1rE,KAQnBs4D,oBAAoBpxD,UAAU0jE,iBAAmB,SAAS5qE,EAAMib,EAAIC,EAAIqG,GAEvEvhB,EAAKkK,GAAK+Q,EAAKjb,EAAK2rE,QACpB3rE,EAAKmK,GAAK+Q,EAAKlb,EAAK4rE,QACpBrqD,EAASzmB,KAAKoL,MAAMlG,EAAMuhB,GAC1B,IAAIxU,EAAQ/M,EAAK+M,MAEjB,GAAa,MAATA,EACJ,CACCwU,EAASzmB,KAAK8vE,iBAAiB79D,EAAO/M,EAAKkK,EAAGlK,EAAKmK,EAAGoX,GAItD,IAHA,IAAIsqD,EAAgB7rE,EAAKmK,EAAI4C,EAAM6+D,QAC/Bj4D,EAAI5G,EAAMyG,KAEF,MAALG,GAEN4N,EAASzmB,KAAK8vE,iBAAiBj3D,EAAG3T,EAAKkK,EAAI6C,EAAM4+D,QAASE,EAAetqD,GACzEsqD,GAAiBl4D,EAAEi4D,QACnBj4D,EAAIA,EAAEH,KAIR,OAAO+N,GAMR+2C,oBAAoBpxD,UAAU2jE,eAAiB,SAAS7qE,EAAMyR,EAAQwJ,EAAIC,EAAIqG,GAE7EvhB,EAAKkK,GAAK+Q,EAAKjb,EAAK4rE,QACpB5rE,EAAKmK,GAAK+Q,EAAKlb,EAAK2rE,QACpBpqD,EAASzmB,KAAKoL,MAAMlG,EAAMuhB,GAC1B,IAAIxU,EAAQ/M,EAAK+M,MAEjB,GAAa,MAATA,EACJ,CACCwU,EAASzmB,KAAK+vE,eAAe99D,EAAO/M,EAAMA,EAAKkK,EAAGlK,EAAKmK,EAAGoX,GAI1D,IAHA,IAAIsqD,EAAgB7rE,EAAKkK,EAAI6C,EAAM6+D,QAC/Bj4D,EAAI5G,EAAMyG,KAEF,MAALG,GAEN4N,EAASzmB,KAAK+vE,eAAel3D,EAAG3T,EAAM6rE,EAAe7rE,EAAKmK,EAAI4C,EAAM4+D,QAASpqD,GAC7EsqD,GAAiBl4D,EAAEi4D,QACnBj4D,EAAIA,EAAEH,KAIR,OAAO+N,GAMR+2C,oBAAoBpxD,UAAUukE,aAAe,SAASzrE,EAAM2C,GAE3D,IAAIuH,EAAIpP,KAAK4uE,aAAe5uE,KAAK2uE,cAC7B9rD,GAAMhb,EAAS3C,EAAK+C,OAAS,EAAIjI,KAAK4uE,aACtClrD,EAAKb,EAAK3d,EAAK+C,MAAQ,EAAIjI,KAAK4uE,aAAe/mE,EAEnD3C,EAAK+M,MAAM4+D,QAAUzhE,EAAIlK,EAAK2C,OAC9B3C,EAAK+M,MAAM6+D,QAAUptD,EAErBxe,EAAK8rE,QAAQC,UAAYjxE,KAAKkxE,WAAWhsE,EAAK2C,OAAQ,EACrD7H,KAAKkxE,WAAW9hE,EAAGsU,EAAIxe,EAAK8rE,QAAQC,YACrC/rE,EAAK8rE,QAAQG,UAAYnxE,KAAKkxE,WAAWhsE,EAAK2C,OAAQ,EACrD7H,KAAKkxE,WAAW9hE,EAAGyT,EAAI3d,EAAK8rE,QAAQG,aAMtC3T,oBAAoBpxD,UAAUwkE,WAAa,SAAS1rE,GAEnD,IAAIogB,EAAO,EAAItlB,KAAK4uE,aAEpB1pE,EAAK8rE,QAAQI,UAAYpxE,KAAKkxE,WAC7BhsE,EAAK2C,OAASyd,EAAM,GACrBpgB,EAAK8rE,QAAQC,UAAY/rE,EAAK8rE,QAAQI,UACtClsE,EAAK8rE,QAAQK,UAAYrxE,KAAKkxE,WAC7B,GAAIhsE,EAAK+C,MAAQqd,GAClBpgB,EAAK8rE,QAAQG,UAAYnxE,KAAKkxE,WAC7BhsE,EAAK2C,OAASyd,EAAM,EAAGpgB,EAAK8rE,QAAQK,YAMtC7T,oBAAoBpxD,UAAU8C,KAAO,SAAShK,GAE7C,IAAIogB,EAAO,EAAItlB,KAAK4uE,aAEhB38D,EAAQ/M,EAAK+M,MACjB/M,EAAK8rE,QAAU/+D,EAAM++D,QACrB,IAAInoE,EAAIoJ,EAAMhK,MAAQqd,EAClBgsD,EAAMzoE,EAGV,IAFAoJ,EAAQA,EAAMyG,KAEE,MAATzG,GACP,CACC,IAAIqK,EAAItc,KAAKuxE,MAAMrsE,EAAK8rE,QAAS/+D,EAAM++D,SACvC/+D,EAAM6+D,QAAUx0D,EAAIzT,EACpBoJ,EAAM4+D,QAAU,EAEhBS,GAAOh1D,GADPzT,EAAIoJ,EAAMhK,MAAQqd,GAElBrT,EAAQA,EAAMyG,KAGf,OAAO44D,GAMR9T,oBAAoBpxD,UAAUmlE,MAAQ,SAASnuD,EAAIC,GASlD,IAPA,IAAIjU,EAAI,EACJC,EAAI,EACJmiE,EAAQ,EAERC,EAAQruD,EAAG+tD,UACXO,EAAQruD,EAAG4tD,UAEC,MAATS,GAA0B,MAATD,GACxB,CACC,IAAIn1D,EAAItc,KAAK4c,OAAOxN,EAAGC,EAAGqiE,EAAMn/D,GAAIm/D,EAAMj/D,GACzCg/D,EAAMl/D,GAAIk/D,EAAMh/D,IACjBpD,GAAKiN,EACLk1D,GAASl1D,EAELlN,EAAIsiE,EAAMn/D,IAAMk/D,EAAMl/D,IAEzBnD,GAAKsiE,EAAMn/D,GACXlD,GAAKqiE,EAAMj/D,GACXi/D,EAAQA,EAAMh5D,OAIdtJ,GAAKqiE,EAAMl/D,GACXlD,GAAKoiE,EAAMh/D,GACXg/D,EAAQA,EAAM/4D,MAIhB,GAAa,MAATg5D,EACJ,CACC,IAAIr1D,EAAIrc,KAAK2xE,OAAOvuD,EAAGguD,UAAW,EAAG,EAAGM,EAAOtiE,EAAGC,GAClD+T,EAAGguD,UAAuB,MAAV/0D,EAAE3D,KAAgB2K,EAAG+tD,UAAY/0D,EACjD+G,EAAGiuD,UAAYhuD,EAAGguD,eAMJ,OAFVh1D,EAAIrc,KAAK2xE,OAAOtuD,EAAGguD,UAAWjiE,EAAGC,EAAGoiE,EAAO,EAAG,IAE5C/4D,OAEL0K,EAAGiuD,UAAYh1D,GAMjB,OAFA+G,EAAG+tD,UAAY9tD,EAAG8tD,UAEXK,GAMRhU,oBAAoBpxD,UAAUwQ,OAAS,SAASwG,EAAIC,EAAIuuD,EAAIC,EAAIvhE,EAAIC,GAEnE,IAAI+L,EAAI,EAER,OAAIhM,GAAM8S,GAAMA,EAAKwuD,GAAM,EAEnB,GAUNt1D,EAPMhM,EAAKuhE,EAAKD,EAAKrhE,EAEf,EAEH6S,EAAK,EAEAA,EAAKyuD,EACLD,EAAKvuD,EAELD,EAAK,EAELA,EAAK7S,EACLD,EAAK+S,GAIRA,EAGE/S,EAAK8S,EAAKwuD,EAGdrhE,GAAM8S,GADD/S,EAAK8S,GAAMyuD,EACDD,GAEXthE,EAAK8S,EAAKwuD,GAETA,EAAKxuD,GAAM7S,EACZD,GAAM+S,EAAKwuD,GAIfthE,GAAM8S,EAAKwuD,IAGR,EAEAv1D,EAIA,GAOTkhD,oBAAoBpxD,UAAUulE,OAAS,SAASG,EAAO3oD,EAAIzF,EAAIquD,EAAOnvD,EAAIC,GAEzE,IAAItQ,EAAKqQ,EAAKmvD,EAAMx/D,GAAK4W,EACrB1W,EAAK,EAKRA,EAFe,GAAZs/D,EAAMx/D,GAEJw/D,EAAMt/D,GAIPF,EAAKw/D,EAAMt/D,GACNs/D,EAAMx/D,GAGhB,IAAIwV,EAAI/nB,KAAKkxE,WAAW3+D,EAAIE,EAAIs/D,EAAMr5D,MAGtC,OAFAo5D,EAAMp5D,KAAO1Y,KAAKkxE,WAAW,EAAGruD,EAAKkvD,EAAMt/D,GAAKA,EAAKiR,EAAIqE,GAElDA,GAMRy1C,oBAAoBpxD,UAAUqkE,WAAa,SAASz+D,GAEnD,IAAI9M,EAAO,IAAIsqE,OACftqE,EAAK8M,KAAOA,EACZ9M,EAAKkK,EAAI,EACTlK,EAAKmK,EAAI,EACTnK,EAAK+C,MAAQ,EACb/C,EAAK2C,OAAS,EAEd,IAAIq6C,EAAMliD,KAAK2rE,gBAAgB35D,GAoB/B,OAlBW,MAAPkwC,IAECliD,KAAKipE,gBAER/jE,EAAK+C,MAAQi6C,EAAIr6C,OACjB3C,EAAK2C,OAASq6C,EAAIj6C,QAIlB/C,EAAK+C,MAAQi6C,EAAIj6C,MACjB/C,EAAK2C,OAASq6C,EAAIr6C,SAIpB3C,EAAK2rE,QAAU,EACf3rE,EAAK4rE,QAAU,EACf5rE,EAAK8rE,QAAU,IAAIxB,OAEZtqE,GAMRs4D,oBAAoBpxD,UAAUhB,MAAQ,SAASlG,EAAMuhB,GAEpD,IAAIvU,EAAQlS,KAAKiR,MAAM8c,WACnB/b,EAAO9M,EAAK8M,KACZy6C,EAAIv6C,EAAMk5D,YAAYp5D,GAE1B,GAAY,MAARA,GAAqB,MAALy6C,EACpB,CACC,GAAIzsD,KAAK2qE,gBAAgB34D,KAExBy6C,EAAIzsD,KAAK0rE,kBAAkB15D,EAAM9M,EAAKkK,EAAGlK,EAAKmK,GAE1CrP,KAAKwsE,cACT,CACC,IAAI71D,EAASzE,EAAM+vC,UAAUjwC,GACzB7N,EAAKsmB,WAAWC,OAAO/T,GAGI,MAA3B3W,KAAKyuE,eAAetqE,KAEvBnE,KAAKyuE,eAAetqE,GAAMwS,GAO5B8P,EAFa,MAAVA,EAEM,IAAInX,YAAYm9C,EAAEr9C,EAAGq9C,EAAEp9C,EAAGo9C,EAAExkD,MAAOwkD,EAAE5kD,QAIrC,IAAIyH,YAAYlG,KAAK2G,IAAI0W,EAAOrX,EAAGq9C,EAAEr9C,GAC7ChG,KAAK2G,IAAI0W,EAAOpX,EAAGo9C,EAAEp9C,GACrBjG,KAAKC,IAAIod,EAAOrX,EAAIqX,EAAOxe,MAAOwkD,EAAEr9C,EAAIq9C,EAAExkD,OAC1CmB,KAAKC,IAAIod,EAAOpX,EAAIoX,EAAO5e,OAAQ4kD,EAAEp9C,EAAIo9C,EAAE5kD,SAI9C,OAAO4e,GAMR+2C,oBAAoBpxD,UAAU8kE,WAAa,SAAS3+D,EAAIE,EAAIiG,GAE3D,IAAIs5D,EAAO,IAAIxC,OAKf,OAJAwC,EAAKz/D,GAAKA,EACVy/D,EAAKv/D,GAAKA,EACVu/D,EAAKt5D,KAAOA,EAELs5D,GAURxU,oBAAoBpxD,UAAU6jE,cAAgB,WAE7C,IAAIp/D,EAAM,GAEV,IAAK,IAAI1M,KAAMnE,KAAKyuE,eAEnB59D,EAAIjE,KAAK5M,KAAKyuE,eAAetqE,IAG9BnE,KAAK8rE,cAAcxjE,QAAQ4hB,UAAUrZ,GAAK,GAAO7Q,KAAKouE,aAAcpuE,KAAKquE,gBACxEruE,KAAKsuE,kBAAmBtuE,KAAKuuE,mBAAoBvuE,KAAKwuE,mBAQxDhR,oBAAoBpxD,UAAU8jE,oBAAsB,SAAShrE,GAE5DlF,KAAKiyE,oBAAoB/sE,GAGzB,IAFA,IAAI+M,EAAQ/M,EAAK+M,MAED,MAATA,GAENjS,KAAKkwE,oBAAoBj+D,GACzBA,EAAQA,EAAMyG,MAShB8kD,oBAAoBpxD,UAAU6lE,oBAAsB,SAAS/sE,GAQ5D,IANA,IAAI+M,EAAQ/M,EAAK+M,MACbigE,EAAahtE,EAAK8M,KAElBkB,EAAa,EACbi/D,EAAc,GAEF,MAATlgE,GACP,CACCiB,IAEA,IAAIk/D,EAAmBngE,EAAM7C,EAEzBpP,KAAKoxD,aAERghB,EAAmBngE,EAAM5C,GAG1B8iE,EAAYvlE,KAAK,IAAIwwD,mBAAmBnrD,EAAOmgE,IAC/CngE,EAAQA,EAAMyG,KAGfy5D,EAAY7nD,KAAK8yC,mBAAmBhxD,UAAUye,SAE9C,IAAIwnD,EAAiBntE,EAAK+C,MAEtBqqE,GAAiBp/D,EAAa,GAAKlT,KAAK8uE,eAGxCuD,EAAiBC,EAAiB,EAAItyE,KAAK8uE,iBAE9CuD,GAAkB,EAAIryE,KAAK8uE,gBAG5B,IAAIyD,EAAcF,EAAiBn/D,EAE/Bs/D,EAAiBD,EAAc,EAE/BF,EAAiBC,EAAiB,EAAItyE,KAAK8uE,iBAE9C0D,GAAkBxyE,KAAK8uE,gBAGxB,IAAI2D,EAAiBzyE,KAAKgvE,aAAehvE,KAAK+uE,gBAC1C2D,EAAa,EAEbC,EAAe3yE,KAAK2rE,gBAAgBuG,GACxCjgE,EAAQ/M,EAAK+M,MAEb,IAAK,IAAIqtD,EAAI,EAAGA,EAAI6S,EAAYhwE,OAAQm9D,IACxC,CAWC,IAVA,IAAIsT,EAAYT,EAAY7S,GAAGttD,KAAKA,KAChC6gE,EAAc7yE,KAAK2rE,gBAAgBiH,GAEnCt/D,EAAQtT,KAAKiR,MAAM6hE,gBAAgBZ,EACrCU,GAAW,GAETG,EAAY,GACZ3jE,EAAI,EACJC,EAAI,EAECxK,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAE7B7E,KAAKoxD,YAIRhiD,EAAIujE,EAAavjE,EAAIujE,EAAa1qE,MAClCoH,EAAIsjE,EAAatjE,EAAImjE,EACrBO,EAAUnmE,KAAK,IAAIuC,QAAQC,EAAGC,IAC9BD,EAAIujE,EAAavjE,EAAIujE,EAAa1qE,MAC9BwqE,EACJM,EAAUnmE,KAAK,IAAIuC,QAAQC,EAAGC,IAC9BA,EAAIwjE,EAAYxjE,EAAIwjE,EAAYhrE,OAAS,EACzCkrE,EAAUnmE,KAAK,IAAIuC,QAAQC,EAAGC,IAC9BrP,KAAKqrE,cAAc/3D,EAAMzO,GAAIkuE,KAI7B3jE,EAAIujE,EAAavjE,EAAIojE,EACrBnjE,EAAIsjE,EAAatjE,EAAIsjE,EAAa9qE,OAClCkrE,EAAUnmE,KAAK,IAAIuC,QAAQC,EAAGC,IAC9BA,EAAIsjE,EAAatjE,EAAIsjE,EAAa9qE,OAC9B4qE,EACJM,EAAUnmE,KAAK,IAAIuC,QAAQC,EAAGC,IAC9BD,EAAIyjE,EAAYzjE,EAAIyjE,EAAY5qE,MAAQ,EACxC8qE,EAAUnmE,KAAK,IAAIuC,QAAQC,EAAGC,IAC9BrP,KAAKqrE,cAAc/3D,EAAMzO,GAAIkuE,IAI3BzT,EAAIpsD,EAAa,EAEpBu/D,GAAkBzyE,KAAK+uE,gBAEfzP,EAAIpsD,EAAa,IAEzBu/D,GAAkBzyE,KAAK+uE,iBAMxByD,GAAkBD,EAGlBG,EAAatpE,KAAKC,IAAIqpE,EAAYD,KAGpCxyE,WAAWu9D,yBAAqD,IAAxBA,oBAAsCA,yBAAsB52D,EAgCpG0B,QAAQoX,OAAOg+C,mBAAoBF,qBAOnCE,mBAAmBtxD,UAAU4mE,YAAc,GAO3CtV,mBAAmBtxD,UAAU6mE,MAAQ,EAOrCvV,mBAAmBtxD,UAAU8mE,MAAQ,EAOrCxV,mBAAmBtxD,UAAUuiE,cAAgB,IAO7CjR,mBAAmBtxD,UAAUwiE,aAAe,GAO5ClR,mBAAmBtxD,UAAU+mE,YAAa,EAQ1CzV,mBAAmBtxD,UAAU+iE,WAAY,EAOzCzR,mBAAmBtxD,UAAUgnE,QAAU,GAOvC1V,mBAAmBtxD,UAAUinE,QAAU,GAOvC3V,mBAAmBtxD,UAAUknE,WAAa,GAO1C5V,mBAAmBtxD,UAAUmnE,WAAa,GAO1C7V,mBAAmBtxD,UAAUonE,QAAU,GAOvC9V,mBAAmBtxD,UAAUw0C,IAAM,GAYnC8c,mBAAmBtxD,UAAUy+D,gBAAkB,SAASZ,GAEvD,OAAO9M,cAAc/wD,UAAUy+D,gBAAgBz/D,MAAMpL,KAAMqL,YACd,GAA5CrL,KAAKiR,MAAMq+D,eAAerF,GAAQ9nE,QAiBpCu7D,mBAAmBtxD,UAAUwP,QAAU,SAASjF,EAAQmnC,GAEvD99C,KAAK2W,OAASA,EAEd3W,KAAK2pE,gBAAiB,EACtB3pE,KAAKkvE,aAAc,EAGnB1R,oBAAoBpxD,UAAUwP,QAAQxQ,MAAMpL,KAAMqL,WAElD,IAAIob,EAAS,KACTgtD,EAAazzE,KAAK2rE,gBAAgB3rE,KAAK89C,MAK3C,IAAK,IAAImsB,KAJTjqE,KAAK0zE,QAAUD,EAAWrkE,EAAIqkE,EAAWxrE,MAAQ,EACjDjI,KAAK2zE,QAAUF,EAAWpkE,EAAIokE,EAAW5rE,OAAS,EAG/B7H,KAAKoqE,QACxB,CACC,IAAIwJ,EAAe5zE,KAAK2rE,gBAAgB3rE,KAAKoqE,QAAQH,KACrDxjD,EAAoB,MAAVA,EAAkBA,EAASmtD,EAAankE,SAC3C1K,IAAI6uE,GAGZ5zE,KAAK6zE,YAAY,CAAC7zE,KAAKkF,MAAO,GAM9B,IAJA,IAAI4uE,EAAc,EACdC,EAAe,EAGVlvE,EAAI,EAAGA,EAAI7E,KAAK4gD,IAAIz+C,OAAQ0C,IACrC,CACC,IAAImvE,GAAYh0E,KAAK0zE,QAAU1zE,KAAKozE,QAAQvuE,GAAK7E,KAAK4uE,cAAgB5uE,KAAKwzE,QAAQ3uE,GAC/EovE,GAAaj0E,KAAKqzE,QAAQxuE,GAAK7E,KAAK0zE,QAAU1zE,KAAK4uE,cAAgB5uE,KAAKwzE,QAAQ3uE,GAEpFivE,EAAc1qE,KAAKC,IAAKyqE,EAAaE,GACrCD,EAAe3qE,KAAKC,IAAK0qE,EAAcE,GAIxC,IAASpvE,EAAI,EAAGA,EAAI7E,KAAK4gD,IAAIz+C,OAAQ0C,IAMpC,IAJA,IAAIqvE,EAAal0E,KAAK0zE,QAAU1zE,KAAK4uE,aAAekF,EAAc9zE,KAAKwzE,QAAQ3uE,GAC3EsvE,EAAcn0E,KAAK0zE,QAAU1zE,KAAK4uE,aAAemF,EAAe/zE,KAAKwzE,QAAQ3uE,GAC7EuvE,EAAYD,EAAcD,EAErB5U,EAAI,EAAGA,EAAIt/D,KAAK4gD,IAAI/7C,GAAG1C,OAAQm9D,IACxC,CACC,IACIp6D,GADA07C,EAAM5gD,KAAK4gD,IAAI/7C,IACJy6D,GAEX+U,IADAT,EAAe5zE,KAAK2rE,gBAAgBzmE,EAAK8M,OACb5C,EAAIwkE,EAAa3rE,MAAQ,EAAIisE,GAAc,EACvEpuB,EAAS,EAAI18C,KAAK2W,GAAKs0D,EAC3BnvE,EAAK4gD,MAAQA,EAKf,IAASjhD,EAAI7E,KAAK4gD,IAAIz+C,OAAS,EAAG0C,GAAK,EAAGA,IAEzC,KAAI+7C,EAAM5gD,KAAK4gD,IAAI/7C,GAEnB,IAASy6D,EAAI,EAAGA,EAAI1e,EAAIz+C,OAAQm9D,IAChC,CAMC,IALA,IACIrtD,GADA/M,EAAO07C,EAAI0e,IACErtD,MACbrG,EAAU,EACV0oE,EAAa,EAED,MAATriE,GAENqiE,GAAcriE,EAAM6zC,MACpBl6C,IACAqG,EAAQA,EAAMyG,KAGf,GAAI9M,EAAU,EACd,CACC,IAAI2oE,EAAYD,EAAa1oE,EAE7B,GAAI2oE,EAAYrvE,EAAK4gD,OAASwZ,EAAI1e,EAAIz+C,OAAS,EAC/C,CACC,IAAIqyE,EAAY5zB,EAAI0e,EAAE,GAAGxZ,MACzB5gD,EAAK4gD,MAAQ18C,KAAK2G,IAAKwkE,EAAWC,EAAYprE,KAAK2W,GAAG,SAElD,GAAIw0D,EAAYrvE,EAAK4gD,OAASwZ,EAAI,EACvC,CACC,IAAImV,EAAY7zB,EAAI0e,EAAE,GAAGxZ,MACzB5gD,EAAK4gD,MAAQ18C,KAAKC,IAAKkrE,EAAWE,EAAYrrE,KAAK2W,GAAG,OAO1D,IAASlb,EAAI,EAAGA,EAAI7E,KAAK4gD,IAAIz+C,OAAQ0C,IAEpC,IAASy6D,EAAI,EAAGA,EAAIt/D,KAAK4gD,IAAI/7C,GAAG1C,OAAQm9D,IAGnCp6D,GADA07C,EAAM5gD,KAAK4gD,IAAI/7C,IACJy6D,GACXsU,EAAe5zE,KAAK2rE,gBAAgBzmE,EAAK8M,MAC7ChS,KAAK0rE,kBAAkBxmE,EAAK8M,KACtBhS,KAAK0zE,QAAUE,EAAa3rE,MAAQ,EAAIjI,KAAKwzE,QAAQ3uE,GAAKuE,KAAK2X,IAAI7b,EAAK4gD,OACxE9lD,KAAK2zE,QAAUC,EAAa/rE,OAAS,EAAI7H,KAAKwzE,QAAQ3uE,GAAKuE,KAAK6X,IAAI/b,EAAK4gD,SAelF4X,mBAAmBtxD,UAAUynE,YAAc,SAASjzB,EAAK8zB,GAExD,GAAW,MAAP9zB,GAA6B,GAAdA,EAAIz+C,OAAvB,CAMAnC,KAAKozE,QAAQsB,GAAU10E,KAAK0zE,QAC5B1zE,KAAKqzE,QAAQqB,GAAU10E,KAAK0zE,QAC5B1zE,KAAKszE,WAAWoB,GAAU10E,KAAK0zE,QAC/B1zE,KAAKuzE,WAAWmB,GAAU10E,KAAK0zE,QAC/B1zE,KAAK4gD,IAAI8zB,GAAU,GAInB,IAFA,IAAIC,GAAiB,EAEZ9vE,EAAI,EAAGA,EAAI+7C,EAAIz+C,OAAQ0C,IAI/B,IAFA,IAAIoN,EAAkB,MAAV2uC,EAAI/7C,GAAa+7C,EAAI/7C,GAAGoN,MAAQ,KAE5B,MAATA,GACP,CACC,IAAID,EAAOC,EAAMD,KACb4hE,EAAe5zE,KAAK2rE,gBAAgB35D,GAExChS,KAAKozE,QAAQsB,GAAUtrE,KAAK2G,IAAI6jE,EAAaxkE,EAAGpP,KAAKozE,QAAQsB,IAC7D10E,KAAKqzE,QAAQqB,GAAUtrE,KAAKC,IAAIuqE,EAAaxkE,EAAIwkE,EAAa3rE,MAAOjI,KAAKqzE,QAAQqB,IAClF10E,KAAKszE,WAAWoB,GAAUtrE,KAAK2G,IAAI6jE,EAAaxkE,EAAIwkE,EAAa3rE,MAAQ,EAAGjI,KAAKszE,WAAWoB,IAC5F10E,KAAKuzE,WAAWmB,GAAUtrE,KAAKC,IAAIuqE,EAAaxkE,EAAIwkE,EAAa3rE,MAAQ,EAAGjI,KAAKuzE,WAAWmB,IAC5F10E,KAAKwzE,QAAQkB,GAAUd,EAAavkE,EAAIrP,KAAK2rE,gBAAgB3rE,KAAK89C,MAAMzuC,EAErD,MAAf4C,EAAMA,QAET0iE,GAAiB,GAGlB30E,KAAK4gD,IAAI8zB,GAAQ9nE,KAAKqF,GACtBA,EAAQA,EAAMyG,KAIZi8D,GAEH30E,KAAK6zE,YAAY7zE,KAAK4gD,IAAI8zB,GAASA,EAAS,KAI9Cz0E,WAAWy9D,wBAAmD,IAAvBA,mBAAqCA,wBAAqB92D,EAgCjG+2D,oBAAoBvxD,UAAY,IAAI+wD,cACpCQ,oBAAoBvxD,UAAUH,YAAc0xD,oBAQ5CA,oBAAoBvxD,UAAUwoE,gBAAiB,EAQ/CjX,oBAAoBvxD,UAAUyiE,YAAa,EAQ3ClR,oBAAoBvxD,UAAUyoE,kBAAmB,EASjDlX,oBAAoBvxD,UAAU0oE,cAAgB,GAO9CnX,oBAAoBvxD,UAAU2oE,qBAAuB,EAQrDpX,oBAAoBvxD,UAAU4oE,iBAAmB,EAQjDrX,oBAAoBvxD,UAAU6oE,iBAAmB,IAOjDtX,oBAAoBvxD,UAAU8oE,wBAA0B,EAOxDvX,oBAAoBvxD,UAAU+oE,YAAc,IAO5CxX,oBAAoBvxD,UAAUgpE,YAAc,EAO5CzX,oBAAoBvxD,UAAUipE,cAAgB,EAO9C1X,oBAAoBvxD,UAAUkpE,UAAY,EAO1C3X,oBAAoBvxD,UAAUmpE,YAO9B5X,oBAAoBvxD,UAAUopE,MAO9B7X,oBAAoBvxD,UAAUqpE,MAO9B9X,oBAAoBvxD,UAAUspE,aAO9B/X,oBAAoBvxD,UAAUyxD,OAO9BF,oBAAoBvxD,UAAUupE,cAO9BhY,oBAAoBvxD,UAAUwpE,WAO9BjY,oBAAoBvxD,UAAUypE,WAO9BlY,oBAAoBvxD,UAAU0pE,QAQ9BnY,oBAAoBvxD,UAAU2pE,cAAe,EAY7CpY,oBAAoBvxD,UAAUy+D,gBAAkB,SAASZ,GAExD,OAAO9M,cAAc/wD,UAAUy+D,gBAAgBz/D,MAAMpL,KAAMqL,YACd,GAA5CrL,KAAKiR,MAAMq+D,eAAerF,GAAQ9nE,QASpCw7D,oBAAoBvxD,UAAUwP,QAAU,SAASjF,GAEhD,IAAIzE,EAAQlS,KAAKiR,MAAM8c,WACvB/tB,KAAKu1E,YAAc,GAGnB,IAFA,IAAIprD,EAAQnqB,KAAKiR,MAAMkuD,iBAAiBxoD,GAE/B9R,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAE5B7E,KAAK6qE,gBAAgB1gD,EAAMtlB,KAE/B7E,KAAKu1E,YAAY3oE,KAAKud,EAAMtlB,IAI9B,IAAImxE,EAAiBh2E,KAAmB,eACtCA,KAAKiR,MAAMglE,2BAA2Bj2E,KAAKu1E,aAC1C,KACCvyD,EAAIhjB,KAAKu1E,YAAYpzE,OAsBzB,IApBAnC,KAAK81E,QAAU,GACf91E,KAAKw1E,MAAQ,GACbx1E,KAAKy1E,MAAQ,GACbz1E,KAAK01E,aAAe,GACpB11E,KAAK41E,WAAa,GAClB51E,KAAK61E,WAAa,GAClB71E,KAAK69D,OAAS,GACd79D,KAAK21E,cAAgB,GAEjB31E,KAAK80E,cAAgB,OAExB90E,KAAK80E,cAAgB,MAGtB90E,KAAK+0E,qBAAuB/0E,KAAK80E,cAAgB90E,KAAK80E,cAM7CjwE,EAAI,EAAGA,EAAI7E,KAAKu1E,YAAYpzE,OAAQ0C,IAC7C,CACC,IAAIolE,EAASjqE,KAAKu1E,YAAY1wE,GAC9B7E,KAAK01E,aAAa7wE,GAAK,GAGvB,IAAIV,EAAKuH,iBAAiBG,IAAIo+D,GAC9BjqE,KAAK81E,QAAQ3xE,GAAMU,EACnB,IAIIoD,GAJAwe,EAASzmB,KAAK2rE,gBAAgB1B,IAIfhiE,MACfJ,EAAS4e,EAAO5e,OAGhBuH,EAAIqX,EAAOrX,EACXC,EAAIoX,EAAOpX,EAEfrP,KAAK01E,aAAa7wE,GAAG,GAAKuK,EAAInH,EAAQ,EACtCjI,KAAK01E,aAAa7wE,GAAG,GAAKwK,EAAIxH,EAAS,EACvC7H,KAAK69D,OAAOh5D,GAAKuE,KAAK2G,IAAI9H,EAAOJ,GACjC7H,KAAK21E,cAAc9wE,GAAK7E,KAAK69D,OAAOh5D,GAAK7E,KAAK69D,OAAOh5D,GAKtDqN,EAAMuZ,cACN,IAEC,IAAS5mB,EAAI,EAAGA,EAAIme,EAAGne,IACvB,CACC7E,KAAKw1E,MAAM3wE,GAAK,EAChB7E,KAAKy1E,MAAM5wE,GAAK,EAChB7E,KAAK41E,WAAW/wE,GAAK7E,KAAK2qE,gBAAgB3qE,KAAKu1E,YAAY1wE,IAK3D,IAAIyO,EAAQtT,KAAKiR,MAAMq+D,eAAetvE,KAAKu1E,YAAY1wE,GAAI8R,GACvDwT,EAAQnqB,KAAKiR,MAAMilE,aAAa5iE,EAAOtT,KAAKu1E,YAAY1wE,IAC5D7E,KAAK61E,WAAWhxE,GAAK,GAErB,IAAK,IAAIy6D,EAAI,EAAGA,EAAIn1C,EAAMhoB,OAAQm9D,IAClC,CAEKt/D,KAAK6uE,YAER7uE,KAAKiR,MAAMklE,UAAU7iE,EAAMgsD,IAGrBt/D,KAAK60E,kBAER70E,KAAKgrE,oBAAoB13D,EAAMgsD,IAAI,GAInCn7D,EAAKuH,iBAAiBG,IAAIse,EAAMm1C,IAApC,IACI7wD,EAAQzO,KAAK81E,QAAQ3xE,GAMxBnE,KAAK61E,WAAWhxE,GAAGy6D,GAFP,MAAT7wD,EAEqBA,EASA5J,GAa3B,IATA7E,KAAKo1E,YAAcp1E,KAAKm1E,YAGE,GAAtBn1E,KAAKq1E,gBAERr1E,KAAKq1E,cAAgB,GAAKjsE,KAAKqY,KAAKuB,IAIhChjB,KAAKs1E,UAAY,EAAGt1E,KAAKs1E,UAAYt1E,KAAKq1E,cAAer1E,KAAKs1E,YACnE,CACC,IAAKt1E,KAAK+1E,aAET,OAID/1E,KAAKo2E,gBAGLp2E,KAAKq2E,iBAELr2E,KAAKs2E,gBACLt2E,KAAKu2E,oBAGN,IAAIC,EAAO,KACPC,EAAO,KAEX,IAAS5xE,EAAI,EAAGA,EAAI7E,KAAKu1E,YAAYpzE,OAAQ0C,IAC7C,CACC,IAIK4hB,EAJDwjD,EAASjqE,KAAKu1E,YAAY1wE,GAE1B7E,KAAK2qE,gBAAgBV,IAIV,OAFVxjD,EAASzmB,KAAK2rE,gBAAgB1B,MAIjCjqE,KAAK01E,aAAa7wE,GAAG,IAAM4hB,EAAOxe,MAAQ,EAC1CjI,KAAK01E,aAAa7wE,GAAG,IAAM4hB,EAAO5e,OAAS,EAEvCuH,EAAIpP,KAAKiR,MAAMmnC,KAAKhvC,KAAK2c,MAAM/lB,KAAK01E,aAAa7wE,GAAG,KACpDwK,EAAIrP,KAAKiR,MAAMmnC,KAAKhvC,KAAK2c,MAAM/lB,KAAK01E,aAAa7wE,GAAG,KAExD7E,KAAK0rE,kBAAkBzB,EAAQ76D,EAAGC,GAIjCmnE,EAFW,MAARA,EAEIpnE,EAIAhG,KAAK2G,IAAIymE,EAAMpnE,GAKtBqnE,EAFW,MAARA,EAEIpnE,EAIAjG,KAAK2G,IAAI0mE,EAAMpnE,IAS1B,IAAIkD,EAAoB,GAAbikE,GAAQ,GACf/jE,EAAoB,GAAbgkE,GAAQ,GAEE,MAAjBT,IAEHzjE,GAAMyjE,EAAc5mE,EACpBqD,GAAMujE,EAAc3mE,GAGrBrP,KAAKiR,MAAMylE,UAAU12E,KAAKu1E,YAAahjE,EAAIE,GAE5C,QAECP,EAAM0Z,cAWR+xC,oBAAoBvxD,UAAUkqE,cAAgB,WAE7C,IAAK,IAAI7nE,EAAQ,EAAGA,EAAQzO,KAAKu1E,YAAYpzE,OAAQsM,IAEpD,GAAIzO,KAAK41E,WAAWnnE,GACpB,CAGC,IAAIkoE,EAAcvtE,KAAKqY,KAAKzhB,KAAKw1E,MAAM/mE,GAASzO,KAAKw1E,MAAM/mE,GAC1DzO,KAAKy1E,MAAMhnE,GAASzO,KAAKy1E,MAAMhnE,IAE5BkoE,EAAc,OAEjBA,EAAc,MAKf,IAAIC,EAAW52E,KAAKw1E,MAAM/mE,GAASkoE,EAChCvtE,KAAK2G,IAAI4mE,EAAa32E,KAAKo1E,aAE1ByB,EAAW72E,KAAKy1E,MAAMhnE,GAASkoE,EAChCvtE,KAAK2G,IAAI4mE,EAAa32E,KAAKo1E,aAG9Bp1E,KAAKw1E,MAAM/mE,GAAS,EACpBzO,KAAKy1E,MAAMhnE,GAAS,EAGpBzO,KAAK01E,aAAajnE,GAAO,IAAMmoE,EAC/B52E,KAAK01E,aAAajnE,GAAO,IAAMooE,IAWlClZ,oBAAoBvxD,UAAUiqE,eAAiB,WAI9C,IAAK,IAAIxxE,EAAI,EAAGA,EAAI7E,KAAKu1E,YAAYpzE,OAAQ0C,IAE5C,IAAK,IAAIiyE,EAAI,EAAGA,EAAI92E,KAAK61E,WAAWhxE,GAAG1C,OAAQ20E,IAC/C,CAEC,IAAIxX,EAAIt/D,KAAK61E,WAAWhxE,GAAGiyE,GAG3B,GAAIjyE,GAAKy6D,GACRt/D,KAAK41E,WAAW/wE,IAChB7E,KAAK41E,WAAWtW,GACjB,CACC,IAAIyX,EAAS/2E,KAAK01E,aAAa7wE,GAAG,GAAK7E,KAAK01E,aAAapW,GAAG,GACxD0X,EAASh3E,KAAK01E,aAAa7wE,GAAG,GAAK7E,KAAK01E,aAAapW,GAAG,GAGxD2X,EAAqBF,EAASA,EAASC,EACvCA,EAASh3E,KAAK21E,cAAc9wE,GAAK7E,KAAK21E,cAAcrW,GAEpD2X,EAAqBj3E,KAAKk1E,0BAE7B+B,EAAqBj3E,KAAKk1E,yBAG3B,IAAIyB,EAAcvtE,KAAKqY,KAAKw1D,GACxBp2B,EAAQ,EAAuB7gD,KAAK80E,cAEpCoC,EAAiBH,EAASJ,EAAe91B,EACzCs2B,EAAiBH,EAASL,EAAe91B,EAE7C7gD,KAAKw1E,MAAM3wE,IAAMqyE,EACjBl3E,KAAKy1E,MAAM5wE,IAAMsyE,EAEjBn3E,KAAKw1E,MAAMlW,IAAM4X,EACjBl3E,KAAKy1E,MAAMnW,IAAM6X,KAWrBxZ,oBAAoBvxD,UAAUgqE,cAAgB,WAI7C,IAFA,IAAIgB,EAAcp3E,KAAKu1E,YAAYpzE,OAE1B0C,EAAI,EAAGA,EAAIuyE,EAAavyE,IAEhC,IAAK,IAAIy6D,EAAIz6D,EAAGy6D,EAAI8X,EAAa9X,IACjC,CAEC,IAAKt/D,KAAK+1E,aAET,OAGD,GAAIzW,GAAKz6D,GACR7E,KAAK41E,WAAW/wE,IAChB7E,KAAK41E,WAAWtW,GACjB,CACC,IAAIyX,EAAS/2E,KAAK01E,aAAa7wE,GAAG,GAAK7E,KAAK01E,aAAapW,GAAG,GACxD0X,EAASh3E,KAAK01E,aAAa7wE,GAAG,GAAK7E,KAAK01E,aAAapW,GAAG,GAE9C,GAAVyX,IAEHA,EAAS,IAAO3tE,KAAKiuE,UAGR,GAAVL,IAEHA,EAAS,IAAO5tE,KAAKiuE,UAItB,IAAIV,EAAcvtE,KAAKqY,KAAMs1D,EAASA,EACjCC,EAASA,GACVM,EAAwBX,EAAc32E,KAAK69D,OAAOh5D,GAClD7E,KAAK69D,OAAOyB,GAEhB,GAAIgY,EAAwBt3E,KAAKi1E,iBAGhC,SAGGqC,EAAwBt3E,KAAKg1E,mBAEhCsC,EAAwBt3E,KAAKg1E,kBAG9B,IAAIn0B,EAAQ7gD,KAAK+0E,qBAAuBuC,EAEpCJ,EAAiBH,EAASJ,EAAe91B,EACzCs2B,EAAiBH,EAASL,EAAe91B,EAE7C7gD,KAAKw1E,MAAM3wE,IAAMqyE,EACjBl3E,KAAKy1E,MAAM5wE,IAAMsyE,EAEjBn3E,KAAKw1E,MAAMlW,IAAM4X,EACjBl3E,KAAKy1E,MAAMnW,IAAM6X,KAYrBxZ,oBAAoBvxD,UAAUmqE,kBAAoB,WAEjDv2E,KAAKo1E,YAAcp1E,KAAKm1E,aAAe,EAAMn1E,KAAKs1E,UAAYt1E,KAAKq1E,gBAGpEp1E,WAAW09D,yBAAqD,IAAxBA,oBAAsCA,yBAAsB/2D,EAsCpGg3D,eAAexxD,UAAY,IAAI+wD,cAC/BS,eAAexxD,UAAUH,YAAc2xD,eAOvCA,eAAexxD,UAAUyxD,OAAS,KAQlCD,eAAexxD,UAAUmrE,YAAa,EAQtC3Z,eAAexxD,UAAU+T,GAAK,EAQ9By9C,eAAexxD,UAAUgU,GAAK,EAQ9Bw9C,eAAexxD,UAAUyiE,YAAa,EAQtCjR,eAAexxD,UAAUyoE,kBAAmB,EAO5CjX,eAAexxD,UAAUwP,QAAU,SAASjF,GAE3C,IAAIzE,EAAQlS,KAAKiR,MAAM8c,WAKvB7b,EAAMuZ,cACN,IAUC,IANA,IAAIpiB,EAAM,EACN4T,EAAM,KACNR,EAAO,KACPkiD,EAAW,GACXzrD,EAAahB,EAAMiB,cAAcwD,GAE5B9R,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAImN,EAAOE,EAAMkB,WAAWuD,EAAQ9R,GAEpC,GAAK7E,KAAK6qE,gBAAgB74D,GAyBhBhS,KAAK+qE,cAAc/4D,KAGxBhS,KAAK6uE,YAER7uE,KAAKiR,MAAMklE,UAAUnkE,GAGfhS,KAAK60E,kBAEP70E,KAAKgrE,oBAAoBh5D,GAAM,QAlCrC,CACC2sD,EAAS/xD,KAAKoF,GACd,IAAIyU,EAASzmB,KAAK2rE,gBAAgB35D,GAIjCiL,EAFU,MAAPA,EAEGwJ,EAAOpX,EAIPjG,KAAK2G,IAAIkN,EAAKwJ,EAAOpX,GAK3BoN,EAFW,MAARA,EAEIgK,EAAOrX,EAIPhG,KAAK2G,IAAI0M,EAAMgK,EAAOrX,GAG9B/F,EAAMD,KAAKC,IAAIA,EAAKD,KAAKC,IAAIod,EAAOxe,MAAOwe,EAAO5e,UAiBpD,IAAIkgB,EAAI/nB,KAAKw3E,UAAU7Y,EAASx8D,OAAQkH,GAGpCrJ,KAAKu3E,aAER96D,EAAOzc,KAAKmgB,GACZlD,EAAMjd,KAAKogB,IAGZpgB,KAAKy3E,OAAO9Y,EAAU52C,EAAGtL,EAAMQ,GAEhC,QAEC/K,EAAM0Z,cAURgyC,eAAexxD,UAAUorE,UAAY,SAASt8D,EAAO7R,GAEpD,OAAOD,KAAKC,IAAI6R,EAAQ7R,EAAMD,KAAK2W,GAAI/f,KAAK69D,SAU7CD,eAAexxD,UAAUqrE,OAAS,SAAS9Y,EAAU52C,EAAGtL,EAAMQ,GAK7D,IAHA,IAAIm6D,EAAczY,EAASx8D,OACvBu1E,EAAM,EAAItuE,KAAK2W,GAAKq3D,EAEfvyE,EAAI,EAAGA,EAAIuyE,EAAavyE,IAE5B7E,KAAK2qE,gBAAgBhM,EAAS95D,KAEjC7E,KAAK0rE,kBAAkB/M,EAAS95D,GAC/BuE,KAAK2c,MAAMtJ,EAAOsL,EAAIA,EAAI3e,KAAK6X,IAAIpc,EAAI6yE,IACvCtuE,KAAK2c,MAAM9I,EAAM8K,EAAIA,EAAI3e,KAAK2X,IAAIlc,EAAI6yE,MAK1Cz3E,WAAW29D,oBAA2C,IAAnBA,eAAiCA,oBAAiBh3D,EAyDrFk3D,qBAAqB1xD,UAAY,IAAI+wD,cACrCW,qBAAqB1xD,UAAUH,YAAc6xD,qBAO7CA,qBAAqB1xD,UAAU4rD,QAAU,GAOzC8F,qBAAqB1xD,UAAUwP,QAAU,SAASjF,GAEjD,IAAI0T,EAASrqB,KAAK23E,cAAchhE,GAEhC3W,KAAKiR,MAAMiB,MAAMuZ,cACjB,IAEC,IAAK,IAAI5mB,KAAKwlB,EACd,CACC,IAAIutD,EAAYvtD,EAAOxlB,GAEnB+yE,EAAUz1E,OAAS,GAEtBnC,KAAK0+D,OAAOkZ,IAIf,QAEC53E,KAAKiR,MAAMiB,MAAM0Z,cASnBkyC,qBAAqB1xD,UAAUurE,cAAgB,SAAShhE,GAMvD,IAJA,IAAIzE,EAAQlS,KAAKiR,MAAM8c,WACnB1D,EAAS,GACTnX,EAAahB,EAAMiB,cAAcwD,GAE5B9R,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQC,EAAMkB,WAAWuD,EAAQ9R,GAErC,IAAK7E,KAAK+qE,cAAc94D,GACxB,CACC,IAAI9N,EAAKnE,KAAK63E,UAAU5lE,GAEd,MAAN9N,IAEe,MAAdkmB,EAAOlmB,KAEVkmB,EAAOlmB,GAAM,IAGdkmB,EAAOlmB,GAAIyI,KAAKqF,KAKnB,OAAOoY,GAURyzC,qBAAqB1xD,UAAUyrE,UAAY,SAASh0D,GAEnD,IAAI0D,EAAOvnB,KAAKiR,MAAMa,UAGlB7M,EAAMsiB,EAAKo4C,mBAAmB97C,GAAM,GACpCi0D,EAAMvwD,EAAKo4C,mBAAmB97C,GAAM,GAExC,OAAW,MAAP5e,GAAsB,MAAP6yE,GAElB7yE,EAAMyG,iBAAiBG,IAAI5G,KAC3B6yE,EAAMpsE,iBAAiBG,IAAIisE,IAENA,EAAM,IAAM7yE,EAAMA,EAAM,IAAM6yE,EAG7C,MAQRha,qBAAqB1xD,UAAUsyD,OAAS,SAASkZ,GAEhD,IAAI/zD,EAAO+zD,EAAU,GACjBrwD,EAAOvnB,KAAKiR,MAAMa,UAClBI,EAAQlS,KAAKiR,MAAM8c,WACnB9oB,EAAMiN,EAAMk5D,YAAY7jD,EAAKo4C,mBAAmB97C,GAAM,IACtDi0D,EAAM5lE,EAAMk5D,YAAY7jD,EAAKo4C,mBAAmB97C,GAAM,IAG1D,GAAI5e,GAAO6yE,EAKV,IAHA,IAAI33D,EAAKlb,EAAImK,EAAInK,EAAIgD,MAAQjI,KAAKg4D,QAC9B53C,EAAKnb,EAAIoK,EAAIpK,EAAI4C,OAAS,EAErBhD,EAAI,EAAGA,EAAI+yE,EAAUz1E,OAAQ0C,IAErC7E,KAAK+3E,MAAMH,EAAU/yE,GAAIsb,EAAIC,GAC7BD,GAAMngB,KAAKg4D,aAGR,GAAW,MAAP/yD,GAAsB,MAAP6yE,EACxB,CAEC,IAAIE,EAAM/yE,EAAImK,EAAInK,EAAIgD,MAAQ,EAC1BgwE,EAAMhzE,EAAIoK,EAAIpK,EAAI4C,OAAS,EAK3B0K,EAHMulE,EAAI1oE,EAAI0oE,EAAI7vE,MAAQ,EAGf+vE,EACXvlE,EAHMqlE,EAAIzoE,EAAIyoE,EAAIjwE,OAAS,EAGhBowE,EAEXC,EAAM9uE,KAAKqY,KAAKlP,EAAKA,EAAKE,EAAKA,GAEnC,GAAIylE,EAAM,EACV,CACK/3D,EAAK63D,EAAMzlE,EAAK,EAChB6N,EAAK63D,EAAMxlE,EAAK,EADpB,IAGIovD,EAAKpvD,EAAKzS,KAAKg4D,QAAUkgB,EACzBpW,EAAKvvD,EAAKvS,KAAKg4D,QAAUkgB,EAK7B,IAHA/3D,GAAM0hD,GAAM+V,EAAUz1E,OAAS,GAAK,EACpCie,GAAM0hD,GAAM8V,EAAUz1E,OAAS,GAAK,EAE3B0C,EAAI,EAAGA,EAAI+yE,EAAUz1E,OAAQ0C,IAErC7E,KAAK+3E,MAAMH,EAAU/yE,GAAIsb,EAAIC,GAC7BD,GAAM0hD,EACNzhD,GAAM0hD,KAWVhE,qBAAqB1xD,UAAU2rE,MAAQ,SAASl0D,EAAMzU,EAAGC,GAEpDrP,KAAKiR,MAAM25D,cAAc/mD,IAE5B7jB,KAAKqrE,cAAcxnD,EAAM,CAAC,IAAI1U,QAAQC,EAAGC,MAI3CpP,WAAW69D,0BAAuD,IAAzBA,qBAAuCA,0BAAuBl3D,EA4CvGm3D,kBAAkB3xD,UAAY,IAAI+wD,cAClCY,kBAAkB3xD,UAAUH,YAAc8xD,kBAO1CA,kBAAkB3xD,UAAU4xD,QAAU,KAQtCD,kBAAkB3xD,UAAU6xD,OAAS,KAQrCF,kBAAkB3xD,UAAUw9D,SAAW,SAAS53D,EAAM5C,EAAGC,GAErC,MAAfrP,KAAKi+D,OAERj+D,KAAKi+D,OAAO2L,SAASx+D,MAAMpL,KAAKi+D,OAAQ5yD,WAIxCrL,KAAKg+D,QAAQ,GAAG4L,SAASx+D,MAAMpL,KAAKg+D,QAAQ,GAAI3yD,YAUlD0yD,kBAAkB3xD,UAAUwP,QAAU,SAASjF,GAE9C,IAAIzE,EAAQlS,KAAKiR,MAAM8c,WAEvB7b,EAAMuZ,cACN,IAEC,IAAK,IAAI5mB,EAAI,EAAGA,EAAI7E,KAAKg+D,QAAQ77D,OAAQ0C,IAExC7E,KAAKg+D,QAAQn5D,GAAG+W,QAAQxQ,MAAMpL,KAAKg+D,QAAQn5D,GAAIwG,WAGjD,QAEC6G,EAAM0Z,cAIR3rB,WAAW89D,uBAAiD,IAAtBA,kBAAoCA,uBAAoBn3D,EAqC9Fs3D,kBAAkB9xD,UAAY,IAAI+wD,cAClCe,kBAAkB9xD,UAAUH,YAAciyD,kBAO1CA,kBAAkB9xD,UAAUwP,QAAU,SAASjF,GAU9C,IARA,IAAI4Q,EAAOvnB,KAAKiR,MAAMsW,KAClBrV,EAAQlS,KAAKiR,MAAM8c,WAGnBza,EAAQ,GACRqrD,EAAW,GACXzrD,EAAahB,EAAMiB,cAAcwD,GAE5B9R,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAImN,EAAOE,EAAMkB,WAAWuD,EAAQ9R,GAChCgN,EAAQ0V,EAAKxV,SAASC,GAEb,MAATH,IAEE7R,KAAK6qE,gBAAgB74D,GAIhBhS,KAAK+qE,cAAc/4D,IAE5BsB,EAAM1G,KAAKiF,GAJX8sD,EAAS/xD,KAAKiF,IASjB7R,KAAKm4E,YAAYxZ,EAAUrrD,IAQ5B4qD,kBAAkB9xD,UAAU+rE,YAAc,SAASj2E,EAAGkM,GAErD,IAAI8D,EAAQlS,KAAKiR,MAAM8c,WAKvB7b,EAAMuZ,cACN,IAEC,IAAK,IAAI5mB,EAAI,EAAGA,EAAIuJ,EAAEjM,OAAQ0C,IAC9B,CACC,IAAIgf,EAAOzV,EAAEvJ,GAEb,GAAY,MAARgf,GAA6B,MAAbA,EAAKxV,MACC,MAAzBwV,EAAKxV,KAAKglD,YAEV,IAAK,IAAIiM,EAAI,EAAGA,EAAIp9D,EAAEC,OAAQm9D,IAC9B,CACC,IAAI2K,EAAS/nE,EAAEo9D,GAED,MAAV2K,GAEHjqE,KAAKo4E,MAAMv0D,EAAMomD,KAMtB,QAEC/3D,EAAM0Z,cASRsyC,kBAAkB9xD,UAAUgsE,MAAQ,SAASv0D,EAAMomD,GAElD,IAAI/3D,EAAQlS,KAAKiR,MAAM8c,WACnBsqD,EAAUx0D,EAAKxV,KAAKglD,YAExB,GAAI/qD,QAAQqe,WAAW0xD,EAASpO,GAChC,CACC,IAAI3F,GAAO+T,EAAQhpE,EAAIgpE,EAAQxwE,OAASoiE,EAAO56D,EAC3CipE,GAAOD,EAAQhpE,EAAI46D,EAAO56D,EAAI46D,EAAOpiE,OAErC4K,EAAMrJ,KAAKsX,IAAI4jD,GAAOl7D,KAAKsX,IAAI43D,GAAQhU,EAAMgU,EAE7CjU,GAAOgU,EAAQjpE,EAAIipE,EAAQpwE,MAAQgiE,EAAO76D,EAC1CmpE,GAAOF,EAAQjpE,EAAI66D,EAAO76D,EAAI66D,EAAOhiE,MAErCsK,EAAMnJ,KAAKsX,IAAI2jD,GAAOj7D,KAAKsX,IAAI63D,GAAQlU,EAAMkU,EAE7CnvE,KAAKsX,IAAInO,GAAMnJ,KAAKsX,IAAIjO,GAE3BA,EAAK,EAILF,EAAK,EAGN,IAAIk6C,EAAIv6C,EAAMk5D,YAAYvnD,EAAK7R,MAEtB,MAALy6C,IAIa,OAFhBA,EAAIA,EAAEh9C,SAEAmN,QAEL6vC,EAAE7vC,OAAOxN,GAAKmD,EACdk6C,EAAE7vC,OAAOvN,GAAKoD,GAIdg6C,EAAE7vC,OAAS,IAAIzN,QAAQoD,EAAIE,GAG5BP,EAAMu5D,YAAY5nD,EAAK7R,KAAMy6C,MAKhCxsD,WAAWi+D,uBAAiD,IAAtBA,kBAAoCA,uBAAoBt3D,EA2B9Fu3D,6BAA6B/xD,UAAU6yD,SAAW,EAOlDd,6BAA6B/xD,UAAUosE,SAAW,EAOlDra,6BAA6B/xD,UAAUgD,EAAI,KAO3C+uD,6BAA6B/xD,UAAUiD,EAAI,KAO3C8uD,6BAA6B/xD,UAAUnE,MAAQ,EAO/Ck2D,6BAA6B/xD,UAAUvE,OAAS,EAOhDs2D,6BAA6B/xD,UAAUqsE,wBAA0B,KAOjEta,6BAA6B/xD,UAAUssE,4BAA8B,KAYrEva,6BAA6B/xD,UAAUyiB,KAAO,KAO9CsvC,6BAA6B/xD,UAAUusE,2BAA6B,SAASC,GAE5E,OAAO,MAQRza,6BAA6B/xD,UAAUysE,+BAAiC,SAASD,GAEhF,OAAO,MAQRza,6BAA6B/xD,UAAU+F,OAAS,WAE/C,OAAO,GAQRgsD,6BAA6B/xD,UAAUy1C,SAAW,WAEjD,OAAO,GAQRsc,6BAA6B/xD,UAAU0sE,0BAA4B,SAASF,GAE3E,OAAO,MAQRza,6BAA6B/xD,UAAU2sE,0BAA4B,SAASH,EAAO7wE,GAElF,OAAO,MAQRo2D,6BAA6B/xD,UAAU4sE,KAAO,SAASJ,EAAO7wE,GAEzD/H,KAAK6hD,WAER7hD,KAAKoP,EAAE,GAAKrH,EAEJ/H,KAAKmS,WAEbnS,KAAKoP,EAAEwpE,EAAQ54E,KAAKw4E,QAAU,GAAKzwE,IASrCo2D,6BAA6B/xD,UAAUs2B,KAAO,SAASk2C,GAEtD,OAAI54E,KAAK6hD,WAED7hD,KAAKoP,EAAE,GAENpP,KAAKmS,SAENnS,KAAKoP,EAAEwpE,EAAQ54E,KAAKw4E,QAAU,GAG/B,GAQRra,6BAA6B/xD,UAAU6sE,KAAO,SAASL,EAAO7wE,GAEzD/H,KAAK6hD,WAER7hD,KAAKqP,EAAE,GAAKtH,EAEJ/H,KAAKmS,WAEbnS,KAAKqP,EAAEupE,EAAO54E,KAAMw4E,QAAU,GAAKzwE,IAIrC9H,WAAWk+D,kCAAuE,IAAjCA,6BAA+CA,kCAA+Bv3D,EA+B/Hw3D,qBAAqBhyD,UAAY,IAAI+xD,6BACrCC,qBAAqBhyD,UAAUH,YAAcmyD,qBAO7CA,qBAAqBhyD,UAAU4F,KAAO,KAOtCosD,qBAAqBhyD,UAAUjI,GAAK,KAOpCi6D,qBAAqBhyD,UAAUiyD,iBAAmB,KAOlDD,qBAAqBhyD,UAAUkyD,iBAAmB,KAQlDF,qBAAqBhyD,UAAU8sE,UAAW,EAO1C9a,qBAAqBhyD,UAAU+sE,aAAe,SAASP,GAEtD,OAAO54E,KAAKi/D,SAQbb,qBAAqBhyD,UAAUusE,2BAA6B,SAASC,GAEpE,GAAoC,MAAhC54E,KAAKy4E,wBACT,CACCz4E,KAAKy4E,wBAA0B,GAC/Bz4E,KAAKy4E,wBAAwB,GAAK,GAElC,IAAK,IAAI5zE,EAAI,EAAGA,EAAI7E,KAAKq+D,iBAAiBl8D,OAAQ0C,IAClD,CACC,IAAIgf,EAAO7jB,KAAKq+D,iBAAiBx5D,IAEZ,GAAjBgf,EAAKo7C,SAAiBp7C,EAAKo7C,SAAW2Z,EAAQ,EAIjD54E,KAAKy4E,wBAAwB,GAAG7rE,KAAKiX,EAAKC,QAK1C9jB,KAAKy4E,wBAAwB,GAAG7rE,KAAKiX,IAKxC,OAAO7jB,KAAKy4E,wBAAwB,IAQrCra,qBAAqBhyD,UAAUysE,+BAAiC,SAASD,GAExE,GAAwC,MAApC54E,KAAK04E,4BACT,CACC14E,KAAK04E,4BAA8B,GACnC14E,KAAK04E,4BAA4B,GAAK,GAEtC,IAAK,IAAI7zE,EAAI,EAAGA,EAAI7E,KAAKs+D,iBAAiBn8D,OAAQ0C,IAClD,CACC,IAAIgf,EAAO7jB,KAAKs+D,iBAAiBz5D,IAEZ,GAAjBgf,EAAK20D,SAAiB30D,EAAK20D,SAAWI,EAAQ,EAGjD54E,KAAK04E,4BAA4B,GAAG9rE,KAAKiX,EAAKpF,QAK9Cze,KAAK04E,4BAA4B,GAAG9rE,KAAKiX,IAK5C,OAAO7jB,KAAK04E,4BAA4B,IAQzCta,qBAAqBhyD,UAAUy1C,SAAW,WAEzC,OAAO,GAQRuc,qBAAqBhyD,UAAU0sE,0BAA4B,SAASF,GAEnE,OAAO54E,KAAK6uB,KAAK,IAQlBuvC,qBAAqBhyD,UAAU2sE,0BAA4B,SAASH,EAAO7wE,GAE1E/H,KAAK6uB,KAAK,GAAK9mB,GAMhBq2D,qBAAqBhyD,UAAUq+D,WAAa,SAAS2O,GAIpD,GAAiB,MAAbA,GAAsC,MAAjBp5E,KAAKk5E,UAA0C,MAAtBE,EAAUF,UACvDl5E,KAAKk5E,SAAS/2E,OAASi3E,EAAUF,SAAS/2E,OAC/C,CACC,GAAInC,KAAKk5E,UAAYE,EAAUF,SAE9B,OAAO,EAGR,GAAqB,MAAjBl5E,KAAKk5E,UAAqC,MAAjBl5E,KAAKk5E,SAEjC,OAAO,EAOR,IAAK,IAAIr0E,EAAI,EAAGA,EAAI7E,KAAKk5E,SAAS/2E,OAAQ0C,IAEzC,GAAI7E,KAAKk5E,SAASr0E,IAAMu0E,EAAUF,SAASr0E,GAE1C,OAAO,EAIT,OAAO,EAGR,OAAO,GAQRu5D,qBAAqBhyD,UAAUitE,YAAc,WAE5C,OAAOr5E,KAAKgS,MAGb/R,WAAWm+D,0BAAuD,IAAzBA,qBAAuCA,0BAAuBx3D,EAkCvG23D,qBAAqBnyD,UAAY,IAAI+xD,6BACrCI,qBAAqBnyD,UAAUH,YAAcsyD,qBAQ7CA,qBAAqBnyD,UAAUkH,MAAQ,KAOvCirD,qBAAqBnyD,UAAUoyD,IAAM,KAOrCD,qBAAqBnyD,UAAU0X,OAAS,KAOxCy6C,qBAAqBnyD,UAAUqS,OAAS,KAQxC8/C,qBAAqBnyD,UAAUktE,YAAa,EAO5C/a,qBAAqBnyD,UAAUqxD,OAAS,SAASmb,GAEhD,IAAI/pD,EAAO7uB,KAAK8jB,OAChB9jB,KAAK8jB,OAAS9jB,KAAKye,OACnBze,KAAKye,OAASoQ,EACd7uB,KAAKs5E,YAAct5E,KAAKs5E,YAQzB/a,qBAAqBnyD,UAAUusE,2BAA6B,SAASC,GAEpE,GAAoC,MAAhC54E,KAAKy4E,wBACT,CACCz4E,KAAKy4E,wBAA0B,GAE/B,IAAK,IAAI5zE,EAAI,EAAGA,EAAI7E,KAAK6uB,KAAK1sB,OAAQ0C,IAErC7E,KAAKy4E,wBAAwB5zE,GAAK,GAE9BA,GAAK7E,KAAK6uB,KAAK1sB,OAAS,EAE3BnC,KAAKy4E,wBAAwB5zE,GAAG+H,KAAK5M,KAAK8jB,QAI1C9jB,KAAKy4E,wBAAwB5zE,GAAG+H,KAAK5M,MAKxC,OAAOA,KAAKy4E,wBAAwBG,EAAQ54E,KAAKw4E,QAAU,IAQ5Dja,qBAAqBnyD,UAAUysE,+BAAiC,SAASD,GAExE,GAAwC,MAApC54E,KAAK04E,4BACT,CACC14E,KAAK04E,4BAA8B,GAEnC,IAAK,IAAI7zE,EAAI,EAAGA,EAAI7E,KAAK6uB,KAAK1sB,OAAQ0C,IAErC7E,KAAK04E,4BAA4B7zE,GAAK,GAE7B,GAALA,EAEH7E,KAAK04E,4BAA4B7zE,GAAG+H,KAAK5M,KAAKye,QAI9Cze,KAAK04E,4BAA4B7zE,GAAG+H,KAAK5M,MAK5C,OAAOA,KAAK04E,4BAA4BE,EAAQ54E,KAAKw4E,QAAU,IAQhEja,qBAAqBnyD,UAAU+F,OAAS,WAEvC,OAAO,GAQRosD,qBAAqBnyD,UAAU0sE,0BAA4B,SAASF,GAEnE,OAAO54E,KAAK6uB,KAAK+pD,EAAQ54E,KAAKw4E,QAAU,IAQzCja,qBAAqBnyD,UAAU2sE,0BAA4B,SAASH,EAAO7wE,GAE1E/H,KAAK6uB,KAAK+pD,EAAQ54E,KAAKw4E,QAAU,GAAKzwE,GAQvCw2D,qBAAqBnyD,UAAUitE,YAAc,WAE5C,OAAkB,MAAdr5E,KAAKsT,OAAiBtT,KAAKsT,MAAMnR,OAAS,EAEtCnC,KAAKsT,MAAM,GAGZ,MAGRrT,WAAWs+D,0BAAuD,IAAzBA,qBAAuCA,0BAAuB33D,EAoHvG63D,sBAAsBryD,UAAU6yD,QAAU,KAO1CR,sBAAsBryD,UAAU2yD,aAAe,KAO/CN,sBAAsBryD,UAAU4yD,WAAa,KAO7CP,sBAAsBryD,UAAUmtE,MAAQ,KAQxC9a,sBAAsBryD,UAAUwyD,MAAQ,KAOxCH,sBAAsBryD,UAAUuK,OAAS,KAOzC8nD,sBAAsBryD,UAAUotE,SAAW,EAO3C/a,sBAAsBryD,UAAUgzD,oBAAsB,IAQtDX,sBAAsBryD,UAAUyyD,iBAAkB,EAelDJ,sBAAsBryD,UAAUizD,oBAAsB,SAASX,EAAQC,EAAUO,GAKhF,IAHA,IAAIjuD,EAAQytD,EAAOI,WAGVj6D,EAAI,EAAGA,EAAI85D,EAASx8D,OAAQ0C,IACrC,CACCq6D,EAAiBr6D,GAAK,IAAIu5D,qBAAqBO,EAAS95D,IACxD7E,KAAK++D,aAAaxyD,IAAIoyD,EAAS95D,GAAIq6D,EAAiBr6D,IAIpD,IAAIy0D,EAAQoF,EAAOnrD,SAASorD,EAAS95D,IACrCq6D,EAAiBr6D,GAAGy5D,iBAAmB,GAKvC,IAAK,IAAIgB,EAAI,EAAGA,EAAIhG,EAAMn3D,OAAQm9D,IAClC,CACC,IAAIttD,EAAO0sD,EAAOiB,mBAAmBrG,EAAMgG,IAAI,GAG/C,GAAIttD,GAAQ2sD,EAAS95D,IAAM65D,EAAOztD,MAAMiB,MAAM2vC,SAAS7vC,KACpD0sD,EAAOmM,gBAAgB74D,GAC1B,CAcC,IAAIynE,EAAkB/a,EAAOoU,gBAAgBnU,EAAS95D,GACpDmN,GAAM,GACJ0nE,EAAgBhb,EAAOoU,gBAAgBnU,EAAS95D,GAClDmN,GAAM,GAER,GAAuB,MAAnBynE,GACFA,EAAgBt3E,OAAS,GACkB,MAA3CnC,KAAKg/D,WAAWnzD,IAAI4tE,EAAgB,KACb,EAAvBC,EAAcv3E,QAAcs3E,EAAgBt3E,OAC9C,CAGC,IAFA,IAAIo9D,EAAe,IAAIhB,qBAAqBkb,GAEnC3C,EAAI,EAAGA,EAAI2C,EAAgBt3E,OAAQ20E,IAC5C,CACC,IAAIjzD,EAAO41D,EAAgB3C,GAC3B92E,KAAKg/D,WAAWzyD,IAAIsX,EAAM07C,GAI1BtuD,EAAMklE,UAAUtyD,GAET66C,EAAOmW,mBAEVnW,EAAOsM,oBAAoBnnD,GAAM,GACjC66C,EAAOuM,kBAAkBpnD,GAAK,IAInC07C,EAAaz7C,OAASo7C,EAAiBr6D,GAEnCyD,QAAQ/H,QAAQ2+D,EAAiBr6D,GAAGy5D,iBAAkBiB,GAAgB,GAEzEL,EAAiBr6D,GAAGy5D,iBAAiB1xD,KAAK2yD,KAO9CL,EAAiBr6D,GAAGgqB,KAAK,GAAK,IAWhC4vC,sBAAsBryD,UAAUutE,YAAc,WAE7C,IAAIC,EAAa,GAEjB,GAAkB,MAAd55E,KAAK4+D,MAER,IAAK,IAAI/5D,EAAI,EAAGA,EAAI7E,KAAK4+D,MAAMz8D,OAAQ0C,IAIlB,OAFhBg1E,EAAe75E,KAAK++D,aAAalzD,IAAI7L,KAAK4+D,MAAM/5D,MAInD+0E,EAAWhtE,KAAKitE,GAKnB,IAAIC,EAAgB95E,KAAK++D,aAAalyD,YAEtC,IAAShI,EAAE,EAAGA,EAAIi1E,EAAc33E,OAAQ0C,IAGvCi1E,EAAcj1E,GAAGgqB,KAAK,IAAM,EAK7B,IAFA,IAAIkrD,EAAiBH,EAAWniB,QAEzBmiB,EAAWz3E,OAAS,GAC3B,CACC,IAEI63E,EAEJC,GAJIJ,EAAeD,EAAW,IAIOvb,iBACrC2b,EAAkBH,EAAavb,iBAI/B,IAAI4b,GAAkB,EAKlBC,EAAen6E,KAAKo/D,oBAExB,IAASv6D,EAAI,EAAGA,EAAIo1E,EAAsB93E,OAAQ0C,IAClD,CAGC,GAA4B,UAFxB06D,EAAe0a,EAAsBp1E,IAExBgqB,KAAK,GAQtB,CACCqrD,GAAkB,EAElB,MAPA,IAAId,EAAY7Z,EAAaz7C,OAC7Bq2D,EAAe/wE,KAAK2G,IAAIoqE,EAAcf,EAAUvqD,KAAK,GAAK,GAY5D,GAAIqrD,EACJ,CAIC,GAHAL,EAAahrD,KAAK,GAAKsrD,EACvBn6E,KAAKi/D,QAAU71D,KAAK2G,IAAI/P,KAAKi/D,QAASkb,GAEf,MAAnBH,EAEH,IAASn1E,EAAI,EAAGA,EAAIm1E,EAAgB73E,OAAQ0C,KAEvC06D,EAAeya,EAAgBn1E,IAGtBgqB,KAAK,GAAK,SAOG,IAHtBuqD,EAAY7Z,EAAa9gD,QAGfoQ,KAAK,KAElB+qD,EAAWhtE,KAAKwsE,GAMhBA,EAAUvqD,KAAK,IAAM,GAKxB+qD,EAAWx+B,YAGZ,CAGC,IAAIg/B,EAAcR,EAAWx+B,QAG7B,GAFAw+B,EAAWhtE,KAAKitE,GAEZO,GAAeP,GAAqC,GAArBD,EAAWz3E,OAM7C,OAOH,IAAS0C,EAAE,EAAGA,EAAIi1E,EAAc33E,OAAQ0C,IAGvCi1E,EAAcj1E,GAAGgqB,KAAK,IAAM7uB,KAAKi/D,QAIlC,IAAUp6D,EAAI,EAAGA,EAAIk1E,EAAe53E,OAAQ0C,IAM3C,IAJA,IAAIg1E,EACAQ,EAAkB,EAClBJ,GAFAJ,EAAeE,EAAel1E,IAEOy5D,iBAE/BgB,EAAI,EAAGA,EAAI2a,EAAsB93E,OAAQm9D,IACnD,CACC,IAAIC,EACA6Z,GADA7Z,EAAe0a,EAAsB3a,IACZ7gD,OAC7Bo7D,EAAahrD,KAAK,GAAKzlB,KAAKC,IAAIgxE,EAC9BjB,EAAUvqD,KAAK,GAAK,GACtBwrD,EAAkBR,EAAahrD,KAAK,GAMtC7uB,KAAKi/D,QAAUj/D,KAAKo/D,oBAAsBp/D,KAAKi/D,SAShDR,sBAAsBryD,UAAUkuE,SAAW,WAE1C,IAAIC,EAAW,GACfv6E,KAAKu5E,MAAQ,GAEb,IAAK,IAAI10E,EAAI,EAAGA,EAAI7E,KAAKi/D,QAAU,EAAGp6D,IAErC01E,EAAS11E,GAAK,GACd7E,KAAKu5E,MAAM10E,GAAK01E,EAAS11E,GAM1B,IAAI21E,EAAa,KAEjB,GAAkB,MAAdx6E,KAAK4+D,MACT,CACC,IAAI6b,EAAgBz6E,KAAK4+D,MAGzB,IAFA4b,EAAa,GAEJ31E,EAAI,EAAGA,EAAI41E,EAAct4E,OAAQ0C,IAC1C,CACC,IAAImN,EAAOyoE,EAAc51E,GACrBg1E,EAAe75E,KAAK++D,aAAalzD,IAAImG,GACzCwoE,EAAW31E,GAAKg1E,GAIlB75E,KAAK8M,OAAM,SAAS6J,EAAQzR,EAAM2e,EAAM+0D,EAAO8B,GAY9C,GAVY,GAARA,GAAax1E,EAAK+5D,QAAU,GAAK/5D,EAAKszE,QAAU,IAEnD+B,EAASr1E,EAAK2pB,KAAK,IAAIjiB,KAAK1H,GAC5BA,EAAK+5D,QAAU/5D,EAAK2pB,KAAK,GACzB3pB,EAAKszE,QAAUtzE,EAAK2pB,KAAK,GAGzB3pB,EAAK2pB,KAAK,GAAK0rD,EAASr1E,EAAK+5D,SAAS98D,OAAS,GAGlC,MAAVwU,GAA0B,MAARkN,GAEYlN,EAAOsoD,QAAU/5D,EAAK+5D,QAEtB,EACjC,CAECp7C,EAAKo7C,QAAUtoD,EAAOsoD,QACtBp7C,EAAK20D,QAAUtzE,EAAK+5D,QACpBp7C,EAAKgL,KAAO,GACZhL,EAAKzU,EAAI,GACTyU,EAAKxU,EAAI,GAET,IAAK,IAAIxK,EAAIgf,EAAK20D,QAAU,EAAG3zE,EAAIgf,EAAKo7C,QAASp6D,IAIhD01E,EAAS11E,GAAG+H,KAAKiX,GACjBA,EAAKk1D,0BAA0Bl0E,EAAG01E,EAAS11E,GACxC1C,OAAS,MAIbq4E,GAAY,EAAO,OAcvB/b,sBAAsBryD,UAAUU,MAAQ,SAASC,EAAS4tE,EAAUC,EAAgBC,GAGnF,GAAgB,MAAZF,EACJ,CACC,IAAK,IAAI91E,EAAI,EAAGA,EAAI81E,EAASx4E,OAAQ0C,IACrC,CACC,IAAIg1E,EAAec,EAAS91E,GAER,MAAhBg1E,IAEc,MAAbgB,IAEHA,EAAY,IAAIrL,QAGboL,GAGHf,EAAaX,SAAW,GACxBW,EAAaX,SAAS,GAAKl5E,KAAKw5E,SAChCK,EAAaX,SAAS,GAAKr0E,EAC3B7E,KAAK86E,YAAY,KAAMjB,EAAc,KAAM9sE,EAAS8tE,EAClDhB,EAAaX,SAAUr0E,EAAG,IAI5B7E,KAAK2vE,IAAI,KAAMkK,EAAc,KAAM9sE,EAAS8tE,EAAW,IAK1D76E,KAAKw5E,aAoBP/a,sBAAsBryD,UAAUujE,IAAM,SAASh5D,EAAQmnC,EAAMi9B,EAAgBhuE,EAAS2tE,EAAM9B,GAE3F,GAAY,MAAR96B,EACJ,CACC,IAAIk9B,EAASl9B,EAAK35C,GAElB,GAAoB,MAAhBu2E,EAAKM,GACT,CACCN,EAAKM,GAAUl9B,EACf/wC,EAAQ4J,EAAQmnC,EAAMi9B,EAAgBnC,EAAO,GAM7C,IAFA,IAAIqC,EAAgBn9B,EAAKwgB,iBAAiB7G,QAEjC5yD,EAAI,EAAGA,EAAGo2E,EAAc94E,OAAQ0C,IACzC,CACC,IAAI06D,EAAe0b,EAAcp2E,GAC7Bq2E,EAAa3b,EAAa9gD,OAG9Bze,KAAK2vE,IAAI7xB,EAAMo9B,EAAY3b,EAAcxyD,EAAS2tE,EAChD9B,EAAQ,SAMX7rE,EAAQ4J,EAAQmnC,EAAMi9B,EAAgBnC,EAAO,KAyBhDna,sBAAsBryD,UAAU0uE,YAAc,SAASnkE,EAAQmnC,EAAMi9B,EAAgBhuE,EAAS2tE,EAAMS,EAAWC,EAAWxC,GAsBzH,GAAY,MAAR96B,EACJ,CACC,GAAc,MAAVnnC,IAOkB,MAAjBmnC,EAAKo7B,UACRp7B,EAAKo7B,SAAS,IAAMviE,EAAOuiE,SAAS,IACrC,CACC,IAAImC,EAAiB1kE,EAAOuiE,SAAS/2E,OAAS,EAC9C27C,EAAKo7B,SAAWviE,EAAOuiE,SAASzhB,QAChC3Z,EAAKo7B,SAASmC,EAAiB,GAAKD,EAItC,IAAIJ,EAASl9B,EAAK35C,GAElB,GAAoB,MAAhBu2E,EAAKM,GACT,CACCN,EAAKM,GAAUl9B,EACf/wC,EAAQ4J,EAAQmnC,EAAMi9B,EAAgBnC,EAAO,GAM7C,IAFA,IAAIqC,EAAgBn9B,EAAKwgB,iBAAiB7G,QAEjC5yD,EAAI,EAAGA,EAAIo2E,EAAc94E,OAAQ0C,IAC1C,CACC,IAAI06D,EAAe0b,EAAcp2E,GAC7Bq2E,EAAa3b,EAAa9gD,OAG9Bze,KAAK86E,YAAYh9B,EAAMo9B,EAAY3b,EAAcxyD,EAAS2tE,EACxD58B,EAAKo7B,SAAUr0E,EAAG+zE,EAAQ,SAM7B7rE,EAAQ4J,EAAQmnC,EAAMi9B,EAAgBnC,EAAO,KAKhD34E,WAAWw+D,2BAAyD,IAA1BA,sBAAwCA,2BAAwB73D,EAoH1Gi5D,gBAAgBzzD,UAAU6yD,QAAU,KAOpCY,gBAAgBzzD,UAAU2yD,aAAe,KAOzCc,gBAAgBzzD,UAAU4yD,WAAa,KAOvCa,gBAAgBzzD,UAAUmtE,MAAQ,KAQlC1Z,gBAAgBzzD,UAAUwyD,MAAQ,KAOlCiB,gBAAgBzzD,UAAUuK,OAAS,KAOnCkpD,gBAAgBzzD,UAAUotE,SAAW,EAOrC3Z,gBAAgBzzD,UAAUgzD,oBAAsB,IAQhDS,gBAAgBzzD,UAAUyyD,iBAAkB,EAO5CgB,gBAAgBzzD,UAAUkvE,cAAgB,KAe1Czb,gBAAgBzzD,UAAUizD,oBAAsB,SAASX,EAAQC,EAAUO,GAM1E,IAJA,IAAIjuD,EAAQytD,EAAOI,WACfyc,EAAY7c,EAAO6c,UAGd12E,EAAI,EAAGA,EAAI85D,EAASx8D,OAAQ0C,IACrC,CACCq6D,EAAiBr6D,GAAK,IAAIu5D,qBAAqBO,EAAS95D,IACxD7E,KAAK++D,aAAaxyD,IAAIoyD,EAAS95D,GAAIq6D,EAAiBr6D,IACpDq6D,EAAiBr6D,GAAG22E,eAAiB,EAErC,IAAK,IAAIC,EAAK,EAAGA,EAAKF,EAAUp5E,OAAQs5E,IAEvC,GAAIxqE,EAAMiB,MAAM+vC,UAAU0c,EAAS95D,KAAO02E,EAAUE,GACpD,CACCvc,EAAiBr6D,GAAG22E,cAAgBC,EACpC,MAMF,IAAIniB,EAAQoF,EAAOnrD,SAASorD,EAAS95D,IACrCq6D,EAAiBr6D,GAAGy5D,iBAAmB,GAKvC,IAAK,IAAIgB,EAAI,EAAGA,EAAIhG,EAAMn3D,OAAQm9D,IAClC,CACC,IAAIttD,EAAO0sD,EAAOiB,mBAAmBrG,EAAMgG,IAAI,GAG/C,GAAIttD,GAAQ2sD,EAAS95D,IAAM65D,EAAOztD,MAAMiB,MAAM2vC,SAAS7vC,KACpD0sD,EAAOmM,gBAAgB74D,GAC1B,CAcC,IAAIynE,EAAkB/a,EAAOoU,gBAAgBnU,EAAS95D,GACpDmN,GAAM,GACJ0nE,EAAgBhb,EAAOoU,gBAAgBnU,EAAS95D,GAClDmN,GAAM,GAER,GAAuB,MAAnBynE,GACFA,EAAgBt3E,OAAS,GACkB,MAA3CnC,KAAKg/D,WAAWnzD,IAAI4tE,EAAgB,KACb,EAAvBC,EAAcv3E,QAAcs3E,EAAgBt3E,OAC9C,CAGC,IAFA,IAAIo9D,EAAe,IAAIhB,qBAAqBkb,GAEnC3C,EAAI,EAAGA,EAAI2C,EAAgBt3E,OAAQ20E,IAC5C,CACC,IAAIjzD,EAAO41D,EAAgB3C,GAC3B92E,KAAKg/D,WAAWzyD,IAAIsX,EAAM07C,GAI1BtuD,EAAMklE,UAAUtyD,GAET66C,EAAOmW,mBAEVnW,EAAOsM,oBAAoBnnD,GAAM,GACjC66C,EAAOuM,kBAAkBpnD,GAAK,IAInC07C,EAAaz7C,OAASo7C,EAAiBr6D,GAEnCyD,QAAQ/H,QAAQ2+D,EAAiBr6D,GAAGy5D,iBAAkBiB,GAAgB,GAEzEL,EAAiBr6D,GAAGy5D,iBAAiB1xD,KAAK2yD,KAO9CL,EAAiBr6D,GAAGgqB,KAAK,GAAK,IAWhCgxC,gBAAgBzzD,UAAUutE,YAAc,WAEvC35E,KAAKs7E,cAAgB,GAErB,IAAI1B,EAAa,GACbc,EAAO,IAAIlL,OAEf,GAAkB,MAAdxvE,KAAK4+D,MAER,IAAK,IAAI/5D,EAAI,EAAGA,EAAI7E,KAAK4+D,MAAMz8D,OAAQ0C,IACvC,CACC,IAAIg1E,EAAe75E,KAAK++D,aAAalzD,IAAI7L,KAAK4+D,MAAM/5D,IACpD7E,KAAK07E,YAAY,KAAM7B,EAAc,KAAMa,EAAM,GAE7B,MAAhBb,GAEHD,EAAWhtE,KAAKitE,GAMnB,IAAI8B,EAAY,GACZC,EAAY,GAEhB,IAAS/2E,EAAI7E,KAAKs7E,cAAcn5E,OAAS,EAAG0C,GAAK,EAAGA,IAE/CA,GAAK7E,KAAKs7E,cAAcn5E,OAAS,EAEpCw5E,EAAU92E,GAAK,EAIf82E,EAAU92E,GAAK+2E,EAAU/2E,EAAE,GAAK,EAGjC+2E,EAAU/2E,GAAK82E,EAAU92E,GAAK7E,KAAKs7E,cAAcz2E,GAGlD7E,KAAKi/D,QAAU2c,EAAU,GAEzB,IAAI9B,EAAgB95E,KAAK++D,aAAalyD,YAEtC,IAAShI,EAAE,EAAGA,EAAIi1E,EAAc33E,OAAQ0C,IAGvCi1E,EAAcj1E,GAAGgqB,KAAK,IAAM,EAK7B,IAFqB+qD,EAAWniB,QAEzBmiB,EAAWz3E,OAAS,GAC3B,CACC,IACI83E,EACAD,EAEJC,GAJIJ,EAAeD,EAAW,IAIOvb,iBACrC2b,EAAkBH,EAAavb,iBAI/B,IAAI4b,GAAkB,EAKlBC,EAAeyB,EAAU,GAE7B,IAAS/2E,EAAI,EAAGA,EAAIo1E,EAAsB93E,OAAQ0C,IAClD,CAGC,GAA4B,UAFxB06D,EAAe0a,EAAsBp1E,IAExBgqB,KAAK,GAQtB,CACCqrD,GAAkB,EAElB,MAPA,IAAId,EAAY7Z,EAAaz7C,OAC7Bq2D,EAAe/wE,KAAK2G,IAAIoqE,EAAcf,EAAUvqD,KAAK,GAAK,GAY5D,GAAIqrD,EACJ,CAQC,GAPIC,EAAeyB,EAAU/B,EAAa2B,iBAEzCrB,EAAeyB,EAAU/B,EAAa2B,gBAGvC3B,EAAahrD,KAAK,GAAKsrD,EAEA,MAAnBH,EAEH,IAASn1E,EAAI,EAAGA,EAAIm1E,EAAgB73E,OAAQ0C,IAC5C,CACC,IAAI06D,KAAeya,EAAgBn1E,IAGtBgqB,KAAK,GAAK,SAOG,IAHtBuqD,EAAY7Z,EAAa9gD,QAGfoQ,KAAK,KAElB+qD,EAAWhtE,KAAKwsE,GAMhBA,EAAUvqD,KAAK,IAAM,GAKxB+qD,EAAWx+B,YAGZ,CAGC,IAAIg/B,EAAcR,EAAWx+B,QAG7B,GAFAw+B,EAAWhtE,KAAKitE,GAEZO,GAAeP,GAAqC,GAArBD,EAAWz3E,OAM7C,SAkDJ09D,gBAAgBzzD,UAAUsvE,YAAc,SAAS/kE,EAAQmnC,EAAMi9B,EAAgBL,EAAMmB,GAEpF,GAAY,MAAR/9B,EACJ,CACC,IAAIk9B,EAASvwD,WAAWC,OAAOozB,EAAK9rC,MAEpC,GAAoB,MAAhB0oE,EAAKM,GACT,CACCN,EAAKM,GAAUl9B,EACf,IAAIg+B,EAAUh+B,EAAK09B,eAEgB,MAA/Bx7E,KAAKs7E,cAAcQ,IAAoB97E,KAAKs7E,cAAcQ,GAAWD,KAExE77E,KAAKs7E,cAAcQ,GAAWD,GAO/B,IAFA,IAAIZ,EAAgBn9B,EAAKwgB,iBAAiB7G,QAEjC5yD,EAAI,EAAGA,EAAIo2E,EAAc94E,OAAQ0C,IAC1C,CACC,IAAI06D,EAAe0b,EAAcp2E,GAC7Bq2E,EAAa3b,EAAa9gD,OAI1Bq/B,EAAK09B,cAAgBN,EAAWM,cAEnCx7E,KAAK07E,YAAY59B,EAAMo9B,EAAY3b,EAAcj3D,QAAQmH,MAAMirE,EAAM,MAAO,GAAO,GAE3E58B,EAAK09B,eAAiBN,EAAWM,eAEzCx7E,KAAK07E,YAAY59B,EAAMo9B,EAAY3b,EAAcj3D,QAAQmH,MAAMirE,EAAM,MAAO,GAAOmB,EAAa,OAarGhc,gBAAgBzzD,UAAUkuE,SAAW,WAEpC,IAAIC,EAAW,GACfv6E,KAAKu5E,MAAQ,GAEb,IAAK,IAAI10E,EAAI,EAAGA,EAAI7E,KAAKi/D,QAAU,EAAGp6D,IAErC01E,EAAS11E,GAAK,GACd7E,KAAKu5E,MAAM10E,GAAK01E,EAAS11E,GAM1B,IAAI21E,EAAa,KAEjB,GAAkB,MAAdx6E,KAAK4+D,MACT,CACC,IAAI6b,EAAgBz6E,KAAK4+D,MAGzB,IAFA4b,EAAa,GAEJ31E,EAAI,EAAGA,EAAI41E,EAAct4E,OAAQ0C,IAC1C,CACC,IAAImN,EAAOyoE,EAAc51E,GACrBg1E,EAAe75E,KAAK++D,aAAalzD,IAAImG,GACzCwoE,EAAW31E,GAAKg1E,GAIlB75E,KAAK8M,OAAM,SAAS6J,EAAQzR,EAAM2e,EAAM+0D,EAAO8B,GAY9C,GAVY,GAARA,GAAax1E,EAAK+5D,QAAU,GAAK/5D,EAAKszE,QAAU,IAEnD+B,EAASr1E,EAAK2pB,KAAK,IAAIjiB,KAAK1H,GAC5BA,EAAK+5D,QAAU/5D,EAAK2pB,KAAK,GACzB3pB,EAAKszE,QAAUtzE,EAAK2pB,KAAK,GAGzB3pB,EAAK2pB,KAAK,GAAK0rD,EAASr1E,EAAK+5D,SAAS98D,OAAS,GAGlC,MAAVwU,GAA0B,MAARkN,GAEYlN,EAAOsoD,QAAU/5D,EAAK+5D,QAEtB,EACjC,CAECp7C,EAAKo7C,QAAUtoD,EAAOsoD,QACtBp7C,EAAK20D,QAAUtzE,EAAK+5D,QACpBp7C,EAAKgL,KAAO,GACZhL,EAAKzU,EAAI,GACTyU,EAAKxU,EAAI,GAET,IAAK,IAAIxK,EAAIgf,EAAK20D,QAAU,EAAG3zE,EAAIgf,EAAKo7C,QAASp6D,IAIhD01E,EAAS11E,GAAG+H,KAAKiX,GACjBA,EAAKk1D,0BAA0Bl0E,EAAG01E,EAAS11E,GACxC1C,OAAS,MAIbq4E,GAAY,EAAO,OAcvB3a,gBAAgBzzD,UAAUU,MAAQ,SAASC,EAAS4tE,EAAUC,EAAgBC,GAG7E,GAAgB,MAAZF,EACJ,CACC,IAAK,IAAI91E,EAAI,EAAGA,EAAI81E,EAASx4E,OAAQ0C,IACrC,CACC,IAAIg1E,EAAec,EAAS91E,GAER,MAAhBg1E,IAEc,MAAbgB,IAEHA,EAAY,IAAIrL,QAGboL,GAGHf,EAAaX,SAAW,GACxBW,EAAaX,SAAS,GAAKl5E,KAAKw5E,SAChCK,EAAaX,SAAS,GAAKr0E,EAC3B7E,KAAK86E,YAAY,KAAMjB,EAAc,KAAM9sE,EAAS8tE,EAClDhB,EAAaX,SAAUr0E,EAAG,IAI5B7E,KAAK2vE,IAAI,KAAMkK,EAAc,KAAM9sE,EAAS8tE,EAAW,IAK1D76E,KAAKw5E,aAoBP3Z,gBAAgBzzD,UAAUujE,IAAM,SAASh5D,EAAQmnC,EAAMi9B,EAAgBhuE,EAAS2tE,EAAM9B,GAErF,GAAY,MAAR96B,EACJ,CACC,IAAIk9B,EAASl9B,EAAK35C,GAElB,GAAoB,MAAhBu2E,EAAKM,GACT,CACCN,EAAKM,GAAUl9B,EACf/wC,EAAQ4J,EAAQmnC,EAAMi9B,EAAgBnC,EAAO,GAM7C,IAFA,IAAIqC,EAAgBn9B,EAAKwgB,iBAAiB7G,QAEjC5yD,EAAI,EAAGA,EAAGo2E,EAAc94E,OAAQ0C,IACzC,CACC,IAAI06D,EAAe0b,EAAcp2E,GAC7Bq2E,EAAa3b,EAAa9gD,OAG9Bze,KAAK2vE,IAAI7xB,EAAMo9B,EAAY3b,EAAcxyD,EAAS2tE,EAChD9B,EAAQ,SAMX7rE,EAAQ4J,EAAQmnC,EAAMi9B,EAAgBnC,EAAO,KAyBhD/Y,gBAAgBzzD,UAAU0uE,YAAc,SAASnkE,EAAQmnC,EAAMi9B,EAAgBhuE,EAAS2tE,EAAMS,EAAWC,EAAWxC,GAsBnH,GAAY,MAAR96B,EACJ,CACC,GAAc,MAAVnnC,IAOkB,MAAjBmnC,EAAKo7B,UACRp7B,EAAKo7B,SAAS,IAAMviE,EAAOuiE,SAAS,IACrC,CACC,IAAImC,EAAiB1kE,EAAOuiE,SAAS/2E,OAAS,EAC9C27C,EAAKo7B,SAAWviE,EAAOuiE,SAASzhB,QAChC3Z,EAAKo7B,SAASmC,EAAiB,GAAKD,EAItC,IAAIJ,EAASl9B,EAAK35C,GAElB,GAAoB,MAAhBu2E,EAAKM,GACT,CACCN,EAAKM,GAAUl9B,EACf/wC,EAAQ4J,EAAQmnC,EAAMi9B,EAAgBnC,EAAO,GAO7C,IAHA,IAAIqC,EAAgBn9B,EAAKwgB,iBAAiB7G,QACtCskB,EAAgBj+B,EAAKugB,iBAAiB5G,QAEjC5yD,EAAI,EAAGA,EAAIo2E,EAAc94E,OAAQ0C,IAC1C,CACC,IACIq2E,GADA3b,EAAe0b,EAAcp2E,IACH4Z,OAI1Bq/B,EAAK09B,eAAiBN,EAAWM,eAEpCx7E,KAAK86E,YAAYh9B,EAAMo9B,EAAY3b,EAAcxyD,EAAS2tE,EACxD58B,EAAKo7B,SAAUr0E,EAAG+zE,EAAQ,GAI9B,IAAS/zE,EAAI,EAAGA,EAAIk3E,EAAc55E,OAAQ0C,IAC1C,CACC,IAAI06D,EACA2b,GADA3b,EAAewc,EAAcl3E,IACHif,OAI1Bg6B,EAAK09B,cAAgBN,EAAWM,eAEnCx7E,KAAK86E,YAAYh9B,EAAMo9B,EAAY3b,EAAcxyD,EAAS2tE,EACxD58B,EAAKo7B,SAAUr0E,EAAG+zE,EAAQ,SAO9B7rE,EAAQ4J,EAAQmnC,EAAMi9B,EAAgBnC,EAAO,KAKhD34E,WAAW4/D,qBAA6C,IAApBA,gBAAkCA,qBAAkBj5D,EA0BxFk5D,0BAA0B1zD,UAAUwP,QAAU,SAASjF,KAEvD1W,WAAW6/D,+BAAiE,IAA9BA,0BAA4CA,+BAA4Bl5D,EAgCtHm5D,gCAAgC3zD,UAAY,IAAI0zD,0BAChDC,gCAAgC3zD,UAAUH,YAAc8zD,gCAOxDA,gCAAgC3zD,UAAUsyD,OAAS,KAQnDqB,gCAAgC3zD,UAAUipE,cAAgB,GAQ1DtV,gCAAgC3zD,UAAU4vE,gBAAkB,KAO5Djc,gCAAgC3zD,UAAU6vE,qBAAuB,EAOjElc,gCAAgC3zD,UAAU8vE,6BAA+B,EAOzEnc,gCAAgC3zD,UAAU+vE,2BAA6B,EAQvEpc,gCAAgC3zD,UAAUwP,QAAU,SAASjF,GAE5D,IAAIzE,EAAQlS,KAAK0+D,OAAO3wC,WAGxB/tB,KAAKg8E,gBAAkB,GAEvB,IAAK,IAAIn3E,EAAI,EAAGA,EAAIqN,EAAMqnE,MAAMp3E,OAAQ0C,IAEvC7E,KAAKg8E,gBAAgBn3E,GAAKqN,EAAMqnE,MAAM10E,GAAG4yD,QAG1C,IAAIykB,EAA+B,EAC/BD,EAAuBj8E,KAAKo8E,mBAAmBlqE,GAEnD,IAASrN,EAAI,EAAGA,EAAI7E,KAAKq1E,eACxB6G,EAA+Bl8E,KAAKm8E,2BAA4Bt3E,IACjE,CACC7E,KAAKq8E,eAAex3E,EAAGqN,GACvBlS,KAAKs8E,UAAUz3E,EAAGqN,GAClB,IAAIqqE,EAAqBv8E,KAAKo8E,mBAAmBlqE,GAEjD,GAAIqqE,EAAqBN,EACzB,CACCA,EAAuBM,EACvBL,EAA+B,EAG/B,IAAK,IAAI5c,EAAI,EAAGA,EAAIt/D,KAAKg8E,gBAAgB75E,OAAQm9D,IAIhD,IAFA,IAAIkR,EAAOt+D,EAAMqnE,MAAMja,GAEdwX,EAAI,EAAGA,EAAItG,EAAKruE,OAAQ20E,IACjC,CACC,IAAI9kE,EAAOw+D,EAAKsG,GAChB92E,KAAKg8E,gBAAgB1c,GAAGttD,EAAK8mE,0BAA0BxZ,IAAMttD,QAW/D,IAHAkqE,IAGS5c,EAAI,EAAGA,EAAIt/D,KAAKg8E,gBAAgB75E,OAAQm9D,IAIhD,IAFIkR,EAAOt+D,EAAMqnE,MAAMja,GAEdwX,EAAI,EAAGA,EAAItG,EAAKruE,OAAQ20E,KAE5B9kE,EAAOw+D,EAAKsG,IACXiC,0BAA0BzZ,EAAGwX,GAKrC,GAA4B,GAAxBmF,EAGH,MAKF,IAAI1C,EAAQ,GACRgB,EAAW,GAEf,IAAS11E,EAAI,EAAGA,EAAIqN,EAAM+sD,QAAU,EAAGp6D,IAEtC01E,EAAS11E,GAAK,GACd00E,EAAM10E,GAAK01E,EAAS11E,GAGrB,IAASA,EAAI,EAAGA,EAAI7E,KAAKg8E,gBAAgB75E,OAAQ0C,IAEhD,IAASy6D,EAAI,EAAGA,EAAIt/D,KAAKg8E,gBAAgBn3E,GAAG1C,OAAQm9D,IAEnDib,EAAS11E,GAAG+H,KAAK5M,KAAKg8E,gBAAgBn3E,GAAGy6D,IAI3CptD,EAAMqnE,MAAQA,GAefxZ,gCAAgC3zD,UAAUgwE,mBAAqB,SAASlqE,GAKvE,IAHA,IAAIsqE,EAAWtqE,EAAMqnE,MAAMp3E,OACvBs6E,EAAiB,EAEZ53E,EAAI,EAAGA,EAAI23E,EAAU33E,IAE7B43E,GAAkBz8E,KAAK08E,sBAAsB73E,EAAGqN,GAGjD,OAAOuqE,GAeR1c,gCAAgC3zD,UAAUswE,sBAAwB,SAAS73E,EAAGqN,GAS7E,IAPA,IAAIuqE,EAAiB,EACjBjM,EAAOt+D,EAAMqnE,MAAM10E,GACnB83E,EAAezqE,EAAMqnE,MAAM10E,EAAI,GAE/B+3E,EAAa,GAGRtd,EAAI,EAAGA,EAAIkR,EAAKruE,OAAQm9D,IACjC,CAMC,IALA,IAAIp6D,EAAOsrE,EAAKlR,GACZud,EAAe33E,EAAK4zE,0BAA0Bj0E,GAC9Ci4E,EAAiB53E,EAAK2zE,+BAA+Bh0E,GACrDk4E,EAAc,GAETjG,EAAI,EAAGA,EAAIgG,EAAe36E,OAAQ20E,IAC3C,CACC,IACIkG,EADgBF,EAAehG,GACOgC,0BAA0Bj0E,EAAI,GACxEk4E,EAAYnwE,KAAKowE,GAGlBD,EAAYzyD,MAAK,SAASlb,EAAGC,GAAK,OAAOD,EAAIC,KAC7CutE,EAAWC,GAAgBE,EAG5B,IAAIjH,EAAU,GAEd,IAASxW,EAAI,EAAGA,EAAIsd,EAAWz6E,OAAQm9D,IAEtCwW,EAAUA,EAAQmH,OAAOL,EAAWtd,IAKrC,IAFA,IAAI4d,EAAa,EAEVA,EAAaP,EAAax6E,QAEhC+6E,IAAe,EAGhB,IAAIC,EAAW,EAAID,EAAa,EAChCA,GAAc,EAEd,IAAIE,EAAO,GAEX,IAAS9d,EAAI,EAAGA,EAAI6d,IAAY7d,EAE/B8d,EAAK9d,GAAK,EAGX,IAASA,EAAI,EAAGA,EAAIwW,EAAQ3zE,OAAQm9D,IACpC,CACC,IACO+d,EADKvH,EAAQxW,GACO4d,EAGxB,MAFEE,EAAKC,GAEAA,EAAY,GAEdA,EAAY,IAEfZ,GAAkBW,EAAKC,EAAY,MAIlCD,EADFC,EAAaA,EAAY,GAAM,GAKpC,OAAOZ,GAcR1c,gCAAgC3zD,UAAUkwE,UAAY,SAASgB,EAAmBprE,GAOjF,IALA,IAAIqrE,GAAW,EAGXriE,EAAQ,EAELqiE,GAAYriE,IADJ,IAEf,CAIC,IAAIkxD,EAAQkR,EAAoB,GAAK,GAAKpiE,EAAQ,GAAK,EACvDqiE,GAAW,EAEX,IAAK,IAAI14E,EAAI,EAAGA,EAAIqN,EAAMqnE,MAAMp3E,OAAQ0C,IACxC,CAIC,IAHA,IAAI2rE,EAAOt+D,EAAMqnE,MAAM10E,GACnB24E,EAAe,GAEVle,EAAI,EAAGA,EAAIkR,EAAKruE,OAAQm9D,IACjC,CACC,IAAIttD,EAAOw+D,EAAKlR,GACZme,EAAWzrE,EAAK8mE,0BAA0Bj0E,GAG1C44E,EAAW,IAEdA,EAAWne,GAEZke,EAAaC,GAAYzrE,EAG1B,IAAI0rE,EAA2B,KAC3BC,EAA2B,KAC3BC,EAA4B,KAC5BC,EAA4B,KAE5BC,EAAqB,KACrBC,EAAqB,KACrBC,EAAsB,KACtBC,EAAsB,KAEtBC,EAAW,KACXC,EAAY,KAEhB,IAAS7e,EAAI,EAAGA,EAAKkR,EAAKruE,OAAS,EAAIm9D,IACvC,CAOC,GAAS,GAALA,EACJ,CAECoe,GADAQ,EAAWV,EAAale,IAErBqZ,2BAA2B9zE,GAC9B84E,EAA2BO,EACxBrF,+BAA+Bh0E,GAClCi5E,EAAqB,GACrBC,EAAqB,GAErB,IAAK,IAAIjH,EAAI,EAAGA,EAAI4G,EAAyBv7E,OAAQ20E,IAEpDgH,EAAmBhH,GAAK4G,EAAyB5G,GAAGgC,0BAA0Bj0E,EAAI,GAGnF,IAASiyE,EAAI,EAAGA,EAAI6G,EAAyBx7E,OAAQ20E,IAEpDiH,EAAmBjH,GAAK6G,EAAyB7G,GAAGgC,0BAA0Bj0E,EAAI,QAKnF64E,EAA2BE,EAC3BD,EAA2BE,EAC3BC,EAAqBE,EACrBD,EAAqBE,EACrBC,EAAWC,EAYZ,IARAP,GADAO,EAAYX,EAAale,EAAI,IAE1BqZ,2BAA2B9zE,GAC9Bg5E,EAA4BM,EACzBtF,+BAA+Bh0E,GAElCm5E,EAAsB,GACtBC,EAAsB,GAEbnH,EAAI,EAAGA,EAAI8G,EAA0Bz7E,OAAQ20E,IAErDkH,EAAoBlH,GAAK8G,EAA0B9G,GAAGgC,0BAA0Bj0E,EAAI,GAGrF,IAASiyE,EAAI,EAAGA,EAAI+G,EAA0B17E,OAAQ20E,IAErDmH,EAAoBnH,GAAK+G,EAA0B/G,GAAGgC,0BAA0Bj0E,EAAI,GAGrF,IAAIu5E,EAAwB,EACxBC,EAAyB,EAE7B,IAASvH,EAAI,EAAGA,EAAIgH,EAAmB37E,OAAQ20E,IAE9C,IAAK,IAAIwH,EAAK,EAAGA,EAAKN,EAAoB77E,OAAQm8E,IAE7CR,EAAmBhH,GAAKkH,EAAoBM,IAE/CF,IAGGN,EAAmBhH,GAAKkH,EAAoBM,IAE/CD,IAKH,IAASvH,EAAI,EAAGA,EAAIiH,EAAmB57E,OAAQ20E,IAE9C,IAASwH,EAAK,EAAGA,EAAKL,EAAoB97E,OAAQm8E,IAE7CP,EAAmBjH,GAAKmH,EAAoBK,IAE/CF,IAGGL,EAAmBjH,GAAKmH,EAAoBK,IAE/CD,IAKH,GAAKA,EAAyBD,GAC5BC,GAA0BD,GAC3BhS,EACD,CACC,IAAIv9C,EAAOqvD,EAASpF,0BAA0Bj0E,GAC9Cq5E,EAASnF,0BAA0Bl0E,EAAGs5E,EACnCrF,0BAA0Bj0E,IAC7Bs5E,EAAUpF,0BAA0Bl0E,EAAGgqB,GAMvC+uD,EAA4BF,EAC5BG,EAA4BF,EAC5BK,EAAsBF,EACtBG,EAAsBF,EACtBI,EAAYD,EAEP9R,IAKJmR,GAAW,QAmBjBxd,gCAAgC3zD,UAAUiwE,eAAiB,SAAS/G,EAAWpjE,GAG9E,IAAIqsE,EAAiBjJ,EAAY,GAAK,EACtC,GAAIiJ,EAEH,IAAK,IAAIjf,EAAIptD,EAAM+sD,QAAU,EAAGK,GAAK,EAAGA,IAEvCt/D,KAAKw+E,WAAWlf,EAAGif,QAKpB,IAASjf,EAAI,EAAGA,EAAIptD,EAAM+sD,QAASK,IAElCt/D,KAAKw+E,WAAWlf,EAAGif,IAgBtBxe,gCAAgC3zD,UAAUoyE,WAAa,SAASC,EAAWF,GAM1E,IAJA,IAAIG,EAAkB1+E,KAAKg8E,gBAAgByC,GAAWt8E,OAClDw8E,EAAe,GACfC,EAAoB,GAEf/5E,EAAI,EAAGA,EAAI65E,EAAiB75E,IACrC,CACC,IAQIg6E,EAaAC,EArBA9sE,EAAOhS,KAAKg8E,gBAAgByC,GAAW55E,GACvCk6E,EAAc,IAAI/e,iBACtB+e,EAAY/sE,KAAOA,EAuBlB8sE,EAFGP,EAEaE,EAAY,EAIZA,EAAY,EAGE,OApB9BI,EAFGN,EAEuBvsE,EACvB2mE,2BAA2B8F,GAIJzsE,EACvB6mE,+BAA+B4F,KAeI,GAAlCI,EAAwB18E,QAE5B48E,EAAYC,YAAch/E,KAAKg/E,YAC7BH,EAAyBC,GAC3BH,EAAa/xE,KAAKmyE,IAMlBH,EAAkB5sE,EAAK8mE,0BAA0B2F,KAAc,EAQjE,IAJAE,EAAar0D,KAAK01C,iBAAiB5zD,UAAUye,SAIpChmB,EAAI,EAAGA,EAAI65E,EAAiB75E,IAER,MAAxB+5E,EAAkB/5E,KAEjBmN,EAAO2sE,EAAavjC,QAAQppC,MAC3B+mE,0BAA0B0F,EAAW55E,IAkB7Ck7D,gCAAgC3zD,UAAU4yE,YAAc,SAASlC,EAAgB2B,GAKhF,IAHA,IAAIE,EAAe,GACfM,EAAa,EAERp6E,EAAI,EAAGA,EAAIi4E,EAAe36E,OAAQ0C,IAC3C,CACC,IAAImN,EAAO8qE,EAAej4E,GAC1B85E,EAAaM,KAAgBjtE,EAAK8mE,0BAA0B2F,GAO7D,GAFAE,EAAar0D,MAAK,SAAStO,EAAEK,GAAG,OAAOL,EAAIK,KAEvC4iE,EAAa,GAAK,EAGrB,OAAON,EAAav1E,KAAKmnB,MAAM0uD,EAAa,IAExC,GAAkB,GAAdA,EAER,OAASN,EAAa,GAAKA,EAAa,IAAM,EAI9C,IAAIO,EAAcD,EAAa,EAC3BE,EAAaR,EAAaO,EAAc,GAAKP,EAAa,GAC1DS,EAAcT,EAAaM,EAAa,GACxCN,EAAaO,GAEjB,OAAQP,EAAaO,EAAc,GAAKE,EAAcT,EAAaO,GAC/DC,IACCA,EAAaC,IAwBpBpf,iBAAiB5zD,UAAU4yE,YAAc,EAOzChf,iBAAiB5zD,UAAU4F,MAAO,EAOlCguD,iBAAiB5zD,UAAUye,QAAU,SAAS7O,EAAGK,GAEhD,OAAS,MAALL,GAAkB,MAALK,EAEZA,EAAE2iE,YAAchjE,EAAEgjE,aAEb,EAEA3iE,EAAE2iE,YAAchjE,EAAEgjE,YAEnB,EAIA,EAKD,GAIT/+E,WAAW8/D,qCAA6E,IAApCA,gCAAkDA,qCAAkCn5D,EAwBxIq5D,sBAAsB7zD,UAAY,IAAI0zD,0BACtCG,sBAAsB7zD,UAAUH,YAAcg0D,sBAO9CA,sBAAsB7zD,UAAUsyD,OAAS,KASzCuB,sBAAsB7zD,UAAUwP,QAAU,SAASjF,GAOlD,IALA,IAAIzE,EAAQlS,KAAK0+D,OAAO3wC,WACpB8sD,EAAY,IAAIrL,OAChB6P,EAAmBntE,EAAM6sD,aAAalyD,YACtCyyE,EAAc,IAAI9P,OAEb3qE,EAAI,EAAGA,EAAIw6E,EAAiBl9E,OAAQ0C,IAE5Cy6E,EAAYD,EAAiBx6E,GAAGV,IAAMk7E,EAAiBx6E,GAKxD,IAAI21E,EAAa,KAEjB,GAAmB,MAAftoE,EAAM0sD,MACV,CACC,IAAI2gB,EAAartE,EAAM0sD,MAGvB,IAFA4b,EAAa,GAEJ31E,EAAI,EAAGA,EAAI06E,EAAWp9E,OAAQ0C,IAEtC21E,EAAW31E,GAAKqN,EAAM6sD,aAAalzD,IAAI0zE,EAAW16E,IAIpDqN,EAAMpF,OAAM,SAAS6J,EAAQzR,EAAM61E,EAAgBnC,EAAO8B,GAKrDx1E,EAAKulE,WAAW9zD,KAEnBokE,EAAetd,SACfn1D,QAAQmE,OAAOsuE,EAAgBpkE,EAAO2nD,kBACtC3nD,EAAO0nD,iBAAiBzxD,KAAKmuE,GAC7BzyE,QAAQmE,OAAOsuE,EAAgB71E,EAAKm5D,kBACpCn5D,EAAKo5D,iBAAiB1xD,KAAKmuE,IAG5BF,EAAU31E,EAAKf,IAAMe,SACdo6E,EAAYp6E,EAAKf,MACtBq2E,GAAY,EAAM,MAKrB,IAAIgF,EAAgBl3E,QAAQmH,MAAMorE,EAAW,MAAM,GAGnD3oE,EAAMpF,OAAM,SAAS6J,EAAQzR,EAAM61E,EAAgBnC,EAAO8B,GAKrDx1E,EAAKulE,WAAW9zD,KAEnBokE,EAAetd,SACfn1D,QAAQmE,OAAOsuE,EAAgBpkE,EAAO2nD,kBACtCp5D,EAAKo5D,iBAAiB1xD,KAAKmuE,GAC3BpkE,EAAO0nD,iBAAiBzxD,KAAKmuE,GAC7BzyE,QAAQmE,OAAOsuE,EAAgB71E,EAAKm5D,mBAGrCwc,EAAU31E,EAAKf,IAAMe,SACdo6E,EAAYp6E,EAAKf,MACtBm7E,GAAa,EAAME,IAGvBv/E,WAAWggE,2BAAyD,IAA1BA,sBAAwCA,2BAAwBr5D,EAsC1Gs5D,uBAAuB9zD,UAAY,IAAI0zD,0BACvCI,uBAAuB9zD,UAAUH,YAAci0D,uBAO/CA,uBAAuB9zD,UAAUsyD,OAAS,KAO1CwB,uBAAuB9zD,UAAU+zD,iBAAmB,GAOpDD,uBAAuB9zD,UAAUg0D,qBAAuB,IAQxDF,uBAAuB9zD,UAAUm0D,oBAAsB,GAOvDL,uBAAuB9zD,UAAUipE,cAAgB,EAOjDnV,uBAAuB9zD,UAAU0iE,eAAiB,EAOlD5O,uBAAuB9zD,UAAU2iE,gBAAkB,EAOnD7O,uBAAuB9zD,UAAU4iE,aAAe,GAQhD9O,uBAAuB9zD,UAAU6iE,cAAgB,EAajD/O,uBAAuB9zD,UAAUqzE,eAAiB,KAQlDvf,uBAAuB9zD,UAAUi0D,YAAc1yD,YAAY6W,gBAO3D07C,uBAAuB9zD,UAAUk0D,SAAW,KAO5CJ,uBAAuB9zD,UAAUszE,OAAS,KAO1Cxf,uBAAuB9zD,UAAUuzE,cAAgB,KAOjDzf,uBAAuB9zD,UAAUwzE,WAAa,KAO9C1f,uBAAuB9zD,UAAUyzE,SAAW,KAO5C3f,uBAAuB9zD,UAAU0zE,YAAc,KAO/C5f,uBAAuB9zD,UAAU2zE,gBAAkB,KAOnD7f,uBAAuB9zD,UAAU4zE,WAAa,KAO9C9f,uBAAuB9zD,UAAU6zE,MAAQ,KAQzC/f,uBAAuB9zD,UAAU8zE,YAAa,EAO9ChgB,uBAAuB9zD,UAAU+zE,wBAA0B,KAO3DjgB,uBAAuB9zD,UAAUg0E,4BAA8B,KAO/DlgB,uBAAuB9zD,UAAUgiE,aAAe,GAKhDlO,uBAAuB9zD,UAAUi0E,YAAc,WAE9C,IAAInuE,EAAQlS,KAAK0+D,OAAO3wC,WACxBlnB,MAAM6D,OAEN7D,MAAMwD,QAAQ,uCAEd,IAAK,IAAIi1D,EAAI,EAAGA,EAAIptD,EAAMqnE,MAAMp3E,OAAQm9D,IACxC,CACCz4D,MAAMzC,MAAM,QAASk7D,EAAG,OAGxB,IAFA,IAAIkR,EAAOt+D,EAAMqnE,MAAMja,GAEdwX,EAAI,EAAGA,EAAItG,EAAKruE,OAAQ20E,IACjC,CACC,IAAI9kE,EAAOw+D,EAAKsG,GAEhBjwE,MAAMzC,MAAM4N,EAAK8mE,0BAA0BxZ,GAAI,MAEhDz4D,MAAMwD,UAGPxD,MAAMwD,QAAQ,yCAQf61D,uBAAuB9zD,UAAUwP,QAAU,SAASjF,GAEnD3W,KAAKy/E,eAAiBjQ,SACtB,IAAIt9D,EAAQlS,KAAK0+D,OAAO3wC,WACxB/tB,KAAK2/E,cAAgB,EAErB3/E,KAAKsgF,cAActgF,KAAK0+D,OAAOI,WAAY5sD,GAIvClS,KAAKkgF,YAERlgF,KAAKugF,QAAQruE,GAGd,IAAIsuE,EAAa,IAEjB,GAAIxgF,KAAKkgF,WAER,IAAK,IAAIr7E,EAAI,EAAGA,EAAI7E,KAAKq1E,cAAexwE,IACxC,CAaC,GATS,GAALA,IAEH7E,KAAKygF,UAAU57E,EAAGqN,GAClBlS,KAAKugF,QAAQruE,IAMVlS,KAAK2/E,cAAgBa,EACzB,CACC,IAAK,IAAIlhB,EAAI,EAAGA,EAAIptD,EAAMqnE,MAAMp3E,OAAQm9D,IAIvC,IAFA,IAAIkR,EAAOt+D,EAAMqnE,MAAMja,GAEdwX,EAAI,EAAGA,EAAItG,EAAKruE,OAAQ20E,KAE5B9kE,EAAOw+D,EAAKsG,IACXkC,KAAK1Z,EAAGttD,EAAK8mE,0BAA0BxZ,IAI9CkhB,EAAaxgF,KAAK2/E,mBAKlB,IAASrgB,EAAI,EAAGA,EAAIptD,EAAMqnE,MAAMp3E,OAAQm9D,IAIvC,IAFIkR,EAAOt+D,EAAMqnE,MAAMja,GAEdwX,EAAI,EAAGA,EAAItG,EAAKruE,OAAQ20E,IACjC,CACC,IAAI9kE,KAAOw+D,EAAKsG,IACXiC,0BAA0BzZ,EAAGttD,EAAK0wB,KAAK48B,IAK/Ct/D,KAAK0gF,QAAQ1gF,KAAK0+D,OAAOI,WAAY5sD,GAErClS,KAAK2/E,cAAgB,EAIvB3/E,KAAK2gF,iBAAiB3gF,KAAK0+D,OAAOI,WAAY5sD,IAQ/CguD,uBAAuB9zD,UAAUm0E,QAAU,SAASruE,GASnD,IANA,IAAI0uE,EAAW,GAGXv0E,EAAM,IAAIF,aACVqkE,EAAO,GAEF3rE,EAAI,EAAGA,GAAKqN,EAAM+sD,QAASp6D,IACpC,CACC2rE,EAAK3rE,GAAKqN,EAAMqnE,MAAM10E,GAEtB,IAAK,IAAIy6D,EAAI,EAAGA,EAAIkR,EAAK3rE,GAAG1C,OAAQm9D,IACpC,CAGC,IAAIp6D,EAAOsrE,EAAK3rE,GAAGy6D,GACfuhB,EAAc,IAAIzjB,mBAAmBl4D,EAAML,GAC/Cg8E,EAAYxU,UAAY/M,EACxBuhB,EAAYzW,SAAU,EACtBwW,EAASh0E,KAAKi0E,GAEdx0E,EAAIE,IAAIrH,EAAM27E,IAYhB,IANA,IAAIC,EAA6B,GAAlBF,EAASz+E,OACpB+Y,EAAQ,EAKL0lE,EAASz+E,OAAS,GAAK+Y,GAAS4lE,GACvC,CACC,IAAIC,EAAcH,EAASxlC,QACvBppC,EAAO+uE,EAAY/uE,KAEnBysE,EAAYsC,EAAY1jB,cACxBgP,EAAYjqE,SAAS2+E,EAAY1U,WAEjCoM,EAA0BzmE,EAAK2mE,2BAA2B8F,GAC1D/F,EAA8B1mE,EAAK6mE,+BAA+B4F,GAElEuC,EAAwBvI,EAAwBt2E,OAChD8+E,EAA4BvI,EAA4Bv2E,OAExD++E,EAAkBlhF,KAAKmhF,aAAa1I,EACtCgG,EAAY,GACV2C,EAAsBphF,KAAKmhF,aAAazI,EAC1C+F,EAAY,GAEV4C,EAAyBL,EACzBC,EACAK,EAAkBtvE,EAAK8mE,0BAA0B2F,GACjD8C,EAAaD,EAEbD,EAAyB,IAE5BE,GAAcL,EAAkBF,EAAwBI,EACpDH,GACAI,GAIL,IAAIG,GAAkB,EAEtB,GAAID,EAAaD,EApCF,EAsCd,GAAiB,GAAbjV,EAEHr6D,EAAK+mE,0BAA0B0F,EAAW8C,GAC1CC,GAAkB,MAGnB,CACC,IAAItD,EAAW1N,EAAKiO,GAAWpS,EAAY,GACvCoV,EAAYvD,EACbpF,0BAA0B2F,IAC7BgD,EAAYA,EAAYvD,EAASj2E,MAAQ,EACrCjI,KAAKmgE,iBAAmBnuD,EAAK/J,MAAQ,GAEzBs5E,GAEfvvE,EAAK+mE,0BAA0B0F,EAAW8C,GAC1CC,GAAkB,GAEVC,EAAYzvE,EAClB8mE,0BAA0B2F,GAzDhB,IA4DZzsE,EAAK+mE,0BAA0B0F,EAAWgD,GAC1CD,GAAkB,QAIhB,GAAID,EAAaD,EAjEP,EAqEd,GAAIjV,GAFWmE,EAAKiO,GAAWt8E,OAEH,EAE3B6P,EAAK+mE,0BAA0B0F,EAAW8C,GAC1CC,GAAkB,MAGnB,CACC,IAAIrD,EAAY3N,EAAKiO,GAAWpS,EAAY,GACxCqV,EAAavD,EACdrF,0BAA0B2F,IAC7BiD,EAAaA,EAAavD,EAAUl2E,MAAQ,EACxCjI,KAAKmgE,iBAAmBnuD,EAAK/J,MAAQ,GAExBs5E,GAEhBvvE,EAAK+mE,0BAA0B0F,EAAW8C,GAC1CC,GAAkB,GAEVE,EAAa1vE,EACnB8mE,0BAA0B2F,GAxFhB,IA2FZzsE,EAAK+mE,0BAA0B0F,EAAWiD,GAC1CF,GAAkB,GAKrB,GAAIA,EACJ,CAEC,IAAS38E,EAAI,EAAGA,EAAI4zE,EAAwBt2E,OAAQ0C,IACpD,CACC,IAAI88E,EAAgBlJ,EAAwB5zE,GAGhB,OAFxB+8E,EAAuBv1E,EAAIR,IAAI81E,KAIE,GAAhCC,EAAqBxX,UAExBwX,EAAqBxX,SAAU,EAC/BwW,EAASh0E,KAAKg1E,IAMjB,IAAS/8E,EAAI,EAAGA,EAAI6zE,EAA4Bv2E,OAAQ0C,IACxD,CACC,IACI+8E,EADAD,EAAgBjJ,EAA4B7zE,GAGpB,OAFxB+8E,EAAuBv1E,EAAIR,IAAI81E,KAIE,GAAhCC,EAAqBxX,UAExBwX,EAAqBxX,SAAU,EAC/BwW,EAASh0E,KAAKg1E,KAMlBb,EAAY3W,SAAU,EACtBlvD,MAcFglD,uBAAuB9zD,UAAUq0E,UAAY,SAAS57E,EAAGqN,GAKxD,GAFqBrN,EAAI,GAAK,EAI7B,IAAK,IAAIy6D,EAAIptD,EAAM+sD,QAASK,EAAI,EAAGA,IAElCt/D,KAAK6hF,mBAAmBviB,EAAI,EAAGptD,EAAOotD,QAKvC,IAASA,EAAI,EAAGA,EAAIptD,EAAM+sD,QAAU,EAAGK,IAEtCt/D,KAAK6hF,mBAAmBviB,EAAI,EAAGptD,EAAOotD,IAiBzCY,uBAAuB9zD,UAAUy1E,mBAAqB,SAASpD,EAAWvsE,EAAO4sE,GAUhF,IARA,IAAItO,EAAOt+D,EAAMqnE,MAAMkF,GAKnBqD,EAAiB,GACjBC,EAAU,IAAIvS,OAET3qE,EAAI,EAAGA,EAAI2rE,EAAKruE,OAAQ0C,IACjC,CACC,IAAIm9E,EAAcxR,EAAK3rE,GACvBi9E,EAAej9E,GAAK,IAAIu4D,mBACxB0kB,EAAej9E,GAAGmN,KAAOgwE,EACzBF,EAAej9E,GAAGwnE,UAAYxnE,EAC9Bk9E,EAAQC,EAAY79E,IAAM29E,EAAej9E,GACzC,IAAI4zE,EAA0B,KAI7BA,EAFGqG,EAAgBL,EAEOuD,EACvBnJ,+BAA+B4F,GAIRuD,EACvBrJ,2BAA2B8F,GAK/BqD,EAAej9E,GAAGw4D,cAAgBr9D,KAAKiiF,wBACrCD,EAAavJ,GAQhB,IALAqJ,EAAex3D,KAAK8yC,mBAAmBhxD,UAAUye,SAKxChmB,EAAI,EAAGA,EAAIi9E,EAAe3/E,OAAQ0C,IAC3C,CACC,IACImN,EAAO8vE,EAAej9E,GAAGmN,KAEzBkvE,GADAzI,EAA0B,KACR,GAaS,OAT9BA,EAFGqG,EAAgBL,EAEOzsE,EAAK6mE,+BAC7B4F,GAAWhnB,QAIazlD,EAAK2mE,2BAC7B8F,GAAWhnB,WASZypB,EAJyBzI,EAAwBt2E,OAEpB,EAEXnC,KAAKmhF,aAAa1I,EAClCqG,GAOgB9sE,EAAK8mE,0BAA0B2F,IAOnD,IAHA,IAAIyD,EAAa,EACbT,GAAa,IAERniB,EAAIwiB,EAAej9E,GAAGwnE,UAAY,EAAG/M,GAAK,GAIlD,GAAqB,OAFjBjC,EAAgB0kB,EAAQvR,EAAKlR,GAAGn7D,KAGpC,CACC,IAAI+5E,EAAW7gB,EAAcrrD,KAEzBqrD,EAAc+M,SAKjBqX,EAAYvD,EACTpF,0BAA0B2F,GACzBP,EAASj2E,MACT,EACAjI,KAAKmgE,iBACL+hB,EAAalwE,EAAK/J,MAAQ,EAC9Bq3D,GAAK,IAIL4iB,GAAchE,EAASj2E,MAAQjI,KAAKmgE,iBACpCb,KAKH,IAAI6iB,EAAc,EACdT,EAAa,IAEjB,IAASpiB,EAAIwiB,EAAej9E,GAAGwnE,UAAY,EAAG/M,EAAIwiB,EAAe3/E,QACjE,CACC,IAAIk7D,EAEJ,GAAqB,OAFjBA,EAAgB0kB,EAAQvR,EAAKlR,GAAGn7D,KAGpC,CACC,IAAIg6E,EAAY9gB,EAAcrrD,KAE1BqrD,EAAc+M,SAKjBsX,EAAavD,EACVrF,0BAA0B2F,GACzBN,EAAUl2E,MACV,EACAjI,KAAKmgE,iBACLgiB,EAAcnwE,EAAK/J,MAAQ,EAC/Bq3D,EAAIwiB,EAAe3/E,SAInBggF,GAAehE,EAAUl2E,MAAQjI,KAAKmgE,iBACtCb,MAKC4hB,GAAmBO,GAAaP,GAAmBQ,EAEtD1vE,EAAK+mE,0BAA0B0F,EAAWyC,GAElCA,EAAkBO,GAI1BzvE,EAAK+mE,0BAA0B0F,EAAWgD,GAC1CzhF,KAAK2/E,eAAiB8B,EAAYP,GAE1BA,EAAkBQ,IAI1B1vE,EAAK+mE,0BAA0B0F,EAAWiD,GAC1C1hF,KAAK2/E,eAAiBuB,EAAkBQ,GAGzCI,EAAej9E,GAAGulE,SAAU,IAe9BlK,uBAAuB9zD,UAAU61E,wBAA0B,SAASD,EAAaI,GAIhF,IAFA,IAAIC,EAAc,EAETx9E,EAAI,EAAGA,EAAIu9E,EAAWjgF,OAAQ0C,IACvC,CACC,IAAImN,EAAOowE,EAAWv9E,GAElBm9E,EAAYngC,YAAc7vC,EAAK6vC,WAElCwgC,IAEQL,EAAY7vE,UAAYH,EAAKG,SAErCkwE,GAAe,EAIfA,GAAe,EAIjB,OAAOA,GAcRniB,uBAAuB9zD,UAAU+0E,aAAe,SAASrE,EAAgB2B,GAExE,GAA6B,GAAzB3B,EAAe36E,OAElB,OAAO,EAKR,IAFA,IAAIw8E,EAAe,GAEV95E,EAAI,EAAGA,EAAIi4E,EAAe36E,OAAQ0C,IAE1C85E,EAAa95E,GAAKi4E,EAAej4E,GAAGi0E,0BAA0B2F,GAK/D,GAFAE,EAAar0D,MAAK,SAAStO,EAAEK,GAAG,OAAOL,EAAIK,KAEvCygE,EAAe36E,OAAS,GAAK,EAGhC,OAAOw8E,EAAav1E,KAAKmnB,MAAMusD,EAAe36E,OAAS,IAIvD,IAAI+8E,EAAcpC,EAAe36E,OAAS,EAI1C,OAHiBw8E,EAAaO,EAAc,GAC1BP,EAAaO,IAEM,GAgBvChf,uBAAuB9zD,UAAUk0E,cAAgB,SAASgC,EAAQpwE,GAEjElS,KAAKuiF,oBAAoBD,EAAQpwE,GAGjC,IAAK,IAAIrN,EAAI7E,KAAK4/E,WAAY/6E,GAAK,EAAGA,IAEjCA,EAAIqN,EAAM+sD,SAEbj/D,KAAKwiF,gBAAgB39E,EAAGy9E,EAAQpwE,GAIlC,IAASrN,EAAI7E,KAAK4/E,WAAW,EAAG/6E,GAAKqN,EAAM+sD,QAASp6D,IAE/CA,EAAI,GAEP7E,KAAKwiF,gBAAgB39E,EAAGy9E,EAAQpwE,IAmBnCguD,uBAAuB9zD,UAAUo2E,gBAAkB,SAAS/D,EAAWxtE,EAAOiB,GAW7E,IATA,IAAIs+D,EAAOt+D,EAAMqnE,MAAMkF,GACnBvuE,EAAO,EACPuyE,EAASziF,KAAKsgE,UAAYtgE,KAAK+/E,gBAAkB//E,KAAKggF,WAAWvB,IACjE,EAIAiE,GAAgB,EAEX79E,EAAI,EAAGA,EAAI2rE,EAAKruE,OAAQ0C,IACjC,CACC,IAAIK,EAAOsrE,EAAK3rE,GAEhB,GAAIK,EAAK28C,WACT,CACC,IAAIp7B,EAASzmB,KAAK0+D,OAAOiN,gBAAgBzmE,EAAK8M,MAEhC,MAAVyU,EAECzmB,KAAKqgE,aAAe1yD,YAAY6W,iBACnCxkB,KAAKqgE,aAAe1yD,YAAYmX,iBAEhC5f,EAAK+C,MAAQwe,EAAOxe,MACpB/C,EAAK2C,OAAS4e,EAAO5e,SAIrB3C,EAAK+C,MAAQwe,EAAO5e,OACpB3C,EAAK2C,OAAS4e,EAAOxe,OAKtBy6E,GAAgB,EAGjBxyE,EAAO9G,KAAKC,IAAI6G,EAAMhL,EAAK2C,aAEvB,GAAI3C,EAAKiN,SACd,CAGC,IAAIwwE,EAAW,EAEG,MAAdz9E,EAAKoO,MAERqvE,EAAWz9E,EAAKoO,MAAMnR,OAItB0E,MAAMyE,KAAK,sBAGZpG,EAAK+C,OAAS06E,EAAW,GAAK3iF,KAAKugE,oBAIpCkiB,GAAUv9E,EAAK+C,MAAQ,EACvB/C,EAAK8zE,KAAKyF,EAAWgE,GACrBv9E,EAAK6zE,0BAA0B0F,EAAWgE,GAC1CA,GAAUv9E,EAAK+C,MAAQ,EACvBw6E,GAAUziF,KAAKmgE,iBAGK,GAAjBuiB,GAEH77E,MAAMyE,KAAK,oCAeb40D,uBAAuB9zD,UAAUm2E,oBAAsB,SAAStxE,EAAOiB,GAGtE,IAAI7C,GAAKrP,KAAKogE,qBAIVwiB,EAAwB,EAC5B5iF,KAAKggF,WAAa,GAClBhgF,KAAKigF,MAAQ,GAEb,IAAK,IAAIxB,EAAYvsE,EAAM+sD,QAASwf,GAAa,EAAGA,IACpD,CAUC,IARA,IAAIoE,EAAgB,EAChBrS,EAAOt+D,EAAMqnE,MAAMkF,GACnBgE,EAASziF,KAAKsgE,SAIdoiB,GAAgB,EAEX79E,EAAI,EAAGA,EAAI2rE,EAAKruE,OAAQ0C,IACjC,CACC,IAAIK,EAAOsrE,EAAK3rE,GAEhB,GAAIK,EAAK28C,WACT,CACC,IAAIp7B,EAASzmB,KAAK0+D,OAAOiN,gBAAgBzmE,EAAK8M,MAEhC,MAAVyU,EAECzmB,KAAKqgE,aAAe1yD,YAAY6W,iBACnCxkB,KAAKqgE,aAAe1yD,YAAYmX,iBAEhC5f,EAAK+C,MAAQwe,EAAOxe,MACpB/C,EAAK2C,OAAS4e,EAAO5e,SAIrB3C,EAAK+C,MAAQwe,EAAO5e,OACpB3C,EAAK2C,OAAS4e,EAAOxe,OAKtBy6E,GAAgB,EAGjBG,EAAgBz5E,KAAKC,IAAIw5E,EAAe39E,EAAK2C,aAEzC,GAAI3C,EAAKiN,SACd,CAGC,IAAIwwE,EAAW,EAEG,MAAdz9E,EAAKoO,MAERqvE,EAAWz9E,EAAKoO,MAAMnR,OAItB0E,MAAMyE,KAAK,sBAGZpG,EAAK+C,OAAS06E,EAAW,GAAK3iF,KAAKugE,oBAIpCkiB,GAAUv9E,EAAK+C,MAAQ,EACvB/C,EAAK8zE,KAAKyF,EAAWgE,GACrBv9E,EAAK6zE,0BAA0B0F,EAAWgE,GAC1CA,GAAUv9E,EAAK+C,MAAQ,GACvBw6E,GAAUziF,KAAKmgE,kBAEFngE,KAAK+/E,kBAEjB//E,KAAK+/E,gBAAkB0C,EACvBziF,KAAK4/E,WAAanB,GAGnBz+E,KAAKggF,WAAWvB,GAAagE,EAGT,GAAjBC,GAEH77E,MAAMyE,KAAK,mCAGZtL,KAAKigF,MAAMxB,GAAapvE,EACxB,IAAIyzE,EAAqBD,EAAgB,EACrCD,EAAwB,EAAM5iF,KAAKogE,qBAavC,IAZAwiB,EAAwBC,EAEpB7iF,KAAKqgE,aAAe1yD,YAAY6W,iBACnCxkB,KAAKqgE,aAAe1yD,YAAYkX,eAEhCxV,GAAKyzE,EAILzzE,GAAKyzE,EAGGj+E,EAAI,EAAGA,EAAI2rE,EAAKruE,OAAQ0C,IAErB2rE,EAAK3rE,GACXo0E,KAAKwF,EAAWpvE,KAgBxB6wD,uBAAuB9zD,UAAUs0E,QAAU,SAASzvE,EAAOiB,GAU1D,IAFA,IAAIoB,EAAQpB,EAAM8sD,WAAWnyD,YAEpByyD,EAAI,EAAGA,EAAIhsD,EAAMnR,OAAQm9D,IAClC,CACC,IAAIttD,EAAOsB,EAAMgsD,GAEjB,KAAIttD,EAAKitD,QAAUjtD,EAAKwmE,QAAU,EAAI,GAAtC,CAYA,IALA,IAAIuK,EAAa/wE,EACd8mE,0BAA0B9mE,EAAKwmE,QAAU,GACxCwK,GAAe,EACfC,EAAc,EAETp+E,EAAImN,EAAKwmE,QAAU,EAAG3zE,EAAImN,EAAKitD,QAASp6D,IACjD,CACC,IAAIuK,EAAI4C,EAAK8mE,0BAA0Bj0E,GAEnCk+E,GAAc3zE,GAEjB4zE,GAAe,EACfD,EAAa3zE,GAIb6zE,IAIF,IAAKD,EACL,CACC,IAAIE,EAAa,EACbC,EAAe,EACfC,EAAe,GACfC,EAAiB,GAEjBC,EAAWtxE,EAAK8mE,0BAA0B9mE,EAAKwmE,QAAU,GAE7D,IAAS3zE,EAAImN,EAAKwmE,QAAU,EAAG3zE,EAAImN,EAAKitD,QAAU,EAAGp6D,IAMhDy+E,IAFAC,EAAQvxE,EAAK0wB,KAAK79B,EAAI,KAOjB7E,KAAKwjF,gBAAgBtxE,EAAOF,EAAMnN,EAAI,EAAGy+E,IAHjDF,EAAav+E,EAAImN,EAAKwmE,QAAU,GAAK8K,EACrCJ,MAUAE,EAAav+E,EAAImN,EAAKwmE,QAAU,GAAK+K,EACrCD,EAAWC,GAMb,IAFAD,EAAWtxE,EAAK0wB,KAAK79B,GAEZA,EAAImN,EAAKitD,QAAU,EAAGp6D,EAAImN,EAAKwmE,QAAU,EAAG3zE,IACrD,CAGC,IAAI0+E,EAEAD,IAFAC,EAAQvxE,EAAK0wB,KAAK79B,EAAI,KAOjB7E,KAAKwjF,gBAAgBtxE,EAAOF,EAAMnN,EAAI,EAAGy+E,IAHjDD,EAAex+E,EAAImN,EAAKwmE,QAAU,GAAK8K,EACvCH,MAUAE,EAAex+E,EAAImN,EAAKwmE,QAAU,GAAKxmE,EAAK0wB,KAAK79B,EAAE,GACnDy+E,EAAWC,GAIb,GAAIJ,EAAeF,GAAeC,EAAaD,EAE9C,GAAIE,GAAgBD,EAGnB,IAASr+E,EAAImN,EAAKitD,QAAU,EAAGp6D,EAAImN,EAAKwmE,QAAS3zE,IAEhDmN,EAAKgnE,KAAKn0E,EAAGw+E,EAAex+E,EAAImN,EAAKwmE,QAAU,SAG5C,GAAI0K,EAAaC,EAGrB,IAASt+E,EAAImN,EAAKwmE,QAAU,EAAG3zE,EAAImN,EAAKitD,QAASp6D,IAEhDmN,EAAKgnE,KAAKn0E,EAAGu+E,EAAav+E,EAAImN,EAAKwmE,QAAU,QA4BnDtY,uBAAuB9zD,UAAUo3E,gBAAkB,SAAStxE,EAAOF,EAAMw+D,EAAM1oD,GAK9E,IAHA,IAAI27D,EAAYvxE,EAAMqnE,MAAM/I,GACxBnE,GAAa,EAERxnE,EAAI,EAAGA,EAAI4+E,EAAUthF,OAAQ0C,IAErC,GAAImN,GAAQyxE,EAAU5+E,GACtB,CACCwnE,EAAYxnE,EACZ,MAIF,GAAIwnE,EAAY,EAEf,OAAO,EAGR,IAAIiX,EAAWtxE,EAAK8mE,0BAA0BtI,GAE9C,GAAI1oD,EAAWw7D,EACf,CAEC,GAAiB,GAAbjX,EAGH,OAAO,EAGR,IAAI6R,EAAWuF,EAAUpX,EAAY,GACjCoV,EAAYvD,EAASpF,0BAA0BtI,GAInD,OAHAiR,EAAYA,EAAYvD,EAASj2E,MAAQ,EACrCjI,KAAKmgE,iBAAmBnuD,EAAK/J,MAAQ,IAExB6f,EASb,GAAIA,EAAWw7D,EACpB,CAEC,GAAIjX,GAAaoX,EAAUthF,OAAS,EAGnC,OAAO,EAGR,IAAIg8E,EAAYsF,EAAUpX,EAAY,GAClCqV,EAAavD,EAAUrF,0BAA0BtI,GAIrD,OAHAkR,EAAaA,EAAavD,EAAUl2E,MAAQ,EACxCjI,KAAKmgE,iBAAmBnuD,EAAK/J,MAAQ,IAEvB6f,EAUnB,OAAO,GAcRo4C,uBAAuB9zD,UAAUu0E,iBAAmB,SAAS1vE,EAAOiB,GAEnElS,KAAK6/E,SAAW,GAChB7/E,KAAK8/E,YAAc,GAEnB,IAAK,IAAIj7E,EAAI,EAAGA,EAAIqN,EAAMqnE,MAAMp3E,OAAQ0C,IAEvC7E,KAAK6/E,SAASh7E,GAAKoa,OAAOykE,UAC1B1jF,KAAK8/E,YAAYj7E,IAAMoa,OAAOykE,UAG/B,IAAI/kB,EAAWzsD,EAAM6sD,aAAalyD,YAMlC,IAAShI,EAAI,EAAGA,EAAI85D,EAASx8D,OAAQ0C,IAEpC7E,KAAK0rE,kBAAkB/M,EAAS95D,IAK7B7E,KAAK0+D,OAAOilB,WAAaC,wBAAwBC,YAChD7jF,KAAK0+D,OAAOilB,WAAaC,wBAAwBE,UACjD9jF,KAAK0+D,OAAOilB,WAAaC,wBAAwBG,OAErD/jF,KAAKkwE,oBAAoBh+D,GAG1B,IAAIoB,EAAQpB,EAAM8sD,WAAWnyD,YAE7B,IAAShI,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAEjC7E,KAAKgkF,gBAAgB1wE,EAAMzO,KAa7Bq7D,uBAAuB9zD,UAAU8jE,oBAAsB,SAASh+D,GAI/D,IAAK,IAAIm6D,EAAY,EAAGA,EAAYn6D,EAAMqnE,MAAMp3E,OAAQkqE,IAIvD,IAFA,IAAImE,EAAOt+D,EAAMqnE,MAAMlN,GAEd4X,EAAY,EAAGA,EAAYzT,EAAKruE,OAAQ8hF,IACjD,CACC,IAAIjyE,EAAOw+D,EAAKyT,GAEhB,GAAIjyE,EAAK6vC,WAOR,IALA,IAAIqiC,EAAelyE,EAAK6mE,+BAA+BxM,GAEnD8X,EAAc9X,EAAY,EAGrByK,EAAI,EAAGA,EAAI,EAAGA,IACvB,CACC,GAAIqN,GAAe,GACdA,EAAcjyE,EAAMqnE,MAAMp3E,QACV,MAAhB+hF,GACAA,EAAa/hF,OAAS,EAC3B,CAGC,IAFA,IAAIgwE,EAAc,GAET7S,EAAI,EAAGA,EAAI4kB,EAAa/hF,OAAQm9D,IACzC,CACC,IAAI8kB,EAAS,IAAIhnB,mBACf8mB,EAAa5kB,GAAI4kB,EAAa5kB,GAAG58B,KAAKyhD,IACxChS,EAAYvlE,KAAKw3E,GAGlBjS,EAAY7nD,KAAK8yC,mBAAmBhxD,UAAUye,SAE9C,IAAI42D,EAAYzvE,EAAK5C,EAAE,GAAK4C,EAAK/J,MAAQ,EACrCy5E,EAAaD,EAAYzvE,EAAK/J,MAI9Bo8E,EAAqB,EAErBC,EAAiB,GAErB,IAAShlB,EAAI,EAAGA,EAAI6S,EAAYhwE,OAAQm9D,IACxC,CACC,IACIilB,EADAC,EAAYrS,EAAY7S,GAAGttD,KAG/B,GAAIwyE,EAAU3iC,WACd,CAIE0iC,EAFQ,GAALzN,EAEW9kE,EAAKssD,iBAKLtsD,EAAKqsD,iBAGpB,IAAK,IAAIomB,EAAY,EAAGA,EAAYF,EAAYpiF,OAAQsiF,IAEnDF,EAAYE,GAAW3gE,QAAU0gE,GAChCD,EAAYE,GAAWhmE,QAAU+lE,IAErCH,GAAsBE,EAAYE,GAAWnxE,MAC1CnR,OAGHmiF,EAAe13E,KAAK23E,EAAYE,UAMlCJ,GAAsBG,EAAUlxE,MAAMnR,OAEtCmiF,EAAe13E,KAAK43E,GAItB,IAAIlS,GAAiB+R,EAAqB,GACtCrkF,KAAK8uE,eAGL98D,EAAK/J,MAAQqqE,EACZ,EAAItyE,KAAK8uE,iBAEb2S,GAAazhF,KAAK8uE,eAClB4S,GAAc1hF,KAAK8uE,gBAGpB,IACIyD,GADiBmP,EAAaD,GACC4C,EAE/Bf,EAAW7B,EAAYlP,EAAc,EACrCE,EAAiBzyE,KAAKgvE,aAAehvE,KAAK+uE,gBAC1C2D,EAAa,EAEjB,IAASpT,EAAI,EAAGA,EAAIglB,EAAeniF,OAAQm9D,IAC3C,CACC,IAAIolB,EAAiBJ,EAAehlB,GAAGhsD,MACpCnR,OACCipB,EAAMprB,KAAKy/E,eAAe6E,EAAehlB,GAAGd,IAAI,IAEzC,MAAPpzC,IAEHA,EAAM,GACNprB,KAAKy/E,eAAe6E,EAAehlB,GAAGd,IAAI,IAAMpzC,GAG7Ck0C,EAAI+kB,EAAqB,EAE5B5R,GAAkBzyE,KAAK+uE,gBAEfzP,EAAI+kB,EAAqB,IAEjC5R,GAAkBzyE,KAAK+uE,iBAKxB,IAAK,IAAItpD,EAAI,EAAGA,EAAIi/D,EAAgBj/D,IAEnC2F,EAAQ,EAAJ3F,EAAY,EAAJqxD,GAASwM,EACrBA,GAAY/Q,EACZnnD,EAAQ,EAAJ3F,EAAY,EAAJqxD,EAAQ,GAAKrE,EAG1BC,EAAatpE,KAAKC,IAAIqpE,EACpBD,IAIJyR,EAAelyE,EAAK2mE,2BAA2BtM,GAE/C8X,EAAc9X,EAAY,KAY/BnM,uBAAuB9zD,UAAU43E,gBAAkB,SAAShyE,GAI3D,IAAI6+D,EAAU,EAGd,GAAoB,QAAhB7+D,EAAK6c,KAAK,GACd,CACC,IAAIowC,EAAUjtD,EAAKitD,QACfuZ,EAAUxmE,EAAKwmE,QAEfvZ,GAAWuZ,IAEdvZ,EAAUjtD,EAAK8R,OAAOm7C,QACtBuZ,EAAUxmE,EAAKyM,OAAO+5D,SAWvB,IARA,IAAImM,EAAoB,EACpBC,EAAS5kF,KAAKy/E,eAAeztE,EAAKwsD,IAAI,IAEtC16C,EAAS9R,EAAKsnE,WAAatnE,EAAKyM,OAAOzM,KAAOA,EAAK8R,OAAO9R,KAC1Df,EAAQjR,KAAK0+D,OAAOztD,MACpB4zE,EAAiB7kF,KAAKqgE,aAAe1yD,YAAYoX,gBAChD/kB,KAAKqgE,aAAe1yD,YAAYmX,gBAE5BjgB,EAAI,EAAGA,EAAImN,EAAKsB,MAAMnR,OAAQ0C,IACvC,CACC,IAAI46D,EAAWztD,EAAKsB,MAAMzO,GACtBigF,EAAa9kF,KAAK0+D,OAAOiB,mBAAmBF,GAAU,GAGtDsT,EAAY,GAKZgS,EAAW/yE,EAAKsnE,WAYpB,GAVIwL,GAAchhE,IAMjBihE,GAAYA,GAIC,MAAVH,EACJ,CACC,IAAII,EAAcD,EAAW,EAAI,EAC7B11E,EAAI01E,EACLF,EAAiB7kF,KAAK8/E,YAAYtH,GAAWx4E,KAAK6/E,SAASrH,GAC1DqM,EAAiB7kF,KAAK6/E,SAAS5gB,GAAWj/D,KAAK8/E,YAAY7gB,GAC3DgmB,EAAQL,EAA2B,EAApBD,EAAwB,EAAIK,GAE3CD,GAAYF,IAEfI,GAASA,GAGV51E,GAAK41E,EACL,IAAI71E,EAAIw1E,EAA2B,EAApBD,EAAwBK,GAEnCE,EAAcj0E,EAAMiB,MAAMs4D,YAAY/K,GAAU,GAEhDz/D,KAAK0+D,OAAOymB,OAAOD,IAAgBj0E,EAAMiB,MAAM+vC,UAAUijC,IAAgBJ,IAM3E11E,EAFY,OAFTyC,EAAQZ,EAAMsW,KAAKxV,SAASmzE,IAI3BrzE,EAAMzC,EAIN01E,EAAWtyE,SAASpD,EAAI4C,EAAK8R,OAAO7b,MAAQi9E,EAAY1yE,SAASpD,GAInEpP,KAAKqgE,aAAe1yD,YAAY6W,iBAC/BxkB,KAAKqgE,aAAe1yD,YAAYmX,iBAEpCiuD,EAAUnmE,KAAK,IAAIuC,QAAQC,EAAGC,IAE1BrP,KAAK0+D,OAAOilB,WAAaC,wBAAwBG,OAEpDhR,EAAUnmE,KAAK,IAAIuC,QAAQC,EAAGC,EAAI41E,MAKnClS,EAAUnmE,KAAK,IAAIuC,QAAQE,EAAGD,IAE1BpP,KAAK0+D,OAAOilB,WAAaC,wBAAwBG,OAEpDhR,EAAUnmE,KAAK,IAAIuC,QAAQE,EAAI41E,EAAO71E,KAQzC,IAAIg2E,EAAYpzE,EAAK5C,EAAEjN,OAAS,EAC5BkjF,GAAa,EACbC,GAAa,EACbnB,EAAcnyE,EAAKitD,QAAU,EAE7B8lB,IAEHK,EAAY,EACZC,EAAYrzE,EAAK5C,EAAEjN,OACnBmjF,EAAY,EACZnB,EAAcnyE,EAAKwmE,QAAU,GAI9B,IAAK,IAAIlZ,EAAI8lB,EAAYpzE,EAAKitD,SAAWjtD,EAAKwmE,SAAYlZ,GAAK+lB,EAAW/lB,GAAKgmB,EAC/E,CAEC,IAAIC,EAAYvzE,EAAK5C,EAAEkwD,GAAKuR,EAIxB2U,GAAexlF,KAAK6/E,SAASsE,GAAenkF,KAAK8/E,YAAYqE,EAAc,IAAM,EACjFsB,GAAkBzlF,KAAK6/E,SAASsE,EAAc,GAAKnkF,KAAK8/E,YAAYqE,IAAgB,EAExF,GAAIY,EACJ,CACC,IAAIl0E,EAAM20E,EACVA,EAAcC,EACdA,EAAiB50E,EAGd7Q,KAAKqgE,aAAe1yD,YAAY6W,iBACnCxkB,KAAKqgE,aAAe1yD,YAAYmX,iBAEhCiuD,EAAUnmE,KAAK,IAAIuC,QAAQo2E,EAAWC,IACtCzS,EAAUnmE,KAAK,IAAIuC,QAAQo2E,EAAWE,MAItC1S,EAAUnmE,KAAK,IAAIuC,QAAQq2E,EAAaD,IACxCxS,EAAUnmE,KAAK,IAAIuC,QAAQs2E,EAAgBF,KAG5CvlF,KAAK0/E,OAASt2E,KAAKC,IAAIrJ,KAAK0/E,OAAQ6F,GACpCpB,GAAemB,EAIhB,GAAc,MAAVV,EACJ,CACKI,EAAcD,EAAW,EAAI,EAAjC,IACI9E,EAAQ8E,EACTF,EAAiB7kF,KAAK6/E,SAAS5gB,GAAWj/D,KAAK8/E,YAAY7gB,GAC1D4lB,EAAiB7kF,KAAK8/E,YAAYtH,GAAWx4E,KAAK6/E,SAASrH,GAC3DyM,EAAQL,EAA2B,EAApBD,EAAwB,EAAIK,GAE3CD,GAAYF,IAEfI,GAASA,GAEN51E,EAAI4wE,EAAQgF,EACZ71E,EAAIw1E,EAA2B,EAApBD,EAAwB,EAAIK,GAD3C,IAQKnzE,EALD6zE,EAAcz0E,EAAMiB,MAAMs4D,YAAY/K,GAAU,GAChDkmB,EAAa3lF,KAAK0+D,OAAOiB,mBAAmBF,GAAU,GAEtDz/D,KAAK0+D,OAAOymB,OAAOO,IAAgBz0E,EAAMiB,MAAM+vC,UAAUyjC,IAAgBC,IAM3Ev2E,EAFY,OAFTyC,EAAQZ,EAAMsW,KAAKxV,SAAS2zE,IAI3B7zE,EAAMzC,EAINu2E,EAAWnzE,SAASpD,EAAI4C,EAAKyM,OAAOxW,MAAQy9E,EAAYlzE,SAASpD,GAInEpP,KAAKqgE,aAAe1yD,YAAY6W,iBAClCxkB,KAAKqgE,aAAe1yD,YAAYmX,iBAE7B9kB,KAAK0+D,OAAOilB,WAAaC,wBAAwBG,OAEpDhR,EAAUnmE,KAAK,IAAIuC,QAAQC,EAAGC,EAAI41E,IAGnClS,EAAUnmE,KAAK,IAAIuC,QAAQC,EAAGC,MAI1BrP,KAAK0+D,OAAOilB,WAAaC,wBAAwBG,OAEpDhR,EAAUnmE,KAAK,IAAIuC,QAAQE,EAAI41E,EAAO71E,IAGvC2jE,EAAUnmE,KAAK,IAAIuC,QAAQE,EAAGD,KAI5B4C,EAAKsnE,YAERt5E,KAAK4lF,oBAAoB5zE,EAAMytD,GAGhCz/D,KAAK0+D,OAAO2M,cAAc5L,EAAUsT,GAMnClC,EAFc,GAAXA,EAEO7wE,KAAKugE,oBAEPsQ,EAAU,GAEPA,GAIAA,EAAU7wE,KAAKugE,oBAG3BokB,IAGD3yE,EAAK6c,KAAK,GAAK,SAcjBqxC,uBAAuB9zD,UAAUs/D,kBAAoB,SAAS15D,GAE7D,IAAI6zE,EAAW7zE,EAAKA,KAChBuzE,EAAYvzE,EAAK5C,EAAE,GAAK4C,EAAK/J,MAAQ,EACrC69E,EAAY9zE,EAAK3C,EAAE,GAAK2C,EAAKnK,OAAS,EAE1C7H,KAAK6/E,SAAS7tE,EAAKwmE,SAAWpvE,KAAK2G,IAAI/P,KAAK6/E,SAAS7tE,EAAKwmE,SAAUsN,GACpE9lF,KAAK8/E,YAAY9tE,EAAKwmE,SAAWpvE,KAAKC,IAAIrJ,KAAK8/E,YAAY9tE,EAAKwmE,SAC9DsN,EAAY9zE,EAAKnK,QAEf7H,KAAKqgE,aAAe1yD,YAAY6W,iBACnCxkB,KAAKqgE,aAAe1yD,YAAYmX,gBAEhC9kB,KAAK0+D,OAAOgN,kBAAkBma,EAAUN,EAAWO,GAInD9lF,KAAK0+D,OAAOgN,kBAAkBma,EAAUC,EAAWP,GAGpDvlF,KAAK0/E,OAASt2E,KAAKC,IAAIrJ,KAAK0/E,OAAQ6F,EAAYvzE,EAAK/J,QAatDi4D,uBAAuB9zD,UAAUw5E,oBAAsB,SAAS30E,EAAOiB,KAKvEjS,WAAWigE,4BAA2D,IAA3BA,uBAAyCA,4BAAyBt5D,EAwB7G45D,mBAAmBp0D,UAAY,IAAI0zD,0BACnCU,mBAAmBp0D,UAAUH,YAAcu0D,mBAO3CA,mBAAmBp0D,UAAUsyD,OAAS,KAStC8B,mBAAmBp0D,UAAUwP,QAAU,SAASjF,GAE/C,IAAIzE,EAAQlS,KAAK0+D,OAAO3wC,WACpB8sD,EAAY,IAAIrL,OAChB8P,EAAch3E,QAAQmH,MAAMyC,EAAM6sD,aAAc,MAAM,GAItDyb,EAAa,KAEjB,GAAmB,MAAftoE,EAAM0sD,MACV,CACC,IAAI2gB,EAAartE,EAAM0sD,MACvB4b,EAAa,GAEb,IAAK,IAAI31E,EAAI,EAAGA,EAAI06E,EAAWp9E,OAAQ0C,IAEzB4lB,WAAWC,OAAO60D,EAAW16E,IAC1C21E,EAAW31E,GAAKqN,EAAM6sD,aAAalzD,IAAI0zE,EAAW16E,IAIpDqN,EAAMpF,OAAM,SAAS6J,EAAQzR,EAAM61E,EAAgBnC,EAAO8B,GAMzD,IAAIjQ,EAAuB,MAAV9zD,GAAkBA,EAAO6kE,eAAiBt2E,EAAKs2E,eAAiBt2E,EAAKulE,WAAW9zD,GAI7FovE,EAAiC,MAAVpvE,GAAoC,MAAlBokE,GACzCpkE,EAAO6kE,cAAgBt2E,EAAKs2E,eAAiBT,EAAej3D,QAAU5e,EAEtEulE,GAEHsQ,EAAetd,SACfn1D,QAAQmE,OAAOsuE,EAAgBpkE,EAAO2nD,kBACtCp5D,EAAKo5D,iBAAiB1xD,KAAKmuE,GAC3BpkE,EAAO0nD,iBAAiBzxD,KAAKmuE,GAC7BzyE,QAAQmE,OAAOsuE,EAAgB71E,EAAKm5D,mBAE5B0nB,IAERhL,EAAetd,SACfn1D,QAAQmE,OAAOsuE,EAAgBpkE,EAAO0nD,kBACtCn5D,EAAKm5D,iBAAiBzxD,KAAKmuE,GAC3BpkE,EAAO2nD,iBAAiB1xD,KAAKmuE,GAC7BzyE,QAAQmE,OAAOsuE,EAAgB71E,EAAKo5D,mBAGrC,IAAI0nB,EAASv7D,WAAWC,OAAOxlB,EAAK8M,MACpC6oE,EAAUmL,GAAU9gF,SACbo6E,EAAY0G,KACjBxL,GAAY,EAAM,OAGtBv6E,WAAWugE,wBAAmD,IAAvBA,mBAAqCA,wBAAqB55D,EA8BjG,IAAIg9E,wBACJ,CACCC,WAAY,EACZC,SAAU,EACVmC,SAAU,EACVlC,MAAO,GA00BR,SAASmC,iBAAiBj1E,EAAOovD,EAAaK,GAE7CvD,cAAc5tD,KAAKvP,KAAMiR,GACzBjR,KAAKqgE,YAA8B,MAAfA,EAAuBA,EAAc1yD,YAAY6W,gBACrExkB,KAAK0gE,cAAkC,MAAjBA,GAAyBA,EAklChD,SAASylB,aAAaroC,GAErB99C,KAAKomF,YAAcpmF,KAAKqmF,qBAEZ,MAARvoC,EAEH99C,KAAKsmF,QAAQxoC,GAIb99C,KAAKkM,QAyjEP,SAASq6E,aAAar0E,EAAO4rC,GAE5B99C,KAAKkS,MAAQA,EACblS,KAAK89C,KAAOA,EACZ99C,KAAKwM,SAAWsxC,EAyBjB,SAASnsC,cAAcO,EAAOyE,EAAQ1E,EAAOxD,GAE5CzO,KAAKkS,MAAQA,EACblS,KAAK2W,OAASA,EACd3W,KAAKwM,SAAWmK,EAChB3W,KAAKiS,MAAQA,EACbjS,KAAKyO,MAAQA,EACbzO,KAAKwmF,cAAgB/3E,EAiGtB,SAASgD,iBAAiBS,EAAOF,EAAM4R,EAAUE,GAEhD9jB,KAAKkS,MAAQA,EACblS,KAAKgS,KAAOA,EACZhS,KAAK4jB,SAAWA,EAChB5jB,KAAKwM,SAAWoX,EAChB5jB,KAAK8jB,OAASA,EA6Bf,SAASpS,cAAcQ,EAAOF,EAAMjK,GAEnC/H,KAAKkS,MAAQA,EACblS,KAAKgS,KAAOA,EACZhS,KAAK+H,MAAQA,EACb/H,KAAKwM,SAAWzE,EA6BjB,SAAS6J,cAAcM,EAAOF,EAAMtK,GAEnC1H,KAAKkS,MAAQA,EACblS,KAAKgS,KAAOA,EACZhS,KAAK0H,MAAQA,EACb1H,KAAKwM,SAAW9E,EA6BjB,SAAS8J,iBAAiBU,EAAOF,EAAMQ,GAEtCxS,KAAKkS,MAAQA,EACblS,KAAKgS,KAAOA,EACZhS,KAAKwS,SAAWA,EAChBxS,KAAKwM,SAAWgG,EA6BjB,SAASi0E,iBAAiBv0E,EAAOF,EAAM00E,GAEtC1mF,KAAKkS,MAAQA,EACblS,KAAKgS,KAAOA,EACZhS,KAAK0mF,UAAYA,EACjB1mF,KAAKwM,SAAWk6E,EA6BjB,SAASC,gBAAgBz0E,EAAOF,EAAMpH,GAErC5K,KAAKkS,MAAQA,EACblS,KAAKgS,KAAOA,EACZhS,KAAK4K,QAAUA,EACf5K,KAAKwM,SAAW5B,EAmDjB,SAASg8E,sBAAsB50E,EAAM2nD,EAAW5xD,GAE/C/H,KAAKgS,KAAOA,EACZhS,KAAK25D,UAAYA,EACjB35D,KAAK+H,MAAQA,EACb/H,KAAKwM,SAAWzE,EAgGjB,SAAS8+E,OAAO9+E,EAAOyK,EAAU9K,GAEhC1H,KAAK+H,MAAQA,EACb/H,KAAKyrE,YAAYj5D,GACjBxS,KAAK0rB,SAAShkB,GAEK,MAAf1H,KAAK8mF,QAER9mF,KAAK8mF,SA0zBP,SAASxb,WAAWl8D,EAAGC,EAAGpH,EAAOJ,GAEhCyH,YAAYC,KAAKvP,KAAMoP,EAAGC,EAAGpH,EAAOJ,GA9uKrC44D,qBAAqBr0D,UAAY,IAAI+wD,cACrCsD,qBAAqBr0D,UAAUH,YAAcw0D,qBAO7CA,qBAAqBr0D,UAAUwyD,MAAQ,KAQvC6B,qBAAqBr0D,UAAUogE,cAAe,EAS9C/L,qBAAqBr0D,UAAU+hE,wBAAyB,EAQxD1N,qBAAqBr0D,UAAU26E,YAAa,EAQ5CtmB,qBAAqBr0D,UAAU46E,aAAe,EAO9CvmB,qBAAqBr0D,UAAU+zD,iBAAmB,GAOlDM,qBAAqBr0D,UAAUg0D,qBAAuB,IAOtDK,qBAAqBr0D,UAAU66E,sBAAwB,GAQvDxmB,qBAAqBr0D,UAAUm0D,oBAAsB,GAQrDE,qBAAqBr0D,UAAUi0D,YAAc1yD,YAAY6W,gBAQzDi8C,qBAAqBr0D,UAAU8zE,YAAa,EAS5Czf,qBAAqBr0D,UAAUyyD,iBAAkB,EAQjD4B,qBAAqBr0D,UAAUyoE,kBAAmB,EAUlDpU,qBAAqBr0D,UAAUs+D,mBAAoB,EAOnDjK,qBAAqBr0D,UAAU8F,MAAQ,KAOvCuuD,qBAAqBr0D,UAAU86E,WAAa,KAO5CzmB,qBAAqBr0D,UAAU+6E,oBAAsB,KAOrD1mB,qBAAqBr0D,UAAUg7E,qBAAuB,KAQtD3mB,qBAAqBr0D,UAAUu3E,UAAYC,wBAAwBE,SAOnErjB,qBAAqBr0D,UAAU2hB,SAAW,WAEzC,OAAO/tB,KAAKkS,OAabuuD,qBAAqBr0D,UAAUwP,QAAU,SAASjF,EAAQioD,GAEzD5+D,KAAK2W,OAASA,EACd,IAAIzE,EAAQlS,KAAKiR,MAAMiB,MAiBvB,GAhBAlS,KAAKknF,WAAa,IAAI/6E,aACtBnM,KAAKmnF,oBAAsB,IAAIh7E,aAC/BnM,KAAKonF,qBAAuB,IAAIj7E,aAEnB,MAATyyD,GAAmBA,aAAiByoB,QAEvCzoB,EAAQ,CAACA,IAUG,MAATA,GAA2B,MAAVjoD,EAArB,CAqBA,GAdA3W,KAAKyvE,QAAU,KACfzvE,KAAK0vE,QAAU,KAEX/4D,GAAU3W,KAAK89C,MAAkC,MAA1B5rC,EAAM2vC,SAASlrC,IAAmB3W,KAAKmuE,wBAItD,OAFPjsB,EAAMliD,KAAKiR,MAAMkxC,gBAAgBxrC,MAIpC3W,KAAKyvE,QAAUvtB,EAAI9yC,EACnBpP,KAAK0vE,QAAUxtB,EAAI7yC,GAIR,MAATuvD,EACJ,CAGC,IAFA,IAAI0oB,EAAY,GAEPziF,EAAI,EAAGA,EAAI+5D,EAAMz8D,OAAQ0C,KAER,MAAV8R,GAAiBzE,EAAMu4D,WAAW9zD,EAAQioD,EAAM/5D,MAE/CqN,EAAM2vC,SAAS+c,EAAM/5D,KAEpCyiF,EAAU16E,KAAKgyD,EAAM/5D,IAIvB7E,KAAK4+D,MAAQ0oB,EAGdp1E,EAAMuZ,cACN,IAYE,IAAIy2B,EAVLliD,KAAKunF,IAAI5wE,GAEL3W,KAAKwsE,eAAiBxsE,KAAKiR,MAAM48D,gBAAgBl3D,IAEpD3W,KAAKiR,MAAMk7D,kBAAkB,CAACx1D,GAAS3W,KAAKgnF,aAAchnF,KAAK+mF,YAI5C,MAAhB/mF,KAAKyvE,SAAmC,MAAhBzvE,KAAK0vE,SAIrB,OAFPxtB,EAAMliD,KAAKiR,MAAMkxC,gBAAgBxrC,OAIpCurC,EAAMA,EAAIzyC,SACNL,EAAIpP,KAAKyvE,QACbvtB,EAAI7yC,EAAIrP,KAAK0vE,QACbx9D,EAAMu5D,YAAY90D,EAAQurC,IAI7B,QAEChwC,EAAM0Z,eAkBR60C,qBAAqBr0D,UAAUo7E,UAAY,SAAS7wE,EAAQgoD,GAE3D,IAAIC,EAAQ,GAEZ,GAAc,MAAVjoD,GAA8B,MAAZgoD,EACtB,CACC,IAAIzsD,EAAQlS,KAAKiR,MAAMiB,MACnBu1E,EAAO,KACPC,GAAW,IAEf,IAAK,IAAI7iF,KAAK85D,EACd,CACC,IAAI3sD,EAAO2sD,EAAS95D,GAEpB,GAAIqN,EAAM2vC,SAAS7vC,IAAShS,KAAKiR,MAAM65D,cAAc94D,GACrD,CAKC,IAJA,IAAIsnD,EAAQt5D,KAAKuT,SAASvB,GACtB21E,EAAS,EACTC,EAAQ,EAEH9Q,EAAI,EAAGA,EAAIxd,EAAMn3D,OAAQ20E,IAEvB92E,KAAK2/D,mBAAmBrG,EAAMwd,IAAI,IAEjC9kE,EAEV21E,IAIAC,IAIW,GAATA,GAAcD,EAAS,GAE1B/oB,EAAMhyD,KAAKoF,GAGZ,IAAIszB,EAAOqiD,EAASC,EAEhBtiD,EAAOoiD,IAEVA,EAAUpiD,EACVmiD,EAAOz1E,IAKU,GAAhB4sD,EAAMz8D,QAAuB,MAARslF,GAExB7oB,EAAMhyD,KAAK66E,GAIb,OAAO7oB,GAYR6B,qBAAqBr0D,UAAUmH,SAAW,SAASvB,GAElD,IAAI61E,EAAc7nF,KAAKknF,WAAWr7E,IAAImG,GAEtC,GAAmB,MAAf61E,EAEH,OAAOA,EAQR,IALA,IAAI31E,EAAQlS,KAAKiR,MAAMiB,MACnBoB,EAAQ,GACRw0E,EAAc9nF,KAAKiR,MAAM48D,gBAAgB77D,GACzCkB,EAAahB,EAAMiB,cAAcnB,GAE5BnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQC,EAAMkB,WAAWpB,EAAMnN,GAE/B7E,KAAKmlF,OAAOlzE,GAEfqB,EAAQA,EAAM2pE,OAAO/qE,EAAMqB,SAAStB,GAAO,GAAM,KAEzC61E,GAAgB9nF,KAAKiR,MAAM65D,cAAc74D,KAEjDqB,EAAQA,EAAM2pE,OAAO/qE,EAAMqB,SAAStB,GAAO,GAAM,KAInDqB,EAAQA,EAAM2pE,OAAO/qE,EAAMqB,SAASvB,GAAM,GAAM,IAChD,IAAIrF,EAAS,GAEb,IAAS9H,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAClC,CACC,IAAIif,EAAS9jB,KAAK2/D,mBAAmBrsD,EAAMzO,IAAI,GAC3C4Z,EAASze,KAAK2/D,mBAAmBrsD,EAAMzO,IAAI,IAE1Cif,GAAUrF,GACXqF,GAAUrF,IACRA,GAAUzM,IAAwB,MAAfhS,KAAK2W,QAAkB3W,KAAKyqE,WAAWzqE,KAAK2W,OAAQmN,EAAQ9jB,KAAK0qE,qBACnF5mD,GAAU9R,IAAwB,MAAfhS,KAAK2W,QAAkB3W,KAAKyqE,WAAWzqE,KAAK2W,OAAQ8H,EAAQze,KAAK0qE,uBAE1F/9D,EAAOC,KAAK0G,EAAMzO,IAMpB,OAFA7E,KAAKknF,WAAW36E,IAAIyF,EAAMrF,GAEnBA,GAaR8zD,qBAAqBr0D,UAAUuzD,mBAAqB,SAAS97C,EAAMC,GAElE,IAAIikE,EAAgB/nF,KAAKonF,qBAErBtjE,IAEHikE,EAAgB/nF,KAAKmnF,qBAGtB,IAAIa,EAAOD,EAAcl8E,IAAIgY,GAE7B,GAAY,MAARmkE,EAEH,OAAOA,EAGR,IAAIn2E,EAAQ7R,KAAKiR,MAAMsW,KAAKxV,SAAS8R,GAEjCD,EAAqB,MAAT/R,EAAiBA,EAAM8tD,mBAAmB77C,GAAU9jB,KAAKiR,MAAMsW,KAAKo4C,mBAAmB97C,EAAMC,GAiB7G,OAfgB,MAAZF,IAEHA,EAAqB,MAAT/R,EAAiBA,EAAM8tD,mBAAmB77C,GAAU9jB,KAAKiR,MAAMsW,KAAKo4C,mBAAmB97C,EAAMC,IAG1F,MAAZF,IAEC5jB,KAAKmlF,OAAOvhE,KAEfA,EAAW5jB,KAAKiR,MAAMiB,MAAM+vC,UAAUr+B,IAGvCmkE,EAAcx7E,IAAIsX,EAAMD,IAGlBA,GAWR68C,qBAAqBr0D,UAAUm7E,IAAM,SAAS5wE,GAG7C,IAAIsxE,EAAoB,GACpBC,EAAe,GAEnB,GAAkB,MAAdloF,KAAK4+D,OAA2B,MAAVjoD,EAC1B,CACC,IAAIwxE,EAAkB3Y,SACtBxvE,KAAKooF,kBAAkBzxE,EAAQwxE,GAE/BnoF,KAAK4+D,MAAQ,GACb,IAAIypB,GAAuB,EAG3B,IAAK,IAAI/7E,KAAO67E,EAEf,GAA4B,MAAxBA,EAAgB77E,GACpB,CACC+7E,GAAuB,EACvB,MAIF,MAAQA,GACR,CAQC,IAPA,IAAIC,EAAiBtoF,KAAKwnF,UAAU7wE,EAAQwxE,GAOnCtjF,EAAI,EAAGA,EAAIyjF,EAAenmF,OAAQ0C,IAC3C,CACC,IAAI0jF,EAAY/Y,SAChByY,EAAkBr7E,KAAK27E,GAEvBvoF,KAAKgqE,SAASse,EAAezjF,IAAI,EAAM,KAAMqjF,EAAcK,EACzDN,EAAmBE,GAGtB,IAAStjF,EAAI,EAAGA,EAAIyjF,EAAenmF,OAAQ0C,IAE1C7E,KAAK4+D,MAAMhyD,KAAK07E,EAAezjF,IAMhC,IAAK,IAAIyH,KAHT+7E,GAAuB,EAGPF,EAEf,GAA4B,MAAxBA,EAAgB77E,GACpB,CACC+7E,GAAuB,EACvB,aASH,IAASxjF,EAAI,EAAGA,EAAI7E,KAAK4+D,MAAMz8D,OAAQ0C,IAElC0jF,EAAY/Y,SAChByY,EAAkBr7E,KAAK27E,GAEvBvoF,KAAKgqE,SAAShqE,KAAK4+D,MAAM/5D,IAAI,EAAM,KAAMqjF,EAAcK,EACrDN,EAAmB,MAQvB,IAAI3nB,EAAW,EAEf,IAASz7D,EAAI,EAAGA,EAAIojF,EAAkB9lF,OAAQ0C,IAC9C,CACK0jF,EAAYN,EAAkBpjF,GAAlC,IACIgM,EAAM,GAEV,IAAK,IAAIvE,KAAOi8E,EAEf13E,EAAIjE,KAAK27E,EAAUj8E,IAGpBtM,KAAKkS,MAAQ,IAAIusD,sBAAsBz+D,KAAM6Q,EAAK7Q,KAAK4+D,MACtDjoD,EAAQ3W,KAAK6+D,iBAEd7+D,KAAKwoF,WAAW7xE,GAChB3W,KAAKyoF,gBAELzoF,KAAK0oF,cAAc/xE,GACnB2pD,EAAWtgE,KAAK2oF,eAAeroB,EAAU3pD,KAS3C8pD,qBAAqBr0D,UAAUg8E,kBAAoB,SAASp2E,EAAMrF,GAEjE,IAAIuF,EAAQlS,KAAKiR,MAAMiB,MAOvB,GALIA,EAAM2vC,SAAS7vC,IAASA,GAAQhS,KAAK2W,QAAU3W,KAAKiR,MAAM65D,cAAc94D,KAE3ErF,EAAOjB,iBAAiBG,IAAImG,IAASA,GAGlChS,KAAK0qE,mBAAqB14D,GAAQhS,KAAK2W,QACtC3W,KAAKiR,MAAM65D,cAAc94D,GAI7B,IAFA,IAAIkB,EAAahB,EAAMiB,cAAcnB,GAE5BnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQC,EAAMkB,WAAWpB,EAAMnN,GAI9B7E,KAAKmlF,OAAOlzE,IAEhBjS,KAAKooF,kBAAkBn2E,EAAOtF,KAgBlC8zD,qBAAqBr0D,UAAU+4E,OAAS,SAASnzE,GAEhD,OAAY,MAARA,GAAiC,MAAjBA,EAAKQ,UAEjBR,EAAKQ,SAAS4vC,UAoBvBqe,qBAAqBr0D,UAAU0mE,gBAAkB,SAAShvD,EAAQrF,EAAQyrD,GAEzEA,EAAwB,MAAZA,GAAoBA,EAMhC,IALA,IAAI52D,EAAQtT,KAAKuT,SAASuQ,GACtBnX,EAAS,GAIJ9H,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAClC,CACC,IAAII,EAAMjF,KAAK2/D,mBAAmBrsD,EAAMzO,IAAI,GACxCizE,EAAM93E,KAAK2/D,mBAAmBrsD,EAAMzO,IAAI,IAEvCI,GAAO6e,GAAUg0D,GAAOr5D,IAAayrD,GAAYjlE,GAAOwZ,GAAUq5D,GAAOh0D,IAE7EnX,EAAOC,KAAK0G,EAAMzO,IAIpB,OAAO8H,GAmBR8zD,qBAAqBr0D,UAAU49D,SAAW,SAASC,EAAQC,EAAUrmD,EAAM+kE,EAAaC,EAC7EZ,EAAmBE,GAE7B,GAAc,MAAVle,GAAiC,MAAf2e,EACtB,CAIC,IAAIE,EAAWp9E,iBAAiBG,IAAIo+D,GAEpC,GAA8B,MAAzB2e,EAAYE,IACQ,MAAnBX,GAA8D,MAA7BA,EAAgBW,IAyEtD,GAA6B,MAAzBD,EAAYC,GAKf,IAASjkF,EAAI,EAAGA,EAAIojF,EAAkB9lF,OAAQ0C,IAC9C,CACC,IAAI+lB,EAAOq9D,EAAkBpjF,GAE7B,GAAsB,MAAlB+lB,EAAKk+D,GACT,CACC,IAAK,IAAIx8E,KAAOse,EAEfi+D,EAAYv8E,GAAOse,EAAKte,GAKzB,OADA27E,EAAkB7xE,OAAOvR,EAAG,GACrBgkF,QA1FX,CAC8B,MAAzBA,EAAYC,KAEfD,EAAYC,GAAY7e,GAEI,MAAzB2e,EAAYE,KAEfF,EAAYE,GAAY7e,GAGD,OAApBke,UAEIA,EAAgBW,GAMxB,IAHA,IAAIx1E,EAAQtT,KAAKuT,SAAS02D,GACtB8e,EAAe,GAEVlkF,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAEjCkkF,EAAalkF,GAAM7E,KAAK2/D,mBAAmBrsD,EAAMzO,IAAI,IAASolE,EAG/D,IAAK,IAAIplE,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAEjC,IAAKqlE,GAAY6e,EAAalkF,GAC9B,CAUC,IATA,IAAI6T,EAAO1Y,KAAK2/D,mBAAmBrsD,EAAMzO,IAAKkkF,EAAalkF,IAOvDmkF,EAAW,EAEN1pB,EAAI,EAAGA,EAAIhsD,EAAMnR,OAAQm9D,IAEjC,GAAIA,GAAKz6D,EAAT,CAMC,IAAIokF,EAAYF,EAAazpB,GACbt/D,KAAK2/D,mBAAmBrsD,EAAMgsD,IAAK2pB,IAElCvwE,IAEZuwE,EAEHD,IAIAA,KAMAA,GAAY,IAEfH,EAAc7oF,KAAKgqE,SAAStxD,EAAMwxD,EAAU52D,EAAMzO,GAAI+jF,EACrDC,EAAaZ,EACbE,MAgCN,OAAOU,GAQRpoB,qBAAqBr0D,UAAUo8E,WAAa,SAAS7xE,GAEnC,IAAIspD,sBAAsBjgE,MAChC4b,QAAQjF,IAQpB8pD,qBAAqBr0D,UAAUq8E,cAAgB,WAE9CzoF,KAAKkS,MAAMynE,cACX35E,KAAKkS,MAAMooE,YAQZ7Z,qBAAqBr0D,UAAUs8E,cAAgB,SAAS/xE,GAEnC,IAAIopD,gCAAgC//D,MAC1C4b,QAAQjF,IAQvB8pD,qBAAqBr0D,UAAUu8E,eAAiB,SAASroB,EAAU3pD,GAElE,IAAIgyE,EAAiB,IAAIzoB,uBAAuBlgE,KAAMA,KAAKmgE,iBACzDngE,KAAKogE,qBAAsBpgE,KAAKqgE,YAAaC,EAC7CtgE,KAAKugE,qBAIP,OAHAooB,EAAezI,WAAalgF,KAAKkgF,WACjCyI,EAAe/sE,QAAQjF,GAEhBgyE,EAAejJ,OAAS1/E,KAAKinF,uBAGrChnF,WAAWwgE,0BAAuD,IAAzBA,qBAAuCA,0BAAuB75D,EAiCvGs/E,iBAAiB95E,UAAY,IAAI+wD,cACjC+oB,iBAAiB95E,UAAUH,YAAci6E,iBAOzCA,iBAAiB95E,UAAUwyD,MAAQ,KAOnCsnB,iBAAiB95E,UAAUmvE,UAAY,KAOvC2K,iBAAiB95E,UAAU88E,iBAAmB,GAQ9ChD,iBAAiB95E,UAAUogE,cAAe,EAS1C0Z,iBAAiB95E,UAAU+hE,wBAAyB,EAQpD+X,iBAAiB95E,UAAU26E,YAAa,EAQxCb,iBAAiB95E,UAAU46E,aAAe,GAO1Cd,iBAAiB95E,UAAU+zD,iBAAmB,GAO9C+lB,iBAAiB95E,UAAUg0D,qBAAuB,IAOlD8lB,iBAAiB95E,UAAU66E,sBAAwB,GAQnDf,iBAAiB95E,UAAUm0D,oBAAsB,GAQjD2lB,iBAAiB95E,UAAUi0D,YAAc1yD,YAAY6W,gBAQrD0hE,iBAAiB95E,UAAU8zE,YAAa,EAQxCgG,iBAAiB95E,UAAUyyD,iBAAkB,EAQ7CqnB,iBAAiB95E,UAAUyoE,kBAAmB,EAU9CqR,iBAAiB95E,UAAUs+D,mBAAoB,EAO/Cwb,iBAAiB95E,UAAU8F,MAAQ,KAOnCg0E,iBAAiB95E,UAAU86E,WAAa,KAOxCzmB,qBAAqBr0D,UAAU+6E,oBAAsB,KAOrD1mB,qBAAqBr0D,UAAUg7E,qBAAuB,KAQtD3mB,qBAAqBr0D,UAAUu3E,UAAYC,wBAAwBE,SAOnEoC,iBAAiB95E,UAAU2hB,SAAW,WAErC,OAAO/tB,KAAKkS,OAabg0E,iBAAiB95E,UAAUwP,QAAU,SAASjF,EAAQ4kE,GAErDv7E,KAAK2W,OAASA,EACd,IAAIzE,EAAQlS,KAAKiR,MAAMiB,MAYvB,GAXAlS,KAAKknF,WAAa,IAAI/6E,aACtBnM,KAAKmnF,oBAAsB,IAAIh7E,aAC/BnM,KAAKonF,qBAAuB,IAAIj7E,eASf,MAAbovE,GAAqBA,EAAUp5E,OAAS,GAA5C,CAMc,MAAVwU,IAEHA,EAASzE,EAAM+vC,UAAUs5B,EAAU,KAIpCv7E,KAAKyvE,QAAU,KACfzvE,KAAK0vE,QAAU,KAEX/4D,GAAU3W,KAAK89C,MAAkC,MAA1B5rC,EAAM2vC,SAASlrC,IAAmB3W,KAAKmuE,wBAItD,OAFPjsB,EAAMliD,KAAKiR,MAAMkxC,gBAAgBxrC,MAIpC3W,KAAKyvE,QAAUvtB,EAAI9yC,EACnBpP,KAAK0vE,QAAUxtB,EAAI7yC,GAIrBrP,KAAKu7E,UAAYA,EAIjB,IAHA,IAAI4N,EAAgB,GAGXtkF,EAAI,EAAGA,EAAI02E,EAAUp5E,OAAQ0C,IACtC,CACC,IAAIwP,EAAWrU,KAAKiR,MAAMm4E,cAAc7N,EAAU12E,IAElD,GAAgB,MAAZwP,GAAuC,GAAnBA,EAASlS,OACjC,CACC,IAAI8nE,EAASjqE,KAAKiR,MAAMo4E,aAAa9N,EAAU12E,GAAI,KAAM,KAAM,EAAG,EAAG7E,KAAKkpF,iBAAkB,GAC5FC,EAAcv8E,KAAKq9D,IAIrB/3D,EAAMuZ,cACN,IAYE,IAAIy2B,EAVLliD,KAAKunF,IAAI5wE,GAEL3W,KAAKwsE,eAAiBxsE,KAAKiR,MAAM48D,gBAAgBl3D,IAEpD3W,KAAKiR,MAAMk7D,kBAAkB,CAACx1D,GAAS3W,KAAKgnF,aAAchnF,KAAK+mF,YAI5C,MAAhB/mF,KAAKyvE,SAAmC,MAAhBzvE,KAAK0vE,SAIrB,OAFPxtB,EAAMliD,KAAKiR,MAAMkxC,gBAAgBxrC,OAIpCurC,EAAMA,EAAIzyC,SACNL,EAAIpP,KAAKyvE,QACbvtB,EAAI7yC,EAAIrP,KAAK0vE,QACbx9D,EAAMu5D,YAAY90D,EAAQurC,IAI5BliD,KAAKiR,MAAM29B,YAAYu6C,GAExB,QAECj3E,EAAM0Z,eAWRs6D,iBAAiB95E,UAAU+/D,kBAAoB,WAG9C,IAAIhiD,EAAQ,GACRjY,EAAQlS,KAAKkS,MAEjB,IAAK,IAAI5F,KAAO4F,EAAM8sD,WAIrB,IAFA,IAAIn7C,EAAO3R,EAAM8sD,WAAW1yD,GAEnBzH,EAAI,EAAGA,EAAIgf,EAAKvQ,MAAMnR,OAAQ0C,IAEtCslB,EAAMvd,KAAKiX,EAAKvQ,MAAMzO,IAIxB,IAAIykF,EAAetpF,KAAKiR,MAAMglE,2BAA2B9rD,GAAO,GAC5D0oD,EAAc,GAElB,IAAShuE,EAAI,EAAGA,EAAI7E,KAAKu7E,UAAUp5E,OAAQ0C,IAC3C,CACC,IAAI0kF,EAAOvpF,KAAKu7E,UAAU12E,GAG1B,GAAW,OAFPq9C,EAAMliD,KAAKiR,MAAMkxC,gBAAgBonC,IAGrC,CACC,IAAIl1E,EAAWrU,KAAKiR,MAAMm4E,cAAcG,GAEpC17D,EAAQ7tB,KAAKiR,MAAMu8D,WAAW+b,GAChCvpF,KAAKiR,MAAMi9D,aAAaqb,GAAQ,IAAIj6E,YAElCmX,EAASzmB,KAAKiR,MAAMglE,2BAA2B5hE,GACnDw+D,EAAYhuE,GAAK4hB,EACjB,IAAI+iE,EAAY/iE,EAAOpX,EAAI6yC,EAAI7yC,EAAIwe,EAAKhmB,OAAS7H,KAAKgnF,aAClDyC,EAAehjE,EAAOpX,EAAI6yC,EAAI7yC,EAAIoX,EAAO5e,OAE7C,GAAoB,MAAhByhF,EAEHA,EAAe,IAAIh6E,YAAY,EAAGk6E,EAAW,EAAGC,EAAeD,OAGhE,CACCF,EAAaj6E,EAAIjG,KAAK2G,IAAIu5E,EAAaj6E,EAAGm6E,GAC1C,IAAIt5E,EAAO9G,KAAKC,IAAIigF,EAAaj6E,EAAIi6E,EAAazhF,OAAQ4hF,GAC1DH,EAAazhF,OAASqI,EAAOo5E,EAAaj6E,IAM7C,IAASxK,EAAI,EAAGA,EAAI7E,KAAKu7E,UAAUp5E,OAAQ0C,IAC3C,CACC,IACIq9C,EAEJ,GAHIqnC,EAAOvpF,KAAKu7E,UAAU12E,GAGf,OAFPq9C,EAAMliD,KAAKiR,MAAMkxC,gBAAgBonC,IAGrC,CACKl1E,EAAWrU,KAAKiR,MAAMm4E,cAAcG,GAEpC17D,EAAQ7tB,KAAKiR,MAAMu8D,WAAW+b,GAChCvpF,KAAKiR,MAAMi9D,aAAaqb,GAAQ,IAAIj6E,YAHtC,IAKIo6E,EAASxnC,EAAIzyC,QAEbk6E,EAAwB,GAAL9kF,EAAU7E,KAAKgnF,aAAehnF,KAAKogE,qBAAqB,EAC3Et3D,EAAI+kB,EAAK5lB,MAAQ0hF,EACjBv6E,EAAIyjE,EAAYhuE,GAAGuK,EAAItG,EACvBuG,EAAIi6E,EAAaj6E,EAAIrP,KAAKgnF,aAE9B0C,EAAOt6E,GAAKA,EACZs6E,EAAOr6E,EAAIA,EAEXq6E,EAAOzhF,MAAQ4qE,EAAYhuE,GAAGoD,MAAQa,EAAI9I,KAAKogE,qBAAqB,EACpEspB,EAAO7hF,OAASyhF,EAAazhF,OAASgmB,EAAKhmB,OAAS,EAAI7H,KAAKgnF,aAE7DhnF,KAAKiR,MAAMiB,MAAMu5D,YAAY8d,EAAMG,GACnC1pF,KAAKiR,MAAMylE,UAAUriE,GAAWjF,EAAG8yC,EAAI7yC,EAAIA,MAmB9C62E,iBAAiB95E,UAAUo7E,UAAY,SAAS7wE,EAAQgoD,GAEvD,IAAIC,EAAQ,GAEZ,GAAc,MAAVjoD,GAA8B,MAAZgoD,EACtB,CACC,IAAIzsD,EAAQlS,KAAKiR,MAAMiB,MACnBu1E,EAAO,KACPC,GAAW,IAEf,IAAK,IAAI7iF,KAAK85D,EACd,CACC,IAAI3sD,EAAO2sD,EAAS95D,GAEpB,GAAY,MAARmN,GAAgBE,EAAM2vC,SAAS7vC,IAAShS,KAAKiR,MAAM65D,cAAc94D,IAASE,EAAMu4D,WAAW9zD,EAAQ3E,GACvG,CAKC,IAJA,IAAIsnD,EAAQt5D,KAAKuT,SAASvB,GACtB21E,EAAS,EACTC,EAAQ,EAEH9Q,EAAI,EAAGA,EAAIxd,EAAMn3D,OAAQ20E,IAClC,CACC,IAAI7xE,EAAMjF,KAAK2/D,mBAAmBrG,EAAMwd,IAAI,GAE5C,GAAI7xE,GAAO+M,EACX,CAEC,IAAIi8D,EAAQjuE,KAAK2/D,mBAAmBrG,EAAMwd,IAAI,GAE1C5kE,EAAMu4D,WAAW9zD,EAAQs3D,IAE5B0Z,SAGOz1E,EAAMu4D,WAAW9zD,EAAQ1R,IAEjC2iF,IAIW,GAATA,GAAcD,EAAS,GAE1B/oB,EAAMhyD,KAAKoF,GAGZ,IAAIszB,EAAOqiD,EAASC,EAEhBtiD,EAAOoiD,IAEVA,EAAUpiD,EACVmiD,EAAOz1E,IAKU,GAAhB4sD,EAAMz8D,QAAuB,MAARslF,GAExB7oB,EAAMhyD,KAAK66E,GAIb,OAAO7oB,GAYRsnB,iBAAiB95E,UAAUmH,SAAW,SAASvB,GAE9C,IAAI61E,EAAc7nF,KAAKknF,WAAWr7E,IAAImG,GAEtC,GAAmB,MAAf61E,EAEH,OAAOA,EAQR,IALA,IAAI31E,EAAQlS,KAAKiR,MAAMiB,MACnBoB,EAAQ,GACRw0E,EAAc9nF,KAAKiR,MAAM48D,gBAAgB77D,GACzCkB,EAAahB,EAAMiB,cAAcnB,GAE5BnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQC,EAAMkB,WAAWpB,EAAMnN,GAE/B7E,KAAKmlF,OAAOlzE,GAEfqB,EAAQA,EAAM2pE,OAAO/qE,EAAMqB,SAAStB,GAAO,GAAM,KAEzC61E,GAAgB9nF,KAAKiR,MAAM65D,cAAc74D,KAEjDqB,EAAQA,EAAM2pE,OAAO/qE,EAAMqB,SAAStB,GAAO,GAAM,KAInDqB,EAAQA,EAAM2pE,OAAO/qE,EAAMqB,SAASvB,GAAM,GAAM,IAChD,IAAIrF,EAAS,GAEb,IAAS9H,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAClC,CACC,IAAIif,EAAS9jB,KAAK2/D,mBAAmBrsD,EAAMzO,IAAI,GAC3C4Z,EAASze,KAAK2/D,mBAAmBrsD,EAAMzO,IAAI,IAE1Cif,GAAUrF,GAAaqF,GAAUrF,IAAaA,GAAUzM,IAAwB,MAAfhS,KAAK2W,QAAkB3W,KAAKiR,MAAM24E,gBAAgB9lE,EAAQ9jB,KAAK2W,OAAQ3W,KAAK0qE,qBAChJ5mD,GAAU9R,IAAwB,MAAfhS,KAAK2W,QACvB3W,KAAKiR,MAAM24E,gBAAgBnrE,EAAQze,KAAK2W,OAAQ3W,KAAK0qE,uBAEvD/9D,EAAOC,KAAK0G,EAAMzO,IAMpB,OAFA7E,KAAKknF,WAAW36E,IAAIyF,EAAMrF,GAEnBA,GAaRu5E,iBAAiB95E,UAAUuzD,mBAAqB,SAAS97C,EAAMC,GAE9D,IAAIikE,EAAgB/nF,KAAKonF,qBAErBtjE,IAEHikE,EAAgB/nF,KAAKmnF,qBAGtB,IAAIa,EAAOD,EAAcl8E,IAAIgY,GAE7B,GAAY,MAARmkE,EAEH,OAAOA,EAGR,IAAIn2E,EAAQ7R,KAAKiR,MAAMsW,KAAKxV,SAAS8R,GAEjCD,EAAqB,MAAT/R,EAAiBA,EAAM8tD,mBAAmB77C,GAAU9jB,KAAKiR,MAAMsW,KAAKo4C,mBAAmB97C,EAAMC,GAiB7G,OAfgB,MAAZF,IAEHA,EAAqB,MAAT/R,EAAiBA,EAAM8tD,mBAAmB77C,GAAU9jB,KAAKiR,MAAMsW,KAAKo4C,mBAAmB97C,EAAMC,IAG1F,MAAZF,IAEC5jB,KAAKmlF,OAAOvhE,KAEfA,EAAW5jB,KAAKiR,MAAMiB,MAAM+vC,UAAUr+B,IAGvCmkE,EAAcx7E,IAAIsX,EAAMD,IAGlBA,GAWRsiE,iBAAiB95E,UAAUm7E,IAAM,SAAS5wE,GAGzC,IAAIsxE,EAAoB,GACpBC,EAAe1Y,SAEnB,GAAsB,MAAlBxvE,KAAKu7E,WAAqBv7E,KAAKu7E,UAAUp5E,OAAS,GAAe,MAAVwU,EAC3D,CAGC,IAFA,IAAIwxE,EAAkB3Y,SAEb3qE,EAAI,EAAGA,EAAI7E,KAAKu7E,UAAUp5E,OAAQ0C,IAE1C7E,KAAKooF,kBAAkBpoF,KAAKu7E,UAAU12E,GAAIsjF,GAG3CnoF,KAAK4+D,MAAQ,GACb,IAAIypB,GAAuB,EAG3B,IAAK,IAAI/7E,KAAO67E,EAEf,GAA4B,MAAxBA,EAAgB77E,GACpB,CACC+7E,GAAuB,EACvB,MAOF,IAFA,IAAIwB,EAAc,GAEVxB,GAAwBwB,EAAc7pF,KAAKu7E,UAAUp5E,QAC7D,CACC,IAAImmF,EAAiBtoF,KAAKwnF,UAAUxnF,KAAKu7E,UAAUsO,GAAc1B,GAEjE,GAA6B,GAAzBG,EAAenmF,OAAnB,CASA,IAAS0C,EAAI,EAAGA,EAAIyjF,EAAenmF,OAAQ0C,IAC3C,CACC,IAAI0jF,EAAY/Y,SAChByY,EAAkBr7E,KAAK27E,GAEvBvoF,KAAKgqE,SAASse,EAAezjF,IAAI,EAAM,KAAMqjF,EAAcK,EACzDN,EAAmBE,EAAiB0B,GAGvC,IAAShlF,EAAI,EAAGA,EAAIyjF,EAAenmF,OAAQ0C,IAE1C7E,KAAK4+D,MAAMhyD,KAAK07E,EAAezjF,IAMhC,IAAK,IAAIyH,KAHT+7E,GAAuB,EAGPF,EAEf,GAA4B,MAAxBA,EAAgB77E,GACpB,CACC+7E,GAAuB,EACvB,YA7BDwB,UAsCF,IAAShlF,EAAI,EAAGA,EAAI7E,KAAK4+D,MAAMz8D,OAAQ0C,IAElC0jF,EAAY/Y,SAChByY,EAAkBr7E,KAAK27E,GAEvBvoF,KAAKgqE,SAAShqE,KAAK4+D,MAAM/5D,IAAI,EAAM,KAAMqjF,EAAcK,EACrDN,EAAmB,MAIvB,IAAIp3E,EAAM,GAEV,IAAK,IAAIvE,KAAO47E,EAEfr3E,EAAIjE,KAAKs7E,EAAa57E,IAGvBtM,KAAKkS,MAAQ,IAAI2tD,gBAAgB7/D,KAAM6Q,EAAK7Q,KAAK4+D,MAChDjoD,EAAQ3W,KAAK6+D,iBAEd7+D,KAAKwoF,WAAW7xE,GAChB3W,KAAKyoF,gBAELzoF,KAAK0oF,cAAc/xE,GACnB3W,KAAK2oF,eAAe,EAAGhyE,IAQxBuvE,iBAAiB95E,UAAUg8E,kBAAoB,SAASp2E,EAAMrF,GAE7D,IAAIuF,EAAQlS,KAAKiR,MAAMiB,MAOvB,GALIA,EAAM2vC,SAAS7vC,IAASA,GAAQhS,KAAK2W,QAAUzE,EAAM+vC,UAAUjwC,IAAShS,KAAK2W,QAAU3W,KAAKiR,MAAM65D,cAAc94D,KAEnHrF,EAAOjB,iBAAiBG,IAAImG,IAASA,GAGlChS,KAAK0qE,mBAAqB14D,GAAQhS,KAAK2W,QACtC3W,KAAKiR,MAAM65D,cAAc94D,GAI7B,IAFA,IAAIkB,EAAahB,EAAMiB,cAAcnB,GAE5BnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQC,EAAMkB,WAAWpB,EAAMnN,GAI9B7E,KAAKmlF,OAAOlzE,IAEhBjS,KAAKooF,kBAAkBn2E,EAAOtF,KAgBlCu5E,iBAAiB95E,UAAU+4E,OAAS,SAASnzE,GAE5C,QAAIA,EAAKQ,SAAS4vC,UAoBnB8jC,iBAAiB95E,UAAU0mE,gBAAkB,SAAShvD,EAAQrF,EAAQyrD,GAErEA,EAAwB,MAAZA,GAAoBA,EAMhC,IALA,IAAI52D,EAAQtT,KAAKuT,SAASuQ,GACtBnX,EAAS,GAIJ9H,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAClC,CACC,IAAII,EAAMjF,KAAK2/D,mBAAmBrsD,EAAMzO,IAAI,GACxCizE,EAAM93E,KAAK2/D,mBAAmBrsD,EAAMzO,IAAI,IAEvCI,GAAO6e,GAAUg0D,GAAOr5D,IAAayrD,GAAYjlE,GAAOwZ,GAAUq5D,GAAOh0D,IAE7EnX,EAAOC,KAAK0G,EAAMzO,IAIpB,OAAO8H,GAoBRu5E,iBAAiB95E,UAAU49D,SAAW,SAASC,EAAQC,EAAUrmD,EAAM+kE,EAAaC,EACzEZ,EAAmBE,EAAiB3M,GAE9C,GAAc,MAAVvR,GAAiC,MAAf2e,EACtB,CAIC,IAAIE,EAAWp9E,iBAAiBG,IAAIo+D,GAEpC,GAA8B,MAAzB2e,EAAYE,IACQ,MAAnBX,GAA8D,MAA7BA,EAAgBW,IA0DtD,GAA6B,MAAzBD,EAAYC,GAIf,IAASjkF,EAAI,EAAGA,EAAIojF,EAAkB9lF,OAAQ0C,IAC9C,CACC,IAAI+lB,EAAOq9D,EAAkBpjF,GAE7B,GAAsB,MAAlB+lB,EAAKk+D,GACT,CACC,IAAK,IAAIx8E,KAAOse,EAEfi+D,EAAYv8E,GAAOse,EAAKte,GAKzB,OADA27E,EAAkB7xE,OAAOvR,EAAG,GACrBgkF,QA1EX,CAC8B,MAAzBA,EAAYC,KAEfD,EAAYC,GAAY7e,GAEI,MAAzB2e,EAAYE,KAEfF,EAAYE,GAAY7e,GAGD,OAApBke,UAEIA,EAAgBW,GAMxB,IAHA,IAAIx1E,EAAQtT,KAAKuT,SAAS02D,GACtB/3D,EAAQlS,KAAKiR,MAAMiB,MAEdrN,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAClC,CACC,IAAIilF,EAAc9pF,KAAK2/D,mBAAmBrsD,EAAMzO,IAAI,GAChD49B,EAAWqnD,GAAe7f,EAE1BxnC,IAEHqnD,EAAc9pF,KAAK2/D,mBAAmBrsD,EAAMzO,IAAI,IAGjD,IAAIklF,EAAa,EAEjB,IAAKA,EAAa,EAAGA,EAAa/pF,KAAKu7E,UAAUp5E,SAE5C+P,EAAMu4D,WAAWzqE,KAAKu7E,UAAUwO,GAAaD,GAFOC,KAQrDA,GAAc/pF,KAAKu7E,UAAUp5E,SAQ5B4nF,EAAavO,KACbtR,GAAYznC,IAAasnD,GAAcvO,KAE3CqN,EAAc7oF,KAAKgqE,SAAS8f,EAAa5f,EAAU52D,EAAMzO,GAAI+jF,EAC3DC,EAAaZ,EACbE,EAAiB4B,MA8BvB,OAAOlB,GAQR3C,iBAAiB95E,UAAUo8E,WAAa,SAAS7xE,GAE/B,IAAI6pD,mBAAmBxgE,MAC7B4b,QAAQjF,IAQpBuvE,iBAAiB95E,UAAUq8E,cAAgB,WAE1CzoF,KAAKkS,MAAMynE,cACX35E,KAAKkS,MAAMooE,YAQZ4L,iBAAiB95E,UAAUs8E,cAAgB,SAAS/xE,GAE/B,IAAIopD,gCAAgC//D,MAC1C4b,QAAQjF,IAQvBuvE,iBAAiB95E,UAAUu8E,eAAiB,SAASroB,EAAU3pD,GAE9D,IAAIgyE,EAAiB,IAAIzoB,uBAAuBlgE,KAAMA,KAAKmgE,iBACzDngE,KAAKogE,qBAAsBpgE,KAAKqgE,YAAaC,EAC7CtgE,KAAKugE,qBAIP,OAHAooB,EAAezI,WAAalgF,KAAKkgF,WACjCyI,EAAe/sE,QAAQjF,GAEhBgyE,EAAejJ,OAAS1/E,KAAKinF,uBAGrChnF,WAAWimF,sBAA+C,IAArBA,iBAAmCA,sBAAmBt/E,EAsN3Fu/E,aAAa/5E,UAAY,IAAIw1B,cAC7BukD,aAAa/5E,UAAUH,YAAck6E,aASrCA,aAAa/5E,UAAU0xC,KAAO,KAO9BqoC,aAAa/5E,UAAU+d,MAAQ,KAQ/Bg8D,aAAa/5E,UAAU49E,oBAAqB,EAQ5C7D,aAAa/5E,UAAU69E,0BAA2B,EAQlD9D,aAAa/5E,UAAU89E,WAAY,EAOnC/D,aAAa/5E,UAAU0I,OAAS,GAOhCqxE,aAAa/5E,UAAUsO,QAAU,GAOjCyrE,aAAa/5E,UAAU+9E,OAAS,EAShChE,aAAa/5E,UAAUg6E,YAAc,KAUrCD,aAAa/5E,UAAUg+E,YAAc,EAOrCjE,aAAa/5E,UAAUi+E,cAAe,EAOtClE,aAAa/5E,UAAUF,MAAQ,WAE9BlM,KAAKsmF,QAAQtmF,KAAKsqF,eAQnBnE,aAAa/5E,UAAUm+E,YAAc,WAEpC,OAAOvqF,KAAKkqF,WAQb/D,aAAa/5E,UAAUo+E,aAAe,SAASziF,GAE9C/H,KAAKkqF,UAAYniF,GAQlBo+E,aAAa/5E,UAAUk+E,WAAa,WAEnC,IAAIt4E,EAAO,IAAI60E,OAGf,OAFA70E,EAAKy4E,OAAO,IAAI5D,QAET70E,GAaRm0E,aAAa/5E,UAAU42B,QAAU,SAAS7+B,GAEzC,OAAsB,MAAdnE,KAAKmqB,MAAiBnqB,KAAKmqB,MAAMhmB,GAAM,MAShDgiF,aAAa/5E,UAAUs+E,YAAc,SAASvgE,EAAO5O,GAEpD,IAAI5O,EAAS,KAEb,GAAa,MAATwd,EACJ,CACCxd,EAAS,GAET,IAAK,IAAI9H,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAE7B0W,EAAO4O,EAAMtlB,KAEhB8H,EAAOC,KAAKud,EAAMtlB,IAKrB,OAAO8H,GAYRw5E,aAAa/5E,UAAUu+E,eAAiB,SAASh0E,GAEhD,OAAO3W,KAAKooF,kBAAkB,KAAMzxE,IA2BrCwvE,aAAa/5E,UAAUg8E,kBAAoB,SAAS7sE,EAAQ5E,GAG3D,IAAIhK,EAAS,GAGbgK,EAASA,GAAU3W,KAAKguB,WAIV,MAAVzS,GAAkBA,EAAO5E,KAE5BhK,EAAOC,KAAK+J,GAMb,IAFA,IAAIzD,EAAalT,KAAKmT,cAAcwD,GAE3B9R,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQjS,KAAKoT,WAAWuD,EAAQ9R,GACpC8H,EAASA,EAAOswE,OAAOj9E,KAAKooF,kBAAkB7sE,EAAQtJ,IAGvD,OAAOtF,GAYRw5E,aAAa/5E,UAAU4hB,QAAU,SAAShc,GAEzC,IAAI8rC,EAAO9rC,GAAQhS,KAAK89C,KAExB,GAAY,MAAR9rC,EAEH,KAAe,MAARA,GAEN8rC,EAAO9rC,EACPA,EAAOhS,KAAKiiD,UAAUjwC,GAIxB,OAAO8rC,GAuBRqoC,aAAa/5E,UAAUk6E,QAAU,SAASxoC,GAIzC,OAFA99C,KAAK4b,QAAQ,IAAI2qE,aAAavmF,KAAM89C,IAE7BA,GAaRqoC,aAAa/5E,UAAUw+E,YAAc,SAAS9sC,GAE7C,IAAI+sC,EAAU7qF,KAAK89C,KAQnB,OAPA99C,KAAK89C,KAAOA,EAGZ99C,KAAKmqF,OAAS,EACdnqF,KAAKmqB,MAAQ,KACbnqB,KAAK8qF,UAAUhtC,GAER+sC,GAaR1E,aAAa/5E,UAAU2+E,OAAS,SAAS/4E,GAExC,OAAe,MAARA,GAAgBhS,KAAK89C,MAAQ9rC,GAYrCm0E,aAAa/5E,UAAU4gE,QAAU,SAASh7D,GAEzC,OAAOhS,KAAK+qF,OAAO/qF,KAAKiiD,UAAUjwC,KAcnCm0E,aAAa/5E,UAAUq+D,WAAa,SAAS9zD,EAAQ1E,GAEpD,KAAgB,MAATA,GAAiBA,GAAS0E,GAEhC1E,EAAQjS,KAAKiiD,UAAUhwC,GAGxB,OAAOA,GAAS0E,GAYjBwvE,aAAa/5E,UAAUsa,SAAW,SAAS1U,GAE1C,OAAOhS,KAAKyqE,WAAWzqE,KAAK89C,KAAM9rC,IAYnCm0E,aAAa/5E,UAAU61C,UAAY,SAASjwC,GAE3C,OAAgB,MAARA,EAAgBA,EAAKiwC,YAAc,MAiB5CkkC,aAAa/5E,UAAUrH,IAAM,SAAS4R,EAAQ1E,EAAOxD,GAEpD,GAAIwD,GAAS0E,GAAoB,MAAVA,GAA2B,MAAT1E,EACzC,CAEc,MAATxD,IAEHA,EAAQzO,KAAKmT,cAAcwD,IAG5B,IAAIq0E,EAAgBr0E,GAAU3W,KAAKiiD,UAAUhwC,GAC7CjS,KAAK4b,QAAQ,IAAIjK,cAAc3R,KAAM2W,EAAQ1E,EAAOxD,IAIhDzO,KAAKgqF,oBAAsBgB,GAE9BhrF,KAAKirF,kBAAkBh5E,GAIzB,OAAOA,GAyBRk0E,aAAa/5E,UAAU0+E,UAAY,SAAS94E,GAE3C,GAAY,MAARA,EACJ,CAOC,GALoB,MAAhBA,EAAKk5E,SAAmBlrF,KAAKkqF,WAEhCl4E,EAAKm5E,MAAMnrF,KAAKorF,SAASp5E,IAGN,MAAhBA,EAAKk5E,QACT,CACC,IAAIG,EAAYrrF,KAAKgjC,QAAQhxB,EAAKk5E,SAElC,GAAIG,GAAar5E,EACjB,CAGC,KAAoB,MAAbq5E,GAENr5E,EAAKm5E,MAAMnrF,KAAKorF,SAASp5E,IACzBq5E,EAAYrrF,KAAKgjC,QAAQhxB,EAAKk5E,SAIb,MAAdlrF,KAAKmqB,QAERnqB,KAAKmqB,MAAQ,IAAIqlD,QAGlBxvE,KAAKmqB,MAAMnY,EAAKk5E,SAAWl5E,GAKzB1J,QAAQygB,UAAU/W,EAAKk5E,WAE1BlrF,KAAKmqF,OAAS/gF,KAAKC,IAAIrJ,KAAKmqF,OAAQn4E,EAAKk5E,UAM1C,IAFA,IAAIh4E,EAAalT,KAAKmT,cAAcnB,GAE3BnN,EAAE,EAAGA,EAAEqO,EAAYrO,IAE3B7E,KAAK8qF,UAAU9qF,KAAKoT,WAAWpB,EAAMnN,MAiBxCshF,aAAa/5E,UAAUg/E,SAAW,SAASp5E,GAE1C,IAAI7N,EAAKnE,KAAKmqF,OAGd,OAFAnqF,KAAKmqF,SAEEnqF,KAAK8U,OAAS3Q,EAAKnE,KAAK0a,SAShCyrE,aAAa/5E,UAAU6+E,kBAAoB,SAASj5E,EAAM8rC,GAGzDA,EAAOA,GAAQ99C,KAAKguB,QAAQhc,GAK5B,IAFA,IAAIkB,EAAalT,KAAKmT,cAAcnB,GAE3BnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQjS,KAAKoT,WAAWpB,EAAMnN,GAClC7E,KAAKirF,kBAAkBh5E,EAAO6rC,GAI/B,IAAIusB,EAAYrqE,KAAKsqE,aAAat4D,GAC9BsB,EAAQ,GAEZ,IAASzO,EAAI,EAAGA,EAAIwlE,EAAWxlE,IAE9ByO,EAAM1G,KAAK5M,KAAKuqE,UAAUv4D,EAAMnN,IAGjC,IAASA,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAClC,CACC,IAAIgf,EAAOvQ,EAAMzO,GAKb7E,KAAKyqE,WAAW3sB,EAAMj6B,IAEzB7jB,KAAKsrF,iBAAiBznE,EAAMi6B,KAgB/BqoC,aAAa/5E,UAAUk/E,iBAAmB,SAASznE,EAAMi6B,GAOxD,IALA,IAAIh6B,EAAS9jB,KAAKwqE,YAAY3mD,GAAM,GAChCpF,EAASze,KAAKwqE,YAAY3mD,GAAM,GAChC7R,EAAO,KAGM,MAAV8R,IAAmB9jB,KAAKmS,OAAO2R,IAClB,MAAnBA,EAAOtR,UAAoBsR,EAAOtR,SAAS4vC,UAE3Ct+B,EAAS9jB,KAAKiiD,UAAUn+B,GAIzB,KAAiB,MAAVrF,GAAkBze,KAAKiqF,2BAC5BjqF,KAAKmS,OAAOsM,IAA8B,MAAnBA,EAAOjM,UAC/BiM,EAAOjM,SAAS4vC,UAEhB3jC,EAASze,KAAKiiD,UAAUxjC,GAGzB,GAAIze,KAAKyqE,WAAW3sB,EAAMh6B,IAAW9jB,KAAKyqE,WAAW3sB,EAAMr/B,IAW9C,OAPXzM,EAFG8R,GAAUrF,EAENze,KAAKiiD,UAAUn+B,GAIf9jB,KAAKurF,yBAAyBznE,EAAQrF,MAGzBze,KAAKiiD,UAAUjwC,IAAShS,KAAK89C,MACjD99C,KAAKyqE,WAAWz4D,EAAM6R,KAAU7jB,KAAKiiD,UAAUp+B,IAAS7R,EACzD,CACC,IAAIkwC,EAAMliD,KAAKorE,YAAYvnD,GAE3B,GAAW,MAAPq+B,EACJ,CACC,IAAIspC,EAAUxrF,KAAKyrF,UAAUzrF,KAAKiiD,UAAUp+B,IACxC6nE,EAAU1rF,KAAKyrF,UAAUz5E,GAEzBO,EAAKm5E,EAAQt8E,EAAIo8E,EAAQp8E,EACzBqD,EAAKi5E,EAAQr8E,EAAIm8E,EAAQn8E,GAE7B6yC,EAAMA,EAAIzyC,SACNkf,WAAWpc,GAAKE,GACpBzS,KAAKyrE,YAAY5nD,EAAMq+B,GAGxBliD,KAAK+E,IAAIiN,EAAM6R,EAAM7jB,KAAKmT,cAAcnB,MAW3Cm0E,aAAa/5E,UAAUq/E,UAAY,SAASz5E,GAE3C,IAAIrF,EAAS,KAEb,GAAY,MAARqF,GAIH,GAFArF,EAAS3M,KAAKyrF,UAAUzrF,KAAKiiD,UAAUjwC,KAElChS,KAAKmS,OAAOH,GACjB,CACC,IAAIkwC,EAAMliD,KAAKorE,YAAYp5D,GAEhB,MAAPkwC,IAEHv1C,EAAOyC,GAAK8yC,EAAI9yC,EAChBzC,EAAO0C,GAAK6yC,EAAI7yC,SAMlB1C,EAAS,IAAIwC,QAGd,OAAOxC,GAaRw5E,aAAa/5E,UAAUm/E,yBAA2B,SAASI,EAAOC,GAEjE,GAAa,MAATD,GAA0B,MAATC,EACrB,CAEC,IAAIpoC,EAAO/4B,WAAWC,OAAOkhE,GAE7B,GAAY,MAARpoC,GAAgBA,EAAKrhD,OAAS,EAClC,CAGC,IAAI6P,EAAO25E,EACPtmE,EAAUoF,WAAWC,OAAO1Y,GAGhC,GAAIwxC,EAAKrhD,OAASkjB,EAAQljB,OAC1B,CACC6P,EAAO45E,EACP,IAAI/6E,EAAMwU,EACVA,EAAUm+B,EACVA,EAAO3yC,EAGR,KAAe,MAARmB,GACP,CACC,IAAI2E,EAAS3W,KAAKiiD,UAAUjwC,GAG5B,GAAyD,GAArDwxC,EAAKjjD,QAAQ8kB,EAAUoF,WAAWE,iBAAkC,MAAVhU,EAE7D,OAAO3E,EAGRqT,EAAUoF,WAAWohE,cAAcxmE,GACnCrT,EAAO2E,IAKV,OAAO,MAcRwvE,aAAa/5E,UAAUK,OAAS,SAASuF,GAWxC,OATIA,GAAQhS,KAAK89C,KAEhB99C,KAAKsmF,QAAQ,MAEmB,MAAxBtmF,KAAKiiD,UAAUjwC,IAEvBhS,KAAK4b,QAAQ,IAAIjK,cAAc3R,KAAM,KAAMgS,IAGrCA,GAYRm0E,aAAa/5E,UAAU0/E,YAAc,SAAS95E,GAE7C,GAAY,MAARA,GAA8B,MAAdhS,KAAKmqB,MACzB,CAIC,IAFA,IAEStlB,EAFQ7E,KAAKmT,cAAcnB,GAEV,EAAGnN,GAAK,EAAGA,IAEpC7E,KAAK8rF,YAAY9rF,KAAKoT,WAAWpB,EAAMnN,IAItB,MAAd7E,KAAKmqB,OAAiC,MAAhBnY,EAAKk5E,gBAEvBlrF,KAAKmqB,MAAMnY,EAAKk5E,WAkB1B/E,aAAa/5E,UAAU2/E,qBAAuB,SAAS/5E,EAAM2E,EAAQlI,GAEpE,IAAIjC,EAAWxM,KAAKiiD,UAAUjwC,GAE9B,GAAc,MAAV2E,EAECA,GAAUnK,GAAYA,EAASsgE,SAAS96D,IAASvD,GAEpDkI,EAAO8zE,OAAOz4E,EAAMvD,QAGjB,GAAgB,MAAZjC,EACT,CACC,IAAIw/E,EAAWx/E,EAASsgE,SAAS96D,GACjCxF,EAASC,OAAOu/E,GAIjB,IAAIC,EAAMjsF,KAAK0mB,SAAS/P,GACpB6a,EAAMxxB,KAAK0mB,SAASla,GAWxB,OATIy/E,IAAQz6D,EAEXxxB,KAAK8qF,UAAU94E,GAEPwf,IAAQy6D,GAEhBjsF,KAAK8rF,YAAY95E,GAGXxF,GAYR25E,aAAa/5E,UAAU+G,cAAgB,SAASnB,GAE/C,OAAgB,MAARA,EAAgBA,EAAKmB,gBAAkB,GAahDgzE,aAAa/5E,UAAUgH,WAAa,SAASpB,EAAMvD,GAElD,OAAgB,MAARuD,EAAgBA,EAAKoB,WAAW3E,GAAS,MAalD03E,aAAa/5E,UAAU8/E,YAAc,SAASl6E,GAE7C,OAAgB,MAARA,EAAgBA,EAAKqC,SAAW,MAYzC8xE,aAAa/5E,UAAU+yD,iBAAmB,SAASxoD,GAElD,OAAO3W,KAAKopF,cAAczyE,GAAQ,GAAM,IAYzCwvE,aAAa/5E,UAAU+/E,cAAgB,SAASx1E,GAE/C,OAAO3W,KAAKopF,cAAczyE,GAAQ,GAAO,IAiB1CwvE,aAAa/5E,UAAUg9E,cAAgB,SAASzyE,EAAQgoD,EAAUrrD,GAEjEqrD,EAAwB,MAAZA,GAAoBA,EAChCrrD,EAAkB,MAATA,GAAiBA,EAK1B,IAHA,IAAIJ,EAAalT,KAAKmT,cAAcwD,GAChChK,EAAS,GAEJ9H,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQjS,KAAKoT,WAAWuD,EAAQ9R,KAE9ByO,IAAUqrD,GAAcrrD,GAAStT,KAAKmS,OAAOF,IACjD0sD,GAAY3+D,KAAK6hD,SAAS5vC,KAE3BtF,EAAOC,KAAKqF,GAId,OAAOtF,GAcRw5E,aAAa/5E,UAAUo+D,YAAc,SAAS3mD,EAAM4e,GAEnD,OAAgB,MAAR5e,EAAgBA,EAAK2mD,YAAY/nC,GAAY,MAkBtD0jD,aAAa/5E,UAAUggF,YAAc,SAASvoE,EAAMD,EAAU6e,GAE7D,IAAI4pD,EAAkBzoE,GAAY5jB,KAAKwqE,YAAY3mD,EAAM4e,GAQzD,OAPAziC,KAAK4b,QAAQ,IAAInK,iBAAiBzR,KAAM6jB,EAAMD,EAAU6e,IAEpDziC,KAAKgqF,oBAAsBqC,GAE9BrsF,KAAKsrF,iBAAiBznE,EAAM7jB,KAAKguB,WAG3BpK,GAeRuiE,aAAa/5E,UAAUkgF,aAAe,SAASzoE,EAAMC,EAAQrF,GAE5Dze,KAAKyrB,cACL,IAECzrB,KAAKosF,YAAYvoE,EAAMC,GAAQ,GAC/B9jB,KAAKosF,YAAYvoE,EAAMpF,GAAQ,GAEhC,QAECze,KAAK4rB,cAiBPu6D,aAAa/5E,UAAUmgF,uBAAyB,SAAS1oE,EAAMD,EAAU6e,GAExE,IAAIj2B,EAAWxM,KAAKwqE,YAAY3mD,EAAM4e,GAWtC,OATgB,MAAZ7e,EAEHA,EAAS4oE,WAAW3oE,EAAM4e,GAEN,MAAZj2B,GAERA,EAASigF,WAAW5oE,EAAM4e,GAGpBj2B,GAYR25E,aAAa/5E,UAAUk+D,aAAe,SAASt4D,GAE9C,OAAgB,MAARA,EAAgBA,EAAKs4D,eAAiB,GAc/C6b,aAAa/5E,UAAUm+D,UAAY,SAASv4D,EAAMvD,GAEjD,OAAgB,MAARuD,EAAgBA,EAAKu4D,UAAU97D,GAAS,MAgBjD03E,aAAa/5E,UAAUsgF,qBAAuB,SAAS16E,EAAM26E,EAAUC,GAKtE,IAHA,IAAI1xE,EAAQ,EACRmvD,EAAYrqE,KAAKsqE,aAAat4D,GAEzBnN,EAAI,EAAGA,EAAIwlE,EAAWxlE,IAC/B,CACC,IAAIgf,EAAO7jB,KAAKuqE,UAAUv4D,EAAMnN,GAE5Bgf,GAAQ+oE,GAAe5sF,KAAKwqE,YAAY3mD,EAAM8oE,IAAa36E,GAE9DkJ,IAIF,OAAOA,GAaRirE,aAAa/5E,UAAUkjE,eAAiB,SAASt9D,GAEhD,OAAOhS,KAAKuT,SAASvB,GAAM,GAAM,GAAM,IAaxCm0E,aAAa/5E,UAAUygF,iBAAmB,SAAS76E,GAElD,OAAOhS,KAAKuT,SAASvB,GAAM,GAAM,GAAO,IAazCm0E,aAAa/5E,UAAU0gF,iBAAmB,SAAS96E,GAElD,OAAOhS,KAAKuT,SAASvB,GAAM,GAAO,GAAM,IAqBzCm0E,aAAa/5E,UAAUmH,SAAW,SAASvB,EAAM+6E,EAAUJ,EAAUK,GAEpED,EAAwB,MAAZA,GAAoBA,EAChCJ,EAAwB,MAAZA,GAAoBA,EAChCK,EAAgC,MAAhBA,GAAwBA,EAKxC,IAHA,IAAI3iB,EAAYrqE,KAAKsqE,aAAat4D,GAC9BrF,EAAS,GAEJ9H,EAAI,EAAGA,EAAIwlE,EAAWxlE,IAC/B,CACC,IAAIgf,EAAO7jB,KAAKuqE,UAAUv4D,EAAMnN,GAC5Bif,EAAS9jB,KAAKwqE,YAAY3mD,GAAM,GAChCpF,EAASze,KAAKwqE,YAAY3mD,GAAM,IAE/BmpE,GAAgBlpE,GAAUrF,GAAaqF,GAAUrF,IAAasuE,GAAYtuE,GAAUzM,GACvF26E,GAAY7oE,GAAU9R,KAEvBrF,EAAOC,KAAKiX,GAId,OAAOlX,GAmBRw5E,aAAa/5E,UAAU0mE,gBAAkB,SAAShvD,EAAQrF,EAAQyrD,GAEjEA,EAAwB,MAAZA,GAAoBA,EAEhC,IAAI1F,EAAOxkE,KAAKsqE,aAAaxmD,GACzBmpE,EAAOjtF,KAAKsqE,aAAa7rD,GAGzBmF,EAAWE,EACXumD,EAAY7F,EAIZyoB,EAAOzoB,IAEV6F,EAAY4iB,EACZrpE,EAAWnF,GAOZ,IAJA,IAAI9R,EAAS,GAIJ9H,EAAI,EAAGA,EAAIwlE,EAAWxlE,IAC/B,CACC,IAAIgf,EAAO7jB,KAAKuqE,UAAU3mD,EAAU/e,GAChCI,EAAMjF,KAAKwqE,YAAY3mD,GAAM,GAC7Bi0D,EAAM93E,KAAKwqE,YAAY3mD,GAAM,IACZ5e,GAAO6e,GAAYg0D,GAAOr5D,IAGxByrD,GAFF4N,GAAOh0D,GAAY7e,GAAOwZ,IAI9C9R,EAAOC,KAAKiX,GAId,OAAOlX,GAmBRw5E,aAAa/5E,UAAU8pE,aAAe,SAAS5iE,EAAOsQ,EAAUspE,EAASC,GAExED,EAAsB,MAAXA,GAAmBA,EAC9BC,EAAsB,MAAXA,GAAmBA,EAE9B,IAAIC,EAAY,GAEhB,GAAa,MAAT95E,EAEH,IAAK,IAAIzO,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAClC,CACC,IAAIif,EAAS9jB,KAAKwqE,YAAYl3D,EAAMzO,IAAI,GACpC4Z,EAASze,KAAKwqE,YAAYl3D,EAAMzO,IAAI,GAKpCif,GAAUF,GAAsB,MAAVnF,GAAkBA,GAAUmF,GAAYupE,EAEjEC,EAAUxgF,KAAK6R,GAMPA,GAAUmF,GAAsB,MAAVE,GAAkBA,GAAUF,GAAYspE,GAEtEE,EAAUxgF,KAAKkX,GAKlB,OAAOspE,GAcRjH,aAAa/5E,UAAU2iC,gBAAkB,SAAS5kB,GAKjD,IAHA,IAAI1K,EAAO,IAAItT,aACX0E,EAAM,GAEDhM,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC4a,EAAKlT,IAAI4d,EAAMtlB,IAAI,GAGpB,IAASA,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CAKC,IAJA,IAAImN,EAAOmY,EAAMtlB,GACbwoF,GAAU,EACV12E,EAAS3W,KAAKiiD,UAAUjwC,GAEX,MAAV2E,GACP,CACC,GAAI8I,EAAK5T,IAAI8K,GACb,CACC02E,GAAU,EACV,MAGD12E,EAAS3W,KAAKiiD,UAAUtrC,GAGrB02E,GAEHx8E,EAAIjE,KAAKoF,GAIX,OAAOnB,GAYRs1E,aAAa/5E,UAAUy1C,SAAW,SAAS7vC,GAE1C,OAAgB,MAARA,GAAgBA,EAAK6vC,YAY9BskC,aAAa/5E,UAAU+F,OAAS,SAASH,GAExC,OAAgB,MAARA,GAAgBA,EAAKG,UAc9Bg0E,aAAa/5E,UAAUkhF,cAAgB,SAASt7E,GAE/C,OAAgB,MAARA,GAAgBA,EAAKs7E,iBAY9BnH,aAAa/5E,UAAU2S,SAAW,SAAS/M,GAE1C,OAAgB,MAARA,EAAgBA,EAAK+M,WAAa,MAc3ConE,aAAa/5E,UAAUmhF,SAAW,SAASv7E,EAAMjK,GAIhD,OAFA/H,KAAK4b,QAAQ,IAAIlK,cAAc1R,KAAMgS,EAAMjK,IAEpCA,GAuBRo+E,aAAa/5E,UAAUohF,oBAAsB,SAASx7E,EAAMjK,GAE3D,OAAOiK,EAAKy7E,aAAa1lF,IAY1Bo+E,aAAa/5E,UAAUg/D,YAAc,SAASp5D,GAE7C,OAAgB,MAARA,EAAgBA,EAAKo5D,cAAgB,MAe9C+a,aAAa/5E,UAAUq/D,YAAc,SAASz5D,EAAMQ,GAOnD,OALIA,GAAYxS,KAAKorE,YAAYp5D,IAEhChS,KAAK4b,QAAQ,IAAIpK,iBAAiBxR,KAAMgS,EAAMQ,IAGxCA,GASR2zE,aAAa/5E,UAAUshF,uBAAyB,SAAS17E,EAAMQ,GAE9D,IAAIhG,EAAWxM,KAAKorE,YAAYp5D,GAGhC,OAFAA,EAAKy5D,YAAYj5D,GAEVhG,GAYR25E,aAAa/5E,UAAUuf,SAAW,SAAS3Z,GAE1C,OAAgB,MAARA,EAAgBA,EAAK2Z,WAAa,MAe3Cw6D,aAAa/5E,UAAUsf,SAAW,SAAS1Z,EAAMtK,GAOhD,OALIA,GAAS1H,KAAK2rB,SAAS3Z,IAE1BhS,KAAK4b,QAAQ,IAAIhK,cAAc5R,KAAMgS,EAAMtK,IAGrCA,GAeRy+E,aAAa/5E,UAAUuhF,oBAAsB,SAAS37E,EAAMtK,GAE3D,IAAI8E,EAAWxM,KAAK2rB,SAAS3Z,GAG7B,OAFAA,EAAK0Z,SAAShkB,GAEP8E,GAYR25E,aAAa/5E,UAAU07E,YAAc,SAAS91E,GAE7C,OAAgB,MAARA,GAAgBA,EAAK81E,eAc9B3B,aAAa/5E,UAAUwhF,aAAe,SAAS57E,EAAM00E,GAOpD,OALIA,GAAa1mF,KAAK8nF,YAAY91E,IAEjChS,KAAK4b,QAAQ,IAAI6qE,iBAAiBzmF,KAAMgS,EAAM00E,IAGxCA,GAeRP,aAAa/5E,UAAUyhF,6BAA+B,SAAS77E,EAAM00E,GAEpE,IAAIl6E,EAAWxM,KAAK8nF,YAAY91E,GAGhC,OAFAA,EAAK47E,aAAalH,GAEXl6E,GAYR25E,aAAa/5E,UAAU3B,UAAY,SAASuH,GAE3C,OAAgB,MAARA,GAAgBA,EAAKvH,aAc9B07E,aAAa/5E,UAAUzB,WAAa,SAASqH,EAAMpH,GAOlD,OALIA,GAAW5K,KAAKyK,UAAUuH,IAE7BhS,KAAK4b,QAAQ,IAAI+qE,gBAAgB3mF,KAAMgS,EAAMpH,IAGvCA,GAeRu7E,aAAa/5E,UAAU0hF,2BAA6B,SAAS97E,EAAMpH,GAElE,IAAI4B,EAAWxM,KAAKyK,UAAUuH,GAG9B,OAFAA,EAAKrH,WAAWC,GAET4B,GAkBR25E,aAAa/5E,UAAUwP,QAAU,SAASrK,GAEzCA,EAAOqK,UACP5b,KAAKyrB,cACLzrB,KAAKomF,YAAYrhF,IAAIwM,GACrBvR,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ8/B,QAAS,SAAUx4B,IAE5DvR,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ+/B,SAAU,SAAUz4B,IAC7DvR,KAAK4rB,aA0CNu6D,aAAa/5E,UAAUqf,YAAc,WAEpCzrB,KAAKoqF,cACLpqF,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQggC,eAEjB,GAApBjqC,KAAKoqF,aAERpqF,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQigC,cAkB3Ci8C,aAAa/5E,UAAUwf,UAAY,WASlC,GAPA5rB,KAAKoqF,cAEmB,GAApBpqF,KAAKoqF,aAERpqF,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQmgC,YAGrCpqC,KAAKqqF,aACV,CACCrqF,KAAKqqF,aAAmC,GAApBrqF,KAAKoqF,YACzBpqF,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQkgC,WAAY,OAAQnqC,KAAKomF,cAElE,IAEC,GAAIpmF,KAAKqqF,eAAiBrqF,KAAKomF,YAAY13C,UAC3C,CACC1uC,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQogC,YAAa,OAAQrqC,KAAKomF,cACnE,IAAIv1E,EAAM7Q,KAAKomF,YACfpmF,KAAKomF,YAAcpmF,KAAKqmF,qBACxBx1E,EAAI4pC,SACJz6C,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQqgC,KAAM,OAAQz5B,KAGzD,QAEC7Q,KAAKqqF,cAAe,KAiBvBlE,aAAa/5E,UAAUi6E,mBAAqB,SAASt1C,GAEpD,IAAIiK,EAAO,IAAIlK,eAAe9wC,KAAsB,MAAf+wC,GAAuBA,GAW5D,OATAiK,EAAKP,OAAS,WAGbO,EAAKl3B,OAAO0f,UAAU,IAAIhC,cAAcv3B,QAAQugC,OAC/C,OAAQwQ,EAAM,UAAWA,EAAK9pC,UAC/B8pC,EAAKl3B,OAAO0f,UAAU,IAAIhC,cAAcv3B,QAAQwgC,OAC/C,OAAQuQ,EAAM,UAAWA,EAAK9pC,WAGzB8pC,GAeRmrC,aAAa/5E,UAAU2hF,cAAgB,SAASr6E,EAAMs6E,EAAIC,GAEzDA,EAAkC,MAAjBA,GAAyBA,EAE1CjuF,KAAKyrB,cACL,IAEC,IAAIyiE,EAAU,IAAI1e,OAMlB,IAAK,IAAIljE,KALTtM,KAAKmuF,kBAAkBz6E,EAAMs6E,EAAIC,EAAeC,GAKhCA,EAChB,CACC,IAAIl8E,EAAOk8E,EAAQ5hF,GACfsX,EAAW5jB,KAAKwqE,YAAYx4D,GAAM,GAEtB,MAAZ4R,IAEHA,EAAWsqE,EAAQzjE,WAAWC,OAAO9G,IACrC5jB,KAAKosF,YAAYp6E,EAAM4R,GAAU,IAKlB,OAFhBA,EAAW5jB,KAAKwqE,YAAYx4D,GAAM,MAIjC4R,EAAWsqE,EAAQzjE,WAAWC,OAAO9G,IACrC5jB,KAAKosF,YAAYp6E,EAAM4R,GAAU,KAIpC,QAEC5jB,KAAK4rB,cAYPu6D,aAAa/5E,UAAU+hF,kBAAoB,SAASz6E,EAAMs6E,EAAIC,EAAeC,GAE5EluF,KAAKyrB,cACL,IAIC,IAFA,IAAIvY,EAAaQ,EAAKP,gBAEbtO,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAImN,EAAO0B,EAAKN,WAAWvO,GAE3B,GAA0B,mBAAfmN,EAAU,MACrB,CACC,IAAI7N,EAAK6N,EAAKk5E,QACVzsE,EAAgB,MAANta,GAAgBnE,KAAKmS,OAAOH,IAAUi8E,EAC/B,KAAnBjuF,KAAKgjC,QAAQ7+B,GAGf,GAAc,MAAVsa,EACJ,CACC,IAAIhP,EAAQuC,EAAKvC,QACjBA,EAAM07E,MAAMhnF,GAIZsL,EAAM28E,YAAYp6E,EAAKw4D,aAAY,IAAO,GAC1C/6D,EAAM28E,YAAYp6E,EAAKw4D,aAAY,IAAQ,GAK3C/rD,EAASuvE,EAAGvD,OAAOh7E,GACnBzP,KAAK8qF,UAAUrsE,GAIhByvE,EAAQzjE,WAAWC,OAAO1Y,IAASyM,EAGnCze,KAAKmuF,kBAAkBn8E,EAAMyM,EAAQwvE,EAAeC,KAIvD,QAECluF,KAAK4rB,cAcPu6D,aAAa/5E,UAAUgiF,WAAa,SAASjkE,GAE5C,IAAIkkE,EAAU,GAEd,GAAa,MAATlkE,EAIH,IAFA,IAAI1K,EAAO,IAAItT,aAENtH,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CACC,IAAI8R,EAAS3W,KAAKiiD,UAAU93B,EAAMtlB,IAEpB,MAAV8R,GAAmB8I,EAAK5T,IAAI8K,KAE/B8I,EAAKlT,IAAIoK,GAAQ,GACjB03E,EAAQzhF,KAAK+J,IAKhB,OAAO03E,GAiBRlI,aAAa/5E,UAAUkiF,UAAY,SAASt8E,GAE3C,OAAY,MAARA,EAEIhS,KAAKgvC,WAAW,CAACh9B,IAAO,GAAM,GAG/B,MAkBRm0E,aAAa/5E,UAAU4iC,WAAa,SAAS7kB,EAAOokE,EAAiBL,GAEpEA,EAAsB,MAAXA,EAAmBA,EAAU,IAAI1e,OAG5C,IAFA,IAAIgf,EAAS,GAEJ3pF,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjB,MAAZslB,EAAMtlB,GAET2pF,EAAO5hF,KAAK5M,KAAKyuF,cAActkE,EAAMtlB,GAAIqpF,EAASK,IAIlDC,EAAO5hF,KAAK,MAId,IAAS/H,EAAI,EAAGA,EAAI2pF,EAAOrsF,OAAQ0C,IAEjB,MAAb2pF,EAAO3pF,IAEV7E,KAAK0uF,aAAaF,EAAO3pF,GAAIslB,EAAMtlB,GAAIqpF,GAIzC,OAAOM,GAQRrI,aAAa/5E,UAAUqiF,cAAgB,SAASz8E,EAAMk8E,EAASK,GAE9D,IAAII,EAAQjjF,iBAAiBG,IAAImG,GAC7BvC,EAAQy+E,EAAQS,GAEpB,GAAa,MAATl/E,IAEHA,EAAQzP,KAAK4uF,WAAW58E,GACxBk8E,EAAQS,GAASl/E,EAEb8+E,GAIH,IAFA,IAAIr7E,EAAalT,KAAKmT,cAAcnB,GAE3BnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIgqF,EAAa7uF,KAAKyuF,cACrBzuF,KAAKoT,WAAWpB,EAAMnN,GAAIqpF,GAAS,GACpCz+E,EAAMg7E,OAAOoE,GAKhB,OAAOp/E,GASR02E,aAAa/5E,UAAUwiF,WAAa,SAAS58E,GAE5C,OAAOA,EAAKvC,SASb02E,aAAa/5E,UAAUsiF,aAAe,SAASj/E,EAAOuC,EAAMk8E,GAE3D,IAAIpqE,EAAS9jB,KAAKwqE,YAAYx4D,GAAM,GAEtB,MAAV8R,GAIQ,OAFPjT,EAAMq9E,EAAQxiF,iBAAiBG,IAAIiY,MAItCjT,EAAI27E,WAAW/8E,GAAO,GAIxB,IAIKoB,EAJD4N,EAASze,KAAKwqE,YAAYx4D,GAAM,GAEtB,MAAVyM,GAIQ,OAFP5N,EAAMq9E,EAAQxiF,iBAAiBG,IAAI4S,MAItC5N,EAAI27E,WAAW/8E,GAAO,GAMxB,IAFA,IAAIyD,EAAalT,KAAKmT,cAAc1D,GAE3B5K,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/B7E,KAAK0uF,aAAa1uF,KAAKoT,WAAW3D,EAAO5K,GACxC7E,KAAKoT,WAAWpB,EAAMnN,GAAIqpF,IA+B7B3H,aAAan6E,UAAUwP,QAAU,WAEhC5b,KAAK89C,KAAO99C,KAAKwM,SACjBxM,KAAKwM,SAAWxM,KAAKkS,MAAM04E,YAAY5qF,KAAKwM,WA+B7CmF,cAAcvF,UAAUwP,QAAU,WAEjC,GAAkB,MAAd5b,KAAKiS,MACT,CACC,IAAIpB,EAAM7Q,KAAKkS,MAAM+vC,UAAUjiD,KAAKiS,OAChCg7E,EAAe,MAAPp8E,EAAeA,EAAIi8D,SAAS9sE,KAAKiS,OAAS,EAEjC,MAAjBjS,KAAKwM,UAERxM,KAAK8uF,QAAQ9uF,KAAKiS,OAAO,GAG1BpB,EAAM7Q,KAAKkS,MAAM65E,qBAChB/rF,KAAKiS,MAAOjS,KAAKwM,SAAUxM,KAAKwmF,eAEZ,MAAjBxmF,KAAKwM,UAERxM,KAAK8uF,QAAQ9uF,KAAKiS,OAAO,GAG1BjS,KAAK2W,OAAS3W,KAAKwM,SACnBxM,KAAKwM,SAAWqE,EAChB7Q,KAAKyO,MAAQzO,KAAKwmF,cAClBxmF,KAAKwmF,cAAgByG,IAWvBt7E,cAAcvF,UAAU0iF,QAAU,SAAS98E,EAAM+8E,GAEhDA,EAA0B,MAAbA,GAAqBA,EAElC,IAAIjrE,EAAS9R,EAAKw4D,aAAY,GAC1B/rD,EAASzM,EAAKw4D,aAAY,GAEhB,MAAV1mD,IAECirE,EAEH/uF,KAAKkS,MAAMq6E,uBAAuBv6E,EAAM8R,GAAQ,GAIhD9jB,KAAKkS,MAAMq6E,uBAAuBv6E,EAAM,MAAM,IAIlC,MAAVyM,IAECswE,EAEH/uF,KAAKkS,MAAMq6E,uBAAuBv6E,EAAMyM,GAAQ,GAIhDze,KAAKkS,MAAMq6E,uBAAuBv6E,EAAM,MAAM,IAIhDA,EAAKo6E,YAAYtoE,GAAQ,GACzB9R,EAAKo6E,YAAY3tE,GAAQ,GAIzB,IAFA,IAAIvL,EAAalT,KAAKkS,MAAMiB,cAAcnB,GAEjCnN,EAAE,EAAGA,EAAEqO,EAAYrO,IAE3B7E,KAAK8uF,QAAQ9uF,KAAKkS,MAAMkB,WAAWpB,EAAMnN,GAAIkqF,IA6B/Ct9E,iBAAiBrF,UAAUwP,QAAU,WAEnB,MAAb5b,KAAKgS,OAERhS,KAAK4jB,SAAW5jB,KAAKwM,SACrBxM,KAAKwM,SAAWxM,KAAKkS,MAAMq6E,uBAC1BvsF,KAAKgS,KAAMhS,KAAKwM,SAAUxM,KAAK8jB,UA4BlCpS,cAActF,UAAUwP,QAAU,WAEhB,MAAb5b,KAAKgS,OAERhS,KAAK+H,MAAQ/H,KAAKwM,SAClBxM,KAAKwM,SAAWxM,KAAKkS,MAAMs7E,oBAC1BxtF,KAAKgS,KAAMhS,KAAKwM,YA4BnBoF,cAAcxF,UAAUwP,QAAU,WAEhB,MAAb5b,KAAKgS,OAERhS,KAAK0H,MAAQ1H,KAAKwM,SAClBxM,KAAKwM,SAAWxM,KAAKkS,MAAMy7E,oBAC1B3tF,KAAKgS,KAAMhS,KAAKwM,YA4BnBgF,iBAAiBpF,UAAUwP,QAAU,WAEnB,MAAb5b,KAAKgS,OAERhS,KAAKwS,SAAWxS,KAAKwM,SACrBxM,KAAKwM,SAAWxM,KAAKkS,MAAMw7E,uBAC1B1tF,KAAKgS,KAAMhS,KAAKwM,YA4BnBi6E,iBAAiBr6E,UAAUwP,QAAU,WAEnB,MAAb5b,KAAKgS,OAERhS,KAAK0mF,UAAY1mF,KAAKwM,SACtBxM,KAAKwM,SAAWxM,KAAKkS,MAAM27E,6BAC1B7tF,KAAKgS,KAAMhS,KAAKwM,YA4BnBm6E,gBAAgBv6E,UAAUwP,QAAU,WAElB,MAAb5b,KAAKgS,OAERhS,KAAK4K,QAAU5K,KAAKwM,SACpBxM,KAAKwM,SAAWxM,KAAKkS,MAAM47E,2BAC1B9tF,KAAKgS,KAAMhS,KAAKwM,YAkDnBo6E,sBAAsBx6E,UAAUwP,QAAU,WAEzC,GAAiB,MAAb5b,KAAKgS,KACT,CACC,IAAInB,EAAM7Q,KAAKgS,KAAK2D,aAAa3V,KAAK25D,WAEjB,MAAjB35D,KAAKwM,SAERxM,KAAKgS,KAAKjK,MAAM4jD,gBAAgB3rD,KAAK25D,WAIrC35D,KAAKgS,KAAK3N,aAAarE,KAAK25D,UAAW35D,KAAKwM,UAG7CxM,KAAKwM,SAAWqE,IAIlB5Q,WAAWkmF,kBAAuC,IAAjBA,aAA+BA,kBAAev/E,EAqF/EigF,OAAOz6E,UAAUjI,GAAK,KAOtB0iF,OAAOz6E,UAAUrE,MAAQ,KAOzB8+E,OAAOz6E,UAAUoG,SAAW,KAQ5Bq0E,OAAOz6E,UAAU1E,MAAQ,KAOzBm/E,OAAOz6E,UAAU69D,QAAS,EAO1B4c,OAAOz6E,UAAUyX,MAAO,EAOxBgjE,OAAOz6E,UAAU4iF,aAAc,EAO/BnI,OAAOz6E,UAAUxB,SAAU,EAO3Bi8E,OAAOz6E,UAAUs6E,WAAY,EAO7BG,OAAOz6E,UAAUuK,OAAS,KAO1BkwE,OAAOz6E,UAAU0X,OAAS,KAO1B+iE,OAAOz6E,UAAUqS,OAAS,KAO1BooE,OAAOz6E,UAAUiI,SAAW,KAO5BwyE,OAAOz6E,UAAUkH,MAAQ,KAWzBuzE,OAAOz6E,UAAU6iF,YAAc,CAAC,KAAM,QAAS,SAAU,SACzB,SAAU,WAAY,SAOtDpI,OAAOz6E,UAAU8+E,MAAQ,WAExB,OAAOlrF,KAAKmE,IAQb0iF,OAAOz6E,UAAU++E,MAAQ,SAAShnF,GAEjCnE,KAAKmE,GAAKA,GASX0iF,OAAOz6E,UAAU2S,SAAW,WAE3B,OAAO/e,KAAK+H,OASb8+E,OAAOz6E,UAAUmhF,SAAW,SAASxlF,GAEpC/H,KAAK+H,MAAQA,GAWd8+E,OAAOz6E,UAAUqhF,aAAe,SAASyB,GAExC,IAAI1iF,EAAWxM,KAAK+e,WAGpB,OAFA/e,KAAKutF,SAAS2B,GAEP1iF,GAQRq6E,OAAOz6E,UAAUg/D,YAAc,WAE9B,OAAOprE,KAAKwS,UAQbq0E,OAAOz6E,UAAUq/D,YAAc,SAASj5D,GAEvCxS,KAAKwS,SAAWA,GAQjBq0E,OAAOz6E,UAAUuf,SAAW,WAE3B,OAAO3rB,KAAK0H,OAQbm/E,OAAOz6E,UAAUsf,SAAW,SAAShkB,GAEpC1H,KAAK0H,MAAQA,GAQdm/E,OAAOz6E,UAAUy1C,SAAW,WAE3B,OAAsB,GAAf7hD,KAAKiqE,QAab4c,OAAOz6E,UAAU+iF,UAAY,SAASllB,GAErCjqE,KAAKiqE,OAASA,GAQf4c,OAAOz6E,UAAU+F,OAAS,WAEzB,OAAoB,GAAbnS,KAAK6jB,MAabgjE,OAAOz6E,UAAUgjF,QAAU,SAASvrE,GAEnC7jB,KAAK6jB,KAAOA,GAQbgjE,OAAOz6E,UAAUkhF,cAAgB,WAEhC,OAA2B,GAApBttF,KAAKgvF,aAYbnI,OAAOz6E,UAAUijF,eAAiB,SAASL,GAE1ChvF,KAAKgvF,YAAcA,GAQpBnI,OAAOz6E,UAAU3B,UAAY,WAE5B,OAAuB,GAAhBzK,KAAK4K,SAYbi8E,OAAOz6E,UAAUzB,WAAa,SAASC,GAEtC5K,KAAK4K,QAAUA,GAQhBi8E,OAAOz6E,UAAU07E,YAAc,WAE9B,OAAyB,GAAlB9nF,KAAK0mF,WAYbG,OAAOz6E,UAAUwhF,aAAe,SAASlH,GAExC1mF,KAAK0mF,UAAYA,GAQlBG,OAAOz6E,UAAU61C,UAAY,WAE5B,OAAOjiD,KAAK2W,QAYbkwE,OAAOz6E,UAAUkjF,UAAY,SAAS34E,GAErC3W,KAAK2W,OAASA,GAafkwE,OAAOz6E,UAAUo+D,YAAc,SAAS1mD,GAEvC,OAAO,EAAW9jB,KAAK8jB,OAAS9jB,KAAKye,QActCooE,OAAOz6E,UAAUggF,YAAc,SAASxoE,EAAU6e,GAWjD,OATIA,EAEHziC,KAAK8jB,OAASF,EAId5jB,KAAKye,OAASmF,EAGRA,GAQRijE,OAAOz6E,UAAU+G,cAAgB,WAEhC,OAAyB,MAAjBnT,KAAKqU,SAAoB,EAAIrU,KAAKqU,SAASlS,QAYpD0kF,OAAOz6E,UAAU0gE,SAAW,SAAS76D,GAEpC,OAAO3J,QAAQ/H,QAAQP,KAAKqU,SAAUpC,IAYvC40E,OAAOz6E,UAAUgH,WAAa,SAAS3E,GAEtC,OAAyB,MAAjBzO,KAAKqU,SAAoB,KAAOrU,KAAKqU,SAAS5F,IAiBvDo4E,OAAOz6E,UAAUq+E,OAAS,SAASx4E,EAAOxD,GA4BzC,OA1Ba,MAATwD,IAEU,MAATxD,IAEHA,EAAQzO,KAAKmT,gBAETlB,EAAMgwC,aAAejiD,MAExByO,KAIFwD,EAAMs9E,mBACNt9E,EAAMq9E,UAAUtvF,MAEK,MAAjBA,KAAKqU,UAERrU,KAAKqU,SAAW,GAChBrU,KAAKqU,SAASzH,KAAKqF,IAInBjS,KAAKqU,SAAS+B,OAAO3H,EAAO,EAAGwD,IAI1BA,GAeR40E,OAAOz6E,UAAUK,OAAS,SAASgC,GAElC,IAAIwD,EAAQ,KAaZ,OAXqB,MAAjBjS,KAAKqU,UAAoB5F,GAAS,GAIxB,OAFbwD,EAAQjS,KAAKoT,WAAW3E,MAIvBzO,KAAKqU,SAAS+B,OAAO3H,EAAO,GAC5BwD,EAAMq9E,UAAU,OAIXr9E,GAQR40E,OAAOz6E,UAAUmjF,iBAAmB,WAEnC,GAAmB,MAAfvvF,KAAK2W,OACT,CACC,IAAIlI,EAAQzO,KAAK2W,OAAOm2D,SAAS9sE,MACjCA,KAAK2W,OAAOlK,OAAOgC,KASrBo4E,OAAOz6E,UAAUk+D,aAAe,WAE/B,OAAsB,MAAdtqE,KAAKsT,MAAiB,EAAItT,KAAKsT,MAAMnR,QAY9C0kF,OAAOz6E,UAAUojF,aAAe,SAAS3rE,GAExC,OAAOvb,QAAQ/H,QAAQP,KAAKsT,MAAOuQ,IAYpCgjE,OAAOz6E,UAAUm+D,UAAY,SAAS97D,GAErC,OAAsB,MAAdzO,KAAKsT,MAAiB,KAAOtT,KAAKsT,MAAM7E,IAcjDo4E,OAAOz6E,UAAUogF,WAAa,SAAS3oE,EAAM4rE,GAoB5C,OAlBY,MAAR5rE,IAEHA,EAAK6rE,mBAAmBD,GACxB5rE,EAAKuoE,YAAYpsF,KAAMyvF,IAEL,MAAdzvF,KAAKsT,OACRuQ,EAAK2mD,aAAailB,IAAezvF,MACjCsI,QAAQ/H,QAAQP,KAAKsT,MAAOuQ,GAAQ,KAElB,MAAd7jB,KAAKsT,QAERtT,KAAKsT,MAAQ,IAGdtT,KAAKsT,MAAM1G,KAAKiX,KAIXA,GAcRgjE,OAAOz6E,UAAUqgF,WAAa,SAAS5oE,EAAM4rE,GAE5C,GAAY,MAAR5rE,EACJ,CACC,GAAIA,EAAK2mD,aAAailB,IAAezvF,MACtB,MAAdA,KAAKsT,MACN,CACC,IAAI7E,EAAQzO,KAAKwvF,aAAa3rE,GAE1BpV,GAAS,GAEZzO,KAAKsT,MAAM8C,OAAO3H,EAAO,GAI3BoV,EAAKuoE,YAAY,KAAMqD,GAGxB,OAAO5rE,GAaRgjE,OAAOz6E,UAAUsjF,mBAAqB,SAASjtD,GAE9C,IAAI7e,EAAW5jB,KAAKwqE,YAAY/nC,GAEhB,MAAZ7e,GAEHA,EAAS6oE,WAAWzsF,KAAMyiC,IAc5BokD,OAAOz6E,UAAUujF,aAAe,SAAS5vF,GAExC,IAAI6vF,EAAa5vF,KAAK+e,WAEtB,OAAsB,MAAd6wE,GACPA,EAAWn6E,UAAY9H,YAAY+H,kBAAoBk6E,EAAWD,aAClEC,EAAWD,aAAa5vF,GAAyC,MAAjC6vF,EAAWj6E,aAAa5V,IAe1D8mF,OAAOz6E,UAAUuJ,aAAe,SAAS5V,EAAMgP,GAE9C,IAAI6gF,EAAa5vF,KAAK+e,WAElBhF,EAAqB,MAAd61E,GACVA,EAAWn6E,UAAY9H,YAAY+H,iBACnCk6E,EAAWj6E,aAAa5V,GAAQ,KAEjC,OAAe,MAAPga,EAAeA,EAAMhL,GAa9B83E,OAAOz6E,UAAU/H,aAAe,SAAStE,EAAMgI,GAE9C,IAAI6nF,EAAa5vF,KAAK+e,WAEJ,MAAd6wE,GACHA,EAAWn6E,UAAY9H,YAAY+H,kBAEnCk6E,EAAWvrF,aAAatE,EAAMgI,IAWhC8+E,OAAOz6E,UAAUqD,MAAQ,WAExB,IAAIA,EAAQnH,QAAQmH,MAAMzP,KAAMA,KAAKivF,aAGrC,OAFAx/E,EAAM89E,SAASvtF,KAAK6vF,cAEbpgF,GAQRo3E,OAAOz6E,UAAUyjF,WAAa,WAE7B,IAAI9nF,EAAQ/H,KAAK+e,WAcjB,OAZa,MAAThX,IAEwB,mBAAhBA,EAAW,MAErBA,EAAQA,EAAM0H,QAELmF,MAAM7M,EAAM0N,YAErB1N,EAAQA,EAAM2mB,WAAU,KAInB3mB,GAGR9H,WAAW4mF,YAA2B,IAAXA,OAAyBA,YAASjgF,EAkF7D0kE,WAAWl/D,UAAY,IAAIkD,YAC3Bg8D,WAAWl/D,UAAUH,YAAcq/D,WAOnCA,WAAWl/D,UAAU0jF,0BAA2B,EAQhDxkB,WAAWl/D,UAAU2jF,gBAAkB,KASvCzkB,WAAWl/D,UAAU4jF,YAAc,KASnC1kB,WAAWl/D,UAAU6jF,YAAc,KAUnC3kB,WAAWl/D,UAAU4mD,OAAS,KAW9BsY,WAAWl/D,UAAUwQ,OAAS,KAiB9B0uD,WAAWl/D,UAAUg2C,UAAW,EAahCkpB,WAAWl/D,UAAU8jF,KAAO,WAE3B,GAA4B,MAAxBlwF,KAAK+vF,gBACT,CACC,IAAI/hD,EAAM,IAAI1+B,YACbtP,KAAKoP,EAAGpP,KAAKqP,EAAGrP,KAAKiI,MAAOjI,KAAK6H,QAElC7H,KAAKoP,EAAIpP,KAAK+vF,gBAAgB3gF,EAC9BpP,KAAKqP,EAAIrP,KAAK+vF,gBAAgB1gF,EAC9BrP,KAAKiI,MAAQjI,KAAK+vF,gBAAgB9nF,MAClCjI,KAAK6H,OAAS7H,KAAK+vF,gBAAgBloF,OAEnC7H,KAAK+vF,gBAAkB/hD,IAezBs9B,WAAWl/D,UAAU+jF,iBAAmB,SAAS1tD,GAEhD,OAAO,EAAaziC,KAAKgwF,YAAchwF,KAAKiwF,aAe7C3kB,WAAWl/D,UAAUgkF,iBAAmB,SAAShqE,EAAOqc,GAWvD,OATIA,EAEHziC,KAAKgwF,YAAc5pE,EAInBpmB,KAAKiwF,YAAc7pE,EAGbA,GAgBRklD,WAAWl/D,UAAU45C,OAAS,SAAS3lC,EAAO8C,GAE7C,IAAIlD,EAAM3X,QAAQuX,UAAUQ,GACxBU,EAAM3X,KAAK2X,IAAId,GACfgB,EAAM7X,KAAK6X,IAAIhB,GAGnB,IAAKjgB,KAAKoiD,SACV,CACC,IAAIiuC,EAAK,IAAIlhF,QAAQnP,KAAK2P,aAAc3P,KAAK4P,cACzC6T,EAAKnb,QAAQkb,gBAAgB6sE,EAAItvE,EAAKE,EAAKkC,GAE/CnjB,KAAKoP,EAAIhG,KAAK2c,MAAMtC,EAAGrU,EAAIpP,KAAKiI,MAAQ,GACxCjI,KAAKqP,EAAIjG,KAAK2c,MAAMtC,EAAGpU,EAAIrP,KAAK6H,OAAS,GAoB1C,GAhBwB,MAApB7H,KAAKgwF,cAEJvsE,EAAKnb,QAAQkb,gBAAgBxjB,KAAKgwF,YAAajvE,EAAKE,EAAKkC,GAC7DnjB,KAAKgwF,YAAY5gF,EAAIhG,KAAK2c,MAAMtC,EAAGrU,GACnCpP,KAAKgwF,YAAY3gF,EAAIjG,KAAK2c,MAAMtC,EAAGpU,IAIZ,MAApBrP,KAAKiwF,cAEJxsE,EAAKnb,QAAQkb,gBAAgBxjB,KAAKiwF,YAAalvE,EAAKE,EAAKkC,GAC7DnjB,KAAKiwF,YAAY7gF,EAAIhG,KAAK2c,MAAMtC,EAAGrU,GACnCpP,KAAKiwF,YAAY5gF,EAAIjG,KAAK2c,MAAMtC,EAAGpU,IAIjB,MAAfrP,KAAKgzD,OAER,IAAK,IAAInuD,EAAI,EAAGA,EAAI7E,KAAKgzD,OAAO7wD,OAAQ0C,IAEjB,MAAlB7E,KAAKgzD,OAAOnuD,KAEX4e,EAAKnb,QAAQkb,gBAAgBxjB,KAAKgzD,OAAOnuD,GAAIkc,EAAKE,EAAKkC,GAC3DnjB,KAAKgzD,OAAOnuD,GAAGuK,EAAIhG,KAAK2c,MAAMtC,EAAGrU,GACjCpP,KAAKgzD,OAAOnuD,GAAGwK,EAAIjG,KAAK2c,MAAMtC,EAAGpU,KAoBrCi8D,WAAWl/D,UAAUuiB,UAAY,SAASpc,EAAIE,GA2B7C,GAzBAF,EAAKoC,WAAWpC,GAChBE,EAAKkC,WAAWlC,GAGXzS,KAAKoiD,WAETpiD,KAAKoP,EAAIuF,WAAW3U,KAAKoP,GAAKmD,EAC9BvS,KAAKqP,EAAIsF,WAAW3U,KAAKqP,GAAKoD,GAIP,MAApBzS,KAAKgwF,cAERhwF,KAAKgwF,YAAY5gF,EAAIuF,WAAW3U,KAAKgwF,YAAY5gF,GAAKmD,EACtDvS,KAAKgwF,YAAY3gF,EAAIsF,WAAW3U,KAAKgwF,YAAY3gF,GAAKoD,GAI/B,MAApBzS,KAAKiwF,cAERjwF,KAAKiwF,YAAY7gF,EAAIuF,WAAW3U,KAAKiwF,YAAY7gF,GAAKmD,EACtDvS,KAAKiwF,YAAY5gF,EAAIsF,WAAW3U,KAAKiwF,YAAY5gF,GAAKoD,GAInDzS,KAAK8vF,0BAA2C,MAAf9vF,KAAKgzD,OAEzC,IAAK,IAAInuD,EAAI,EAAGA,EAAI7E,KAAKgzD,OAAO7wD,OAAQ0C,IAEjB,MAAlB7E,KAAKgzD,OAAOnuD,KAEf7E,KAAKgzD,OAAOnuD,GAAGuK,EAAIuF,WAAW3U,KAAKgzD,OAAOnuD,GAAGuK,GAAKmD,EAClDvS,KAAKgzD,OAAOnuD,GAAGwK,EAAIsF,WAAW3U,KAAKgzD,OAAOnuD,GAAGwK,GAAKoD,IAqBtD64D,WAAWl/D,UAAUkG,MAAQ,SAASI,EAAIC,EAAI29E,GAoB7C,GAlBA59E,EAAKiC,WAAWjC,GAChBC,EAAKgC,WAAWhC,GAGQ,MAApB3S,KAAKgwF,cAERhwF,KAAKgwF,YAAY5gF,EAAIuF,WAAW3U,KAAKgwF,YAAY5gF,GAAKsD,EACtD1S,KAAKgwF,YAAY3gF,EAAIsF,WAAW3U,KAAKgwF,YAAY3gF,GAAKsD,GAI/B,MAApB3S,KAAKiwF,cAERjwF,KAAKiwF,YAAY7gF,EAAIuF,WAAW3U,KAAKiwF,YAAY7gF,GAAKsD,EACtD1S,KAAKiwF,YAAY5gF,EAAIsF,WAAW3U,KAAKiwF,YAAY5gF,GAAKsD,GAIpC,MAAf3S,KAAKgzD,OAER,IAAK,IAAInuD,EAAI,EAAGA,EAAI7E,KAAKgzD,OAAO7wD,OAAQ0C,IAEjB,MAAlB7E,KAAKgzD,OAAOnuD,KAEf7E,KAAKgzD,OAAOnuD,GAAGuK,EAAIuF,WAAW3U,KAAKgzD,OAAOnuD,GAAGuK,GAAKsD,EAClD1S,KAAKgzD,OAAOnuD,GAAGwK,EAAIsF,WAAW3U,KAAKgzD,OAAOnuD,GAAGwK,GAAKsD,GAMhD3S,KAAKoiD,WAETpiD,KAAKoP,EAAIuF,WAAW3U,KAAKoP,GAAKsD,EAC9B1S,KAAKqP,EAAIsF,WAAW3U,KAAKqP,GAAKsD,EAE1B29E,IAEH39E,EAAKD,EAAKtJ,KAAK2G,IAAI2C,EAAIC,IAGxB3S,KAAKiI,MAAQ0M,WAAW3U,KAAKiI,OAASyK,EACtC1S,KAAK6H,OAAS8M,WAAW3U,KAAK6H,QAAU8K,IAS1C24D,WAAWl/D,UAAUoD,OAAS,SAAS1D,GAEtC,OAAOwD,YAAYlD,UAAUoD,OAAOpE,MAAMpL,KAAMqL,YAC/CrL,KAAKoiD,UAAYt2C,EAAIs2C,WACC,MAApBpiD,KAAKgwF,aAA0C,MAAnBlkF,EAAIkkF,aAA6C,MAApBhwF,KAAKgwF,aAAuBhwF,KAAKgwF,YAAYxgF,OAAO1D,EAAIkkF,gBAC7F,MAApBhwF,KAAKiwF,aAA0C,MAAnBnkF,EAAImkF,aAA6C,MAApBjwF,KAAKiwF,aAAuBjwF,KAAKiwF,YAAYzgF,OAAO1D,EAAImkF,gBAClG,MAAfjwF,KAAKgzD,QAAgC,MAAdlnD,EAAIknD,QAAmC,MAAfhzD,KAAKgzD,QAAkB1qD,QAAQ+W,YAAYrf,KAAKgzD,OAAQlnD,EAAIknD,WACnF,MAAxBhzD,KAAK+vF,iBAAkD,MAAvBjkF,EAAIikF,iBAAqD,MAAxB/vF,KAAK+vF,iBAA2B/vF,KAAK+vF,gBAAgBvgF,OAAO1D,EAAIikF,oBAClH,MAAf/vF,KAAK4c,QAAgC,MAAd9Q,EAAI8Q,QAAmC,MAAf5c,KAAK4c,QAAkB5c,KAAK4c,OAAOpN,OAAO1D,EAAI8Q,UAGjG3c,WAAWqrE,gBAAmC,IAAfA,WAA6BA,gBAAa1kE,EAMzE,IAAI6jB,WACJ,CAWCE,eAAgB,IAahBD,OAAQ,SAAS1Y,GAEhB,IAAIrF,EAAS,GAEb,GAAY,MAARqF,EAIH,IAFA,IAAI2E,EAAS3E,EAAKiwC,YAED,MAAVtrC,GAGNhK,EADYgK,EAAOm2D,SAAS96D,GACXyY,WAAWE,eAAiBhe,EAG7CgK,GADA3E,EAAO2E,GACOsrC,YAKhB,IAAIj/B,EAAIrW,EAAOxK,OAOf,OALI6gB,EAAI,IAEPrW,EAASA,EAAOlH,UAAU,EAAGud,EAAI,IAG3BrW,GAaRk/E,cAAe,SAASroC,GAEvB,GAAY,MAARA,EACJ,CACC,IAAI/0C,EAAQ+0C,EAAK7E,YAAYl0B,WAAWE,gBAExC,GAAIlc,GAAS,EAEZ,OAAO+0C,EAAK/9C,UAAU,EAAGgJ,GAErB,GAAI+0C,EAAKrhD,OAAS,EAEtB,MAAO,GAIT,OAAO,MAcRouF,QAAS,SAASzyC,EAAM0F,GAEvB,IAAI7sC,EAASmnC,EAEb,GAAY,MAAR0F,EAIH,IAFA,IAAIr4B,EAASq4B,EAAKj1C,MAAMkc,WAAWE,gBAE1B9lB,EAAE,EAAGA,EAAEsmB,EAAOhpB,OAAQ0C,IAE9B8R,EAASA,EAAOvD,WAAWhR,SAAS+oB,EAAOtmB,KAI7C,OAAO8R,GASRkU,QAAS,SAASzH,EAAIC,GAKrB,IAHA,IAAItT,EAAM3G,KAAK2G,IAAIqT,EAAGjhB,OAAQkhB,EAAGlhB,QAC7ByoB,EAAO,EAEF/lB,EAAI,EAAGA,EAAIkL,EAAKlL,IAExB,GAAIue,EAAGve,IAAMwe,EAAGxe,GAChB,CAQE,IAAI2rF,EACAC,EALJ7lE,EAHmB,GAAhBxH,EAAGve,GAAG1C,QACO,GAAhBkhB,EAAGxe,GAAG1C,OAEEihB,EAAGve,IAAMwe,EAAGxe,GAAM,EAAMue,EAAGve,GAAKwe,EAAGxe,GAAM,GAAK,GAIlD2rF,EAAKpuF,SAASghB,EAAGve,OACjB4rF,EAAKruF,SAASihB,EAAGxe,KAED,EAAM2rF,EAAKC,EAAM,GAAK,EAG3C,MAgBF,OAXY,GAAR7lE,IAEC4lE,EAAKptE,EAAGjhB,UACRsuF,EAAKptE,EAAGlhB,UAIXyoB,EAAQ4lE,EAAKC,EAAM,GAAK,GAInB7lE,IAKT3qB,WAAWwqB,gBAAmC,IAAfA,WAA6BA,gBAAa7jB,EAMzE,IAAI8pF,YACJ,CA8ECC,mBAAoB,SAAUlqE,EAAQwjD,EAAQvxD,EAAMk4E,GAEnD,IAAIztE,EAAKsD,EAAO9W,aACZyX,EAAKX,EAAO7W,aACZ2C,EAAKmG,EAAKtJ,EAAI+T,EACd1Q,EAAKiG,EAAKrJ,EAAI+X,EACdK,EAAQre,KAAK2Y,MAAMtP,EAAIF,GACvB8I,EAAI,IAAIlM,QAAQ,EAAG,GACnB0hF,EAAKznF,KAAK2W,GAEV+wE,EADM1nF,KAAK2W,GAAG,EACD0H,EACb7W,EAAIxH,KAAK2Y,MAAM0E,EAAO5e,OAAQ4e,EAAOxe,OAyDzC,OAvDIwf,GAASopE,EAAKjgF,GAAK6W,EAAQopE,EAAKjgF,GAGnCyK,EAAEjM,EAAIqX,EAAOrX,EACbiM,EAAEhM,EAAI+X,EAAKX,EAAOxe,MAAQmB,KAAK2nF,IAAItpE,GAAS,GAEpCA,GAAS7W,GAGjByK,EAAEhM,EAAIoX,EAAOpX,EACbgM,EAAEjM,EAAI+T,EAAKsD,EAAO5e,OAASuB,KAAK2nF,IAAID,GAAQ,GAEpCrpE,EAAQ7W,GAGhByK,EAAEjM,EAAIqX,EAAOrX,EAAIqX,EAAOxe,MACxBoT,EAAEhM,EAAI+X,EAAKX,EAAOxe,MAAQmB,KAAK2nF,IAAItpE,GAAS,IAK5CpM,EAAEhM,EAAIoX,EAAOpX,EAAIoX,EAAO5e,OACxBwT,EAAEjM,EAAI+T,EAAKsD,EAAO5e,OAASuB,KAAK2nF,IAAID,GAAQ,GAGzCF,IAECl4E,EAAKtJ,GAAKqX,EAAOrX,GACpBsJ,EAAKtJ,GAAKqX,EAAOrX,EAAIqX,EAAOxe,MAE5BoT,EAAEjM,EAAIsJ,EAAKtJ,EAEHsJ,EAAKrJ,GAAKoX,EAAOpX,GACrBqJ,EAAKrJ,GAAKoX,EAAOpX,EAAIoX,EAAO5e,SAEhCwT,EAAEhM,EAAIqJ,EAAKrJ,GAERqJ,EAAKtJ,EAAIqX,EAAOrX,EAEnBiM,EAAEjM,EAAIqX,EAAOrX,EAELsJ,EAAKtJ,EAAIqX,EAAOrX,EAAIqX,EAAOxe,QAEnCoT,EAAEjM,EAAIqX,EAAOrX,EAAIqX,EAAOxe,OAErByQ,EAAKrJ,EAAIoX,EAAOpX,EAEnBgM,EAAEhM,EAAIoX,EAAOpX,EAELqJ,EAAKrJ,EAAIoX,EAAOpX,EAAIoX,EAAO5e,SAEnCwT,EAAEhM,EAAIoX,EAAOpX,EAAIoX,EAAO5e,SAInBwT,GASR21E,iBAAkB,SAAUvqE,EAAQwjD,EAAQvxD,EAAMk4E,GAEjD,IAAIxhF,EAAIqX,EAAOrX,EACXC,EAAIoX,EAAOpX,EACX2M,EAAIyK,EAAOxe,MAAQ,EACnBoU,EAAIoK,EAAO5e,OAAS,EACpBsb,EAAK/T,EAAI4M,EACToL,EAAK/X,EAAIgN,EACTkN,EAAK7Q,EAAKtJ,EACVoa,EAAK9Q,EAAKrJ,EAIVkD,EAAKnQ,SAASmnB,EAAKpG,GACnB1Q,EAAKrQ,SAASonB,EAAKpC,GAEvB,GAAU,GAAN7U,GAAiB,GAANE,EAEd,OAAO,IAAItD,QAAQgU,EAAIiE,EAAK/K,EAAI5J,EAAKrJ,KAAKsX,IAAIjO,IAE1C,GAAU,GAANF,GAAiB,GAANE,EAEnB,OAAO,IAAItD,QAAQoa,EAAIC,GAGxB,GAAIonE,EACJ,CACC,GAAIpnE,GAAMna,GAAKma,GAAMna,EAAIoX,EAAO5e,OAChC,CACC,IAAIia,EAAK0H,EAAKpC,EACVvF,EAAKzY,KAAKqY,KAAKzF,EAAEA,GAAG,EAAG8F,EAAGA,GAAKzF,EAAEA,MAAQ,EAO7C,OALIkN,GAAMna,IAETyS,GAAMA,GAGA,IAAI1S,QAAQgU,EAAGtB,EAAI2H,GAG3B,GAAID,GAAMna,GAAKma,GAAMna,EAAIqX,EAAOxe,MAU/B,OARI4Z,EAAK0H,EAAKpG,EACVrB,EAAK1Y,KAAKqY,KAAKpF,EAAEA,GAAG,EAAGwF,EAAGA,GAAK7F,EAAEA,MAAQ,EAEzCwN,GAAMna,IAETyS,GAAMA,GAGA,IAAI3S,QAAQoa,EAAInC,EAAGtF,GAK5B,IAAIxF,EAAI7J,EAAKF,EACT1J,EAAIue,EAAK9K,EAAI6G,EACb/U,EAAI4N,EAAIA,EAAIM,EAAIA,EAAID,EAAIA,EACxBzI,GAAK,EAAIuP,EAAK/U,EACdq+C,EAAIzwC,EAAIA,EAAIM,EAAIA,EAAI6G,EAAKA,EAC3B9G,EAAIA,EAAI8G,EAAKA,EACbnH,EAAIA,EAAIK,EAAIA,EACV40E,EAAM7nF,KAAKqY,KAAK7N,EAAIA,EAAI,EAAIxF,EAAIq+C,GAGhCykC,IAAUt9E,EAAIq9E,IAAQ,EAAI7iF,GAC1B+iF,IAAUv9E,EAAIq9E,IAAQ,EAAI7iF,GAC1BgjF,EAAQ90E,EAAI40E,EAAQroF,EACpBwoF,EAAQ/0E,EAAI60E,EAAQtoF,EAOpByoF,EAAO,EACPC,EAAO,EAaX,OApBYnoF,KAAKqY,KAAKrY,KAAKooF,IAAKN,EAAQ3nE,EAAK,GACxCngB,KAAKooF,IAAKJ,EAAQ5nE,EAAK,IAChBpgB,KAAKqY,KAAKrY,KAAKooF,IAAKL,EAAQ5nE,EAAK,GACxCngB,KAAKooF,IAAKH,EAAQ7nE,EAAK,KAQ3B8nE,EAAOJ,EACPK,EAAOH,IAIPE,EAAOH,EACPI,EAAOF,GAGD,IAAIliF,QAAQmiF,EAAMC,IAS1BE,iBAAkB,SAAUhrE,EAAQwjD,EAAQvxD,EAAMk4E,GAEjD,IAAIxhF,EAAIqX,EAAOrX,EACXC,EAAIoX,EAAOpX,EACXvG,EAAI2d,EAAOxe,MACXY,EAAI4d,EAAO5e,OAEXsb,EAAK/T,EAAItG,EAAI,EACbse,EAAK/X,EAAIxG,EAAI,EAEb0gB,EAAK7Q,EAAKtJ,EACVoa,EAAK9Q,EAAKrJ,EAGd,GAAI8T,GAAMoG,EAET,OAEQ,IAAIpa,QAAQgU,EAFhBiE,EAAKoC,EAEena,EAIAA,EAAIxG,GAGxB,GAAIue,GAAMoC,EAEd,OAEQ,IAAIra,QAFRgU,EAAKoG,EAEWna,EAIAA,EAAItG,EAJDse,GAQxB,IAAIvF,EAAKsB,EACLrB,EAAKsF,EAgBT,OAdIwpE,IAECrnE,GAAMna,GAAKma,GAAMna,EAAItG,EAExB+Y,EAAK0H,EAEGC,GAAMna,GAAKma,GAAMna,EAAIxG,IAE7BiZ,EAAK0H,IAMHD,EAAKpG,EAEJqG,EAAKpC,EAED9e,QAAQ+d,aAAakD,EAAIC,EAAI3H,EAAIC,EAAIqB,EAAI9T,EAAGD,EAAGgY,GAI/C9e,QAAQ+d,aAAakD,EAAIC,EAAI3H,EAAIC,EAAIqB,EAAI9T,EAAIxG,EAAGuG,EAAGgY,GAGnDoC,EAAKpC,EAEN9e,QAAQ+d,aAAakD,EAAIC,EAAI3H,EAAIC,EAAIqB,EAAI9T,EAAGD,EAAItG,EAAGse,GAInD9e,QAAQ+d,aAAakD,EAAIC,EAAI3H,EAAIC,EAAIqB,EAAI9T,EAAIxG,EAAGuG,EAAItG,EAAGse,IAUhEsqE,kBAAmB,SAAUjrE,EAAQwjD,EAAQvxD,EAAMk4E,GAElD,IAAIpqC,EAAuB,MAAVyjB,EAChBA,EAAOviE,MAAMiG,YAAYiY,iBAAmB,KACzCyrC,EAAW7K,GAAa74C,YAAY6W,iBACvCgiC,GAAa74C,YAAYmX,gBAEtB1V,EAAIqX,EAAOrX,EACXC,EAAIoX,EAAOpX,EACXvG,EAAI2d,EAAOxe,MACXY,EAAI4d,EAAO5e,OAEXsb,EAAK/T,EAAItG,EAAI,EACbse,EAAK/X,EAAIxG,EAAI,EAEbwe,EAAQ,IAAIlY,QAAQC,EAAGC,GACvBsiF,EAAS,IAAIxiF,QAAQC,EAAItG,EAAGse,GAC5B+gC,EAAM,IAAIh5C,QAAQC,EAAGC,EAAIxG,GAEzB29C,GAAa74C,YAAY6W,iBAE5B6C,EAAQ8gC,EACRwpC,EAAS,IAAIxiF,QAAQgU,EAAI9T,GACzB84C,EAAM,IAAIh5C,QAAQC,EAAItG,EAAGuG,EAAIxG,IAErB29C,GAAa74C,YAAYmX,iBAEjC6sE,EAAS,IAAIxiF,QAAQgU,EAAI9T,EAAIxG,GAC7Bs/C,EAAM,IAAIh5C,QAAQC,EAAItG,EAAGuG,IAEjBm3C,GAAa74C,YAAYkX,iBAEjCwC,EAAQ,IAAIlY,QAAQC,EAAItG,EAAGuG,GAC3BsiF,EAAS,IAAIxiF,QAAQC,EAAGgY,GACxB+gC,EAAM,IAAIh5C,QAAQC,EAAItG,EAAGuG,EAAIxG,IAG9B,IAAI0J,EAAKmG,EAAKtJ,EAAI+T,EACd1Q,EAAKiG,EAAKrJ,EAAI+X,EAEdK,EAAQ,EAAare,KAAK2Y,MAAMxP,EAAIE,GAAMrJ,KAAK2Y,MAAMtP,EAAIF,GACzD3B,EAAI,EAAaxH,KAAK2Y,MAAMjZ,EAAGD,GAAKO,KAAK2Y,MAAMlZ,EAAGC,GAclD6D,EAAS,KAEb,GAZI65C,GAAa74C,YAAY6W,iBAC5BgiC,GAAa74C,YAAYkX,eAElB4C,GAAS7W,GAAK6W,EAAQ7W,EAItB6W,GAASre,KAAK2W,GAAKnP,GAAK6W,EAAQre,KAAK2W,GAAKnP,EAY/CjE,EALEikF,IAAgBv/B,GAAY34C,EAAKtJ,GAAKiY,EAAMjY,GAAKsJ,EAAKtJ,GAAK+4C,EAAI/4C,IAChEiiD,GAAY34C,EAAKrJ,GAAKgY,EAAMhY,GAAKqJ,EAAKrJ,GAAK84C,EAAI94C,GAE7CgiD,EAEM,IAAIliD,QAAQuJ,EAAKtJ,EAAGiY,EAAMhY,GAI1B,IAAIF,QAAQkY,EAAMjY,EAAGsJ,EAAKrJ,GAKhCm3C,GAAa74C,YAAY6W,gBAEnB,IAAIrV,QAAQC,EAAItG,EAAI,EAAID,EAAIO,KAAK2nF,IAAItpE,GAAS,EACtDpY,EAAIxG,GAEG29C,GAAa74C,YAAYmX,gBAExB,IAAI3V,QAAQC,EAAItG,EAAI,EAAID,EAAIO,KAAK2nF,IAAItpE,GAAS,EACtDpY,GAEOm3C,GAAa74C,YAAYkX,eAExB,IAAI1V,QAAQC,EAAItG,EAAGuG,EAAIxG,EAAI,EACnCC,EAAIM,KAAK2nF,IAAItpE,GAAS,GAId,IAAItY,QAAQC,EAAGC,EAAIxG,EAAI,EAC/BC,EAAIM,KAAK2nF,IAAItpE,GAAS,OAK1B,CACC,GAAImpE,EACJ,CACC,IAAIntE,EAAK,IAAItU,QAAQgU,EAAIiE,GAErB1O,EAAKrJ,GAAKA,GAAKqJ,EAAKrJ,GAAKA,EAAIxG,GAEhC4a,EAAGrU,EAAI,EAAa+T,EAClBqjC,GAAa74C,YAAYkX,eACzBzV,EAAItG,EAAIsG,EACVqU,EAAGpU,EAAIqJ,EAAKrJ,GAEJqJ,EAAKtJ,GAAKA,GAAKsJ,EAAKtJ,GAAKA,EAAItG,IAErC2a,EAAGrU,EAAIsJ,EAAKtJ,EACZqU,EAAGpU,EAAMgiD,EACP7K,GAAa74C,YAAY6W,gBACzBnV,EAAIxG,EAAIwG,EAFW+X,GAMtB7U,EAAKmG,EAAKtJ,EAAIqU,EAAGrU,EACjBqD,EAAKiG,EAAKrJ,EAAIoU,EAAGpU,EAEjB8T,EAAKM,EAAGrU,EACRgY,EAAK3D,EAAGpU,EAMR1C,EAHI0kD,GAAY34C,EAAKtJ,GAAKA,EAAItG,EAAI,IAChCuoD,GAAY34C,EAAKrJ,GAAKA,EAAIxG,EAAI,EAEvBP,QAAQ+d,aAAa3N,EAAKtJ,EAAGsJ,EAAKrJ,EAAG8T,EAAIiE,EACjDC,EAAMjY,EAAGiY,EAAMhY,EAAGsiF,EAAOviF,EAAGuiF,EAAOtiF,GAI3B/G,QAAQ+d,aAAa3N,EAAKtJ,EAAGsJ,EAAKrJ,EAAG8T,EAAIiE,EACjDuqE,EAAOviF,EAAGuiF,EAAOtiF,EAAG84C,EAAI/4C,EAAG+4C,EAAI94C,GASlC,OALc,MAAV1C,IAEHA,EAAS,IAAIwC,QAAQgU,EAAIiE,IAGnBza,GASRilF,iBAAkB,SAAUnrE,EAAQwjD,EAAQvxD,EAAMk4E,GAEjD,IAAIxhF,EAAIqX,EAAOrX,EACXC,EAAIoX,EAAOpX,EACXvG,EAAI2d,EAAOxe,MACXY,EAAI4d,EAAO5e,OAEXsb,EAAKsD,EAAO9W,aACZyX,EAAKX,EAAO7W,aACZ2Z,EAAK7Q,EAAKtJ,EACVoa,EAAK9Q,EAAKrJ,EACVkD,EAAKgX,EAAKpG,EACV1Q,EAAK+W,EAAKpC,EACVK,GAASre,KAAK2Y,MAAMtP,EAAIF,GACxBs+E,EAAKznF,KAAK2W,GACV8xE,EAAMzoF,KAAK2W,GAAK,EAEhBpT,EAAS,IAAIwC,QAAQgU,EAAIiE,GAEzBo/B,EAAuB,MAAVyjB,EAAkB3hE,QAAQyW,SACzCkrD,EAAOviE,MAAOiG,YAAYiY,gBAC1BjY,YAAYoX,gBAAkBpX,YAAYoX,eACxCssC,EAAW7K,GAAa74C,YAAY6W,iBACnCgiC,GAAa74C,YAAYmX,gBAC1B9I,EAAI,IAAI7M,QACRkN,EAAI,IAAIlN,QASZ,IANKoa,EAAKna,GAAOoa,EAAKna,GAAOka,EAAKna,GAAOoa,EAAKna,EAAIxG,GAC5C0gB,EAAKna,EAAItG,GAAO0gB,EAAKna,GAAOka,EAAKna,EAAItG,GAAO0gB,EAAKna,EAAIxG,KAE1D+nF,GAAa,GAGVA,EACJ,CACC,GAAIv/B,EACJ,CAEC,GAAI9nC,GAAMpG,EACV,CACC,GAAIqG,GAAMna,EAET,OAAO,IAAIF,QAAQgU,EAAI9T,GAEnB,GAAIma,GAAMna,EAAIxG,EAElB,OAAO,IAAIsG,QAAQgU,EAAI9T,EAAIxG,QAGxB,GAAI0gB,EAAKna,EACd,CACC,GAAIoa,GAAMna,EAAIxG,EAAI,EAEjB,OAAO,IAAIsG,QAAQC,EAAGC,EAAIxG,EAAI,GAE1B,GAAI2gB,GAAMna,EAAI,EAAIxG,EAAI,EAE1B,OAAO,IAAIsG,QAAQC,EAAGC,EAAI,EAAIxG,EAAI,QAG/B,GAAI0gB,EAAKna,EAAItG,EAClB,CACC,GAAI0gB,GAAMna,EAAIxG,EAAI,EAEjB,OAAO,IAAIsG,QAAQC,EAAItG,EAAGuG,EAAIxG,EAAI,GAE9B,GAAI2gB,GAAMna,EAAI,EAAIxG,EAAI,EAE1B,OAAO,IAAIsG,QAAQC,EAAItG,EAAGuG,EAAI,EAAIxG,EAAI,QAGnC,GAAI0gB,GAAMna,EACf,CACC,GAAIoa,EAAKpC,EAER,OAAO,IAAIjY,QAAQC,EAAGC,EAAIxG,EAAI,GAE1B,GAAI2gB,EAAKpC,EAEb,OAAO,IAAIjY,QAAQC,EAAGC,EAAI,EAAIxG,EAAI,QAG/B,GAAI0gB,GAAMna,EAAItG,EACnB,CACC,GAAI0gB,EAAKpC,EAER,OAAO,IAAIjY,QAAQC,EAAItG,EAAGuG,EAAIxG,EAAI,GAE9B,GAAI2gB,EAAKpC,EAEb,OAAO,IAAIjY,QAAQC,EAAItG,EAAGuG,EAAI,EAAIxG,EAAI,GAGxC,GAAI2gB,GAAMna,EAET,OAAO,IAAIF,QAAQgU,EAAI9T,GAEnB,GAAIma,GAAMna,EAAIxG,EAElB,OAAO,IAAIsG,QAAQgU,EAAI9T,EAAIxG,GAGxB0gB,EAAKpG,EAEHqG,EAAKna,EAAIxG,EAAI,GAAO2gB,EAAKna,EAAI,EAAIxG,EAAI,GAEzCmT,EAAI,IAAI7M,QAAQC,EAAGC,GACnBgN,EAAI,IAAIlN,QAAQC,EAAGC,EAAIxG,IAEf2gB,EAAKna,EAAIxG,EAAI,GAErBmT,EAAI,IAAI7M,QAAQC,EAAIhG,KAAKmnB,MAAM,GAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,GAAM1nB,IACrBwT,EAAI,IAAIlN,QAAQC,EAAItG,EAAGuG,EAAIjG,KAAKmnB,MAAM,IAAO1nB,KAErC2gB,EAAKna,EAAI,EAAIxG,EAAI,IAEzBmT,EAAI,IAAI7M,QAAQC,EAAIhG,KAAKmnB,MAAM,GAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,GAAM1nB,IACrBwT,EAAI,IAAIlN,QAAQC,EAAItG,EAAGuG,EAAIjG,KAAKmnB,MAAM,KAAO1nB,KAGtC0gB,EAAKpG,IAERqG,EAAKna,EAAIxG,EAAI,GAAO2gB,EAAKna,EAAI,EAAIxG,EAAI,GAEzCmT,EAAI,IAAI7M,QAAQC,EAAItG,EAAGuG,GACvBgN,EAAI,IAAIlN,QAAQC,EAAItG,EAAGuG,EAAIxG,IAEnB2gB,EAAKna,EAAIxG,EAAI,GAErBmT,EAAI,IAAI7M,QAAQC,EAAGC,EAAIjG,KAAKmnB,MAAM,IAAO1nB,IACzCwT,EAAI,IAAIlN,QAAQC,EAAIhG,KAAKmnB,MAAM,IAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,GAAM1nB,KAEb2gB,EAAKna,EAAI,EAAIxG,EAAI,IAEzBmT,EAAI,IAAI7M,QAAQC,EAAIhG,KAAKmnB,MAAM,IAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,GAAM1nB,IACrBwT,EAAI,IAAIlN,QAAQC,EAAGC,EAAIjG,KAAKmnB,MAAM,KAAO1nB,UAM5C,CAEC,GAAI2gB,GAAMpC,EACV,CACC,GAAImC,GAAMna,EAET,OAAO,IAAID,QAAQC,EAAGC,EAAIxG,EAAI,GAE1B,GAAI0gB,GAAMna,EAAItG,EAElB,OAAO,IAAIqG,QAAQC,EAAItG,EAAGuG,EAAIxG,EAAI,QAG/B,GAAI2gB,EAAKna,EACd,CACC,GAAIka,GAAMna,EAAItG,EAAI,EAEjB,OAAO,IAAIqG,QAAQC,EAAItG,EAAI,EAAGuG,GAE1B,GAAIka,GAAMna,EAAI,EAAItG,EAAI,EAE1B,OAAO,IAAIqG,QAAQC,EAAI,EAAItG,EAAI,EAAGuG,QAG/B,GAAIma,EAAKna,EAAIxG,EAClB,CACC,GAAI0gB,GAAMna,EAAItG,EAAI,EAEjB,OAAO,IAAIqG,QAAQC,EAAItG,EAAI,EAAGuG,EAAIxG,GAE9B,GAAI0gB,GAAMna,EAAI,EAAItG,EAAI,EAE1B,OAAO,IAAIqG,QAAQC,EAAI,EAAItG,EAAI,EAAGuG,EAAIxG,QAGnC,GAAI2gB,GAAMna,EACf,CACC,GAAIka,EAAKpG,EAER,OAAO,IAAIhU,QAAQC,EAAItG,EAAI,EAAGuG,GAE1B,GAAIka,EAAKpG,EAEb,OAAO,IAAIhU,QAAQC,EAAI,EAAItG,EAAI,EAAGuG,QAG/B,GAAIma,GAAMna,EAAIxG,EACnB,CACC,GAAI0gB,EAAKpG,EAER,OAAO,IAAIhU,QAAQC,EAAItG,EAAI,EAAGuG,EAAIxG,GAE9B,GAAI2gB,EAAKpC,EAEb,OAAO,IAAIjY,QAAQC,EAAI,EAAItG,EAAI,EAAGuG,EAAIxG,GAGxC,GAAI0gB,GAAMna,EAET,OAAO,IAAID,QAAQC,EAAGgY,GAElB,GAAImC,GAAMna,EAAItG,EAElB,OAAO,IAAIqG,QAAQC,EAAItG,EAAGse,GAGvBoC,EAAKpC,EAEHmC,EAAKna,EAAItG,EAAI,GAAOygB,EAAKna,EAAI,EAAItG,EAAI,GAEzCkT,EAAI,IAAI7M,QAAQC,EAAGC,GACnBgN,EAAI,IAAIlN,QAAQC,EAAItG,EAAGuG,IAEfka,EAAKna,EAAItG,EAAI,GAErBkT,EAAI,IAAI7M,QAAQC,EAAIhG,KAAKmnB,MAAM,IAAOznB,GAAIuG,EAAIxG,GAC9CwT,EAAI,IAAIlN,QAAQC,EAAIhG,KAAKmnB,MAAM,GAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,GAAM1nB,KAEb0gB,EAAKna,EAAI,EAAItG,EAAI,IAEzBkT,EAAI,IAAI7M,QAAQC,EAAIhG,KAAKmnB,MAAM,GAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,GAAM1nB,IACrBwT,EAAI,IAAIlN,QAAQC,EAAIhG,KAAKmnB,MAAM,KAAOznB,GAAIuG,EAAIxG,IAGvC2gB,EAAKpC,IAERmC,EAAKna,EAAItG,EAAI,GAAOygB,EAAKna,EAAI,EAAItG,EAAI,GAEzCkT,EAAI,IAAI7M,QAAQC,EAAGC,EAAIxG,GACvBwT,EAAI,IAAIlN,QAAQC,EAAItG,EAAGuG,EAAIxG,IAEnB0gB,EAAKna,EAAItG,EAAI,GAErBkT,EAAI,IAAI7M,QAAQC,EAAIhG,KAAKmnB,MAAM,IAAOznB,GAAIuG,GAC1CgN,EAAI,IAAIlN,QAAQC,EAAIhG,KAAKmnB,MAAM,GAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,IAAM1nB,KAEb0gB,EAAKna,EAAI,EAAItG,EAAI,IAEzBkT,EAAI,IAAI7M,QAAQC,EAAIhG,KAAKmnB,MAAM,GAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,IAAM1nB,IACrBwT,EAAI,IAAIlN,QAAQC,EAAIhG,KAAKmnB,MAAM,KAAOznB,GAAIuG,KAK7C,IAAIwS,EAAKsB,EACLrB,EAAKsF,EAELmC,GAAMna,GAAKma,GAAMna,EAAItG,GAExB+Y,EAAK0H,EAIJzH,EAFG0H,EAAKpC,EAEH/X,EAAIxG,EAIJwG,GAGEma,GAAMna,GAAKma,GAAMna,EAAIxG,IAE7BiZ,EAAK0H,EAIJ3H,EAFG0H,EAAKpG,EAEH/T,EAAItG,EAIJsG,GAIPzC,EAASrE,QAAQ+d,aAAaxE,EAAIC,EAAIpJ,EAAKtJ,EAAGsJ,EAAKrJ,EAAG2M,EAAE5M,EAAG4M,EAAE3M,EAAGgN,EAAEjN,EAAGiN,EAAEhN,OAGxE,CACC,GAAIgiD,EACJ,CAIC,GAAI5pC,IAHAqpE,EAAO1nF,KAAK2Y,MAAMlZ,EAAI,EAAGC,EAAI,IAKhC,OAAO,IAAIqG,QAAQC,EAAItG,EAAGuG,EAAIjG,KAAKmnB,MAAM,IAAO1nB,IAE5C,GAAI4e,GAASoqE,EAEjB,OAAO,IAAI1iF,QAAQC,EAAIhG,KAAKmnB,MAAM,GAAMznB,GAAIuG,GAExC,GAAIoY,GAAUopE,EAAKC,EAEvB,OAAO,IAAI3hF,QAAQC,EAAGC,EAAIjG,KAAKmnB,MAAM,IAAO1nB,IAExC,GAAI4e,IAAUqpE,EAElB,OAAO,IAAI3hF,QAAQC,EAAItG,EAAGuG,EAAIjG,KAAKmnB,MAAM,IAAO1nB,IAE5C,GAAI4e,IAAWoqE,EAEnB,OAAO,IAAI1iF,QAAQC,EAAIhG,KAAKmnB,MAAM,GAAMznB,GAAIuG,EAAIxG,GAE5C,GAAI4e,IAAWopE,EAAKC,EAExB,OAAO,IAAI3hF,QAAQC,EAAGC,EAAIjG,KAAKmnB,MAAM,IAAO1nB,IAGxC4e,EAAQqpE,GAAUrpE,GAASqpE,GAE/B90E,EAAI,IAAI7M,QAAQC,EAAItG,EAAGuG,GACvBgN,EAAI,IAAIlN,QAAQC,EAAItG,EAAGuG,EAAIxG,IAElB4e,EAAQqpE,GAAUrpE,EAAQoqE,GAEnC71E,EAAI,IAAI7M,QAAQC,EAAGC,EAAIjG,KAAKmnB,MAAM,IAAO1nB,IACzCwT,EAAI,IAAIlN,QAAQC,EAAIhG,KAAKmnB,MAAM,IAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,GAAM1nB,KAEZ4e,EAAQoqE,GAASpqE,EAASopE,EAAKC,GAExC90E,EAAI,IAAI7M,QAAQC,EAAIhG,KAAKmnB,MAAM,GAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,GAAM1nB,IACrBwT,EAAI,IAAIlN,QAAQC,EAAItG,EAAGuG,EAAIjG,KAAKmnB,MAAM,IAAO1nB,KAEnC4e,EAASopE,EAAKC,GAAWrpE,GAASopE,GACtCppE,GAAUopE,EAAKC,GAAWrpE,IAAUopE,GAE1C70E,EAAI,IAAI7M,QAAQC,EAAGC,GACnBgN,EAAI,IAAIlN,QAAQC,EAAGC,EAAIxG,IAEd4e,GAASqpE,GAAUrpE,GAASoqE,GAErC71E,EAAI,IAAI7M,QAAQC,EAAIhG,KAAKmnB,MAAM,IAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,GAAM1nB,IACrBwT,EAAI,IAAIlN,QAAQC,EAAGC,EAAIjG,KAAKmnB,MAAM,KAAO1nB,KAEhC4e,GAASoqE,GAASpqE,GAAUopE,EAAKC,IAE1C90E,EAAI,IAAI7M,QAAQC,EAAIhG,KAAKmnB,MAAM,GAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,GAAM1nB,IACrBwT,EAAI,IAAIlN,QAAQC,EAAItG,EAAGuG,EAAIjG,KAAKmnB,MAAM,KAAO1nB,SAI/C,CACC,IAAIioF,EAGJ,GAAIrpE,IAHAqpE,EAAO1nF,KAAK2Y,MAAMlZ,EAAI,EAAGC,EAAI,IAKhC,OAAO,IAAIqG,QAAQC,EAAIhG,KAAKmnB,MAAM,IAAOznB,GAAIuG,GAEzC,GAAIoY,GAAUopE,EAAKC,EAEvB,OAAO,IAAI3hF,QAAQC,EAAIhG,KAAKmnB,MAAM,IAAOznB,GAAIuG,GAEzC,GAAKoY,GAASopE,GAAQppE,IAAUopE,EAEpC,OAAO,IAAI1hF,QAAQC,EAAGC,EAAIjG,KAAKmnB,MAAM,GAAM1nB,IAEvC,GAAa,GAAT4e,EAER,OAAO,IAAItY,QAAQC,EAAItG,EAAGuG,EAAIjG,KAAKmnB,MAAM,GAAM1nB,IAE3C,GAAI4e,IAAUqpE,EAElB,OAAO,IAAI3hF,QAAQC,EAAIhG,KAAKmnB,MAAM,IAAOznB,GAAIuG,EAAIxG,GAE7C,GAAI4e,IAAWopE,EAAKC,EAExB,OAAO,IAAI3hF,QAAQC,EAAIhG,KAAKmnB,MAAM,IAAOznB,GAAIuG,EAAIxG,GAG7C4e,EAAQ,GAAOA,EAAQqpE,GAE3B90E,EAAI,IAAI7M,QAAQC,EAAIhG,KAAKmnB,MAAM,GAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,GAAM1nB,IACrBwT,EAAI,IAAIlN,QAAQC,EAAIhG,KAAKmnB,MAAM,KAAOznB,GAAIuG,EAAIxG,IAErC4e,EAAQqpE,GAAUrpE,EAASopE,EAAKC,GAEzC90E,EAAI,IAAI7M,QAAQC,EAAGC,GACnBgN,EAAI,IAAIlN,QAAQC,EAAItG,EAAGuG,IAEdoY,EAASopE,EAAKC,GAAWrpE,EAAQopE,GAE1C70E,EAAI,IAAI7M,QAAQC,EAAIhG,KAAKmnB,MAAM,IAAOznB,GAAIuG,EAAIxG,GAC9CwT,EAAI,IAAIlN,QAAQC,EAAIhG,KAAKmnB,MAAM,GAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,GAAM1nB,KAEZ4e,EAAQ,GAAOA,GAASqpE,GAEjC90E,EAAI,IAAI7M,QAAQC,EAAIhG,KAAKmnB,MAAM,GAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,IAAM1nB,IACrBwT,EAAI,IAAIlN,QAAQC,EAAIhG,KAAKmnB,MAAM,KAAOznB,GAAIuG,IAEjCoY,GAASqpE,GAAUrpE,GAAUopE,EAAKC,GAE3C90E,EAAI,IAAI7M,QAAQC,EAAGC,EAAIxG,GACvBwT,EAAI,IAAIlN,QAAQC,EAAItG,EAAGuG,EAAIxG,IAElB4e,GAAUopE,EAAKC,GAAWrpE,GAASopE,IAE5C70E,EAAI,IAAI7M,QAAQC,EAAIhG,KAAKmnB,MAAM,IAAOznB,GAAIuG,GAC1CgN,EAAI,IAAIlN,QAAQC,EAAIhG,KAAKmnB,MAAM,GAAMznB,GAAIuG,EACrCjG,KAAKmnB,MAAM,IAAM1nB,KAIvB8D,EAASrE,QAAQ+d,aAAalD,EAAIiE,EAAI1O,EAAKtJ,EAAGsJ,EAAKrJ,EAAG2M,EAAE5M,EAAG4M,EAAE3M,EAAGgN,EAAEjN,EAAGiN,EAAEhN,GAGxE,OAAc,MAAV1C,EAEI,IAAIwC,QAAQgU,EAAIiE,GAGjBza,IAoLT,SAASmlF,eAAe7gF,EAAOqB,EAAO8c,EAAYC,EAAQlP,EAAIC,EAAIy1C,EAAaxuD,EAAO0qF,GAErF/xF,KAAKiR,MAAQA,EACbjR,KAAKsS,MAAkB,MAATA,EAAiBA,EAAQ,EAAIrB,EAAM+gF,UACjDhyF,KAAKqvB,OAAoB,MAAVA,EAAkBA,EAAS,EAC1CrvB,KAAKovB,WAAa9f,YAAYwB,cAA6B,MAAdse,EAAsBA,EAAane,EAAMme,YACtFpvB,KAAKqH,MAAkB,MAATA,EAAiBA,EAAQ,2BACvCrH,KAAKmgB,GAAY,MAANA,EAAcA,EAAK,EAC9BngB,KAAKogB,GAAY,MAANA,EAAcA,EAAK,EAC9BpgB,KAAK61D,YAAcA,EACnB71D,KAAK+xF,aAAgC,MAAhBA,GAAwBA,EAskC9C,SAASE,eAERjyF,KAAK8wB,OAAS,IAAI0+C,OAElBxvE,KAAKkyF,sBAAsBlyF,KAAKmyF,4BAChCnyF,KAAKoyF,oBAAoBpyF,KAAKqyF,0BAgP/B,SAASC,YAAY/qE,EAAMvV,EAAMtK,GAEhC1H,KAAKunB,KAAOA,EACZvnB,KAAKgS,KAAOA,EACZhS,KAAK0H,MAAkB,MAATA,EAAiBA,EAAQ,GAEvC1H,KAAK0oB,OAAS,IAAIvZ,QAClBnP,KAAKuyF,eAAiB,IAAIpjF,QAyc3B,SAASqjF,sBAAsBvhF,GAE9BjR,KAAKiR,MAAQA,EACbjR,KAAKmqB,MAAQ,GAwVd,SAASsoE,kBAAkBC,EAAgBC,EAAOC,GAEjD5yF,KAAK0yF,eAAiBA,EACtB1yF,KAAK2yF,MAAkB,MAATA,EAAiBA,EAAMl7B,QAAU,KAC/Cz3D,KAAK4yF,QAAsB,MAAXA,EAAmBA,EAAQn7B,QAAU,KA2JtD,SAASo7B,aAAa5hF,GAErBjR,KAAKiR,MAAQA,EAGbjR,KAAK8yF,YAAcxqF,QAAQ2M,KAAKjV,MAAM,WAEjCA,KAAKiR,MAAM8hF,aAEd/yF,KAAK8H,YAIP9H,KAAKiR,MAAMsW,KAAKvd,YAAYC,QAAQ2gC,MAAO5qC,KAAK8yF,aAChD9yF,KAAKiR,MAAMsW,KAAKvd,YAAYC,QAAQ6gC,oBAAqB9qC,KAAK8yF,aAG9D9yF,KAAK+8C,cAAgBz0C,QAAQ2M,KAAKjV,MAAM,SAAS8J,GAExB,MAApB9J,KAAKgzF,aAA0E,MAAnDhzF,KAAKiR,MAAMa,UAAUC,SAAS/R,KAAKgzF,cAElEhzF,KAAKizF,aAAY,MAInBjzF,KAAKiR,MAAM8c,WAAW/jB,YAAYC,QAAQugC,OAAQxqC,KAAK+8C,eAkmCxD,SAASm2C,kBA1jHTjzF,WAAWywF,iBAAqC,IAAhBA,YAA8BA,iBAAc9pF,EAkM5EkrF,eAAe1lF,UAAU6E,MAAQ,KAOjC6gF,eAAe1lF,UAAUgjB,WAAa,KAOtC0iE,eAAe1lF,UAAUkG,MAAQ,KAQjCw/E,eAAe1lF,UAAUijB,OAAS,EAOlCyiE,eAAe1lF,UAAUmnC,UAAY,EAOrCu+C,eAAe1lF,UAAUkgE,aAAe,EAOxCwlB,eAAe1lF,UAAU+T,GAAK,EAO9B2xE,eAAe1lF,UAAUgU,GAAK,EAS9B0xE,eAAe1lF,UAAU+mF,YAAa,EAOtCrB,eAAe1lF,UAAUgnF,eAAgB,EAQzCtB,eAAe1lF,UAAUinF,eAAgB,EAOzCvB,eAAe1lF,UAAUknF,sBAAuB,EAOhDxB,eAAe1lF,UAAU0sC,gBAAkB,UAO3Cg5C,eAAe1lF,UAAUypD,YAAc,KAOvCi8B,eAAe1lF,UAAU/E,MAAQ,KAQjCyqF,eAAe1lF,UAAU2lF,aAAe,KAOxCD,eAAe1lF,UAAU8b,IAAM,KAO/B4pE,eAAe1lF,UAAUmnF,aAAe,KAOxCzB,eAAe1lF,UAAU+iB,UAAY,EASrC2iE,eAAe1lF,UAAUonF,UAAW,EAOpC1B,eAAe1lF,UAAUqnF,UAAY,WAEpC,OAAOzzF,KAAKkoB,KAUb4pE,eAAe1lF,UAAUsnF,WAAa,WAErC,IAAIvoF,EAAK,GAgBT,OAd6B,GAAzBtK,SAASC,aAEZqK,EAAK,qDAE4B,GAAzBtK,SAASC,aAEjBqK,EAAK,qDAEGtK,SAASC,aAAe,IAGhCqK,EAAK,uFAGCA,GAcR2mF,eAAe1lF,UAAUunF,YAAc,SAAS1iF,EAAOqB,EAAO6N,EAAIC,EAAIwzE,EAAiBC,GAEtF7zF,KAAKiR,MAAQA,EACbjR,KAAKsS,MAAkB,MAATA,EAAiBA,EAAQ,EAAIrB,EAAM+gF,UACjDhyF,KAAKmgB,GAAKA,EACVngB,KAAKogB,GAAKA,EACVpgB,KAAKywB,KAAK,KAAM,KAAMmjE,EAAiBC,IAexC/B,eAAe1lF,UAAUqkB,KAAO,SAAS68B,EAAKimC,EAAcK,EAAiBC,GAI5E,IAAIC,EAA4B9zF,KAAKiR,MAAM2B,aAAamhF,kBACpD9mE,EAAM,KAEV,IAIKjtB,KAAKozF,gBAERpzF,KAAKiR,MAAM2B,aAAamhF,kBAAoB,SAASliF,EAAOmiF,GAE3DA,EAAQ7sF,KAAK0K,EAAM0V,KAAK0sE,iBAItBj0F,KAAKqzF,gBAERrzF,KAAKiR,MAAM2B,aAAashF,YAAc,SAASriF,EAAOsiF,EAASC,EAAcC,GAE5EF,EAAQ7lE,QAAUzc,EAAM0V,KAAKtW,MAAMqd,QACnC6lE,EAAQhtF,KAAK0K,EAAM0V,KAAK0sE,iBAI1Bj0F,KAAKkoB,IAAuB,MAAhBqrE,EAAwBA,EAAevzF,KAAKkoB,IACxD,IAAIosE,GAAc,EAEF,MAAZt0F,KAAKkoB,MAERosE,GAAc,EACdt0F,KAAKkoB,IAAM1mB,OAAOivB,QAGnB,IAAIvsB,EAAMlE,KAAKkoB,IAAIrnB,SAEnB,GAAIyzF,EACJ,CACC,IAAInpF,EAAKnL,KAAK0zF,aAEJ,MAANvoF,GAAcA,EAAGhJ,OAAS,GAE7B+B,EAAImG,QAAQc,GAGTjL,SAAS4C,OAEZoB,EAAImG,QAAQ,qGAIgB,eAAxBxJ,SAASmH,YAEZ9D,EAAImG,QAAQ,mBAGbnG,EAAImG,QAAQ,WAGbnG,EAAImG,QAAQ,UACZrK,KAAKu0F,UAAUrwF,EAAKopD,GACpBppD,EAAImG,QAAQ,WACZnG,EAAImG,QAAQ,yBAIb,IAAIoc,EAASzmB,KAAKiR,MAAMye,iBAAiBjgB,QACrC+kF,EAAex0F,KAAKiR,MAAMa,UAAU8d,WACpCD,EAAK6kE,EAAex0F,KAAKsS,MACzB9K,EAAKxH,KAAKiR,MAAMa,UAAU8c,eAGzB5uB,KAAKmzF,aAETnzF,KAAKmgB,IAAM3Y,EAAG4H,EAAIpP,KAAKsS,MACvBtS,KAAKogB,IAAM5Y,EAAG6H,EAAIrP,KAAKsS,MACvBmU,EAAOxe,OAASwe,EAAOrX,EACvBqX,EAAO5e,QAAU4e,EAAOpX,EACxBoX,EAAOrX,EAAI,EACXqX,EAAOpX,EAAI,EACXrP,KAAKqvB,OAAS,GAIf,IAAIgjD,EAAiBryE,KAAKovB,WAAWnnB,MAAuB,EAAdjI,KAAKqvB,OAC/ColE,EAAkBz0F,KAAKovB,WAAWvnB,OAAwB,EAAd7H,KAAKqvB,OAGrDrvB,KAAKovB,WAAWvnB,QAAU7H,KAAKuzC,UAAYvzC,KAAKssE,aAIhD7lD,EAAOxe,OAAS0nB,EAChBlJ,EAAO5e,QAAU8nB,EAEjB,IAAI+kE,EAAStrF,KAAKC,IAAI,EAAGD,KAAKgZ,MAAMqE,EAAOxe,MAAQjI,KAAKmgB,IAAMkyD,IAC1DsiB,EAASvrF,KAAKC,IAAI,EAAGD,KAAKgZ,MAAMqE,EAAO5e,OAAS7H,KAAKogB,IAAMq0E,IAC/Dz0F,KAAKmvB,UAAYulE,EAASC,EAE1B,IAAIC,EAAoBtsF,QAAQ2M,KAAKjV,MAAM,WAE1C,GAAIA,KAAK+xF,eAAiB4C,EAAS,GAAKD,EAAS,GACjD,CACC,IAAIptF,EAAQtH,KAAK60F,mBAAmBF,EAAQD,GAI5C,GAHAxwF,EAAIkD,KAAK7C,YAAY+C,GAGjBpH,SAASE,OAA6B,MAApB8D,EAAIpD,cAA4C,GAApBoD,EAAIpD,cAAyC,GAApBoD,EAAIpD,cAAyC,GAApBoD,EAAIpD,aACxG,CACCwG,EAAMI,MAAMogB,SAAW,WAEvB,IAAIu+C,EAAS,WAEZ/+D,EAAMI,MAAMuV,KAAQ/Y,EAAIkD,KAAKoE,WAAatH,EAAIV,gBAAgBgI,WAAa,GAAM,MAGlFvB,QAAQD,YAAYhK,KAAKkoB,IAAK,UAAU,SAAS/f,GAEhDk+D,OAGDp8D,QAAQD,YAAYhK,KAAKkoB,IAAK,UAAU,SAAS/f,GAEhDk+D,YAMAyuB,EAAUxsF,QAAQ2M,KAAKjV,MAAM,SAASitB,EAAKktB,GA2B9C,GAxBwB,MAApBn6C,KAAK61D,cAER5oC,EAAIvlB,MAAMmuD,YAAc71D,KAAK61D,YAC7B5oC,EAAIvlB,MAAMuiB,YAAc,QACxBgD,EAAIvlB,MAAMouD,YAAc,OAKzB7oC,EAAIvlB,MAAM40D,WAAat8D,KAAK84C,iBAExB86C,GAAmBz5C,KAEtBltB,EAAIvlB,MAAMqtF,eAAiB,UAWxBT,IAAgBp0F,SAASE,OAASS,SAASC,cAAgB,IAAMZ,SAASS,SAM7EuD,EAAImG,QAAQ4iB,EAAIlS,WAChBkS,EAAIpZ,WAAWC,YAAYmZ,QAEvB,GAAI/sB,SAASE,OAASS,SAASC,cAAgB,IAAMZ,SAASS,QACnE,CACC,IAAI8O,EAAQvL,EAAIlD,cAAc,OAC9ByO,EAAM6K,UAAY2S,EAAIlS,UACtBtL,EAAQA,EAAMnL,qBAAqB,OAAO,GAC1CJ,EAAIkD,KAAK7C,YAAYkL,GACrBwd,EAAIpZ,WAAWC,YAAYmZ,QAI3BA,EAAIpZ,WAAWC,YAAYmZ,GAC3B/oB,EAAIkD,KAAK7C,YAAY0oB,IAGlB2mE,GAAmBz5C,IAEtBn6C,KAAKg1F,aAAa9wF,MAIhB+wF,EAAMj1F,KAAKk1F,cAAcl1F,KAAKovB,WAAWnnB,MAAOjI,KAAKovB,WAAWvnB,QAEpE,GAAW,MAAPotF,EAEH,IAAK,IAAIpwF,EAAI,EAAGA,EAAIowF,EAAI9yF,OAAQ0C,IAE/BiwF,EAAQG,EAAIpwF,IAAI,GAIlB,IAAIswF,EAAMn1F,KAAKo1F,cAAcp1F,KAAKovB,WAAWnnB,MAAOjI,KAAKovB,WAAWvnB,QAIpE,IAAShD,EAAI,EAAGA,EAAI8vF,EAAQ9vF,IAK3B,IAHA,IAAI4N,EAAK5N,EAAI4vF,EAAkBz0F,KAAKsS,MAAQtS,KAAKogB,GAAKpgB,KAAKsS,OACxDmU,EAAOpX,EAAI7H,EAAG6H,EAAImlF,GAAgBA,EAE5Bl1B,EAAI,EAAGA,EAAIo1B,EAAQp1B,IAC5B,CACC,GAAgB,MAAZt/D,KAAKkoB,IAER,OAAO,KAGR,IAAI3V,EAAK+sD,EAAI+S,EAAiBryE,KAAKsS,MAAQtS,KAAKmgB,GAAKngB,KAAKsS,OACvDmU,EAAOrX,EAAI5H,EAAG4H,EAAIolF,GAAgBA,EACjCa,EAAUxwF,EAAI6vF,EAASp1B,EAAI,EAC3B3W,EAAO,IAAIr5C,YAAYiD,EAAIE,EAAI4/D,EAAgBoiB,IACnDxnE,EAAMjtB,KAAKs1F,WAAWt1F,KAAKovB,WAAWnnB,MAAOjI,KAAKovB,WAAWvnB,OAAQ,EAAG,EAAGS,QAAQ2M,KAAKjV,MAAM,SAASitB,GAEtGjtB,KAAKu1F,kBAAkBhjF,GAAKE,EAAIzS,KAAKsS,MAAO+iF,EAASpoE,EAAK07B,GAEtD3oD,KAAKszF,sBAERtzF,KAAKw1F,sBAAsBvoE,GAAM1a,GAAKE,MAEpC4iF,IAGAhxF,aAAa,KAAM,UAAUgxF,GAEjCP,EAAQ7nE,EAAY,MAAPkoE,GAAetwF,EAAI8vF,EAAS,GAAKr1B,EAAIo1B,EAAS,GAI7D,GAAW,MAAPS,EAEH,IAAStwF,EAAI,EAAGA,EAAIswF,EAAIhzF,OAAQ0C,IAE/BiwF,EAAQK,EAAItwF,GAAIA,EAAIswF,EAAIhzF,OAAS,GAI/BmyF,IAAgBT,IAEnB7zF,KAAKy1F,gBACLb,KAGD50F,KAAKkoB,IAAIoJ,QAEV,MAAOljB,GAGK,MAAP6e,GAAiC,MAAlBA,EAAIpZ,YAEtBoZ,EAAIpZ,WAAWC,YAAYmZ,GAG7B,QAECjtB,KAAKiR,MAAM2B,aAAamhF,kBAAoBD,EAG7C,OAAO9zF,KAAKkoB,KAQb4pE,eAAe1lF,UAAU4oF,aAAe,SAAS9wF,GAEhD,IAAIm2C,EAAKn2C,EAAIlD,cAAc,MAC3Bq5C,EAAGnK,UAAY,cACfhsC,EAAIkD,KAAK7C,YAAY81C,IAQtBy3C,eAAe1lF,UAAUqpF,cAAgB,WAExC,IAEC,GAAgB,MAAZz1F,KAAKkoB,KAAoC,MAArBloB,KAAKkoB,IAAIrnB,SACjC,CACC,IAAIqD,EAAMlE,KAAKkoB,IAAIrnB,SAEnBb,KAAK01F,aAAaxxF,GAClBA,EAAImG,QAAQ,WACZnG,EAAImG,QAAQ,WACZnG,EAAI0sB,QAGJ3mB,QAAQm7B,QAAQlhC,EAAIkD,OAGtB,MAAOgH,MAYR0jF,eAAe1lF,UAAUmoF,UAAY,SAASrwF,EAAKopD,GAEhC,MAAdttD,KAAKqH,OAERnD,EAAImG,QAAQ,UAAYrK,KAAKqH,MAAQ,YAIlCnH,SAAS4C,QAEZoB,EAAImG,QAAQ,qGAIbnK,SAAS8D,KAAK,aAAc9D,SAASwF,SAAW,kBAAmBxB,GAGnEA,EAAImG,QAAQ,2BACZnG,EAAImG,QAAQ,kBACZnG,EAAImG,QAAQ,8CACZnG,EAAImG,QAAQ,6CACZnG,EAAImG,QAAQ,uCACZnG,EAAImG,QAAQ,KACZnG,EAAImG,QAAQ,mBAIZnG,EAAImG,QAAQ,kLAGZnG,EAAImG,QAAQ,sEACZnG,EAAImG,QAAQ,uCACZnG,EAAImG,QAAQ,KAED,MAAPijD,GAEHppD,EAAImG,QAAQijD,GAGbppD,EAAImG,QAAQ,aAQbynF,eAAe1lF,UAAUspF,aAAe,SAASxxF,KAUjD4tF,eAAe1lF,UAAUyoF,mBAAqB,SAASF,EAAQD,GAE9D,IAAIxwF,EAAMlE,KAAKkoB,IAAIrnB,SACfyG,EAAQpD,EAAIlD,cAAc,SAC9BsG,EAAM4oC,UAAY,iBAClB5oC,EAAMjD,aAAa,SAAU,KAI7B,IAFA,IAAIkD,EAAQrD,EAAIlD,cAAc,SAErB6D,EAAI,EAAGA,EAAI8vF,EAAQ9vF,IAC5B,CAGC,IAFA,IAAI+7C,EAAM18C,EAAIlD,cAAc,MAEnBs+D,EAAI,EAAGA,EAAIo1B,EAAQp1B,IAC5B,CACC,IAAI+1B,EAAUxwF,EAAI6vF,EAASp1B,EAAI,EAC3BttD,EAAO9N,EAAIlD,cAAc,MACzBgb,EAAI9X,EAAIlD,cAAc,KAI1B,GAHAgb,EAAE3X,aAAa,OAAQ,WAAagxF,GAGhCn1F,SAASiB,QAAUjB,SAASoB,QAAUpB,SAASmC,MACnD,CACC,IAAIszF,EAAK,8CAAiDN,EAAU,uDACpEr5E,EAAE3X,aAAa,UAAWsxF,GAG3BrtF,QAAQlE,MAAM4X,EAAGq5E,EAASnxF,GAC1B8N,EAAKzN,YAAYyX,GACjB4kC,EAAIr8C,YAAYyN,GAGjBzK,EAAMhD,YAAYq8C,GAKnB,OAFAt5C,EAAM/C,YAAYgD,GAEXD,GAoBRwqF,eAAe1lF,UAAUkpF,WAAa,SAASxsF,EAAGD,EAAG0J,EAAIE,EAAIpK,EAASutF,GAErE,IAAI1xF,EAAMlE,KAAKkoB,IAAIrnB,SACfosB,EAAMpsB,SAASG,cAAc,OAC7B+a,EAAM,KAEV,IAIC,GAAU,GAANxJ,GAAiB,GAANE,EACf,CACCwa,EAAIvlB,MAAMogB,SAAW,WACrBmF,EAAIvlB,MAAMO,MAAQa,EAAI,KACtBmkB,EAAIvlB,MAAMG,OAASgB,EAAI,KACvBokB,EAAIvlB,MAAMmuF,gBAAkB,SAExBC,EAAWj1F,SAASG,cAAc,QAC7B0G,MAAMogB,SAAW,WAC1BguE,EAASpuF,MAAMuV,IAAMjd,KAAKqvB,OAAS,KACnCymE,EAASpuF,MAAM+U,KAAOzc,KAAKqvB,OAAS,KACpCymE,EAASpuF,MAAMO,MAASa,EAAI,EAAI9I,KAAKqvB,OAAU,KAC/CymE,EAASpuF,MAAMG,OAAUgB,EAAI,EAAI7I,KAAKqvB,OAAU,KAChDymE,EAASpuF,MAAMsN,SAAW,SAE1B,IAAI+gF,EAAWl1F,SAASG,cAAc,OACtC+0F,EAASruF,MAAMogB,SAAW,WAC1BiuE,EAASruF,MAAM+qC,WAAalgC,EAAK,KACjCwjF,EAASruF,MAAM6rC,UAAY9gC,EAAK,KAGR,GAApBvO,EAAIpD,eAEPg1F,EAASpuF,MAAMogB,SAAW,WAC1BiuE,EAASruF,MAAMogB,SAAW,YAGH,IAApB5jB,EAAIpD,eAEPi1F,EAASruF,MAAMO,MAAQ,OACvB8tF,EAASruF,MAAMG,OAAS,QAGzBiuF,EAASvxF,YAAYwxF,GACrB9oE,EAAI1oB,YAAYuxF,GAChBj1F,SAASuG,KAAK7C,YAAY0oB,GAC1BlR,EAAMg6E,MAIP,CAYC,IAAID,EAXJ7oE,EAAIvlB,MAAMO,MAAQa,EAAI,KACtBmkB,EAAIvlB,MAAMG,OAASgB,EAAI,KACvBokB,EAAIvlB,MAAMsN,SAAW,SACrBiY,EAAIvlB,MAAMmuF,gBAAkB,QAGJ,GAApB3xF,EAAIpD,eAEPmsB,EAAIvlB,MAAMogB,SAAW,aAGlBguE,EAAWj1F,SAASG,cAAc,QAC7B0G,MAAMO,MAASa,EAAI,EAAI9I,KAAKqvB,OAAU,KAC/CymE,EAASpuF,MAAMG,OAAUgB,EAAI,EAAI7I,KAAKqvB,OAAU,KAChDymE,EAASpuF,MAAMsN,SAAW,UAEtB9U,SAASE,OAA8B,MAApB8D,EAAIpD,cAA4C,GAApBoD,EAAIpD,cAClC,GAApBoD,EAAIpD,cAAyC,GAApBoD,EAAIpD,cAO7Bg1F,EAASpuF,MAAMuV,IAAMjd,KAAKqvB,OAAS,KACnCymE,EAASpuF,MAAM+U,KAAOzc,KAAKqvB,OAAS,OANpCymE,EAASpuF,MAAM6rC,UAAYvzC,KAAKqvB,OAAS,KACzCymE,EAASpuF,MAAM+qC,WAAazyC,KAAKqvB,OAAS,MAQvCrvB,KAAKiR,MAAMqd,SAAW3gB,YAAYylB,cAErC0iE,EAASpuF,MAAMogB,SAAW,YAG3BmF,EAAI1oB,YAAYuxF,GAChBj1F,SAASuG,KAAK7C,YAAY0oB,GAC1BlR,EAAM+5E,GAGR,MAAO1nF,GAKN,MAHA6e,EAAIpZ,WAAWC,YAAYmZ,GAC3BA,EAAM,KAEA7e,EAKP,OAFA/F,EAAQ0T,GAEDkR,GAQR6kE,eAAe1lF,UAAU4hB,QAAU,WAElC,IAAI8vB,EAAO99C,KAAKiR,MAAMsW,KAAK0lD,YAO3B,OALY,MAARnvB,IAEHA,EAAO99C,KAAKiR,MAAM8c,WAAWC,WAGvB8vB,GAiBRg0C,eAAe1lF,UAAUmpF,iBAAmB,SAAShjF,EAAIE,EAAIH,EAAOsjF,EAAY3oE,EAAK07B,GAEpF,IAAIphC,EAAOvnB,KAAKiR,MAAMa,UAClBkkF,EAAoBh2F,KAAKiR,MAAM0W,UACnC3nB,KAAKiR,MAAM0W,UAAYsF,EAEvB,IAAIwB,EAASlH,EAAK0uE,YACdC,EAAiB3uE,EAAK4uE,oBACtB/nE,EAAW7G,EAAK0sE,cAChB5lE,EAAc9G,EAAKsrC,iBACnBujC,EAAY9jF,EAEhB,GAAItS,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,aAKrC,GAHAhH,EAAK2sC,aAGAh0D,SAASgD,MACd,CACC,IAAIupD,EAAIllC,EAAK0sE,cAAcpgF,WAChB44C,EAAE92C,aAAa,aAC1B82C,EAAEpoD,aAAa,kBAAmB,OAClCooD,EAAEpoD,aAAa,YAAa,SAAWiO,EAAQ,IAAMA,EAAzB,cACZC,EAAK,IAAME,EAAK,KAEhCH,EAAQ,EACRC,EAAK,EACLE,EAAK,QAGEzS,KAAKiR,MAAMqd,SAAW3gB,YAAYylB,YAE1C7L,EAAK6sC,YAIL7sC,EAAK4sC,aAIN,IAAIlmC,EAAgB1G,EAAK2G,kBACzB3G,EAAK4G,kBAAiB,GAGtB,IAAIkoE,EAAer2F,KAAKiR,MAAM0C,YAC9B3T,KAAKiR,MAAM0kC,YAAW,GAGtB,IAAIhnB,EAAYpH,EAAKqH,eACrBrH,EAAKoH,UAAY,IAAIxf,QAAQoD,EAAIE,GAGjC,IAAII,EAAS7S,KAAKiR,MAAM2B,aAAaC,OACjC0wC,EAASh8B,EAAKg8B,OACd1qC,EAAI0O,EAAKjV,MAGb,GAAItS,KAAKwzF,SACT,CACC,IAAI8C,EAAW,IAAIhnF,aAAaq5C,EAAKv5C,EAAIuf,EAAUvf,GAAKyJ,GAAI8vC,EAAKt5C,EAAIsf,EAAUtf,GAAKwJ,EAClF8vC,EAAK1gD,MAAQ4Q,EAAIu9E,EAAWztC,EAAK9gD,OAASgR,EAAIu9E,GAIhDp2F,KAAKiR,MAAM2B,aAAaC,OAAS,SAAShB,EAAOgvC,EAAO01C,GAEvD,GAAa,MAAT1kF,EACJ,CAEC,IAAI2kF,EAAOjzC,EAAO13C,IAAIgG,EAAMG,MAE5B,GAAY,MAARwkF,EACJ,CACC,IAAI3oC,EAAOtmC,EAAKtE,eAAeuzE,GAAM,GAIrC,GAAY,MAAR3oC,GAAgBA,EAAK5lD,MAAQ,GAAK4lD,EAAKhmD,OAAS,IAClDS,QAAQqe,WAAW2vE,EAAUzoC,GAE9B,QAKHh7C,EAAOzH,MAAMpL,KAAMqL,YAIrB,IAAIwjB,EAAO,KAEX,IAIC,IAAI1E,EAAQ,CAACnqB,KAAKguB,WAClBa,EAAO,IAAIC,sBAAsBvH,EAAMjV,EAAO6X,EAAO,KAAM7hB,QAAQ2M,KAAKjV,MAAM,SAAS6R,GAEtF,OAAO7R,KAAK8iD,oBAAoBjxC,OAGlC,QAIC,GAAI3R,SAASE,MAEZmnB,EAAK8G,YAAY/T,UAAY,GAC7BiN,EAAKkH,OAAO/mB,MAAMsN,SAAW,SAC7BuS,EAAKkH,OAAO/mB,MAAMogB,SAAW,WAC7BP,EAAKkH,OAAO/mB,MAAMuV,IAAMjd,KAAKuzC,UAAY,KACzChsB,EAAKkH,OAAO/mB,MAAMO,MAAQ0gD,EAAK1gD,MAAQ,KACvCsf,EAAKkH,OAAO/mB,MAAMG,OAAS8gD,EAAK9gD,OAAS,UAOzC,IAFA,IAAIgJ,EAAMoc,EAAIrX,WAEA,MAAP/E,GACP,CACC,IAAI6H,EAAO7H,EAAIgF,YACX9V,EAAO8Q,EAAIyF,SAAS5I,cAGZ,OAAR3N,GAEH8Q,EAAInJ,MAAMsN,SAAW,SACrBnE,EAAInJ,MAAMogB,SAAW,WACrBjX,EAAInJ,MAAMuV,IAAMjd,KAAKuzC,UAAY,KACjC1iC,EAAIxM,aAAa,QAASskD,EAAK1gD,OAC/B4I,EAAIxM,aAAa,SAAUskD,EAAK9gD,QAChCgJ,EAAInJ,MAAMO,MAAQ,GAClB4I,EAAInJ,MAAMG,OAAS,IAGS,WAApBgJ,EAAInJ,MAAM0M,QAA+B,OAARrU,GAEzC8Q,EAAIgD,WAAWC,YAAYjD,GAG5BA,EAAM6H,EAKR,GAAI1Y,KAAKszF,qBACT,CACC,IAAImD,EAAOxpE,EAAI3oB,qBAAqB,OAEhCmyF,EAAKt0F,OAAS,IAEjBs0F,EAAK,GAAG/uF,MAAMogB,SAAW,YAK3BP,EAAK8G,YAAYxa,WAAWC,YAAYyT,EAAK8G,aAG7CruB,KAAKiR,MAAM0kC,WAAW0gD,GACtBr2F,KAAKiR,MAAM0W,UAAYquE,EACvBh2F,KAAKiR,MAAM2B,aAAaC,OAASA,EACjC0U,EAAKkH,OAASA,EACdlH,EAAK2uE,eAAiBA,EACtB3uE,EAAK6G,SAAWA,EAChB7G,EAAK8G,YAAcA,EACnB9G,EAAKoH,UAAYA,EACjBE,EAAKI,UACL1H,EAAK4G,iBAAiBF,KASxB6jE,eAAe1lF,UAAU02C,oBAAsB,SAASjxC,GAEvD,OAAO7R,KAAKiR,MAAMylF,eAAe7kF,EAAMG,OAQxC8/E,eAAe1lF,UAAUopF,sBAAwB,SAASvoE,EAAK1a,EAAIE,GAElE,IAAIu6C,EAAKhtD,KAAKiR,MAAMwvC,gBAEpB,GAAU,MAANuM,EACJ,CACC,IAAIl7B,EAAMjxB,SAASG,cAAc,OACjC8wB,EAAIpqB,MAAMogB,SAAW,WACrBgK,EAAIpqB,MAAM+qC,WAAarpC,KAAK2c,MAAMxT,EAAKvS,KAAKsS,OAAS,KACrDwf,EAAIpqB,MAAM6rC,UAAYnqC,KAAK2c,MAAMtT,EAAKzS,KAAKsS,OAAS,KACpDwf,EAAIztB,aAAa,QAAS+E,KAAK2c,MAAM/lB,KAAKsS,MAAQ06C,EAAG/kD,QACrD6pB,EAAIztB,aAAa,SAAU+E,KAAK2c,MAAM/lB,KAAKsS,MAAQ06C,EAAGnlD,SACtDiqB,EAAI7sB,IAAM+nD,EAAG/nD,IAEbgoB,EAAIumB,aAAa1hB,EAAK7E,EAAIrX,cAS5Bk8E,eAAe1lF,UAAU8oF,cAAgB,WAExC,OAAO,MAQRpD,eAAe1lF,UAAUgpF,cAAgB,WAExC,OAAO,MAYRtD,eAAe1lF,UAAUilB,MAAQ,SAASi8B,GAEzC,IAAIplC,EAAMloB,KAAKywB,KAAK68B,GAET,MAAPplC,GAEHA,EAAImJ,SASNygE,eAAe1lF,UAAUwkB,MAAQ,WAEhB,MAAZ5wB,KAAKkoB,MAERloB,KAAKkoB,IAAI0I,QACT5wB,KAAKkoB,IAAM,OAIbjoB,WAAW6xF,oBAA2C,IAAnBA,eAAiCA,oBAAiBlrF,EAqErFqrF,aAAa7lF,UAAU0kB,OAOvBmhE,aAAa7lF,UAAU+lF,yBAA2B,WAEjD,IAAIzqF,EAAQ,IAAI8nE,OAUhB,OARA9nE,EAAMiG,YAAYswB,aAAetwB,YAAY+wB,gBAC7Ch3B,EAAMiG,YAAYkqB,iBAAmB64D,YAAYC,mBACjDjpF,EAAMiG,YAAYisB,sBAAwBjsB,YAAYyyB,aACtD14B,EAAMiG,YAAYgsB,aAAehsB,YAAYwyB,aAC7Cz4B,EAAMiG,YAAYurB,iBAAmB,UACrCxxB,EAAMiG,YAAY6rB,mBAAqB,UACvC9xB,EAAMiG,YAAYqvB,iBAAmB,UAE9Bt1B,GAQRuqF,aAAa7lF,UAAUimF,uBAAyB,WAE/C,IAAI3qF,EAAQ,IAAI8nE,OAShB,OAPA9nE,EAAMiG,YAAYswB,aAAetwB,YAAY0xB,gBAC7C33B,EAAMiG,YAAY8tB,gBAAkB9tB,YAAY+xB,cAChDh4B,EAAMiG,YAAYisB,sBAAwBjsB,YAAYyyB,aACtD14B,EAAMiG,YAAYgsB,aAAehsB,YAAYwyB,aAC7Cz4B,EAAMiG,YAAY6rB,mBAAqB,UACvC9xB,EAAMiG,YAAYqvB,iBAAmB,UAE9Bt1B,GAYRuqF,aAAa7lF,UAAU8lF,sBAAwB,SAASxqF,GAEvD1H,KAAK22F,aAAa,gBAAiBjvF,IAQpCuqF,aAAa7lF,UAAUgmF,oBAAsB,SAAS1qF,GAErD1H,KAAK22F,aAAa,cAAejvF,IAQlCuqF,aAAa7lF,UAAUwqF,sBAAwB,WAE9C,OAAO52F,KAAK8wB,OAAsB,eAQnCmhE,aAAa7lF,UAAUyqF,oBAAsB,WAE5C,OAAO72F,KAAK8wB,OAAoB,aAwCjCmhE,aAAa7lF,UAAUuqF,aAAe,SAAS52F,EAAM2H,GAEpD1H,KAAK8wB,OAAO/wB,GAAQ2H,GAerBuqF,aAAa7lF,UAAUqhE,aAAe,SAAS1tE,EAAM+2F,GAEpD,IAAIpvF,EAAQovF,EAEZ,GAAY,MAAR/2F,GAAgBA,EAAKoC,OAAS,EAClC,CACC,IAAI8oB,EAAQlrB,EAAKwO,MAAM,KAKtB7G,EAHY,MAATA,GACe,KAAlB3H,EAAKyO,OAAO,GAEJlG,QAAQmH,MAAM/H,GAId,IAAI8nE,OAIZ,IAAK,IAAI3qE,EAAI,EAAGA,EAAIomB,EAAM9oB,OAAQ0C,IAClC,CACC,IAAIgM,EAAMoa,EAAMpmB,GACZumB,EAAMva,EAAItQ,QAAQ,KAEtB,GAAI6qB,GAAO,EACX,CACC,IAAI9e,EAAMuE,EAAIpL,UAAU,EAAG2lB,GACvBrjB,EAAQ8I,EAAIpL,UAAU2lB,EAAM,GAE5BrjB,GAAS4F,YAAYC,YAEjBlG,EAAM4E,GAELhE,QAAQygB,UAAUhhB,GAE1BL,EAAM4E,GAAOqI,WAAW5M,GAIxBL,EAAM4E,GAAOvE,MAIf,CAEA,IAAIgvF,EAAW/2F,KAAK8wB,OAAOjgB,GAE3B,GAAgB,MAAZkmF,EAEH,IAAK,IAAIzqF,KAAOyqF,EAEfrvF,EAAM4E,GAAOyqF,EAASzqF,KAO3B,OAAO5E,GAGRzH,WAAWgyF,kBAAuC,IAAjBA,aAA+BA,kBAAerrF,EA4C/E0rF,YAAYlmF,UAAY,IAAIkD,YAC5BgjF,YAAYlmF,UAAUH,YAAcqmF,YAOpCA,YAAYlmF,UAAUmb,KAAO,KAO7B+qE,YAAYlmF,UAAU4F,KAAO,KAQ7BsgF,YAAYlmF,UAAU1E,MAAQ,KAO9B4qF,YAAYlmF,UAAU4qF,cAAe,EAOrC1E,YAAYlmF,UAAU6qF,SAAU,EAQhC3E,YAAYlmF,UAAUsc,OAAS,KAQ/B4pE,YAAYlmF,UAAU+Y,eAAiB,KASvCmtE,YAAYlmF,UAAUmmF,eAAiB,KAOvCD,YAAYlmF,UAAU8qF,mBAAqB,KAO3C5E,YAAYlmF,UAAU+qF,mBAAqB,KAO3C7E,YAAYlmF,UAAUgrF,iBAAmB,EAOzC9E,YAAYlmF,UAAUjK,OAAS,EAQ/BmwF,YAAYlmF,UAAUirF,SAAW,KAOjC/E,YAAYlmF,UAAUiG,MAAQ,KAQ9BigF,YAAYlmF,UAAUiC,KAAO,KAO7BikF,YAAYlmF,UAAUkrF,cAAgB,KAOtChF,YAAYlmF,UAAUmrF,eAAiB,KAavCjF,YAAYlmF,UAAUorF,mBAAqB,SAASnoE,EAAQ5I,GAK3D,GAHA4I,EAASA,GAAU,EACnB5I,EAAoB,MAAVA,EAAkBA,EAAS,IAAInX,YAAYtP,KAAKoP,EAAGpP,KAAKqP,EAAGrP,KAAKiI,MAAOjI,KAAK6H,QAEpE,MAAd7H,KAAKqS,OAAuC,MAAtBrS,KAAKqS,MAAM67C,SAAgD,SAA7BluD,KAAKqS,MAAM67C,QAAQzF,OAC3E,CACC,IAAIA,EAASzoD,KAAKqS,MAAM67C,QAAQ6L,cAAc/5D,KAAK0H,MAAO+e,EAAOrX,EAAGqX,EAAOpX,EAAGoX,EAAOxe,MAAOwe,EAAO5e,QAEnG4e,EAAOrX,EAAIq5C,EAAOr5C,EAClBqX,EAAOpX,EAAIo5C,EAAOp5C,EAClBoX,EAAOxe,MAAQjI,KAAKqS,MAAM67C,QAAQgL,GAAKzQ,EAAOxgD,MAC9Cwe,EAAO5e,OAAS7H,KAAKqS,MAAM67C,QAAQiL,GAAK1Q,EAAO5gD,OAQhD,OALc,GAAVwnB,GAEH5I,EAAOjW,KAAK6e,GAGN5I,GAcR6rE,YAAYlmF,UAAUqrF,yBAA2B,SAASrxE,EAAOqc,GAE5DA,GAEwB,MAAvBziC,KAAKmlB,iBAERnlB,KAAKmlB,eAAiB,IAGW,GAA9BnlB,KAAKmlB,eAAehjB,OAEvBnC,KAAKmlB,eAAevY,KAAKwZ,GAIzBpmB,KAAKmlB,eAAe,GAAKiB,GAKC,MAAvBpmB,KAAKmlB,gBAERnlB,KAAKmlB,eAAiB,GACtBnlB,KAAKmlB,eAAevY,KAAK,MACzB5M,KAAKmlB,eAAevY,KAAKwZ,IAEa,GAA9BpmB,KAAKmlB,eAAehjB,OAE5BnC,KAAKmlB,eAAevY,KAAKwZ,GAIzBpmB,KAAKmlB,eAAenlB,KAAKmlB,eAAehjB,OAAS,GAAKikB,GAUzDksE,YAAYlmF,UAAUksD,UAAY,SAASlkD,GAExB,MAAdpU,KAAKqS,OAERrS,KAAKqS,MAAMimD,UAAUlkD,GAGL,MAAbpU,KAAKqO,MAERrO,KAAKqO,KAAKiqD,UAAUlkD,IActBk+E,YAAYlmF,UAAUuzD,mBAAqB,SAAS77C,GAEnD,IAAIjT,EAAM7Q,KAAK03F,wBAAwB5zE,GAEvC,OAAe,MAAPjT,EAAeA,EAAImB,KAAO,MAanCsgF,YAAYlmF,UAAUsrF,wBAA0B,SAAS5zE,GAExD,OAAO,EAAW9jB,KAAKk3F,mBAAqBl3F,KAAKm3F,oBAalD7E,YAAYlmF,UAAUurF,wBAA0B,SAASC,EAAe9zE,GAEnEA,EAEH9jB,KAAKk3F,mBAAqBU,EAI1B53F,KAAKm3F,mBAAqBS,GAS5BtF,YAAYlmF,UAAUyrF,cAAgB,WAErC,OAAO73F,KAAK83F,YAUbxF,YAAYlmF,UAAU2rF,eAAiB,WAEtC,OAAO/3F,KAAKg4F,aAQb1F,YAAYlmF,UAAU6rF,mBAAqB,WAE1C,IAAIzwF,EAAKxH,KAAKunB,KAAKoH,UACf9V,EAAI7Y,KAAKunB,KAAKjV,MAClBtS,KAAK83F,WAAa,IAAIxoF,YAAYtP,KAAKoP,EAAIyJ,EAAIrR,EAAG4H,EAAGpP,KAAKqP,EAAIwJ,EAAIrR,EAAG6H,EAAGrP,KAAKiI,MAAQ4Q,EAAG7Y,KAAK6H,OAASgR,GACtG7Y,KAAKg4F,YAAc1oF,YAAYwB,cAAc9Q,KAAK83F,YAEhC,MAAd93F,KAAKqS,OAAiBrS,KAAKqS,MAAMuiD,yBAEpC50D,KAAKg4F,YAAYrnF,YASnB2hF,YAAYlmF,UAAU8rF,SAAW,SAASrmF,GAEzC7R,KAAKunB,KAAO1V,EAAM0V,KAClBvnB,KAAKgS,KAAOH,EAAMG,KAClBhS,KAAK0H,MAAQmK,EAAMnK,MACnB1H,KAAKmlB,eAAiBtT,EAAMsT,eAC5BnlB,KAAK0oB,OAAS7W,EAAM6W,OACpB1oB,KAAKuyF,eAAiB1gF,EAAM0gF,eAC5BvyF,KAAKqzD,YAAcxhD,EAAMwhD,YACzBrzD,KAAKo3F,iBAAmBvlF,EAAMulF,iBAC9Bp3F,KAAKq3F,SAAWxlF,EAAMwlF,SACtBr3F,KAAKmC,OAAS0P,EAAM1P,OACpBnC,KAAKoP,EAAIyC,EAAMzC,EACfpP,KAAKqP,EAAIwC,EAAMxC,EACfrP,KAAKiI,MAAQ4J,EAAM5J,MACnBjI,KAAK6H,OAASgK,EAAMhK,OACpB7H,KAAKs3F,cAAgBzlF,EAAMylF,cAC3Bt3F,KAAKu3F,eAAiB1lF,EAAM0lF,gBAQ7BjF,YAAYlmF,UAAUqD,MAAQ,WAE5B,IAAIA,EAAQ,IAAI6iF,YAAYtyF,KAAKunB,KAAMvnB,KAAKgS,KAAMhS,KAAK0H,OAGxD,GAA2B,MAAvB1H,KAAKmlB,eACT,CACC1V,EAAM0V,eAAiB,GAEvB,IAAK,IAAItgB,EAAI,EAAGA,EAAI7E,KAAKmlB,eAAehjB,OAAQ0C,IAE/C4K,EAAM0V,eAAetgB,GAAK7E,KAAKmlB,eAAetgB,GAAG4K,QA6BnD,OAzBmB,MAAfzP,KAAK0oB,SAERjZ,EAAMiZ,OAAS1oB,KAAK0oB,OAAOjZ,SAGD,MAAvBzP,KAAKuyF,iBAER9iF,EAAM8iF,eAAiBvyF,KAAKuyF,eAAe9iF,SAGpB,MAApBzP,KAAKqzD,cAER5jD,EAAM4jD,YAAcrzD,KAAKqzD,YAAY5jD,SAGtCA,EAAM2nF,iBAAmBp3F,KAAKo3F,iBAC9B3nF,EAAM4nF,SAAWr3F,KAAKq3F,SACtB5nF,EAAMtN,OAASnC,KAAKmC,OACpBsN,EAAML,EAAIpP,KAAKoP,EACfK,EAAMJ,EAAIrP,KAAKqP,EACfI,EAAMxH,MAAQjI,KAAKiI,MACnBwH,EAAM5H,OAAS7H,KAAK6H,OACpB4H,EAAM6nF,cAAgBt3F,KAAKs3F,cAC3B7nF,EAAM8nF,eAAiBv3F,KAAKu3F,eAErB9nF,GAQR6iF,YAAYlmF,UAAU6iB,QAAU,WAE/BjvB,KAAKunB,KAAKtW,MAAM2B,aAAaqc,QAAQjvB,OAGtCC,WAAWqyF,iBAAqC,IAAhBA,YAA8BA,iBAAc1rF,EAsD5E4rF,sBAAsBpmF,UAAY,IAAIw1B,cACtC4wD,sBAAsBpmF,UAAUH,YAAcumF,sBAS9CA,sBAAsBpmF,UAAU+rF,aAAqC,QAArBj4F,SAAS4F,SAAsB,OAAS,GASxF0sF,sBAAsBpmF,UAAUgsF,0BAAkD,QAArBl4F,SAAS4F,SAAsB,oBAAsB,GAOlH0sF,sBAAsBpmF,UAAU6E,MAAQ,KAQxCuhF,sBAAsBpmF,UAAUisF,iBAAkB,EAOlD7F,sBAAsBpmF,UAAUksF,kBAAoB,WAEnD,OAAOt4F,KAAKq4F,iBAab7F,sBAAsBpmF,UAAUmsF,mBAAqB,SAASF,GAE7Dr4F,KAAKq4F,gBAAkBA,GAQxB7F,sBAAsBpmF,UAAUsoC,WAAa,SAAS1iC,GAErD,OAAY,MAARA,GAEI1J,QAAQ/H,QAAQP,KAAKmqB,MAAOnY,IAAS,GAW9CwgF,sBAAsBpmF,UAAUsiC,QAAU,WAEzC,OAA4B,GAArB1uC,KAAKmqB,MAAMhoB,QASnBqwF,sBAAsBpmF,UAAUF,MAAQ,WAEvClM,KAAKw4F,gBAAgB,KAAMx4F,KAAKmqB,QAYjCqoE,sBAAsBpmF,UAAUqsF,QAAU,SAASzmF,GAEtC,MAARA,GAEHhS,KAAKwuC,SAAS,CAACx8B,KAajBwgF,sBAAsBpmF,UAAUoiC,SAAW,SAASrkB,GAEnD,GAAa,MAATA,EACJ,CACKnqB,KAAKq4F,kBAERluE,EAAQ,CAACnqB,KAAK04F,uBAAuBvuE,KAKtC,IAFA,IAAItZ,EAAM,GAEDhM,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAE7B7E,KAAKiR,MAAM0nF,iBAAiBxuE,EAAMtlB,KAErCgM,EAAIjE,KAAKud,EAAMtlB,IAIjB7E,KAAKw4F,gBAAgB3nF,EAAK7Q,KAAKmqB,SASjCqoE,sBAAsBpmF,UAAUssF,uBAAyB,SAASvuE,GAEjE,GAAa,MAATA,EAEH,IAAK,IAAItlB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC,GAAI7E,KAAKiR,MAAM0nF,iBAAiBxuE,EAAMtlB,IAErC,OAAOslB,EAAMtlB,GAKhB,OAAO,MAYR2tF,sBAAsBpmF,UAAUwsF,QAAU,SAAS5mF,GAEtC,MAARA,GAEHhS,KAAK64F,SAAS,CAAC7mF,KAcjBwgF,sBAAsBpmF,UAAUysF,SAAW,SAAS1uE,GAEnD,GAAa,MAATA,EACJ,CACC,IAAI1d,EAAS,KAETzM,KAAKq4F,kBAER5rF,EAASzM,KAAKmqB,MACdA,EAAQ,CAACnqB,KAAK04F,uBAAuBvuE,KAKtC,IAFA,IAAItZ,EAAM,GAEDhM,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,KAE5B7E,KAAK00C,WAAWvqB,EAAMtlB,KAC1B7E,KAAKiR,MAAM0nF,iBAAiBxuE,EAAMtlB,KAElCgM,EAAIjE,KAAKud,EAAMtlB,IAIjB7E,KAAKw4F,gBAAgB3nF,EAAKpE,KAc5B+lF,sBAAsBpmF,UAAU0sF,WAAa,SAAS9mF,GAEzC,MAARA,GAEHhS,KAAK4uC,YAAY,CAAC58B,KAOpBwgF,sBAAsBpmF,UAAUwiC,YAAc,SAASzkB,GAEtD,GAAa,MAATA,EACJ,CAGC,IAFA,IAAItZ,EAAM,GAEDhM,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAE7B7E,KAAK00C,WAAWvqB,EAAMtlB,KAEzBgM,EAAIjE,KAAKud,EAAMtlB,IAIjB7E,KAAKw4F,gBAAgB,KAAM3nF,KAc7B2hF,sBAAsBpmF,UAAUosF,gBAAkB,SAAS7F,EAAOC,GAEjE,GAAc,MAATD,GACJA,EAAMxwF,OAAS,GACH,MAAZwwF,EAAM,IACM,MAAXC,GACDA,EAAQzwF,OAAS,GACH,MAAdywF,EAAQ,GACT,CACC,IAAIrhF,EAAS,IAAIkhF,kBAAkBzyF,KAAM2yF,EAAOC,GAChDrhF,EAAOqK,UACP,IAAIo/B,EAAO,IAAIlK,eAAe9wC,MAAM,GACpCg7C,EAAKj2C,IAAIwM,GACTvR,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQqgC,KAAM,OAAQ0Q,MAczDw3C,sBAAsBpmF,UAAU0+E,UAAY,SAAS94E,GAExC,MAARA,GACFhS,KAAK00C,WAAW1iC,IAEjBhS,KAAKmqB,MAAMvd,KAAKoF,IAclBwgF,sBAAsBpmF,UAAU0/E,YAAc,SAAS95E,GAEtD,GAAY,MAARA,EACJ,CACC,IAAIvD,EAAQnG,QAAQ/H,QAAQP,KAAKmqB,MAAOnY,GAEpCvD,GAAS,GAEZzO,KAAKmqB,MAAM/T,OAAO3H,EAAO,KA0B5BgkF,kBAAkBrmF,UAAUwP,QAAU,WAErC,IAAI1Q,EAAKrE,MAAMgE,MAAM,6BAKrB,GAJArJ,OAAO6c,OAASvZ,YAAY+G,IAC3B7L,KAAK0yF,eAAe0F,4BACpBp4F,KAAK0yF,eAAe0F,0BAED,MAAhBp4F,KAAK4yF,QAER,IAAK,IAAI/tF,EAAI,EAAGA,EAAI7E,KAAK4yF,QAAQzwF,OAAQ0C,IAExC7E,KAAK0yF,eAAe5G,YAAY9rF,KAAK4yF,QAAQ/tF,IAI/C,GAAkB,MAAd7E,KAAK2yF,MAER,IAAS9tF,EAAI,EAAGA,EAAI7E,KAAK2yF,MAAMxwF,OAAQ0C,IAEtC7E,KAAK0yF,eAAe5H,UAAU9qF,KAAK2yF,MAAM9tF,IAI3C,IAAIgM,EAAM7Q,KAAK2yF,MACf3yF,KAAK2yF,MAAQ3yF,KAAK4yF,QAClB5yF,KAAK4yF,QAAU/hF,EAEfrP,OAAO6c,OAASvZ,YAAY+G,IAAI7L,KAAK0yF,eAAeyF,eACnDn4F,KAAK0yF,eAAeyF,aACrBtxF,MAAMoE,MAAM,4BAA6BC,GAEzClL,KAAK0yF,eAAelvD,UAAU,IAAIhC,cAAcv3B,QAAQugC,OACtD,QAASxqC,KAAK2yF,MAAO,UAAW3yF,KAAK4yF,WAGxC3yF,WAAWuyF,2BAAyD,IAA1BA,sBAAwCA,2BAAwB5rF,EAiJ1GisF,aAAazmF,UAAU6E,MAAQ,KAQ/B4hF,aAAazmF,UAAUxE,SAAW,KAOlCirF,aAAazmF,UAAU4mF,YAAc,KAOrCH,aAAazmF,UAAU2sF,QAAU,KAOjClG,aAAazmF,UAAU4sF,UAAW,EAQlCnG,aAAazmF,UAAU6sF,UAAW,EAQlCpG,aAAazmF,UAAU8sF,YAAa,EAWpCrG,aAAazmF,UAAU+sF,eAAkBj5F,SAAc,MAAI,OAAS,GASpE2yF,aAAazmF,UAAUgtF,sBAAuB,EAO9CvG,aAAazmF,UAAUitF,SAAW,GAOlCxG,aAAazmF,UAAU2lC,OAAS,EAOhC8gD,aAAazmF,UAAUktF,UAAY,IAAIhqF,YAAY,EAAG,IAQtDujF,aAAazmF,UAAUmtF,gBAAmBr5F,SAAkB,UAAI,EAAMA,SAASO,QAAe,EAAJ,EAO1FoyF,aAAazmF,UAAUotF,aAAc,EAOrC3G,aAAazmF,UAAUqtF,aAAe,KAStC5G,aAAazmF,UAAUggB,MAAQ,KAQ/BymE,aAAazmF,UAAUjF,KAAO,WAE7BnH,KAAK4H,SAAW/G,SAASG,cAAc,OACvChB,KAAK4H,SAASsoC,UAAY,iCAC1BlwC,KAAK4H,SAAS8xF,iBAAkB,EAG5Bx5F,SAASmC,QAEZrC,KAAK4H,SAASF,MAAMypB,UAAY,OAGjCnxB,KAAK4H,SAASF,MAAMogB,SAAa9nB,KAAK25F,iBAAqB,WAAa,WACxE35F,KAAK45F,iBAAiB55F,KAAK4H,WAQ5BirF,aAAazmF,UAAUytF,WAAa,SAAShoF,EAAO9J,GAEnD/H,KAAKiR,MAAM6oF,aAAajoF,EAAMG,KAAMjK,EAAO/H,KAAK+4F,UAQjDlG,aAAazmF,UAAU2tF,SAAW,SAAU3tE,GAEtB,MAAjBpsB,KAAK4H,WAER5H,KAAK4H,SAASF,MAAMq4C,UAAY3zB,GAGjCpsB,KAAKosB,MAAQA,EACbpsB,KAAK8H,UAQN+qF,aAAazmF,UAAU4tF,gBAAkB,SAASnoF,EAAOknF,GAExD,IAAIpsF,EAASrE,QAAQsQ,aAAa5Y,KAAKiR,MAAMgpF,gBAAgBpoF,EAAMG,KAAM+mF,IAAU,GAShF,OANE74F,SAASU,WAAsC,GAAzBC,SAASC,cAA8C,GAAzBD,SAASC,cACxC,IAAzBD,SAASC,eAET6L,EAASrE,QAAQkS,wBAAwB7N,EAAQ,oBAGxCA,EAAOiC,QAAQ,MAAO,SAQjCikF,aAAazmF,UAAU8tF,gBAAkB,SAASroF,GAEjD,OAAOvJ,QAAQ0R,0BAA0Bha,KAAK4H,SAAS0M,aASxDu+E,aAAazmF,UAAU+tF,wBAA0B,SAAShyF,GAEzD,OAAOnI,KAAKo5F,sBAAwBnvF,QAAQ08B,YAAYx+B,IAAQ8B,QAAQy8B,cAAcv+B,IAAQ8B,QAAQ28B,WAAWz+B,IAQlH0qF,aAAazmF,UAAUwtF,iBAAmB,SAASjwF,GAIlDM,QAAQD,YAAYL,EAAK,YAAarB,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEjEnI,KAAKiR,MAAMgiF,aAAY,GACvBhpF,QAAQm4B,QAAQj6B,OAIjB8B,QAAQD,YAAYL,EAAK,OAAQrB,QAAQ2M,KAAKjV,MAAM,SAASmI,GAExDnI,KAAKw5F,aAERx5F,KAAKo6F,UAAUjyF,OAKjB8B,QAAQD,YAAYL,EAAK,UAAWrB,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE1D8B,QAAQk4B,WAAWh6B,KAEnBnI,KAAKq6F,mBAAmBlyF,IAE3BnI,KAAKiR,MAAMgiF,aAAY,GACvBhpF,QAAQm4B,QAAQj6B,IAEO,IAAfA,EAAImyF,UAEZt6F,KAAKiR,MAAMgiF,YAAYjzF,KAAKm6F,wBAAwBhyF,IACpD8B,QAAQm4B,QAAQj6B,SAMnB,IAAIoyF,EAAkBjyF,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEzB,MAApBnI,KAAKgzF,aAIJhzF,KAAKw6F,eAAiB7wF,EAAI2Q,WAAata,KAAKy6F,uBAC7Cv6F,SAASyC,OAAyB,GAAfwF,EAAImyF,SAA+C,IAAfnyF,EAAImyF,WAE7Dt6F,KAAKw6F,eAAgB,EACrB7wF,EAAI2Q,UAAY,OAKnBrQ,QAAQD,YAAYL,EAAK,WAAY4wF,GACrCtwF,QAAQD,YAAYL,EAAK,QAAS4wF,GAGlC,IAAIG,EAAepyF,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEtB,MAApBnI,KAAKgzF,cAM8B,GAAlChzF,KAAK4H,SAAS0S,UAAUnY,QAA0C,QAA3BnC,KAAK4H,SAAS0S,WAExDta,KAAK4H,SAAS0S,UAAYta,KAAKy6F,oBAC/Bz6F,KAAKw6F,cAAgBx6F,KAAK4H,SAAS0S,UAAUnY,OAAS,GAItDnC,KAAKw6F,eAAgB,MAKxBvwF,QAAQD,YAAYL,EAAOzJ,SAASO,SAAYP,SAASE,MAAmB,QAAV,QAAmBs6F,GACrFzwF,QAAQD,YAAYL,EAAK,MAAO+wF,GAChCzwF,QAAQD,YAAYL,EAAK,QAAS+wF,GAGlC,IAAI/pD,EAAYzwC,SAASO,SAAYP,SAASE,MAAmB,UAAV,QAEnDyJ,EAAgBvB,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEvB,MAApBnI,KAAKgzF,aAAuBhzF,KAAKi5F,WAAahvF,QAAQk4B,WAAWh6B,KAI3C,MAArBnI,KAAK26F,cAERn5F,OAAOo5F,aAAa56F,KAAK26F,cAG1B36F,KAAK26F,aAAen5F,OAAOuR,WAAWzK,QAAQ2M,KAAKjV,MAAM,WAExDA,KAAK26F,aAAe,KACpB36F,KAAK8H,YACF,OAINmC,QAAQD,YAAYL,EAAKgnC,EAAS9mC,GAClCI,QAAQD,YAAYxI,OAAQ,SAAUqI,GAElChJ,SAASC,cAAgB,GAE5BmJ,QAAQD,YAAYL,EAAK,iBAAkBE,GAC3CI,QAAQD,YAAYL,EAAK,kBAAmBE,KAI5CI,QAAQD,YAAYL,EAAK,MAAOE,GAChCI,QAAQD,YAAYL,EAAK,QAASE,KAWpCgpF,aAAazmF,UAAUiuF,mBAAqB,SAASlyF,GAEpD,OAAsB,KAAfA,EAAImyF,SAA4Bt6F,KAAKiR,MAAM4pF,2BAClC,IAAf1yF,EAAImyF,UAA8BrwF,QAAQy8B,cAAcv+B,KACvD8B,QAAQ08B,YAAYx+B,IAQvB0qF,aAAazmF,UAAU0uF,cAAgB,SAAS3yF,GAE/C,OAAO8B,QAAQu4B,UAAUr6B,IAAQnI,KAAK4H,UAQvCirF,aAAazmF,UAAUtE,OAAS,WAE/B,IAAI+J,EAAQ7R,KAAKiR,MAAMa,UAAUC,SAAS/R,KAAKgzF,aAE/C,GAAa,MAATnhF,EAEH7R,KAAKizF,aAAY,QAEb,GAAqB,MAAjBjzF,KAAK4H,SACd,CACC,IAAIuK,EAASnS,KAAKiR,MAAM8c,WAAW5b,OAAON,EAAMG,MAC3CM,EAAQtS,KAAKiR,MAAMa,UAAUQ,MAC7BmT,EAAI,KAET,GAAKzlB,KAAKi5F,UAAwD,QAA3CpnF,EAAMnK,MAAMiG,YAAY0qB,gBA0C9C,CACC,IAAI0iE,EAAKzyF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYksB,kBAAmB,MAStE,GANQ,OAFTpU,EAAmB,MAAd5T,EAAMxD,MAA8B,MAAdrO,KAAKosB,MAAiBva,EAAMxD,KAAKgiD,OAAS,QAIpE5qC,EAAInd,QAAQ6jB,oBAAoBnsB,KAAKosB,OAAS9jB,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYgsB,YAAahsB,YAAYwyB,cAC/G73B,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYisB,qBAAsBjsB,YAAYyyB,gBAG1EjuB,GAIJ,GAFAnS,KAAKymB,OAAS,IAAInX,YAAYuC,EAAM0gF,eAAenjF,EAAGyC,EAAM0gF,eAAeljF,EAAG,EAAG,GAEvE,MAAN0rF,EACH,CACA,IAAIlqF,GAAO8D,WAAWomF,GAAM,GAAKzoF,EACjCtS,KAAKymB,OAAOxe,MAAQ4I,EACpB7Q,KAAKymB,OAAOrX,GAAKqW,EAAErW,EAAIyB,OAIzB,CACC,IAAImqF,EAAM1rF,YAAYwB,cAAce,GAChCopF,EAAO3yF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYmsB,qBAAsBnsB,YAAYwyB,cACnF+6D,EAAO5yF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYosB,8BAA+BpsB,YAAYyyB,cAS/F,GAPD46D,EAAsB,MAAfnpF,EAAMQ,OAAiB4oF,GAAQttF,YAAYwyB,cAAgB+6D,GAAQvtF,YAAYyyB,aAAgBvuB,EAAMQ,MAAMsiD,eAAeqmC,GAAOA,EAE7H,MAAND,IAEHC,EAAI/yF,MAAQ0M,WAAWomF,GAAMzoF,IAGzBT,EAAM0V,KAAKtW,MAAM2B,aAAauoF,eAA4D,SAA3CtpF,EAAMnK,MAAMiG,YAAY0qB,gBAC5E,CACA,IAAI2/B,EAAU51D,SAASyP,EAAMnK,MAAMiG,YAAY8uB,gBAAkB,GAAKnqB,EAClE4pD,GAAc95D,SAASyP,EAAMnK,MAAMiG,YAAY+uB,oBAAsB,GAAKk8B,OAAOxsD,UAAUu5D,gBAAkBrzD,EAAQ0lD,EACrHmE,GAAgB/5D,SAASyP,EAAMnK,MAAMiG,YAAYkvB,sBAAwB,GAAK+7B,OAAOxsD,UAAU05D,kBAAoBxzD,EAAQ0lD,EAC3HoE,GAAiBh6D,SAASyP,EAAMnK,MAAMiG,YAAYivB,uBAAyB,GAAKg8B,OAAOxsD,UAAUw5D,mBAAqBtzD,EAAQ0lD,EAC9HqE,GAAej6D,SAASyP,EAAMnK,MAAMiG,YAAYgvB,qBAAuB,GAAKi8B,OAAOxsD,UAAUy5D,iBAAmBvzD,EAAQ0lD,EAExHijC,EAAO3yF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYmsB,qBAAsBnsB,YAAYwyB,cACnF+6D,EAAO5yF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYosB,8BAA+BpsB,YAAYyyB,cAEhG46D,EAAM,IAAI1rF,YAAY0rF,EAAI5rF,EAAIitD,EAAa2+B,EAAI3rF,EAAI6sD,EAClD8+B,EAAI/yF,OAAUgzF,GAAQttF,YAAYwyB,cAAsB,MAAN46D,EAAe1+B,EAAcF,EAAgB,GAC/F6+B,EAAInzF,QAAWqzF,GAAQvtF,YAAYyyB,aAAiB87B,EAAaE,EAAiB,IAGpFp8D,KAAKymB,OAAS,IAAInX,YAAY0rF,EAAI5rF,EAAIyC,EAAM0gF,eAAenjF,EAAG4rF,EAAI3rF,EAAIwC,EAAM0gF,eAAeljF,EAAG2rF,EAAI/yF,MAAO+yF,EAAInzF,QAM1G7H,KAAKiR,MAAMmqF,WAAWvpF,EAAMG,QAAUhS,KAAKymB,OAAOxe,OAAS,GAAKjI,KAAKymB,OAAO5e,QAAU,IACzF7H,KAAK4H,SAAS0S,WAAata,KAAKy6F,qBAEhCz6F,KAAK4H,SAASF,MAAM6oD,SAAW5iD,YAAYmpB,UAC3C92B,KAAK4H,SAASF,MAAMkmB,WAAa,SAG7B/c,EAAMzH,KAAK2c,MAAM/lB,KAAKymB,OAAOxe,OAAUpH,SAASC,aAAqBwR,IAAkBtS,KAAKu5F,gBAE5D,YAAhCv5F,KAAK4H,SAASF,MAAMogB,UAEvB9nB,KAAK4H,SAASF,MAAMO,MAAQ4I,EAAM,KAE9B7Q,KAAK4H,SAASsrD,YAAcriD,IAE/B7Q,KAAK4H,SAASF,MAAMO,MAAQjI,KAAK4H,SAASsrD,YAAc,OAKzDlzD,KAAK4H,SAASF,MAAM8/D,SAAW32D,EAAM,OAMtC7Q,KAAK4H,SAASF,MAAMkmB,WAAa,SACjC5tB,KAAK4H,SAASF,MAAMO,MAAQ,IAKA,GAAzBpH,SAASC,eAEZd,KAAK4H,SAASF,MAAMimB,KAAO,IAC3B3tB,KAAK4H,SAASF,MAAMG,OAAS,QAG9B,IAAIm/D,EAAKhnE,KAAK4H,SAASsrD,YACnBrC,EAAK7wD,KAAK4H,SAAS6D,aAUM,GAAzB5K,SAASC,cAGZd,KAAK4H,SAASF,MAAM+U,KAAOrT,KAAKC,IAAI,EAAGD,KAAKgZ,MAAMpiB,KAAKymB,OAAOrX,EAAIqW,EAAErW,GAAKpP,KAAKymB,OAAOxe,OAAS++D,EAAK,GAAK10D,GAAS00D,GAAM10D,EAAQ,GAAK,EAAkB,GAAbmT,EAAErW,EAAI,KAAYkD,IAAU,KACrKtS,KAAK4H,SAASF,MAAMuV,IAAM7T,KAAKC,IAAI,EAAGD,KAAKgZ,MAAMpiB,KAAKymB,OAAOpX,EAAIoW,EAAEpW,GAAKrP,KAAKymB,OAAO5e,QAAUgpD,EAAK,IAAOv+C,GAASu+C,GAAMv+C,EAAQ,GAAK,EAA0B,EAAtBlJ,KAAKsX,IAAI+E,EAAEpW,EAAI,KAAYiD,IAAU,KAE/KtS,KAAK4H,SAASF,MAAMO,MAAQmB,KAAK2c,MAAMihD,EAAK10D,GAAS,KACrDtS,KAAK4H,SAASF,MAAMG,OAASuB,KAAK2c,MAAM8qC,EAAKv+C,GAAS,MAE9CpS,SAASU,WAEjBZ,KAAK4H,SAASF,MAAM+U,KAAOrT,KAAKC,IAAI,EAAGD,KAAKgZ,KAAKpiB,KAAKymB,OAAOrX,EAAIqW,EAAErW,GAAKpP,KAAKymB,OAAOxe,OAAS++D,EAAK,GAAK10D,GAAS00D,GAAM10D,EAAQ,GAAK,EAAkB,GAAbmT,EAAErW,EAAI,MAAa,KAC3JpP,KAAK4H,SAASF,MAAMuV,IAAM7T,KAAKC,IAAI,EAAGD,KAAKgZ,KAAKpiB,KAAKymB,OAAOpX,EAAIoW,EAAEpW,GAAKrP,KAAKymB,OAAO5e,QAAUgpD,EAAK,IAAOv+C,GAASu+C,GAAMv+C,EAAQ,GAAK,EAA0B,EAAtBlJ,KAAKsX,IAAI+E,EAAEpW,EAAI,MAAa,OAIrKrP,KAAK4H,SAASF,MAAM+U,KAAOrT,KAAKC,IAAI,EAAGD,KAAK2c,MAAM/lB,KAAKymB,OAAOrX,EAAIqW,EAAErW,GAAKpP,KAAKymB,OAAOxe,MAAQ,IAAM,GAAK,KACxGjI,KAAK4H,SAASF,MAAMuV,IAAM7T,KAAKC,IAAI,EAAGD,KAAK2c,MAAM/lB,KAAKymB,OAAOpX,EAAIoW,EAAEpW,GAAKrP,KAAKymB,OAAO5e,OAAS,KAAe,GAAR4d,EAAEpW,EAAW,EAAI,IAAM,GAAK,WAjKjIrP,KAAKymB,OAASzmB,KAAKq7F,gBAAgBxpF,GACnC7R,KAAK4H,SAASF,MAAMO,MAAQmB,KAAK2c,MAAM/lB,KAAKymB,OAAOxe,MAAQqK,GAAS,KACpEtS,KAAK4H,SAASF,MAAMG,OAASuB,KAAK2c,MAAM/lB,KAAKymB,OAAO5e,OAASyK,GAAS,KAGzC,GAAzBzR,SAASC,cAAqBZ,SAASU,WAE1CZ,KAAK4H,SAASF,MAAM+U,KAAOrT,KAAK2c,MAAM/lB,KAAKymB,OAAOrX,GAAK,KACvDpP,KAAK4H,SAASF,MAAMuV,IAAM7T,KAAK2c,MAAM/lB,KAAKymB,OAAOpX,GAAK,OAItDrP,KAAK4H,SAASF,MAAM+U,KAAOrT,KAAKC,IAAI,EAAGD,KAAK2c,MAAM/lB,KAAKymB,OAAOrX,EAAI,IAAM,KACxEpP,KAAK4H,SAASF,MAAMuV,IAAM7T,KAAKC,IAAI,EAAGD,KAAK2c,MAAM/lB,KAAKymB,OAAOpX,EAAI,IAAM,MAIpErP,KAAKiR,MAAMmqF,WAAWvpF,EAAMG,QAAUhS,KAAKymB,OAAOxe,OAAS,GAAKjI,KAAKymB,OAAO5e,QAAU,IACzF7H,KAAK4H,SAAS0S,WAAata,KAAKy6F,qBAEhCz6F,KAAK4H,SAASF,MAAM6oD,SAAW5iD,YAAYmpB,UAC3C92B,KAAK4H,SAASF,MAAMkmB,WAAa,SAEc,QAA3C/b,EAAMnK,MAAMiG,YAAY0qB,kBAE3Br4B,KAAK4H,SAASF,MAAMO,MAAQmB,KAAK2c,MAAM/lB,KAAKymB,OAAOxe,MAAQqK,GAAStS,KAAKu5F,gBAAkB,QAK5Fv5F,KAAK4H,SAASF,MAAMkmB,WAAa,SAEc,QAA3C/b,EAAMnK,MAAMiG,YAAY0qB,kBAE3Br4B,KAAK4H,SAASF,MAAMO,MAAQ,KAmI3B/H,SAAS4C,OAEZ9C,KAAK4H,SAASF,MAAMimB,KAAOrb,GAI3BhK,QAAQuM,iBAAiB7U,KAAK4H,SAASF,MAAO,kBAAmB,WACjEY,QAAQuM,iBAAiB7U,KAAK4H,SAASF,MAAO,YAC7C,SAAW4K,EAAQ,IAAMA,EAAQ,KAAa,MAALmT,EAAa,GACtD,cAAuB,IAANA,EAAErW,EAAW,KAAc,IAANqW,EAAEpW,EAAW,UAUvDwjF,aAAazmF,UAAUguF,UAAY,WAElCp6F,KAAKizF,aAAajzF,KAAKiR,MAAMqqF,6BAS9BzI,aAAazmF,UAAUmvF,mBAAqB,SAAS1pF,GAEpD,OAAO,MAaRghF,aAAazmF,UAAUutF,eAAiB,WAEvC,GAAIz5F,SAAS4C,OAEZ,OAAO,EAIP,IAAI04F,GAAe,EAEnB,GAAIt7F,SAAS+C,OACb,CACC,IAAI66C,EAAO99C,KAAKiR,MAAMsW,KAAK0sE,cAAchjE,gBAEzC,GAAY,MAAR6sB,EACJ,CACC,IAAIwP,EAAMhlD,QAAQiM,gBAAgBupC,GAEvB,MAAPwP,IAEHkuC,EAA+B,YAAhBluC,EAAIxlC,WAKtB,OAAQ0zE,GAcV3I,aAAazmF,UAAUqvF,aAAe,SAASzpF,EAAM+mF,GAEpD/4F,KAAKizF,aAAY,GACjBjzF,KAAKosB,MAAQ,KAGQ,MAAjBpsB,KAAK4H,UAER5H,KAAKmH,OAG2B,MAA7BnH,KAAKiR,MAAMyqF,gBAEd17F,KAAKiR,MAAMyqF,eAAeC,cAG3B,IAAI9pF,EAAQ7R,KAAKiR,MAAMa,UAAUC,SAASC,GAE1C,GAAa,MAATH,EACJ,CAEa7R,KAAKiR,MAAMa,UAAUQ,MAAjC,IACIub,EAAOvlB,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYuvB,eAAgBvvB,YAAYof,kBAC7EkvC,EAAS3zD,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYsvB,iBAAkBtvB,YAAYqf,oBACjF/Q,EAAQ3T,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYqvB,gBAAiB,SACnE5Q,EAAQ9jB,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYgsB,YAAahsB,YAAY2e,YAC3EsvE,GAAQtzF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYwvB,gBAAiB,GACrExvB,YAAYyf,YAAczf,YAAYyf,UACpCyuE,GAAUvzF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYwvB,gBAAiB,GACvExvB,YAAY2f,cAAgB3f,YAAY2f,YACtCC,EAAW,IAEVjlB,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYwvB,gBAAiB,GAC9DxvB,YAAY6f,iBAAmB7f,YAAY6f,gBAE5CD,EAAS3gB,KAAK,cAGVtE,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYwvB,gBAAiB,GAC9DxvB,YAAY8f,qBAAuB9f,YAAY8f,oBAEhDF,EAAS3gB,KAAK,gBAGf5M,KAAK4H,SAASF,MAAMwlB,WAAcvf,YAAgC,qBAAIvE,KAAK2c,MAAM8H,EAAOlgB,YAAYwf,aAAe,KAAOxf,YAAYwf,YACtIntB,KAAK4H,SAASF,MAAMoxC,gBAAkB94C,KAAKu7F,mBAAmB1pF,GAC9D7R,KAAK4H,SAASF,MAAMwU,eAAiBqR,EAASre,KAAK,KACnDlP,KAAK4H,SAASF,MAAM2lB,WAAa,EAAS,OAAS,SACnDrtB,KAAK4H,SAASF,MAAMolB,UAAY,EAAW,SAAW,GACtD9sB,KAAK4H,SAASF,MAAMilB,SAAWvjB,KAAK2c,MAAM8H,GAAQ,KAClD7tB,KAAK4H,SAASF,MAAMqqC,OAAS/xC,KAAK+xC,OAClC/xC,KAAK4H,SAASF,MAAMklB,WAAaqvC,EACjCj8D,KAAK4H,SAASF,MAAMq4C,UAAY3zB,EAChCpsB,KAAK4H,SAASF,MAAMgsD,QAAU,OAC9B1zD,KAAK4H,SAASF,MAAMuU,MAAQA,EAE5B,IAAI2sC,EAAM5oD,KAAKy8D,cAAgBn0D,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYyqB,qBAAsBzqB,YAAYkpB,wBAEvG+xB,GAAOj7C,YAAY2yB,sBAET,MAATzuB,GAA+B,MAAdA,EAAMxD,MAAgBwD,EAAMxD,KAAKigB,SAAW3gB,YAAY4lB,oBAC3EjrB,QAAQ+N,OAAOxE,EAAMxD,KAAKtG,SAE3B6gD,EAAM/2C,EAAMxD,KAAKm4D,qBAIf5d,GAAOj7C,YAAY4yB,oBAAsBqoB,GAAOj7C,YAAY6yB,mBAE/DxgC,KAAK4H,SAASvD,aAAa,MAAOukD,GAIlC5oD,KAAK4H,SAAS+jD,gBAAgB,OAI/B3rD,KAAK4H,SAAS0S,UAAYta,KAAKg6F,gBAAgBnoF,EAAOknF,IAAY,GAClE/4F,KAAKy5F,aAAez5F,KAAK4H,SAAS0S,UAKI,GAAlCta,KAAK4H,SAAS0S,UAAUnY,QAA0C,QAA3BnC,KAAK4H,SAAS0S,WAExDta,KAAK4H,SAAS0S,UAAYta,KAAKy6F,oBAC/Bz6F,KAAKw6F,eAAgB,GAIrBx6F,KAAKw6F,cAAgBx6F,KAAK4H,SAAS0S,WAAata,KAAKy6F,oBAGtDz6F,KAAKiR,MAAM0W,UAAUpjB,YAAYvE,KAAK4H,UAGtC5H,KAAKgzF,YAAchhF,EACnBhS,KAAK+4F,QAAUA,EACf/4F,KAAKq5F,SAAW,KAEE,MAAdxnF,EAAMxD,MAAgBrO,KAAK87F,YAAYjqF,KAE1C7R,KAAKq5F,SAAWxnF,EAAMxD,KAAKnJ,KAC3BlF,KAAKq5F,SAAS3xF,MAAM6D,WAAa,UAI9BvL,KAAKi5F,WAAaj5F,KAAKiR,MAAMiB,MAAMC,OAAON,EAAMG,OAAoD,QAA3CH,EAAMnK,MAAMiG,YAAY0qB,kBAEpF72B,OAAOuR,WAAWzK,QAAQ2M,KAAKjV,MAAM,WAEpCA,KAAK8H,YACF,GAGL9H,KAAK8H,SAGL,IAGC9H,KAAK4H,SAAS0pB,QAEVtxB,KAAK+7F,gBAAkB/7F,KAAK4H,SAAS0S,UAAUnY,OAAS,IAC1DnC,KAAK4H,SAAS0S,WAAata,KAAKy6F,sBAAwBz6F,KAAKw6F,gBAE9D35F,SAASm7F,YAAY,aAAa,EAAO,MAG3C,MAAO5tF,OAYTykF,aAAazmF,UAAU2vF,aAAe,WAErC,OAAO/7F,KAAKk5F,YAQbrG,aAAazmF,UAAU6L,eAAiB,WAEvC,IAAIC,EAAY,KAEZ1W,OAAO4W,aAEVF,EAAY1W,OAAO4W,eAEXvX,SAASqX,YAEjBA,EAAYrX,SAASqX,WAGL,MAAbA,IAECA,EAAUC,MAEbD,EAAUC,QAEFD,EAAUG,iBAElBH,EAAUG,oBAUbw6E,aAAazmF,UAAU6mF,YAAc,SAASgJ,GAI7C,GAFAA,EAASA,IAAU,EAEK,MAApBj8F,KAAKgzF,YACT,CACsB,MAAjBhzF,KAAKq5F,WAERr5F,KAAKq5F,SAAS3xF,MAAM6D,WAAa,UACjCvL,KAAKq5F,SAAW,MAGjB,IAAIxnF,EAAUoqF,EAAuD,KAA7Cj8F,KAAKiR,MAAMsW,KAAKxV,SAAS/R,KAAKgzF,aAElDkJ,EAAUl8F,KAAKy5F,aAmBnB,GAlBAz5F,KAAKy5F,aAAe,KACpBz5F,KAAKgzF,YAAc,KACnBhzF,KAAK+4F,QAAU,KACf/4F,KAAKymB,OAAS,KACdzmB,KAAK4H,SAASu0F,OACdn8F,KAAKiY,iBAE2B,MAA5BjY,KAAK4H,SAASiM,YAEjB7T,KAAK4H,SAASiM,WAAWC,YAAY9T,KAAK4H,UAGvC5H,KAAKw6F,eAAiBx6F,KAAK4H,SAAS0S,WAAata,KAAKy6F,sBAEzDz6F,KAAK4H,SAAS0S,UAAY,GAC1Bta,KAAKw6F,eAAgB,GAGT,MAAT3oF,IAAkB7R,KAAK4H,SAAS0S,WAAa4hF,GAAyB,MAAdl8F,KAAKosB,OACjE,CACCpsB,KAAKo8F,kBACL,IAAIr0F,EAAQ/H,KAAKk6F,gBAAgBroF,GAEjC7R,KAAKiR,MAAM8c,WAAWtC,cACtB,IAEc,MAAT1jB,GAEH/H,KAAK65F,WAAWhoF,EAAO9J,GAGN,MAAd/H,KAAKosB,OAERpsB,KAAKiR,MAAMua,cAAc7d,YAAYgsB,YAAa35B,KAAKosB,MAAO,CAACva,EAAMG,OAGvE,QAEChS,KAAKiR,MAAM8c,WAAWnC,aAKxB3hB,QAAQm7B,QAAQplC,KAAK4H,UACrB5H,KAAK4H,SAAW,KAChB5H,KAAKosB,MAAQ,OAUfymE,aAAazmF,UAAUgwF,gBAAkB,WAET,MAA3Bp8F,KAAK4H,SAAS8sD,WACmB,MAApC10D,KAAK4H,SAAS8sD,UAAUp+C,UAExBtW,KAAK4H,SAASkM,YAAY9T,KAAK4H,SAAS8sD,YAU1Cm+B,aAAazmF,UAAU0vF,YAAc,SAASjqF,GAE7C,OAAO,GAQRghF,aAAazmF,UAAUomC,eAAiB,SAAS3gC,GAEhD,IAAIS,EAAQtS,KAAKiR,MAAMa,UAAUQ,MAEjC,OAAO,IAAIhD,YAAY,EAAG,EAAkB,MAAduC,EAAMxD,KAAgB,GAAKwD,EAAMxD,KAAKwf,KAAOvb,EAAQ,GAC/C,QAAjCtS,KAAK4H,SAASF,MAAMq4C,UAAuB,IAAM,KAQrD8yC,aAAazmF,UAAUivF,gBAAkB,SAASxpF,GAEjD,IAAIM,EAASnS,KAAKiR,MAAM8c,WAAW5b,OAAON,EAAMG,MAC5CM,EAAQtS,KAAKiR,MAAMa,UAAUQ,MAC7BugC,EAAU7yC,KAAKwyC,eAAe3gC,GAC9Bqf,EAAW2hB,EAAQ5qC,MAClBkpB,EAAY0hB,EAAQhrC,OACpB8E,EAAS,KAEb,IAAKwF,GAAUN,EAAM0V,KAAKtW,MAAM2B,aAAauoF,eAA4D,QAA3CtpF,EAAMnK,MAAMiG,YAAY0qB,gBAErF1rB,EAASkF,EAAMQ,MAAMsiD,eAAerlD,YAAYwB,cAAce,QAG/D,CACA,IAAImmD,EAAU51D,SAASyP,EAAMnK,MAAMiG,YAAY8uB,gBAAkB,GAAKnqB,EAClE4pD,GAAc95D,SAASyP,EAAMnK,MAAMiG,YAAY+uB,oBAAsB,GAAKk8B,OAAOxsD,UAAUu5D,gBAAkBrzD,EAAQ0lD,EACrHmE,GAAgB/5D,SAASyP,EAAMnK,MAAMiG,YAAYkvB,sBAAwB,GAAK+7B,OAAOxsD,UAAU05D,kBAAoBxzD,EAAQ0lD,EAC3HoE,GAAiBh6D,SAASyP,EAAMnK,MAAMiG,YAAYivB,uBAAyB,GAAKg8B,OAAOxsD,UAAUw5D,mBAAqBtzD,EAAQ0lD,EAC9HqE,GAAej6D,SAASyP,EAAMnK,MAAMiG,YAAYgvB,qBAAuB,GAAKi8B,OAAOxsD,UAAUy5D,iBAAmBvzD,EAAQ0lD,EAE3HrrD,EAAS,IAAI2C,YAAYuC,EAAMzC,EAAGyC,EAAMxC,EACtCjG,KAAKC,IAAI6nB,EAAUrf,EAAM5J,MAAQo0D,EAAcF,GAC/C/yD,KAAKC,IAAI8nB,EAAWtf,EAAMhK,OAASq0D,EAAaE,IACnD,IAAI6+B,EAAO3yF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYmsB,qBAAsBnsB,YAAYwyB,cACnF+6D,EAAO5yF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYosB,8BAA+BpsB,YAAYyyB,cAgDhG,GA9CAzzB,EAAyB,MAAfkF,EAAMQ,OAAiB4oF,GAAQttF,YAAYwyB,cAAgB+6D,GAAQvtF,YAAYyyB,aAAgBvuB,EAAMQ,MAAMsiD,eAAehoD,GAAUA,EAE1IwF,GAEHxF,EAAOyC,EAAIyC,EAAM0gF,eAAenjF,EAChCzC,EAAO0C,EAAIwC,EAAM0gF,eAAeljF,EAEd,MAAdwC,EAAMxD,MAA0C,MAA1BwD,EAAMxD,KAAKglD,cAIhCxhD,EAAMxD,KAAKglD,YAAYjkD,EAAI,IAE9BzC,EAAOyC,EAAIyC,EAAMxD,KAAKglD,YAAYjkD,GAG/ByC,EAAMxD,KAAKglD,YAAYhkD,EAAI,IAE9B1C,EAAO0C,EAAIwC,EAAMxD,KAAKglD,YAAYhkD,KAId,MAAdwC,EAAMxD,MAA0C,MAA1BwD,EAAMxD,KAAKglD,cAEzC1mD,EAAOyC,EAAIhG,KAAK2G,IAAIpD,EAAOyC,EAAGyC,EAAMxD,KAAKglD,YAAYjkD,GACrDzC,EAAO0C,EAAIjG,KAAK2G,IAAIpD,EAAO0C,EAAGwC,EAAMxD,KAAKglD,YAAYhkD,IAGtD1C,EAAOyC,GAAKitD,EACZ1vD,EAAO0C,GAAK6sD,EAEM,MAAdrqD,EAAMxD,MAA0C,MAA1BwD,EAAMxD,KAAKglD,cAE/BlhD,GAOJxF,EAAO1E,MAAQmB,KAAKC,IAAI6nB,EAAUrf,EAAMxD,KAAKglD,YAAYprD,OACzD0E,EAAO9E,OAASuB,KAAKC,IAAI8nB,EAAWtf,EAAMxD,KAAKglD,YAAYxrD,UAN3D8E,EAAO1E,MAAQmB,KAAKC,IAAIsD,EAAO1E,MAAO4J,EAAMxD,KAAKglD,YAAYprD,OAC7D0E,EAAO9E,OAASuB,KAAKC,IAAIsD,EAAO9E,OAAQgK,EAAMxD,KAAKglD,YAAYxrD,UAU7D7H,KAAKiR,MAAM8c,WAAW8zB,SAAShwC,EAAMG,MACzC,CACC,IAAIo/C,EAAa9oD,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYmsB,qBAAsBnsB,YAAYwyB,cAEzFixB,GAAczjD,YAAY2e,WAE7B3f,EAAOyC,GAAKyC,EAAM5J,MAEVmpD,GAAczjD,YAAY4e,cAElC5f,EAAOyC,GAAKyC,EAAM5J,OAGnB,IAAIopD,EAAW/oD,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYosB,8BAA+BpsB,YAAYyyB,cAEhGixB,GAAY1jD,YAAY6e,UAE3B7f,EAAO0C,GAAKwC,EAAMhK,OAEVwpD,GAAY1jD,YAAY8e,eAEhC9f,EAAO0C,GAAKwC,EAAMhK,SAKpB,OAAO,IAAIyH,YAAYlG,KAAK2c,MAAMpZ,EAAOyC,GAAIhG,KAAK2c,MAAMpZ,EAAO0C,GAAIjG,KAAK2c,MAAMpZ,EAAO1E,OAAQmB,KAAK2c,MAAMpZ,EAAO9E,UAejHgrF,aAAazmF,UAAUquF,kBAAoB,SAAUzoF,GAEpD,OAAOhS,KAAKm5F,gBASbtG,aAAazmF,UAAUiwF,eAAiB,WAEvC,OAAOr8F,KAAKgzF,aAQbH,aAAazmF,UAAU6iB,QAAU,WAEX,MAAjBjvB,KAAK4H,WAERqC,QAAQm7B,QAAQplC,KAAK4H,UAEW,MAA5B5H,KAAK4H,SAASiM,YAEjB7T,KAAK4H,SAASiM,WAAWC,YAAY9T,KAAK4H,UAG3C5H,KAAK4H,SAAW,MAIS,MAAtB5H,KAAK+8C,gBAER/8C,KAAKiR,MAAM8c,WAAWwV,eAAevjC,KAAK+8C,eAC1C/8C,KAAK+8C,cAAgB,MAGlB/8C,KAAK8yF,cAER9yF,KAAKiR,MAAMsW,KAAKgc,eAAevjC,KAAK8yF,aACpC9yF,KAAK8yF,YAAc,OAIrB7yF,WAAW4yF,kBAAuC,IAAjBA,aAA+BA,kBAAejsF,EA6C/EssF,eAAeoJ,cAAgB,IAAI9sB,OAOnC0jB,eAAe9mF,UAAUmwF,iBAAmBt/B,YAO5Ci2B,eAAe9mF,UAAUowF,mBAAqB/gC,iBAO9Cy3B,eAAe9mF,UAAUqwF,iBAAmB7jC,OAQ5Cs6B,eAAe9mF,UAAUswF,uBAAwB,EAQjDxJ,eAAe9mF,UAAU+uF,eAAgB,EAOzCjI,eAAe9mF,UAAU+mD,WAAY,EAOrC+/B,eAAe9mF,UAAUgnD,kBAAoB,EAQ7C8/B,eAAe9mF,UAAUuwF,0BAA2B,EAmBpDzJ,eAAe0J,cAAgB,SAAStwF,EAAK+F,GAE5C6gF,eAAeoJ,cAAchwF,GAAO+F,GAIrC6gF,eAAe0J,cAAcjvF,YAAY+wB,gBAAiB+8B,kBAC1Dy3B,eAAe0J,cAAcjvF,YAAYgxB,cAAe+8B,WACxDw3B,eAAe0J,cAAcjvF,YAAYkxB,cAAe+8B,WACxDs3B,eAAe0J,cAAcjvF,YAAYwxB,eAAgB69B,YACzDk2B,eAAe0J,cAAcjvF,YAAY0xB,gBAAiB49B,aAC1Di2B,eAAe0J,cAAcjvF,YAAY2xB,YAAai8B,SACtD23B,eAAe0J,cAAcjvF,YAAY6xB,eAAgBm9B,YACzDu2B,eAAe0J,cAAcjvF,YAAY8xB,cAAem9B,WACxDs2B,eAAe0J,cAAcjvF,YAAY4xB,YAAai8B,SACtD03B,eAAe0J,cAAcjvF,YAAYmxB,WAAY+9B,QACrDq2B,eAAe0J,cAAcjvF,YAAYqxB,YAAa68B,SACtDq3B,eAAe0J,cAAcjvF,YAAYsxB,sBAAuB88B,kBAChEm3B,eAAe0J,cAAcjvF,YAAYixB,qBAAsB+8B,iBAC/Du3B,eAAe0J,cAAcjvF,YAAYyxB,eAAgB89B,YACzDg2B,eAAe0J,cAAcjvF,YAAYoxB,YAAa+9B,cACtDo2B,eAAe0J,cAAcjvF,YAAYuxB,YAAa69B,SAYtDm2B,eAAe9mF,UAAUywF,gBAAkB,SAAShrF,GAEnDA,EAAMQ,MAAMic,QAAUzc,EAAM0V,KAAKtW,MAAMqd,QACvCtuB,KAAK88F,eAAejrF,GACpBA,EAAMQ,MAAMlL,KAAK0K,EAAM0V,KAAK0sE,gBAY7Bf,eAAe9mF,UAAU2wF,YAAc,SAASlrF,GAE/C,IAAIQ,EAAQ,KAEZ,GAAmB,MAAfR,EAAMnK,MACV,CAGC,IAAIwmD,EAAU2M,kBAAkBC,WAAWjpD,EAAMnK,MAAMiG,YAAYswB,cAIlE5rB,EAFc,MAAX67C,EAEK,IAAIhL,QAAQgL,GAKZ,IADGluD,KAAKg9F,oBAAoBnrF,IAKtC,OAAOQ,GAYR6gF,eAAe9mF,UAAU6wF,qBAAuB,SAASprF,GAExDA,EAAMQ,MAAM21D,eAAiBhoE,KAAKk9F,SAASrrF,EAAM0V,KAAKtW,MAAMksF,kBAAkBtrF,KAQ/EqhF,eAAe9mF,UAAU8wF,SAAW,SAASn9F,GAE5C,OAAgB,MAARA,EAAgBmzF,eAAeoJ,cAAcv8F,GAAQ,MAQ9DmzF,eAAe9mF,UAAU4wF,oBAAsB,SAASnrF,GAEvD,IAAI9F,EAAO/L,KAAKk9F,SAASrrF,EAAMnK,MAAMiG,YAAYswB,cAQjD,OANY,MAARlyB,IAEHA,EAAQ8F,EAAM0V,KAAKtW,MAAM8c,WAAW5b,OAAON,EAAMG,MAChDhS,KAAKu8F,iBAAmBv8F,KAAKw8F,oBAGxBzwF,GAYRmnF,eAAe9mF,UAAU0wF,eAAiB,SAASjrF,GAElDA,EAAMQ,MAAMjH,MAAMyG,GAClBA,EAAMQ,MAAMghC,MAAQxhC,EAAM0V,KAAKtW,MAAMuxC,SAAS3wC,GAC9CA,EAAMQ,MAAM61D,eAAiBr2D,EAAM0V,KAAKtW,MAAMmsF,kBAAkBvrF,GAChEA,EAAMQ,MAAM81D,qBAAuBt2D,EAAMnK,MAAMiG,YAAYstB,6BAC3DppB,EAAMQ,MAAM+1D,uBAAyBv2D,EAAM0V,KAAKtW,MAAMosF,0BAA0BxrF,GAChFA,EAAMQ,MAAMg2D,mBAAqBx2D,EAAMnK,MAAMiG,YAAY2tB,2BACzDzpB,EAAMQ,MAAMq2D,eAAiB72D,EAAM0V,KAAKtW,MAAMqsF,kBAAkBzrF,GAEhE7R,KAAKu9F,mBAAmB1rF,IAWzBqhF,eAAe9mF,UAAUmxF,mBAAqB,SAAS1rF,GAEnC,MAAfA,EAAMQ,QAETrS,KAAKw9F,aAAa3rF,EAAO,yBAA0BlE,YAAY2rB,qBAC/Dt5B,KAAKw9F,aAAa3rF,EAAO,iBAAkBlE,YAAYurB,iBACvDl5B,KAAKw9F,aAAa3rF,EAAO,WAAYlE,YAAY2rB,qBACjDt5B,KAAKw9F,aAAa3rF,EAAO,SAAUlE,YAAY6rB,mBAC/Cx5B,KAAKw9F,aAAa3rF,EAAO,OAAQlE,YAAYurB,mBAU/Cg6D,eAAe9mF,UAAUqxF,uBAAyB,SAAS5rF,GAG1D,GAAmB,MAAfA,EAAMnK,MAMT,IAJA,IAAIg2F,EAAS,CAAC,UAAW,WAAY,aACjC5sE,EAAS,CAACnjB,YAAYurB,gBAAiBvrB,YAAY6rB,kBACtD7rB,YAAY2rB,oBAAqB3rB,YAAYqvB,iBAErCn4B,EAAI,EAAGA,EAAIisB,EAAO3uB,OAAQ0C,IAElC,GAAIyD,QAAQ/H,QAAQm9F,EAAQ7rF,EAAMnK,MAAMopB,EAAOjsB,MAAQ,EAEtD,OAAO,EAKV,OAAO,GASRquF,eAAe9mF,UAAUoxF,aAAe,SAAS3rF,EAAO8rF,EAAOrxF,GAE9D,IAAI+F,EAAS/F,GAAOqB,YAAYqvB,gBAC/BnrB,EAAMxD,KAAOwD,EAAMQ,MAEpB,GAAa,MAATA,EACJ,CACC,IAAIpB,EAAQY,EAAM0V,KAAKtW,MACnBlJ,EAAQsK,EAAMsrF,GACdC,EAAa,KA6BjB,GA3Ba,WAAT71F,EAEH61F,EAAa3sF,EAAMiB,MAAM+vC,UAAUpwC,EAAMG,MAExB,YAATjK,GAERsK,EAAMsrF,GAAUrxF,GAAOqB,YAAY6rB,mBAClCltB,GAAOqB,YAAYqvB,gBACnB,UAAY,UAIZ4gE,EAFiD,MAA9C3sF,EAAMiB,MAAMs4D,YAAY34D,EAAMG,MAAM,GAE1Bf,EAAMiB,MAAMs4D,YAAY34D,EAAMG,MAAM,GAIpCH,EAAMG,KAGpB4rF,EAAa3sF,EAAM4sF,YAAYD,GAC/BtxF,EAAM2E,EAAM6sF,iCAEK,aAAT/1F,GAAuC,MAAf8J,EAAMQ,QAEtCA,EAAMsrF,GAAS9rF,EAAMQ,MAAM61D,gBAGV,MAAd01B,EACJ,CACC,IAAIG,EAAS9sF,EAAMa,UAAUC,SAAS6rF,GAGtC,GAFAvrF,EAAMsrF,GAAS,KAED,MAAVI,EACJ,CACC,IAAIC,EAAU1xF,GAAOqB,YAAYqvB,gBAAmB+gE,EAAO1vF,KAAO0vF,EAAO1rF,MAIxEA,EAAMsrF,GAFO,MAAVK,GAA2B,kBAATL,EAENK,EAAOL,GAIPI,EAAOr2F,MAAM4E,OAgBjC4mF,eAAe9mF,UAAU6xF,cAAgB,SAASpsF,GAEjD,OAAOA,EAAM0V,KAAKtW,MAAMitF,SAASrsF,EAAMG,OAYxCkhF,eAAe9mF,UAAU+xF,YAAc,SAAStsF,EAAO9J,GAEtD,IAAIkJ,EAAQY,EAAM0V,KAAKtW,MAGvB,GAFaA,EAAM8c,WAAW5b,OAAON,EAAMG,MAEvCH,EAAMnK,MAAMiG,YAAYuvB,gBAAkB,GAAgD,MAA3CrrB,EAAMnK,MAAMiG,YAAYuvB,gBAC3E,CAEC,IAAIkhE,EAAentF,EAAMotF,YAAYxsF,EAAMG,OAAmB,MAATjK,GAAiBO,QAAQ+N,OAAOtO,GAErF8J,EAAMxD,KAAO,IAAIrO,KAAKy8F,iBAAiB10F,EAAO,IAAIuH,YAC/CuC,EAAMnK,MAAMiG,YAAYgsB,cAAgBhsB,YAAYwyB,aACrDlvB,EAAMqtF,iBAAiBzsF,GACvBA,EAAMnK,MAAMiG,YAAYqvB,iBACxBnrB,EAAMnK,MAAMiG,YAAYsvB,kBACxBprB,EAAMnK,MAAMiG,YAAYuvB,gBACxBrrB,EAAMnK,MAAMiG,YAAYwvB,iBACxBtrB,EAAMnK,MAAMiG,YAAY8uB,eACxB5qB,EAAMnK,MAAMiG,YAAY+uB,mBACxB7qB,EAAMnK,MAAMiG,YAAYkvB,qBACxBhrB,EAAMnK,MAAMiG,YAAYivB,sBACxB/qB,EAAMnK,MAAMiG,YAAYgvB,oBACxB9qB,EAAMnK,MAAMiG,YAAY6Z,kBACxB3V,EAAMnK,MAAMiG,YAAYgtB,6BACxB9oB,EAAMnK,MAAMiG,YAAYitB,yBACxB3pB,EAAMmqF,WAAWvpF,EAAMG,OAASf,EAAMotF,YAAYxsF,EAAMG,MACxDf,EAAMstF,eAAe1sF,EAAMG,MAC3BH,EAAMnK,MAAMiG,YAAY0qB,gBACxBxmB,EAAMnK,MAAMiG,YAAYktB,qBACxBvyB,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYyqB,qBAAsBzqB,YAAYkpB,yBAC9EhlB,EAAMxD,KAAK4E,QAAU3K,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYwqB,mBAAoB,KACnFtmB,EAAMxD,KAAKigB,QAAU,EAAgB3gB,YAAY4lB,mBAAqB1hB,EAAM0V,KAAKtW,MAAMqd,QACvFzc,EAAMxD,KAAK3G,MAAQmK,EAAMnK,MACzBmK,EAAMxD,KAAKwD,MAAQA,EACnB7R,KAAKw+F,gBAAgB3sF,EAAOA,EAAMxD,MAOlC,IAAIowF,GAAe,EAEf1sF,EAAW,SAAS5J,GAEvB,IAAIwE,EAASkF,EAEb,GAAI3R,SAASqD,UAAYk7F,EACzB,CACC,IAAIrvF,EAAInF,QAAQ04B,WAAWx6B,GACvBkH,EAAIpF,QAAQ44B,WAAW16B,GAIvBsb,EAAKnb,QAAQqgB,aAAa1X,EAAM0W,UAAWvY,EAAGC,GAClD1C,EAASsE,EAAMsW,KAAKxV,SAASd,EAAM8kC,UAAUtyB,EAAGrU,EAAGqU,EAAGpU,IAGvD,OAAO1C,GAIR1C,QAAQq6B,oBAAoBzyB,EAAMxD,KAAKnJ,KACtCoD,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEvBnI,KAAK0+F,aAAa7sF,EAAO1J,KAE5B8I,EAAM+zB,eAAe/6B,QAAQg7B,WAAY,IAAIvD,aAAav5B,EAAK0J,IAC/D4sF,EAAextF,EAAMqd,SAAW3gB,YAAY4gB,aACR,OAAnCtkB,QAAQu4B,UAAUr6B,GAAKmO,aAG1BhO,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEvBnI,KAAK0+F,aAAa7sF,EAAO1J,IAE5B8I,EAAM+zB,eAAe/6B,QAAQi7B,WAAY,IAAIxD,aAAav5B,EAAK4J,EAAS5J,QAG1EG,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEvBnI,KAAK0+F,aAAa7sF,EAAO1J,KAE5B8I,EAAM+zB,eAAe/6B,QAAQk7B,SAAU,IAAIzD,aAAav5B,EAAK4J,EAAS5J,KACtEs2F,GAAe,OAMdxtF,EAAM0tF,uBAET10F,QAAQD,YAAY6H,EAAMxD,KAAKnJ,KAAM,WACpCoD,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEvBnI,KAAK0+F,aAAa7sF,EAAO1J,KAE5B8I,EAAM8zB,SAAS58B,EAAK0J,EAAMG,MAC1B/H,QAAQm4B,QAAQj6B,UAiBtB+qF,eAAe9mF,UAAUoyF,gBAAkB,SAAS3sF,EAAOQ,GAEtDnS,SAAS+C,QAAU/C,SAASgD,OAASmP,EAAMic,SAAW3gB,YAAY4gB,YAErElc,EAAMlL,KAAK0K,EAAM0V,KAAKtW,MAAM0W,WAI5BtV,EAAMlL,KAAK0K,EAAM0V,KAAK0sE,gBAaxBf,eAAe9mF,UAAUwyF,mBAAqB,SAAS/sF,GAEtD,IACIyxC,EADQzxC,EAAM0V,KAAKtW,MACF4tF,gBAAgBhtF,EAAMG,MACvCyN,EAAO,KAEX,GAAgB,MAAZ6jC,EACJ,CACC7jC,EAAO,IAAItT,aAEX,IAAK,IAAItH,EAAI,EAAGA,EAAIy+C,EAASnhD,OAAQ0C,IACrC,CACC,IAAIwN,EAA2B,MAAlBR,EAAMyxC,SAAoBzxC,EAAMyxC,SAAS72C,OAAO62C,EAASz+C,IAAM,KAE5E,GAAa,MAATwN,EACJ,CACC,IAAIxB,EAAM,IAAIisD,aAAa,IAAIxtD,YAAeg0C,EAASz+C,GAAGwuC,MAAMpuC,KAChE4L,EAAIyd,QAAUzc,EAAM0V,KAAKtW,MAAMqd,QAC/Bzd,EAAI82D,qBAAsB,EAC1B92D,EAAImjF,QAAU1wC,EAASz+C,GACvB7E,KAAK+zF,kBAAkBliF,EAAOhB,GAC9B7Q,KAAK8+F,4BAA4BjtF,EAAOyxC,EAASz+C,GAAIgM,GAE3B,MAAtByyC,EAASz+C,GAAGuP,SAEfvD,EAAI3L,KAAKwC,MAAM0M,OAASkvC,EAASz+C,GAAGuP,QAGrCqL,EAAKlT,IAAI+2C,EAASz+C,GAAIgM,QAItB4O,EAAKlT,IAAI+2C,EAASz+C,GAAIwN,IAMH,MAAlBR,EAAMyxC,UAETzxC,EAAMyxC,SAASx2C,OAAM,SAAS3I,EAAIkO,GAEjCA,EAAM4c,aAIRpd,EAAMyxC,SAAW7jC,GAalByzE,eAAe9mF,UAAU2nF,kBAAoB,SAASliF,EAAOmiF,GAE5DA,EAAQ7sF,KAAK0K,EAAM0V,KAAKsrC,mBASzBqgC,eAAe9mF,UAAU0yF,4BAA8B,SAASjtF,EAAOmiF,EAAS3hF,GAE/E,IAAIpB,EAASY,EAAM0V,KAAKtW,MAExBhH,QAAQD,YAAYqI,EAAMnN,KAAM,SAAS,SAAUiD,GAE9C8I,EAAM8hF,aAET9hF,EAAMgiF,aAAahiF,EAAMqqF,4BAG1BtH,EAAQxwD,UAAU,IAAIhC,cAAcv3B,QAAQ0gC,MAC1C,QAASxiC,EAAK,OAAQ0J,EAAMG,UAG/B/H,QAAQq6B,oBAAoBjyB,EAAMnN,MACjC,SAAUiD,GAET8B,QAAQm4B,QAAQj6B,MAEjB,SAAUA,GAET8I,EAAM+zB,eAAe/6B,QAAQi7B,WAC5B,IAAIxD,aAAav5B,EAAK0J,OAGrB3R,SAASqD,UAEZ0G,QAAQD,YAAYqI,EAAMnN,KAAM,YAAY,SAAUiD,GAErD6rF,EAAQxwD,UAAU,IAAIhC,cAAcv3B,QAAQ0gC,MAC1C,QAASxiC,EAAK,OAAQ0J,EAAMG,WAcjCkhF,eAAe9mF,UAAU2yF,cAAgB,SAASltF,GAEjD,IAAIZ,EAAQY,EAAM0V,KAAKtW,MACnBoiC,EAAQpiC,EAAM+tF,gBAAgBntF,GAElC,GAAIZ,EAAMguF,gBAA2B,MAAT5rD,GAE3B,GAAqB,MAAjBxhC,EAAMsiF,QACV,CACC,IAAI93E,EAAI,IAAI/M,YAAY,EAAG,EAAG+jC,EAAMprC,MAAOorC,EAAMxrC,QACjDgK,EAAMsiF,QAAU,IAAIr3B,aAAazgD,EAAGg3B,EAAMpuC,KAC1C4M,EAAMsiF,QAAQxsB,qBAAsB,EACpC91D,EAAMsiF,QAAQ7lE,QAAUrd,EAAMqd,QAE9BtuB,KAAKk0F,YAAYriF,EAAOA,EAAMsiF,SAAS,EAAMn0F,KAAKk/F,0BAA0BrtF,UAGpD,MAAjBA,EAAMsiF,UAEdtiF,EAAMsiF,QAAQllE,UACdpd,EAAMsiF,QAAU,OAalBjB,eAAe9mF,UAAU8yF,0BAA4B,SAASrtF,GAE7D,IAAIZ,EAAQY,EAAM0V,KAAKtW,MAEvB,OAAO3I,QAAQ2M,KAAKjV,MAAM,SAAUmI,GAEnC,GAAInI,KAAK28F,0BAA4B1rF,EAAM0C,YAC3C,CACC,IAAIwrF,GAAYluF,EAAM48D,gBAAgBh8D,EAAMG,MAC5Cf,EAAMmuF,UAAUD,GAAU,EAAO,CAACttF,EAAMG,MAAO,KAAM7J,GACrD8B,QAAQm4B,QAAQj6B,QAiBnB+qF,eAAe9mF,UAAU8nF,YAAc,SAASriF,EAAOsiF,EAASC,EAAcC,GAE7E,IAAIpjF,EAAQY,EAAM0V,KAAKtW,MAKLA,EAAMotF,YAAYxsF,EAAMG,OAAS9R,SAASgD,OAC3D+N,EAAMqd,SAAW3gB,YAAY4gB,aAI7B4lE,EAAQ7lE,QAAU3gB,YAAY2lB,mBAC9B6gE,EAAQhtF,KAAK8J,EAAM0W,WACnBwsE,EAAQjvF,KAAKwC,MAAMqqC,OAAS,GAI5BoiD,EAAQhtF,KAAK0K,EAAM0V,KAAKsrC,kBAGzB,IAAI3tD,EAAOivF,EAAQkL,WAAalL,EAAQjvF,KAaxC,GAVoB,MAAhBmvF,GAAyBn0F,SAAS6B,SAEjCkP,EAAM0C,cAETzO,EAAKwC,MAAM0M,OAAS,WAGrBnK,QAAQD,YAAY9E,EAAM,QAASmvF,IAGhCD,EACJ,CACC,IAAIkL,EAAQ,KAEZr1F,QAAQq6B,oBAAoBp/B,GAC3B,SAAUiD,GAETm3F,EAAQ,IAAInwF,QAAQlF,QAAQ04B,WAAWx6B,GAAM8B,QAAQ44B,WAAW16B,IAChE8I,EAAM+zB,eAAe/6B,QAAQg7B,WAAY,IAAIvD,aAAav5B,EAAK0J,IAC/D5H,QAAQm4B,QAAQj6B,MAEjB,SAAUA,GAET8I,EAAM+zB,eAAe/6B,QAAQi7B,WAAY,IAAIxD,aAAav5B,EAAK0J,OAEhE,SAAU1J,GAET8I,EAAM+zB,eAAe/6B,QAAQk7B,SAAU,IAAIzD,aAAav5B,EAAK0J,IAC7D5H,QAAQm4B,QAAQj6B,MAIE,MAAhBksF,GAAwBn0F,SAAS6B,QAEpCmD,EAAK4Z,iBAAiB,YAAY,SAAS3W,GAE1C,GAAa,MAATm3F,EACJ,CACC,IAAI5zC,EAAMz6C,EAAMwgD,UAEZroD,KAAKsX,IAAI4+E,EAAMlwF,EAAInF,QAAQ04B,WAAWx6B,IAAQujD,GACjDtiD,KAAKsX,IAAI4+E,EAAMjwF,EAAIpF,QAAQ44B,WAAW16B,IAAQujD,IAE9C2oC,EAAa9kF,KAAK8kF,EAAclsF,GAChC8B,QAAQm4B,QAAQj6B,QAGhB,GAIL,OAAOjD,GAcRguF,eAAe9mF,UAAUmzF,aAAe,SAAS1tF,EAAO1J,GAEvD,OAAO,GAcR+qF,eAAe9mF,UAAUsyF,aAAe,SAAS7sF,EAAO1J,GAEvD,OAAO,GAYR+qF,eAAe9mF,UAAUwtF,iBAAmB,SAAS/nF,GAEpD,IAAIZ,EAAQY,EAAM0V,KAAKtW,MAKnBc,EAAW,SAAS5J,GAEvB,IAAIwE,EAASkF,EAEb,GAAKZ,EAAMqd,SAAW3gB,YAAY4gB,aAAkD,OAAnCtkB,QAAQu4B,UAAUr6B,GAAKmO,UAAsBpW,SAASqD,SACvG,CACC,IAAI6L,EAAInF,QAAQ04B,WAAWx6B,GACvBkH,EAAIpF,QAAQ44B,WAAW16B,GAIvBsb,EAAKnb,QAAQqgB,aAAa1X,EAAM0W,UAAWvY,EAAGC,GAClD1C,EAASsE,EAAMsW,KAAKxV,SAASd,EAAM8kC,UAAUtyB,EAAGrU,EAAGqU,EAAGpU,IAGvD,OAAO1C,GAGR1C,QAAQq6B,oBAAoBzyB,EAAMQ,MAAMnN,KACvCoD,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEvBnI,KAAKu/F,aAAa1tF,EAAO1J,IAE5B8I,EAAM+zB,eAAe/6B,QAAQg7B,WAAY,IAAIvD,aAAav5B,EAAK0J,OAGjEvJ,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEvBnI,KAAKu/F,aAAa1tF,EAAO1J,IAE5B8I,EAAM+zB,eAAe/6B,QAAQi7B,WAAY,IAAIxD,aAAav5B,EAAK4J,EAAS5J,QAG1EG,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEvBnI,KAAKu/F,aAAa1tF,EAAO1J,IAE5B8I,EAAM+zB,eAAe/6B,QAAQk7B,SAAU,IAAIzD,aAAav5B,EAAK4J,EAAS5J,SAMrE8I,EAAM0tF,uBAET10F,QAAQD,YAAY6H,EAAMQ,MAAMnN,KAAM,WACrCoD,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEvBnI,KAAKu/F,aAAa1tF,EAAO1J,KAE5B8I,EAAM8zB,SAAS58B,EAAK0J,EAAMG,MAC1B/H,QAAQm4B,QAAQj6B,SAgBrB+qF,eAAe9mF,UAAUozF,YAAc,SAAS3tF,EAAOooC,GAEtD,IAAIhpC,EAAQY,EAAM0V,KAAKtW,MACnBlJ,EAAQ/H,KAAKi+F,cAAcpsF,GAC3B4tF,EAAWxuF,EAAMmqF,WAAWvpF,EAAMG,MAClCwhF,EAAWviF,EAAMstF,eAAe1sF,EAAMG,MAEtCsc,EADezc,EAAM0V,KAAKtW,MAAMotF,YAAYxsF,EAAMG,OAAmB,MAATjK,GAAiBO,QAAQ+N,OAAOtO,GAClE4F,YAAY4lB,mBAAqB1hB,EAAM0V,KAAKtW,MAAMqd,QAC5EtZ,EAAWnD,EAAMnK,MAAMiG,YAAY0qB,iBAAmB,UAmB1D,GAjBkB,MAAdxmB,EAAMxD,MAAiBwD,EAAMxD,KAAKq6C,MAAQ+2C,GAAY5tF,EAAMxD,KAAKkuD,SAAWi3B,GAC/E3hF,EAAMxD,KAAK2G,UAAYA,GAAYnD,EAAMxD,KAAKigB,SAAWA,IAEzDzc,EAAMxD,KAAK4gB,UACXpd,EAAMxD,KAAO,MAGI,MAAdwD,EAAMxD,MAAyB,MAATtG,IAAkBO,QAAQ+N,OAAOtO,IAAUA,EAAM5F,OAAS,GAEnFnC,KAAKm+F,YAAYtsF,EAAO9J,GAEF,MAAd8J,EAAMxD,MAA0B,MAATtG,GAAiC,GAAhBA,EAAM5F,SAEtD0P,EAAMxD,KAAK4gB,UACXpd,EAAMxD,KAAO,MAGI,MAAdwD,EAAMxD,KACV,CAGK4rC,IAGyB,MAAxBpoC,EAAMxD,KAAK83D,WAAqBnmE,KAAK0/F,mBAAmB7tF,EAAOA,EAAMxD,QAGxEwD,EAAMxD,KAAK83D,UAAY,MAGxBt0D,EAAMxD,KAAK0pD,cACXlmD,EAAMxD,KAAKjD,MAAMyG,GAGjBA,EAAMxD,KAAKge,OAASpb,EAAMqtF,iBAAiBzsF,IAG5C,IAAI4U,EAASzmB,KAAK20D,eAAe9iD,GAC7B8tF,EAAY3/F,KAAK4/F,aAAa/tF,GAGlC,GAFA7R,KAAKw9F,aAAa3rF,EAAO,QAASlE,YAAYqvB,iBAE1Cid,GAAUpoC,EAAMxD,KAAKtG,OAASA,GAAS8J,EAAMxD,KAAK+sF,YAAcqE,GACnE5tF,EAAMxD,KAAK2G,UAAYA,GAAYnD,EAAMxD,KAAKwxF,YAAcrM,GAC5D3hF,EAAMxD,KAAKiE,OAASqtF,GAAa9tF,EAAMxD,KAAKigB,SAAWA,GAClC,MAArBzc,EAAMxD,KAAKoY,SAAmB5U,EAAMxD,KAAKoY,OAAOjX,OAAOiX,GACxD,CACC5U,EAAMxD,KAAKigB,QAAUA,EACrBzc,EAAMxD,KAAKtG,MAAQA,EACnB8J,EAAMxD,KAAKoY,OAASA,EACpB5U,EAAMxD,KAAKiE,MAAQqtF,EACnB9tF,EAAMxD,KAAKq6C,KAAO+2C,EAClB5tF,EAAMxD,KAAKkuD,QAAUi3B,EACrB3hF,EAAMxD,KAAK2G,SAAWA,EAGtB,IAAI8qF,EAAMjuF,EAAMxD,KAAKnJ,KAAKwC,MAAM6D,WAChCvL,KAAK+/F,iBAAiBluF,EAAMxD,MAC5BwD,EAAMxD,KAAKnJ,KAAKwC,MAAM6D,WAAau0F,KAetC5M,eAAe9mF,UAAUszF,mBAAqB,SAAS7tF,EAAOQ,GAE7D,SAAS2tF,EAAMC,EAAUl1E,EAAWhc,GAgBnC,MAXiB,cAAbgc,GAA0C,gBAAbA,GACnB,iBAAbA,GAA6C,eAAbA,EAEvBpW,WAAWtC,EAAM4tF,IAAatrF,WAAWtC,EAAM2lD,WACtDnmD,EAAMnK,MAAMqjB,IAAchc,GAInBsD,EAAM4tF,KAAcpuF,EAAMnK,MAAMqjB,IAAchc,GAMzD,OAAOixF,EAAM,YAAaryF,YAAYwvB,gBAAiBxvB,YAAYqpB,oBAClEgpE,EAAM,SAAUryF,YAAYsvB,iBAAkBtvB,YAAYqf,qBAC1DgzE,EAAM,OAAQryF,YAAYuvB,eAAgBvvB,YAAYof,mBACtDizE,EAAM,QAASryF,YAAYqvB,gBAAiB,UAC5CgjE,EAAM,QAASryF,YAAYgsB,YAAa,KACxCqmE,EAAM,SAAUryF,YAAYisB,qBAAsB,KAClDomE,EAAM,UAAWryF,YAAY8uB,cAAe,IAC5CujE,EAAM,aAAcryF,YAAY+uB,kBAAmB,IACnDsjE,EAAM,eAAgBryF,YAAYkvB,oBAAqB,IACvDmjE,EAAM,gBAAiBryF,YAAYivB,qBAAsB,IACzDojE,EAAM,cAAeryF,YAAYgvB,mBAAoB,IACrDqjE,EAAM,aAAcryF,YAAY6Z,kBAAkB,IAClDw4E,EAAM,aAAcryF,YAAYgtB,8BAChCqlE,EAAM,SAAUryF,YAAYitB,0BAC5BolE,EAAM,UAAWryF,YAAYwqB,mBAAoB,MACjD6nE,EAAM,gBAAiBryF,YAAYyqB,qBAAsBzqB,YAAYkpB,yBAYvEq8D,eAAe9mF,UAAU2zF,iBAAmB,SAAS1tF,GAEpDA,EAAMQ,UAYPqgF,eAAe9mF,UAAUwzF,aAAe,SAAS/tF,GAEhD,OAAOA,EAAM0V,KAAKjV,OAYnB4gF,eAAe9mF,UAAUuoD,eAAiB,SAAS9iD,GAElD,IAAIZ,EAAQY,EAAM0V,KAAKtW,MACnBqB,EAAQT,EAAM0V,KAAKjV,MACnBH,EAASlB,EAAM8c,WAAW5b,OAAON,EAAMG,MACvCyU,EAAS,IAAInX,YAAYuC,EAAM0gF,eAAenjF,EAAGyC,EAAM0gF,eAAeljF,GAE1E,GAAI8C,EACJ,CACC,IAAI6lD,EAAUnmD,EAAMxD,KAAKo5D,aACzBhhD,EAAOrX,GAAK4oD,EAAQ5oD,EAAIkD,EACxBmU,EAAOpX,GAAK2oD,EAAQ3oD,EAAIiD,EAExB,IAAI4vC,EAAMjxC,EAAMkxC,gBAAgBtwC,EAAMG,MAE3B,MAAPkwC,IAEHz7B,EAAOxe,MAAQmB,KAAKC,IAAI,EAAG64C,EAAIj6C,MAAQqK,GACvCmU,EAAO5e,OAASuB,KAAKC,IAAI,EAAG64C,EAAIr6C,OAASyK,QAI3C,CAEC,GAAIT,EAAMxD,KAAKumD,wBACf,CACC,IAAI/jD,EAAM4V,EAAOrX,EACjBqX,EAAOrX,EAAIqX,EAAOpX,EAClBoX,EAAOpX,EAAIwB,EAGZ4V,EAAOrX,GAAKyC,EAAMzC,EAClBqX,EAAOpX,GAAKwC,EAAMxC,EAGlBoX,EAAOxe,MAAQmB,KAAKC,IAAI,EAAGwI,EAAM5J,OACjCwe,EAAO5e,OAASuB,KAAKC,IAAI,EAAGwI,EAAMhK,QAGnC,GAAIgK,EAAMxD,KAAKumD,wBACf,CAEC,IAAIhkD,GAAKiB,EAAM5J,MAAQ4J,EAAMhK,QAAU,EACvC4e,EAAOrX,GAAKwB,EACZ6V,EAAOpX,GAAKuB,EACRC,EAAM4V,EAAOxe,MACjBwe,EAAOxe,MAAQwe,EAAO5e,OACtB4e,EAAO5e,OAASgJ,EAIjB,GAAmB,MAAfgB,EAAMQ,MACV,CACC,IAAI4oF,EAAO3yF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYmsB,qBAAsBnsB,YAAYwyB,cACnF+6D,EAAO5yF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYosB,8BAA+BpsB,YAAYyyB,cAE5F66D,GAAQttF,YAAYwyB,cAAgB+6D,GAAQvtF,YAAYyyB,eAE3D3Z,EAAS5U,EAAMQ,MAAMsiD,eAAeluC,IAKtC,IAAIs0E,EAAKzyF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYksB,kBAAmB,MAYtE,OAVU,MAANkhE,IAEHt0E,EAAOxe,MAAQ0M,WAAWomF,GAAMzoF,GAG5BH,GAEJnS,KAAKkgG,kBAAkBruF,EAAO4U,GAGxBA,GAcRysE,eAAe9mF,UAAU8zF,kBAAoB,SAASruF,EAAO4U,GAK5D,GAHAA,EAAOpX,GAAKwC,EAAMxD,KAAKgiD,OAAOhhD,EAAIoX,EAAO5e,OACzC4e,EAAOrX,GAAKyC,EAAMxD,KAAKgiD,OAAOjhD,EAAIqX,EAAOxe,OAEpCjI,KAAKm7F,eAA6D,QAA3CtpF,EAAMnK,MAAMiG,YAAY0qB,iBAAwE,SAA3CxmB,EAAMnK,MAAMiG,YAAY0qB,gBACzG,CACC,IAAIxf,EAAIhH,EAAM0V,KAAKjV,MACf0lD,EAAUnmD,EAAMxD,KAAKo5D,aACzBhhD,EAAOrX,GAAK4oD,EAAQ5oD,EAAIyJ,EACxB4N,EAAOpX,GAAK2oD,EAAQ3oD,EAAIwJ,EAExB,IAAIoiF,EAAO3yF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYmsB,qBAAsBnsB,YAAYwyB,cACnF+6D,EAAO5yF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYosB,8BAA+BpsB,YAAYyyB,cAC5F26D,EAAKzyF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYksB,kBAAmB,MAEtEpT,EAAOxe,MAAQmB,KAAKC,IAAI,EAAGod,EAAOxe,OAAUgzF,GAAQttF,YAAYwyB,cAAsB,MAAN46D,EAAelpF,EAAMxD,KAAKguD,YAAcxjD,EAAIhH,EAAMxD,KAAK8tD,aAAetjD,EAAK,IAC3J4N,EAAO5e,OAASuB,KAAKC,IAAI,EAAGod,EAAO5e,QAAWqzF,GAAQvtF,YAAYyyB,aAAiBvuB,EAAMxD,KAAK6tD,WAAarjD,EAAIhH,EAAMxD,KAAK+tD,cAAgBvjD,EAAK,IAGhJ,IAAIitC,EAAQj0C,EAAMxD,KAAKsqD,kBAGvB,GAAa,GAAT7S,GAAuB,MAATj0C,GAAiBA,EAAM0V,KAAKtW,MAAMiB,MAAM2vC,SAAShwC,EAAMG,MACzE,CACC,IAAImR,EAAKtR,EAAMlC,aACXyX,EAAKvV,EAAMjC,aAEf,GAAI6W,EAAOrX,GAAK+T,GAAMsD,EAAOpX,GAAK+X,EAClC,CACC,IAAInH,EAAM6lC,GAAS18C,KAAK2W,GAAK,KACzB0D,EAAKnb,QAAQkb,gBAAgB,IAAIrU,QAAQsX,EAAOrX,EAAGqX,EAAOpX,GAC5DjG,KAAK2X,IAAId,GAAM7W,KAAK6X,IAAIhB,GAAM,IAAI9Q,QAAQgU,EAAIiE,IAEhDX,EAAOrX,EAAIqU,EAAGrU,EACdqX,EAAOpX,EAAIoU,EAAGpU,KAcjB6jF,eAAe9mF,UAAU+zF,mBAAqB,SAAStuF,EAAOooC,GAI7D,GAFAj6C,KAAK4+F,mBAAmB/sF,GAEF,MAAlBA,EAAMyxC,SACV,CACC,IAAIkN,EAAMloD,QAAQ4gB,IAAI5gB,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAY2W,eAAgB,GAAI,IAC1ErE,EAAM3X,QAAQuX,UAAU2wC,GACxBzvC,EAAM3X,KAAK2X,IAAId,GACfgB,EAAM7X,KAAK6X,IAAIhB,GAEzBpO,EAAMyxC,SAASx2C,OAAM,SAAS3I,EAAIkO,GAEjC,IAAIoU,EAASpU,EAAM2hF,QAAQoM,UAAUvuF,GAErC,IAAKA,EAAM0V,KAAKtW,MAAM8c,WAAW5b,OAAON,EAAMG,OAE1B,MAAfH,EAAMQ,OAAwB,GAAPm+C,EAC3B,CACC,IAAIrtC,EAAKsD,EAAO9W,aACZyX,EAAKX,EAAO7W,aAEZwW,EAAQ9d,QAAQkb,gBAAgB,IAAIrU,QAAQgU,EAAIiE,GAAKrG,EAAKE,EACtD,IAAI9R,QAAQ0C,EAAMlC,aAAckC,EAAMjC,eAExCuT,EAAKiD,EAAMhX,EACXgY,EAAKhB,EAAM/W,EACXoX,EAAOrX,EAAIhG,KAAK2c,MAAM5C,EAAKsD,EAAOxe,MAAQ,GAC1Cwe,EAAOpX,EAAIjG,KAAK2c,MAAMqB,EAAKX,EAAO5e,OAAS,IAI/CoyC,GAA0B,MAAhB5nC,EAAMoU,QAAkBpU,EAAMC,OAAST,EAAM0V,KAAKjV,OAC9DD,EAAMoU,OAAOjX,OAAOiX,KAErBpU,EAAMoU,OAASA,EACfpU,EAAMC,MAAQT,EAAM0V,KAAKjV,MACzBD,EAAMQ,eAeVqgF,eAAe9mF,UAAUi0F,cAAgB,SAASxuF,EAAOooC,GAExD,IAAI5G,EAAQxhC,EAAM0V,KAAKtW,MAAM+tF,gBAAgBntF,GAE7C,GAAqB,MAAjBA,EAAMsiF,SAA4B,MAAT9gD,EAC7B,CACC,IAAI5sB,EAASzmB,KAAKsgG,iBAAiBzuF,EAAOwhC,EAAMprC,MAAOorC,EAAMxrC,QACzDkgB,EAAK/nB,KAA0B,sBACjCsI,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAY2W,eAAgB,GAC1DzS,EAAMQ,MAAMsmD,kBACV9/C,EAAIhH,EAAM0V,KAAKjV,OAEf2nC,GAAUpoC,EAAMsiF,QAAQ7hF,OAASuG,GAAMhH,EAAMsiF,QAAQ1tE,OAAOjX,OAAOiX,IACtE5U,EAAMsiF,QAAQjxE,UAAY6E,IAE1BlW,EAAMsiF,QAAQjxE,SAAW6E,EACzBlW,EAAMsiF,QAAQ1tE,OAASA,EACvB5U,EAAMsiF,QAAQ7hF,MAAQuG,EAEtBhH,EAAMsiF,QAAQthF,YAWjBqgF,eAAe9mF,UAAUk0F,iBAAmB,SAASzuF,EAAO/I,EAAGD,GAE9D,GAAqB,MAAjBgJ,EAAMsiF,QACV,CACC,IAAIt7E,EAAIhH,EAAM0V,KAAKjV,MACf6Q,EAAKtR,EAAMlC,aACXyX,EAAKvV,EAAMjC,aAEf,IAAKiC,EAAM0V,KAAKtW,MAAM8c,WAAW5b,OAAON,EAAMG,QAE7CmR,EAAKtR,EAAMzC,EAAItG,EAAI+P,EACnBuO,EAAKvV,EAAMxC,EAAIxG,EAAIgQ,EAEA,MAAfhH,EAAMQ,OACV,CAEC,IAAIm+C,EAAM3+C,EAAMQ,MAAMukD,mBAEtB,GAAI52D,KAAK08F,sBAERlsC,EAAMloD,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAY2W,eAAgB,QAIhE,GAAIzS,EAAMQ,MAAMuiD,wBAChB,CACC,IAAIhkD,GAAKiB,EAAM5J,MAAQ4J,EAAMhK,QAAU,EACvCsb,GAAMvS,EACNwW,GAAMxW,EAIR,GAAW,GAAP4/C,EACJ,CACO,IAAIvwC,EAAM3X,QAAQuX,UAAU2wC,GACxBzvC,EAAM3X,KAAK2X,IAAId,GACfgB,EAAM7X,KAAK6X,IAAIhB,GAEfmG,EAAQ9d,QAAQkb,gBAAgB,IAAIrU,QAAQgU,EAAIiE,GAAKrG,EAAKE,EAC5D,IAAI9R,QAAQ0C,EAAMlC,aAAckC,EAAMjC,eACxCuT,EAAKiD,EAAMhX,EACXgY,EAAKhB,EAAM/W,GAKpB,OAAQwC,EAAM0V,KAAKtW,MAAM8c,WAAW5b,OAAON,EAAMG,MAChD,IAAI1C,YAAYlG,KAAK2c,MAAM5C,EAAKra,EAAI,EAAI+P,GAAIzP,KAAK2c,MAAMqB,EAAKve,EAAI,EAAIgQ,GAAIzP,KAAK2c,MAAMjd,EAAI+P,GAAIzP,KAAK2c,MAAMld,EAAIgQ,IAI5G,OAAO,MAeRq6E,eAAe9mF,UAAUm0F,iBAAmB,SAAS1uF,EAAO3M,EAAMs7F,GAIjE,IAFA,IAAIC,EAASzgG,KAAK0gG,kBAAkB7uF,GAE3BhN,EAAI,EAAGA,EAAI47F,EAAOt+F,OAAQ0C,IAElC,GAAiB,MAAb47F,EAAO57F,IAAgC,MAAlB47F,EAAO57F,GAAGK,KACnC,CACC,IAAIwrB,EAAO+vE,EAAO57F,GAAGK,KAAK2O,YAAchC,EAAM0V,KAAK0sE,eAClDwM,EAAO57F,GAAGK,KAAK2O,YAAchC,EAAM0V,KAAKsrC,iBACrChkC,EAAO,EAAS2xE,EAAWt7F,EAE/B,GAAY,MAAR2pB,GAAgBA,EAAKhZ,aAAe4qF,EAAO57F,GAAGK,KAEzB,MAApB2pB,EAAKhZ,YAERgZ,EAAKhb,WAAWtP,YAAYk8F,EAAO57F,GAAGK,MAItC2pB,EAAKhb,WAAW2/B,aAAaitD,EAAO57F,GAAGK,KAAM2pB,EAAKhZ,kBAG/C,GAAY,MAARgZ,EAGR,GAAI4xE,EAAO57F,GAAGK,KAAK2O,YAAchC,EAAM0V,KAAKtW,MAAM0W,UAClD,CAGC,IAFA,IAAI8G,EAAS5c,EAAM0V,KAAKkH,OAEP,MAAVA,GAAkBA,EAAO5a,YAAchC,EAAM0V,KAAKtW,MAAM0W,WAE9D8G,EAASA,EAAO5a,WAGH,MAAV4a,GAAwC,MAAtBA,EAAO5Y,YAExB4Y,EAAO5Y,aAAe4qF,EAAO57F,GAAGK,MAEnCu7F,EAAO57F,GAAGK,KAAK2O,WAAW2/B,aAAaitD,EAAO57F,GAAGK,KAAMupB,EAAO5Y,aAK/D4qF,EAAO57F,GAAGK,KAAK2O,WAAWtP,YAAYk8F,EAAO57F,GAAGK,WAGZ,MAA7Bu7F,EAAO57F,GAAGK,KAAK2O,YACiB,MAAxC4sF,EAAO57F,GAAGK,KAAK2O,WAAW+B,YAC1B6qF,EAAO57F,GAAGK,KAAK2O,WAAW+B,YAAc6qF,EAAO57F,GAAGK,MAGlDu7F,EAAO57F,GAAGK,KAAK2O,WAAW2/B,aAAaitD,EAAO57F,GAAGK,KAAMu7F,EAAO57F,GAAGK,KAAK2O,WAAW+B,YAI/E8a,EAEH8vE,EAAWC,EAAO57F,GAAGK,KAIrBA,EAAOu7F,EAAO57F,GAAGK,KAKpB,MAAO,CAACA,EAAMs7F,IAaftN,eAAe9mF,UAAUs0F,kBAAoB,SAAS7uF,GAErD,MAAO,CAACA,EAAMQ,MAAOR,EAAMxD,KAAMwD,EAAMsiF,UAmBxCjB,eAAe9mF,UAAUyG,OAAS,SAAShB,EAAOgvC,EAAO01C,GAExD,IAAIoK,EAAe3gG,KAAKu0D,YAAY1iD,EAAOgvC,EAAO01C,GAE/B,MAAf1kF,EAAMQ,OAA+B,MAAbkkF,IAAqBA,IAEhDv2F,KAAKw/F,YAAY3tF,EAAO8uF,GACxB3gG,KAAKmgG,mBAAmBtuF,EAAO8uF,GAC/B3gG,KAAKqgG,cAAcxuF,EAAO8uF,KAa5BzN,eAAe9mF,UAAUmoD,YAAc,SAAS1iD,EAAOgvC,EAAO01C,GAE7D,IAAIrkF,EAAQL,EAAM0V,KAAKtW,MAAMiB,MACzByuF,GAAe,EAgGnB,OA7FmB,MAAf9uF,EAAMQ,OAAsC,MAArBR,EAAMQ,MAAM3K,OAAgC,MAAfmK,EAAMnK,OAC7DmK,EAAMQ,MAAM3K,MAAMiG,YAAYswB,cAAgBpsB,EAAMnK,MAAMiG,YAAYswB,eAEtEpsB,EAAMQ,MAAM4c,UACZpd,EAAMQ,MAAQ,MAGI,MAAfR,EAAMQ,OAA+C,MAA9BR,EAAM0V,KAAKtW,MAAM0W,WAC3C9V,EAAMG,MAAQH,EAAM0V,KAAK0lD,cACxB/6D,EAAM2vC,SAAShwC,EAAMG,OAASE,EAAMC,OAAON,EAAMG,QAElDH,EAAMQ,MAAQrS,KAAK+8F,YAAYlrF,GAEZ,MAAfA,EAAMQ,QAETR,EAAMQ,MAAM+gD,kBAAoBpzD,KAAKozD,kBACrCvhD,EAAMQ,MAAM8gD,UAAYnzD,KAAKmzD,UAE7BnzD,KAAKi9F,qBAAqBprF,GAC1B7R,KAAK68F,gBAAgBhrF,GACrB7R,KAAK4+F,mBAAmB/sF,GACxB7R,KAAK45F,iBAAiB/nF,GAGtBA,EAAM0V,KAAKtW,MAAM2vF,sBAAsBC,cAAchvF,KAG7CgvC,GAAwB,MAAfhvC,EAAMQ,OAAmB/J,QAAQgX,aAAazN,EAAMQ,MAAM3K,MAC5EmK,EAAMnK,SAAU1H,KAAKy9F,uBAAuB5rF,KAE5CA,EAAMQ,MAAM0lD,cACZ/3D,KAAK88F,eAAejrF,GAEpBA,EAAM0V,KAAKtW,MAAM2vF,sBAAsBC,cAAchvF,GACrDgvC,GAAQ,GAIU,MAAfhvC,EAAMQ,OAAiBR,EAAMQ,MAAM21D,gBACtChoE,KAAKk9F,SAASrrF,EAAM0V,KAAKtW,MAAMksF,kBAAkBtrF,MAEpB,MAAzBA,EAAMQ,MAAM41D,YAEfp2D,EAAMQ,MAAM41D,UAAUh5C,UACtBpd,EAAMQ,MAAM41D,UAAY,MAGzBjoE,KAAKi9F,qBAAqBprF,GAEQ,MAA9BA,EAAMQ,MAAM21D,iBAEfn2D,EAAMQ,MAAM41D,UAAY,IAAIp2D,EAAMQ,MAAM21D,eACxCn2D,EAAMQ,MAAM41D,UAAU35C,QAAUzc,EAAMQ,MAAMic,QAC5Czc,EAAMQ,MAAM41D,UAAU9gE,KAAK0K,EAAM3M,MACjC27C,GAAQ,IAIS,MAAfhvC,EAAMQ,QAGTrS,KAAK++F,cAAcltF,IAIfgvC,GAAS7gD,KAAK8gG,eAAejvF,EAAOA,EAAMQ,UAEjB,MAAxBR,EAAMsT,gBAETtT,EAAMQ,MAAM2gD,OAASnhD,EAAMsT,eAAesyC,QAC1C5lD,EAAMQ,MAAMoU,OAAS,OAIrB5U,EAAMQ,MAAM2gD,OAAS,KACrBnhD,EAAMQ,MAAMoU,OAAS,IAAInX,YAAYuC,EAAMzC,EAAGyC,EAAMxC,EAAGwC,EAAM5J,MAAO4J,EAAMhK,SAG3EgK,EAAMQ,MAAMC,MAAQT,EAAM0V,KAAKjV,MAEd,MAAbikF,GAAqBA,EAExBv2F,KAAK+gG,cAAclvF,GAInBA,EAAMQ,MAAMoiD,oBAGbksC,GAAe,IAIVA,GAQRzN,eAAe9mF,UAAU20F,cAAgB,SAASlvF,GAEjDA,EAAMQ,MAAMQ,UAQbqgF,eAAe9mF,UAAU00F,eAAiB,SAASjvF,EAAOQ,GAEzD,OAAuB,MAAhBA,EAAMoU,QAAkBpU,EAAMC,OAAST,EAAM0V,KAAKjV,OAC/B,MAAxBT,EAAMsT,iBAA2B9S,EAAMoU,OAAOjX,OAAOqC,IAC7B,MAAxBA,EAAMsT,iBAA2B7c,QAAQ+W,YAAYhN,EAAM2gD,OAAQnhD,EAAMsT,iBAY5E+tE,eAAe9mF,UAAU6iB,QAAU,SAASpd,GAExB,MAAfA,EAAMQ,QAES,MAAdR,EAAMxD,OAETwD,EAAMxD,KAAK4gB,UACXpd,EAAMxD,KAAO,MAGQ,MAAlBwD,EAAMyxC,WAETzxC,EAAMyxC,SAASx2C,OAAM,SAAS3I,EAAIkO,GAEjCA,EAAM4c,aAGPpd,EAAMyxC,SAAW,MAGG,MAAjBzxC,EAAMsiF,UAETtiF,EAAMsiF,QAAQllE,UACdpd,EAAMsiF,QAAU,MAGjBtiF,EAAMQ,MAAM4c,UACZpd,EAAMQ,MAAQ,OAIhBpS,WAAWizF,oBAA2C,IAAnBA,eAAiCA,oBAAiBtsF,EAMrF,IAAIo6F,YACJ,CA4FEC,eAAgB,SAASpvF,EAAOiS,EAAQrF,EAAQu0C,EAAQrmD,GAExD,IAAI4a,EAAO1V,EAAM0V,KACZtW,EAAQsW,EAAKtW,MACbiwF,EAAU54F,QAAQyW,SAASlN,EAAMnK,MACnCiG,YAAY6tB,cACZ7tB,YAAYypB,gBAAkB7P,EAAKjV,MAElC4T,EAAMrU,EAAMsT,eACZqyC,EAAKtxC,EAAI,GACTqxC,EAAKrxC,EAAIA,EAAI/jB,OAAO,GAEnBg/F,GAAe,EAEpB,GAAU,MAAN3pC,GAEH1zC,EAAS,IAAIwuE,aACNljF,EAAIooD,EAAGpoD,EACd0U,EAAOzU,EAAImoD,EAAGnoD,MAEV,IAAc,MAAVyU,EAyBR,OArBA,IAFImB,EAAa3c,QAAQqb,mBAAmBG,EAAQjS,GAAO,EAAMlE,YAAYyW,uBAE3DzW,YAAYyW,qBAAuBa,GAActX,YAAYiX,oBAC9EjX,YAAY+W,oBAEZy8E,EAAel8E,GAActX,YAAYiX,wBAG1C,CACE,IAAIw8E,EAAiBnwF,EAAMkxC,gBAAgBr+B,EAAO9R,MAE9CovF,EAAeh/C,SAElB++C,EAAeC,EAAehyF,GAAK,GAEjB,MAAVqP,IAER0iF,EAAe1iF,EAAOrP,EAAIqP,EAAOxW,MAAQ6b,EAAO1U,IASnD,IAAIiyF,GAAe,EAEpB,GAAU,MAAN9pC,GAEH94C,EAAS,IAAI6zE,aACNljF,EAAImoD,EAAGnoD,EACdqP,EAAOpP,EAAIkoD,EAAGloD,OAEV,GAAc,MAAVoP,EACR,CACA,IAAIwG,EAEJ,IAFIA,EAAa3c,QAAQqb,mBAAmBlF,EAAQ5M,GAAO,EAAOlE,YAAYyW,uBAE5DzW,YAAYyW,qBAAuBa,GAActX,YAAYiX,oBAC9EjX,YAAY+W,oBAEZ28E,EAAep8E,GAActX,YAAYiX,wBAG1C,CACE,IAAI08E,EAAiBrwF,EAAMkxC,gBAAgB1jC,EAAOzM,MAE9CsvF,EAAel/C,SAElBi/C,EAAeC,EAAelyF,GAAK,GAEjB,MAAV0U,IAERu9E,EAAev9E,EAAO1U,EAAI0U,EAAO7b,MAAQwW,EAAOrP,IAKpD,GAAc,MAAV0U,GAA4B,MAAVrF,EACtB,CACC,IAAI0B,EAAK,EAAiB2D,EAAO1U,EAAI0U,EAAO1U,EAAI0U,EAAO7b,MACnDmY,EAAKmH,EAAKg6E,kBAAkBz9E,GAE5B09E,EAAK,EAAiB/iF,EAAOrP,EAAIqP,EAAOrP,EAAIqP,EAAOxW,MACnDw5F,EAAKl6E,EAAKg6E,kBAAkB9iF,GAE5B0D,EAAM++E,EAEN3uF,EAAK,GAAkB4P,EAAMA,EAC7Bu/E,EAAM,IAAIvyF,QAAQgR,EAAK5N,EAAI6N,GAG3BZ,EAAM,IAAIrQ,QAAQqyF,GADtBjvF,EAAK,GAAkB4P,EAAMA,GACEs/E,GAG/B,GAAIN,GAAgBE,EACpB,CACC,IAAIjyF,EAAI,EACPhG,KAAK2G,IAAIoQ,EAAIqhF,GAAIN,EACjB93F,KAAKC,IAAI8W,EAAIqhF,GAAIN,EAElBv0F,EAAOC,KAAK,IAAIuC,QAAQC,EAAGgR,IAC3BzT,EAAOC,KAAK,IAAIuC,QAAQC,EAAGqyF,SAEvB,GAAKC,EAAItyF,EAAIoQ,EAAIpQ,GAAM+xF,EAC5B,CACC,IAAIQ,EAAOvhF,GAAMqhF,EAAKrhF,GAAM,EAE5BzT,EAAOC,KAAK80F,GACZ/0F,EAAOC,KAAK,IAAIuC,QAAQuyF,EAAItyF,EAAGuyF,IAC/Bh1F,EAAOC,KAAK,IAAIuC,QAAQqQ,EAAIpQ,EAAGuyF,IAC/Bh1F,EAAOC,KAAK4S,QAIZ7S,EAAOC,KAAK80F,GACZ/0F,EAAOC,KAAK4S,KAUfoiF,KAAM,SAAS/vF,EAAOiS,EAAQrF,EAAQu0C,EAAQrmD,GAE7C,IAAIuZ,EAAMrU,EAAMsT,eAEZqyC,EAAKtxC,EAAI,GACTqxC,EAAKrxC,EAAIA,EAAI/jB,OAAO,GAExB,GAAU,MAANq1D,GAAoB,MAAND,GAelB,GAAc,MAAVzzC,EACJ,CACC,IAAIyD,EAAO1V,EAAM0V,KACbtW,EAAQsW,EAAKtW,MAGP,OAFNwS,EAAgB,MAAVuvC,GAAkBA,EAAO7wD,OAAS,EAAK6wD,EAAO,GAAK,QAI5DvvC,EAAK8D,EAAKs6E,sBAAsBhwF,EAAO4R,GAEnCnb,QAAQoe,SAAS5C,EAAQL,EAAGrU,EAAGqU,EAAGpU,KAErCoU,EAAK,OAIP,IAAIrU,EAAI,EACJmD,EAAK,EACLlD,EAAI,EACJoD,EAAK,EAEJ0P,EAAM7Z,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAY6tB,cACnDvqB,EAAMknC,UAAY5wB,EAAKjV,MACrBs2C,EAAMtgD,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYiY,gBACnDjY,YAAYkX,gBAET+jC,GAAOj7C,YAAY6W,iBACtBokC,GAAOj7C,YAAYmX,iBAEnB1V,EAAImY,EAAKu6E,kBAAkBh+E,GAC3BvR,EAAK4P,IAIL9S,EAAIkY,EAAKg6E,kBAAkBz9E,GAC3BrR,EAAK0P,GAGI,MAANsB,GACHA,EAAGrU,EAAI0U,EAAO1U,GACdqU,EAAGrU,EAAI0U,EAAO1U,EAAI0U,EAAO7b,MAEf,MAANwb,GAEHrU,EAAIqU,EAAGrU,EACPqD,EAAKrJ,KAAKC,IAAID,KAAKsX,IAAIrR,EAAIoU,EAAGpU,GAAIoD,IAI9Bm2C,GAAOj7C,YAAY6W,gBAEtBnV,EAAIyU,EAAOzU,EAAI,EAAIkD,EAEXq2C,GAAOj7C,YAAYmX,gBAE3BzV,EAAIyU,EAAOzU,EAAIyU,EAAOjc,OAAS,EAAI0K,EAInCnD,EAFQw5C,GAAOj7C,YAAYoX,eAEvBjB,EAAO1U,EAAI,EAAIqD,EAIfqR,EAAO1U,EAAI0U,EAAO7b,MAAQ,EAAIwK,EAItB,MAANgR,IAERrU,EAAImY,EAAKu6E,kBAAkBh+E,GAC3BvR,EAAKnJ,KAAKC,IAAID,KAAKsX,IAAItR,EAAIqU,EAAGrU,GAAIqD,GAClCpD,EAAIoU,EAAGpU,EACPoD,EAAK,GAGN9F,EAAOC,KAAK,IAAIuC,QAAQC,EAAImD,EAAIlD,EAAIoD,IACpC9F,EAAOC,KAAK,IAAIuC,QAAQC,EAAImD,EAAIlD,EAAIoD,UAzFpC,GAAc,MAAVugD,GAAkBA,EAAO7wD,OAAS,EAErC,IAAK,IAAI0C,EAAI,EAAGA,EAAImuD,EAAO7wD,OAAQ0C,IACnC,CACC,IAAI4e,EAAKuvC,EAAOnuD,GAChB4e,EAAK5R,EAAM0V,KAAKs6E,sBAAsBhwF,EAAO4R,GAC7C9W,EAAOC,KAAK,IAAIuC,QAAQsU,EAAGrU,EAAGqU,EAAGpU,MA+FrC0yF,eAAgB,SAASlwF,EAAOiS,EAAQrF,EAAQu0C,EAAQrmD,GAEvD,IAAI8W,EAAgB,MAAVuvC,GAAkBA,EAAO7wD,OAAS,EAAK6wD,EAAO,GAAK,KAEzD3B,GAAW,EACXD,GAAa,EAEjB,GAAc,MAAVttC,GAA4B,MAAVrF,EAErB,GAAU,MAANgF,EACJ,CACC,IAAIhH,EAAOrT,KAAK2G,IAAI+T,EAAO1U,EAAGqP,EAAOrP,GACjC4N,EAAQ5T,KAAKC,IAAIya,EAAO1U,EAAI0U,EAAO7b,MACtCwW,EAAOrP,EAAIqP,EAAOxW,OAEfgV,EAAM7T,KAAK2G,IAAI+T,EAAOzU,EAAGoP,EAAOpP,GAChC8N,EAAS/T,KAAKC,IAAIya,EAAOzU,EAAIyU,EAAOjc,OACvC4W,EAAOpP,EAAIoP,EAAO5W,QAInBwpD,GAFA5tC,EAAK5R,EAAM0V,KAAKs6E,sBAAsBhwF,EAAO4R,IAE/BpU,EAAI4N,GAAOwG,EAAGpU,EAAI8N,EAChCi0C,EAAa3tC,EAAGrU,EAAIqN,GAAQgH,EAAGrU,EAAI4N,OAQnCq0C,GAJI50C,EAAOrT,KAAKC,IAAIya,EAAO1U,EAAGqP,EAAOrP,MACjC4N,EAAQ5T,KAAK2G,IAAI+T,EAAO1U,EAAI0U,EAAO7b,MACtCwW,EAAOrP,EAAIqP,EAAOxW,WAUlBmpD,GAJIn0C,EAAM7T,KAAKC,IAAIya,EAAOzU,EAAGoP,EAAOpP,MAChC8N,EAAS/T,KAAK2G,IAAI+T,EAAOzU,EAAIyU,EAAOjc,OACvC4W,EAAOpP,EAAIoP,EAAO5W,UAOjBupD,IAAeC,GACnBx/C,EAAMnK,MAAMiG,YAAYovB,cAAgBpvB,YAAY+yB,eAMpDsgE,YAAYgB,WAAWnwF,EAAOiS,EAAQrF,EAAQu0C,EAAQrmD,GAJtDq0F,YAAYiB,YAAYpwF,EAAOiS,EAAQrF,EAAQu0C,EAAQrmD,IAczDq1F,WAAY,SAASnwF,EAAOiS,EAAQrF,EAAQu0C,EAAQrmD,GAEnD,IAAI4a,EAAO1V,EAAM0V,KACb9D,EAAgB,MAAVuvC,GAAkBA,EAAO7wD,OAAS,EAAK6wD,EAAO,GAAK,KACzD9sC,EAAMrU,EAAMsT,eACZqyC,EAAKtxC,EAAI,GACTqxC,EAAKrxC,EAAIA,EAAI/jB,OAAO,GAqBxB,GAnBU,MAANshB,IAEHA,EAAK8D,EAAKs6E,sBAAsBhwF,EAAO4R,IAG9B,MAAN+zC,KAEH1zC,EAAS,IAAIwuE,aACNljF,EAAIooD,EAAGpoD,EACd0U,EAAOzU,EAAImoD,EAAGnoD,GAGL,MAANkoD,KAEH94C,EAAS,IAAI6zE,aACNljF,EAAImoD,EAAGnoD,EACdqP,EAAOpP,EAAIkoD,EAAGloD,GAGD,MAAVyU,GAA4B,MAAVrF,EACtB,CACC,IAAIq2B,EAAI1rC,KAAKC,IAAIya,EAAO1U,EAAGqP,EAAOrP,GAC9B2Y,EAAI3e,KAAK2G,IAAI+T,EAAO1U,EAAI0U,EAAO7b,MAC9BwW,EAAOrP,EAAIqP,EAAOxW,OAEnBmH,EAAW,MAANqU,EAAcA,EAAGrU,EAAIhG,KAAK2c,MAAMgC,GAAK+sB,EAAI/sB,GAAK,GAEnDrE,EAAK6D,EAAKg6E,kBAAkBz9E,GAC5BjB,EAAK0E,EAAKg6E,kBAAkB9iF,GA2BhC,GAzBU,MAANgF,IAECA,EAAGpU,GAAKyU,EAAOzU,GAAKoU,EAAGpU,GAAKyU,EAAOzU,EAAIyU,EAAOjc,SAEjD6b,EAAKD,EAAGpU,GAGLoU,EAAGpU,GAAKoP,EAAOpP,GAAKoU,EAAGpU,GAAKoP,EAAOpP,EAAIoP,EAAO5W,SAEjDgb,EAAKY,EAAGpU,IAIL/G,QAAQoe,SAASjI,EAAQrP,EAAGsU,IAC/Bpb,QAAQoe,SAAS5C,EAAQ1U,EAAGsU,IAE7B/W,EAAOC,KAAK,IAAIuC,QAAQC,EAAIsU,IAGxBpb,QAAQoe,SAASjI,EAAQrP,EAAGyT,IAC/Bva,QAAQoe,SAAS5C,EAAQ1U,EAAGyT,IAE7BlW,EAAOC,KAAK,IAAIuC,QAAQC,EAAGyT,IAGP,GAAjBlW,EAAOxK,OAEV,GAAU,MAANshB,EAEEnb,QAAQoe,SAASjI,EAAQrP,EAAGqU,EAAGpU,IAClC/G,QAAQoe,SAAS5C,EAAQ1U,EAAGqU,EAAGpU,IAEhC1C,EAAOC,KAAK,IAAIuC,QAAQC,EAAGqU,EAAGpU,QAIhC,CACC,IAAIuB,EAAIxH,KAAKC,IAAIya,EAAOzU,EAAGoP,EAAOpP,GAC9BgN,EAAIjT,KAAK2G,IAAI+T,EAAOzU,EAAIyU,EAAOjc,OAChC4W,EAAOpP,EAAIoP,EAAO5W,QAErB8E,EAAOC,KAAK,IAAIuC,QAAQC,EAAGwB,GAAKyL,EAAIzL,GAAK,OAY7CqxF,YAAa,SAASpwF,EAAOiS,EAAQrF,EAAQu0C,EAAQrmD,GAEpD,IAAI4a,EAAO1V,EAAM0V,KACb9D,EAAgB,MAAVuvC,GAAkBA,EAAO7wD,OAAS,EAAK6wD,EAAO,GAAK,KACzD9sC,EAAMrU,EAAMsT,eACZqyC,EAAKtxC,EAAI,GACTqxC,EAAKrxC,EAAIA,EAAI/jB,OAAO,GAqBxB,GAnBU,MAANshB,IAEHA,EAAK8D,EAAKs6E,sBAAsBhwF,EAAO4R,IAG9B,MAAN+zC,KAEH1zC,EAAS,IAAIwuE,aACNljF,EAAIooD,EAAGpoD,EACd0U,EAAOzU,EAAImoD,EAAGnoD,GAGL,MAANkoD,KAEH94C,EAAS,IAAI6zE,aACNljF,EAAImoD,EAAGnoD,EACdqP,EAAOpP,EAAIkoD,EAAGloD,GAGD,MAAVyU,GAA4B,MAAVrF,EACtB,CACC,IAAI7N,EAAIxH,KAAKC,IAAIya,EAAOzU,EAAGoP,EAAOpP,GAC9BgN,EAAIjT,KAAK2G,IAAI+T,EAAOzU,EAAIyU,EAAOjc,OAC9B4W,EAAOpP,EAAIoP,EAAO5W,QAEnBuH,EAAImY,EAAKu6E,kBAAkBh+E,GAErB,MAANL,GACHA,EAAGrU,GAAK0U,EAAO1U,GACfqU,EAAGrU,GAAK0U,EAAO1U,EAAI0U,EAAO7b,QAE1BmH,EAAIqU,EAAGrU,GAGR,IAAIC,EAAW,MAANoU,EAAcA,EAAGpU,EAAIjG,KAAK2c,MAAM1J,GAAKzL,EAAIyL,GAAK,GAyBvD,GAvBK/T,QAAQoe,SAASjI,EAAQrP,EAAGC,IAC/B/G,QAAQoe,SAAS5C,EAAQ1U,EAAGC,IAE7B1C,EAAOC,KAAK,IAAIuC,QAAQC,EAAGC,IAO3BD,EAJS,MAANqU,GACHA,EAAGrU,GAAKqP,EAAOrP,GACfqU,EAAGrU,GAAKqP,EAAOrP,EAAIqP,EAAOxW,MAEtBwb,EAAGrU,EAIHmY,EAAKu6E,kBAAkBrjF,GAGvBnW,QAAQoe,SAASjI,EAAQrP,EAAGC,IAC/B/G,QAAQoe,SAAS5C,EAAQ1U,EAAGC,IAE7B1C,EAAOC,KAAK,IAAIuC,QAAQC,EAAGC,IAGP,GAAjB1C,EAAOxK,OAEV,GAAU,MAANshB,GAA+B,GAAjB9W,EAAOxK,OAEnBmG,QAAQoe,SAASjI,EAAQgF,EAAGrU,EAAGC,IAClC/G,QAAQoe,SAAS5C,EAAQL,EAAGrU,EAAGC,IAEhC1C,EAAOC,KAAK,IAAIuC,QAAQsU,EAAGrU,EAAGC,QAIhC,CACC,IAAIylC,EAAI1rC,KAAKC,IAAIya,EAAO1U,EAAGqP,EAAOrP,GAC9B2Y,EAAI3e,KAAK2G,IAAI+T,EAAO1U,EAAI0U,EAAO7b,MAChCwW,EAAOrP,EAAIqP,EAAOxW,OAErB0E,EAAOC,KAAK,IAAIuC,QAAQ2lC,GAAK/sB,EAAI+sB,GAAK,EAAGzlC,OAoB7C6yF,iBAAkB,SAASrwF,EAAOswF,EAAcC,EAAcC,EAAc11F,GAG3E,IAAIuZ,EAAM86E,YAAYsB,gBAAgBzwF,EAAMsT,eAAgBtT,EAAM0V,KAAKjV,OACnEwR,EAASk9E,YAAYuB,eAAeJ,EAActwF,EAAM0V,KAAKjV,OAC7DmM,EAASuiF,YAAYuB,eAAeH,EAAcvwF,EAAM0V,KAAKjV,OAI7DkwF,EAAc71F,EAAOxK,OAAS,EAAKwK,EAAO,GAAK,KAC/CykD,GAAa,EACbqxC,EAAO,KAGX,SAASC,EAAUj/E,GAWlB,OATAA,EAAGrU,EAAIhG,KAAK2c,MAAMtC,EAAGrU,EAAIyC,EAAM0V,KAAKjV,MAAQ,IAAM,GAClDmR,EAAGpU,EAAIjG,KAAK2c,MAAMtC,EAAGpU,EAAIwC,EAAM0V,KAAKjV,MAAQ,IAAM,IAEhC,MAAdkwF,GAAsBp5F,KAAKsX,IAAI8hF,EAAWpzF,EAAIqU,EAAGrU,IAb5C,GAayDhG,KAAKsX,IAAI8hF,EAAWnzF,EAAIoU,EAAGpU,IAAMjG,KAAKC,IAAI,EAAGwI,EAAM0V,KAAKjV,UAEzH3F,EAAOC,KAAK6W,GACZ++E,EAAa/+E,GAGP++E,EAIR,IAAI/+E,EAAKyC,EAAI,GAEH,MAANzC,GAAwB,MAAVK,EAEjBL,EAAK,IAAItU,QAAQ0C,EAAM0V,KAAKu6E,kBAAkBh+E,GAASjS,EAAM0V,KAAKg6E,kBAAkBz9E,IAEtE,MAANL,IAERA,EAAKA,EAAGhU,SAGT,IAAIkzF,EAAUz8E,EAAI/jB,OAAS,EAG3B,GAAoB,MAAhBkgG,GAAwBA,EAAalgG,OAAS,EAClD,CAIC,IAFA,IAAIygG,EAAQ,GAEH/9F,EAAI,EAAGA,EAAIw9F,EAAalgG,OAAQ0C,IACzC,CACC,IAAIgM,EAAMgB,EAAM0V,KAAKs6E,sBAAsBhwF,EAAOwwF,EAAax9F,IAAI,GAExD,MAAPgM,GAEH+xF,EAAMh2F,KAAKiE,GAIb,GAAoB,GAAhB+xF,EAAMzgG,OAET,OAIS,MAANshB,GAA0B,MAAZm/E,EAAM,KAEnBx5F,KAAKsX,IAAIkiF,EAAM,GAAGxzF,EAAIqU,EAAGrU,GA5DrB,IA8DPwzF,EAAM,GAAGxzF,EAAIqU,EAAGrU,GAGbhG,KAAKsX,IAAIkiF,EAAM,GAAGvzF,EAAIoU,EAAGpU,GAjErB,IAmEPuzF,EAAM,GAAGvzF,EAAIoU,EAAGpU,IAIlB,IAAIkoD,EAAKrxC,EAAIy8E,GAEH,MAANprC,GAAyC,MAA3BqrC,EAAMA,EAAMzgG,OAAS,KAElCiH,KAAKsX,IAAIkiF,EAAMA,EAAMzgG,OAAS,GAAGiN,EAAImoD,EAAGnoD,GA3EpC,IA6EPwzF,EAAMA,EAAMzgG,OAAS,GAAGiN,EAAImoD,EAAGnoD,GAG5BhG,KAAKsX,IAAIkiF,EAAMA,EAAMzgG,OAAS,GAAGkN,EAAIkoD,EAAGloD,GAhFpC,IAkFPuzF,EAAMA,EAAMzgG,OAAS,GAAGkN,EAAIkoD,EAAGloD,IAIjCozF,EAAOG,EAAM,GAEb,IAAIC,EAAc/+E,EACdg/E,EAAY58E,EAAI,GAChB68E,GAAU,EACVC,GAAW,EACXC,EAAcR,EASlB,IAPiB,MAAbK,IAEHD,EAAc,MAKNh+F,EAAI,EAAGA,EAAI,EAAGA,IACvB,CACC,IAAIq+F,EAA8B,MAAbJ,GAAqBA,EAAU1zF,GAAK6zF,EAAY7zF,EACjE+zF,EAA6B,MAAbL,GAAqBA,EAAUzzF,GAAK4zF,EAAY5zF,EAEhE+zF,EAA2B,MAAfP,GAAwBI,EAAY5zF,GAAKwzF,EAAYxzF,GACnE4zF,EAAY5zF,GAAKwzF,EAAYxzF,EAAIwzF,EAAYh7F,OAC3Cw7F,EAA4B,MAAfR,GAAwBI,EAAY7zF,GAAKyzF,EAAYzzF,GACpE6zF,EAAY7zF,GAAKyzF,EAAYzzF,EAAIyzF,EAAY56F,MAS/C,GAPA86F,EAAUI,GAA+B,MAAbL,GAAqBM,EACjDJ,EAAWE,GAAgC,MAAbJ,GAAqBO,EAM5C,GAAHx+F,IAAUk+F,GAAWC,GAAcE,GAAkBC,QAIzD,CACC,GAAiB,MAAbL,IAAuBK,IAAkBD,IAAoBE,GAAaC,GAC9E,CACCjyC,GAAagyC,EACb,MAGD,GAAIJ,GAAYD,EAChB,CACC3xC,EAAa2xC,EAEJ,GAALl+F,IAGHusD,EAAawxC,EAAMzgG,OAAS,GAAK,EAAI4gG,EAAUC,GAGhD,OAIFH,EAAcpkF,EAGG,OAFjBqkF,EAAY58E,EAAIy8E,MAIfE,EAAc,MAGfI,EAAcL,EAAMA,EAAMzgG,OAAS,GAE/B+gG,GAAkBC,IAErBP,EAAQA,EAAMnrC,MAAM,IA0BtB,IAtBIrG,IAA0B,MAAVlrC,EAAI,IAAcA,EAAI,GAAG7W,GAAKozF,EAAKpzF,GAC3C,MAAV6W,EAAI,IAAwB,MAAVpC,IAClB2+E,EAAKpzF,EAAIyU,EAAOzU,GAAKozF,EAAKpzF,EAAIyU,EAAOzU,EAAIyU,EAAOjc,SAEjD66F,EAAU,IAAIvzF,QAAQsU,EAAGrU,EAAGqzF,EAAKpzF,KAExB+hD,IAA0B,MAAVlrC,EAAI,IAAcA,EAAI,GAAG9W,GAAKqzF,EAAKrzF,GAChD,MAAV8W,EAAI,IAAwB,MAAVpC,IAClB2+E,EAAKrzF,EAAI0U,EAAO1U,GAAKqzF,EAAKrzF,EAAI0U,EAAO1U,EAAI0U,EAAO7b,SAElDy6F,EAAU,IAAIvzF,QAAQszF,EAAKrzF,EAAGqU,EAAGpU,IAG9B+hD,EAEH3tC,EAAGpU,EAAIozF,EAAKpzF,EAIZoU,EAAGrU,EAAIqzF,EAAKrzF,EAGJvK,EAAI,EAAGA,EAAI+9F,EAAMzgG,OAAQ0C,IAEjCusD,GAAcA,EACdqxC,EAAOG,EAAM/9F,GAKTusD,EAEH3tC,EAAGpU,EAAIozF,EAAKpzF,EAIZoU,EAAGrU,EAAIqzF,EAAKrzF,EAGbszF,EAAUj/E,EAAGhU,cAKdgzF,EAAOh/E,EAEP2tC,GAAa,EA+Bd,GAzBU,OAFV3tC,EAAKyC,EAAIy8E,KAEmB,MAAVlkF,IAEjBgF,EAAK,IAAItU,QAAQ0C,EAAM0V,KAAKu6E,kBAAkBrjF,GAAS5M,EAAM0V,KAAKg6E,kBAAkB9iF,KAG3E,MAANgF,GAES,MAARg/E,IAECrxC,IAAgC,MAAhBlrC,EAAIy8E,IAAoBz8E,EAAIy8E,GAAStzF,GAAKozF,EAAKpzF,GACjD,MAAhB6W,EAAIy8E,IAA8B,MAAVlkF,IACxBgkF,EAAKpzF,EAAIoP,EAAOpP,GAAKozF,EAAKpzF,EAAIoP,EAAOpP,EAAIoP,EAAO5W,SAEjD66F,EAAU,IAAIvzF,QAAQsU,EAAGrU,EAAGqzF,EAAKpzF,KAExB+hD,IAAgC,MAAhBlrC,EAAIy8E,IAAoBz8E,EAAIy8E,GAASvzF,GAAKqzF,EAAKrzF,GACtD,MAAhB8W,EAAIy8E,IAA8B,MAAVlkF,IACxBgkF,EAAKrzF,EAAIqP,EAAOrP,GAAKqzF,EAAKrzF,EAAIqP,EAAOrP,EAAIqP,EAAOxW,SAElDy6F,EAAU,IAAIvzF,QAAQszF,EAAKrzF,EAAGqU,EAAGpU,KAMtB,MAAV6W,EAAI,IAAwB,MAAVpC,EAErB,KAAOnX,EAAOxK,OAAS,GAAkB,MAAbwK,EAAO,IAClCrE,QAAQoe,SAAS5C,EAAQnX,EAAO,GAAGyC,EAAGzC,EAAO,GAAG0C,IAEhD1C,EAAOyJ,OAAO,EAAG,GAKnB,GAAoB,MAAhB8P,EAAIy8E,IAA8B,MAAVlkF,EAE3B,KAAO9R,EAAOxK,OAAS,GAAkC,MAA7BwK,EAAOA,EAAOxK,OAAS,IAClDmG,QAAQoe,SAASjI,EAAQ9R,EAAOA,EAAOxK,OAAS,GAAGiN,EAAGzC,EAAOA,EAAOxK,OAAS,GAAGkN,IAEhF1C,EAAOyJ,OAAOzJ,EAAOxK,OAAS,EAAG,GAKzB,MAANo1D,GAA2C,MAA7B5qD,EAAOA,EAAOxK,OAAS,IACxCiH,KAAKsX,IAAI62C,EAAGnoD,EAAIzC,EAAOA,EAAOxK,OAAS,GAAGiN,IAjQjC,GAkQThG,KAAKsX,IAAI62C,EAAGloD,EAAI1C,EAAOA,EAAOxK,OAAS,GAAGkN,IAlQjC,IAoQT1C,EAAOyJ,OAAOzJ,EAAOxK,OAAS,EAAG,GAGA,MAA7BwK,EAAOA,EAAOxK,OAAS,KAEtBiH,KAAKsX,IAAI/T,EAAOA,EAAOxK,OAAS,GAAGiN,EAAImoD,EAAGnoD,GAzQtC,IA2QPzC,EAAOA,EAAOxK,OAAS,GAAGiN,EAAImoD,EAAGnoD,GAG9BhG,KAAKsX,IAAI/T,EAAOA,EAAOxK,OAAS,GAAGkN,EAAIkoD,EAAGloD,GA9QtC,IAgRP1C,EAAOA,EAAOxK,OAAS,GAAGkN,EAAIkoD,EAAGloD,MAMrCi0F,WAAY,GAEZC,oBAAoB,EAEpBC,WAAY,CAAE,EAAG,EAAG,GAClB,CAAE,GAAI,GAAK,CAAE,EAAG,GAAK,CAAE,EAAG,GAAK,EAAG,EAAG,GAAK,CAAE,GAAI,GAAK,CAAE,EAAG,IAE5DC,WAAY,CAAE,CAAE,EAAG,GAAI,CAAE,EAAG,GAAK,CAAE,EAAG,GAAI,CAAE,EAAG,GAAI,CAAE,EAAG,GAAK,CAAE,EAAG,GACpD,CAAE,EAAG,GAAK,CAAE,EAAG,GAAI,CAAE,EAAG,GAAK,CAAE,EAAG,GAAI,CAAE,EAAG,GAAK,CAAE,EAAG,IAEnEC,cAAe,CACd,CAAE,CAAE,IAAK,KAAM,KAAM,MAAQ,CAAE,IAAK,KAAM,IAAK,KAAM,KAAM,MAC1D,CAAE,IAAK,KAAM,IAAK,KAAM,KAAM,MAC9B,CAAE,IAAK,KAAM,KAAM,KAAM,IAAK,KAAM,OACtC,CAAE,CAAE,IAAK,KAAM,IAAK,KAAM,KAAM,MAAQ,CAAE,IAAK,KAAM,KAAM,MACzD,CAAE,IAAK,KAAM,KAAM,KAAM,IAAK,KAAM,MACpC,CAAE,IAAK,KAAM,IAAK,KAAM,KAAM,OAChC,CAAE,CAAE,KAAM,IAAK,KAAM,IAAK,KAAM,KAAM,MAAQ,CAAE,KAAM,MACpD,CAAE,KAAM,KAAM,KAAM,IAAK,KAAM,MAC/B,CAAE,KAAM,IAAK,KAAM,IAAK,KAAM,KAAM,OACtC,CAAE,CAAE,KAAM,MAAQ,CAAE,KAAM,IAAK,KAAM,IAAK,KAAM,KAAM,MACpD,CAAE,KAAM,IAAK,KAAM,IAAK,KAAM,KAAM,MACpC,CAAE,KAAM,KAAM,KAAM,IAAK,KAAM,QAEjCC,oBAAqB,CACnB,CAAE,KAAM,CAAE,KAAM,MAAQ,KAAM,MAC9B,CAAE,KAAM,CAAE,IAAK,KAAM,KAAM,MAAS,KAAM,MAC1C,CAAE,KAAM,CAAE,KAAM,MAAQ,KAAM,MAC9B,CAAE,CAAE,KAAM,MAAQ,CAAE,KAAM,KAAM,MAC9B,CAAE,KAAM,MACR,OACJC,kBAAmB,GAEnBC,OAAQ,CACD,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1B,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEjCC,UAAW,GAEXC,SAAU,GAEVC,WAAY,IAEZC,YAAa,IAEbC,KAAM,EAENC,IAAK,EAELC,MAAO,EAEPC,OAAQ,EAGRC,UAAW,IAIXC,YAAa,IAEbC,YAAa,KAEbC,YAAa,KAEbC,YAAa,KAGbC,aAAc,SAAS9yF,EAAO4wB,GAE7B,IAAI16B,EAAQO,QAAQyW,SAASlN,EAAMnK,MAAO,EAAaiG,YAAYywB,wBAClEzwB,YAAY0wB,wBAAyB/1B,QAAQyW,SAASlN,EAAMnK,MAC1DiG,YAAYwwB,iBAAkB6iE,YAAYsC,aAE7C,GAAa,QAATv7F,EAKH,GAFWO,QAAQyW,SAASlN,EAAMnK,MAAO,EAAaiG,YAAY+tB,iBAAmB/tB,YAAY8tB,eAAgB9tB,YAAYC,OAEjHD,YAAYC,KACxB,CACC,IAAIigB,EAAOvlB,QAAQ0W,UAAUnN,EAAMnK,MAAO,EAAaiG,YAAY2Z,gBAAkB3Z,YAAYguB,cAAehuB,YAAYupB,oBAC5HnvB,EAAQqB,KAAKC,IAAI,EAAGD,KAAKgZ,MAAMyL,EAAOmzE,YAAYsC,YAActC,YAAYsC,aAAetC,YAAYsC,gBAIvGv7F,EAAQ,EAAIi5F,YAAYsC,WAI1B,OAAOv7F,GAcRu6F,gBAAiB,SAAStvC,EAAQ1gD,GAEjC,IAAI3F,EAAS,GAEb,GAAc,MAAVqmD,EAEH,IAAK,IAAInuD,EAAI,EAAGA,EAAImuD,EAAO7wD,OAAQ0C,IAElC,GAAiB,MAAbmuD,EAAOnuD,GACX,CACC,IAAI4e,EAAK,IAAItU,QAAQ/F,KAAK2c,MAAMitC,EAAOnuD,GAAGuK,EAAIkD,EAAQ,IAAM,GACvDlJ,KAAK2c,MAAMitC,EAAOnuD,GAAGwK,EAAIiD,EAAQ,IAAM,IAC5C3F,EAAO9H,GAAK4e,OAIZ9W,EAAO9H,GAAK,UAMd8H,EAAS,KAGV,OAAOA,GAcR41F,eAAgB,SAAS1wF,EAAOS,GAE/B,IAAI3F,EAAS,KAeb,OAba,MAATkF,GAEHlF,EAASkF,EAAMpC,SACRC,QAAQtG,KAAK2c,MAAMlU,EAAMzC,EAAIkD,EAAQ,IAAM,GAC9ClJ,KAAK2c,MAAMlU,EAAMxC,EAAIiD,EAAQ,IAAM,GACnClJ,KAAK2c,MAAMlU,EAAM5J,MAAQqK,EAAQ,IAAM,GACvClJ,KAAK2c,MAAMlU,EAAMhK,OAASyK,EAAQ,IAAM,IAI5C3F,EAAS,KAGHA,GAmBRi4F,cAAe,SAAS/yF,EAAOswF,EAAcC,EAAcC,EAAc11F,GAExE,IAAIsE,EAAQY,EAAM0V,KAAKtW,MACnB4zF,EAAuB,MAAV/gF,GAAyB7S,EAAM8c,WAAW5b,OAAO2R,EAAO9R,MACrE8yF,EAAuB,MAAVrmF,GAAyBxN,EAAM8c,WAAW5b,OAAOsM,EAAOzM,MAErEkU,EAAM86E,YAAYsB,gBAAgBzwF,EAAMsT,eAAgBtT,EAAM0V,KAAKjV,OACnEwR,EAASk9E,YAAYuB,eAAeJ,EAActwF,EAAM0V,KAAKjV,OAC7DmM,EAASuiF,YAAYuB,eAAeH,EAAcvwF,EAAM0V,KAAKjV,OAE7DklD,EAAKtxC,EAAI,GACTqxC,EAAKrxC,EAAIA,EAAI/jB,OAAO,GAEpB4iG,EAAoB,MAAVjhF,EAAiBA,EAAO1U,EAAIooD,EAAGpoD,EACzC41F,EAAoB,MAAVlhF,EAAiBA,EAAOzU,EAAImoD,EAAGnoD,EACzC41F,EAAwB,MAAVnhF,EAAiBA,EAAO7b,MAAQ,EAC9Ci9F,EAAyB,MAAVphF,EAAiBA,EAAOjc,OAAS,EAEhDs9F,EAAoB,MAAV1mF,EAAiBA,EAAOrP,EAAImoD,EAAGnoD,EACzCg2F,EAAoB,MAAV3mF,EAAiBA,EAAOpP,EAAIkoD,EAAGloD,EACzCg2F,EAAwB,MAAV5mF,EAAiBA,EAAOxW,MAAQ,EAC9Cq9F,EAAyB,MAAV7mF,EAAiBA,EAAO5W,OAAS,EAEhD09F,EAAevE,YAAY2D,aAAa9yF,GAAO,GAC/C2zF,EAAexE,YAAY2D,aAAa9yF,GAAO,GAKrC,MAAViS,GAAkBrF,GAAUqF,IAG/ByhF,EADAC,EAAep8F,KAAKC,IAAIk8F,EAAcC,IAIvC,IAAIC,EAAcD,EAAeD,EAE7BG,GAAW,EAWf,GARU,MAANluC,GAAoB,MAAND,IAKjBmuC,GAHInzF,EAAKglD,EAAGnoD,EAAIooD,EAAGpoD,GAGHmD,GAFZE,EAAK8kD,EAAGloD,EAAImoD,EAAGnoD,GAEOoD,EAAKgzF,EAAcA,GAG1CC,GAAa1E,YAAYuC,oBAAuC,MAAhBlB,GAClDA,EAAalgG,OAAS,GAAO0iG,GAAcC,EAE5C9D,YAAYkB,iBAAiBrwF,EAAOswF,EAAcC,EAAcC,EAAc11F,OAH/E,CAWA,IA+BMg5F,EA/BFC,EAAiB,CAACj4F,YAAY8yB,mBAAoB9yB,YAAY8yB,oBAC9Dvd,EAAW,EAED,MAAVY,IAEH8hF,EAAe,GAAKt9F,QAAQqb,mBAAmBG,EAAQjS,GAAO,EAC5DlE,YAAY8yB,oBAKE,IAJhBvd,EAAW5a,QAAQyW,SAAS+E,EAAOpc,MAAOiG,YAAY2W,eAAgB,MAOrEygF,GADIY,EAAUr9F,QAAQ2a,eAAe,IAAI3T,YAAYy1F,EAASC,EAASC,EAAaC,GAAehiF,IACjF9T,EAClB41F,EAAUW,EAAQt2F,EAClB41F,EAAcU,EAAQ19F,MACtBi9F,EAAeS,EAAQ99F,SAIX,MAAV4W,IAEHmnF,EAAe,GAAKt9F,QAAQqb,mBAAmBlF,EAAQ5M,GAAO,EAC7DlE,YAAY8yB,oBAKG,IAJhBvd,EAAW5a,QAAQyW,SAASN,EAAO/W,MAAOiG,YAAY2W,eAAgB,MAOrE6gF,GADIQ,EAAUr9F,QAAQ2a,eAAe,IAAI3T,YAAY61F,EAASC,EAASC,EAAaC,GAAepiF,IACjF9T,EAClBg2F,EAAUO,EAAQt2F,EAClBg2F,EAAcM,EAAQ19F,MACtBq9F,EAAeK,EAAQ99F,SAiBzB,IAVA,IAAI+gD,EAAM,CAAC,EAAG,GAMV1G,EAAM,CAAE,CAAC6iD,EAASC,EAASC,EAAaC,GAChC,CAACC,EAASC,EAASC,EAAaC,IACxCp+F,EAAS,CAACq+F,EAAcC,GAEnB3gG,EAAI,EAAGA,EAAI,EAAGA,IAEtBm8F,YAAY6C,OAAOh/F,GAAG,GAAKq9C,EAAIr9C,GAAG,GAAKqC,EAAOrC,GAC9Cm8F,YAAY6C,OAAOh/F,GAAG,GAAKq9C,EAAIr9C,GAAG,GAAKqC,EAAOrC,GAC9Cm8F,YAAY6C,OAAOh/F,GAAG,GAAKq9C,EAAIr9C,GAAG,GAAKq9C,EAAIr9C,GAAG,GAAKqC,EAAOrC,GAC1Dm8F,YAAY6C,OAAOh/F,GAAG,GAAKq9C,EAAIr9C,GAAG,GAAKq9C,EAAIr9C,GAAG,GAAKqC,EAAOrC,GAI3D,IAKI0N,EALAszF,EAAa3jD,EAAI,GAAG,GAAKA,EAAI,GAAG,GAAK,EACrC4jD,EAAa5jD,EAAI,GAAG,GAAKA,EAAI,GAAG,GAAK,EACrC6jD,EAAa7jD,EAAI,GAAG,GAAKA,EAAI,GAAG,GAAK,EAIrCzvC,EAAKqzF,GAHQ5jD,EAAI,GAAG,GAAKA,EAAI,GAAG,GAAK,GAKrC39B,EAAO,GAHPhS,EAAKszF,EAAaE,GASb,EAIPxhF,EAFG9R,EAAK,EAED,EAIA,EAKJA,GAAM,IAET8R,EAAO,EAGG,GAANhS,IAEHgS,EAAO,IAQV,IAAIs+E,EAAc,KAEJ,MAAV/+E,IAEH++E,EAAcrrC,GAGf,IAAIvyC,EAAa,CAAE,CAAC,GAAK,IAAO,CAAC,GAAK,KAEtC,IAASpgB,EAAI,EAAGA,EAAI,EAAGA,IAEH,MAAfg+F,IAEH59E,EAAWpgB,GAAG,IAAMg+F,EAAYzzF,EAAI8yC,EAAIr9C,GAAG,IAAMq9C,EAAIr9C,GAAG,GAEpDuE,KAAKsX,IAAImiF,EAAYzzF,EAAI8yC,EAAIr9C,GAAG,KAAO,EAE1C+jD,EAAI/jD,GAAK8I,YAAYiX,oBAEbxb,KAAKsX,IAAImiF,EAAYzzF,EAAI8yC,EAAIr9C,GAAG,GAAKq9C,EAAIr9C,GAAG,KAAO,IAE3D+jD,EAAI/jD,GAAK8I,YAAY+W,qBAGtBO,EAAWpgB,GAAG,IAAMg+F,EAAYxzF,EAAI6yC,EAAIr9C,GAAG,IAAMq9C,EAAIr9C,GAAG,GAEpDuE,KAAKsX,IAAImiF,EAAYxzF,EAAI6yC,EAAIr9C,GAAG,KAAO,EAE1C+jD,EAAI/jD,GAAK8I,YAAY8W,qBAEbrb,KAAKsX,IAAImiF,EAAYxzF,EAAI6yC,EAAIr9C,GAAG,GAAKq9C,EAAIr9C,GAAG,KAAO,IAE3D+jD,EAAI/jD,GAAK8I,YAAYgX,uBAIvBk+E,EAAc,KAEA,MAAVpkF,IAEHokF,EAActrC,GAIhB,IAAIyuC,EAAgB9jD,EAAI,GAAG,IAAMA,EAAI,GAAG,GAAKA,EAAI,GAAG,IAChD+jD,EAAiB/jD,EAAI,GAAG,IAAMA,EAAI,GAAG,GAAKA,EAAI,GAAG,IACjDgkD,EAAmBhkD,EAAI,GAAG,IAAMA,EAAI,GAAG,GAAKA,EAAI,GAAG,IACnDikD,EAAkBjkD,EAAI,GAAG,IAAMA,EAAI,GAAG,GAAKA,EAAI,GAAG,IAEtD8+C,YAAY4C,kBAAkB,GAAKx6F,KAAKC,IAAI48F,EAAiBR,EAAa,GAC1EzE,YAAY4C,kBAAkB,GAAKx6F,KAAKC,IAAI28F,EAAgBP,EAAa,GACzEzE,YAAY4C,kBAAkB,GAAKx6F,KAAKC,IAAI68F,EAAmBT,EAAa,GAC5EzE,YAAY4C,kBAAkB,GAAKx6F,KAAKC,IAAI88F,EAAkBV,EAAa,GAQ3E,IAAIW,EAAU,GACVC,EAAU,GACVC,EAAW,GAEfD,EAAQ,GAAMJ,GAAkBE,EAAmBx4F,YAAYiX,oBAC3DjX,YAAY+W,oBAChB4hF,EAAS,GAAMN,GAAiBE,EAAoBv4F,YAAY8W,qBAC5D9W,YAAYgX,qBAEhB0hF,EAAQ,GAAK/9F,QAAQ0c,uBAAuBqhF,EAAQ,IACpDC,EAAS,GAAKh+F,QAAQ0c,uBAAuBshF,EAAS,IAEtD,IAAIC,EAAqBN,GAAkBE,EAAkBF,EACzDE,EACAK,EAAoBR,GAAiBE,EAAmBF,EACxDE,EAEAO,EAAe,CAAE,CAAC,EAAG,GAAK,CAAC,EAAG,IAC9BC,GAAoB,EAGxB,IAAS7hG,EAAI,EAAGA,EAAI,EAAGA,IAER,GAAV+jD,EAAI/jD,KAKgC,IAAnCwhG,EAAQxhG,GAAK+gG,EAAe/gG,MAEhCwhG,EAAQxhG,GAAKyD,QAAQ0c,uBAAuBqhF,EAAQxhG,KAGZ,IAApCyhG,EAASzhG,GAAK+gG,EAAe/gG,MAEjCyhG,EAASzhG,GAAKyD,QACX0c,uBAAuBshF,EAASzhG,KAGpC4hG,EAAa5hG,GAAG,GAAKyhG,EAASzhG,GAC9B4hG,EAAa5hG,GAAG,GAAKwhG,EAAQxhG,IAkD9B,IA/CI2hG,EAAoB,GACnBD,EAAqB,KAGnBF,EAAQ,GAAKT,EAAe,IAAM,IACjCU,EAAS,GAAKV,EAAe,IAAM,GAEzCa,EAAa,GAAG,GAAKJ,EAAQ,GAC7BI,EAAa,GAAG,GAAKH,EAAS,GAC9BG,EAAa,GAAG,GAAKH,EAAS,GAC9BG,EAAa,GAAG,GAAKJ,EAAQ,GAC7BK,GAAoB,IAEVJ,EAAS,GAAKV,EAAe,IAAM,IACvCS,EAAQ,GAAKT,EAAe,IAAM,IAExCa,EAAa,GAAG,GAAKH,EAAS,GAC9BG,EAAa,GAAG,GAAKJ,EAAQ,GAC7BI,EAAa,GAAG,GAAKJ,EAAQ,GAC7BI,EAAa,GAAG,GAAKH,EAAS,GAC9BI,GAAoB,IAIlBF,EAAoB,IAAME,IAE7BD,EAAa,GAAG,GAAKH,EAAS,GAC9BG,EAAa,GAAG,GAAKJ,EAAQ,GAC7BI,EAAa,GAAG,GAAKH,EAAS,GAC9BG,EAAa,GAAG,GAAKJ,EAAQ,GAC7BK,GAAoB,GAIjBH,EAAqB,IAAMG,IAE9BD,EAAa,GAAG,GAAKJ,EAAQ,GAC7BI,EAAa,GAAG,GAAKH,EAAS,GAC9BG,EAAa,GAAG,GAAKJ,EAAQ,GAC7BI,EAAa,GAAG,GAAKH,EAAS,GAC9BI,GAAoB,GAOZ7hG,EAAI,EAAGA,EAAI,EAAGA,IAER,GAAV+jD,EAAI/jD,KAKwC,IAA3C4hG,EAAa5hG,GAAG,GAAK+gG,EAAe/gG,MAExC4hG,EAAa5hG,GAAG,GAAK4hG,EAAa5hG,GAAG,IAGtCuhG,EAAQvhG,GAAK4hG,EAAa5hG,GAAG,GAAK+gG,EAAe/gG,GACjDuhG,EAAQvhG,KAAO4hG,EAAa5hG,GAAG,GAAK+gG,EAAe/gG,KAAO,EAC1DuhG,EAAQvhG,KAAO4hG,EAAa,EAAI5hG,GAAGA,GAAK+gG,EAAe/gG,KAAO,GAC9DuhG,EAAQvhG,KAAO4hG,EAAa,EAAI5hG,GAAG,EAAIA,GAAK+gG,EAAe/gG,KAAO,GAExC,IAAR,GAAbuhG,EAAQvhG,MAEZuhG,EAAQvhG,GAAKuhG,EAAQvhG,IAAM,GAGA,IAAV,KAAbuhG,EAAQvhG,MAEZuhG,EAAQvhG,GAAmB,GAAbuhG,EAAQvhG,GAAYuhG,EAAQvhG,IAAM,GAGnB,IAAZ,OAAbuhG,EAAQvhG,MAEZuhG,EAAQvhG,GAAmB,MAAbuhG,EAAQvhG,IACH,UAAbuhG,EAAQvhG,KAAmB,GAGlC+jD,EAAI/jD,GAAkB,GAAbuhG,EAAQvhG,GAEb+gG,EAAe/gG,IAAM8I,YAAYiX,qBAChCghF,EAAe/gG,IAAM8I,YAAY8W,sBACjCmhF,EAAe/gG,IAAM8I,YAAY+W,qBACjCkhF,EAAe/gG,IAAM8I,YAAYgX,uBAErCikC,EAAI/jD,GAAK+gG,EAAe/gG,KAO1B,IAAI8hG,EAAc/9C,EAAI,IAAMj7C,YAAY+W,oBAAsB,EAC1DkkC,EAAI,GACJg+C,EAAch+C,EAAI,IAAMj7C,YAAY+W,oBAAsB,EAC1DkkC,EAAI,IAER+9C,GAAepiF,GAGG,IAEjBoiF,GAAe,IAJhBC,GAAeriF,GAOG,IAEjBqiF,GAAe,GAGhB,IAAIC,EAAe7F,YAAY0C,cAAciD,EAAc,GAAGC,EAAc,GAO5E,OAHA5F,YAAYyC,WAAW,GAAG,GAAKvhD,EAAI,GAAG,GACtC8+C,YAAYyC,WAAW,GAAG,GAAKvhD,EAAI,GAAG,GAE9B0G,EAAI,IAEX,KAAKj7C,YAAYiX,oBAChBo8E,YAAYyC,WAAW,GAAG,IAAM8B,EAChCvE,YAAYyC,WAAW,GAAG,IAAMx+E,EAAW,GAAG,GAAKi9B,EAAI,GAAG,GAC1D,MACD,KAAKv0C,YAAYgX,qBAChBq8E,YAAYyC,WAAW,GAAG,IAAMx+E,EAAW,GAAG,GAAKi9B,EAAI,GAAG,GAC1D8+C,YAAYyC,WAAW,GAAG,IAAMvhD,EAAI,GAAG,GAAKqjD,EAC5C,MACD,KAAK53F,YAAY+W,oBAChBs8E,YAAYyC,WAAW,GAAG,IAAMvhD,EAAI,GAAG,GAAKqjD,EAC5CvE,YAAYyC,WAAW,GAAG,IAAMx+E,EAAW,GAAG,GAAKi9B,EAAI,GAAG,GAC1D,MACD,KAAKv0C,YAAY8W,qBAChBu8E,YAAYyC,WAAW,GAAG,IAAMx+E,EAAW,GAAG,GAAKi9B,EAAI,GAAG,GAC1D8+C,YAAYyC,WAAW,GAAG,IAAM8B,EAIlC,IAAIuB,GAAe,EAGfC,IAAmBn+C,EAAI,IAAMj7C,YAAY+W,oBAAsB/W,YAAYiX,sBAAwB,EAAI,EACvG,EACAoiF,GAAqBD,GACrBE,GAAqB,EAEzB,IAASpiG,EAAI,EAAGA,EAAIgiG,EAAa1kG,OAAQ0C,IACzC,CACC,IAAIqiG,GAAkC,GAAlBL,EAAahiG,GAI7BsiG,GAAiBD,IAAiBv5F,YAAY+W,oBAAsB,EACpEwiF,IAEJC,IAAkB5iF,GAEG,IAEpB4iF,IAAkB,GAGnB,IAAI3gD,GAAYw6C,YAAYwC,WAAW2D,GAAiB,IAExDF,GAAsBE,GAAiB,EAAI,EAAK,EAAI,IAK1BJ,KAEzBD,KAKA9F,YAAYyC,WAAWqD,IAAc,GAAK9F,YAAYyC,WAAWqD,GAAe,GAAG,GACnF9F,YAAYyC,WAAWqD,IAAc,GAAK9F,YAAYyC,WAAWqD,GAAe,GAAG,IAGpF,IAAIM,IAAOP,EAAahiG,GAAKm8F,YAAYyD,aAAe,EACpD4C,IAAOR,EAAahiG,GAAKm8F,YAAYwD,aAAe,EACpD8C,IAAQT,EAAahiG,GAAKm8F,YAAYsD,YAAc,GACxDgD,KAAe/iF,GAEJ,KAEV+iF,KAAe,GAGhB,IAAInhF,IAAU0gF,EAAahiG,GAAKm8F,YAAYuD,aAAe,EAE3D,IAAK8C,IAAOD,KAAQE,GAAO,EAC3B,CACC,IAAIC,GAAQ,EACRC,GAASH,GAAM,EAAI,EAevB,GAXCE,GAFGphF,IAAgC,GAAtB8gF,GAEL/kD,EAAIslD,IAAQ,GAAKviF,EAAWuiF,IAAQ,GAAKtlD,EAAIslD,IAAQ,GAErDrhF,GAEA+7B,EAAIslD,IAAQ,GAAKviF,EAAWuiF,IAAQ,GAAKtlD,EAAIslD,IAAQ,GAIrDxG,YAAY6C,OAAO2D,IAAQF,IAGV,GAAtBL,GACJ,CACC,IACIvhE,IAAU6hE,GADFvG,YAAYyC,WAAWqD,IAAc,IAClBtgD,GAAU,GAErC9gB,GAAS,IAEZs7D,YAAYyC,WAAWqD,IAAc,IAAMtgD,GAAU,GACjD9gB,QAIN,CACC,IACID,IAAU8hE,GADFvG,YAAYyC,WAAWqD,IAAc,IAClBtgD,GAAU,GAErC/gB,GAAS,IAEZu7D,YAAYyC,WAAWqD,IAAc,IAAMtgD,GAAU,GACjD/gB,UAKEtf,KAGR66E,YAAYyC,WAAWqD,IAAc,IAAMtgD,GAAU,GACjDp9C,KAAKsX,IAAIsgF,YAAY4C,kBAAkBuD,IAAkB,GAC7DnG,YAAYyC,WAAWqD,IAAc,IAAMtgD,GAAU,GACjDp9C,KAAKsX,IAAIsgF,YAAY4C,kBAAkBuD,IAAkB,IAG1DL,GAAe,GACd9F,YAAYyC,WAAWqD,IAAcG,KAAuBjG,YAAYyC,WAAWqD,GAAe,GAAGG,IAEzGH,KAIAC,GAAkBE,GAIpB,IAASpiG,EAAI,EAAGA,GAAKiiG,KAEhBjiG,GAAKiiG,OASiBl+C,EAAI,IAAMj7C,YAAY+W,oBAAsB/W,YAAYiX,sBAAwB,EAAI,EACzG,IACkCoiF,GAAqB,EAAI,KAI5CF,GAAe,GAAK,GAjBNjiG,IAwBlC8H,EAAOC,KAAK,IAAIuC,QAAQ/F,KAAK2c,MAAMi7E,YAAYyC,WAAW5+F,GAAG,GAAKgN,EAAM0V,KAAKjV,MAAQ,IAAM,GACrFlJ,KAAK2c,MAAMi7E,YAAYyC,WAAW5+F,GAAG,GAAKgN,EAAM0V,KAAKjV,MAAQ,IAAM,KAQ1E,IAFA,IAAI7D,GAAQ,EAELA,GAAQ9B,EAAOxK,QAEI,MAArBwK,EAAO8B,GAAQ,IAA+B,MAAjB9B,EAAO8B,KACvC9B,EAAO8B,GAAQ,GAAGW,GAAKzC,EAAO8B,IAAOW,GACrCzC,EAAO8B,GAAQ,GAAGY,GAAK1C,EAAO8B,IAAOY,EAErCZ,KAIA9B,EAAOyJ,OAAO3H,GAAO,KAKxBg5F,gBAAiB,SAAS7+C,EAAKrkC,EAAMhS,EAAIE,GAExC,IAAIk0F,EAAc/9C,EAAI,IAAMj7C,YAAY+W,oBAAsB,EAC1DkkC,EAAI,GACJg+C,EAAch+C,EAAI,IAAMj7C,YAAY+W,oBAAsB,EAC1DkkC,EAAI,IAER+9C,GAAepiF,GAGG,IAEjBoiF,GAAe,IAJhBC,GAAeriF,GAMG,IAEjBqiF,GAAe,GAGhB,IAAIj6F,EAAS+2F,cAAciD,EAAc,GAAGC,EAAc,GAU1D,OARU,GAANr0F,GAAiB,GAANE,GAE+C,MAAzDkxF,oBAAoBgD,EAAc,GAAGC,EAAc,KAEtDj6F,EAASg3F,oBAAoBgD,EAAc,GAAGC,EAAc,IAIvDj6F,IAGT1M,WAAW+gG,iBAAqC,IAAhBA,YAA8BA,iBAAcp6F,EAM5E,IAAI8gG,gBACJ,CAWChK,OAAQ,GAORiK,SAAU,SAAS5nG,EAAM+L,GAExB47F,gBAAgBhK,OAAO39F,GAAQ+L,GAQhCiT,SAAU,SAAShf,GAElB,OAAO2nG,gBAAgBhK,OAAO39F,IAQ/BiiC,QAAS,SAASj6B,GAEjB,IAAK,IAAIuE,KAAOo7F,gBAAgBhK,OAE/B,GAAIgK,gBAAgBhK,OAAOpxF,IAAQvE,EAElC,OAAOuE,EAIT,OAAO,OA2ET,SAASs7F,YAAY32F,GAEpBjR,KAAKiR,MAAQA,EACbjR,KAAK2uB,UAAY,IAAIxf,QACrBnP,KAAKyvB,YAAc,IAAIngB,YACvBtP,KAAKujD,OAAS,IAAIp3C,aAq1FnB,SAAS07F,oBAAoBtgF,EAAMu2B,GAOlC,GALA99C,KAAKunB,KAAOA,EACZvnB,KAAK89C,KAAOA,EACZ99C,KAAKwM,SAAWsxC,EAChB99C,KAAK8nG,KAAe,MAARhqD,GAEP99C,KAAK8nG,KAKT,IAHA,IAAIj3F,EAAM7Q,KAAKunB,KAAK0lD,YAChB/6D,EAAQlS,KAAKunB,KAAKtW,MAAM8c,WAEd,MAAPld,GACP,CACC,GAAIA,GAAOitC,EACX,CACC99C,KAAK8nG,MAAO,EACZ,MAGDj3F,EAAMqB,EAAM+vC,UAAUpxC,IAoqBzB,SAASk3F,QAAQpgF,EAAWzV,EAAO81F,EAAYC,GAM9CjoG,KAAKkoG,eAAiB,KAGtBloG,KAAKgoG,WAAaA,EAEd9nG,SAAS+C,OAEZjD,KAAKsuB,QAAU3gB,YAAY4gB,YAEnBy5E,GAAcr6F,YAAYslB,sBAAwB/yB,SAAS4C,OAEnE9C,KAAKsuB,QAAU3gB,YAAYylB,YAEnB40E,GAAcr6F,YAAYwlB,uBAElCnzB,KAAKsuB,QAAU3gB,YAAY4lB,mBAEnBy0E,GAAcr6F,YAAYulB,sBAElClzB,KAAKsuB,QAAU3gB,YAAY2lB,mBAI3BtzB,KAAKsuB,QAAU3gB,YAAY0lB,kBAI5BrzB,KAAKkS,MAAkB,MAATA,EAAiBA,EAAQ,IAAIi0E,aAC3CnmF,KAAKmoG,eAAiB,GACtBnoG,KAAKooG,aAAe,GACpBpoG,KAAK4S,aAAe5S,KAAKqoG,qBACzBroG,KAAKsoG,kBAAkBtoG,KAAKuoG,wBAC5BvoG,KAAKwoG,cAA6B,MAAdP,EAAsBA,EAAajoG,KAAKyoG,oBAC5DzoG,KAAKunB,KAAOvnB,KAAK0oG,kBAGjB1oG,KAAK2oG,yBAA2BrgG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAEnEnI,KAAKg9C,kBAAkB70C,EAAI+5B,YAAY,QAAQhxB,YAGhDlR,KAAKkS,MAAMlI,YAAYC,QAAQugC,OAAQxqC,KAAK2oG,0BAG5C3oG,KAAK4oG,iBAGY,MAAbjhF,GAEH3nB,KAAKmH,KAAKwgB,GAGX3nB,KAAKunB,KAAKshF,aAkpYX,SAASC,cAAcz1D,EAAO01D,EAAS38E,EAAOzkB,EAAeiV,EAAQxI,GAEpEpU,KAAKqzC,MAAQA,EACbrzC,KAAK+oG,QAAUA,EACf/oG,KAAKosB,MAAkB,MAATA,EAAiBA,EAAQpsB,KAAKosB,MAC5CpsB,KAAK2H,cAAkC,MAAjBA,EAAyBA,EAAgB3H,KAAK2H,cACpE3H,KAAK4c,OAAoB,MAAVA,EAAkBA,EAAS,IAAIzN,QAC9CnP,KAAKoU,OAAoB,MAAVA,EAAkBA,EAAS,OAmO3C,SAAS40F,UAAUllF,EAAQ6D,GAE1B3nB,KAAK8jB,OAASA,EAEG,MAAb6D,GAEH3nB,KAAKmH,KAAKwgB,GA+uBZ,SAASshF,eAAenlF,EAAQxd,EAAMkP,EAAMzN,EAAOgI,EAAK1G,EACvD6/F,EAAgBC,EAAYC,EAAWC,GAEvCrpG,KAAK8jB,OAASA,EACd9jB,KAAKsG,KAAOA,EACZtG,KAAKwV,KAAOA,EACZxV,KAAK+H,MAAQA,EACb/H,KAAK+P,IAAc,MAAPA,EAAeA,EAAM,EACjC/P,KAAKqJ,IAAc,MAAPA,EAAeA,EAAM,IACjCrJ,KAAKkpG,eAAiBA,EACtBlpG,KAAKmpG,WAAarkG,YAAY+G,IAAIs9F,IAAeA,EACjDnpG,KAAKopG,UAAYtkG,YAAY+G,IAAIu9F,IAAcA,EAC/CppG,KAAKqpG,sBAAkD,MAAzBA,GAC7BA,EA0OF,SAASC,gBAAgBr4F,GAGxBjR,KAAKupG,YAAcjhG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAElDnI,KAAK2T,aAER3T,KAAKwpG,WAAWrhG,EAAI+5B,YAAY,YAKlCliC,KAAKypG,YAAcnhG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAElDnI,KAAK2T,aAER3T,KAAK0pG,WAAWvhG,EAAI+5B,YAAY,SAAU/5B,EAAI+5B,YAAY,aAK5DliC,KAAK6J,cAAgBvB,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAEpDnI,KAAK2T,aAER3T,KAAK2pG,aAAaxhG,EAAI+5B,YAAY,SAAU/5B,EAAI+5B,YAAY,UAC3D/5B,EAAI+5B,YAAY,gBAInBliC,KAAKi9C,SAAShsC,GAmdf,SAAS24F,kBAAkB34F,EAAOmgD,EAAYy4C,EAAYC,GAEzD9pG,KAAKoxD,WAA4B,MAAdA,GAAsBA,EACzCpxD,KAAK6pG,WAA4B,MAAdA,GAAsBA,EACzC7pG,KAAK8pG,cAAkC,MAAjBA,GAAyBA,EAE/C9pG,KAAK+pG,WAAazhG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAEjDnI,KAAK2T,aAAe3T,KAAKgqG,gBAE5BhqG,KAAKiqG,WAAW9hG,EAAI+5B,YAAY,aAIlCliC,KAAK6J,cAAgBvB,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAEpDnI,KAAK2T,aAAe3T,KAAKkqG,mBAE5BlqG,KAAK2pG,aAAaxhG,EAAI+5B,YAAY,aAIpCliC,KAAKi9C,SAAShsC,GAoaf,SAAS6d,sBAAsBvH,EAAMjV,EAAO6X,EAAOggF,EAAiBrnD,GAEnExwC,EAAkB,MAATA,EAAiBA,EAAQ,EAClCtS,KAAKunB,KAAOA,EAGZvnB,KAAKoqG,qBAAuB7iF,EAAK8iF,kBACjCrqG,KAAKsqG,UAAY/iF,EAAKmI,iBACtB1vB,KAAKuqG,UAAYhjF,EAAKijF,YACtBxqG,KAAKyqG,SAAWljF,EAAKqI,WACrB5vB,KAAK0qG,iBAAmBnjF,EAAKtW,MAAM2B,aAAamuF,cAEhD,IAAI4J,EAAO3qG,KA8CX,GA3C2B,MAAvB8iD,IAEHv7B,EAAKtW,MAAM2B,aAAamuF,cAAgB,SAASlvF,GAEhD,IAAI+4F,EAAW/4F,EAAMQ,MAAM+wC,MAE3BvxC,EAAMQ,MAAM+wC,MAAQ,SAASn0C,GAE5B,IAAIjL,EAAO8+C,EAAoBjxC,GAEnB,MAAR7N,GAEHiL,EAAE8zC,QAAQ/+C,GAGX4mG,EAASx/F,MAAMpL,KAAMqL,WAET,MAARrH,GAEHiL,EAAE8zC,QAAQ,OAIZ4nD,EAAKD,iBAAiBt/F,MAAMmc,EAAKtW,MAAM2B,aAAcvH,WACrDwG,EAAMQ,MAAM+wC,MAAQwnD,IAKtBrjF,EAAK8iF,kBAAoB,SAASr4F,EAAM64F,GAEvC,OAAY,MAAR74F,GAAmC,MAAnBm4F,GAA2BA,EAAgBn4F,GAEvD24F,EAAKP,qBAAqBh/F,MAAMmc,EAAMlc,WAGvC,MAIRkc,EAAK0mC,UAAU,IAAI9hD,cACnBob,EAAKujF,SAASx4F,GAED,MAAT6X,EACJ,CACC5C,EAAKwjF,uBAKL,IAJA,IAAIl9C,EAAO,KAIFhpD,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CACC,IAAI4hB,EAASc,EAAKtE,eAAesE,EAAK8iF,kBAAkB9iF,EAAKyjF,aAAa7gF,EAAMtlB,MAEpE,MAARgpD,EAEHA,EAAOpnC,EAIPonC,EAAK9oD,IAAI0hB,GAIXc,EAAK0jF,eAAep9C,GAAQ,IAAIv+C,cAkElC,SAASmyC,mBAAmBxwC,GAE3BjR,KAAKkrG,OAAS,IAAI/+F,aAClBnM,KAAKiR,MAAQA,EA+Md,SAASwoD,uBAAuBrzC,EAAOozC,EAAWz5D,EAAMwS,EAAIE,GAE3DzS,KAAKomB,MAAQA,EACbpmB,KAAKw5D,UAA0B,MAAbA,GAAqBA,EACvCx5D,KAAKD,KAAOA,EACZC,KAAKuS,GAAKA,GAAS,EACnBvS,KAAKyS,GAAKA,GAAS,EAkEpB,SAAS04F,eAAel6F,GAEvBjR,KAAKiR,MAAQA,EACbjR,KAAKiR,MAAMgrC,iBAAiBj8C,MAG5BA,KAAKorG,WAAa9iG,QAAQ2M,KAAKjV,MAAM,WAE/BA,KAAKqrG,YAETrrG,KAAKsrG,gBACLtrG,KAAKurG,iBAIPvrG,KAAKiR,MAAMjH,YAAYC,QAAQi+B,IAAKloC,KAAKorG,YAGzCprG,KAAKwrG,cAAgBljG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAExDnI,KAAKk2C,WAGNl2C,KAAKiR,MAAMjH,YAAYC,QAAQgjC,OAAQjtC,KAAKwrG,eAG5CxrG,KAAKyrG,eAAiBnjG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAGzD3G,OAAOuR,WAAWzK,QAAQ2M,KAAKjV,MAAM,WAEpC,GAAkB,MAAdA,KAAKs/F,QAAkBt/F,KAAKqrG,UAChC,CAEC,IAAI94F,EAAKvS,KAAK0rG,UACVj5F,EAAKzS,KAAK2rG,UACd3rG,KAAK0rG,UAAY,EACjB1rG,KAAK2rG,UAAY,EACjB3rG,KAAKsrG,gBACLtrG,KAAKymB,OAASzmB,KAAKiR,MAAMa,UAAUsuF,UAAUpgG,KAAKmqB,OAClDnqB,KAAK4rG,QAAU5rG,KAAK6rG,iBAAiB7rG,KAAKmqB,OAEtB,MAAhBnqB,KAAK4rG,QAER5rG,KAAKk2C,SAKLl2C,KAAK0rG,UAAYn5F,EACjBvS,KAAK2rG,UAAYl5F,EACjBzS,KAAKsrG,gBACLtrG,KAAKurG,aAEDvrG,KAAK8rG,iBAER9rG,KAAK+rG,0BAA0B/rG,KAAKiR,MAAM49B,qBAAqB,QAI/D,MAGL7uC,KAAKiR,MAAM8c,WAAW/jB,YAAYC,QAAQugC,OAAQxqC,KAAKyrG,gBAEvDzrG,KAAKgsG,WAAa1jG,QAAQ2M,KAAKjV,MAAM,SAASoO,GAE7C,GAA4B,MAAxBpO,KAAKiR,MAAM0W,WAA8D,UAAzC3nB,KAAKiR,MAAM0W,UAAUjgB,MAAM6D,YAChD,MAAdvL,KAAKs/F,QAAkBt/F,KAAKqrG,UAC7B,CACC,IAAI57F,EAAQzP,KAAKiR,MAAMg7F,aAAa79F,IACnCpO,KAAKiR,MAAMi7F,oBACXlsG,KAAKmsG,iBAEF18F,GAASzP,KAAKosG,UAEjBpsG,KAAKosG,QAAU38F,EACfzP,KAAKqsG,eACLrsG,KAAKsrG,qBAKRrhG,QAAQD,YAAYnJ,SAAU,UAAWb,KAAKgsG,YAC9C/hG,QAAQD,YAAYnJ,SAAU,QAASb,KAAKgsG,YAolD7C,SAASM,iBAAiBr7F,GAEZ,MAATA,IAEHjR,KAAKiR,MAAQA,EACbjR,KAAKiR,MAAMgrC,iBAAiBj8C,MAG5BA,KAAKusG,oBAAsBjkG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAE9D,IAAIwoC,EAAUxoC,EAAI+5B,YAAY,aAC1B0O,EAAKzoC,EAAI+5B,YAAY,SAErByO,GAAW1mC,QAAQg7B,YAAcjlC,KAAKwsG,oBAAoB57D,KAE7D5wC,KAAKqnB,MAAMupB,GACX5wC,KAAKy7C,QAAS,EACdz7C,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQg+B,UAAW,QAAS2I,IAC7DA,EAAGxO,cAILpiC,KAAKiR,MAAMjH,YAAYC,QAAQ4+B,iBAAkB7oC,KAAKusG,qBAGtDvsG,KAAKysG,eAAiBnkG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ4iG,GAEzD,GAAI1sG,KAAK2sG,iBACT,CACC,IAAIxkG,EAAMukG,EAAGxqE,YAAY,SAEpBj4B,QAAQk4B,WAAWh6B,IAAoB,gBAAZA,EAAI7B,KAWf,cAAZ6B,EAAI7B,MAA6C,MAArBtG,KAAK4sG,eAEzC5sG,KAAK4sG,aAAe,OAXpB5sG,KAAK4sG,aAAe5sG,KAAKiR,MAAMsW,KAAKjV,MAG/BtS,KAAKy7C,QAAiC,MAAvBz7C,KAAK6sG,iBAExB7sG,KAAKqnB,MAAMrnB,KAAK6sG,gBAChB7sG,KAAK6sG,eAAiB,OAQC,MAArB7sG,KAAK4sG,cAER5sG,KAAK8sG,UAAU3kG,OAKlBnI,KAAKiR,MAAMjH,YAAYC,QAAQ6+B,QAAS9oC,KAAKysG,gBAE7CzsG,KAAKk8C,gBAAkB5zC,QAAQ2M,KAAKjV,MAAM,WAElCA,KAAKy7C,QAERz7C,KAAKk2C,WAKVjsC,QAAQD,YAAYnJ,SAAU,UAAWb,KAAKk8C,kBA6ZhD,SAAS6wD,mBAAmB97F,EAAO0nC,GAErB,MAAT1nC,IAEHjR,KAAKiR,MAAQA,EACbjR,KAAK24C,cAAgBA,EACrB34C,KAAKiR,MAAMgrC,iBAAiBj8C,MAG5BA,KAAKysG,eAAiBnkG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ4iG,GAEzD1sG,KAAKgtG,aAAc,KAGpBhtG,KAAKiR,MAAMjH,YAAYC,QAAQ6+B,QAAS9oC,KAAKysG,gBAE7CzsG,KAAKmH,QA4OP,SAAS8lG,aAAah8F,EAAOi8F,EAAYC,EAAchmF,GAEtDya,cAAcryB,KAAKvP,MAEN,MAATiR,IAEHjR,KAAKiR,MAAQA,EACbjR,KAAKktG,WAA4B,MAAdA,EAAsBA,EAAav/F,YAAY2mB,oBAClEt0B,KAAKmtG,aAAgC,MAAhBA,EAAwBA,EAAex/F,YAAY4mB,sBACxEv0B,KAAKmnB,QAAsB,MAAXA,EAAmBA,EAAUxZ,YAAYmlB,gBAEzD9yB,KAAK83C,UAAY,IAAIP,gBAAgBtmC,IAoZvC,SAASm8F,wBAAwBn8F,GAEhC2wB,cAAcryB,KAAKvP,MAEnBA,KAAKiR,MAAQA,EACbjR,KAAKqtG,SAAW,IAAIlhG,aACpBnM,KAAKiR,MAAMgrC,iBAAiBj8C,MAE5BA,KAAKyrG,eAAiBnjG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAErDnI,KAAK2T,aAER3T,KAAKstG,aAIPttG,KAAKiR,MAAMs8F,oBAAoBvjG,YAAYC,QAAQugC,OAAQxqC,KAAKyrG,gBAChEzrG,KAAKiR,MAAM8c,WAAW/jB,YAAYC,QAAQugC,OAAQxqC,KAAKyrG,gBACvDzrG,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ2gC,MAAO5qC,KAAKyrG,gBACrDzrG,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ4gC,UAAW7qC,KAAKyrG,gBACzDzrG,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ6gC,oBAAqB9qC,KAAKyrG,gBACnEzrG,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ+gC,KAAMhrC,KAAKyrG,gBACpDzrG,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ8gC,GAAI/qC,KAAKyrG,gBAsanD,SAAS+B,oBAAoBv8F,EAAO0nC,GAEnC/W,cAAcryB,KAAKvP,MAEN,MAATiR,IAEHjR,KAAKiR,MAAQA,EACbjR,KAAK24C,cAAgBA,EACrB34C,KAAKmH,OAGLnH,KAAKwrG,cAAgBljG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAExDnI,KAAKk2C,WAGNl2C,KAAKiR,MAAMjH,YAAYC,QAAQgjC,OAAQjtC,KAAKwrG,gBAijE9C,SAASiC,oBAAoBx8F,GAE5BjR,KAAKiR,MAAQA,EAGbjR,KAAK0tG,aAAeplG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAE9B,MAArBnI,KAAK2tG,cAA4E,MAApD3tG,KAAKiR,MAAMsW,KAAKxV,SAAS/R,KAAK2tG,aAAa37F,MAE3EhS,KAAKk2C,QAILl2C,KAAK6S,YAIP7S,KAAKiR,MAAMiB,MAAMlI,YAAYC,QAAQugC,OAAQxqC,KAAK0tG,cAClD1tG,KAAKiR,MAAMsW,KAAKvd,YAAYC,QAAQ6gC,oBAAqB9qC,KAAK0tG,cAC9D1tG,KAAKiR,MAAMsW,KAAKvd,YAAYC,QAAQ4gC,UAAW7qC,KAAK0tG,cACpD1tG,KAAKiR,MAAMsW,KAAKvd,YAAYC,QAAQ2gC,MAAO5qC,KAAK0tG,cAChD1tG,KAAKiR,MAAMjH,YAAYC,QAAQs/B,KAAMvpC,KAAK0tG,cAkf3C,SAASE,aAAa38F,GAER,MAATA,IAEHjR,KAAKiR,MAAQA,EACbjR,KAAKiR,MAAMgrC,iBAAiBj8C,MAG5BA,KAAK6tG,uBAAyBvlG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAEjE,IAAIwoC,EAAUxoC,EAAI+5B,YAAY,aAC1B0O,EAAKzoC,EAAI+5B,YAAY,SAEzB,GAAIyO,GAAW1mC,QAAQg7B,YAAcjlC,KAAK8tG,uBAAuBl9D,GACjE,CACC,IAAIh0B,EAAStU,QAAQof,UAAU1nB,KAAKiR,MAAM0W,WACtCe,EAASpgB,QAAQigB,gBAAgBvoB,KAAKiR,MAAM0W,WAChDe,EAAOtZ,GAAKwN,EAAOxN,EACnBsZ,EAAOrZ,GAAKuN,EAAOvN,EACnBrP,KAAKqnB,MAAMupB,EAAGlO,OAASha,EAAOtZ,EAAGwhC,EAAGhO,OAASla,EAAOrZ,GACpDuhC,EAAGxO,SAAQ,OAIbpiC,KAAKiR,MAAMjH,YAAYC,QAAQ4+B,iBAAkB7oC,KAAK6tG,wBAGtD7tG,KAAKorG,WAAa9iG,QAAQ2M,KAAKjV,MAAM,WAEpCA,KAAK+tG,aAGN/tG,KAAKiR,MAAMjH,YAAYC,QAAQi+B,IAAKloC,KAAKorG,YAGzCprG,KAAKysG,eAAiBnkG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ4iG,GAEvC,MAAd1sG,KAAKs/F,OAERt/F,KAAKk2C,WAIPl2C,KAAKiR,MAAMjH,YAAYC,QAAQ6+B,QAAS9oC,KAAKysG,gBAGzCvsG,SAASE,OAEZ6J,QAAQD,YAAYxI,OAAQ,SAC3B8G,QAAQ2M,KAAKjV,MAAM,WAElBA,KAAKivB,eAyXV,SAAS++E,SAASn8F,EAAOuC,EAAQi/B,GAEhCrzC,KAAKiR,MAAQY,EAAM0V,KAAKtW,MACxBjR,KAAK6R,MAAQA,EACb7R,KAAKoU,OAAoB,MAAVA,EAAkBA,EAASpU,KAAKoU,OAC/CpU,KAAKqzC,MAAkB,MAATA,EAAiBA,EAAQrzC,KAAKqzC,MAC5CrzC,KAAKmH,OA8VN,SAAS8mG,gBAAgBp8F,GAEX,MAATA,IAEH7R,KAAK6R,MAAQA,EACb7R,KAAKmH,OAGLnH,KAAKwrG,cAAgBljG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAEpDnI,KAAKkuG,aAA6B,MAAdluG,KAAKyO,QAG5BzO,KAAK6R,MAAM0V,KAAKtW,MAAM2B,aAAaC,OAAO7S,KAAK6R,OAAO,GAGtD7R,KAAK6R,MAAM0V,KAAK4mF,WAAWnuG,KAAK6R,MAAMG,MACtChS,KAAK6R,MAAMolF,SAAU,EACrBj3F,KAAK6R,MAAM0V,KAAK6mF,YAGjBpuG,KAAKk2C,WAGNl2C,KAAK6R,MAAM0V,KAAKtW,MAAMjH,YAAYC,QAAQgjC,OAAQjtC,KAAKwrG,gBAygEzD,SAAS6C,cAAcx8F,GAET,MAATA,IAEH7R,KAAK6R,MAAQA,EACb7R,KAAKmH,OAGLnH,KAAKwrG,cAAgBljG,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAExD,IAAImmG,EAAsB,MAAdtuG,KAAKyO,MACjBzO,KAAKk2C,QAEDo4D,GAEHtuG,KAAKiR,MAAM2B,aAAaC,OAAO7S,KAAK6R,OAAO,EAAOA,EAAM0V,KAAKgnF,kBAI/DvuG,KAAK6R,MAAM0V,KAAKtW,MAAMjH,YAAYC,QAAQgjC,OAAQjtC,KAAKwrG,gBAq6EzD,SAASgD,mBAAmB38F,GAE3Bw8F,cAAc9+F,KAAKvP,KAAM6R,GAuN1B,SAAS48F,qBAAqB58F,GAE7Bw8F,cAAc9+F,KAAKvP,KAAM6R,GA2d1B,SAAS68F,aAAaz9F,EAAOwN,GAEf,MAATxN,IAEHjR,KAAKiR,MAAQA,EACbjR,KAAKye,OAASA,GAAU5d,SAAS2C,gBAGjCxD,KAAK2uG,WAAa,GAClB3uG,KAAK4uG,UAAY,GACjB5uG,KAAK6uG,YAAc,GACnB7uG,KAAK8uG,iBAAmB,GAExB9uG,KAAK+uG,eAAiBzmG,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEjDnI,KAAKgvG,QAAQ7mG,MAId8B,QAAQD,YAAYhK,KAAKye,OAAQ,UAAWze,KAAK+uG,gBAG7C7uG,SAASE,OAEZ6J,QAAQD,YAAYxI,OAAQ,SAC3B8G,QAAQ2M,KAAKjV,MAAM,WAElBA,KAAKivB,eA+WV,SAASggF,iBAAiBh+F,EAAO+B,GAEnB,MAAT/B,IAEHjR,KAAKiR,MAAQA,EACbjR,KAAKgT,MAAQA,GAAS,IACtBhT,KAAKiR,MAAMgrC,iBAAiBj8C,OAuY9B,SAASkvG,cAAcj+F,EAAOgL,EAAO1R,GAEpC0iG,aAAa19F,KAAKvP,KAAMiR,EAAOgL,GAE/Bjc,KAAKiR,MAAMgrC,iBAAiBj8C,MAEf,MAATuK,IAEHvK,KAAKgjC,QAAUz4B,GAIZrK,SAASE,OAEZ6J,QAAQD,YAAYxI,OAAQ,SAAU8G,QAAQ2M,KAAKjV,MAAM,WAExDA,KAAKivB,cA4ER,SAASsoB,gBAAgBtmC,EAAOk+F,EAAgBzqD,EAAaC,GAE/C,MAAT1zC,IAEHjR,KAAKiR,MAAQA,EACbjR,KAAKmvG,eAAoC,MAAlBA,EAA0BA,EAAiBxhG,YAAY2mB,oBAC9Et0B,KAAK0kD,YAA8B,MAAfA,EAAuBA,EAAc/2C,YAAY+mB,sBACrE10B,KAAK2kD,OAAoB,MAAVA,GAAkBA,EACjC3kD,KAAKiT,QAAUtF,YAAYinB,kBAG3B50B,KAAKovG,eAAiB9mG,QAAQ2M,KAAKjV,MAAM,WAGxC,GAAkB,MAAdA,KAAK6R,MACT,CACC,IAAIhB,EAAM7Q,KAAKiR,MAAMsW,KAAKxV,SAAS/R,KAAK6R,MAAMG,MAEnC,MAAPnB,EAEH7Q,KAAK4xC,QAIL5xC,KAAK6R,MAAQhB,EACb7Q,KAAK+tG,eAKR/tG,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ2gC,MAAO5qC,KAAKovG,gBACrDpvG,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ4gC,UAAW7qC,KAAKovG,gBACzDpvG,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ6gC,oBAAqB9qC,KAAKovG,gBACnEpvG,KAAKiR,MAAM8c,WAAW/jB,YAAYC,QAAQugC,OAAQxqC,KAAKovG,gBAGvDpvG,KAAK0tG,aAAeplG,QAAQ2M,KAAKjV,MAAM,WAEtCA,KAAK4xC,UAGN5xC,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ+gC,KAAMhrC,KAAK0tG,cACpD1tG,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ8gC,GAAI/qC,KAAK0tG,eA8SpD,SAAS2B,oBAAoB5zF,GAE5B,GAAc,MAAVA,EACJ,CACCzb,KAAKyb,OAASA,EACdzb,KAAKsvG,QAAU,IAAIZ,aAAajzF,EAAOxK,OAKvC,IAAI+8B,EAAMhuC,KAAKsvG,QAAQC,OAEvBvvG,KAAKsvG,QAAQC,OAAS,SAASpnG,GAE9B6lC,EAAI5iC,MAAMpL,KAAMqL,WAChBoQ,EAAO+zF,iBACP/zF,EAAO+nB,UAAU,IAAIhC,cAAcv3B,QAAQgjC,OAAQ,QAAS9kC,MAoG/D,SAASsnG,mBAAmBC,GAE3B1vG,KAAK0vG,OAASA,EA4Tf,SAASC,iBAAiBhoF,EAAWlM,GAEpCzb,KAAKyb,OAASA,EAEG,MAAbkM,GAA+B,MAAVlM,GAExBzb,KAAKmH,KAAKwgB,GAm2BZ,SAASioF,SAASF,GAEjB1vG,KAAK6vG,QAAU,GACf7vG,KAAK8vG,aAIgB,MAAjBjvG,SAASuG,OAGZpH,KAAK+vG,qBAAuB,GAC5B/vG,KAAKgwG,aAAe,IAAIP,mBACxBzvG,KAAKiwG,YAAc,IAAIj/D,cAGvBhxC,KAAKiR,MAAQjR,KAAKkwG,cAClBlwG,KAAKmwG,QAAUnwG,KAAKowG,gBAGpBpwG,KAAKgsG,WAAa,IAAIqD,oBAAoBrvG,MAI1CA,KAAKqwG,UAAUX,GAGf1vG,KAAKiR,MAAM6sF,gCAAkC99F,KAAKswG,mBAG/B,MAAftwG,KAAK8mF,QAGR9mF,KAAK8mF,SAIF5mF,SAASE,OAEZ6J,QAAQD,YAAYxI,OAAQ,SAAU8G,QAAQ2M,KAAKjV,MAAM,WAExDA,KAAKivB,eAlihCTy4E,gBAAgBC,SAASh6F,YAAYizB,gBAAiBogE,YAAYe,gBAClE2F,gBAAgBC,SAASh6F,YAAYkzB,0BAA2BmgE,YAAYC,gBAC5EyG,gBAAgBC,SAASh6F,YAAYmzB,eAAgBkgE,YAAYY,MACjE8F,gBAAgBC,SAASh6F,YAAYozB,qBAAsBigE,YAAYgB,YACvE0F,gBAAgBC,SAASh6F,YAAYqzB,sBAAuBggE,YAAYiB,aACxEyF,gBAAgBC,SAASh6F,YAAYszB,qBAAsB+/D,YAAY4D,eACvE8C,gBAAgBC,SAASh6F,YAAYuzB,kBAAmB8/D,YAAYkB,kBAEpEwF,gBAAgBC,SAASh6F,YAAYwzB,kBAAmBuvD,YAAYM,kBACpE0W,gBAAgBC,SAASh6F,YAAYyzB,oBAAqBsvD,YAAYC,oBACtE+W,gBAAgBC,SAASh6F,YAAY0zB,kBAAmBqvD,YAAYe,kBACpEiW,gBAAgBC,SAASh6F,YAAY4zB,mBAAoBmvD,YAAYgB,mBACrEgW,gBAAgBC,SAASh6F,YAAY2zB,kBAAmBovD,YAAYkB,kBAEpE3xF,WAAWynG,qBAA6C,IAApBA,gBAAkCA,qBAAkB9gG,EAmExFghG,YAAYx7F,UAAY,IAAIw1B,cAC5BgmE,YAAYx7F,UAAUH,YAAc27F,YAKpCA,YAAYx7F,UAAUmkG,YAAc,IAAIphG,QASxCy4F,YAAYx7F,UAAU+rF,aAAqC,QAArBj4F,SAAS4F,SAAsB,OAAS,GAS9E8hG,YAAYx7F,UAAUokG,yBAAiD,QAArBtwG,SAAS4F,SAAsB,mBAAqB,GAUtG8hG,YAAYx7F,UAAU4sD,WAAY,EAQlC4uC,YAAYx7F,UAAUqkG,wBAAyB,EAS/C7I,YAAYx7F,UAAUskG,oBAAqB,EAQ3C9I,YAAYx7F,UAAUmqF,WAAY,EAOlCqR,YAAYx7F,UAAU6E,MAAQ,KAO9B22F,YAAYx7F,UAAU6gE,YAAc,KAOpC26B,YAAYx7F,UAAUqjB,YAAc,KAOpCm4E,YAAYx7F,UAAUkG,MAAQ,EAQ9Bs1F,YAAYx7F,UAAUuiB,UAAY,KAOlCi5E,YAAYx7F,UAAUm3C,OAAS,KAS/BqkD,YAAYx7F,UAAUukG,aAAc,EAOpC/I,YAAYx7F,UAAUwkG,SAAW,KAOjChJ,YAAYx7F,UAAUykG,aAAe,KAOrCjJ,YAAYx7F,UAAU0kG,mBAAqB,KAO3ClJ,YAAYx7F,UAAU2kG,uBAAyB,KAO/CnJ,YAAYx7F,UAAUsjB,eAAiB,WAEtC,OAAO1vB,KAAKyvB,aAQbm4E,YAAYx7F,UAAU6+F,eAAiB,SAASljG,GAE/C/H,KAAKyvB,YAAc1nB,GAYpB6/F,YAAYx7F,UAAUg0F,UAAY,SAASj2E,GAE1C,IAAIxd,EAAS,KAEb,GAAa,MAATwd,GAAiBA,EAAMhoB,OAAS,EAInC,IAFA,IAAI+P,EAAQlS,KAAKiR,MAAM8c,WAEdlpB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC,GAAIqN,EAAM2vC,SAAS13B,EAAMtlB,KAAOqN,EAAMC,OAAOgY,EAAMtlB,IACnD,CACC,IAAIgN,EAAQ7R,KAAK+R,SAASoY,EAAMtlB,IAEnB,MAATgN,IAEW,MAAVlF,EAEHA,EAAS2C,YAAYwB,cAAce,GAInClF,EAAO5H,IAAI8M,IAOhB,OAAOlF,GAaRi7F,YAAYx7F,UAAU4kG,eAAiB,SAASlzD,GAE/C,GAAI99C,KAAKitE,aAAenvB,EACxB,CACC,IAAIvsC,EAAS,IAAIs2F,oBAAoB7nG,KAAM89C,GAC3CvsC,EAAOqK,UACP,IAAIo/B,EAAO,IAAIlK,eAAe9wC,MAAM,GACpCg7C,EAAKj2C,IAAIwM,GACTvR,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQqgC,KAAM,OAAQ0Q,IACvDh7C,KAAKiR,MAAMggG,gBAGZ,OAAOnzD,GAeR8pD,YAAYx7F,UAAU8kG,kBAAoB,SAAS5+F,EAAOC,EAAIE,GAE7D,IAAI0+F,EAAgBnxG,KAAKsS,MACrB8+F,EAAoB,IAAIjiG,QAAQnP,KAAK2uB,UAAUvf,EAAGpP,KAAK2uB,UAAUtf,GAEjErP,KAAKsS,OAASA,GAAStS,KAAK2uB,UAAUvf,GAAKmD,GAAMvS,KAAK2uB,UAAUtf,GAAKoD,IAExEzS,KAAKsS,MAAQA,EAEbtS,KAAK2uB,UAAUvf,EAAImD,EACnBvS,KAAK2uB,UAAUtf,EAAIoD,EAEfzS,KAAKkuB,mBAERluB,KAAKqxG,oBAIPrxG,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ6gC,oBACxC,QAASx4B,EAAO,gBAAiB6+F,EACjC,YAAanxG,KAAK2uB,UAAW,oBAAqByiF,KAQpDxJ,YAAYx7F,UAAUwjB,SAAW,WAEhC,OAAO5vB,KAAKsS,OAabs1F,YAAYx7F,UAAU0+F,SAAW,SAAS/iG,GAEzC,IAAIopG,EAAgBnxG,KAAKsS,MAErBtS,KAAKsS,OAASvK,IAEjB/H,KAAKsS,MAAQvK,EAET/H,KAAKkuB,mBAERluB,KAAKqxG,oBAIPrxG,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ2gC,MACxC,QAAS7iC,EAAO,gBAAiBopG,KAQnCvJ,YAAYx7F,UAAUwiB,aAAe,WAEpC,OAAO5uB,KAAK2uB,WAebi5E,YAAYx7F,UAAUwwC,aAAe,SAASrqC,EAAIE,GAEjD,IAAI2+F,EAAoB,IAAIjiG,QAAQnP,KAAK2uB,UAAUvf,EAAGpP,KAAK2uB,UAAUtf,GAEjErP,KAAK2uB,UAAUvf,GAAKmD,GAAMvS,KAAK2uB,UAAUtf,GAAKoD,IAEjDzS,KAAK2uB,UAAUvf,EAAImD,EACnBvS,KAAK2uB,UAAUtf,EAAIoD,EAEfzS,KAAKkuB,mBAERluB,KAAKqxG,oBAIPrxG,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ4gC,UACxC,YAAa7qC,KAAK2uB,UAAW,oBAAqByiF,KAQpDxJ,YAAYx7F,UAAUilG,iBAAmB,WAExCrxG,KAAK6oG,aACL7oG,KAAKiR,MAAMggG,iBAQZrJ,YAAYx7F,UAAUkhG,QAAU,WAEP,MAApBttG,KAAKitE,aAERjtE,KAAKkM,QAGNlM,KAAK6oG,cAQNjB,YAAYx7F,UAAUy8F,WAAa,WAElC7oG,KAAKmuG,aACLnuG,KAAKouG,YAgBNxG,YAAYx7F,UAAUF,MAAQ,SAAS8F,EAAM6uC,EAAOc,GAEnD,IAAIzvC,EAAQlS,KAAKiR,MAAM8c,WAOvB,GANA/b,EAAOA,GAAQE,EAAM8b,UACrB6yB,EAAkB,MAATA,GAAiBA,EAC1Bc,EAAsB,MAAXA,GAAmBA,EAE9B3hD,KAAKsxG,YAAYt/F,GAEb2vC,IAAYd,GAAS7uC,GAAQhS,KAAKitE,aAIrC,IAFA,IAAI/5D,EAAahB,EAAMiB,cAAcnB,GAE5BnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/B7E,KAAKkM,MAAMgG,EAAMkB,WAAWpB,EAAMnN,GAAIg8C,QAKvC7gD,KAAKmuG,WAAWn8F,IAelB41F,YAAYx7F,UAAU+hG,WAAa,SAASn8F,EAAM2vC,EAAS4vD,GAE1D,IAAIr/F,EAAQlS,KAAKiR,MAAM8c,WACvB/b,EAAOA,GAAQE,EAAM8b,UACrB2zB,EAAsB,MAAXA,GAAmBA,EAC9B4vD,EAAgC,MAAhBA,GAAwBA,EAExC,IAAI1/F,EAAQ7R,KAAK+R,SAASC,GAQ1B,GANa,MAATH,IAEHA,EAAMolF,SAAU,IAIZjlF,EAAKw/F,aACV,CAIC,GAHAx/F,EAAKw/F,cAAe,EAGhB7vD,EAIH,IAFA,IAAIzuC,EAAahB,EAAMiB,cAAcnB,GAE5BnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQC,EAAMkB,WAAWpB,EAAMnN,GACnC7E,KAAKmuG,WAAWl8F,EAAO0vC,EAAS4vD,GAKlC,GAAIA,EAEH,KAAIlnC,EAAYn4D,EAAMo4D,aAAat4D,GAEnC,IAASnN,EAAI,EAAGA,EAAIwlE,EAAWxlE,IAE9B7E,KAAKmuG,WAAWj8F,EAAMq4D,UAAUv4D,EAAMnN,GAAI88C,EAAS4vD,UAI9Cv/F,EAAKw/F,eAgBd5J,YAAYx7F,UAAUgiG,SAAW,SAASp8F,GAEzC,IAAI9G,EAAKrE,MAAMgE,MAAM,wBACrBrJ,OAAO6c,OAASvZ,YAAY+G,IAAI7L,KAAKwwG,2BACpCxwG,KAAKwwG,yBAENxwG,KAAK+qG,uBAGL,IAAI0G,EAAc,KAEdzxG,KAAK0wG,oBAAqC,MAAf1wG,KAAKyuB,QAAkC,MAAhBzuB,KAAK2mE,UAC/B,GAAzB9lE,SAASC,eAAsBZ,SAASa,OAAUb,SAASU,aAG7DZ,KAAK0xG,YAAc7wG,SAASG,cAAc,OAC1ChB,KAAK0xG,YAAYhqG,MAAMogB,SAAW,WAClC9nB,KAAK0xG,YAAYhqG,MAAMO,MAAQjI,KAAKyuB,OAAOvlB,YAAc,KACzDlJ,KAAK0xG,YAAYhqG,MAAMG,OAAS7H,KAAKyuB,OAAOxlB,aAAe,KAC3DjJ,KAAKyuB,OAAO5a,WAAWtP,YAAYvE,KAAK0xG,aAExCD,EAAczxG,KAAKouB,SAAS1mB,MAAMgmB,QAClC1tB,KAAKyuB,OAAO/mB,MAAMgmB,QAAU,OAG5B1tB,KAAK2mE,QAAU9lE,SAASG,cAAc,OACtChB,KAAK2mE,QAAQj/D,MAAMogB,SAAW,WAC9B9nB,KAAK2mE,QAAQj/D,MAAMkmB,WAAa,SAChC5tB,KAAK2mE,QAAQj/D,MAAM6D,WAAa,SAChCvL,KAAK2mE,QAAQj/D,MAAMgmB,QAAWxtB,SAAkB,UAAI,SAAW,eAC/DF,KAAK2mE,QAAQj/D,MAAMimB,KAAO,IAE1B9sB,SAASuG,KAAK7C,YAAYvE,KAAK2mE,UAGhC,IAAIl3C,EAAczvB,KAAKijB,eAAejjB,KAAKqqG,kBAC1CrqG,KAAKgrG,aAAah5F,IAA8B,MAApBhS,KAAKitE,YAChCjtE,KAAKitE,YAAcjtE,KAAKiR,MAAM8c,WAAWC,cAC3ChuB,KAAKirG,eAA+B,MAAfx7E,EAAuBA,EAAczvB,KAAK2xG,kBAC/D3xG,KAAK4xG,qBAEc,MAAfH,IAEHzxG,KAAKyuB,OAAO/mB,MAAMgmB,QAAU+jF,EAC5BzxG,KAAK2mE,QAAQ9yD,WAAWC,YAAY9T,KAAK2mE,SAEjB,MAApB3mE,KAAK0xG,aAER1xG,KAAK0xG,YAAY79F,WAAWC,YAAY9T,KAAK0xG,aAI9C1xG,KAAK2mE,QAAU,MAGhB3mE,KAAK+qG,uBAELvpG,OAAO6c,OAASvZ,YAAY+G,IAAI7L,KAAKm4F,eACpCn4F,KAAKm4F,aACNtxF,MAAMoE,MAAM,uBAAwBC,IASrC08F,YAAYx7F,UAAUulG,eAAiB,WAEtC,OAAO,IAAIriG,YAAYtP,KAAK2uB,UAAUvf,EAAIpP,KAAKsS,MAAOtS,KAAK2uB,UAAUtf,EAAIrP,KAAKsS,QAe/Es1F,YAAYx7F,UAAU6W,eAAiB,SAASpR,EAAO8vC,GAEtDA,EAAsB,MAAXA,GAAmBA,EAC9B,IAAIkM,EAAO,KAEX,GAAa,MAATh8C,IAEgB,MAAfA,EAAMQ,OAA4C,MAA3BR,EAAMQ,MAAMghD,cAEtCxF,EAAOh8C,EAAMQ,MAAMghD,YAAY5jD,SAId,MAAdoC,EAAMxD,MAA0C,MAA1BwD,EAAMxD,KAAKglD,cAExB,MAARxF,EAEHA,EAAK9oD,IAAI8M,EAAMxD,KAAKglD,aAIpBxF,EAAOh8C,EAAMxD,KAAKglD,YAAY5jD,SAI5BkyC,GAKH,IAHA,IAAIzvC,EAAQlS,KAAKiR,MAAM8c,WACnB7a,EAAahB,EAAMiB,cAActB,EAAMG,MAElCnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAI4hB,EAASzmB,KAAKijB,eAAejjB,KAAK+R,SAASG,EAAMkB,WAAWvB,EAAMG,KAAMnN,KAE9D,MAAV4hB,IAES,MAARonC,EAEHA,EAAOpnC,EAIPonC,EAAK9oD,IAAI0hB,IAOd,OAAOonC,GAYR+5C,YAAYx7F,UAAUylG,0BAA4B,SAASprF,GAE1D,OAAO,IAAIg1C,iBAAiBh1C,EAAQ,QAAS,UAQ9CmhF,YAAYx7F,UAAUwlG,mBAAqB,WAE1C5xG,KAAK8xG,0BACL9xG,KAAK+xG,0BAQNnK,YAAYx7F,UAAU0lG,wBAA0B,WAE/C,IAAI9kD,EAAKhtD,KAAKiR,MAAM+gG,qBAEpB,GAAU,MAANhlD,EACJ,CACC,GAA4B,MAAxBhtD,KAAKygD,iBAA2BzgD,KAAKygD,gBAAgBpN,OAAS2Z,EAAG/nD,IACrE,CAC6B,MAAxBjF,KAAKygD,iBAERzgD,KAAKygD,gBAAgBxxB,UAGtB,IAAIxI,EAAS,IAAInX,YAAY,EAAG,EAAG,EAAG,GAEtCtP,KAAKygD,gBAAkB,IAAIqc,aAAar2C,EAAQumC,EAAG/nD,KACnDjF,KAAKygD,gBAAgBnyB,QAAUtuB,KAAKiR,MAAMqd,QAC1CtuB,KAAKygD,gBAAgBt5C,KAAKnH,KAAKk2F,gBAC/Bl2F,KAAKygD,gBAAgB5tC,SAGQ,GAAzBhS,SAASC,cAAsBZ,SAASa,OAE3CkJ,QAAQq6B,oBAAoBtkC,KAAKygD,gBAAgBv7C,KAChDoD,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE3BnI,KAAKiR,MAAM+zB,eAAe/6B,QAAQg7B,WAAY,IAAIvD,aAAav5B,OAEhEG,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE3BnI,KAAKiR,MAAM+zB,eAAe/6B,QAAQi7B,WAAY,IAAIxD,aAAav5B,OAEhEG,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE3BnI,KAAKiR,MAAM+zB,eAAe/6B,QAAQk7B,SAAU,IAAIzD,aAAav5B,QAMjEnI,KAAKiyG,sBAAsBjyG,KAAKygD,gBAAiBuM,QAEjB,MAAxBhtD,KAAKygD,kBAEbzgD,KAAKygD,gBAAgBxxB,UACrBjvB,KAAKygD,gBAAkB,OASzBmnD,YAAYx7F,UAAU2lG,uBAAyB,WAE9C,GAAI/xG,KAAKiR,MAAMihG,YACf,CACC,IAAIzrF,EAASzmB,KAAKmyG,0BAEc,MAA5BnyG,KAAKoyG,qBAERpyG,KAAKoyG,oBAAsBpyG,KAAK6xG,0BAA0BprF,GAC1DzmB,KAAKoyG,oBAAoB9/F,MAAQtS,KAAKsS,MACtCtS,KAAKoyG,oBAAoB58C,UAAW,EACpCx1D,KAAKoyG,oBAAoB9jF,QAAUtuB,KAAKiR,MAAMqd,QAC9CtuB,KAAKoyG,oBAAoBjrG,KAAKnH,KAAKk2F,gBACnCl2F,KAAKoyG,oBAAoBv/F,SAGrB7S,KAAKiR,MAAM0tF,uBAEd10F,QAAQD,YAAYhK,KAAKoyG,oBAAoBltG,KAAM,WAAYoD,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE1FnI,KAAKiR,MAAM8zB,SAAS58B,OAMtB8B,QAAQq6B,oBAAoBtkC,KAAKoyG,oBAAoBltG,KACpDoD,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE3BnI,KAAKiR,MAAM+zB,eAAe/6B,QAAQg7B,WAAY,IAAIvD,aAAav5B,OAEhEG,QAAQ2M,KAAKjV,MAAM,SAASmI,GAGM,MAA7BnI,KAAKiR,MAAMyqF,gBAA0B17F,KAAKiR,MAAMyqF,eAAe2W,iBAElEryG,KAAKiR,MAAMyqF,eAAe9pD,OAGvB5xC,KAAKiR,MAAMimC,cAAgBjtC,QAAQk4B,WAAWh6B,IAEjDnI,KAAKiR,MAAM+zB,eAAe/6B,QAAQi7B,WAAY,IAAIxD,aAAav5B,OAGjEG,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE3BnI,KAAKiR,MAAM+zB,eAAe/6B,QAAQk7B,SAAU,IAAIzD,aAAav5B,UAM/DnI,KAAKoyG,oBAAoB9/F,MAAQtS,KAAKsS,MACtCtS,KAAKoyG,oBAAoB3rF,OAASA,EAClCzmB,KAAKoyG,oBAAoBv/F,eAGU,MAA5B7S,KAAKoyG,sBAEbpyG,KAAKoyG,oBAAoBnjF,UACzBjvB,KAAKoyG,oBAAsB,OAS7BxK,YAAYx7F,UAAU+lG,wBAA0B,WAE/C,IAAI5rC,EAAMvmE,KAAKiR,MAAMme,WACjBsrC,EAAK16D,KAAKsS,MAAQtS,KAAKiR,MAAM+gF,UAIjC,OAHa,IAAI1iF,YAAYtP,KAAKsS,MAAQtS,KAAK2uB,UAAUvf,EAAGpP,KAAKsS,MAAQtS,KAAK2uB,UAAUtf,EACtFk3D,EAAIt+D,MAAQyyD,EAAI6L,EAAI1+D,OAAS6yD,IAgChCktC,YAAYx7F,UAAU6lG,sBAAwB,SAASxxD,EAAiBuM,GAEvEvM,EAAgBnuC,MAAQtS,KAAKsS,MAC7BmuC,EAAgBh6B,OAAOrX,EAAIpP,KAAKsS,MAAQtS,KAAK2uB,UAAUvf,EACvDqxC,EAAgBh6B,OAAOpX,EAAIrP,KAAKsS,MAAQtS,KAAK2uB,UAAUtf,EACvDoxC,EAAgBh6B,OAAOxe,MAAQjI,KAAKsS,MAAQ06C,EAAG/kD,MAC/Cw4C,EAAgBh6B,OAAO5e,OAAS7H,KAAKsS,MAAQ06C,EAAGnlD,OAEhD44C,EAAgB5tC,UAgBjB+0F,YAAYx7F,UAAU4+F,aAAe,SAASh5F,EAAMpH,GAInD,GAFAA,EAAsB,MAAXA,GAAmBA,EAElB,MAARoH,EAKH,GAHApH,EAAUA,GAAW5K,KAAKiR,MAAM65D,cAAc94D,GAGjC,MAFDhS,KAAK+R,SAASC,EAAMpH,IAEVA,EASrB,IAHA,IAAIsH,EAAQlS,KAAKiR,MAAM8c,WACnB7a,EAAahB,EAAMiB,cAAcnB,GAE5BnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/B7E,KAAKgrG,aAAa94F,EAAMkB,WAAWpB,EAAMnN,GAAI+F,KAC1C5K,KAAK6tE,gBAAgB77D,IAASA,GAAQhS,KAAKitE,mBAV/CjtE,KAAKsxG,YAAYt/F,GAenB,OAAOA,GAcR41F,YAAYx7F,UAAUi+F,kBAAoB,SAASr4F,EAAM2vC,GAExDA,EAAsB,MAAXA,GAAmBA,EAC9B,IAAI9vC,EAAQ,KAEZ,GAAY,MAARG,GAIU,OAFbH,EAAQ7R,KAAK+R,SAASC,IAGtB,CACC,IAAIE,EAAQlS,KAAKiR,MAAM8c,WAgCvB,GA9BIlc,EAAMolF,UAETplF,EAAMolF,SAAU,GAEG,MAAfplF,EAAMnK,OAAiBmK,EAAMmlF,gBAEhCnlF,EAAMnK,MAAQ1H,KAAKiR,MAAMw8D,aAAa57D,EAAMG,MAC5CH,EAAMmlF,cAAe,GAGlBhlF,GAAQhS,KAAKitE,aAEhBjtE,KAAKqqG,kBAAkBn4F,EAAM+vC,UAAUjwC,IAAO,GAG/CH,EAAM8lF,wBAAwB33F,KAAKqqG,kBAAkBrqG,KAAK2/D,mBAAmB3tD,GAAM,IAAO,IAAQ,GAClGH,EAAM8lF,wBAAwB33F,KAAKqqG,kBAAkBrqG,KAAK2/D,mBAAmB3tD,GAAM,IAAQ,IAAQ,GAEnGhS,KAAKsyG,gBAAgBzgG,GAGjBG,GAAQhS,KAAKitE,aAAgBp7D,EAAMolF,UAEtCj3F,KAAKiR,MAAM2B,aAAaC,OAAOhB,GAAO,EAAO7R,KAAKuuG,eAGlD18F,EAAMomF,uBAIJt2C,IAAY9vC,EAAMolF,QACtB,CAEoB,MAAfplF,EAAMQ,OAETrS,KAAKuyG,eAAe1gG,GAKrB,IAFA,IAAIqB,EAAahB,EAAMiB,cAAcnB,GAE5BnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/B7E,KAAKqqG,kBAAkBn4F,EAAMkB,WAAWpB,EAAMnN,KAMlD,OAAOgN,GAYR+1F,YAAYx7F,UAAUkmG,gBAAkB,SAASzgG,GAQhD,GANAA,EAAM0gF,eAAenjF,EAAI,EACzByC,EAAM0gF,eAAeljF,EAAI,EACzBwC,EAAM6W,OAAOtZ,EAAI,EACjByC,EAAM6W,OAAOrZ,EAAI,EACjBwC,EAAM1P,OAAS,EAEX0P,EAAMG,MAAQhS,KAAKitE,YACvB,CACC,IAAI/6D,EAAQlS,KAAKiR,MAAM8c,WACnBykF,EAASxyG,KAAK+R,SAASG,EAAM+vC,UAAUpwC,EAAMG,OAEnC,MAAVwgG,GAAkBA,EAAOxgG,MAAQhS,KAAKitE,cAEzCp7D,EAAM6W,OAAOtZ,GAAKojG,EAAO9pF,OAAOtZ,EAChCyC,EAAM6W,OAAOrZ,GAAKmjG,EAAO9pF,OAAOrZ,GAGjC,IAAIuN,EAAS5c,KAAKiR,MAAMwhG,sBAAsB5gG,EAAMG,MAEtC,MAAV4K,IAEH/K,EAAM6W,OAAOtZ,GAAKwN,EAAOxN,EACzByC,EAAM6W,OAAOrZ,GAAKuN,EAAOvN,GAG1B,IAAI6yC,EAAMliD,KAAKiR,MAAMkxC,gBAAgBtwC,EAAMG,MAE3C,GAAW,MAAPkwC,EACJ,CACC,IAAKhwC,EAAMC,OAAON,EAAMG,MAIvB,GAFA4K,EAAwB,MAAdslC,EAAItlC,OAAkBslC,EAAItlC,OAAS5c,KAAKuwG,YAE9CruD,EAAIE,UAAsB,MAAVowD,EAEnB,GAAItgG,EAAMC,OAAOqgG,EAAOxgG,MACxB,CACC,IAAI0W,EAAS1oB,KAAK0Q,SAAS8hG,EAAQtwD,GAErB,MAAVx5B,IAEH7W,EAAM6W,OAAOtZ,GAAMsZ,EAAOtZ,EAAIpP,KAAKsS,MAASkgG,EAAO9pF,OAAOtZ,EAAIpP,KAAK2uB,UAAUvf,EAC7EyC,EAAM6W,OAAOrZ,GAAMqZ,EAAOrZ,EAAIrP,KAAKsS,MAASkgG,EAAO9pF,OAAOrZ,EAAIrP,KAAK2uB,UAAUtf,QAK9EwC,EAAM6W,OAAOtZ,GAAK8yC,EAAI9yC,EAAIojG,EAAOlb,cAAgB16E,EAAOxN,EACxDyC,EAAM6W,OAAOrZ,GAAK6yC,EAAI7yC,EAAImjG,EAAOjb,eAAiB36E,EAAOvN,OAK1DwC,EAAM0gF,eAAenjF,EAAIpP,KAAKsS,MAAQsK,EAAOxN,EAC7CyC,EAAM0gF,eAAeljF,EAAIrP,KAAKsS,MAAQsK,EAAOvN,EAC7CwC,EAAM6W,OAAOtZ,GAAK8yC,EAAI9yC,EACtByC,EAAM6W,OAAOrZ,GAAK6yC,EAAI7yC,EAIxBwC,EAAMzC,EAAIpP,KAAKsS,OAAStS,KAAK2uB,UAAUvf,EAAIyC,EAAM6W,OAAOtZ,GACxDyC,EAAMxC,EAAIrP,KAAKsS,OAAStS,KAAK2uB,UAAUtf,EAAIwC,EAAM6W,OAAOrZ,GACxDwC,EAAM5J,MAAQjI,KAAKsS,MAAQ4vC,EAAIj6C,MAC/B4J,EAAMylF,cAAgBp1C,EAAIj6C,MAC1B4J,EAAMhK,OAAS7H,KAAKsS,MAAQ4vC,EAAIr6C,OAChCgK,EAAM0lF,eAAiBr1C,EAAIr6C,OAEvBqK,EAAM2vC,SAAShwC,EAAMG,OAExBhS,KAAK0yG,kBAAkB7gG,EAAOqwC,GAG3BhwC,EAAMC,OAAON,EAAMG,OAEtBhS,KAAK2yG,gBAAgB9gG,EAAOqwC,IAK/BrwC,EAAMomF,sBAUP2P,YAAYx7F,UAAUyhE,gBAAkB,SAAS77D,GAEhD,OAAOhS,KAAKiR,MAAM48D,gBAAgB77D,IAQnC41F,YAAYx7F,UAAUsmG,kBAAoB,SAAS7gG,EAAOqwC,GAEzD,IAAIhwC,EAAQlS,KAAKiR,MAAM8c,WACnBykF,EAASxyG,KAAK+R,SAASG,EAAM+vC,UAAUpwC,EAAMG,OAEjD,GAAIkwC,EAAIE,UAAsB,MAAVowD,IAAmBtgG,EAAMC,OAAOqgG,EAAOxgG,MAC3D,CACC,IAAIyV,EAAQnf,QAAQuX,UAAU2yF,EAAO9qG,MAAMiG,YAAY2W,iBAAmB,KAE1E,GAAa,GAATmD,EACJ,CACC,IAAI1G,EAAM3X,KAAK2X,IAAI0G,GACfxG,EAAM7X,KAAK6X,IAAIwG,GAEf4oE,EAAK,IAAIlhF,QAAQ0C,EAAMlC,aAAckC,EAAMjC,cAC3CuT,EAAK,IAAIhU,QAAQqjG,EAAO7iG,aAAc6iG,EAAO5iG,cAC7C6T,EAAKnb,QAAQkb,gBAAgB6sE,EAAItvE,EAAKE,EAAKkC,GAC/CtR,EAAMzC,EAAIqU,EAAGrU,EAAIyC,EAAM5J,MAAQ,EAC/B4J,EAAMxC,EAAIoU,EAAGpU,EAAIwC,EAAMhK,OAAS,GAIlC7H,KAAK4yG,wBAAwB/gG,IAQ9B+1F,YAAYx7F,UAAUumG,gBAAkB,SAAS9gG,EAAOqwC,GAEvD,IAAIp+B,EAASjS,EAAM6lF,yBAAwB,GACvCj5E,EAAS5M,EAAM6lF,yBAAwB,GAK3C,GAAuD,MAAlD13F,KAAKiR,MAAMiB,MAAMs4D,YAAY34D,EAAMG,MAAM,IAA2B,MAAV8R,GACnD,MAAVA,GAAgD,MAA9Bo+B,EAAIiuC,kBAAiB,IACY,MAAnDnwF,KAAKiR,MAAMiB,MAAMs4D,YAAY34D,EAAMG,MAAM,IAA4B,MAAVyM,GACjD,MAAVA,GAAiD,MAA/ByjC,EAAIiuC,kBAAiB,GAExCnwF,KAAKkM,MAAM2F,EAAMG,MAAM,OAGxB,CACChS,KAAK6yG,0BAA0BhhG,EAAOiS,EAAQrF,GAC9Cze,KAAK8yG,aAAajhG,EAAOqwC,EAAI8Q,OAAQlvC,EAAQrF,GAC7Cze,KAAK+yG,6BAA6BlhG,EAAOiS,EAAQrF,GAEjD,IAAIyH,EAAMrU,EAAMsT,eAEZtT,EAAMG,MAAQhS,KAAKitE,cAAuB,MAAP/mD,GAAeA,EAAI/jB,OAAS,GACxD,MAAV+jB,EAAI,IAAqC,MAAvBA,EAAIA,EAAI/jB,OAAS,IAInCnC,KAAKkM,MAAM2F,EAAMG,MAAM,IAIvBhS,KAAKgzG,iBAAiBnhG,GACtB7R,KAAKizG,sBAAsBphG,MAe9B+1F,YAAYx7F,UAAUwmG,wBAA0B,SAAS/gG,GAExD,IAAIhJ,EAAIP,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYmsB,qBAAsBnsB,YAAYwyB,cAEpF,GAAIt3B,GAAK8E,YAAY2e,WAIV,OAFNyuE,EAAKzyF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYksB,kBAAmB,OAIrEkhE,GAAM/6F,KAAKsS,MAIXyoF,EAAKlpF,EAAM5J,MAGZ4J,EAAM0gF,eAAenjF,GAAK2rF,OAEtB,GAAIlyF,GAAK8E,YAAY4e,YAEzB1a,EAAM0gF,eAAenjF,GAAKyC,EAAM5J,WAE5B,GAAIY,GAAK8E,YAAYwyB,aAC1B,CACC,IAAI46D,EAEJ,GAAU,OAFNA,EAAKzyF,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYksB,kBAAmB,OAGtE,CAEC,IAAIzN,EAAQ9jB,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYgsB,YAAahsB,YAAYwyB,cAC3E5tB,EAAK,EAEL6Z,GAASze,YAAYwyB,aAExB5tB,EAAK,GAEG6Z,GAASze,YAAY4e,cAE7Bha,EAAK,GAGI,GAANA,IAEHV,EAAM0gF,eAAenjF,IAAM2rF,EAAK/6F,KAAKsS,MAAQT,EAAM5J,OAASsK,IAK/D,IAAIrQ,EAAIoG,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYosB,8BAA+BpsB,YAAYyyB,cAEzFl+B,GAAKyL,YAAY6e,UAEpB3a,EAAM0gF,eAAeljF,GAAKwC,EAAMhK,OAExB3F,GAAKyL,YAAY8e,eAEzB5a,EAAM0gF,eAAeljF,GAAKwC,EAAMhK,SASlC+/F,YAAYx7F,UAAU2+F,qBAAuB,WAE5C/qG,KAAK4wG,SAAW,KAChB5wG,KAAK6wG,aAAe,KACpB7wG,KAAK8wG,mBAAqB,KAC1B9wG,KAAK+wG,uBAAyB,MAa/BnJ,YAAYx7F,UAAUmmG,eAAiB,SAAS1gG,GAE/C,IAAIqhG,EAAMlzG,KAAKiR,MAAM8c,WAAW5b,OAAON,EAAMG,OAAShS,KAAKiR,MAAMkiG,uBAC/DnzG,KAAKiR,MAAM8c,WAAW8zB,SAAShwC,EAAMG,OAAShS,KAAKiR,MAAMmiG,sBACvD5S,EAAW,GAAOxgG,KAAK+wG,wBAA8C/wG,KAAK6wG,aAC1E3rG,EAAO,GAAOlF,KAAK8wG,oBAAsC9wG,KAAK4wG,SAC9DjkG,EAAS3M,KAAKiR,MAAM2B,aAAa2tF,iBAAiB1uF,EAAO3M,EAAMs7F,GAE/D0S,GAEHlzG,KAAK+wG,uBAAyBpkG,EAAO,GACrC3M,KAAK8wG,mBAAqBnkG,EAAO,KAIjC3M,KAAK6wG,aAAelkG,EAAO,GAC3B3M,KAAK4wG,SAAWjkG,EAAO,KAgBzBi7F,YAAYx7F,UAAUymG,0BAA4B,SAAShvF,EAAMC,EAAQrF,GAExEze,KAAKqzG,yBAAyBxvF,EAAMC,GAAQ,EAC3C9jB,KAAKiR,MAAMqiG,wBAAwBzvF,EAAMC,GAAQ,IAClD9jB,KAAKqzG,yBAAyBxvF,EAAMpF,GAAQ,EAC3Cze,KAAKiR,MAAMqiG,wBAAwBzvF,EAAMpF,GAAQ,KAenDmpF,YAAYx7F,UAAUinG,yBAA2B,SAASxvF,EAAMD,EAAUE,EAAQmB,GAEjFpB,EAAK4zE,yBAAyBz3F,KAAKuzG,sBAAsB1vF,EAAMD,EAAUE,EAAQmB,GAAanB,IAe/F8jF,YAAYx7F,UAAUmnG,sBAAwB,SAAS1vF,EAAMD,EAAUE,EAAQmB,GAE9E,IAAIxB,EAAK,KAOT,GALkB,MAAdwB,IAEHxB,EAAKzjB,KAAKiR,MAAMuiG,mBAAmB5vF,EAAUqB,GAAY,IAGhD,MAANxB,GAA0B,MAAZG,EAClB,CACC,IAAI/K,EAAI7Y,KAAKsS,MACT9K,EAAKxH,KAAK2uB,UACV6nE,EAAO3yE,EAAK6E,OAIN,OAFVjF,EADUzjB,KAAKiR,MAAMkxC,gBAAgBt+B,EAAK7R,MACjCm+E,iBAAiBrsE,MAIzBL,EAAK,IAAItU,QAAQ0J,GAAKrR,EAAG4H,EAAIqU,EAAGrU,EAAIonF,EAAKpnF,GACpCyJ,GAAKrR,EAAG6H,EAAIoU,EAAGpU,EAAImnF,EAAKnnF,KAI/B,OAAOoU,GAcRmkF,YAAYx7F,UAAUqnG,wBAA0B,SAAS5hG,GAExD,IAAIrF,EAAW,KAEf,GAAa,MAATqF,GAAgC,MAAfA,EAAMQ,OAAwC,MAAvBR,EAAMQ,MAAM67C,SAAiD,SAA9Br8C,EAAMQ,MAAM67C,QAAQzF,OAC/F,CACCj8C,EAAW8C,YAAYwB,cAAce,GACrC,IAAI6hG,EAAM7hG,EAAMQ,MAAM67C,QAAQ6L,cAAcloD,EAAMnK,MAAOmK,EAAMzC,EAAGyC,EAAMxC,EAAGwC,EAAM5J,MAAO4J,EAAMhK,QAC9FgK,EAAMnC,QAAQgkG,EAAItkG,EAAGskG,EAAIrkG,EAAGwC,EAAMQ,MAAM67C,QAAQgL,GAAKw6C,EAAIzrG,MAAO4J,EAAMQ,MAAM67C,QAAQiL,GAAKu6C,EAAI7rG,QAG9F,OAAO2E,GAgBRo7F,YAAYx7F,UAAU0mG,aAAe,SAASjvF,EAAMmvC,EAAQlvC,EAAQrF,GAEnE,GAAY,MAARoF,EACJ,CACC,IAAIqC,EAAM,GACVA,EAAItZ,KAAKiX,EAAKsB,eAAe,IAC7B,IAAIw+D,EAAY3jF,KAAK2zG,aAAa9vF,EAAMmvC,EAAQlvC,EAAQrF,GAExD,GAAiB,MAAbklE,EACJ,CACC,IAAI1+E,EAAMjF,KAAK4zG,gBAAgB/vF,EAAMC,GAAQ,GACzCg0D,EAAM93E,KAAK4zG,gBAAgB/vF,EAAMpF,GAAQ,GAGzCo1F,EAAY7zG,KAAKyzG,wBAAwBxuG,GACzC6uG,EAAY9zG,KAAKyzG,wBAAwB37B,GAE7C6L,EAAU9/D,EAAM5e,EAAK6yE,EAAK9kB,EAAQ9sC,GAGjB,MAAb2tF,GAEH5uG,EAAIyK,QAAQmkG,EAAUzkG,EAAGykG,EAAUxkG,EAAGwkG,EAAU5rG,MAAO4rG,EAAUhsG,QAGjD,MAAbisG,GAEHh8B,EAAIpoE,QAAQokG,EAAU1kG,EAAG0kG,EAAUzkG,EAAGykG,EAAU7rG,MAAO6rG,EAAUjsG,aAG9D,GAAc,MAAVmrD,EAER,IAAK,IAAInuD,EAAI,EAAGA,EAAImuD,EAAO7wD,OAAQ0C,IAElC,GAAiB,MAAbmuD,EAAOnuD,GACX,CACC,IAAI4e,EAAKnb,QAAQmH,MAAMujD,EAAOnuD,IAC9BqhB,EAAItZ,KAAK5M,KAAK6hG,sBAAsBh+E,EAAMJ,IAK7C,IAAI5S,EAAMgT,EAAKsB,eACfe,EAAItZ,KAAKiE,EAAIA,EAAI1O,OAAO,IAExB0hB,EAAKsB,eAAiBe,IASxB0hF,YAAYx7F,UAAUy1F,sBAAwB,SAAShwF,EAAO4R,EAAIswF,GAEjE,GAAa,MAATliG,GAAuB,MAAN4R,EACrB,CACC,IAAI+yE,EAAO3kF,EAAM6W,OACbpW,EAAQyhG,EAAc,EAAI/zG,KAAKsS,MAEhC,OAAO,IAAInD,QAAQmD,GAASmR,EAAGrU,EAAIpP,KAAK2uB,UAAUvf,EAAIonF,EAAKpnF,GACzDkD,GAASmR,EAAGpU,EAAIrP,KAAK2uB,UAAUtf,EAAImnF,EAAKnnF,IAG9C,OAAO,MAWRu4F,YAAYx7F,UAAU4nG,mBAAqB,SAASnwF,EAAMmvC,EAAQlvC,EAAQrF,GAEzE,IAAIkR,EAAK3vB,KAAKiR,MAAMqiG,wBAAwBzvF,EAAMC,GAAQ,GACtDmwF,EAAKj0G,KAAKiR,MAAMqiG,wBAAwBzvF,EAAMpF,GAAQ,GAE1D,UAAe,MAAVu0C,GAAkBA,EAAO7wD,OAAS,IACpCmG,QAAQyW,SAAS8E,EAAKnc,MAAOiG,YAAY4wB,uBAAuB,KAC1D,MAAN5O,GAA0B,MAAZA,EAAGvJ,OAAyB,MAAN6tF,GAA0B,MAAZA,EAAG7tF,SAEtC,MAAVtC,GAAkBA,GAAUrF,GAWrCmpF,YAAYx7F,UAAUunG,aAAe,SAAS9vF,EAAMmvC,EAAQlvC,EAAQrF,GAEnE,IAAIklE,EAAY3jF,KAAKg0G,mBAAmBnwF,EAAMmvC,EAAQlvC,EAAQrF,GAC7DnW,QAAQyW,SAAS8E,EAAKnc,MAAOiG,YAAY2wB,WAAYt+B,KAAKiR,MAAMijG,kBAC9D5rG,QAAQyW,SAAS8E,EAAKnc,MAAOiG,YAAY+sB,mBAAmB,GACzB,KAArC7W,EAAKnc,MAAMiG,YAAYuwB,YAGxB,GAAyB,iBAAf,EACV,CACC,IAAIrtB,EAAM62F,gBAAgB3oF,SAAS4kE,GAExB,MAAP9yE,GAAe7Q,KAAKm0G,gBAEtBtjG,EAAMvI,QAAQ6M,KAAKwuE,IAGrBA,EAAY9yE,EAGb,MAAyB,mBAAf,EAEF8yE,EAGD,MAeRikB,YAAYx7F,UAAU2mG,6BAA+B,SAASlhG,EAAOiS,EAAQrF,GAE5E,IAAIyH,EAAMrU,EAAMsT,eACZqyC,EAAKtxC,EAAI,GAGH,MAFDA,EAAIA,EAAI/jB,OAAS,IAEE,MAAVsc,GAEjBze,KAAKo0G,4BAA4BviG,EAAO4M,EAAQqF,GAAQ,GAG/C,MAAN0zC,GAAwB,MAAV1zC,GAEjB9jB,KAAKo0G,4BAA4BviG,EAAOiS,EAAQrF,GAAQ,IAiB1DmpF,YAAYx7F,UAAUgoG,4BAA8B,SAASvwF,EAAMwD,EAAO8gC,EAAKrkC,GAE9ED,EAAK4zE,yBAAyBz3F,KAAKq0G,yBAAyBxwF,EAAMwD,EAAO8gC,EAAKrkC,GAASA,IAgBxF8jF,YAAYx7F,UAAUioG,yBAA2B,SAASxwF,EAAMwD,EAAO8gC,EAAKrkC,GAE3EuD,EAAQrnB,KAAK4zG,gBAAgB/vF,EAAMwD,EAAOvD,GAC1C,IAAIpL,EAAO1Y,KAAKs0G,aAAazwF,EAAMskC,EAAKrkC,GAEpCywF,EAAOv0G,KAAKiR,MAAMujG,aAAa3wF,GAC/B4D,EAAQnf,QAAQuX,UAAUZ,OAAOoI,EAAM3f,MAAMiG,YAAY2W,iBAAmB,MAC5E6B,EAAS,IAAIhX,QAAQkY,EAAM1X,aAAc0X,EAAMzX,cAEnD,GAAa,GAAT6X,EACJ,CACC,IAAI1G,EAAM3X,KAAK2X,KAAK0G,GAChBxG,EAAM7X,KAAK6X,KAAKwG,GACpB/O,EAAOpQ,QAAQkb,gBAAgB9K,EAAMqI,EAAKE,EAAKkF,GAGhD,IAAIkJ,EAAS1a,WAAWkP,EAAKnc,MAAMiG,YAAY6uB,0BAA4B,GAC3EnN,GAAU1a,WAAWkP,EAAKnc,MAAM,EAC/BiG,YAAY2uB,+BACZ3uB,YAAY4uB,iCAAmC,GAChD,IAAI9Y,EAAKzjB,KAAKimB,kBAAkBoB,EAAO3O,EAAe,GAAT+O,GAAc8sF,EAAMllF,GASjE,OAPa,GAAT5H,IAEC1G,EAAM3X,KAAK2X,IAAI0G,GACfxG,EAAM7X,KAAK6X,IAAIwG,GACnBhE,EAAKnb,QAAQkb,gBAAgBC,EAAI1C,EAAKE,EAAKkF,IAGrC1C,GAeRmkF,YAAYx7F,UAAUwnG,gBAAkB,SAAS/hG,EAAO+R,EAAUE,GAEjE,IAAIxX,EAAM,EAAWqB,YAAYmqB,kBAChCnqB,YAAYoqB,kBACT5zB,EAAKmE,QAAQyW,SAASlN,EAAMnK,MAAO4E,GAEvC,GAAU,MAANnI,EACJ,CACC,IAAI0M,EAAM7Q,KAAK+R,SAAS/R,KAAKiR,MAAM8c,WAAWiV,QAAQ7+B,IAG3C,MAAP0M,IAEH+S,EAAW/S,GAIb,OAAO+S,GAmBRgkF,YAAYx7F,UAAU6Z,kBAAoB,SAASrC,EAAUlL,EAAMk4E,EAAYvhE,GAE9E,IAAIjJ,EAAQ,KAEZ,GAAgB,MAAZxC,EACJ,CACC,IAAI41C,EAAYx5D,KAAKy0G,qBAAqB7wF,GAE1C,GAAiB,MAAb41C,GAA6B,MAAR9gD,EACzB,CACC,IAAI+N,EAASzmB,KAAKw3F,mBAAmB5zE,EAAUyL,GAE/C,GAAI5I,EAAOxe,MAAQ,GAAKwe,EAAO5e,OAAS,EACxC,CACCue,EAAQ,IAAIjX,QAAQuJ,EAAKtJ,EAAGsJ,EAAKrJ,GACjC,IAAIqW,GAAQ,EACRC,GAAQ,EAER3lB,KAAKiR,MAAMiB,MAAM2vC,SAASj+B,EAAS5R,QAEtC0T,EAAwE,GAAhEpd,QAAQyW,SAAS6E,EAASlc,MAAOiG,YAAYkY,YAAa,GAClEF,EAAwE,GAAhErd,QAAQyW,SAAS6E,EAASlc,MAAOiG,YAAYmY,YAAa,GAG5C,MAAlBlC,EAASvR,OAA2C,MAA1BuR,EAASvR,MAAM67C,UAE5CxoC,EAAgE,GAAvDpd,QAAQyW,SAAS6E,EAASlc,MAAO,eAAgB,IAAYge,EACtEC,EAAgE,GAAvDrd,QAAQyW,SAAS6E,EAASlc,MAAO,eAAgB,IAAYie,GAGnED,IAEHU,EAAMhX,EAAI,EAAIqX,EAAO9W,aAAeyW,EAAMhX,GAGvCuW,IAEHS,EAAM/W,EAAI,EAAIoX,EAAO7W,aAAewW,EAAM/W,IAM/B,OAFb+W,EAAQozC,EAAU/yC,EAAQ7C,EAAUwC,EAAOwqE,MAItClrE,IAEHU,EAAMhX,EAAI,EAAIqX,EAAO9W,aAAeyW,EAAMhX,GAGvCuW,IAEHS,EAAM/W,EAAI,EAAIoX,EAAO7W,aAAewW,EAAM/W,KAMjC,MAAT+W,IAEHA,EAAQpmB,KAAK0Q,SAASkT,IAIxB,OAAOwC,GAQRwhF,YAAYx7F,UAAU01F,kBAAoB,SAAUjwF,GAEnD,IAAI+B,EAAoB,MAAf/B,EAAMnK,OAAiBiN,WAAW9C,EAAMnK,MAC/CiG,YAAY6wB,0BAAgC,EAE9C,OAAO3sB,EAAMlC,aAAeiE,EAAI/B,EAAM5J,OAQvC2/F,YAAYx7F,UAAUm1F,kBAAoB,SAAU1vF,GAEnD,IAAI+B,EAAoB,MAAf/B,EAAMnK,OAAiBiN,WAAW9C,EAAMnK,MAC/CiG,YAAY8wB,0BAAgC,EAE9C,OAAO5sB,EAAMjC,aAAegE,EAAI/B,EAAMhK,QA8CvC+/F,YAAYx7F,UAAUorF,mBAAqB,SAAS5zE,EAAUyL,GAS7D,OAPAA,EAAoB,MAAVA,EAAkBA,EAAS,EAErB,MAAZzL,IAEHyL,GAAU1a,WAAWiP,EAASlc,MAAMiG,YAAY6uB,0BAA4B,IAGtE5Y,EAAS4zE,mBAAmBnoE,EAASrvB,KAAKsS,QAQlDs1F,YAAYx7F,UAAUqoG,qBAAuB,SAAS5iG,GAErD,IAAI2nD,EAAY3nD,EAAMnK,MAAMiG,YAAYkqB,iBAGxC,GAAyB,iBAAf,EACV,CACC,IAAIhnB,EAAM62F,gBAAgB3oF,SAASy6C,GAExB,MAAP3oD,GAAe7Q,KAAKm0G,gBAEtBtjG,EAAMvI,QAAQ6M,KAAKqkD,IAGrBA,EAAY3oD,EAGb,MAAyB,mBAAf,EAEF2oD,EAGD,MAgBRouC,YAAYx7F,UAAUkoG,aAAe,SAASzwF,EAAM6wF,EAAU5wF,GAE7D,IAAIoC,EAAMrC,EAAKsB,eACXiB,EAAQ,KAEZ,GAAW,MAAPF,GAAeA,EAAI/jB,QAAU,EACjC,CACC,IAAI+Y,EAAQgL,EAAI/jB,OAChBikB,EAAQF,EAAI,EAAW9c,KAAK2G,IAAI,EAAGmL,EAAQ,GAAK9R,KAAKC,IAAI,EAAG6R,EAAQ,IAQrE,OALa,MAATkL,GAA6B,MAAZsuF,IAEpBtuF,EAAQ,IAAIjX,QAAQulG,EAAS/kG,aAAc+kG,EAAS9kG,eAG9CwW,GAgBRwhF,YAAYx7F,UAAUuzD,mBAAqB,SAAS97C,EAAMC,GAMzD,IAJA,IAAI5R,EAAQlS,KAAKiR,MAAM8c,WACnBphB,EAASuF,EAAMs4D,YAAY3mD,EAAMC,GACjC2jE,EAAO96E,EAEM,MAAVA,GAAkBA,GAAU3M,KAAKitE,aAElCjtE,KAAKiR,MAAM65D,cAAc2c,KAASznF,KAAK6tE,gBAAgBlhE,KAE3D86E,EAAO96E,GAGRA,EAASuF,EAAM+vC,UAAUt1C,GAW1B,OAPY,MAAR86E,GAAkBv1E,EAAMwU,SAAS+gE,IACpCv1E,EAAM+vC,UAAUwlC,IAASv1E,EAAM8b,WAC/By5D,GAAQznF,KAAKitE,cAEbwa,EAAO,MAGDA,GAeRmgB,YAAYx7F,UAAU4mG,iBAAmB,SAASnhG,GAEjD,IAAImhD,EAASnhD,EAAMsT,eACfqyC,EAAKxE,EAAO,GACZuE,EAAKvE,EAAOA,EAAO7wD,OAAS,GAEhC,GAAIq1D,EAAGpoD,GAAKmoD,EAAGnoD,GAAKooD,EAAGnoD,GAAKkoD,EAAGloD,EAC/B,CACC,IAAIkD,EAAKglD,EAAGnoD,EAAIooD,EAAGpoD,EACfqD,EAAK8kD,EAAGloD,EAAImoD,EAAGnoD,EACnBwC,EAAMulF,iBAAmBhuF,KAAKqY,KAAKlP,EAAKA,EAAKE,EAAKA,QAIlDZ,EAAMulF,iBAAmB,EAG1B,IAAIj1F,EAAS,EACTk1F,EAAW,GACX5zE,EAAK+zC,EAET,GAAU,MAAN/zC,EACJ,CAMC,IALA,IAAI3T,EAAO2T,EAAGrU,EACVY,EAAOyT,EAAGpU,EACVY,EAAOH,EACPI,EAAOF,EAEFnL,EAAI,EAAGA,EAAImuD,EAAO7wD,OAAQ0C,IACnC,CACC,IAAIgM,EAAMmiD,EAAOnuD,GAEjB,GAAW,MAAPgM,EACJ,CACK0B,EAAKkR,EAAGrU,EAAIyB,EAAIzB,EAChBqD,EAAKgR,EAAGpU,EAAIwB,EAAIxB,EADpB,IAGI6xF,EAAU93F,KAAKqY,KAAKlP,EAAKA,EAAKE,EAAKA,GACvC4kF,EAASzqF,KAAKs0F,GACd/+F,GAAU++F,EAEVz9E,EAAK5S,EAELf,EAAO1G,KAAK2G,IAAI0T,EAAGrU,EAAGU,GACtBE,EAAO5G,KAAK2G,IAAI0T,EAAGpU,EAAGW,GACtBC,EAAO7G,KAAKC,IAAIoa,EAAGrU,EAAGa,GACtBC,EAAO9G,KAAKC,IAAIoa,EAAGpU,EAAGa,IAIxB2B,EAAM1P,OAASA,EACf0P,EAAMwlF,SAAWA,EAIjBxlF,EAAMzC,EAAIU,EACV+B,EAAMxC,EAAIW,EACV6B,EAAM5J,MAAQmB,KAAKC,IAJF,EAIkB4G,EAAOH,GAC1C+B,EAAMhK,OAASuB,KAAKC,IALH,EAKmB6G,EAAOF,KAgB7C43F,YAAYx7F,UAAUsE,SAAW,SAASmB,EAAOW,GAEhD,IAAIpD,EAAIyC,EAAMlC,aACVN,EAAIwC,EAAMjC,aAEd,GAAsB,MAAlBiC,EAAMwlF,UAAiC,MAAZ7kF,IAAoBA,EAAS4vC,SA8CvC,MAAZ5vC,GAIM,OAFVoK,EAASpK,EAASoK,UAIrBxN,GAAKwN,EAAOxN,EACZC,GAAKuN,EAAOvN,OApDd,CAQC,IAPA,IAAIslG,EAAkB,MAAZniG,EAAoBA,EAASpD,EAAI,EAAI,EAC3CkrD,EAAazoD,EAAMsT,eAAehjB,OAClCmjB,EAAOlc,KAAK2c,OAAO4uF,EAAK,IAAO9iG,EAAM1P,QACrC++F,EAAUrvF,EAAMwlF,SAAS,GACzBl1F,EAAS,EACTsM,EAAQ,EAEL6W,GAAQlc,KAAK2c,MAAM5jB,EAAS++F,IAAYzyF,EAAQ6rD,EAAa,GAEnEn4D,GAAU++F,EACVA,EAAUrvF,EAAMwlF,SAAS5oF,KAG1B,IAAImsD,EAAqB,GAAXsmC,EAAgB,GAAK57E,EAAOnjB,GAAU++F,EAChD1pC,EAAK3lD,EAAMsT,eAAe1W,EAAM,GAChC8oD,EAAK1lD,EAAMsT,eAAe1W,GAE9B,GAAU,MAAN+oD,GAAoB,MAAND,EAClB,CACC,IAOK36C,EAPDg4F,EAAK,EACL/jC,EAAU,EACVC,EAAU,EAEE,MAAZt+D,IAEHoiG,EAAKpiG,EAASnD,EAGA,OAFVuN,EAASpK,EAASoK,UAIrBi0D,EAAUj0D,EAAOxN,EACjB0hE,EAAUl0D,EAAOvN,IAInB,IAAIkD,EAAKglD,EAAGnoD,EAAIooD,EAAGpoD,EACfqD,EAAK8kD,EAAGloD,EAAImoD,EAAGnoD,EACfwyD,EAAiB,GAAXq/B,EAAgB,EAAIzuF,EAAKyuF,EAC/Bp/B,EAAiB,GAAXo/B,EAAgB,EAAI3uF,EAAK2uF,EAEnC9xF,EAAIooD,EAAGpoD,EAAImD,EAAKqoD,GAAUiH,EAAK+yC,EAAK/jC,GAAW7wE,KAAKsS,MACpDjD,EAAImoD,EAAGnoD,EAAIoD,EAAKmoD,GAAUkH,EAAK8yC,EAAK9jC,GAAW9wE,KAAKsS,OActD,OAAO,IAAInD,QAAQC,EAAGC,IAevBu4F,YAAYx7F,UAAUyoG,iBAAmB,SAASrhG,EAAWpE,EAAGC,GAE/D,IACImD,EADQxS,KAAKiR,MAAM8c,WACFq9C,YAAY53D,EAAUxB,MAE3C,GAAgB,MAAZQ,EACJ,CACC,IAAI8nD,EAAa9mD,EAAU2R,eAAehjB,OAE1C,GAAIqQ,EAAS4vC,UAAYkY,EAAa,EACtC,CAaC,IAZA,IAAIw6C,EAActhG,EAAUrR,OACxBk1F,EAAW7jF,EAAU6jF,SAGrB7/B,EAAKhkD,EAAU2R,eAAe,GAC9BoyC,EAAK/jD,EAAU2R,eAAe,GAC9B4vF,EAAUzsG,QAAQid,YAAYiyC,EAAGpoD,EAAGooD,EAAGnoD,EAAGkoD,EAAGnoD,EAAGmoD,EAAGloD,EAAGD,EAAGC,GAEzDZ,EAAQ,EACRoC,EAAM,EACN1O,EAAS,EAEJ0C,EAAI,EAAGA,EAAIy1D,EAAYz1D,IAChC,CACCgM,GAAOwmF,EAASxyF,EAAI,GACpB0yD,EAAK/jD,EAAU2R,eAAetgB,GAC9B,IAAIygB,EAAOhd,QAAQid,YAAYiyC,EAAGpoD,EAAGooD,EAAGnoD,EAAGkoD,EAAGnoD,EAAGmoD,EAAGloD,EAAGD,EAAGC,GAEtDiW,GAAQyvF,IAEXA,EAAUzvF,EACV7W,EAAQ5J,EAAI,EACZ1C,EAAS0O,GAGV2mD,EAAKD,EAGN,IAAIp1C,EAAMk1E,EAAS5oF,GACnB+oD,EAAKhkD,EAAU2R,eAAe1W,GAC9B8oD,EAAK/jD,EAAU2R,eAAe1W,EAAQ,GAEtC,IAAImU,EAAK40C,EAAGpoD,EACRyT,EAAK20C,EAAGnoD,EAER8Z,EAAKouC,EAAGnoD,EACRsU,EAAK6zC,EAAGloD,EAERka,EAAKna,EACLoa,EAAKna,EAEL2lG,EAAWpyF,EAAKuG,EAChB8rF,EAAWpyF,EAAKa,EAIhB+F,EAAY,EAIZC,GAFJH,EAAKyrF,GAJLzrF,GAAMJ,IAMa6rF,GADnBxrF,EAAKyrF,GAJLzrF,GAAM9F,IAK6BuxF,EAIlCxrF,EAFGC,GAAW,EAEF,EAIAA,EAAUA,GACjBsrF,EAAWA,EAAWC,EAAWA,GAGvC,IAAIC,EAAU9rG,KAAKqY,KAAKgI,GAEpByrF,EAAU/yF,IAEb+yF,EAAU/yF,GAGX,IAAIgzF,EAAY/rG,KAAKqY,KAAKnZ,QAAQid,YAAYiyC,EAAGpoD,EAAGooD,EAAGnoD,EAAGkoD,EACvDnoD,EAAGmoD,EAAGloD,EAAGD,EAAGC,IASf,OANkB,GAFF/G,QAAQuhB,YAAY2tC,EAAGpoD,EAAGooD,EAAGnoD,EAAGkoD,EAAGnoD,EAAGmoD,EAAGloD,EAAGD,EAAGC,KAI9D8lG,GAAaA,GAIP,IAAIhmG,SAAU2lG,EAAc,EAAI3yG,EAAS+yG,GAAWJ,GAAgB,EACxEK,EAAYn1G,KAAKsS,QAItB,OAAO,IAAInD,SAiBZy4F,YAAYx7F,UAAU6mG,sBAAwB,SAASphG,GAEtD,IAAImhD,EAASnhD,EAAMsT,eAKnB,GAHAtT,EAAM0gF,eAAenjF,EAAIyC,EAAMlC,aAC/BkC,EAAM0gF,eAAeljF,EAAIwC,EAAMjC,aAEjB,MAAVojD,GAAkBA,EAAO7wD,OAAS,GAAuB,MAAlB0P,EAAMwlF,SACjD,CACC,IAAI7kF,EAAWxS,KAAKiR,MAAMkxC,gBAAgBtwC,EAAMG,MAEhD,GAAIQ,EAAS4vC,SACb,CACC,IAAIxlC,EAAS5c,KAAK0Q,SAASmB,EAAOW,GAEpB,MAAVoK,IAEH/K,EAAM0gF,eAAiB31E,OAIzB,CACC,IAAI46C,EAAKxE,EAAO,GACZuE,EAAKvE,EAAOA,EAAO7wD,OAAS,GAEhC,GAAU,MAANq1D,GAAoB,MAAND,EAClB,CACC,IAAIhlD,EAAKglD,EAAGnoD,EAAIooD,EAAGpoD,EACfqD,EAAK8kD,EAAGloD,EAAImoD,EAAGnoD,EACf8Q,EAAK,EACLC,EAAK,EAEL83B,EAAM1lC,EAASoK,OAER,MAAPs7B,IAEH/3B,EAAK+3B,EAAI9oC,EACTgR,EAAK83B,EAAI7oC,GAGV,IAAID,EAAIooD,EAAGpoD,EAAImD,EAAK,EAAI4N,EAAKngB,KAAKsS,MAC9BjD,EAAImoD,EAAGnoD,EAAIoD,EAAK,EAAI2N,EAAKpgB,KAAKsS,MAElCT,EAAM0gF,eAAenjF,EAAIA,EACzByC,EAAM0gF,eAAeljF,EAAIA,MAkB7Bu4F,YAAYx7F,UAAU2F,SAAW,SAASC,EAAM0Y,GAE/CA,EAASA,IAAU,EACnB,IAAI7Y,EAAQ,KAoBZ,OAlBY,MAARG,IAEHH,EAAQ7R,KAAKujD,OAAO13C,IAAImG,GAEpB0Y,IAAoB,MAAT7Y,GAAiB7R,KAAK2wG,cAAgB3wG,KAAKiR,MAAM65D,cAAc94D,KAEhE,MAATH,GAEHA,EAAQ7R,KAAKikD,YAAYjyC,GACzBhS,KAAKujD,OAAOh3C,IAAIyF,EAAMH,IAItBA,EAAMnK,MAAQ1H,KAAKiR,MAAMw8D,aAAaz7D,KAKlCH,GAQR+1F,YAAYx7F,UAAUmiG,YAAc,WAEnC,OAAOvuG,KAAKu2F,WAQbqR,YAAYx7F,UAAUgpG,aAAe,SAASrtG,GAE7C/H,KAAKu2F,UAAYxuF,GAQlB6/F,YAAYx7F,UAAU+nG,YAAc,WAEnC,OAAOn0G,KAAKg5D,WAQb4uC,YAAYx7F,UAAUipG,aAAe,SAASttG,GAE7C/H,KAAKg5D,UAAYjxD,GAQlB6/F,YAAYx7F,UAAUo+F,UAAY,WAEjC,OAAOxqG,KAAKujD,QAQbqkD,YAAYx7F,UAAU6hD,UAAY,SAASlmD,GAE1C/H,KAAKujD,OAASx7C,GAWf6/F,YAAYx7F,UAAUkpG,cAAgB,SAASnrF,GAE9C,GAAa,MAATA,EAEH,OAAOnqB,KAAKujD,OAMZ,IAFA,IAAI52C,EAAS,GAEJ9H,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CACC,IAAIgN,EAAQ7R,KAAK+R,SAASoY,EAAMtlB,IAEnB,MAATgN,GAEHlF,EAAOC,KAAKiF,GAId,OAAOlF,GAaTi7F,YAAYx7F,UAAUklG,YAAc,SAASt/F,GAE5C,IAAIH,EAAQ,KAcZ,OAZY,MAARG,GAIU,OAFbH,EAAQ7R,KAAKujD,OAAO92C,OAAOuF,MAI1BhS,KAAKiR,MAAM2B,aAAaqc,QAAQpd,GAChCA,EAAMolF,SAAU,EAChBplF,EAAMod,WAIDpd,GAaR+1F,YAAYx7F,UAAU63C,YAAc,SAASjyC,GAE5C,OAAO,IAAIsgF,YAAYtyF,KAAMgS,EAAMhS,KAAKiR,MAAMw8D,aAAaz7D,KAS5D41F,YAAYx7F,UAAU6pF,UAAY,WAEjC,OAAOj2F,KAAKyuB,QAQbm5E,YAAYx7F,UAAU+pF,kBAAoB,WAEzC,OAAOn2F,KAAKk2F,gBAQb0R,YAAYx7F,UAAU6nF,YAAc,WAEnC,OAAOj0F,KAAKouB,UAQbw5E,YAAYx7F,UAAUymD,eAAiB,WAEtC,OAAO7yD,KAAKquB,aAQbu5E,YAAYx7F,UAAUmpG,iBAAmB,WAExC,OAAOv1G,KAAKw1G,eASb5N,YAAYx7F,UAAUqpG,iBAAmB,SAASttG,GAEjD,IAAI2b,EAAS7Z,QAAQu4B,UAAUr6B,GAE/B,OAAQ2b,GAAU9jB,KAAKiR,MAAM0W,WAC5B7D,EAAOjQ,YAAc7T,KAAKk2F,gBACJ,MAArBpyE,EAAOjQ,YACRiQ,EAAOjQ,WAAWA,YAAc7T,KAAKk2F,gBACrCpyE,GAAU9jB,KAAKyuB,OAAO5a,YACtBiQ,GAAU9jB,KAAKyuB,QACf3K,GAAU9jB,KAAKk2F,gBACfpyE,GAAU9jB,KAAKouB,UACftK,GAAU9jB,KAAKquB,aACfvK,GAAU9jB,KAAKw1G,eAShB5N,YAAYx7F,UAAUspG,cAAgB,SAASvtG,GAE/C,IAAIyU,EAAStU,QAAQof,UAAU1nB,KAAKiR,MAAM0W,WACtClE,EAAK,IAAItU,QAAQhH,EAAIg/B,QAAUvqB,EAAOxN,EAAGjH,EAAIi/B,QAAUxqB,EAAOvN,GAE9DsmG,EAAW31G,KAAKiR,MAAM0W,UAAUhL,YAChCi5F,EAAU51G,KAAKiR,MAAM0W,UAAUze,YAEnC,GAAIysG,EAAWC,GAAWnyF,EAAGrU,EAAIwmG,EAAU,GAAKnyF,EAAGrU,GAAKumG,EAEvD,OAAO,EAGR,IAAIE,EAAY71G,KAAKiR,MAAM0W,UAAU5d,aACjC+rG,EAAW91G,KAAKiR,MAAM0W,UAAU1e,aAEpC,OAAI4sG,EAAYC,GAAYryF,EAAGpU,EAAIymG,EAAW,GAAKryF,EAAGpU,GAAKwmG,GAc5DjO,YAAYx7F,UAAUjF,KAAO,WAE5BnH,KAAK45F,mBAGL,IAAI3oF,EAAQjR,KAAKiR,MAEbA,EAAMqd,SAAW3gB,YAAY4gB,YAEhCvuB,KAAKk0D,YAEGjjD,EAAMqd,SAAW3gB,YAAYylB,YAErCpzB,KAAKo0D,YAILp0D,KAAKm0D,cASPyzC,YAAYx7F,UAAUwtF,iBAAmB,WAExC,IAAI3oF,EAAQjR,KAAKiR,MACb0W,EAAY1W,EAAM0W,UAEL,MAAbA,IAICznB,SAASqD,WAEZ0G,QAAQD,YAAY2d,EAAW,eAAgBrf,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE1E8I,EAAM8kG,iBAAiB5tG,GACvB8B,QAAQm4B,QAAQj6B,OAGjB8B,QAAQD,YAAY2d,EAAW,gBAAiBrf,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE3E8I,EAAM8kG,iBAAiB5tG,GACvB8B,QAAQm4B,QAAQj6B,OAGjB8B,QAAQD,YAAY2d,EAAW,aAAcrf,QAAQ2M,KAAKjV,MAAM,SAASmI,GAExE8I,EAAM8kG,iBAAiB5tG,GACvB8B,QAAQm4B,QAAQj6B,QAKlB8B,QAAQq6B,oBAAoB3c,EAAWrf,QAAQ2M,KAAKjV,MAAM,SAASmI,IAG9DnI,KAAKy1G,iBAAiBttG,KAAWjI,SAASE,OAAUF,SAASO,SAAYP,SAASmC,OACpFnC,SAASkB,OAAUlB,SAASoB,QAAWtB,KAAK01G,cAAcvtG,IAE3D8I,EAAM+zB,eAAe/6B,QAAQg7B,WAAY,IAAIvD,aAAav5B,OAG5DG,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEvBnI,KAAKy1G,iBAAiBttG,IAEzB8I,EAAM+zB,eAAe/6B,QAAQi7B,WAAY,IAAIxD,aAAav5B,OAG5DG,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEvBnI,KAAKy1G,iBAAiBttG,IAEzB8I,EAAM+zB,eAAe/6B,QAAQk7B,SAAU,IAAIzD,aAAav5B,QAO1D8B,QAAQD,YAAY2d,EAAW,WAAYrf,QAAQ2M,KAAKjV,MAAM,SAASmI,GAElEnI,KAAKy1G,iBAAiBttG,IAEzB8I,EAAM8zB,SAAS58B,OAgCjB8I,EAAMgrC,iBACN,CACCxL,UAAW,SAAS3mC,EAAQ8mC,GAE3B3/B,EAAM+kG,iBAAiB78D,YAExB3C,UAAW,aACXE,QAAS,eAGV12C,KAAKypG,YAAcnhG,QAAQ2M,KAAKjV,MAAM,SAASmI,GAGlB,MAAxB8I,EAAMyqF,gBAA0BzqF,EAAMyqF,eAAe2W,iBAExDphG,EAAMyqF,eAAe9pD,OAGlB5xC,KAAKywG,wBAA0Bx/F,EAAMimC,aAAkC,MAAnBjmC,EAAM0W,YAC5D3nB,KAAKy1G,iBAAiBttG,IAAyC,QAAjC8I,EAAM0W,UAAUjgB,MAAMgmB,SACjB,UAApCzc,EAAM0W,UAAUjgB,MAAM6D,aAA2BtB,QAAQk4B,WAAWh6B,IAEpE8I,EAAM+zB,eAAe/6B,QAAQi7B,WAAY,IAAIxD,aAAav5B,EA/C7C,SAASA,GAEvB,IAAI0J,EAAQ,KAKZ,GAAI3R,SAASqD,SACb,CACC,IAAI6L,EAAInF,QAAQ04B,WAAWx6B,GACvBkH,EAAIpF,QAAQ44B,WAAW16B,GAIvBsb,EAAKnb,QAAQqgB,aAAahB,EAAWvY,EAAGC,GAC5CwC,EAAQZ,EAAMsW,KAAKxV,SAASd,EAAM8kC,UAAUtyB,EAAGrU,EAAGqU,EAAGpU,IAGtD,OAAOwC,EA6ByDE,CAAS5J,QAI1EnI,KAAKi2G,WAAa3tG,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEzCnI,KAAKywG,wBAA0Bx/F,EAAMimC,aAAkC,MAAnBjmC,EAAM0W,YAC5D3nB,KAAKy1G,iBAAiBttG,IAAyC,QAAjC8I,EAAM0W,UAAUjgB,MAAMgmB,SACjB,UAApCzc,EAAM0W,UAAUjgB,MAAM6D,YAEtB0F,EAAM+zB,eAAe/6B,QAAQk7B,SAAU,IAAIzD,aAAav5B,OAI1D8B,QAAQq6B,oBAAoBzjC,SAAU,KAAMb,KAAKypG,YAAazpG,KAAKi2G,cASrErO,YAAYx7F,UAAU+nD,WAAa,WAElC,IAAIxsC,EAAY3nB,KAAKiR,MAAM0W,UAE3B,GAAiB,MAAbA,IAEH3nB,KAAKyuB,OAASzuB,KAAKk2G,eAAe,OAAQ,QAC1Cl2G,KAAKyuB,OAAO/mB,MAAMsN,SAAW,SAK7BhV,KAAKk2F,eAAiBl2F,KAAKk2G,eAAe,MAAO,OACjDl2G,KAAKouB,SAAWpuB,KAAKk2G,eAAe,MAAO,OAC3Cl2G,KAAKquB,YAAcruB,KAAKk2G,eAAe,MAAO,OAC9Cl2G,KAAKw1G,cAAgBx1G,KAAKk2G,eAAe,MAAO,OAEhDl2G,KAAKyuB,OAAOlqB,YAAYvE,KAAKk2F,gBAC7Bl2F,KAAKyuB,OAAOlqB,YAAYvE,KAAKouB,UAC7BpuB,KAAKyuB,OAAOlqB,YAAYvE,KAAKquB,aAC7BruB,KAAKyuB,OAAOlqB,YAAYvE,KAAKw1G,eAE7B7tF,EAAUpjB,YAAYvE,KAAKyuB,QAC3BzuB,KAAKm2G,qBAAqBxuF,GAGtBznB,SAASU,WACb,CACC,IAAIw1G,EAAW9tG,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE1C,IAAIse,EAASzmB,KAAK0vB,iBACdznB,EAAQwe,EAAOrX,EAAIqX,EAAOxe,MAAQjI,KAAKiR,MAAMoe,OAC7CxnB,EAAS4e,EAAOpX,EAAIoX,EAAO5e,OAAS7H,KAAKiR,MAAMoe,OAEnDrvB,KAAKq2G,qBAAqBpuG,EAAOJ,MAGlCoC,QAAQD,YAAYxI,OAAQ,SAAU40G,KAUzCxO,YAAYx7F,UAAUiqG,qBAAuB,SAASpuG,EAAOJ,GAE5D,GAA4B,MAAxB7H,KAAKiR,MAAM0W,UACf,CACC,IAAIq/C,EAAKhnE,KAAKiR,MAAM0W,UAAUhL,YAC1Bk0C,EAAK7wD,KAAKiR,MAAM0W,UAAU5d,aAI7B/J,KAAKyuB,OAAO/mB,MAAMO,MAFf++D,EAAK/+D,EAEkBA,EAAQ,KAIR,OAK1BjI,KAAKyuB,OAAO/mB,MAAMG,OAFfgpD,EAAKhpD,EAEmBA,EAAS,KAIT,SAU9B+/F,YAAYx7F,UAAU8pG,eAAiB,SAASjuG,EAAOJ,GAEtD,IAAIyuG,EAAOz1G,SAASG,cAAc,OAgBlC,OAda,MAATiH,GAA2B,MAAVJ,GAEpByuG,EAAK5uG,MAAMogB,SAAW,WACtBwuF,EAAK5uG,MAAM+U,KAAO,MAClB65F,EAAK5uG,MAAMuV,IAAM,MAEjBq5F,EAAK5uG,MAAMO,MAAQA,EACnBquG,EAAK5uG,MAAMG,OAASA,GAIpByuG,EAAK5uG,MAAMogB,SAAW,WAGhBwuF,GAQR1O,YAAYx7F,UAAUgoD,UAAY,WAEjC,IAAIzsC,EAAY3nB,KAAKiR,MAAM0W,UAE3B,GAAiB,MAAbA,EACJ,CACC,IAAI1f,EAAQ0f,EAAUhL,YAClB9U,EAAS8f,EAAU5d,aACvB/J,KAAKyuB,OAASzuB,KAAKu2G,cAActuG,EAAOJ,GACxC7H,KAAKyuB,OAAO/mB,MAAMsN,SAAW,SAE7BhV,KAAKk2F,eAAiBl2F,KAAKu2G,cAActuG,EAAOJ,GAChD7H,KAAKouB,SAAWpuB,KAAKu2G,cAActuG,EAAOJ,GAC1C7H,KAAKquB,YAAcruB,KAAKu2G,cAActuG,EAAOJ,GAC7C7H,KAAKw1G,cAAgBx1G,KAAKu2G,cAActuG,EAAOJ,GAE/C7H,KAAKyuB,OAAOlqB,YAAYvE,KAAKk2F,gBAC7Bl2F,KAAKyuB,OAAOlqB,YAAYvE,KAAKouB,UAC7BpuB,KAAKyuB,OAAOlqB,YAAYvE,KAAKquB,aAC7BruB,KAAKyuB,OAAOlqB,YAAYvE,KAAKw1G,eAE7B7tF,EAAUpjB,YAAYvE,KAAKyuB,UAS7Bm5E,YAAYx7F,UAAUmqG,cAAgB,SAAStuG,EAAOJ,GAErD,IAAIyuG,EAAOz1G,SAASG,cAAcd,SAASe,WAAa,UAcxD,OAVAq1G,EAAK5uG,MAAMogB,SAAW,WACtBwuF,EAAK5uG,MAAM+U,KAAO,MAClB65F,EAAK5uG,MAAMuV,IAAM,MAEjBq5F,EAAK5uG,MAAMO,MAAQA,EAAQ,KAC3BquG,EAAK5uG,MAAMG,OAASA,EAAS,KAE7ByuG,EAAKjyG,aAAa,YAAa4D,EAAQ,IAAMJ,GAC7CyuG,EAAKjyG,aAAa,cAAe,OAE1BiyG,GAQR1O,YAAYx7F,UAAU8nD,UAAY,WAEjC,IAAIvsC,EAAY3nB,KAAKiR,MAAM0W,UAC3B3nB,KAAKyuB,OAAS5tB,SAASsC,gBAAgBwK,YAAY6gB,OAAQ,KAG3DxuB,KAAKk2F,eAAiBr1F,SAASsC,gBAAgBwK,YAAY6gB,OAAQ,KACnExuB,KAAKyuB,OAAOlqB,YAAYvE,KAAKk2F,gBAG7Bl2F,KAAKouB,SAAWvtB,SAASsC,gBAAgBwK,YAAY6gB,OAAQ,KAC7DxuB,KAAKyuB,OAAOlqB,YAAYvE,KAAKouB,UAE7BpuB,KAAKquB,YAAcxtB,SAASsC,gBAAgBwK,YAAY6gB,OAAQ,KAChExuB,KAAKyuB,OAAOlqB,YAAYvE,KAAKquB,aAE7BruB,KAAKw1G,cAAgB30G,SAASsC,gBAAgBwK,YAAY6gB,OAAQ,KAClExuB,KAAKyuB,OAAOlqB,YAAYvE,KAAKw1G,eAE7B,IAAI13D,EAAOj9C,SAASsC,gBAAgBwK,YAAY6gB,OAAQ,OACxDsvB,EAAKp2C,MAAM+U,KAAO,MAClBqhC,EAAKp2C,MAAMuV,IAAM,MACjB6gC,EAAKp2C,MAAMO,MAAQ,OACnB61C,EAAKp2C,MAAMG,OAAS,OAIpBi2C,EAAKp2C,MAAMgmB,QAAU,QACrBowB,EAAKv5C,YAAYvE,KAAKyuB,SAGlBvuB,SAASE,OAASF,SAASO,WAE9Bq9C,EAAKp2C,MAAMsN,SAAW,UAGN,MAAb2S,IAEHA,EAAUpjB,YAAYu5C,GACtB99C,KAAKm2G,qBAAqBxuF,KAS5BigF,YAAYx7F,UAAU+pG,qBAAuB,SAASxuF,GAGrD,IAAIjgB,EAAQY,QAAQiM,gBAAgBoT,GAEvB,MAATjgB,GAAmC,UAAlBA,EAAMogB,WAE1BH,EAAUjgB,MAAMogB,SAAW,YAIxB5nB,SAASuD,aAEZkkB,EAAUjgB,MAAM8pC,YAAc,SAShCo2D,YAAYx7F,UAAU6iB,QAAU,WAE/B,IAAI6uB,EAAuB,MAAf99C,KAAKyuB,OAAkBzuB,KAAKyuB,OAAOwC,gBAAkB,KAErD,MAAR6sB,IAEHA,EAAO99C,KAAKyuB,QAGD,MAARqvB,GAAmC,MAAnBA,EAAKjqC,aAExB7T,KAAKkM,MAAMlM,KAAKitE,aAAa,GAC7BhjE,QAAQy6B,uBAAuB7jC,SAAU,KAAMb,KAAKypG,YAAazpG,KAAKi2G,YACtEhsG,QAAQm7B,QAAQplC,KAAKiR,MAAM0W,WAC3Bm2B,EAAKjqC,WAAWC,YAAYgqC,GAE5B99C,KAAKypG,YAAc,KACnBzpG,KAAKi2G,WAAa,KAClBj2G,KAAKyuB,OAAS,KACdzuB,KAAKk2F,eAAiB,KACtBl2F,KAAKouB,SAAW,KAChBpuB,KAAKquB,YAAc,KACnBruB,KAAKw1G,cAAgB,OA2CvB3N,oBAAoBz7F,UAAUwP,QAAU,WAEvC,IAAI/K,EAAM7Q,KAAKunB,KAAK0lD,YACpBjtE,KAAKunB,KAAK0lD,YAAcjtE,KAAKwM,SAC7BxM,KAAKwM,SAAWqE,EAEhB,IAAI8d,EAAY3uB,KAAKunB,KAAKtW,MAAMulG,oBAAoBx2G,KAAKunB,KAAK0lD,aAE7C,MAAbt+C,IAEH3uB,KAAKunB,KAAKoH,UAAY,IAAIxf,SAASwf,EAAUvf,GAAIuf,EAAUtf,IAGxDrP,KAAK8nG,MAER9nG,KAAKunB,KAAKrb,MAAMlM,KAAKunB,KAAK0lD,aAAa,GACvCjtE,KAAKunB,KAAK6mF,YAIVpuG,KAAKunB,KAAK+lF,UAGX,IAAIvtG,EAAQC,KAAS,KAAIiK,QAAQ8gC,GAAK9gC,QAAQ+gC,KAC9ChrC,KAAKunB,KAAKic,UAAU,IAAIhC,cAAczhC,EACrC,OAAQC,KAAKunB,KAAK0lD,YAAa,WAAYjtE,KAAKwM,WACjDxM,KAAK8nG,MAAQ9nG,KAAK8nG,MAGnB7nG,WAAW2nG,iBAAqC,IAAhBA,YAA8BA,iBAAchhG,EA8rBxExB,gBAEHN,YAAYC,IAAI7E,SAASwF,SAAW,oBAIpCxF,SAAS4D,eAAe8I,KAAK1M,SAASwF,SAAW,oBAMlDqiG,QAAQ37F,UAAY,IAAIw1B,cACxBmmE,QAAQ37F,UAAUH,YAAc87F,QAWhCA,QAAQ37F,UAAU87F,eAAiB,KAOnCH,QAAQ37F,UAAU8qC,aAAc,EAOhC6wD,QAAQ37F,UAAU8F,MAAQ,KAO1B61F,QAAQ37F,UAAUmb,KAAO,KAmBzBwgF,QAAQ37F,UAAU67F,WAAa,KAO/BF,QAAQ37F,UAAUsmF,eAAiB,KAOnCqV,QAAQ37F,UAAUqqG,WAAa,KAO/B1O,QAAQ37F,UAAUwG,aAAe,KAQjCm1F,QAAQ37F,UAAU+7F,eAAiB,KAOnCJ,QAAQ37F,UAAU47F,WAAa,KAQ/BD,QAAQ37F,UAAUkiB,QAAU,KAO5By5E,QAAQ37F,UAAU+rC,SAAW,GAQ7B4vD,QAAQ37F,UAAUmpC,aAAc,EAQhCwyD,QAAQ37F,UAAUsqG,cAAe,EAOjC3O,QAAQ37F,UAAUuyF,uBAAwB,EAQ1CoJ,QAAQ37F,UAAUuqG,kBAAmB,EAQrC5O,QAAQ37F,UAAUwqG,iBAAmB,IAQrC7O,QAAQ37F,UAAUyqG,mBAAqB,GAOvC9O,QAAQ37F,UAAU0qG,WAAa,EAO/B/O,QAAQ37F,UAAU0qG,WAAa,EAO/B/O,QAAQ37F,UAAU2qG,cAAgB,EAQlChP,QAAQ37F,UAAU4qG,mBAAoB,EAOtCjP,QAAQ37F,UAAU6qG,gBAAkB,IAOpClP,QAAQ37F,UAAU8qG,sBAAuB,EAQzCnP,QAAQ37F,UAAU+qG,iBAAkB,EAOpCpP,QAAQ37F,UAAUgrG,cAAgB,EAOlCrP,QAAQ37F,UAAUirG,cAAgB,EAQlCtP,QAAQ37F,UAAUqlD,UAAY,EAU9Bs2C,QAAQ37F,UAAUkrG,eAAiB,GAQnCvP,QAAQ37F,UAAUmrG,cAAgB,KAQlCxP,QAAQ37F,UAAUorG,mBAAqB,KAgBvCzP,QAAQ37F,UAAUq0C,gBAAkB,KAQpCsnD,QAAQ37F,UAAU8lG,aAAc,EAShCnK,QAAQ37F,UAAUqrG,mBAAoB,EAOtC1P,QAAQ37F,UAAUsrG,eAAiB,OAOnC3P,QAAQ37F,UAAUurG,iBAAkB,EAQpC5P,QAAQ37F,UAAUwrG,iBAAmB,GASrC7P,QAAQ37F,UAAUyrG,gBAAiB,EAUnC9P,QAAQ37F,UAAUgjB,WAAazhB,YAAY4hB,wBAQ3Cw4E,QAAQ37F,UAAU4lF,UAAY,IAO9B+V,QAAQ37F,UAAU4oC,SAAU,EAQ5B+yD,QAAQ37F,UAAU0rG,eAAgB,EAUlC/P,QAAQ37F,UAAU2rG,wBAAyB,EAU3ChQ,QAAQ37F,UAAU4rG,uBAAwB,EAU1CjQ,QAAQ37F,UAAU6rG,yBAA0B,EAO5ClQ,QAAQ37F,UAAU8rG,eAAgB,EAOlCnQ,QAAQ37F,UAAU+rG,eAAgB,EAOlCpQ,QAAQ37F,UAAUgsG,aAAc,EAOhCrQ,QAAQ37F,UAAUisG,gBAAiB,EAQnCtQ,QAAQ37F,UAAU6yF,gBAAiB,EAOnC8I,QAAQ37F,UAAUksG,eAAgB,EAOlCvQ,QAAQ37F,UAAUmsG,gBAAiB,EAOnCxQ,QAAQ37F,UAAUosG,cAAe,EAOjCzQ,QAAQ37F,UAAUqsG,mBAAoB,EAOtC1Q,QAAQ37F,UAAUssG,qBAAsB,EAOxC3Q,QAAQ37F,UAAUusG,aAAc,EAShC5Q,QAAQ37F,UAAUwsG,cAAe,EAOjC7Q,QAAQ37F,UAAUysG,gBAAiB,EAOnC9Q,QAAQ37F,UAAU0sG,eAAgB,EAOlC/Q,QAAQ37F,UAAU2sG,iBAAkB,EAOpChR,QAAQ37F,UAAU4sG,qBAAsB,EAQxCjR,QAAQ37F,UAAU6sG,eAAgB,EAOlClR,QAAQ37F,UAAU8sG,oBAAqB,EAavCnR,QAAQ37F,UAAUsrC,YAAa,EAU/BqwD,QAAQ37F,UAAU+sG,kBAAmB,EAUrCpR,QAAQ37F,UAAUgtG,2BAA4B,EAW9CrR,QAAQ37F,UAAUitG,iBAAkB,EAUpCtR,QAAQ37F,UAAUktG,kBAAmB,EASrCvR,QAAQ37F,UAAUwrC,YAAa,EAS/BmwD,QAAQ37F,UAAUmtG,mBAAqB,KAQvCxR,QAAQ37F,UAAUotG,iBAAmB,KAQrCzR,QAAQ37F,UAAUqtG,qBAAuB,KAQzC1R,QAAQ37F,UAAUstG,qBAAuB,KAQzC3R,QAAQ37F,UAAUutG,iBAAkB,EAQpC5R,QAAQ37F,UAAUijB,OAAS,EAS3B04E,QAAQ37F,UAAU+mG,uBAAwB,EAS1CpL,QAAQ37F,UAAUgnG,uBAAwB,EAO1CrL,QAAQ37F,UAAUwtG,0BAA2B,EAQ7C7R,QAAQ37F,UAAUytG,mBAAoB,EAStC9R,QAAQ37F,UAAU0tG,2BAA4B,EAQ9C/R,QAAQ37F,UAAU2tG,eAAgB,EAQlChS,QAAQ37F,UAAU4tG,oBAAqB,EAQvCjS,QAAQ37F,UAAU6tG,qBAAsB,EAQxClS,QAAQ37F,UAAU8tG,iBAAkB,EAQpCnS,QAAQ37F,UAAU+tG,yBAA0B,EAQ5CpS,QAAQ37F,UAAUguG,WAAa,IAQ/BrS,QAAQ37F,UAAUiuG,4BAA6B,EAQ/CtS,QAAQ37F,UAAUkuG,YAAa,EAQ/BvS,QAAQ37F,UAAUmuG,uBAAwB,EAQ1CxS,QAAQ37F,UAAUouG,oBAAqB,EAQvCzS,QAAQ37F,UAAUquG,kBAAmB,EAQrC1S,QAAQ37F,UAAUsuG,qBAAsB,EAOxC3S,QAAQ37F,UAAUuuG,YAAa,EAQ/B5S,QAAQ37F,UAAU8nG,iBAAmBlT,YAAYY,KAQjDmG,QAAQ37F,UAAUwuG,YAAa,EAQ/B7S,QAAQ37F,UAAUyuG,kBAAmB,EAQrC9S,QAAQ37F,UAAU0uG,oBAAqB,EAQvC/S,QAAQ37F,UAAU2uG,mBAAoB,EAQtChT,QAAQ37F,UAAU4uG,kBAAmB,EAQrCjT,QAAQ37F,UAAU6uG,eAAgB,EAOlClT,QAAQ37F,UAAU8uG,YAAa,EAQ/BnT,QAAQ37F,UAAU+uG,0BAA2B,EAO7CpT,QAAQ37F,UAAUgvG,iBAAkB,EAQpCrT,QAAQ37F,UAAU0xF,gCAAkCnwF,YAAYurB,gBAOhE6uE,QAAQ37F,UAAUg8F,aAAe,KAQjCL,QAAQ37F,UAAUivG,YAAc,GAQhCtT,QAAQ37F,UAAUkvG,YAAc,EAOhCvT,QAAQ37F,UAAUorC,MAAQ,EAO1BuwD,QAAQ37F,UAAUqrC,MAAQ,EAQ1BswD,QAAQ37F,UAAUmvG,eAAiB,IAAIprE,QAAQjwC,SAAS0F,cAAgB,iBAAkB,EAAG,GAQ7FmiG,QAAQ37F,UAAUovG,cAAgB,IAAIrrE,QAAQjwC,SAAS0F,cAAgB,gBAAiB,EAAG,GAU3FmiG,QAAQ37F,UAAUqvG,aAAe,IAAItrE,QAAQjwC,SAAS0F,cAAgB,YACnE1F,SAAe,OAAI,OAAS,QAAS,GAAI,IAU5C6nG,QAAQ37F,UAAUsvG,yBAAiD,QAArBx7G,SAAS4F,SAAsB,mBAAqB,GAUlGiiG,QAAQ37F,UAAUuvG,iCAAyD,QAArBz7G,SAAS4F,SAAsB,2BAA6B,GASlHiiG,QAAQ37F,UAAUwvG,uBAA+C,QAArB17G,SAAS4F,SAAsB,kBAAoB,GAW/FiiG,QAAQ37F,UAAUjF,KAAO,SAASwgB,GAEjC3nB,KAAK2nB,UAAYA,EAGjB3nB,KAAKy2G,WAAaz2G,KAAK67G,mBAGvB77G,KAAKunB,KAAKpgB,OAGVnH,KAAKixG,gBAGLhnG,QAAQD,YAAY2d,EAAW,aAAcrf,QAAQ2M,KAAKjV,MAAM,WAEpC,MAAvBA,KAAK07F,gBAER17F,KAAK07F,eAAe9pD,WAKlB1xC,SAASE,QAEZ6J,QAAQD,YAAYxI,OAAQ,SAAU8G,QAAQ2M,KAAKjV,MAAM,WAExDA,KAAKivB,cAINhlB,QAAQD,YAAY2d,EAAW,cAC9Brf,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE3B,OAAOnI,KAAK+yF,cAAiB/yF,KAAKk3C,cAAgBjtC,QAAQ08B,YAAYx+B,QAO5C,GAAzBtH,SAASC,cAEZ6mB,EAAUqtC,mBAAmB,YAAa,IAAM90D,SAASe,WAAf,mCACVf,SAASe,WAAa,YAUxD8mG,QAAQ37F,UAAUw8F,eAAiB,WAElC5oG,KAAK07F,eAAiB17F,KAAK87G,uBAC3B97G,KAAK07F,eAAe/lD,YAAW,GAC/B31C,KAAK4gG,sBAAwB5gG,KAAK+7G,8BAClC/7G,KAAKg8G,kBAAoBh8G,KAAKi8G,0BAC9Bj8G,KAAKg8G,kBAAkBrmE,YAAW,GAClC31C,KAAKq3C,aAAer3C,KAAKk8G,qBACzBl8G,KAAKm8G,eAAiBn8G,KAAKo8G,uBAC3Bp8G,KAAKm8G,eAAeE,gBAAiB,EACrCr8G,KAAKg2G,iBAAmBh2G,KAAKs8G,0BAQ9BvU,QAAQ37F,UAAU0vG,qBAAuB,WAExC,OAAO,IAAI7M,iBAAiBjvG,OAQ7B+nG,QAAQ37F,UAAU2vG,4BAA8B,WAE/C,OAAO,IAAI3O,wBAAwBptG,OAQpC+nG,QAAQ37F,UAAU6vG,wBAA0B,WAE3C,OAAO,IAAIzO,oBAAoBxtG,OAQhC+nG,QAAQ37F,UAAU8vG,mBAAqB,WAEtC,OAAO,IAAI/Q,eAAenrG,OAQ3B+nG,QAAQ37F,UAAUgwG,qBAAuB,WAExC,OAAO,IAAI9P,iBAAiBtsG,OAQ7B+nG,QAAQ37F,UAAUkwG,uBAAyB,WAE1C,OAAO,IAAIvP,mBAAmB/sG,OAQ/B+nG,QAAQ37F,UAAUm8F,qBAAuB,WAExC,OAAO,IAAI/V,sBAAsBxyF,OAQlC+nG,QAAQ37F,UAAUq8F,iBAAmB,WAEpC,OAAO,IAAIxW,cAQZ8V,QAAQ37F,UAAUs8F,gBAAkB,WAEnC,OAAO,IAAId,YAAY5nG,OAQxB+nG,QAAQ37F,UAAUi8F,mBAAqB,WAEtC,OAAO,IAAInV,gBAQZ6U,QAAQ37F,UAAUyvG,iBAAmB,WAEpC,OAAO,IAAIhpB,aAAa7yF,OAQzB+nG,QAAQ37F,UAAU2hB,SAAW,WAE5B,OAAO/tB,KAAKkS,OAQb61F,QAAQ37F,UAAU0F,QAAU,WAE3B,OAAO9R,KAAKunB,MAQbwgF,QAAQ37F,UAAUmwG,cAAgB,WAEjC,OAAOv8G,KAAKioG,YAQbF,QAAQ37F,UAAUo8F,cAAgB,SAASP,GAE1CjoG,KAAKioG,WAAaA,GAQnBF,QAAQ37F,UAAUmhG,kBAAoB,WAErC,OAAOvtG,KAAK0yF,gBAQbqV,QAAQ37F,UAAUk8F,kBAAoB,SAAS5V,GAE9C1yF,KAAK0yF,eAAiBA,GAcvBqV,QAAQ37F,UAAUowG,4BAA8B,SAAStrG,EAASurG,GA0BjE,IAxBA,IAAIh9F,EAAO,IAAItT,aACXge,EAAQ,GAERyuE,EAAUtwF,QAAQ2M,KAAKjV,MAAM,SAASgS,GAEzC,IAAKyN,EAAK5T,IAAImG,IAAShS,KAAKkS,MAAMwU,SAAS1U,GAE1C,GAAIhS,KAAKkS,MAAMC,OAAOH,IAAShS,KAAKkS,MAAM2vC,SAAS7vC,GAElDyN,EAAKlT,IAAIyF,GAAM,GACfmY,EAAMvd,KAAKoF,QAMX,IAFA,IAAIkB,EAAalT,KAAKkS,MAAMiB,cAAcnB,GAEjCnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/B+zF,EAAQ54F,KAAKkS,MAAMkB,WAAWpB,EAAMnN,OAM/BA,EAAI,EAAGA,EAAIqM,EAAQ/O,OAAQ0C,IACpC,CACC,IAAI0M,EAASL,EAAQrM,GAErB,GAAI0M,EAAOtF,aAAes6E,eACZ,MAAZk2B,IAAqBA,EAASlrG,IAChC,CACC,IAAIS,EAAO,KAEPT,aAAkBI,cAErBK,EAAOT,EAAOU,OAELyqG,eAAgC,MAAfnrG,EAAOS,MACjCT,EAAOS,gBAAgB60E,SAEvB70E,EAAOT,EAAOS,MAGH,MAARA,GAEH4mF,EAAQ5mF,IAKX,OAAOmY,GAaR49E,QAAQ37F,UAAU4wC,kBAAoB,SAAS9rC,GAE9C,IAAK,IAAIrM,EAAI,EAAGA,EAAIqM,EAAQ/O,OAAQ0C,IAEnC7E,KAAK28G,cAAczrG,EAAQrM,IAG5B7E,KAAK48G,kBACL58G,KAAKunB,KAAK6mF,WACVpuG,KAAKixG,iBAQNlJ,QAAQ37F,UAAUwwG,gBAAkB,WAKnC,IAHA,IAAIzyF,EAAQnqB,KAAK6uC,oBACb+jD,EAAU,GAEL/tF,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC,GAAK7E,KAAKkS,MAAMwU,SAASyD,EAAMtlB,KAAQ7E,KAAK8qE,cAAc3gD,EAAMtlB,IAQ/D,IAFA,IAAIonF,EAAMjsF,KAAKkS,MAAM+vC,UAAU93B,EAAMtlB,IAEvB,MAAPonF,GAAeA,GAAOjsF,KAAKunB,KAAK0lD,aACvC,CACC,GAAIjtE,KAAK6tE,gBAAgBoe,KAASjsF,KAAK8qE,cAAcmhB,GACrD,CACC2G,EAAQhmF,KAAKud,EAAMtlB,IACnB,MAGDonF,EAAMjsF,KAAKkS,MAAM+vC,UAAUgqC,QAd5B2G,EAAQhmF,KAAKud,EAAMtlB,IAmBrB7E,KAAK68G,qBAAqBjqB,IAc3BmV,QAAQ37F,UAAUuwG,cAAgB,SAASprG,GAI1C,GAAIA,aAAkBg1E,aAErBvmF,KAAKiY,iBACLjY,KAAK88G,iBAAiB,MACtB98G,KAAK+8G,mBAAmBxrG,EAAO/E,UAE3BxM,KAAKu6G,wBAERv6G,KAAKunB,KAAKjV,MAAQ,EAClBtS,KAAKunB,KAAKoH,UAAUvf,EAAI,EACxBpP,KAAKunB,KAAKoH,UAAUtf,EAAI,GAGzBrP,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQs/B,YAMrC,GAAIh4B,aAAkBI,cAC3B,CACC,IAAIqrG,EAAYh9G,KAAKkS,MAAM+vC,UAAU1wC,EAAOU,OAC5CjS,KAAKunB,KAAK4mF,WAAW58F,EAAOU,OAAO,GAAM,GAEpCjS,KAAKkS,MAAMwU,SAASs2F,KAAch9G,KAAK6tE,gBAAgBmvC,KAE3Dh9G,KAAKunB,KAAK4mF,WAAW58F,EAAOU,OAAO,GAAM,GACzCjS,KAAK+8G,mBAAmBxrG,EAAOU,OAG3BjS,KAAKunB,KAAK0lD,aAAe17D,EAAOU,OAEnCjS,KAAKi9G,QAIHD,GAAazrG,EAAO/E,WAGN,MAAbwwG,GAEHh9G,KAAKunB,KAAK4mF,WAAW6O,GAAW,GAAO,GAGjB,MAAnBzrG,EAAO/E,UAEVxM,KAAKunB,KAAK4mF,WAAW58F,EAAO/E,UAAU,GAAO,SAO3C,GAAI+E,aAAkBE,kBAAoBF,aAAkBC,kBAG5DD,aAAkBE,kBAAyC,MAAnBF,EAAO/E,UAAuC,MAAnB+E,EAAOiB,UACzD,MAAnBjB,EAAO/E,WAAqB+E,EAAO/E,SAASgD,OAAO+B,EAAOiB,YAE3DxS,KAAKunB,KAAK4mF,WAAW58F,EAAOS,WAMzB,GAAIT,aAAkBG,cAE1B1R,KAAKunB,KAAK4mF,WAAW58F,EAAOS,MAAM,GAAO,QAIrC,GAAIT,aAAkBK,cAC3B,CACC5R,KAAKunB,KAAK4mF,WAAW58F,EAAOS,MAAM,GAAM,GACxC,IAAIH,EAAQ7R,KAAKunB,KAAKxV,SAASR,EAAOS,MAEzB,MAATH,IAEHA,EAAMmlF,cAAe,QAKC,MAAfzlF,EAAOS,MAAgBT,EAAOS,gBAAgB60E,QAEtD7mF,KAAK+8G,mBAAmBxrG,EAAOS,OAcjC+1F,QAAQ37F,UAAU2wG,mBAAqB,SAAS/qG,GAI/C,IAFA,IAAIkB,EAAalT,KAAKkS,MAAMiB,cAAcnB,GAEjCnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/B7E,KAAK+8G,mBAAmB/8G,KAAKkS,MAAMkB,WAAWpB,EAAMnN,IAGrD7E,KAAKunB,KAAK4mF,WAAWn8F,GAAM,GAAO,GAClChS,KAAKunB,KAAK+pF,YAAYt/F,IAkBvB+1F,QAAQ37F,UAAU8wG,eAAiB,SAASlrG,EAAMgiF,GAE5B,MAAjBhiF,EAAKsxC,WAERtxC,EAAKsxC,SAAW,IAGjBtxC,EAAKsxC,SAAS12C,KAAKonF,GAEnB,IAAIniF,EAAQ7R,KAAKunB,KAAKxV,SAASC,GAW/B,OARa,MAATH,GAEH7R,KAAK4S,aAAaC,OAAOhB,GAG1B7R,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ6iC,YACvC,OAAQ96B,EAAM,UAAWgiF,IAEpBA,GAaR+T,QAAQ37F,UAAUyyF,gBAAkB,SAAS7sF,GAE5C,OAAOA,EAAKsxC,UAebykD,QAAQ37F,UAAU+wG,kBAAoB,SAASnrG,EAAMgiF,GAEpD,GAAe,MAAXA,EAEHh0F,KAAKo9G,mBAAmBprG,OAGzB,CACC,IAAIvD,EAAQnG,QAAQ/H,QAAQyR,EAAKsxC,SAAU0wC,GAE3C,GAAIvlF,GAAS,EACb,CACCuD,EAAKsxC,SAASltC,OAAO3H,EAAO,GAEA,GAAxBuD,EAAKsxC,SAASnhD,SAEjB6P,EAAKsxC,SAAW,MAIjB,IAAIzxC,EAAQ7R,KAAKunB,KAAKxV,SAASC,GAElB,MAATH,GAEH7R,KAAK4S,aAAaC,OAAOhB,GAG1B7R,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ8iC,eACvC,OAAQ/6B,EAAM,UAAWgiF,SAI3BA,EAAU,KAIZ,OAAOA,GAcR+T,QAAQ37F,UAAUgxG,mBAAqB,SAASprG,GAE/C,IAAIsxC,EAAWtxC,EAAKsxC,SAEpB,GAAgB,MAAZA,EACJ,CACCtxC,EAAKsxC,SAAW,KAGhB,IAAIzxC,EAAQ7R,KAAKunB,KAAKxV,SAASC,GAElB,MAATH,GAEH7R,KAAK4S,aAAaC,OAAOhB,GAG1B,IAAK,IAAIhN,EAAI,EAAGA,EAAIy+C,EAASnhD,OAAQ0C,IAEpC7E,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ8iC,eACvC,OAAQ/6B,EAAM,UAAWsxC,EAASz+C,KAItC,OAAOy+C,GAgBRykD,QAAQ37F,UAAUixG,kBAAoB,SAASrrG,GAE9CA,EAAgB,MAARA,EAAgBA,EAAOhS,KAAKkS,MAAM8b,UAC1ChuB,KAAKo9G,mBAAmBprG,GAKxB,IAFA,IAAIkB,EAAalT,KAAKkS,MAAMiB,cAAcnB,GAEjCnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQjS,KAAKkS,MAAMkB,WAAWpB,EAAMnN,GACxC7E,KAAKq9G,kBAAkBprG,KA4BzB81F,QAAQ37F,UAAUkxG,eAAiB,SAAStrG,EAAMurG,EAASzrF,EAAK0rF,GAE/D,GAAe,MAAXD,GAAmBA,EAAQp7G,OAAS,EACxC,CAIC,IAAI6xF,EAAU,IAAI8U,cAHlBh3E,EAAc,MAAPA,EAAeA,EAAM9xB,KAAKy7G,aAIhC,mBAAmB8B,EAAQ,WAiB5B,OAdIC,GAEHxpB,EAAQhqF,YAAYC,QAAQ0gC,MAC3BriC,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAE/BnI,KAAK2T,aAER3T,KAAKy9G,iBAAiBzrG,OAOnBhS,KAAKk9G,eAAelrG,EAAMgiF,GAOlC,OAHCh0F,KAAKo9G,mBAAmBprG,GAGlB,MAiBR+1F,QAAQ37F,UAAUqvF,aAAe,SAAStzF,GAEzCnI,KAAK09G,mBAAmB,KAAMv1G,IAe/B4/F,QAAQ37F,UAAUsxG,mBAAqB,SAAS1rG,EAAM7J,GAE1C,MAAPA,GAAgB8B,QAAQk8B,kBAAkBh+B,KAEjC,MAAR6J,IAIS,OAFZA,EAAOhS,KAAK29G,qBAES39G,KAAK49G,eAAe5rG,KAExCA,EAAO,OAIG,MAARA,IAEHhS,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ0iC,cACvC,OAAQ36B,EAAM,QAAS7J,IACzBnI,KAAKy2G,WAAWhb,aAAazpF,EAAM7J,GACnCnI,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ2iC,gBACvC,OAAQ56B,EAAM,QAAS7J,OAkB5B4/F,QAAQ37F,UAAU6tF,gBAAkB,SAASjoF,EAAM7J,GAElD,OAAOnI,KAAK69G,qBAAqB7rG,IAalC+1F,QAAQ37F,UAAU6mF,YAAc,SAASgJ,GAExCj8F,KAAKy2G,WAAWxjB,YAAYgJ,GAC5Bj8F,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ4iC,gBAAiB,SAAUovD,KAgBrE8L,QAAQ37F,UAAU0tF,aAAe,SAAS9nF,EAAMjK,EAAOI,GAEtDnI,KAAKkS,MAAMuZ,cACX,IAEC,IAAIuiB,EAAMh8B,EAAKjK,MACf/H,KAAK89G,iBAAiB9rG,EAAMjK,EAAO/H,KAAK+9G,eAAe/rG,IACvDhS,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQqiC,cACxC,OAAQt6B,EAAM,QAASjK,EAAO,MAAOimC,EAAK,QAAS7lC,IAErD,QAECnI,KAAKkS,MAAM0Z,YAGZ,OAAO5Z,GAkCR+1F,QAAQ37F,UAAU0xG,iBAAmB,SAAS9rG,EAAMjK,EAAOkxF,GAE1Dj5F,KAAKkS,MAAMuZ,cACX,IAECzrB,KAAKkS,MAAMq7E,SAASv7E,EAAMjK,GAEtBkxF,GAEHj5F,KAAKg+G,gBAAgBhsG,GAAM,GAG7B,QAEChS,KAAKkS,MAAM0Z,cAiBbm8E,QAAQ37F,UAAUmjG,OAAS,SAASpnG,GAEnCnI,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQgjC,OAAQ,QAAS9kC,KAiC3D4/F,QAAQ37F,UAAU6xG,MAAQ,SAASrtE,GAElC,IAAIzoC,EAAMyoC,EAAGrO,WACTvwB,EAAO4+B,EAAG5N,UACVk7E,EAAM,IAAI18E,cAAcv3B,QAAQ0gC,MAAO,QAASxiC,EAAK,OAAQ6J,GAUjE,GARI4+B,EAAGzO,cAEN+7E,EAAI97E,UAGLpiC,KAAKwjC,UAAU06E,GAGXl+G,KAAK2T,cAAgB1J,QAAQk4B,WAAWh6B,KAAS+1G,EAAI/7E,aAExD,GAAY,MAARnwB,EACJ,CACC,GAAIhS,KAAKm+G,wBAAwBh2G,GACjC,CACC,IAAIszC,GAAS,EAET5qC,EAAM7Q,KAAK+1C,UAAUnF,EAAGvO,OAAQuO,EAAGtO,OAAQ,KAAM,KAAM,KAAMh6B,QAAQ2M,KAAKjV,MAAM,SAAS6R,GAE5F,IAAIusG,EAAWp+G,KAAKq+G,eAAexsG,EAAMG,MAGzC,QAFAypC,EAASA,GAAU2iE,IAEDA,MAGR,MAAPvtG,IAEHmB,EAAOnB,GAIT7Q,KAAKs+G,mBAAmBtsG,EAAM7J,OAG/B,CACC,IAAIo2G,EAAW,KAUf,GARIv+G,KAAKw+G,+BAIRD,EAAWv+G,KAAKy+G,cAAc7tE,EAAG9N,YAAa8N,EAAG7N,cAIlC,MAAZw7E,EACJ,CAIC,IAHA,IAAI1vF,EAAO0vF,EACPhjC,EAAY,GAED,MAAR1sD,GACP,CACCA,EAAO7uB,KAAKkS,MAAM+vC,UAAUpzB,GAC5B,IAAIhd,EAAQ7R,KAAKunB,KAAKxV,SAAS8c,GAE3B7uB,KAAKwtE,WAAW3+C,IAAkB,MAAThd,GAC5B7R,KAAK2mB,WAAW9U,EAAO++B,EAAG9N,YAAa8N,EAAG7N,cAE1Cw4C,EAAU3uE,KAAKiiB,GAKjB,GAAI0sD,EAAUp5E,OAAS,EACvB,EACCo5E,EAAYA,EAAUmjC,WACZtoG,OAAO,EAAG,EAAGmoG,GACvBhjC,EAAU3uE,KAAK2xG,GAEf,IAAK,IAAI15G,EAAI,EAAGA,EAAI02E,EAAUp5E,OAAS,EAAG0C,IAErC7E,KAAKq+G,eAAe9iC,EAAU12E,MAEjC05G,EAAWhjC,EAAU12E,EAAI,IAK5B7E,KAAKs+G,mBAAmBC,EAAUp2G,QAGzBnI,KAAK2+G,cAAcx2G,IAE5BnI,KAAKiY,mBA8CT8vF,QAAQ37F,UAAU24B,SAAW,SAAS58B,EAAK6J,GAE1C,IAAIksG,EAAM,IAAI18E,cAAcv3B,QAAQijC,aAAc,QAAS/kC,EAAK,OAAQ6J,GACxEhS,KAAKwjC,UAAU06E,IAGXl+G,KAAK2T,aAAgB1J,QAAQk4B,WAAWh6B,IAAS+1G,EAAI/7E,cAChD,MAARnwB,IAAgBhS,KAAK49G,eAAe5rG,IAAUhS,KAAK+yF,UAAU/gF,KAE7DhS,KAAK09G,mBAAmB1rG,EAAM7J,GAC9B8B,QAAQm4B,QAAQj6B,KAclB4/F,QAAQ37F,UAAUwyG,WAAa,SAAShuE,GAEvC,IAAIzoC,EAAMyoC,EAAGrO,WACT27E,EAAM,IAAI18E,cAAcv3B,QAAQ8+B,aAAc,QAAS5gC,EAAK,OAAQyoC,EAAG5N,WAY3E,GATAhjC,KAAKwjC,UAAU06E,GAEXA,EAAI/7E,eAGPniC,KAAKm8G,eAAe0C,gBAAiB,GAIlC7+G,KAAK2T,cAAgB1J,QAAQk4B,WAAWh6B,KAAS+1G,EAAI/7E,cAAgBniC,KAAKg8G,kBAAkBroG,YAChG,CACC,IAAI9B,EAAQ7R,KAAKunB,KAAKxV,SAAS/R,KAAKg8G,kBAAkB8C,OAAO97E,QAAQ4N,IAExD,MAAT/+B,IAEH7R,KAAKg8G,kBAAkB8C,OAAOC,aAAe/+G,KAAKg8G,kBAAkB8C,OAAO5R,WAC3EltG,KAAKg8G,kBAAkB8C,OAAOE,YAAcntG,EAC5C7R,KAAKg8G,kBAAkB8C,OAAOG,OAE9Bj/G,KAAKg8G,kBAAkB1c,MAAQ,IAAInwF,QAAQyhC,EAAG9N,YAAa8N,EAAG7N,aAC9D/iC,KAAKg8G,kBAAkBxoG,UAAYxT,KAAKg8G,kBAAkBkD,gBAAgBtuE,GAC1E5wC,KAAKg8G,kBAAkBxvG,SAAWqF,EAClC7R,KAAKg8G,kBAAkBx4E,UAAU,IAAIhC,cAAcv3B,QAAQkjC,MAAO,QAASntC,KAAKg8G,kBAAkBxvG,cAWrGu7F,QAAQ37F,UAAUurC,qBAAuB,SAASvoC,EAAGC,EAAGqQ,EAAQ2P,GAE/D,GAAKrvB,KAAKq5G,kBAAoBr5G,KAAKm5G,mBAAoB7wG,QAAQyM,cAAc/U,KAAK2nB,WAwFzE3nB,KAAKs5G,mBAAqBt5G,KAAKm8G,eAAenmE,aAE3B,MAAvBh2C,KAAKm/G,iBAERn/G,KAAKm/G,eAAiBn/G,KAAKo/G,wBAG5Bp/G,KAAKm/G,eAAe3iE,MAAMptC,EAAIpP,KAAKw3C,MAAOnoC,EAAIrP,KAAKy3C,YA9FpD,CACC,IAAIxoC,EAAIjP,KAAK2nB,UAGb,GAFA0H,EAAoB,MAAVA,EAAkBA,EAAS,GAEjCjgB,GAAKH,EAAEgZ,YAAc5Y,GAAKJ,EAAEzD,WAAa4D,GAAKH,EAAEgZ,WAAahZ,EAAE/F,aAClEmG,GAAKJ,EAAEzD,UAAYyD,EAAEhG,aACtB,CACC,IAAIsJ,EAAKtD,EAAEgZ,WAAahZ,EAAE/F,YAAckG,EAExC,GAAImD,EAAK8c,EACT,CACC,IAAI2e,EAAM/+B,EAAEgZ,WAMZ,GALAhZ,EAAEgZ,YAAcoH,EAAS9c,EAKrBmN,GAAUsuB,GAAO/+B,EAAEgZ,WACvB,CACC,GAAIjoB,KAAKsuB,SAAW3gB,YAAY4gB,YAChC,CACC,IAAIuvB,EAAO99C,KAAKunB,KAAK0sE,cAAchjE,gBAC/BhpB,EAAQjI,KAAK2nB,UAAUurC,YAAc7jC,EAAS9c,EAIlDurC,EAAKp2C,MAAMO,MAAQA,EAAQ,UAIvBA,EAAQmB,KAAKC,IAAI4F,EAAE/F,YAAa+F,EAAEikD,aAAe7jC,EAAS9c,EACjDvS,KAAKunB,KAAK0uE,YAChBvuF,MAAMO,MAAQA,EAAQ,KAG9BgH,EAAEgZ,YAAcoH,EAAS9c,QAK1BA,EAAKnD,EAAIH,EAAEgZ,YAEFoH,IAERpgB,EAAEgZ,YAAcoH,EAAS9c,GAI3B,IAAIE,EAAKxD,EAAEzD,UAAYyD,EAAEhG,aAAeoG,EAExC,GAAIoD,EAAK4c,GAKR,GAHI2e,EAAM/+B,EAAEzD,UACZyD,EAAEzD,WAAa6jB,EAAS5c,EAEpBu7B,GAAO/+B,EAAEzD,WAAakU,EAC1B,CACC,GAAI1f,KAAKsuB,SAAW3gB,YAAY4gB,YAChC,CACKuvB,EAAO99C,KAAKunB,KAAK0sE,cAAchjE,gBAAnC,IACIppB,EAAS7H,KAAK2nB,UAAUlc,aAAe4jB,EAAS5c,EAIpDqrC,EAAKp2C,MAAMG,OAASA,EAAS,UAIzBA,EAASuB,KAAKC,IAAI4F,EAAEhG,aAAcgG,EAAExD,cAAgB4jB,EAAS5c,EACpDzS,KAAKunB,KAAK0uE,YAChBvuF,MAAMG,OAASA,EAAS,KAGhCoH,EAAEzD,WAAa6jB,EAAS5c,QAKzBA,EAAKpD,EAAIJ,EAAEzD,WAEF6jB,IAERpgB,EAAEzD,WAAa6jB,EAAS5c,MAsB7Bs1F,QAAQ37F,UAAUgzG,qBAAuB,WAExC,OAAO,IAAI7jE,iBAAiBv7C,OAU7B+nG,QAAQ37F,UAAUizG,eAAiB,WAElC,IAAI/xD,EAAMhlD,QAAQiM,gBAAgBvU,KAAK2nB,WAEvC,OAAO,IAAIrY,YAAYhH,QAAQoM,eAAe44C,EAAInxC,cACvB,QAAvBmxC,EAAIgyD,gBAA6Bh3G,QAAQoM,eAAe44C,EAAIiyD,iBAAmB,GAClFj3G,QAAQoM,eAAe44C,EAAIkyD,aACF,QAAtBlyD,EAAImyD,eAA4Bn3G,QAAQoM,eAAe44C,EAAIoyD,gBAAkB,GAChFp3G,QAAQoM,eAAe44C,EAAIxN,eACA,QAAxBwN,EAAIqyD,iBAA8Br3G,QAAQoM,eAAe44C,EAAIsyD,kBAAoB,GACpFt3G,QAAQoM,eAAe44C,EAAIuyD,gBACC,QAAzBvyD,EAAIwyD,kBAA+Bx3G,QAAQoM,eAAe44C,EAAIyyD,mBAAqB,KAQxFhY,QAAQ37F,UAAU4zG,qBAAuB,SAASv5F,EAAQxe,EAAOJ,GAEpD7H,KAAKunB,KAAKjV,MAAtB,IACI9K,EAAKxH,KAAKunB,KAAKoH,UACf43C,EAAMvmE,KAAKovB,WACXsrC,EAAK16D,KAAKgyF,UACViuB,EAAO,IAAI3wG,YAAY,EAAG,EAAGlG,KAAKgZ,KAAKmkD,EAAIt+D,MAAQyyD,GAAKtxD,KAAKgZ,KAAKmkD,EAAI1+D,OAAS6yD,IAE/EwlD,EAAUlgH,KAAsB,kBAAIoJ,KAAKgZ,KAAKna,EAAQg4G,EAAKh4G,OAAS,EACpEk4G,EAAUngH,KAAsB,kBAAIoJ,KAAKgZ,KAAKva,EAASo4G,EAAKp4G,QAAU,EAE1E,OAAO,IAAIyH,YAAY,EAAG,EAAG4wG,EAASD,EAAKh4G,MAAQ,EAAIT,EAAG4H,EAAG+wG,EAASF,EAAKp4G,OAAS,EAAIL,EAAG6H,IAiD5F04F,QAAQ37F,UAAUmQ,IAAM,SAAS8S,EAAQ+wF,EAAY/vD,EAAQrb,EAASqrE,EAAaC,EAAc7vD,GAEhG,GAAsB,MAAlBzwD,KAAK2nB,UACT,CACC0H,EAAoB,MAAVA,EAAkBA,EAASrvB,KAAKugH,YAC1CH,EAA4B,MAAdA,GAAsBA,EACpC/vD,EAAoB,MAAVA,EAAkBA,EAAS,EACrCrb,EAAsB,MAAXA,GAAmBA,EAC9BqrE,EAA8B,MAAfA,GAAuBA,EACtCC,EAAgC,MAAhBA,GAAwBA,EAGxC,IAAIE,EAAYxgH,KAAKq/G,iBACjBoB,EAAKzgH,KAAK2nB,UAAUhL,YAAc6jG,EAAUpxG,EAAIoxG,EAAUv4G,MAAQ,EAClEy4G,EAAmB,MAAbjwD,EAAqBA,EAAYzwD,KAAK2nB,UAAU5d,aAAey2G,EAAUnxG,EAAImxG,EAAU34G,OAAS,EACtG4e,EAASzmB,KAAKunB,KAAKmI,iBAEvB,GAAIjJ,EAAOxe,MAAQ,GAAKwe,EAAO5e,OAAS,EACxC,CACKu4G,GAA0B,MAAZ35F,EAAOrX,GAAyB,MAAZqX,EAAOpX,KAE5CoX,EAASA,EAAOhX,SACTxH,OAASwe,EAAOrX,EACvBqX,EAAO5e,QAAU4e,EAAOpX,EACxBoX,EAAOrX,EAAI,EACXqX,EAAOpX,EAAI,GAIZ,IAAIwJ,EAAI7Y,KAAKunB,KAAKjV,MACdquG,EAAKl6F,EAAOxe,MAAQ4Q,EACpB+nG,EAAKn6F,EAAO5e,OAASgR,EAGG,MAAxB7Y,KAAKygD,kBAERkgE,EAAKv3G,KAAKC,IAAIs3G,EAAI3gH,KAAKygD,gBAAgBx4C,MAAQwe,EAAOrX,EAAIyJ,GAC1D+nG,EAAKx3G,KAAKC,IAAIu3G,EAAI5gH,KAAKygD,gBAAgB54C,OAAS4e,EAAOpX,EAAIwJ,IAG5D,IAAIwD,GAAK,EAAegT,EAAS,EAAIA,GAAUghC,EAAS,EAExDowD,GAAMpkG,EACNqkG,GAAMrkG,EAEN,IAAIwkG,EAAO,EAAgBH,EAAKE,EAAK,EAAiBH,EAAKE,EAC1Dv3G,KAAK2G,IAAI0wG,EAAKE,EAAID,EAAKE,GAYxB,GAVwB,MAApB5gH,KAAKq7G,cAERwF,EAAKz3G,KAAKC,IAAIw3G,EAAI7gH,KAAKq7G,cAGA,MAApBr7G,KAAKs7G,cAERuF,EAAKz3G,KAAK2G,IAAI8wG,EAAI7gH,KAAKs7G,eAGpBtmE,EAkCH,OAAO6rE,EAhCP,GAAKT,EAyBIpgH,KAAKunB,KAAKjV,OAASuuG,GAE3B7gH,KAAKunB,KAAKujF,SAAS+V,QAzBnB,GAAKv4G,QAAQyM,cAAc/U,KAAK2nB,WAQhC,CACC3nB,KAAKunB,KAAKujF,SAAS+V,GACnB,IAAItwG,EAAKvQ,KAAK0vB,iBAEF,MAARnf,EAAGnB,IAENpP,KAAK2nB,UAAUM,WAAa1X,EAAGnB,GAGpB,MAARmB,EAAGlB,IAENrP,KAAK2nB,UAAUnc,UAAY+E,EAAGlB,OAlBhC,CACC,IAAI8Q,EAAkB,MAAZsG,EAAOrX,EAAahG,KAAKmnB,MAAMvwB,KAAKunB,KAAKoH,UAAUvf,EAAIqX,EAAOrX,EAAIyJ,EAAIwW,EAASwxF,EAAKxwD,EAAS,GAAKhhC,EACxGjP,EAAkB,MAAZqG,EAAOpX,EAAajG,KAAKmnB,MAAMvwB,KAAKunB,KAAKoH,UAAUtf,EAAIoX,EAAOpX,EAAIwJ,EAAIwW,EAASwxF,EAAKxwD,EAAS,GAAKhhC,EAE5GrvB,KAAKunB,KAAK2pF,kBAAkB2P,EAAI1gG,EAAIC,KA8BzC,OAAOpgB,KAAKunB,KAAKjV,OAUlBy1F,QAAQ37F,UAAU6kG,cAAgB,WAEjC,IAAIxqF,EAASzmB,KAAK0vB,iBAElB,GAAsB,MAAlB1vB,KAAK2nB,UACT,CACC,IAAI0H,EAASrvB,KAAKugH,YAEdt4G,EAAQmB,KAAKC,IAAI,EAAGod,EAAOrX,GAAKqX,EAAOxe,MAAQ,EAAIonB,EACnDxnB,EAASuB,KAAKC,IAAI,EAAGod,EAAOpX,GAAKoX,EAAO5e,OAAS,EAAIwnB,EAazD,GAXiC,MAA7BrvB,KAAKy5G,uBAERxxG,EAAQmB,KAAKC,IAAIpB,EAAOjI,KAAKy5G,qBAAqBxxG,OAClDJ,EAASuB,KAAKC,IAAIxB,EAAQ7H,KAAKy5G,qBAAqB5xG,SAGjD7H,KAAK25G,iBAER35G,KAAK8gH,kBAAkB74G,EAAOJ,GAG3B7H,KAAK63G,iBAAoB33G,SAASE,OAASJ,KAAKkyG,YACpD,CACC,IAAIrkF,EAAO7tB,KAAKggH,qBAAqBv5F,EAAQrd,KAAKC,IAAI,EAAGpB,GAAQmB,KAAKC,IAAI,EAAGxB,IAEjE,MAARgmB,IAEH5lB,EAAQ4lB,EAAK5lB,MAAQjI,KAAKunB,KAAKjV,MAC/BzK,EAASgmB,EAAKhmB,OAAS7H,KAAKunB,KAAKjV,OAanC,GAT6B,MAAzBtS,KAAKw5G,mBAERvxG,EAAQmB,KAAKC,IAAIpB,EAAOjI,KAAKw5G,iBAAiBvxG,MAAQjI,KAAKunB,KAAKjV,OAChEzK,EAASuB,KAAKC,IAAIxB,EAAQ7H,KAAKw5G,iBAAiB3xG,OAAS7H,KAAKunB,KAAKjV,QAGpErK,EAAQmB,KAAKgZ,KAAKna,GAClBJ,EAASuB,KAAKgZ,KAAKva,GAEf7H,KAAKsuB,SAAW3gB,YAAY4gB,YAChC,CACC,IAAIuvB,EAAO99C,KAAKunB,KAAK0sE,cAAchjE,gBAEvB,MAAR6sB,IAEHA,EAAKp2C,MAAMwpB,SAAW9nB,KAAKC,IAAI,EAAGpB,GAAS,KAC3C61C,EAAKp2C,MAAMypB,UAAY/nB,KAAKC,IAAI,EAAGxB,GAAU,KAC7Ci2C,EAAKp2C,MAAMO,MAAQ,OACnB61C,EAAKp2C,MAAMG,OAAS,aAKjB3H,SAASU,UAGZZ,KAAKunB,KAAK8uF,qBAAqBjtG,KAAKC,IAAI,EAAGpB,GAAQmB,KAAKC,IAAI,EAAGxB,KAI/D7H,KAAKunB,KAAKkH,OAAO/mB,MAAMwpB,SAAW9nB,KAAKC,IAAI,EAAGpB,GAAS,KACvDjI,KAAKunB,KAAKkH,OAAO/mB,MAAMypB,UAAY/nB,KAAKC,IAAI,EAAGxB,GAAU,MAI3D7H,KAAK+gH,iBAAiB/gH,KAAKy3G,kBAAmBxvG,EAAOJ,GAGtD7H,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQy+B,KAAM,SAAUjiB,KAQ1DshF,QAAQ37F,UAAU00G,kBAAoB,SAAS74G,EAAOJ,GAEpB,MAA7B7H,KAAK05G,uBAERzxG,EAAQmB,KAAK2G,IAAI/P,KAAK05G,qBAAqBzxG,MAAOA,GAClDJ,EAASuB,KAAK2G,IAAI/P,KAAK05G,qBAAqB7xG,OAAQA,IAGrD7H,KAAK2nB,UAAUjgB,MAAMO,MAAQmB,KAAKgZ,KAAKna,GAAS,KAChDjI,KAAK2nB,UAAUjgB,MAAMG,OAASuB,KAAKgZ,KAAKva,GAAU,MAcnDkgG,QAAQ37F,UAAU20G,iBAAmB,SAASn2G,EAAS3C,EAAOJ,GAE7D,IAAIyK,EAAQtS,KAAKunB,KAAKjV,MAClB9K,EAAKxH,KAAKunB,KAAKoH,UACf43C,EAAMvmE,KAAKovB,WACXsrC,EAAKpoD,EAAQtS,KAAKgyF,UAClBvrE,EAAS,IAAInX,YAAY,EAAG,EAAGi3D,EAAIt+D,MAAQyyD,EAAI6L,EAAI1+D,OAAS6yD,GAE5DsmD,EAAK1xG,YAAYwB,cAAc9Q,KAAK0vB,kBACxCsxF,EAAG/4G,MAAQmB,KAAKC,IAAI,EAAG23G,EAAG/4G,OAC1B+4G,EAAGn5G,OAASuB,KAAKC,IAAI,EAAG23G,EAAGn5G,QAE3B4e,EAAOrX,EAAIhG,KAAKmnB,OAAOywF,EAAG5xG,EAAI5H,EAAG4H,EAAIkD,GAASmU,EAAOxe,OAASwe,EAAOxe,MAAQT,EAAG4H,EAAIkD,EACpFmU,EAAOpX,EAAIjG,KAAKmnB,OAAOywF,EAAG3xG,EAAI7H,EAAG6H,EAAIiD,GAASmU,EAAO5e,QAAU4e,EAAO5e,OAASL,EAAG6H,EAAIiD,EAEtF0uG,EAAG/4G,MAAQmB,KAAKgZ,MAAM4+F,EAAG/4G,OAAS+4G,EAAG5xG,EAAIqX,EAAOrX,IAAMqX,EAAOxe,OAASwe,EAAOxe,MAC7E+4G,EAAGn5G,OAASuB,KAAKgZ,MAAM4+F,EAAGn5G,QAAUm5G,EAAG3xG,EAAIoX,EAAOpX,IAAMoX,EAAO5e,QAAU4e,EAAO5e,OAKhF,IAAIo5G,GAFJr2G,EAAUA,GAAWxB,KAAK2G,IAAI0W,EAAOxe,MAAOwe,EAAO5e,QAAU7H,KAAK43G,kBAEhCxuG,KAAKgZ,KAAK4+F,EAAGn5G,OAAS4e,EAAO5e,QAAU,EAAI,EACzEq5G,EAAgB,EAAY93G,KAAKgZ,KAAK4+F,EAAG/4G,MAAQwe,EAAOxe,OAAS,EAAI,EACrE+U,GAASkkG,EAAgB,GAAKz6F,EAAOxe,MACrCkV,GAAU8jG,EAAkB,GAAKx6F,EAAO5e,OAEX,MAA7B7H,KAAKmhH,sBAAgCF,EAAkB,IAE1DjhH,KAAKmhH,qBAAuB,IAGE,MAA3BnhH,KAAKohH,oBAA8BF,EAAgB,IAEtDlhH,KAAKohH,mBAAqB,IAG3B,IAAIC,EAAiB/4G,QAAQ2M,KAAKjV,MAAM,SAASshH,GAEhD,GAAc,MAAVA,EACJ,CAGC,IAFA,IAAIpmG,EAASomG,GAAUthH,KAAKmhH,qBAAwBF,EAAkBC,EAE7Dr8G,EAAI,EAAGA,GAAKqW,EAAOrW,IAC5B,CACC,IAAIqhB,EAAOo7F,GAAUthH,KAAKmhH,qBACzB,CAAC,IAAIhyG,QAAQ/F,KAAK2c,MAAMU,EAAOrX,GAAIhG,KAAK2c,MAAMU,EAAOpX,EAAIxK,EAAI4hB,EAAO5e,SAC7D,IAAIsH,QAAQ/F,KAAK2c,MAAMU,EAAOrX,EAAI4N,GAAQ5T,KAAK2c,MAAMU,EAAOpX,EAAIxK,EAAI4hB,EAAO5e,UAC5E,CAAC,IAAIsH,QAAQ/F,KAAK2c,MAAMU,EAAOrX,EAAIvK,EAAI4hB,EAAOxe,OAAQmB,KAAK2c,MAAMU,EAAOpX,IACvE,IAAIF,QAAQ/F,KAAK2c,MAAMU,EAAOrX,EAAIvK,EAAI4hB,EAAOxe,OAAQmB,KAAK2c,MAAMU,EAAOpX,EAAI8N,KAEnF,GAAiB,MAAbmkG,EAAOz8G,GAEVy8G,EAAOz8G,GAAGmuD,OAAS9sC,EACnBo7F,EAAOz8G,GAAGgO,aAGX,CACC,IAAI0uG,EAAY,IAAI1vD,WAAW3rC,EAAKlmB,KAAK03G,gBACzC6J,EAAUjzF,QAAUtuB,KAAKsuB,QACzBizF,EAAU5qE,eAAgB,EAC1B4qE,EAAUzvD,SAAW9xD,KAAK23G,gBAC1B4J,EAAUp6G,KAAKnH,KAAKunB,KAAK2uE,gBACzBqrB,EAAU1uG,SAEVyuG,EAAOz8G,GAAK08G,GAId,IAAS18G,EAAIqW,EAAOrW,EAAIy8G,EAAOn/G,OAAQ0C,IAEtCy8G,EAAOz8G,GAAGoqB,UAGXqyF,EAAOlrG,OAAO8E,EAAOomG,EAAOn/G,OAAS+Y,OAIvCmmG,EAAerhH,KAAKmhH,sBACpBE,EAAerhH,KAAKohH,qBAkBrBrZ,QAAQ37F,UAAU29D,oBAAsB,SAAS/3D,EAAMwvG,GAEtD,IAAI3vG,EAAQ,EAAgB,KAAO7R,KAAKunB,KAAKxV,SAASC,GAEtD,OAAiB,MAATH,EAAiBA,EAAMnK,MAAQ1H,KAAKytE,aAAaz7D,IAiB1D+1F,QAAQ37F,UAAUqhE,aAAe,SAASz7D,GAEzC,IAAI+Y,EAAY/qB,KAAKkS,MAAMyZ,SAAS3Z,GAChCtK,EAAQ,KAwBZ,OAnBCA,EAFG1H,KAAKkS,MAAMC,OAAOH,GAEbhS,KAAKioG,WAAWpR,sBAIhB72F,KAAKioG,WAAWrR,wBAIR,MAAb7rE,IAEHrjB,EAAQ1H,KAAKyhH,qBAAqBzhH,KAAKioG,WAAWx6B,aAAa1iD,EAAWrjB,KAI9D,MAATA,IAEHA,EAAQ,IAAI8nE,QAGN9nE,GAURqgG,QAAQ37F,UAAUq1G,qBAAuB,SAAS/5G,GAEjD,GAAa,MAATA,EACJ,CACC,IAAI4E,EAAM5E,EAAMiG,YAAYysB,aACxBiZ,EAAQrzC,KAAK0hH,oBAAoBp1G,GAYrC,GAVa,MAAT+mC,EAEH3rC,EAAMiG,YAAYysB,aAAeiZ,EAIjCA,EAAQ/mC,EAII,MAAT+mC,GAA2C,eAA1BA,EAAM5tC,UAAU,EAAG,IACxC,CACC,GAA8B,wBAA1B4tC,EAAM5tC,UAAU,EAAG,IAGtB4tC,EAAQA,EAAM5tC,UAAU,EAAG,IAAMk8G,mBAAmBtuE,EAAM5tC,UAAU,UAEhE,GAA8B,0BAA1B4tC,EAAM5tC,UAAU,EAAG,IAC5B,CACC,IAAIm8G,EAAQvuE,EAAM9yC,QAAQ,KAGtBqhH,EAAQ,GAA8C,YAAzCvuE,EAAM5tC,UAAUm8G,EAAQ,EAAGA,EAAQ,KAEnDvuE,EAAQA,EAAM5tC,UAAU,EAAGm8G,GAAS,WACjCvuE,EAAM5tC,UAAUm8G,EAAQ,IAI7Bl6G,EAAMiG,YAAYysB,aAAeiZ,GAInC,OAAO3rC,GAeRqgG,QAAQ37F,UAAUy1G,aAAe,SAASn6G,EAAOyiB,GAIhD,GAAa,OAFbA,EAAQA,GAASnqB,KAAK6uC,qBAGtB,CACC7uC,KAAKkS,MAAMuZ,cACX,IAEC,IAAK,IAAI5mB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC7E,KAAKkS,MAAMwZ,SAASvB,EAAMtlB,GAAI6C,GAGhC,QAEC1H,KAAKkS,MAAM0Z,eAoBdm8E,QAAQ37F,UAAU01G,gBAAkB,SAASx1G,EAAKyC,EAAciD,GAI/D,OAFAA,EAAOA,GAAQhS,KAAK29G,mBAEb39G,KAAK+hH,iBAAiBz1G,EAAKyC,EAAc,CAACiD,KAmBlD+1F,QAAQ37F,UAAU21G,iBAAmB,SAASz1G,EAAKyC,EAAcob,GAEhEpb,EAAgC,MAAhBA,GAAwBA,EAExC,IAAIhH,EAAQ,KAEZ,GAAa,OAHboiB,EAAQA,GAASnqB,KAAK6uC,sBAGD1kB,EAAMhoB,OAAS,EACpC,CACC,IAAIuF,EAAQ1H,KAAK+pE,oBAAoB5/C,EAAM,IAC3CpiB,EAASO,QAAQyW,SAASrX,EAAO4E,EAAKyC,GAAiB,EAAI,EAC3D/O,KAAKwrB,cAAclf,EAAKvE,EAAOoiB,GAGhC,OAAOpiB,GAmBRggG,QAAQ37F,UAAUof,cAAgB,SAASlf,EAAKvE,EAAOoiB,GAEtDA,EAAQA,GAASnqB,KAAK6uC,oBACtBvmC,QAAQkjB,cAAcxrB,KAAKkS,MAAOiY,EAAO7d,EAAKvE,IAgB/CggG,QAAQ37F,UAAU41G,qBAAuB,SAAS11G,EAAK0f,EAAM7B,GAE5DnqB,KAAK+rB,kBAAkBzf,EAAK0f,EAAM,KAAM7B,IAiBzC49E,QAAQ37F,UAAU2f,kBAAoB,SAASzf,EAAK0f,EAAMjkB,EAAOoiB,GAIhE,GAAa,OAFbA,EAAQA,GAASnqB,KAAK6uC,sBAED1kB,EAAMhoB,OAAS,EACpC,CACC,GAAa,MAAT4F,EACJ,CACC,IAAIL,EAAQ1H,KAAK+pE,oBAAoB5/C,EAAM,IAE3CpiB,KADc3F,SAASsF,EAAM4E,IAAQ,GAChB0f,IAASA,GAG/B1jB,QAAQyjB,kBAAkB/rB,KAAKkS,MAAOiY,EAAO7d,EAAK0f,EAAMjkB,KAqB1DggG,QAAQ37F,UAAU61G,WAAa,SAAS71F,EAAOjC,EAAO+3F,GAOrD,GALa,MAAT/3F,IAEHA,EAAQnqB,KAAK6uC,qBAGD,MAAT1kB,GAAiBA,EAAMhoB,OAAS,EACpC,CAEC,GAAa,MAAT+/G,EAEH,IAAK,IAAIr9G,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAIjC,GAAa,OAFTgN,EAAQ7R,KAAKunB,KAAKxV,SAASoY,EAAMtlB,OAEf7E,KAAKkS,MAAMC,OAAOgY,EAAMtlB,IAE7C,GAAa,MAATq9G,EACJ,CACC,GAAI91F,GAASze,YAAYwyB,aACzB,CACC+hF,EAAQrwG,EAAMzC,EAAIyC,EAAM5J,MAAQ,EAChC,MAEI,GAAImkB,GAASze,YAAY4e,YAE7B21F,EAAQrwG,EAAMzC,EAAIyC,EAAM5J,WAEpB,GAAImkB,GAASze,YAAY6e,UAE7B01F,EAAQrwG,EAAMxC,MAEV,IAAI+c,GAASze,YAAYyyB,aAC9B,CACC8hF,EAAQrwG,EAAMxC,EAAIwC,EAAMhK,OAAS,EACjC,MAIAq6G,EAFQ91F,GAASze,YAAY8e,aAErB5a,EAAMxC,EAAIwC,EAAMhK,OAIhBgK,EAAMzC,QAOd8yG,EAFG91F,GAASze,YAAY4e,YAEhBnjB,KAAKC,IAAI64G,EAAOrwG,EAAMzC,EAAIyC,EAAM5J,OAEhCmkB,GAASze,YAAY6e,UAErBpjB,KAAK2G,IAAImyG,EAAOrwG,EAAMxC,GAEtB+c,GAASze,YAAY8e,aAErBrjB,KAAKC,IAAI64G,EAAOrwG,EAAMxC,EAAIwC,EAAMhK,QAIhCuB,KAAK2G,IAAImyG,EAAOrwG,EAAMzC,GAQnC,GAAa,MAAT8yG,EACJ,CACC,IAAIrpG,EAAI7Y,KAAKunB,KAAKjV,MAElBtS,KAAKkS,MAAMuZ,cACX,IAEC,IAAS5mB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CACC,IAAIgN,EAEJ,GAAa,OAFTA,EAAQ7R,KAAKunB,KAAKxV,SAASoY,EAAMtlB,KAGrC,CACC,IAAIq9C,EAAMliD,KAAKmiD,gBAAgBh4B,EAAMtlB,IAE1B,MAAPq9C,GAAgBliD,KAAKkS,MAAMC,OAAOgY,EAAMtlB,MAE3Cq9C,EAAMA,EAAIzyC,QAEN2c,GAASze,YAAYwyB,aAExB+hB,EAAI9yC,IAAM8yG,EAAQrwG,EAAMzC,EAAIyC,EAAM5J,MAAQ,GAAK4Q,EAEvCuT,GAASze,YAAY4e,YAE7B21B,EAAI9yC,IAAM8yG,EAAQrwG,EAAMzC,EAAIyC,EAAM5J,OAAS4Q,EAEnCuT,GAASze,YAAY6e,UAE7B01B,EAAI7yC,IAAM6yG,EAAQrwG,EAAMxC,GAAKwJ,EAErBuT,GAASze,YAAYyyB,aAE7B8hB,EAAI7yC,IAAM6yG,EAAQrwG,EAAMxC,EAAIwC,EAAMhK,OAAS,GAAKgR,EAExCuT,GAASze,YAAY8e,aAE7By1B,EAAI7yC,IAAM6yG,EAAQrwG,EAAMxC,EAAIwC,EAAMhK,QAAUgR,EAI5CqpC,EAAI9yC,IAAM8yG,EAAQrwG,EAAMzC,GAAKyJ,EAG9B7Y,KAAK6pE,WAAW1/C,EAAMtlB,GAAIq9C,KAK7BliD,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQoiC,YACvC,QAASjgB,EAAO,QAASjC,IAE5B,QAECnqB,KAAKkS,MAAM0Z,cAKd,OAAOzB,GAgCR49E,QAAQ37F,UAAU+1G,SAAW,SAASt+F,GAErC,GAAY,MAARA,GACwB,MAA3B7jB,KAAKw3G,mBACN,CACCx3G,KAAKkS,MAAMuZ,cACX,IAEC,IAAI/jB,EAAQ1H,KAAKkS,MAAMyZ,SAAS9H,GAEnB,MAATnc,GAAiC,GAAhBA,EAAMvF,OAE1BnC,KAAKkS,MAAMwZ,SAAS7H,EAAM7jB,KAAKw3G,oBAI/Bx3G,KAAKkS,MAAMwZ,SAAS7H,EAAM,MAI3B7jB,KAAKm2E,UAAUtyD,GACf7jB,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQyiC,UAAW,OAAQ7oB,IAE7D,QAEC7jB,KAAKkS,MAAM0Z,aAIb,OAAO/H,GAQRkkF,QAAQ37F,UAAUg2G,eAAiB,SAASC,GAE3CriH,KAAKooG,aAAax7F,KAAKy1G,IAQxBta,QAAQ37F,UAAUk2G,kBAAoB,SAASD,GAI9C,IAFA,IAAIxxG,EAAM,GAEDhM,EAAI,EAAGA,EAAI7E,KAAKooG,aAAajmG,OAAQ0C,IAEzC7E,KAAKooG,aAAavjG,IAAMw9G,GAE3BxxG,EAAIjE,KAAK5M,KAAKooG,aAAavjG,IAI7B7E,KAAKooG,aAAev3F,GASrBk3F,QAAQ37F,UAAUs1G,oBAAsB,SAASp1G,GAEhD,GAAW,MAAPA,EAEH,IAAK,IAAIzH,EAAI,EAAGA,EAAI7E,KAAKooG,aAAajmG,OAAQ0C,IAC9C,CACC,IAAIwuC,EAAQrzC,KAAKooG,aAAavjG,GAAG29C,SAASl2C,GAE1C,GAAa,MAAT+mC,EAEH,OAAOA,EAKV,OAAO,MAoBR00D,QAAQ37F,UAAUm2G,WAAa,SAASC,EAAMr4F,GAEhC,MAATA,IAEHA,EAAQ7hB,QAAQ4hB,UAAUlqB,KAAK6uC,qBAAqB,IAGrD7uC,KAAKkS,MAAMuZ,cACX,IAECzrB,KAAKyiH,aAAat4F,EAAOq4F,GACzBxiH,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ2hC,YACvC,OAAQ42E,EAAM,QAASr4F,IAE1B,QAECnqB,KAAKkS,MAAM0Z,YAGZ,OAAOzB,GAcR49E,QAAQ37F,UAAUq2G,aAAe,SAASt4F,EAAOq4F,GAEhD,GAAa,MAATr4F,EACJ,CACCnqB,KAAKkS,MAAMuZ,cACX,IAEC,IAAK,IAAI5mB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CACC,IAAI8R,EAAS3W,KAAKkS,MAAM+vC,UAAU93B,EAAMtlB,IAEpC29G,EAEHxiH,KAAKkS,MAAMnN,IAAI4R,EAAQwT,EAAMtlB,GAAIA,GAIjC7E,KAAKkS,MAAMnN,IAAI4R,EAAQwT,EAAMtlB,GAC3B7E,KAAKkS,MAAMiB,cAAcwD,GAAU,GAIvC3W,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ4hC,cACvC,OAAQ22E,EAAM,QAASr4F,IAE1B,QAECnqB,KAAKkS,MAAM0Z,eA2Bdm8E,QAAQ37F,UAAUs2G,WAAa,SAASl2D,EAAOn9B,EAAQlF,GAEzC,MAATA,IAEHA,EAAQ7hB,QAAQ4hB,UAAUlqB,KAAK6uC,qBAAqB,IAGrD1kB,EAAQnqB,KAAK2iH,iBAAiBx4F,GAEjB,MAATqiC,IAEHA,EAAQxsD,KAAK4iH,gBAAgBz4F,IAG9B,IAAI1D,EAASzmB,KAAK6iH,kBAAkBr2D,EAAOriC,EAAOkF,GAElD,GAAIlF,EAAMhoB,OAAS,GAAe,MAAVskB,EACxB,CAEC,IAAI9P,EAAS3W,KAAKkS,MAAM+vC,UAAUuK,GAEpB,MAAV71C,IAEHA,EAAS3W,KAAKkS,MAAM+vC,UAAU93B,EAAM,KAGrCnqB,KAAKkS,MAAMuZ,cACX,IAIoC,MAA/BzrB,KAAKmiD,gBAAgBqK,IAExBxsD,KAAKkS,MAAMu5D,YAAYjf,EAAO,IAAI8e,YAInC,IAAI78D,EAAQzO,KAAKkS,MAAMiB,cAAcwD,GACrC3W,KAAKiqG,WAAW,CAACz9C,GAAQ71C,EAAQlI,EAAO,KAAM,MAAM,GAAO,GAAO,GAGlEA,EAAQzO,KAAKkS,MAAMiB,cAAcq5C,GACjCxsD,KAAKiqG,WAAW9/E,EAAOqiC,EAAO/9C,EAAO,KAAM,MAAM,GAAO,GAAO,GAC/DzO,KAAK0pG,WAAWv/E,GAAQ1D,EAAOrX,GAAIqX,EAAOpX,GAAG,GAAO,GAAO,GAG3DrP,KAAK2pG,aAAa,CAACn9C,GAAQ,CAAC/lC,IAAS,GAErCzmB,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ+hC,YACvC,QAASwgB,EAAO,SAAUn9B,EAAQ,QAASlF,IAE9C,QAECnqB,KAAKkS,MAAM0Z,aAIb,OAAO4gC,GASRu7C,QAAQ37F,UAAUu2G,iBAAmB,SAASx4F,GAE7C,IAAIxd,EAAS,GAEb,GAAa,MAATwd,GAAiBA,EAAMhoB,OAAS,EACpC,CACC,IAAIwU,EAAS3W,KAAKkS,MAAM+vC,UAAU93B,EAAM,IACxCxd,EAAOC,KAAKud,EAAM,IAGlB,IAAK,IAAItlB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAE7B7E,KAAKkS,MAAM+vC,UAAU93B,EAAMtlB,KAAO8R,GAErChK,EAAOC,KAAKud,EAAMtlB,IAKrB,OAAO8H,GAQRo7F,QAAQ37F,UAAUy2G,kBAAoB,SAASr2D,EAAOn4C,EAAUgb,GAE/D,IAAI1iB,EAAS3M,KAAKi2E,2BAA2B5hE,GAAU,GAEvD,GAAc,MAAV1H,EACJ,CACC,GAAI3M,KAAKwtE,WAAWhhB,GACpB,CACC,IAAI3+B,EAAO7tB,KAAKkuE,aAAa1hB,GAE7B7/C,EAAOyC,GAAKye,EAAK5lB,MACjB0E,EAAO0C,GAAKwe,EAAKhmB,OACjB8E,EAAO1E,OAAS4lB,EAAK5lB,MACrB0E,EAAO9E,QAAUgmB,EAAKhmB,OAIT,MAAVwnB,IAEH1iB,EAAOyC,GAAKigB,EACZ1iB,EAAO0C,GAAKggB,EACZ1iB,EAAO1E,OAAS,EAAIonB,EACpB1iB,EAAO9E,QAAU,EAAIwnB,GAIvB,OAAO1iB,GAqBRo7F,QAAQ37F,UAAUw2G,gBAAkB,SAASz4F,GAE5C,IAAIqiC,EAAQ,IAAIq6B,OAAO,IAIvB,OAHAr6B,EAAM2iC,WAAU,GAChB3iC,EAAM6iC,gBAAe,GAEd7iC,GAeRu7C,QAAQ37F,UAAU02G,aAAe,SAAS34F,GAEzC,IAAIxd,EAAS,GAEb,GAAa,MAATwd,EACJ,CACCA,EAAQnqB,KAAK6uC,oBAKb,IAFA,IAAIh+B,EAAM,GAEDhM,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAE7B7E,KAAKkS,MAAMiB,cAAcgX,EAAMtlB,IAAM,GAExCgM,EAAIjE,KAAKud,EAAMtlB,IAIjBslB,EAAQtZ,EAGT,GAAa,MAATsZ,GAAiBA,EAAMhoB,OAAS,EACpC,CACCnC,KAAKkS,MAAMuZ,cACX,IAEC,IAAS5mB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CACC,IAAIwP,EAAWrU,KAAKkS,MAAMg6E,YAAY/hE,EAAMtlB,IAE5C,GAAgB,MAAZwP,GAAoBA,EAASlS,OAAS,EAC1C,CACCkS,EAAWA,EAASojD,QACpB,IAAI9gD,EAAS3W,KAAKkS,MAAM+vC,UAAU93B,EAAMtlB,IACpC4J,EAAQzO,KAAKkS,MAAMiB,cAAcwD,GAErC3W,KAAKiqG,WAAW51F,EAAUsC,EAAQlI,EAAO,KAAM,MAAM,GACrD9B,EAASA,EAAOswE,OAAO5oE,IAIzBrU,KAAK+iH,wBAAwB54F,GAC7BnqB,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQgiC,cAAe,QAAS9hB,IAElE,QAECnqB,KAAKkS,MAAM0Z,aAIb,OAAOjf,GAYRo7F,QAAQ37F,UAAU22G,wBAA0B,SAAS54F,GAEpDnqB,KAAKgjH,aAAahjH,KAAKijH,YAAY94F,KAapC49E,QAAQ37F,UAAU82G,sBAAwB,SAAS/4F,GAErC,MAATA,IAEHA,EAAQnqB,KAAK6uC,qBAGd7uC,KAAKkS,MAAMuZ,cACX,IAEC,IAAI9U,EAAS3W,KAAKovC,mBACd3gC,EAAQzO,KAAKkS,MAAMiB,cAAcwD,GAErC3W,KAAKiqG,WAAW9/E,EAAOxT,EAAQlI,EAAO,KAAM,MAAM,GAClDzO,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQiiC,yBAA0B,QAAS/hB,IAE7E,QAECnqB,KAAKkS,MAAM0Z,YAGZ,OAAOzB,GAuBR49E,QAAQ37F,UAAU+/D,kBAAoB,SAAShiD,EAAOkF,EAAQ8zF,EAAWp3C,EAAWC,EAAaC,EAAcC,GAEjG,MAAT/hD,IAEHA,EAAQnqB,KAAK6uC,qBAGdxf,EAAoB,MAAVA,EAAkBA,EAAS,EACrC8zF,EAA0B,MAAbA,GAAqBA,EAClCp3C,EAA0B,MAAbA,EAAqBA,EAAY,EAC9CC,EAA8B,MAAfA,EAAuBA,EAAc,EACpDC,EAAgC,MAAhBA,EAAwBA,EAAe,EACvDC,EAA4B,MAAdA,EAAsBA,EAAa,EAEjDlsE,KAAKkS,MAAMuZ,cACX,IAEC,IAAK,IAAI5mB,EAAIslB,EAAMhoB,OAAS,EAAG0C,GAAK,EAAGA,IACvC,CACC,IAAIq9C,EAAMliD,KAAKmiD,gBAAgBh4B,EAAMtlB,IAErC,GAAW,MAAPq9C,EACJ,CACC,IAAI7tC,EAAWrU,KAAKopF,cAAcj/D,EAAMtlB,IAExC,GAAgB,MAAZwP,GAAoBA,EAASlS,OAAS,EAC1C,CACC,IAAIskB,EAASzmB,KAAKi2E,2BAA2B5hE,GAAU,GAEvD,GAAc,MAAVoS,GAAkBA,EAAOxe,MAAQ,GAAKwe,EAAO5e,OAAS,EAC1D,CACC,IAAI4U,EAAO,EACPQ,EAAM,EAGV,GAAIjd,KAAKwtE,WAAWrjD,EAAMtlB,IAC1B,CACC,IAAIgpB,EAAO7tB,KAAKkuE,aAAa/jD,EAAMtlB,IACnC4X,EAAOoR,EAAK5lB,MACZgV,EAAM4Q,EAAKhmB,OAGZq6C,EAAMA,EAAIzyC,QAEN0zG,IAEHjhE,EAAI9yC,EAAIhG,KAAK2c,MAAMm8B,EAAI9yC,EAAIqX,EAAOrX,EAAIigB,EAAS5S,EAAOyvD,GACtDhqB,EAAI7yC,EAAIjG,KAAK2c,MAAMm8B,EAAI7yC,EAAIoX,EAAOpX,EAAIggB,EAASpS,EAAM8uD,IAGtD7pB,EAAIj6C,MAAQmB,KAAK2c,MAAMU,EAAOxe,MAAQ,EAAIonB,EAAS5S,EAAOyvD,EAAaF,GACvE9pB,EAAIr6C,OAASuB,KAAK2c,MAAMU,EAAO5e,OAAS,EAAIwnB,EAASpS,EAAM8uD,EAAYE,GAEvEjsE,KAAKkS,MAAMu5D,YAAYthD,EAAMtlB,GAAIq9C,GACjCliD,KAAK02E,UAAUriE,EAAUgb,EAAS5S,EAAOgK,EAAOrX,EAAI88D,EAClD78C,EAASpS,EAAMwJ,EAAOpX,EAAI08D,OAMjC,QAEC/rE,KAAKkS,MAAM0Z,YAGZ,OAAOzB,GAaR49E,QAAQ37F,UAAU6W,eAAiB,SAASkH,GAE3C,IAAIxd,EAAS,KAEb,GAAa,MAATwd,GAAiBA,EAAMhoB,OAAS,EAEnC,IAAK,IAAI0C,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC,GAAI7E,KAAKkS,MAAM2vC,SAAS13B,EAAMtlB,KAAO7E,KAAKkS,MAAMC,OAAOgY,EAAMtlB,IAC7D,CACC,IAAIgpD,EAAO7tD,KAAKunB,KAAKtE,eAAejjB,KAAKunB,KAAKxV,SAASoY,EAAMtlB,KAAK,GAEtD,MAARgpD,IAEW,MAAVlhD,EAEHA,EAAS2C,YAAYwB,cAAc+8C,GAInClhD,EAAO5H,IAAI8oD,IAOhB,OAAOlhD,GAqBRo7F,QAAQ37F,UAAUkiF,UAAY,SAASt8E,EAAMoxG,EAAmBl1B,EAASm1B,GAExE,OAAOrjH,KAAKgvC,WAAW,CAACh9B,GAAOoxG,EAAmBl1B,EAASm1B,GAAc,IAoB1Etb,QAAQ37F,UAAU4iC,WAAa,SAAS7kB,EAAOi5F,EAAmBl1B,EAASm1B,GAE1ED,EAA0C,MAArBA,GAA6BA,EAClD,IAAI50B,EAAS,KAEb,GAAa,MAATrkE,EACJ,CAKC,IAHA,IAAI1K,EAAO,IAAItT,aACX0E,EAAM,GAEDhM,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC4a,EAAKlT,IAAI4d,EAAMtlB,IAAI,GACnBgM,EAAIjE,KAAKud,EAAMtlB,IAGhB,GAAIgM,EAAI1O,OAAS,EACjB,CACC,IAAImQ,EAAQtS,KAAKunB,KAAKjV,MAClBgxG,EAAQtjH,KAAKunB,KAAKoH,UAGtB,IAFA6/D,EAASxuF,KAAKkS,MAAM88B,WAAW7kB,GAAO,EAAM+jE,GAEnCrpF,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC,IAAKu+G,GAAqBpjH,KAAKkS,MAAMC,OAAOq8E,EAAO3pF,KAGJ,MAF9C7E,KAAKujH,uBAAuB/0B,EAAO3pF,GAClC7E,KAAKkS,MAAMs4D,YAAYgkB,EAAO3pF,IAAI,GAClC7E,KAAKkS,MAAMs4D,YAAYgkB,EAAO3pF,IAAI,IAEnC2pF,EAAO3pF,GAAK,SAGb,CACC,IAAI4nD,EAAIzsD,KAAKkS,MAAMk5D,YAAYojB,EAAO3pF,IAEtC,GAAS,MAAL4nD,EACJ,CACC,IAAI56C,EAAQ7R,KAAKunB,KAAKxV,SAASoY,EAAMtlB,IACjCgoE,EAAS7sE,KAAKunB,KAAKxV,SAAS/R,KAAKkS,MAAM+vC,UAAU93B,EAAMtlB,KAE3D,GAAa,MAATgN,GAA2B,MAAVg7D,EACrB,CACC,IAAIt6D,EAAK,EAAiB,EAAIs6D,EAAOnkD,OAAOtZ,EACxCqD,EAAK,EAAiB,EAAIo6D,EAAOnkD,OAAOrZ,EAE5C,GAAIrP,KAAKkS,MAAMC,OAAOq8E,EAAO3pF,IAC7B,CACC,IAAIqhB,EAAMrU,EAAMsT,eAEhB,GAAW,MAAPe,EACJ,CAIC,IAFA,IAAIjhB,EAAMjF,KAAKkS,MAAMs4D,YAAYrgD,EAAMtlB,IAAI,GAE7B,MAAPI,IAAgBwa,EAAK5T,IAAI5G,IAE/BA,EAAMjF,KAAKkS,MAAM+vC,UAAUh9C,GAGjB,MAAPA,GAAyB,MAAVihB,EAAI,IAEtBumC,EAAE2jC,iBACD,IAAIjhF,QAAQ+W,EAAI,GAAG9W,EAAIkD,EAAQgxG,EAAMl0G,EACpC8W,EAAI,GAAG7W,EAAIiD,EAAQgxG,EAAMj0G,IAAI,GAMhC,IAFA,IAAIyoE,EAAM93E,KAAKkS,MAAMs4D,YAAYrgD,EAAMtlB,IAAI,GAE7B,MAAPizE,IAAgBr4D,EAAK5T,IAAIisE,IAE/BA,EAAM93E,KAAKkS,MAAM+vC,UAAU61B,GAG5B,IAAI90D,EAAIkD,EAAI/jB,OAAS,EAEV,MAAP21E,GAAyB,MAAV5xD,EAAIlD,IAEtBypC,EAAE2jC,iBACD,IAAIjhF,QAAQ+W,EAAIlD,GAAG5T,EAAIkD,EAAQgxG,EAAMl0G,EACpC8W,EAAIlD,GAAG3T,EAAIiD,EAAQgxG,EAAMj0G,IAAI,GAIhC,IAAI2jD,EAASvG,EAAEuG,OAEf,GAAc,MAAVA,EAEH,IAAK,IAAIsM,EAAI,EAAGA,EAAItM,EAAO7wD,OAAQm9D,IAElCtM,EAAOsM,GAAGlwD,GAAKmD,EACfygD,EAAOsM,GAAGjwD,GAAKoD,QAOlBg6C,EAAE99B,UAAUpc,EAAIE,WASrB+7E,EAAS,GAIX,OAAOA,GA4CRuZ,QAAQ37F,UAAUi9E,aAAe,SAAS1yE,EAAQxS,EAAI4D,EACrDqH,EAAGC,EAAGpH,EAAOJ,EAAQH,EAAO06C,GAE5B,IAAI6nB,EAASjqE,KAAKwjH,aAAa7sG,EAAQxS,EAAI4D,EAAOqH,EAAGC,EAAGpH,EAAOJ,EAAQH,EAAO06C,GAE9E,OAAOpiD,KAAK44F,QAAQ3uB,EAAQtzD,IAQ7BoxF,QAAQ37F,UAAUo3G,aAAe,SAAS7sG,EAAQxS,EAAI4D,EACpDqH,EAAGC,EAAGpH,EAAOJ,EAAQH,EAAO06C,GAG7B,IAAI5vC,EAAW,IAAI84D,WAAWl8D,EAAGC,EAAGpH,EAAOJ,GAC3C2K,EAAS4vC,SAAwB,MAAZA,GAAoBA,EAGzC,IAAI6nB,EAAS,IAAI4c,OAAO9+E,EAAOyK,EAAU9K,GAKzC,OAJAuiE,EAAOkhB,MAAMhnF,GACb8lE,EAAOklB,WAAU,GACjBllB,EAAOolB,gBAAe,GAEfplB,GAoBR89B,QAAQ37F,UAAUogF,WAAa,SAAS71E,EAAQxS,EAAI4D,EAAO+b,EAAQrF,EAAQ/W,GAE1E,IAAImc,EAAO7jB,KAAKyjH,WAAW9sG,EAAQxS,EAAI4D,EAAO+b,EAAQrF,EAAQ/W,GAE9D,OAAO1H,KAAK0jH,QAAQ7/F,EAAMlN,EAAQmN,EAAQrF,IAW3CspF,QAAQ37F,UAAUq3G,WAAa,SAAS9sG,EAAQxS,EAAI4D,EAAO+b,EAAQrF,EAAQ/W,GAG1E,IAAImc,EAAO,IAAIgjE,OAAO9+E,EAAO,IAAIujE,WAAc5jE,GAK/C,OAJAmc,EAAKsnE,MAAMhnF,GACX0f,EAAKurE,SAAQ,GACbvrE,EAAKrR,SAAS4vC,UAAW,EAElBv+B,GAmBRkkF,QAAQ37F,UAAUs3G,QAAU,SAAS7/F,EAAMlN,EAAQmN,EAAQrF,EAAQhQ,GAElE,OAAOzO,KAAK44F,QAAQ/0E,EAAMlN,EAAQlI,EAAOqV,EAAQrF,IAmBlDspF,QAAQ37F,UAAUwsF,QAAU,SAAS5mF,EAAM2E,EAAQlI,EAAOqV,EAAQrF,GAEjE,OAAOze,KAAK64F,SAAS,CAAC7mF,GAAO2E,EAAQlI,EAAOqV,EAAQrF,GAAQ,IAsB7DspF,QAAQ37F,UAAUysF,SAAW,SAAS1uE,EAAOxT,EAAQlI,EAAOqV,EAAQrF,EAAQklG,GAE7D,MAAVhtG,IAEHA,EAAS3W,KAAKovC,oBAGF,MAAT3gC,IAEHA,EAAQzO,KAAKkS,MAAMiB,cAAcwD,IAGlC3W,KAAKkS,MAAMuZ,cACX,IAECzrB,KAAKiqG,WAAW9/E,EAAOxT,EAAQlI,EAAOqV,EAAQrF,EAAqB,MAAZklG,GAAoBA,GAAkB,GAC7F3jH,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQmhC,UAAW,QAASjhB,EAC3D,SAAUxT,EAAQ,QAASlI,EAAO,SAAUqV,EAAQ,SAAUrF,IAEjE,QAECze,KAAKkS,MAAM0Z,YAGZ,OAAOzB,GASR49E,QAAQ37F,UAAU69F,WAAa,SAAS9/E,EAAOxT,EAAQlI,EAAOqV,EAAQrF,EAAQklG,EAAUC,EAAWlkG,GAElG,GAAa,MAATyK,GAA2B,MAAVxT,GAA2B,MAATlI,EACvC,CACCzO,KAAKkS,MAAMuZ,cACX,IAMC,IAJA,IAAIo4F,EAAc,EAAa7jH,KAAKunB,KAAKxV,SAAS4E,GAAU,KACxD4T,EAAqB,MAAfs5F,EAAuBA,EAAYn7F,OAAS,KAClDo7F,EAAO,IAAI30G,QAAQ,EAAG,GAEjBtK,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC,GAAgB,MAAZslB,EAAMtlB,GAET4J,QAGD,CACC,IAAIjC,EAAWxM,KAAKkS,MAAM+vC,UAAU93B,EAAMtlB,IAG1C,GAAU,MAAN0lB,GAAcJ,EAAMtlB,IAAM8R,GAAUA,GAAUnK,EAClD,CACC,IAAIu3G,EAAW/jH,KAAKunB,KAAKxV,SAASvF,GAC9Bge,EAAkB,MAAZu5F,EAAoBA,EAASr7F,OAASo7F,EAC5C5hE,EAAMliD,KAAKkS,MAAMk5D,YAAYjhD,EAAMtlB,IAEvC,GAAW,MAAPq9C,EACJ,CACC,IAAI3vC,EAAKiY,EAAGpb,EAAImb,EAAGnb,EACfqD,EAAK+X,EAAGnb,EAAIkb,EAAGlb,GAInB6yC,EAAMA,EAAIzyC,SACNkf,UAAUpc,EAAIE,GAEbyvC,EAAIE,WAAYpiD,KAAKkS,MAAM2vC,SAAS13B,EAAMtlB,KAC7C7E,KAAKgkH,+BAEN9hE,EAAI9yC,EAAIhG,KAAKC,IAAI,EAAG64C,EAAI9yC,GACxB8yC,EAAI7yC,EAAIjG,KAAKC,IAAI,EAAG64C,EAAI7yC,IAGzBrP,KAAKkS,MAAMu5D,YAAYthD,EAAMtlB,GAAIq9C,IAM/BvrC,GAAUnK,GAAYiC,EAAQ5J,EAAI7E,KAAKkS,MAAMiB,cAAcwD,IAE9DlI,IAGDzO,KAAKkS,MAAMnN,IAAI4R,EAAQwT,EAAMtlB,GAAI4J,EAAQ5J,GAErC7E,KAAKk5G,oBAERl5G,KAAKikH,aAAa95F,EAAMtlB,IAAI,IAId,MAAV6a,GAAkBA,IACtB1f,KAAKkkH,qBAAqB/5F,EAAMtlB,KAAO7E,KAAKmkH,eAAeh6F,EAAMtlB,KAEjE7E,KAAKokH,aAAaj6F,EAAMtlB,KAIR,MAAb++G,GAAqBA,IAExB5jH,KAAKqkH,eAAel6F,EAAMtlB,IAIb,MAAVif,GAEH9jB,KAAKskH,cAAcn6F,EAAMtlB,GAAIif,GAAQ,GAIxB,MAAVrF,GAEHze,KAAKskH,cAAcn6F,EAAMtlB,GAAI4Z,GAAQ,GAKxCze,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQohC,YAAa,QAASlhB,EAC9D,SAAUxT,EAAQ,QAASlI,EAAO,SAAUqV,EAAQ,SAAUrF,EAC9D,WAAYklG,IAEd,QAEC3jH,KAAKkS,MAAM0Z,eAgBdm8E,QAAQ37F,UAAU63G,aAAe,SAASjyG,EAAM2vC,GAI/C,GAFAA,EAAsB,MAAXA,GAAmBA,EAM7B,IAFA,IAAIzuC,EAAalT,KAAKkS,MAAMiB,cAAcnB,GAEjCnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/B7E,KAAKikH,aAAajkH,KAAKkS,MAAMkB,WAAWpB,EAAMnN,IAI5C7E,KAAK+tB,WAAW8zB,SAAS7vC,IAAShS,KAAK+9G,eAAe/rG,IAEzDhS,KAAKukH,eAAevyG,IAmBtB+1F,QAAQ37F,UAAUwiC,YAAc,SAASzkB,EAAOonF,GAU/C,GARAA,EAAgC,MAAhBA,GAAwBA,EAE3B,MAATpnF,IAEHA,EAAQnqB,KAAKwkH,kBAAkBxkH,KAAK6uC,sBAIjC0iE,EAIHpnF,EAAQnqB,KAAKwkH,kBAAkBxkH,KAAKijH,YAAY94F,QAGjD,CACCA,EAAQA,EAAMstC,QAOd,IAHA,IAAInkD,EAAQtT,KAAKwkH,kBAAkBxkH,KAAKykH,YAAYt6F,IAChD1K,EAAO,IAAItT,aAENtH,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC4a,EAAKlT,IAAI4d,EAAMtlB,IAAI,GAGpB,IAASA,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAEG,MAAhC7E,KAAKunB,KAAKxV,SAASuB,EAAMzO,KAC3B4a,EAAK5T,IAAIyH,EAAMzO,MAEhB4a,EAAKlT,IAAI+G,EAAMzO,IAAI,GACnBslB,EAAMvd,KAAK0G,EAAMzO,KAKpB7E,KAAKkS,MAAMuZ,cACX,IAECzrB,KAAKgjH,aAAa74F,GAClBnqB,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ6hC,aACvC,QAAS3hB,EAAO,eAAgBonF,IAEnC,QAECvxG,KAAKkS,MAAM0Z,YAGZ,OAAOzB,GAaR49E,QAAQ37F,UAAU42G,aAAe,SAAS74F,GAEzC,GAAa,MAATA,GAAiBA,EAAMhoB,OAAS,EACpC,CACC,IAAImQ,EAAQtS,KAAKunB,KAAKjV,MAClB9K,EAAKxH,KAAKunB,KAAKoH,UAEnB3uB,KAAKkS,MAAMuZ,cACX,IAKC,IAFA,IAAIhM,EAAO,IAAItT,aAENtH,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC4a,EAAKlT,IAAI4d,EAAMtlB,IAAI,GAGpB,IAASA,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CA+DC,IA7DA,IAAIyO,EAAQtT,KAAKykH,YAAY,CAACt6F,EAAMtlB,KAEhC6/G,EAAqBp8G,QAAQ2M,KAAKjV,MAAM,SAAS6jB,EAAMC,GAE1D,IAAIo+B,EAAMliD,KAAKkS,MAAMk5D,YAAYvnD,GAEjC,GAAW,MAAPq+B,EACJ,CAMC,IAJA,IAAIt+B,EAAW5jB,KAAKkS,MAAMs4D,YAAY3mD,EAAMC,GACxC6gG,GAAY,EACZ9zG,EAAM+S,EAEI,MAAP/S,GACP,CACC,GAAIsZ,EAAMtlB,IAAMgM,EAChB,CACC8zG,GAAY,EACZ,MAGD9zG,EAAM7Q,KAAKkS,MAAM+vC,UAAUpxC,GAG5B,GAAI8zG,EACJ,CACCziE,EAAMA,EAAIzyC,QACV,IAAIoC,EAAQ7R,KAAKunB,KAAKxV,SAAS8R,GAE/B,GAAa,MAAThS,GAAyC,MAAxBA,EAAMsT,eAC3B,CACC,IAAIe,EAAMrU,EAAMsT,eACZnC,EAAI,EAAW,EAAIkD,EAAI/jB,OAAS,EAEpC+/C,EAAIkuC,iBAAiB,IAAIjhF,QACxB+W,EAAIlD,GAAG5T,EAAIkD,EAAQ9K,EAAG4H,EAAIyC,EAAM6W,OAAOtZ,EACvC8W,EAAIlD,GAAG3T,EAAIiD,EAAQ9K,EAAG6H,EAAIwC,EAAM6W,OAAOrZ,GAAIyU,OAG7C,CAMC,IAAI8gG,EAAS5kH,KAAKunB,KAAKxV,SAAS6R,GAElB,MAAVghG,GAEH1iE,EAAIkuC,iBAAiB,IAAIjhF,QACxBy1G,EAAOj1G,aAAe2C,EAAQ9K,EAAG4H,EACjCw1G,EAAOh1G,aAAe0C,EAAQ9K,EAAG6H,GAAIyU,GAIxC9jB,KAAKkS,MAAMu5D,YAAY5nD,EAAMq+B,GAC7BliD,KAAKkS,MAAMk6E,YAAYvoE,EAAM,KAAMC,QAK7Bw7C,EAAI,EAAGA,EAAIhsD,EAAMnR,OAAQm9D,IAE5B7/C,EAAK5T,IAAIyH,EAAMgsD,MAEnB7/C,EAAKlT,IAAI+G,EAAMgsD,IAAI,GACnBolD,EAAmBpxG,EAAMgsD,IAAI,GAC7BolD,EAAmBpxG,EAAMgsD,IAAI,IAI/Bt/D,KAAKkS,MAAMzF,OAAO0d,EAAMtlB,IAGzB7E,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ8hC,cAAe,QAAS5hB,IAElE,QAECnqB,KAAKkS,MAAM0Z,eAqBdm8E,QAAQ37F,UAAUy4G,UAAY,SAAShhG,EAAMsG,EAAO26F,EAASvyG,EAAIE,GAEhEF,EAAKA,GAAM,EACXE,EAAKA,GAAM,EAEX,IAAIkE,EAAS3W,KAAKkS,MAAM+vC,UAAUp+B,GAC9BC,EAAS9jB,KAAKkS,MAAMs4D,YAAY3mD,GAAM,GAE1C7jB,KAAKkS,MAAMuZ,cACX,IAEC,GAAe,MAAXq5F,EACJ,CACCA,EAAU9kH,KAAKsuF,UAAUzqE,GAGzB,IAAIhS,EAAQ7R,KAAKunB,KAAKxV,SAAS8R,GAC3Bq+B,EAAMliD,KAAKmiD,gBAAgB2iE,GAE/B,GAAW,MAAP5iE,GAA6B,MAAdA,EAAI8Q,QAA2B,MAATnhD,EACzC,CACC,IAAIjB,EAAI5Q,KAAKunB,KAAKoH,UACd9V,EAAI7Y,KAAKunB,KAAKjV,MACd5D,EAAMpG,QAAQ4c,mBAAmBrT,GAAQU,EAAK3B,EAAExB,GAAKyJ,GAAIpG,EAAK7B,EAAEvB,GAAKwJ,GACzEqpC,EAAI8Q,OAAS9Q,EAAI8Q,OAAOyE,MAAM,EAAG/oD,GAItB,OAFXwzC,EAAMliD,KAAKmiD,gBAAgBt+B,KAEM,MAAdq+B,EAAI8Q,UAEtB9Q,EAAMA,EAAIzyC,SACNujD,OAAS9Q,EAAI8Q,OAAOyE,MAAM/oD,GAC9B1O,KAAKkS,MAAMu5D,YAAY5nD,EAAMq+B,KAKhCliD,KAAK0pG,WAAWv/E,EAAO5X,EAAIE,GAAI,GAAO,GACtCzS,KAAKiqG,WAAW9/E,EAAOxT,EAAQ3W,KAAKkS,MAAMiB,cAAcwD,GAAS,KAAM,MACrE,GACF3W,KAAKiqG,WAAW,CAAC6a,GAAUnuG,EAAQ3W,KAAKkS,MAAMiB,cAAcwD,GAC1DmN,EAAQqG,EAAM,IAAI,GACpBnqB,KAAKskH,cAAczgG,EAAMsG,EAAM,IAAI,GACnCnqB,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQwiC,WAAY,OAAQ5oB,EAC3D,QAASsG,EAAO,UAAW26F,EAAS,KAAMvyG,EAAI,KAAME,IAEvD,QAECzS,KAAKkS,MAAM0Z,YAGZ,OAAOk5F,GAuBR/c,QAAQ37F,UAAU24G,YAAc,SAASr6G,EAAMyf,EAAOonF,GAExC,MAATpnF,IAEHA,EAAQnqB,KAAK6uC,qBAIV0iE,IAEHpnF,EAAQnqB,KAAKijH,YAAY94F,IAG1BnqB,KAAKkS,MAAMuZ,cACX,IAECzrB,KAAKglH,aAAa76F,EAAOzf,GACzB1K,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQyhC,aACxC,OAAQhhC,EAAM,QAASyf,EAAO,eAAgBonF,IAEhD,QAECvxG,KAAKkS,MAAM0Z,YAGZ,OAAOzB,GAaR49E,QAAQ37F,UAAU44G,aAAe,SAAS76F,EAAOzf,GAEhD,GAAa,MAATyf,GAAiBA,EAAMhoB,OAAS,EACpC,CACCnC,KAAKkS,MAAMuZ,cACX,IAEC,IAAK,IAAI5mB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC7E,KAAKkS,MAAMvH,WAAWwf,EAAMtlB,GAAI6F,GAGlC,QAEC1K,KAAKkS,MAAM0Z,eA4Bdm8E,QAAQ37F,UAAUgzF,UAAY,SAASD,EAAUx9C,EAASx3B,EAAO86F,EAAe98G,GAE/Ew5C,EAAsB,MAAXA,GAAmBA,EAEjB,MAATx3B,IAEHA,EAAQnqB,KAAKklH,iBAAiBllH,KAAK6uC,oBAAqBswD,IAGzDn/F,KAAKizF,aAAY,GAEjBjzF,KAAKkS,MAAMuZ,cACX,IAECzrB,KAAKmlH,YAAYh7F,EAAOg1E,EAAUx9C,EAASsjE,GAC3CjlH,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQkiC,WACxC,WAAYgzD,EAAU,UAAWx9C,EAAS,QAASx3B,IAErD,QAECnqB,KAAKkS,MAAM0Z,YAGZ,OAAOzB,GAmBR49E,QAAQ37F,UAAU+4G,YAAc,SAASh7F,EAAOg1E,EAAUx9C,EAASsjE,GAElE,GAAa,MAAT96F,GAAiBA,EAAMhoB,OAAS,EACpC,CACCnC,KAAKkS,MAAMuZ,cACX,IAEC,IAAK,IAAI5mB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC,KAAMogH,GAAiBjlH,KAAKolH,eAAej7F,EAAMtlB,GAAIs6F,KACpDA,GAAYn/F,KAAK6tE,gBAAgB1jD,EAAMtlB,IACxC,CASC,GARA7E,KAAKkS,MAAM07E,aAAazjE,EAAMtlB,GAAIs6F,GAClCn/F,KAAKqlH,WAAWl7F,EAAMtlB,GAAIs6F,GAEtBn/F,KAAKmkH,eAAeh6F,EAAMtlB,KAE7B7E,KAAKokH,aAAaj6F,EAAMtlB,IAGrB88C,EACJ,CACC,IAAIttC,EAAWrU,KAAKkS,MAAMg6E,YAAY/hE,EAAMtlB,IAC5C7E,KAAKmlH,YAAY9wG,EAAU8qF,EAAUx9C,GAGtC3hD,KAAKqkH,eAAel6F,EAAMtlB,IAI5B7E,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQmiC,aACxC,QAASjiB,EAAO,WAAYg1E,EAAU,UAAWx9C,IAEnD,QAEC3hD,KAAKkS,MAAM0Z,eAgBdm8E,QAAQ37F,UAAUi5G,WAAa,SAASrzG,EAAMszG,GAE7C,GAAY,MAARtzG,EACJ,CACC,IAAIkwC,EAAMliD,KAAKkS,MAAMk5D,YAAYp5D,GAEtB,MAAPkwC,IAEHA,EAAMA,EAAIzyC,QAEVzP,KAAKulH,sBAAsBvzG,EAAMkwC,EAAKojE,GACtCpjE,EAAIguC,OAEJlwF,KAAKkS,MAAMu5D,YAAYz5D,EAAMkwC,MAqBhC6lD,QAAQ37F,UAAUm5G,sBAAwB,SAASvzG,EAAMkwC,EAAKojE,GAE7D,GAAY,MAARtzG,GAAuB,MAAPkwC,EACpB,CACC,IAAIx6C,EAAQ1H,KAAK+pE,oBAAoB/3D,GAErC,GAA2B,MAAvBkwC,EAAI6tC,gBACR,CACC,IAAItpE,EAASy7B,EAEb,GAAIliD,KAAKm6G,wBACT,CACC,IAAItpG,EAAM7Q,KAAKwlH,wBAAwBxzG,GAEvC,GAAW,MAAPnB,EACJ,CACC4V,EAAS5V,EAET,IAAIonD,EAAY3vD,QAAQyW,SAASrX,EAAOiG,YAAY2Z,iBAEhD2wC,EAAY,IAEfxxC,EAAO5e,OAASuB,KAAKC,IAAIod,EAAO5e,OAAQowD,KAK3C/V,EAAI6tC,gBAAkB,IAAIzgF,YAAY,EAAG,EAAGmX,EAAOxe,MAAOwe,EAAO5e,QAGlE,GAA2B,MAAvBq6C,EAAI6tC,gBACR,CACC7tC,EAAI6tC,gBAAgB3gF,EAAI8yC,EAAI9yC,EAC5B8yC,EAAI6tC,gBAAgB1gF,EAAI6yC,EAAI7yC,EAE5B,IAAIoY,EAAQnf,QAAQuX,UAAUnY,EAAMiG,YAAY2W,iBAAmB,GAEnE,GAAa,GAATmD,EACJ,CACC,IAAIlV,EAAK2vC,EAAI6tC,gBAAgBpgF,aAAeuyC,EAAIvyC,aAC5C8C,EAAKyvC,EAAI6tC,gBAAgBngF,aAAesyC,EAAItyC,aAE5CmR,EAAM3X,KAAK2X,IAAI0G,GACfxG,EAAM7X,KAAK6X,IAAIwG,GAEf8wD,EAAMx3D,EAAMxO,EAAK0O,EAAMxO,EACvB6lE,EAAMr3D,EAAM1O,EAAKwO,EAAMtO,EAE3ByvC,EAAI6tC,gBAAgB3gF,GAAKmpE,EAAMhmE,EAC/B2vC,EAAI6tC,gBAAgB1gF,GAAKipE,EAAM7lE,MAYnCs1F,QAAQ37F,UAAU62G,YAAc,SAAS94F,GAExC,IAAIs7F,EAAWt7F,EAAMstC,QAErB,OAAOnvD,QAAQiX,iBAAiBkmG,EAASxoC,OAAOj9E,KAAKykH,YAAYt6F,MAQlE49E,QAAQ37F,UAAUq4G,YAAc,SAASt6F,GAExC,IAAI7W,EAAQ,GAEZ,GAAa,MAAT6W,EAEH,IAAK,IAAItlB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CAGC,IAFA,IAAIwlE,EAAYrqE,KAAKkS,MAAMo4D,aAAangD,EAAMtlB,IAErCy6D,EAAI,EAAGA,EAAI+K,EAAW/K,IAE9BhsD,EAAM1G,KAAK5M,KAAKkS,MAAMq4D,UAAUpgD,EAAMtlB,GAAIy6D,IAI3C,IAAIjrD,EAAWrU,KAAKkS,MAAMg6E,YAAY/hE,EAAMtlB,IAC5CyO,EAAQA,EAAM2pE,OAAOj9E,KAAKykH,YAAYpwG,IAIxC,OAAOf,GAkBRy0F,QAAQ37F,UAAUm4G,eAAiB,SAASvyG,EAAM0zG,GAEjDA,EAAoC,MAAlBA,GAA0BA,EAE5C1lH,KAAKkS,MAAMuZ,cACX,IAECzrB,KAAKg+G,gBAAgBhsG,EAAM0zG,GAC3B1lH,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ+iC,iBACvC,OAAQh7B,EAAM,iBAAkB0zG,IAEnC,QAEC1lH,KAAKkS,MAAM0Z,YAGZ,OAAO5Z,GAaR+1F,QAAQ37F,UAAU4xG,gBAAkB,SAAShsG,EAAM0zG,GAElD,GAAY,MAAR1zG,EACJ,CACChS,KAAKkS,MAAMuZ,cACX,IAEC,IAAIoC,EAAO7tB,KAAKwlH,wBAAwBxzG,GACpCkwC,EAAMliD,KAAKkS,MAAMk5D,YAAYp5D,GAEjC,GAAY,MAAR6b,GAAuB,MAAPq0B,EACpB,CACC,IAAIwkC,EAAY1mF,KAAK6tE,gBAAgB77D,GAGrC,GAFAkwC,EAAMA,EAAIzyC,QAENzP,KAAKwtE,WAAWx7D,GACpB,CACC,IAAItK,EAAQ1H,KAAKytE,aAAaz7D,GAC1B2zG,EAAY3lH,KAAKkS,MAAMyZ,SAAS3Z,GAEnB,MAAb2zG,IAEHA,EAAY,IAGTr9G,QAAQyW,SAASrX,EAAOiG,YAAY6Z,kBAAkB,IAEzDm+F,EAAYr9G,QAAQojB,SAASi6F,EAC3Bh4G,YAAY2Z,gBAAiBuG,EAAKhmB,OAAS,GAEzC6+E,IAEHxkC,EAAIr6C,OAASgmB,EAAKhmB,OAAS,GAG5Bq6C,EAAIj6C,MAAQ4lB,EAAK5lB,QAIjB09G,EAAYr9G,QAAQojB,SAASi6F,EAC3Bh4G,YAAY2Z,gBAAiBuG,EAAK5lB,MAAQ,GAExCy+E,IAEHxkC,EAAIj6C,MAAQ4lB,EAAK5lB,MAAQ,GAG1Bi6C,EAAIr6C,OAASgmB,EAAKhmB,QAGnB7H,KAAKkS,MAAMwZ,SAAS1Z,EAAM2zG,OAG3B,CACC,IAAI9zG,EAAQ7R,KAAKunB,KAAK08B,YAAYjyC,GAC9Boa,EAASva,EAAMnK,MAAMiG,YAAYgsB,cAAgBhsB,YAAYwyB,aAE7D/T,GAASze,YAAY4e,YAExB21B,EAAI9yC,GAAK8yC,EAAIj6C,MAAQ4lB,EAAK5lB,MAElBmkB,GAASze,YAAYwyB,eAE7B+hB,EAAI9yC,GAAKhG,KAAK2c,OAAOm8B,EAAIj6C,MAAQ4lB,EAAK5lB,OAAS,IAGhD,IAAIokB,EAASrsB,KAAKs+F,iBAAiBzsF,GAE/Bwa,GAAU1e,YAAY8e,aAEzBy1B,EAAI7yC,GAAK6yC,EAAIr6C,OAASgmB,EAAKhmB,OAEnBwkB,GAAU1e,YAAYyyB,eAE9B8hB,EAAI7yC,GAAKjG,KAAK2c,OAAOm8B,EAAIr6C,OAASgmB,EAAKhmB,QAAU,IAGlDq6C,EAAIj6C,MAAQ4lB,EAAK5lB,MACjBi6C,EAAIr6C,OAASgmB,EAAKhmB,OAGnB,IAAK69G,IAAmBh/B,EACxB,CACC,IAAIjgE,EAASzmB,KAAKunB,KAAK64E,UAAUpgG,KAAKkS,MAAMg6E,YAAYl6E,IAExD,GAAc,MAAVyU,EACJ,CACC,IAAIjf,EAAKxH,KAAKunB,KAAKoH,UACfrc,EAAQtS,KAAKunB,KAAKjV,MAElBrK,GAASwe,EAAOrX,EAAIqX,EAAOxe,OAASqK,EAAQ4vC,EAAI9yC,EAAI5H,EAAG4H,EACvDvH,GAAU4e,EAAOpX,EAAIoX,EAAO5e,QAAUyK,EAAQ4vC,EAAI7yC,EAAI7H,EAAG6H,EAE7D6yC,EAAIj6C,MAAQmB,KAAKC,IAAI64C,EAAIj6C,MAAOA,GAChCi6C,EAAIr6C,OAASuB,KAAKC,IAAI64C,EAAIr6C,OAAQA,IAIpC7H,KAAK2pG,aAAa,CAAC33F,GAAO,CAACkwC,IAAM,IAGnC,QAECliD,KAAKkS,MAAM0Z,eAgCdm8E,QAAQ37F,UAAUo5G,wBAA0B,SAASxzG,GAEpD,IAAIrF,EAAS,KAEb,GAAY,MAARqF,EACJ,CACC,IAAIH,EAAQ7R,KAAKunB,KAAK08B,YAAYjyC,GAC9BtK,EAAQmK,EAAMnK,MAElB,IAAK1H,KAAKkS,MAAMC,OAAOH,GACvB,CACC,IAAI2a,EAAWjlB,EAAMiG,YAAYuvB,iBAAmBvvB,YAAYof,iBAC5Dxa,EAAK,EACLE,EAAK,EAGmB,MAAxBzS,KAAKwiD,SAAS3wC,IAAoD,MAAlCnK,EAAMiG,YAAYysB,cAEjD1yB,EAAMiG,YAAYswB,cAAgBtwB,YAAYuxB,cAE7Cx3B,EAAMiG,YAAYisB,uBAAyBjsB,YAAYyyB,eAE1D7tB,GAAMoC,WAAWjN,EAAMiG,YAAY0sB,qBAAuB0iC,QAAQ3wD,UAAUy7D,WAGzEngE,EAAMiG,YAAYgsB,cAAgBhsB,YAAYwyB,eAEjD1tB,GAAMkC,WAAWjN,EAAMiG,YAAY2sB,sBAAwByiC,QAAQ3wD,UAAUy7D,YAMhFt1D,GAAM,GAAK7K,EAAMiG,YAAY8uB,gBAAkB,GAC/ClqB,GAAM7K,EAAMiG,YAAYgvB,qBAAuB,EAC/CpqB,GAAM7K,EAAMiG,YAAYkvB,sBAAwB,EAEhDpqB,GAAM,GAAK/K,EAAMiG,YAAY8uB,gBAAkB,GAC/ChqB,GAAM/K,EAAMiG,YAAY+uB,oBAAsB,EAC9CjqB,GAAM/K,EAAMiG,YAAYivB,uBAAyB,EAKjD,IAAIyW,EAAQrzC,KAAKg/F,gBAAgBntF,GAEpB,MAATwhC,IAEH9gC,GAAM8gC,EAAMprC,MAAQ,GAIrB,IAAIF,EAAQ/H,KAAK4S,aAAaqrF,cAAcpsF,GAE5C,GAAa,MAAT9J,GAAiBA,EAAM5F,OAAS,EACpC,CACMnC,KAAKq+F,YAAYxsF,EAAMG,QAE3BjK,EAAQO,QAAQsQ,aAAa7Q,GAAO,IAGrCA,EAAQA,EAAM6G,QAAQ,MAAO,QAE7B,IAAIif,EAAOvlB,QAAQokB,iBAAiB3kB,EAAO4kB,EAC1CjlB,EAAMiG,YAAYsvB,kBAAmB,KACrCv1B,EAAMiG,YAAYwvB,kBACfl1B,EAAQ4lB,EAAK5lB,MAAQsK,EACrB1K,EAASgmB,EAAKhmB,OAAS4K,EAE3B,IAAKnK,QAAQyW,SAASrX,EAAOiG,YAAY6Z,kBAAkB,GAC3D,CACC,IAAI3W,EAAMhJ,EAEVA,EAASI,EACTA,EAAQ4I,EAGL7Q,KAAKu1C,cAERttC,EAAQjI,KAAKo4C,KAAKnwC,EAAQjI,KAAKm4C,SAAW,GAC1CtwC,EAAS7H,KAAKo4C,KAAKvwC,EAAS7H,KAAKm4C,SAAW,IAG7CxrC,EAAS,IAAI2C,YAAY,EAAG,EAAGrH,EAAOJ,OAGvC,CACC,IAAI+9G,EAAM,EAAI5lH,KAAKm4C,SACnBxrC,EAAS,IAAI2C,YAAY,EAAG,EAAGs2G,EAAKA,KAKvC,OAAOj5G,GAcRo7F,QAAQ37F,UAAUy9D,WAAa,SAAS73D,EAAMyU,EAAQk7B,GAErD,OAAO3hD,KAAK6lH,YAAY,CAAC7zG,GAAO,CAACyU,GAASk7B,GAAS,IAepDomD,QAAQ37F,UAAUy5G,YAAc,SAAS17F,EAAO1D,EAAQk7B,GAEvDA,EAAsB,MAAXA,EAAmBA,EAAU3hD,KAAK8lH,oBAE7C9lH,KAAKkS,MAAMuZ,cACX,IAEC,IAAI81C,EAAOvhE,KAAK2pG,aAAax/E,EAAO1D,EAAQk7B,GAC5C3hD,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQuhC,aACxC,QAASrhB,EAAO,SAAU1D,EAAQ,WAAY86C,IAEhD,QAECvhE,KAAKkS,MAAM0Z,YAGZ,OAAOzB,GAiDR49E,QAAQ37F,UAAUu9F,aAAe,SAASx/E,EAAO1D,EAAQk7B,GAExDA,EAAsB,MAAXA,GAAmBA,EAC9B,IAAI4f,EAAO,GAEX,GAAa,MAATp3C,GAA2B,MAAV1D,GAAkB0D,EAAMhoB,QAAUskB,EAAOtkB,OAC9D,CACCnC,KAAKkS,MAAMuZ,cACX,IAEC,IAAK,IAAI5mB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC08D,EAAK30D,KAAK5M,KAAK+lH,YAAY57F,EAAMtlB,GAAI4hB,EAAO5hB,IAAI,EAAO88C,IAEnD3hD,KAAKmkH,eAAeh6F,EAAMtlB,KAE7B7E,KAAKokH,aAAaj6F,EAAMtlB,IAGzB7E,KAAKqkH,eAAel6F,EAAMtlB,IAGvB7E,KAAKw6G,oBAERx6G,KAAK6uE,WAAW1kD,GAGjBnqB,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQwhC,cACxC,QAASthB,EAAO,SAAU1D,EAAQ,WAAY86C,IAEhD,QAECvhE,KAAKkS,MAAM0Z,aAIb,OAAO21C,GAgBRwmC,QAAQ37F,UAAU25G,YAAc,SAAS/zG,EAAMyU,EAAQu/F,EAAgBrkE,GAEtE,IAAI4f,EAAOvhE,KAAKkS,MAAMk5D,YAAYp5D,GAElC,GAAY,MAARuvD,IAAiBA,EAAKnyD,GAAKqX,EAAOrX,GAAKmyD,EAAKlyD,GAAKoX,EAAOpX,GAC3DkyD,EAAKt5D,OAASwe,EAAOxe,OAASs5D,EAAK15D,QAAU4e,EAAO5e,QACrD,CACC,IAAIq6C,EAAMqf,EAAK9xD,QAEf,IAAKu2G,GAAkB9jE,EAAIE,SAC3B,CACC,IAAIxlC,EAASslC,EAAItlC,OAEH,MAAVA,IAEHA,EAAOxN,GAAKqX,EAAOrX,EAAI8yC,EAAI9yC,EAC3BwN,EAAOvN,GAAKoX,EAAOpX,EAAI6yC,EAAI7yC,QAK5B6yC,EAAI9yC,EAAIqX,EAAOrX,EACf8yC,EAAI7yC,EAAIoX,EAAOpX,EAGhB6yC,EAAIj6C,MAAQwe,EAAOxe,MACnBi6C,EAAIr6C,OAAS4e,EAAO5e,OAEfq6C,EAAIE,WAAYpiD,KAAKkS,MAAM2vC,SAAS7vC,IAAUhS,KAAKgkH,+BAEvD9hE,EAAI9yC,EAAIhG,KAAKC,IAAI,EAAG64C,EAAI9yC,GACxB8yC,EAAI7yC,EAAIjG,KAAKC,IAAI,EAAG64C,EAAI7yC,IAGzBrP,KAAKkS,MAAMuZ,cACX,IAEKk2B,GAEH3hD,KAAKimH,iBAAiBj0G,EAAMkwC,GAG7BliD,KAAKkS,MAAMu5D,YAAYz5D,EAAMkwC,GAC7BliD,KAAKkmH,oBAAoBl0G,GAE1B,QAEChS,KAAKkS,MAAM0Z,aAIb,OAAO21C,GAcRwmC,QAAQ37F,UAAU65G,iBAAmB,SAASj0G,EAAM03E,GAOnD,IALA,IAAIxnC,EAAMliD,KAAKkS,MAAMk5D,YAAYp5D,GAC7BO,EAAKm3E,EAAOzhF,MAAQi6C,EAAIj6C,MACxBwK,EAAKi3E,EAAO7hF,OAASq6C,EAAIr6C,OACzBqL,EAAalT,KAAKkS,MAAMiB,cAAcnB,GAEjCnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/B7E,KAAKmmH,UAAUnmH,KAAKkS,MAAMkB,WAAWpB,EAAMnN,GAAI0N,EAAIE,GAAI,IAazDs1F,QAAQ37F,UAAU85G,oBAAsB,SAASl0G,GAIhD,IAFA,IAAIkB,EAAalT,KAAKkS,MAAMiB,cAAcnB,GAEjCnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/B7E,KAAKqkH,eAAerkH,KAAKkS,MAAMkB,WAAWpB,EAAMnN,KAiBlDkjG,QAAQ37F,UAAU+5G,UAAY,SAASn0G,EAAMO,EAAIE,EAAIkvC,GAEpD,IAAIO,EAAMliD,KAAKkS,MAAMk5D,YAAYp5D,GAEjC,GAAW,MAAPkwC,EACJ,CACC,IAAIx6C,EAAQ1H,KAAK+pE,oBAAoB/3D,GAIjC5C,GAHJ8yC,EAAMA,EAAIzyC,SAGEL,EACRC,EAAI6yC,EAAI7yC,EACRvG,EAAIo5C,EAAIj6C,MACRY,EAAIq5C,EAAIr6C,OAEZq6C,EAAI5vC,MAAMC,EAAIE,EAAuC,SAAnC/K,EAAMiG,YAAYyvB,eAES,KAAzC11B,EAAMiG,YAAYiwB,oBAErBskB,EAAIj6C,MAAQa,EAAIyJ,EAEiC,KAAzC7K,EAAMiG,YAAYiwB,sBAE1BskB,EAAIj6C,MAAQa,GAGiC,KAA1CpB,EAAMiG,YAAYkwB,qBAErBqkB,EAAIr6C,OAASgB,EAAI4J,EAEiC,KAA1C/K,EAAMiG,YAAYkwB,uBAE1BqkB,EAAIr6C,OAASgB,GAGT7I,KAAK4qE,cAAc54D,KAEvBkwC,EAAI9yC,EAAIA,EACR8yC,EAAI7yC,EAAIA,GAGJrP,KAAKomH,gBAAgBp0G,KAEzBkwC,EAAIj6C,MAAQa,EACZo5C,EAAIr6C,OAASgB,GAGV7I,KAAKkS,MAAM2vC,SAAS7vC,GAEvBhS,KAAK+lH,YAAY/zG,EAAMkwC,GAAK,EAAMP,GAIlC3hD,KAAKkS,MAAMu5D,YAAYz5D,EAAMkwC,KAehC6lD,QAAQ37F,UAAUg4G,aAAe,SAASpyG,GAEzC,GAAY,MAARA,EACJ,CACC,IAAI2E,EAAS3W,KAAKkS,MAAM+vC,UAAUjwC,GAC9BqJ,EAAIrb,KAAKmiD,gBAAgBxrC,GAE7B,GAAc,MAAVA,GAAuB,MAAL0E,IAAcrb,KAAK6tE,gBAAgBl3D,GACzD,CACC,IAAIurC,EAAMliD,KAAKmiD,gBAAgBnwC,GAEpB,MAAPkwC,IAAgBA,EAAIE,WACtB/mC,EAAEpT,MAAQi6C,EAAI9yC,EAAI8yC,EAAIj6C,OACvBoT,EAAExT,OAASq6C,EAAI7yC,EAAI6yC,EAAIr6C,WAEvBwT,EAAIA,EAAE5L,SAEJxH,MAAQmB,KAAKC,IAAIgS,EAAEpT,MAAOi6C,EAAI9yC,EAAI8yC,EAAIj6C,OACxCoT,EAAExT,OAASuB,KAAKC,IAAIgS,EAAExT,OAAQq6C,EAAI7yC,EAAI6yC,EAAIr6C,QAE1C7H,KAAK2pG,aAAa,CAAChzF,GAAS,CAAC0E,IAAI,OA0BrC0sF,QAAQ37F,UAAUijC,YAAc,SAASllB,EAAO5X,EAAIE,EAAIgM,EAAQtW,EAAK+lF,GAEpE,OAAOluF,KAAK02E,UAAUvsD,EAAO5X,EAAIE,GAAI,EAAMgM,EAAQtW,EAAK+lF,IA4BzD6Z,QAAQ37F,UAAUsqE,UAAY,SAASvsD,EAAO5X,EAAIE,EAAIhD,EAAOgP,EAAQtW,EAAK+lF,GAMzE,GAJA37E,EAAY,MAANA,EAAcA,EAAK,EACzBE,EAAY,MAANA,EAAcA,EAAK,EACzBhD,EAAkB,MAATA,GAAiBA,EAEb,MAAT0a,IAAwB,GAAN5X,GAAiB,GAANE,GAAWhD,GAAmB,MAAVgP,GACrD,CAEC0L,EAAQnqB,KAAKkS,MAAM68B,gBAAgB5kB,GAEnCnqB,KAAKkS,MAAMuZ,cACX,IAMC,IAFA,IAAIhM,EAAO,IAAItT,aAENtH,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC4a,EAAKlT,IAAI4d,EAAMtlB,IAAI,GAGpB,IAAI6vC,EAAapsC,QAAQ2M,KAAKjV,MAAM,SAASgS,GAE5C,KAAe,MAARA,GACP,CACC,GAAIyN,EAAK5T,IAAImG,GAEZ,OAAO,EAGRA,EAAOhS,KAAKkS,MAAM+vC,UAAUjwC,GAG7B,OAAO,KAIJkiC,EAAU,GAEd,IAASrvC,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CACC,IAAIq9C,EAAMliD,KAAKmiD,gBAAgBh4B,EAAMtlB,IACjC8R,EAAS3W,KAAKkS,MAAM+vC,UAAU93B,EAAMtlB,IAE5B,MAAPq9C,GAAgBA,EAAIE,UAAcpiD,KAAKkS,MAAMC,OAAOwE,KACtD+9B,EAAW10C,KAAKkS,MAAMs4D,YAAY7zD,GAAQ,KAC3C+9B,EAAW10C,KAAKkS,MAAMs4D,YAAY7zD,GAAQ,MAE3Cu9B,EAAQtnC,KAAKud,EAAMtlB,IAIrBslB,EAAQ+pB,EAEJzkC,IAEH0a,EAAQnqB,KAAKgvC,WAAW7kB,EAAOnqB,KAAKqmH,sBAAuBn4B,GAE7C,MAAVzvE,IAEHA,EAASze,KAAKovC,qBAQhB,IAAI5iC,EAAWxM,KAAKgkH,6BAapB,GAXc,MAAVvlG,GAEHze,KAAKsmH,6BAA4B,GAGlCtmH,KAAK0pG,WAAWv/E,EAAO5X,EAAIE,GAAKhD,GAASzP,KAAKumH,sBACzCvmH,KAAKwmH,uBAAkC,MAAV/nG,EAChCze,KAAKymH,yBAAqC,MAAVhoG,GAElCze,KAAKsmH,4BAA4B95G,GAEnB,MAAViS,EACJ,CACC,IAAIhQ,EAAQzO,KAAKkS,MAAMiB,cAAcsL,GACrCze,KAAKiqG,WAAW9/E,EAAO1L,EAAQhQ,EAAO,KAAM,MAAM,GAInDzO,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQqhC,WAAY,QAASnhB,EAC7D,KAAM5X,EAAI,KAAME,EAAI,QAAShD,EAAO,SAAUgP,EAAQ,QAAStW,IAEjE,QAECnI,KAAKkS,MAAM0Z,aAIb,OAAOzB,GAUR49E,QAAQ37F,UAAUs9F,WAAa,SAASv/E,EAAO5X,EAAIE,EAAIi0G,EAAY9C,EAAWlkG,GAE7E,GAAa,MAATyK,IAAwB,GAAN5X,GAAiB,GAANE,GACjC,CACCiN,EAAoB,MAAVA,GAAkBA,EAE5B1f,KAAKkS,MAAMuZ,cACX,IAEKi7F,GAEH1mH,KAAK2mH,gBAAgBx8F,GAGtB,IAAK,IAAItlB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC7E,KAAK4mH,cAAcz8F,EAAMtlB,GAAI0N,EAAIE,GAE7BiN,GAAU1f,KAAKmkH,eAAeh6F,EAAMtlB,IAEvC7E,KAAKokH,aAAaj6F,EAAMtlB,IAEhB++G,GAER5jH,KAAKqkH,eAAel6F,EAAMtlB,IAIxB7E,KAAKy6G,kBAERz6G,KAAK6uE,WAAW1kD,GAGjBnqB,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQshC,YACxC,QAASphB,EAAO,KAAM5X,EAAI,KAAME,EAAI,aAAci0G,IAEpD,QAEC1mH,KAAKkS,MAAM0Z,eAWdm8E,QAAQ37F,UAAUw6G,cAAgB,SAAS50G,EAAMO,EAAIE,GAEpD,IAAIyvC,EAAMliD,KAAKkS,MAAMk5D,YAAYp5D,GAEjC,GAAW,MAAPkwC,EACJ,CAYC,GAXA3vC,EAAKoC,WAAWpC,GAChBE,EAAKkC,WAAWlC,IAChByvC,EAAMA,EAAIzyC,SACNkf,UAAUpc,EAAIE,GAEbyvC,EAAIE,WAAYpiD,KAAKkS,MAAM2vC,SAAS7vC,IAAUhS,KAAKgkH,+BAEvD9hE,EAAI9yC,EAAIhG,KAAKC,IAAI,EAAGsL,WAAWutC,EAAI9yC,IACnC8yC,EAAI7yC,EAAIjG,KAAKC,IAAI,EAAGsL,WAAWutC,EAAI7yC,KAGhC6yC,EAAIE,WAAapiD,KAAKkS,MAAMC,OAAOH,GACvC,CACC,IAAI2E,EAAS3W,KAAKkS,MAAM+vC,UAAUjwC,GAC9BqO,EAAQ,EAEZ,GAAIrgB,KAAKkS,MAAM2vC,SAASlrC,GACxB,CACC,IAAIjP,EAAQ1H,KAAK+pE,oBAAoBpzD,GACrC0J,EAAQ/X,QAAQyW,SAASrX,EAAOiG,YAAY2W,eAAgB,GAG7D,GAAa,GAATjE,EACJ,CACC,IAAIJ,EAAM3X,QAAQuX,WAAWQ,GACzBU,EAAM3X,KAAK2X,IAAId,GACfgB,EAAM7X,KAAK6X,IAAIhB,GACfwD,EAAKnb,QAAQkb,gBAAgB,IAAIrU,QAAQoD,EAAIE,GAAKsO,EAAKE,EAAK,IAAI9R,QAAQ,EAAG,IAC/EoD,EAAKkR,EAAGrU,EACRqD,EAAKgR,EAAGpU,EAGS,MAAd6yC,EAAItlC,OAEPslC,EAAItlC,OAAS,IAAIzN,QAAQoD,EAAIE,IAI7ByvC,EAAItlC,OAAOxN,EAAIuF,WAAWutC,EAAItlC,OAAOxN,GAAKmD,EAC1C2vC,EAAItlC,OAAOvN,EAAIsF,WAAWutC,EAAItlC,OAAOvN,GAAKoD,GAI5CzS,KAAKkS,MAAMu5D,YAAYz5D,EAAMkwC,KAa/B6lD,QAAQ37F,UAAUy6G,uBAAyB,SAAS70G,GAEnD,GAAY,MAARA,IAAiBhS,KAAKkS,MAAMC,OAAOH,GACvC,CACC,IAAI2E,EAAS3W,KAAKkS,MAAM+vC,UAAUjwC,GAElC,GAAc,MAAV2E,GAAkBA,GAAU3W,KAAKovC,mBACrC,CACC,IAAIqd,EAAIzsD,KAAKkS,MAAMk5D,YAAYz0D,GAE/B,GAAS,MAAL81C,EACJ,CACC,IAAIr9C,EAAI,EACJC,EAAI,EACJvG,EAAI2jD,EAAExkD,MACNY,EAAI4jD,EAAE5kD,OAEV,GAAI7H,KAAKwtE,WAAW72D,GACpB,CACC,IAAIkX,EAAO7tB,KAAKkuE,aAAav3D,GACzBjP,EAAQ1H,KAAK+pE,oBAAoBpzD,GACjCiyC,EAAMtgD,QAAQyW,SAASrX,EAAOiG,YAAYiY,gBAAiBjY,YAAYoX,gBACvEW,EAA+D,GAAvDpd,QAAQyW,SAASrX,EAAOiG,YAAYkY,YAAa,GACzDF,EAA+D,GAAvDrd,QAAQyW,SAASrX,EAAOiG,YAAYmY,YAAa,GAE7D,GAAI8iC,GAAOj7C,YAAYmX,iBAAmB8jC,GAAOj7C,YAAY6W,gBAC7D,CACC,IAAI3T,EAAMgd,EAAK5lB,MACf4lB,EAAK5lB,MAAQ4lB,EAAKhmB,OAClBgmB,EAAKhmB,OAASgJ,GAGV+3C,GAAOj7C,YAAYoX,iBAAmBY,GAAWijC,GAAOj7C,YAAY6W,kBAAoBkB,GAC3FkjC,GAAOj7C,YAAYkX,gBAAkBc,GAAWijC,GAAOj7C,YAAYmX,iBAAmBY,KAEvFtW,EAAIye,EAAK5lB,MACToH,EAAIwe,EAAKhmB,QAGViB,GAAK+kB,EAAK5lB,MACVY,GAAKglB,EAAKhmB,OAGX,OAAO,IAAIyH,YAAYF,EAAGC,EAAGvG,EAAGD,KAKnC,OAAO,MASRk/F,QAAQ37F,UAAU06G,sBAAwB,WAEzC,OAAO9mH,KAAKu5G,oBAgBbxR,QAAQ37F,UAAUi4G,eAAiB,SAASryG,EAAM+0G,GAIjD,GAFAA,EAA0B,MAAbA,GAAqBA,EAEtB,MAAR/0G,EACJ,CACC,IAAIkwC,EAAMliD,KAAKmiD,gBAAgBnwC,GAE/B,GAAW,MAAPkwC,IAAgBliD,KAAKgnH,gCAAkC9kE,EAAIE,UAC/D,CACC,IAAIzrC,EAAS3W,KAAKkS,MAAM+vC,UAAUjwC,GAE9B3I,GADOrJ,KAAKmiD,gBAAgBxrC,GACtB3W,KAAK8mH,yBAGf,GAAW,MAAPz9G,EACJ,CACC,IAAI6uC,EAAMl4C,KAAKi2E,2BAA2B,CAACt/D,IAAS,GAEzC,MAAPuhC,KAEH7uC,EAAMiG,YAAYwB,cAAczH,IAE5B+F,GAAK8oC,EAAI9oC,EACb/F,EAAIgG,GAAK6oC,EAAI7oC,GAIf,GAAIrP,KAAKinH,iBAAiBj1G,GAC1B,CACC,IAAInB,EAAM7Q,KAAK6mH,uBAAuB70G,GAEtC,GAAW,MAAPnB,EACJ,CACC,IAAIq2G,EAAUlnH,KAAKmnH,WAAWn1G,GAE1Bk1G,EAAU,KAEbr2G,EAAMvB,YAAYwB,cAAcD,IAE5BzB,GAAKyB,EAAI5I,MAAQi/G,EACrBr2G,EAAIxB,GAAKwB,EAAIhJ,OAASq/G,EACtBr2G,EAAI5I,OAAS,EAAI4I,EAAI5I,MAAQi/G,EAC7Br2G,EAAIhJ,QAAU,EAAIgJ,EAAIhJ,OAASq/G,GAIrB,MAAP79G,EAEHA,EAAMwH,GAINxH,EAAMiG,YAAYwB,cAAczH,IAC5B8G,UAAUU,IAKjB,GAAW,MAAPxH,EACJ,CACC,IAAI8gB,EAAQ,CAACnY,GAEb,IAAKhS,KAAK6tE,gBAAgB77D,GAIzB,IAFA,IAAIq8C,EAAOruD,KAAKkS,MAAMy4E,eAAe34E,GAE5BnN,EAAI,EAAGA,EAAIwpD,EAAKlsD,OAAQ0C,IAE5B7E,KAAK8qE,cAAczc,EAAKxpD,KAE3BslB,EAAMvd,KAAKyhD,EAAKxpD,IAKnB,IAAIgpD,EAAO7tD,KAAKi2E,2BAA2B9rD,GAAO,GAElD,GAAY,MAAR0jC,EACJ,CAIC,IAAIt7C,EAAK,GAHT2vC,EAAMA,EAAIzyC,SAKFxH,MAAQoB,EAAIpB,QAEnBsK,EAAK2vC,EAAIj6C,MAAQoB,EAAIpB,MACrBi6C,EAAIj6C,OAASsK,GAGVs7C,EAAKz+C,EAAIy+C,EAAK5lD,MAAQoB,EAAI+F,EAAI/F,EAAIpB,QAErCsK,GAAMs7C,EAAKz+C,EAAIy+C,EAAK5lD,MAAQoB,EAAI+F,EAAI/F,EAAIpB,MAAQsK,GAIjD,IAAIE,EAAK,EAELyvC,EAAIr6C,OAASwB,EAAIxB,SAEpB4K,EAAKyvC,EAAIr6C,OAASwB,EAAIxB,OACtBq6C,EAAIr6C,QAAU4K,GAGXo7C,EAAKx+C,EAAIw+C,EAAKhmD,OAASwB,EAAIgG,EAAIhG,EAAIxB,SAEtC4K,GAAMo7C,EAAKx+C,EAAIw+C,EAAKhmD,OAASwB,EAAIgG,EAAIhG,EAAIxB,OAAS4K,GAG/Co7C,EAAKz+C,EAAI/F,EAAI+F,IAEhBmD,GAAMs7C,EAAKz+C,EAAI/F,EAAI+F,GAGhBy+C,EAAKx+C,EAAIhG,EAAIgG,IAEhBoD,GAAMo7C,EAAKx+C,EAAIhG,EAAIgG,GAGV,GAANkD,GAAiB,GAANE,IAEVyvC,EAAIE,UAGW,MAAdF,EAAItlC,SAEPslC,EAAItlC,OAAS,IAAIzN,SAGlB+yC,EAAItlC,OAAOxN,GAAKmD,EAChB2vC,EAAItlC,OAAOvN,GAAKoD,IAIhByvC,EAAI9yC,GAAKmD,EACT2vC,EAAI7yC,GAAKoD,IAIXzS,KAAKkS,MAAMu5D,YAAYz5D,EAAMkwC,QAkBlC6lD,QAAQ37F,UAAUyiE,WAAa,SAAS1kD,GAEvC,GAAa,MAATA,EACJ,CAIC,IAFA,IAAI1K,EAAO,IAAItT,aAENtH,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC4a,EAAKlT,IAAI4d,EAAMtlB,IAAI,GAGpB7E,KAAKkS,MAAMuZ,cACX,IAEC,IAAS5mB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CACC,IAAIyO,EAAQtT,KAAKkS,MAAMqB,SAAS4W,EAAMtlB,IAEtC,GAAa,MAATyO,EAEH,IAAK,IAAIgsD,EAAI,EAAGA,EAAIhsD,EAAMnR,OAAQm9D,IAClC,CACC,IAAIztD,EAAQ7R,KAAKunB,KAAKxV,SAASuB,EAAMgsD,IAEjCx7C,EAAmB,MAATjS,EAAiBA,EAAM8tD,oBAAmB,GAAQ3/D,KAAKunB,KAAKo4C,mBAAmBrsD,EAAMgsD,IAAI,GACnG7gD,EAAmB,MAAT5M,EAAiBA,EAAM8tD,oBAAmB,GAAS3/D,KAAKunB,KAAKo4C,mBAAmBrsD,EAAMgsD,IAAI,GAGnG7/C,EAAK5T,IAAIiY,IAAYrE,EAAK5T,IAAI4S,IAElCze,KAAKm2E,UAAU7iE,EAAMgsD,IAKxBt/D,KAAK6uE,WAAW7uE,KAAKkS,MAAMg6E,YAAY/hE,EAAMtlB,MAG/C,QAEC7E,KAAKkS,MAAM0Z,eAcdm8E,QAAQ37F,UAAU+pE,UAAY,SAAStyD,GAEtC,IAAIq+B,EAAMliD,KAAKkS,MAAMk5D,YAAYvnD,GAUjC,OAPW,MAAPq+B,GAA6B,MAAdA,EAAI8Q,QAAkB9Q,EAAI8Q,OAAO7wD,OAAS,KAE5D+/C,EAAMA,EAAIzyC,SACNujD,OAAS,GACbhzD,KAAKkS,MAAMu5D,YAAY5nD,EAAMq+B,IAGvBr+B,GAYRkkF,QAAQ37F,UAAUg7G,qBAAuB,SAAShhG,EAAOwxE,EAAehnD,GAEvE,GAA2B,MAAvBgnD,EAAcvlF,MAClB,CACC,IAAIoU,EAASzmB,KAAKunB,KAAKiwE,mBAAmBI,GACtCpxC,EAAYoxC,EAAclwF,MAAMiG,YAAYiY,iBAEhD,GAAI4gC,GAAa74C,YAAY6W,iBAAmBgiC,GAAa74C,YAAYmX,gBACzE,CACC2B,EAAOrX,GAAKqX,EAAOxe,MAAQ,EAAIwe,EAAO5e,OAAS,EAC/C4e,EAAOpX,GAAKoX,EAAO5e,OAAS,EAAI4e,EAAOxe,MAAQ,EAC/C,IAAI4I,EAAM4V,EAAOxe,MACjBwe,EAAOxe,MAAQwe,EAAO5e,OACtB4e,EAAO5e,OAASgJ,EAGjB,IAAI4W,EAAQnf,QAAQuX,UAAU+3E,EAAcvlF,MAAMukD,oBAElD,GAAa,GAATnvC,EACJ,CACC,IAAI1G,EAAM3X,KAAK2X,KAAK0G,GAChBxG,EAAM7X,KAAK6X,KAAKwG,GAEhB4oE,EAAK,IAAIlhF,QAAQsX,EAAO9W,aAAc8W,EAAO7W,cACjDwW,EAAQ9d,QAAQkb,gBAAgB4C,EAAOrF,EAAKE,EAAKovE,GAGlD,IAAI39E,EAAK,EACLC,EAAK,EACLJ,EAAK,EACLE,EAAK,EAGT,GAAIzS,KAAK+tB,WAAW8zB,SAAS+1C,EAAc5lF,MAC3C,CACC,IAAI0T,EAAQkyE,EAAclwF,MAAMiG,YAAYkY,aACxCF,EAAQiyE,EAAclwF,MAAMiG,YAAYmY,aAGjB,MAAvB8xE,EAAcvlF,OAAgD,MAA/BulF,EAAcvlF,MAAM67C,UAEtDxoC,EAAoE,GAA5Dpd,QAAQyW,SAAS64E,EAAclwF,MAAO,eAAgB,IAAWge,EACzEC,EAAoE,GAA5Drd,QAAQyW,SAAS64E,EAAclwF,MAAO,eAAgB,IAAWie,IAGtE6gC,GAAa74C,YAAY6W,iBAAmBgiC,GAAa74C,YAAYmX,mBAEpEjU,EAAM6U,EACVA,EAAQC,EACRA,EAAQ9U,GAGL6U,IAEHhT,GAAM,EACNH,GAAMkU,EAAOxe,OAGV0d,IAEHhT,GAAM,EACNF,GAAMgU,EAAO5e,QASf,OALAue,EAAQ,IAAIjX,SAASiX,EAAMhX,EAAIqX,EAAOrX,GAAKsD,EAAKH,EAAKkU,EAAOrX,GAAIgX,EAAM/W,EAAIoX,EAAOpX,GAAKsD,EAAKF,EAAKgU,EAAOpX,GAKhG,IAAIoqD,uBAAuB,IAAItqD,QAHb,GAAhBsX,EAAOxe,MAAc,EAAImB,KAAK2c,MAA6B,KAAtBK,EAAMhX,EAAIqX,EAAOrX,GAAYqX,EAAOxe,OAAS,IACjE,GAAjBwe,EAAO5e,OAAe,EAAIuB,KAAK2c,MAA6B,KAAtBK,EAAM/W,EAAIoX,EAAOpX,GAAYoX,EAAO5e,QAAU,MAExC,GAGtD,OAAO,MAeRkgG,QAAQ37F,UAAUi7G,4BAA8B,SAASzjG,EAAUE,GAElE,OAAgB,MAAZF,GAAsC,MAAlBA,EAASvR,OAA2C,MAA1BuR,EAASvR,MAAM67C,QAEzDtqC,EAASvR,MAAM67C,QAAQ+K,YAGxB,MAeR8uC,QAAQ37F,UAAUknG,wBAA0B,SAASzvF,EAAMD,EAAUE,GAEpE,IAAIsC,EAAQ,KACRhX,EAAIyU,EAAKnc,MAAM,EAAWiG,YAAY4qB,aAAe5qB,YAAYirB,eAErE,GAAS,MAALxpB,EACJ,CACC,IAAIC,EAAIwU,EAAKnc,MAAM,EAAWiG,YAAY6qB,aAAe7qB,YAAYkrB,eAE5D,MAALxpB,IAEH+W,EAAQ,IAAIjX,QAAQwF,WAAWvF,GAAIuF,WAAWtF,KAIhD,IAAImqD,GAAY,EACZjnD,EAAK,EAAGE,EAAK,EAejB,OAba,MAAT2T,IAEHozC,EAAYlxD,QAAQyW,SAAS8E,EAAKnc,MAAO,EAAWiG,YAAYgrB,qBAC/DhrB,YAAYqrB,uBAAuB,GAGpCzmB,EAAKoC,WAAWkP,EAAKnc,MAAM,EAAWiG,YAAY8qB,cAAgB9qB,YAAYmrB,iBAC9ErmB,EAAKkC,WAAWkP,EAAKnc,MAAM,EAAWiG,YAAY+qB,cAAgB/qB,YAAYorB,iBAE9ExmB,EAAKyW,SAASzW,GAAKA,EAAK,EACxBE,EAAKuW,SAASvW,GAAKA,EAAK,GAGlB,IAAIgnD,uBAAuBrzC,EAAOozC,EAAW,KAAMjnD,EAAIE,IAkB/Ds1F,QAAQ37F,UAAUk7G,wBAA0B,SAASzjG,EAAMD,EAAUE,EAAQmB,GAE5E,GAAkB,MAAdA,EACJ,CACCjlB,KAAKkS,MAAMuZ,cAEX,IAEmB,MAAdxG,GAA0C,MAApBA,EAAWmB,OAEpCpmB,KAAKwrB,cAAc,EAAW7d,YAAY4qB,aACzC5qB,YAAYirB,cAAe,KAAM,CAAC/U,IACnC7jB,KAAKwrB,cAAc,EAAW7d,YAAY6qB,aACzC7qB,YAAYkrB,cAAe,KAAM,CAAChV,IACnC7jB,KAAKwrB,cAAc,EAAW7d,YAAY8qB,cACzC9qB,YAAYmrB,eAAgB,KAAM,CAACjV,IACpC7jB,KAAKwrB,cAAc,EAAW7d,YAAY+qB,cACzC/qB,YAAYorB,eAAgB,KAAM,CAAClV,IACpC7jB,KAAKwrB,cAAc,EAAW7d,YAAYgrB,qBACzChrB,YAAYqrB,sBAAuB,KAAM,CAACnV,KAEf,MAApBoB,EAAWmB,QAEnBpmB,KAAKwrB,cAAc,EAAW7d,YAAY4qB,aACzC5qB,YAAYirB,cAAe3T,EAAWmB,MAAMhX,EAAG,CAACyU,IACjD7jB,KAAKwrB,cAAc,EAAW7d,YAAY6qB,aACzC7qB,YAAYkrB,cAAe5T,EAAWmB,MAAM/W,EAAG,CAACwU,IACjD7jB,KAAKwrB,cAAc,EAAW7d,YAAY8qB,cACzC9qB,YAAYmrB,eAAgB7T,EAAW1S,GAAI,CAACsR,IAC7C7jB,KAAKwrB,cAAc,EAAW7d,YAAY+qB,cACzC/qB,YAAYorB,eAAgB9T,EAAWxS,GAAI,CAACoR,IAGxCoB,EAAWu0C,UAOfx5D,KAAKwrB,cAAc,EAAW7d,YAAYgrB,qBACzChrB,YAAYqrB,sBAAuB,KAAM,CAACnV,IAN3C7jB,KAAKwrB,cAAc,EAAW7d,YAAYgrB,qBACzChrB,YAAYqrB,sBAAuB,IAAK,CAACnV,KAS7C,QAEC7jB,KAAKkS,MAAM0Z,eAiBdm8E,QAAQ37F,UAAUonG,mBAAqB,SAASvpC,EAAQhlD,EAAYc,GAEnEA,EAAkB,MAATA,GAAiBA,EAC1B,IAAIK,EAAQ,KAEZ,GAAc,MAAV6jD,GAAsC,MAApBhlD,EAAWmB,MACjC,CACC,IAAIK,EAASzmB,KAAKunB,KAAKiwE,mBAAmBvtB,GAChC9mD,EAAK,IAAIhU,QAAQsX,EAAO9W,aAAc8W,EAAO7W,cACnD42C,EAAYyjB,EAAOviE,MAAMiG,YAAYiY,iBACrCxV,EAAK,EAGQ,MAAbo2C,GAC6C,GADxBl+C,QAAQyW,SAASkrD,EAAOviE,MAChDiG,YAAYmvB,6BAA8B,KAEtC0pB,GAAa74C,YAAY6W,gBAE5BpU,GAAM,IAEEo2C,GAAa74C,YAAYkX,eAEjCzU,GAAM,IAEEo2C,GAAa74C,YAAYmX,kBAEjC1U,GAAM,IAIHo2C,GAAa74C,YAAY6W,iBAC5BgiC,GAAa74C,YAAYmX,iBAEzB2B,EAAO9V,YAIT,IAAI2B,EAAQtS,KAAKunB,KAAKjV,MACtB8T,EAAQ,IAAIjX,QAAQsX,EAAOrX,EAAI6V,EAAWmB,MAAMhX,EAAIqX,EAAOxe,MAAQgd,EAAW1S,GAAKD,EACjFmU,EAAOpX,EAAI4V,EAAWmB,MAAM/W,EAAIoX,EAAO5e,OAASod,EAAWxS,GAAKH,GAGlE,IAAIjC,EAAK45D,EAAOviE,MAAMiG,YAAY2W,iBAAmB,EAErD,GAAIW,EAAWu0C,UACf,CACC,GAAU,GAANppD,EACJ,CAEC,IAAI2Q,EAAM,EACNE,EAAM,EAEA,IAAN7Q,EAEH6Q,EAAM,EAEQ,KAAN7Q,EAER2Q,GAAO,EAEO,KAAN3Q,IAER6Q,GAAO,GAGFmF,EAAQ9d,QAAQkb,gBAAgB4C,EAAOrF,EAAKE,EAAKkC,GAGxDiD,EAAQpmB,KAAKunB,KAAKtB,kBAAkBgkD,EAAQ7jD,GAAO,QAMnD,GAFA/V,GAAMD,EAEFpQ,KAAK+tB,WAAW8zB,SAASooB,EAAOj4D,MACpC,CACC,IAAI0T,EAAiD,GAAzCukD,EAAOviE,MAAMiG,YAAYkY,aACjCF,EAAiD,GAAzCskD,EAAOviE,MAAMiG,YAAYmY,aASrC,GANoB,MAAhBmkD,EAAO53D,OAAyC,MAAxB43D,EAAO53D,MAAM67C,UAExCxoC,EAA8D,GAArDpd,QAAQyW,SAASkrD,EAAOviE,MAAO,eAAgB,IAAYge,EACpEC,EAA8D,GAArDrd,QAAQyW,SAASkrD,EAAOviE,MAAO,eAAgB,IAAYie,GAGjE6gC,GAAa74C,YAAY6W,iBAC5BgiC,GAAa74C,YAAYmX,gBAC1B,CACC,IAAI+J,EAAOnJ,EACXA,EAAQC,EACRA,EAAQkJ,EAGLnJ,IAEHU,EAAMhX,EAAI,EAAIqX,EAAO9W,aAAeyW,EAAMhX,GAGvCuW,IAEHS,EAAM/W,EAAI,EAAIoX,EAAO7W,aAAewW,EAAM/W,GAM7C,GAAU,GAANgB,GAAoB,MAAT+V,EACf,CACO,IAAInG,EAAM3X,QAAQuX,UAAUxP,GACxB0Q,EAAM3X,KAAK2X,IAAId,GACfgB,EAAM7X,KAAK6X,IAAIhB,GAEnBmG,EAAQ9d,QAAQkb,gBAAgB4C,EAAOrF,EAAKE,EAAKkC,IAUzD,OANI4C,GAAkB,MAATK,IAEZA,EAAMhX,EAAIhG,KAAK2c,MAAMK,EAAMhX,GAC3BgX,EAAM/W,EAAIjG,KAAK2c,MAAMK,EAAM/W,IAGrB+W,GAkBR2hF,QAAQ37F,UAAUm7G,YAAc,SAAS1jG,EAAMD,EAAUE,EAAQmB,GAEhEjlB,KAAKkS,MAAMuZ,cACX,IAEC,IAAIjf,EAAWxM,KAAKkS,MAAMs4D,YAAY3mD,EAAMC,GAC5C9jB,KAAKskH,cAAczgG,EAAMD,EAAUE,EAAQmB,GAC3CjlB,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQsiC,aACxC,OAAQ1oB,EAAM,WAAYD,EAAU,SAAUE,EAC9C,WAAYtX,IAEd,QAECxM,KAAKkS,MAAM0Z,YAGZ,OAAO/H,GAiBRkkF,QAAQ37F,UAAUk4G,cAAgB,SAASzgG,EAAMD,EAAUE,EAAQmB,GAElE,GAAY,MAARpB,EACJ,CACC7jB,KAAKkS,MAAMuZ,cACX,IAEC,IAAIjf,EAAWxM,KAAKkS,MAAMs4D,YAAY3mD,EAAMC,GAO5C,GAJA9jB,KAAKsnH,wBAAwBzjG,EAAMD,EAAUE,EAAQmB,GAIjDjlB,KAAKwnH,iBACT,CACC,IAAIrjH,EAAK,KAELnE,KAAKmlF,OAAOvhE,KAEfzf,EAAKyf,EAASsnE,QACdtnE,EAAW5jB,KAAKynH,mBAAmB7jG,EAAUE,IAI9C,IAAIxX,EAAM,EAAWqB,YAAYmqB,kBAChCnqB,YAAYoqB,kBACb/3B,KAAKwrB,cAAclf,EAAKnI,EAAI,CAAC0f,IAG9B7jB,KAAKkS,MAAMk6E,YAAYvoE,EAAMD,EAAUE,GAEnC9jB,KAAK06G,qBAER16G,KAAKm2E,UAAUtyD,GAGhB7jB,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQuiC,eACxC,OAAQ3oB,EAAM,WAAYD,EAAU,SAAUE,EAC9C,WAAYtX,IAEd,QAECxM,KAAKkS,MAAM0Z,eAedm8E,QAAQ37F,UAAUu6G,gBAAkB,SAASx8F,GAE5C,GAAa,MAATA,EACJ,CACCnqB,KAAKkS,MAAMuZ,cACX,IAQC,IANA,IAAInZ,EAAQtS,KAAKunB,KAAKjV,MAClB9K,EAAKxH,KAAKunB,KAAKoH,UAGflP,EAAO,IAAItT,aAENtH,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC4a,EAAKlT,IAAI4d,EAAMtlB,IAAI,GAGpB,IAASA,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC,GAAI7E,KAAKkS,MAAMC,OAAOgY,EAAMtlB,IAC5B,CACC,IAAIq9C,EAAMliD,KAAKkS,MAAMk5D,YAAYjhD,EAAMtlB,IAEvC,GAAW,MAAPq9C,EACJ,CACC,IAAIrwC,EAAQ7R,KAAKunB,KAAKxV,SAASoY,EAAMtlB,IACjCgoE,EAAS7sE,KAAKunB,KAAKxV,SACtB/R,KAAKkS,MAAM+vC,UAAU93B,EAAMtlB,KAE5B,GAAa,MAATgN,GACO,MAAVg7D,EACD,CACC3qB,EAAMA,EAAIzyC,QAEV,IAAI8C,GAAMs6D,EAAOnkD,OAAOtZ,EACpBqD,GAAMo6D,EAAOnkD,OAAOrZ,EACpB6W,EAAMrU,EAAMsT,eAEZlgB,EAAMjF,KAAKkS,MAAMs4D,YAAYrgD,EAAMtlB,IAAI,GAE3C,GAAW,MAAPI,GAAejF,KAAK0nH,qBAAqBv9F,EAAMtlB,GAAII,GAAK,GAC5D,CACC,KAAc,MAAPA,IAAgBwa,EAAK5T,IAAI5G,IAE/BA,EAAMjF,KAAKkS,MAAM+vC,UAAUh9C,GAGjB,MAAPA,IAEHi9C,EAAIkuC,iBACH,IAAIjhF,QAAQ+W,EAAI,GAAG9W,EAAIkD,EAAQ9K,EAAG4H,EAAImD,EACrC2T,EAAI,GAAG7W,EAAIiD,EAAQ9K,EAAG6H,EAAIoD,IAAK,GACjCzS,KAAKkS,MAAMk6E,YAAYjiE,EAAMtlB,GAAI,MAAM,IAIzC,IAAIizE,EAAM93E,KAAKkS,MAAMs4D,YAAYrgD,EAAMtlB,IAAI,GAE3C,GAAW,MAAPizE,GAAe93E,KAAK0nH,qBAAqBv9F,EAAMtlB,GAAIizE,GAAK,GAC5D,CACC,KAAc,MAAPA,IAAgBr4D,EAAK5T,IAAIisE,IAE/BA,EAAM93E,KAAKkS,MAAM+vC,UAAU61B,GAG5B,GAAW,MAAPA,EACJ,CACC,IAAI90D,EAAIkD,EAAI/jB,OAAS,EACrB+/C,EAAIkuC,iBACH,IAAIjhF,QAAQ+W,EAAIlD,GAAG5T,EAAIkD,EAAQ9K,EAAG4H,EAAImD,EACrC2T,EAAIlD,GAAG3T,EAAIiD,EAAQ9K,EAAG6H,EAAIoD,IAAK,GACjCzS,KAAKkS,MAAMk6E,YAAYjiE,EAAMtlB,GAAI,MAAM,IAIzC7E,KAAKkS,MAAMu5D,YAAYthD,EAAMtlB,GAAIq9C,MAMtC,QAECliD,KAAKkS,MAAM0Z,eAedm8E,QAAQ37F,UAAUu7G,eAAiB,WAElC,OAAO3nH,KAAKunB,KAAK0lD,aAqClB86B,QAAQ37F,UAAUoqG,oBAAsB,SAASxkG,GAEhD,OAAO,MA4BR+1F,QAAQ37F,UAAU+4E,OAAS,SAASnzE,GAEnC,OAAO,GAcR+1F,QAAQ37F,UAAUq7G,mBAAqB,SAASz1G,EAAM8R,GAErD,OAAO9jB,KAAKkS,MAAM+vC,UAAUjwC,IAiB7B+1F,QAAQ37F,UAAUqmG,sBAAwB,SAASzgG,GAElD,OAAO,MAeR+1F,QAAQ37F,UAAUw7G,WAAa,SAAS51G,GAI3B,OAFZA,EAAOA,GAAQhS,KAAK29G,qBAEA39G,KAAK6nH,YAAY71G,KAEpChS,KAAKunB,KAAKypF,eAAeh/F,GACzBhS,KAAKiY,mBAUP8vF,QAAQ37F,UAAU07G,UAAY,WAE7B,IAAIhqE,EAAO99C,KAAKkS,MAAM8b,UAClB3I,EAAUrlB,KAAK2nH,iBAEnB,GAAe,MAAXtiG,EACJ,CAIC,IAHA,IAAI3M,EAAO1Y,KAAKkS,MAAM+vC,UAAU58B,GAGzB3M,GAAQolC,IAAS99C,KAAK6nH,YAAYnvG,IACvC1Y,KAAKkS,MAAM+vC,UAAUvpC,IAASolC,GAE/BplC,EAAO1Y,KAAKkS,MAAM+vC,UAAUvpC,GAKzBA,GAAQolC,GAAQ99C,KAAKkS,MAAM+vC,UAAUvpC,IAASolC,EAEjD99C,KAAKunB,KAAKypF,eAAe,MAIzBhxG,KAAKunB,KAAKypF,eAAet4F,GAMb,MAHD1Y,KAAKunB,KAAKxV,SAASsT,IAK9BrlB,KAAKy9G,iBAAiBp4F,KAWzB0iF,QAAQ37F,UAAU6wG,KAAO,WAExB,IAAI53F,EAAUrlB,KAAK2nH,iBAEJ,MAAXtiG,IAEHrlB,KAAKunB,KAAKypF,eAAe,MAGZ,MAFDhxG,KAAKunB,KAAKxV,SAASsT,IAI9BrlB,KAAKy9G,iBAAiBp4F,KAezB0iF,QAAQ37F,UAAUy7G,YAAc,SAAS71G,GAExC,OAAgB,MAARA,GAaR+1F,QAAQ37F,UAAUsjB,eAAiB,WAElC,OAAO1vB,KAAKunB,KAAKmI,kBAiBnBq4E,QAAQ37F,UAAUyrF,cAAgB,SAAS7lF,EAAMu/F,EAAcwW,GAE9D,IAAI59F,EAAQ,CAACnY,GAGTu/F,IAEHpnF,EAAQA,EAAM8yD,OAAOj9E,KAAKkS,MAAMqB,SAASvB,KAG1C,IAAIrF,EAAS3M,KAAKunB,KAAK64E,UAAUj2E,GAGjC,GAAI49F,EAIH,IAFA,IAAI70G,EAAalT,KAAKkS,MAAMiB,cAAcnB,GAEjCnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIgM,EAAM7Q,KAAK63F,cAAc73F,KAAKkS,MAAMkB,WAAWpB,EAAMnN,GACxD0sG,GAAc,GAED,MAAV5kG,EAEHA,EAAO5H,IAAI8L,GAIXlE,EAASkE,EAKZ,OAAOlE,GAuCRo7F,QAAQ37F,UAAU6pE,2BAA6B,SAAS9rD,EAAOonF,GAE9DA,EAAgC,MAAhBA,GAAwBA,EACxC,IAAI5kG,EAAS,KAEb,GAAa,MAATwd,EAEH,IAAK,IAAItlB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC,GAAI0sG,GAAgBvxG,KAAKkS,MAAM2vC,SAAS13B,EAAMtlB,IAC9C,CAEC,IAAIq9C,EAAMliD,KAAKmiD,gBAAgBh4B,EAAMtlB,IAErC,GAAW,MAAPq9C,EACJ,CACC,IAAI2L,EAAO,KAEX,GAAI7tD,KAAKkS,MAAMC,OAAOgY,EAAMtlB,IAC5B,CACC,IAAImjH,EAAW,SAASvkG,GAEb,MAANA,IAEQ,MAAP5S,EAEHA,EAAM,IAAIvB,YAAYmU,EAAGrU,EAAGqU,EAAGpU,EAAG,EAAG,GAIrCwB,EAAI9L,IAAI,IAAIuK,YAAYmU,EAAGrU,EAAGqU,EAAGpU,EAAG,EAAG,MAKI,MAA1CrP,KAAKkS,MAAMs4D,YAAYrgD,EAAMtlB,IAAI,IAEpCmjH,EAAS9lE,EAAIiuC,kBAAiB,IAGgB,MAA3CnwF,KAAKkS,MAAMs4D,YAAYrgD,EAAMtlB,IAAI,IAEpCmjH,EAAS9lE,EAAIiuC,kBAAiB,IAG/B,IAAIjqE,EAAMg8B,EAAI8Q,OAEd,GAAW,MAAP9sC,GAAeA,EAAI/jB,OAAS,EAI/B,IAFA,IAAI0O,EAAM,IAAIvB,YAAY4W,EAAI,GAAG9W,EAAG8W,EAAI,GAAG7W,EAAG,EAAG,GAExCiwD,EAAI,EAAGA,EAAIp5C,EAAI/jB,OAAQm9D,IAE/B0oD,EAAS9hG,EAAIo5C,IAIfzR,EAAOh9C,MAGR,CACC,IAAI8F,EAAS3W,KAAKkS,MAAM+vC,UAAU93B,EAAMtlB,IAEpCq9C,EAAIE,SAEHpiD,KAAKkS,MAAM2vC,SAASlrC,IAAWA,GAAU3W,KAAKunB,KAAK0lD,aAI3C,OAFPp8D,EAAM7Q,KAAKi2E,2BAA2B,CAACt/D,IAAS,MAInDk3C,EAAO,IAAIv+C,YAAY4yC,EAAI9yC,EAAIyB,EAAI5I,MAAOi6C,EAAI7yC,EAAIwB,EAAIhJ,OAAQq6C,EAAIj6C,MAAOi6C,EAAIr6C,QAEzES,QAAQ/H,QAAQ4pB,EAAOxT,IAAW,IAErCk3C,EAAKz+C,GAAKyB,EAAIzB,EACdy+C,EAAKx+C,GAAKwB,EAAIxB,KAOjBw+C,EAAOv+C,YAAYwB,cAAcoxC,GAE7BliD,KAAKkS,MAAM2vC,SAASlrC,IAAWrO,QAAQ/H,QAAQ4pB,EAAOxT,IAAW,GAIzD,OAFP9F,EAAM7Q,KAAKi2E,2BAA2B,CAACt/D,IAAS,MAInDk3C,EAAKz+C,GAAKyB,EAAIzB,EACdy+C,EAAKx+C,GAAKwB,EAAIxB,IAKL,MAARw+C,GAA8B,MAAd3L,EAAItlC,SAEvBixC,EAAKz+C,GAAK8yC,EAAItlC,OAAOxN,EACrBy+C,EAAKx+C,GAAK6yC,EAAItlC,OAAOvN,GAGtB,IAAI3H,EAAQ1H,KAAK+pE,oBAAoB5/C,EAAMtlB,IAE3C,GAAY,MAARgpD,EACJ,CACC,IAAIxtC,EAAQ/X,QAAQyW,SAASrX,EAAOiG,YAAY2W,eAAgB,GAEnD,GAATjE,IAEHwtC,EAAOvlD,QAAQ2a,eAAe4qC,EAAMxtC,KAK3B,MAARwtC,IAEW,MAAVlhD,EAEHA,EAAS2C,YAAYwB,cAAc+8C,GAInClhD,EAAO5H,IAAI8oD,KAQjB,OAAOlhD,GAcRo7F,QAAQ37F,UAAUkhG,QAAU,SAASt7F,GAEpChS,KAAKunB,KAAKrb,MAAM8F,EAAc,MAARA,GACtBhS,KAAKunB,KAAK6mF,WACVpuG,KAAKixG,gBACLjxG,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQw+B,WAY1Cs/D,QAAQ37F,UAAUgsC,KAAO,SAASrwC,GAOjC,OALI/H,KAAKu1C,cAERxtC,EAAQqB,KAAK2c,MAAMhe,EAAQ/H,KAAKm4C,UAAan4C,KAAKm4C,UAG5CpwC,GAQRggG,QAAQ37F,UAAU2mD,UAAY,SAAS5jB,EAAO1oB,EAAQwhG,EAAYC,EAAkBC,GAEnF,IAAIv3G,EAAI5Q,KAAKunB,KAAKoH,UACd9V,EAAI7Y,KAAKunB,KAAKjV,MAElB,IAAK21G,GAAcjoH,KAAKu1C,YACxB,CACC,IAAImW,EAAM1rD,KAAKm4C,SAAWt/B,EAAI,GAE9B,IAAKqvG,EACL,CACC,IAAIrmG,EAAK4E,EAAOrX,GAAKpP,KAAKo4C,KAAK3xB,EAAOrX,EAAIyJ,EAAIjI,EAAExB,GAAKwB,EAAExB,GAAKyJ,EAExDzP,KAAKsX,IAAIyuB,EAAM//B,EAAGyS,GAAM6pC,EAE3Bvc,EAAM//B,EAAI,EAIV+/B,EAAM//B,EAAIpP,KAAKo4C,KAAKjJ,EAAM//B,EAAIyJ,GAAKA,EAAIgJ,EAIzC,IAAKsmG,EACL,CACC,IAAIrmG,EAAK2E,EAAOpX,GAAKrP,KAAKo4C,KAAK3xB,EAAOpX,EAAIwJ,EAAIjI,EAAEvB,GAAKuB,EAAEvB,GAAKwJ,EAExDzP,KAAKsX,IAAIyuB,EAAM9/B,EAAIyS,GAAM4pC,EAE5Bvc,EAAM9/B,EAAI,EAIV8/B,EAAM9/B,EAAIrP,KAAKo4C,KAAKjJ,EAAM9/B,EAAIwJ,GAAKA,EAAIiJ,QAMrC4pC,EAAM,GAAM7yC,EAEXqvG,IAEArmG,EAAK4E,EAAOrX,GAAKhG,KAAK2c,MAAMU,EAAOrX,EAAIyJ,EAAIjI,EAAExB,GAAKwB,EAAExB,GAAKyJ,EAEzDzP,KAAKsX,IAAIyuB,EAAM//B,EAAIyS,GAAM6pC,EAE5Bvc,EAAM//B,EAAI,EAIV+/B,EAAM//B,EAAIhG,KAAK2c,MAAMopB,EAAM//B,EAAIyJ,GAAKA,EAAIgJ,GAIrCsmG,IAEArmG,EAAK2E,EAAOpX,GAAKjG,KAAK2c,MAAMU,EAAOpX,EAAIwJ,EAAIjI,EAAEvB,GAAKuB,EAAEvB,GAAKwJ,EAEzDzP,KAAKsX,IAAIyuB,EAAM9/B,EAAIyS,GAAM4pC,EAE5Bvc,EAAM9/B,EAAI,EAIV8/B,EAAM9/B,EAAIjG,KAAK2c,MAAMopB,EAAM9/B,EAAIwJ,GAAKA,EAAIiJ,GAK3C,OAAOqtB,GAeR44D,QAAQ37F,UAAUiwC,SAAW,SAAS9pC,EAAIE,GAEzC,GAAIzS,KAAKi4G,yBAA2B3vG,QAAQyM,cAAc/U,KAAK2nB,WAE9D3nB,KAAK2nB,UAAUM,YAAc1V,EAC7BvS,KAAK2nB,UAAUnc,WAAaiH,MAG7B,CACC,IAAIgc,EAASzuB,KAAKunB,KAAK0uE,YAEvB,GAAIj2F,KAAKsuB,SAAW3gB,YAAY4gB,YAI/B,GAAU,GAANhc,GAAiB,GAANE,GAYd,GATIvS,SAASE,MAEZquB,EAAOpqB,aAAa,YAAa,aAAekO,EAAK,IAAME,EAAK,KAIhEgc,EAAOk9B,gBAAgB,aAGE,MAAtB3rD,KAAKooH,cACT,CAGC,IAFA,IAAIn2G,EAAQjS,KAAKooH,cAAcxyG,WAEf,MAAT3D,GACP,CACC,IAAIyG,EAAOzG,EAAM4D,YACjB7V,KAAK2nB,UAAUpjB,YAAY0N,GAC3BA,EAAQyG,EAcT,IAXqC,MAAjC1Y,KAAKooH,cAAcv0G,YAEtB7T,KAAKooH,cAAcv0G,WAAWC,YAAY9T,KAAKooH,eAGhDpoH,KAAKooH,cAAgB,KAErBpoH,KAAK2nB,UAAUpjB,YAAYkqB,EAAO5a,YAElC5B,EAAQjS,KAAKqoH,cAAczyG,WAEX,MAAT3D,GAEFyG,EAAOzG,EAAM4D,YACjB7V,KAAK2nB,UAAUpjB,YAAY0N,GAC3BA,EAAQyG,EAG4B,MAAjC1Y,KAAKqoH,cAAcx0G,YAEtB7T,KAAKqoH,cAAcx0G,WAAWC,YAAY9T,KAAKqoH,eAGhDroH,KAAKqoH,cAAgB,UAIvB,CAGC,GAFA55F,EAAOpqB,aAAa,YAAa,aAAekO,EAAK,IAAME,EAAK,KAEtC,MAAtBzS,KAAKooH,cACT,CAECpoH,KAAKooH,cAAgBvnH,SAASG,cAAc,OAC5ChB,KAAKooH,cAAc1gH,MAAMogB,SAAW,WACpC9nB,KAAKooH,cAAc1gH,MAAMsN,SAAW,UAEpChV,KAAKqoH,cAAgBxnH,SAASG,cAAc,OAC5ChB,KAAKqoH,cAAc3gH,MAAMogB,SAAW,WACpC9nB,KAAKqoH,cAAc3gH,MAAMsN,SAAW,UAEpC,IAAIqQ,EAAUrlB,KAAKooH,cAGnB,IAFIn2G,EAAQjS,KAAK2nB,UAAU/R,WAEX,MAAT3D,GAEFyG,EAAOzG,EAAM4D,YAGb5D,GAASwc,EAAO5a,WAEnBwR,EAAQ9gB,YAAY0N,GAIpBoT,EAAUrlB,KAAKqoH,cAGhBp2G,EAAQyG,EAI4B,MAAjC1Y,KAAKooH,cAAcxyG,YAEtB5V,KAAK2nB,UAAU6rB,aAAaxzC,KAAKooH,cAAe35F,EAAO5a,YAGnB,MAAjC7T,KAAKqoH,cAAczyG,YAEtB5V,KAAK2nB,UAAUpjB,YAAYvE,KAAKqoH,eAIlCroH,KAAKooH,cAAc1gH,MAAM+U,KAAOlK,EAAK,KACrCvS,KAAKooH,cAAc1gH,MAAMuV,IAAMxK,EAAK,KACpCzS,KAAKqoH,cAAc3gH,MAAM+U,KAAOlK,EAAK,KACrCvS,KAAKqoH,cAAc3gH,MAAMuV,IAAMxK,EAAK,UAKrCgc,EAAO/mB,MAAM+U,KAAOlK,EAAK,KACzBkc,EAAO/mB,MAAMuV,IAAMxK,EAAK,KAGzBzS,KAAKw3C,MAAQjlC,EACbvS,KAAKy3C,MAAQhlC,EAEbzS,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQi+B,QAS3C6/D,QAAQ37F,UAAUk8G,OAAS,WAE1BtoH,KAAK2tB,KAAK3tB,KAAKo6G,aAQhBrS,QAAQ37F,UAAUm8G,QAAU,WAE3BvoH,KAAK2tB,KAAK,EAAI3tB,KAAKo6G,aAQpBrS,QAAQ37F,UAAUo8G,WAAa,WAEP,GAAnBxoH,KAAKunB,KAAKjV,MAEbtS,KAAKunB,KAAKq1B,aAAa,EAAG,IAI1B58C,KAAKunB,KAAKoH,UAAUvf,EAAI,EACxBpP,KAAKunB,KAAKoH,UAAUtf,EAAI,EAExBrP,KAAKunB,KAAKujF,SAAS,KAUrB/C,QAAQ37F,UAAUq8G,OAAS,SAASn2G,EAAO6T,GAE1CnmB,KAAK2tB,KAAKrb,EAAQtS,KAAKunB,KAAKjV,MAAO6T,IAiBpC4hF,QAAQ37F,UAAU+Z,OAAS,SAASirC,EAAYC,EAAUluC,EAAIiE,GAE7DgqC,EAA4B,MAAdA,GAAsBA,EACpCC,EAAwB,MAAZA,GAAoBA,EAChCluC,EAAY,MAANA,EAAcA,EAAK,GACzBiE,EAAY,MAANA,EAAcA,EAAK,GAEzB,IAAIrS,EAAgBzM,QAAQyM,cAAc/U,KAAK2nB,WAC3CkK,EAAU,EAAI7xB,KAAKugH,YACnBmI,EAAK1oH,KAAK2nB,UAAUze,YAAc2oB,EAClC82F,EAAK3oH,KAAK2nB,UAAU1e,aAAe4oB,EACnCpL,EAASzmB,KAAK0vB,iBAEd9e,EAAI5Q,KAAKunB,KAAKoH,UACd9V,EAAI7Y,KAAKunB,KAAKjV,MAEdC,EAAK,EAAem2G,EAAKjiG,EAAOxe,MAAQ,EACxCwK,EAAK,EAAak2G,EAAKliG,EAAO5e,OAAS,EAE3C,GAAKkN,EAML,CACC0R,EAAOrX,GAAKwB,EAAExB,EACdqX,EAAOpX,GAAKuB,EAAEvB,EAEd,IAAIi8C,EAAKtrD,KAAK2nB,UAAUurC,YACpB01D,EAAK5oH,KAAK2nB,UAAUlc,aAEpB6/C,EAAKo9D,IAERn2G,EAAK,GAGFq2G,EAAKD,IAERl2G,EAAK,GAGNzS,KAAKunB,KAAKq1B,aAAaxzC,KAAKmnB,MAAMhe,EAAK,EAAIkU,EAAOrX,GAAIhG,KAAKmnB,MAAM9d,EAAK,EAAIgU,EAAOpX,IACjFrP,KAAK2nB,UAAUM,YAAcqjC,EAAKo9D,GAAM,EACxC1oH,KAAK2nB,UAAUnc,WAAao9G,EAAKD,GAAM,OAvBvC3oH,KAAKunB,KAAKq1B,aAAa,EAAexzC,KAAKmnB,MAAM3f,EAAExB,EAAIqX,EAAOrX,EAAIyJ,EAAItG,EAAK4Q,EAAKtK,GAAKjI,EAAExB,EACtF,EAAahG,KAAKmnB,MAAM3f,EAAEvB,EAAIoX,EAAOpX,EAAIwJ,EAAIpG,EAAK2U,EAAKvO,GAAKjI,EAAEvB,IAiCjE04F,QAAQ37F,UAAUuhB,KAAO,SAASitC,EAAQz0C,GAEzCA,EAAoB,MAAVA,EAAkBA,EAASnmB,KAAKs6G,WAC1C,IAAIhoG,EAAQlJ,KAAK2c,MAAM/lB,KAAKunB,KAAKjV,MAAQsoD,EAAS,KAAO,IACrD/oD,EAAQ7R,KAAKunB,KAAKxV,SAAS/R,KAAK29G,oBAGpC,GAFA/iD,EAAStoD,EAAQtS,KAAKunB,KAAKjV,MAEvBtS,KAAKq6G,4BAAuC,MAATxoG,EACvC,CACC,IAAIhC,EAAO,IAAIP,YAAYuC,EAAMzC,EAAIwrD,EAAQ/oD,EAAMxC,EAAIurD,EACtD/oD,EAAM5J,MAAQ2yD,EAAQ/oD,EAAMhK,OAAS+yD,GAGtC56D,KAAKunB,KAAKjV,MAAQA,EAEbtS,KAAK6oH,oBAAoBh5G,KAE7B7P,KAAKunB,KAAKshF,aAGV7oG,KAAKunB,KAAKujF,SAASx4F,QAIrB,CACC,IAAIyC,EAAgBzM,QAAQyM,cAAc/U,KAAK2nB,WAE/C,GAAIxB,IAAWpR,EACf,CACC,IAWKnB,EAXDrB,EAAKvS,KAAK2nB,UAAUhL,YACpBlK,EAAKzS,KAAK2nB,UAAU5d,aAEpB6wD,EAAS,GAGZroD,KADIqB,GAAKgnD,EAAS,IAAc,EAARtoD,IAExBG,IAAOmB,IAKPrB,GADIqB,GAAK,EAAIgnD,EAAS,IAAwB,EAAlB56D,KAAKunB,KAAKjV,OAEtCG,GAAMmB,GAGP5T,KAAKunB,KAAK2pF,kBAAkB5+F,EAC3BtS,KAAKunB,KAAKoH,UAAUvf,EAAImD,EACxBvS,KAAKunB,KAAKoH,UAAUtf,EAAIoD,OAG1B,CAEC,IAAIoP,EAAK7hB,KAAKunB,KAAKoH,UAAUvf,EACzB0S,EAAK9hB,KAAKunB,KAAKoH,UAAUtf,EACzByN,EAAK9c,KAAK2nB,UAAUM,WACpBlL,EAAK/c,KAAK2nB,UAAUnc,UAExBxL,KAAKunB,KAAKujF,SAASx4F,GAEfyC,IAECxC,EAAK,EACLE,EAAK,EAEL0T,IAEH5T,EAAKvS,KAAK2nB,UAAUhL,aAAei+C,EAAS,GAAK,EACjDnoD,EAAKzS,KAAK2nB,UAAU5d,cAAgB6wD,EAAS,GAAK,GAGnD56D,KAAK2nB,UAAUM,YAAcjoB,KAAKunB,KAAKoH,UAAUvf,EAAIyS,GAAM7hB,KAAKunB,KAAKjV,MAAQlJ,KAAK2c,MAAMjJ,EAAK89C,EAASroD,GACtGvS,KAAK2nB,UAAUnc,WAAaxL,KAAKunB,KAAKoH,UAAUtf,EAAIyS,GAAM9hB,KAAKunB,KAAKjV,MAAQlJ,KAAK2c,MAAMhJ,EAAK69C,EAASnoD,OAoBzGs1F,QAAQ37F,UAAU08G,WAAa,SAASj5G,GAEvC,IAEIk5G,EAFS/oH,KAAK2nB,UAAUze,YAAc2G,EAAK5H,OAClCjI,KAAK2nB,UAAU1e,aAAe4G,EAAKhI,QAIhDgI,EAAKT,EAAIhG,KAAKC,IAAI,EAAGwG,EAAKT,GAC1BS,EAAKR,EAAIjG,KAAKC,IAAI,EAAGwG,EAAKR,GAC1B,IAAI25G,EAAY5/G,KAAK2G,IAAI/P,KAAK2nB,UAAUurC,YAAarjD,EAAKT,EAAIS,EAAK5H,OAC/DghH,EAAa7/G,KAAK2G,IAAI/P,KAAK2nB,UAAUlc,aAAcoE,EAAKR,EAAIQ,EAAKhI,QAOrE,GANAgI,EAAK5H,MAAQ+gH,EAAYn5G,EAAKT,EAC9BS,EAAKhI,OAASohH,EAAap5G,EAAKR,EAK5B05G,EAAe,EACnB,CAEC,IAAIG,EAAYr5G,EAAKhI,OAASkhH,EAC1BI,GAAqBD,EAAYr5G,EAAKhI,QAAU,EACpDgI,EAAKhI,OAASqhH,EAId,IAAIE,EAAchgH,KAAK2G,IAAIF,EAAKR,EAAI85G,GACpCt5G,EAAKR,EAAIQ,EAAKR,EAAI+5G,EAGlBH,EAAa7/G,KAAK2G,IAAI/P,KAAK2nB,UAAUlc,aAAcoE,EAAKR,EAAIQ,EAAKhI,QACjEgI,EAAKhI,OAASohH,EAAap5G,EAAKR,MAGjC,CAEC,IAAIg6G,EAAWx5G,EAAK5H,MAAQ8gH,EACxBO,GAAoBD,EAAWx5G,EAAK5H,OAAS,EACjD4H,EAAK5H,MAAQohH,EAIb,IAAInnC,EAAa94E,KAAK2G,IAAIF,EAAKT,EAAIk6G,GACnCz5G,EAAKT,EAAIS,EAAKT,EAAI8yE,EAGlB8mC,EAAY5/G,KAAK2G,IAAI/P,KAAK2nB,UAAUurC,YAAarjD,EAAKT,EAAIS,EAAK5H,OAC/D4H,EAAK5H,MAAQ+gH,EAAYn5G,EAAKT,EAG/B,IAAIkD,EAAQtS,KAAK2nB,UAAUze,YAAc2G,EAAK5H,MAC1CshH,EAAWvpH,KAAKunB,KAAKjV,MAAQA,EAE5BhK,QAAQyM,cAAc/U,KAAK2nB,YAM/B3nB,KAAKunB,KAAKujF,SAASye,GACnBvpH,KAAK2nB,UAAUM,WAAa7e,KAAK2c,MAAMlW,EAAKT,EAAIkD,GAChDtS,KAAK2nB,UAAUnc,UAAYpC,KAAK2c,MAAMlW,EAAKR,EAAIiD,IAN/CtS,KAAKunB,KAAK2pF,kBAAkBqY,EAAWvpH,KAAKunB,KAAKoH,UAAUvf,EAAIS,EAAKT,EAAIpP,KAAKunB,KAAKjV,MAAStS,KAAKunB,KAAKoH,UAAUtf,EAAIQ,EAAKR,EAAIrP,KAAKunB,KAAKjV,QA6BxIy1F,QAAQ37F,UAAUo9G,oBAAsB,SAASx3G,EAAMmU,GAEtD,IAAI/W,GAAKpP,KAAKunB,KAAKoH,UAAUvf,EACzBC,GAAKrP,KAAKunB,KAAKoH,UAAUtf,EAEzBwC,EAAQ7R,KAAKunB,KAAKxV,SAASC,GAE/B,GAAa,MAATH,EACJ,CACC,IAAI4U,EAAS,IAAInX,YAAYF,EAAIyC,EAAMzC,EAAGC,EAAIwC,EAAMxC,EAAGwC,EAAM5J,MAC5D4J,EAAMhK,QAEP,GAAIse,GAA4B,MAAlBnmB,KAAK2nB,UACnB,CACC,IAAI7e,EAAI9I,KAAK2nB,UAAUze,YACnBL,EAAI7I,KAAK2nB,UAAU1e,aAEvBwd,EAAOrX,EAAIqX,EAAO9W,aAAe7G,EAAI,EACrC2d,EAAOxe,MAAQa,EACf2d,EAAOpX,EAAIoX,EAAO7W,aAAe/G,EAAI,EACrC4d,EAAO5e,OAASgB,EAGjB,IAAIrB,EAAK,IAAI2H,QAAQnP,KAAKunB,KAAKoH,UAAUvf,EAAGpP,KAAKunB,KAAKoH,UAAUtf,GAEhE,GAAIrP,KAAK6oH,oBAAoBpiG,GAC7B,CAEC,IAAIgjG,EAAM,IAAIt6G,QAAQnP,KAAKunB,KAAKoH,UAAUvf,EAAGpP,KAAKunB,KAAKoH,UAAUtf,GACjErP,KAAKunB,KAAKoH,UAAUvf,EAAI5H,EAAG4H,EAC3BpP,KAAKunB,KAAKoH,UAAUtf,EAAI7H,EAAG6H,EAC3BrP,KAAKunB,KAAKq1B,aAAa6sE,EAAIr6G,EAAGq6G,EAAIp6G,MAcrC04F,QAAQ37F,UAAUy8G,oBAAsB,SAASh5G,GAEhD,IAAI65G,GAAY,EAEhB,GAAY,MAAR75G,EACJ,CACC,IAAI/G,EAAI9I,KAAK2nB,UAAUhL,YACnB9T,EAAI7I,KAAK2nB,UAAU5d,aAEb4/G,EAAavgH,KAAK2G,IAAIjH,EAAG+G,EAAK5H,OAC9B2hH,EAAcxgH,KAAK2G,IAAIlH,EAAGgH,EAAKhI,QAEzC,GAAIS,QAAQyM,cAAc/U,KAAK2nB,WAC/B,CACC,IAAI1Y,EAAIjP,KAAK2nB,UACb9X,EAAKT,GAAKpP,KAAKunB,KAAKoH,UAAUvf,EAC9BS,EAAKR,GAAKrP,KAAKunB,KAAKoH,UAAUtf,EAC9B,IAAIkD,EAAKtD,EAAEgZ,WAAapY,EAAKT,EACzBy6G,EAAMzgH,KAAKC,IAAIkJ,EAAKtD,EAAEgZ,WAAY,GAElC1V,EAAK,EAERtD,EAAEgZ,YAAc1V,EAAK,GAIrBA,EAAK1C,EAAKT,EAAIu6G,EAAa16G,EAAEgZ,WAAahZ,EAAE/F,aAEnC,IAER+F,EAAEgZ,YAAc1V,EAAK,GAIvB,IAAIE,EAAKxD,EAAEzD,UAAYqE,EAAKR,EACxBy6G,EAAM1gH,KAAKC,IAAI,EAAGoJ,EAAKxD,EAAEzD,WAEzBiH,EAAK,EAERxD,EAAEzD,WAAaiH,EAAK,GAIpBA,EAAK5C,EAAKR,EAAIu6G,EAAc36G,EAAEzD,UAAYyD,EAAEhG,cAEnC,IAERgG,EAAEzD,WAAaiH,EAAK,GAIjBzS,KAAKi4G,yBAAmC,GAAP4R,GAAmB,GAAPC,GAEjD9pH,KAAKunB,KAAKq1B,aAAaitE,EAAKC,OAI9B,CACC,IAAI16G,GAAKpP,KAAKunB,KAAKoH,UAAUvf,EACzBC,GAAKrP,KAAKunB,KAAKoH,UAAUtf,EAEzBwJ,EAAI7Y,KAAKunB,KAAKjV,MAEdzC,EAAKT,EAAIu6G,EAAav6G,EAAItG,IAE7B9I,KAAKunB,KAAKoH,UAAUvf,IAAMS,EAAKT,EAAIu6G,EAAa7gH,EAAIsG,GAAKyJ,EACzD6wG,GAAY,GAGT75G,EAAKR,EAAIu6G,EAAcv6G,EAAIxG,IAE9B7I,KAAKunB,KAAKoH,UAAUtf,IAAMQ,EAAKR,EAAIu6G,EAAc/gH,EAAIwG,GAAKwJ,EAC1D6wG,GAAY,GAGT75G,EAAKT,EAAIA,IAEZpP,KAAKunB,KAAKoH,UAAUvf,IAAMA,EAAIS,EAAKT,GAAKyJ,EACxC6wG,GAAY,GAGT75G,EAAKR,EAAKA,IAEbrP,KAAKunB,KAAKoH,UAAUtf,IAAMA,EAAIQ,EAAKR,GAAKwJ,EACxC6wG,GAAY,GAGTA,IAEH1pH,KAAKunB,KAAK+lF,UAGwB,MAA9BttG,KAAK4gG,uBAER5gG,KAAK4gG,sBAAsB0M,YAM/B,OAAOoc,GAeR3hB,QAAQ37F,UAAU+1C,gBAAkB,SAASnwC,GAE5C,OAAOhS,KAAKkS,MAAMk5D,YAAYp5D,IAkB/B+1F,QAAQ37F,UAAU0+D,cAAgB,SAAS94D,GAE1C,OAAOhS,KAAKkS,MAAMzH,UAAUuH,IAkB7B+1F,QAAQ37F,UAAUyhE,gBAAkB,SAAS77D,GAE5C,OAAOhS,KAAKkS,MAAM41E,YAAY91E,IAe/B+1F,QAAQ37F,UAAU29G,kBAAoB,SAAS/3G,GAE9C,OAAOhS,KAAKkS,MAAMo7E,cAAct7E,IAajC+1F,QAAQ37F,UAAUooG,aAAe,SAAS3wF,GAEzC,IAAI+sE,EAAa/sE,EAAKnc,MAAMiG,YAAY2qB,kBAExC,GAAkB,MAAds4D,EAEH,OAAOA,EAGR,IAAI//E,EAAM7Q,KAAKunB,KAAKosF,aAAa9vF,GAEjC,OAAOhT,GAAOmwF,YAAYkB,kBACzBrxF,GAAOmwF,YAAYe,gBACnBlxF,GAAOmwF,YAAYgB,YACnBnxF,GAAOmwF,YAAYiB,aACnBpxF,GAAOmwF,YAAYC,gBACnBpwF,GAAOmwF,YAAY4D,eAYrBmD,QAAQ37F,UAAU49G,OAAS,SAASn4G,GAEnC,IAAI5M,EAAM4M,EAAM6lF,yBAAwB,GACpC5f,EAAMjmE,EAAM6lF,yBAAwB,GAExC,OAAe,MAAPzyF,GAAeA,GAAO6yE,GAS/BiwB,QAAQ37F,UAAU6/F,aAAe,SAAS9jG,GAEzC,OAAO8B,QAAQy8B,cAAcv+B,IAU9B4/F,QAAQ37F,UAAU+xG,wBAA0B,SAASh2G,GAEpD,OAAO,GAUR4/F,QAAQ37F,UAAUuyG,cAAgB,SAASx2G,GAE1C,OAAQjI,SAAe,OAAI+J,QAAQ28B,WAAWz+B,GAAO8B,QAAQy8B,cAAcv+B,IAQ5E4/F,QAAQ37F,UAAU2rC,mBAAqB,SAAS5vC,GAE/C,OAAc,MAAPA,IAAgB8B,QAAQ48B,UAAU1+B,IAQ1C4/F,QAAQ37F,UAAU69G,mBAAqB,SAAS9hH,GAE/C,OAAO8B,QAAQ08B,YAAYx+B,IAS5B4/F,QAAQ37F,UAAU89G,sBAAwB,SAAS/hH,GAElD,OAAO,GAaR4/F,QAAQ37F,UAAU+9G,gBAAkB,SAAS70G,GAE5ChN,QAAQK,MAAM2M,IAefyyF,QAAQ37F,UAAUg+G,YAAc,SAASvmG,EAAMC,EAAQrF,GAEtD,OAA4D,MAArDze,KAAKujH,uBAAuB1/F,EAAMC,EAAQrF,IA4ClDspF,QAAQ37F,UAAUm3G,uBAAyB,SAAS1/F,EAAMC,EAAQrF,GAEjE,GAAY,MAARoF,IAAiB7jB,KAAKwmH,yBAAqC,MAAV1iG,GAA4B,MAAVrF,GAEtE,MAAO,GAGR,GAAY,MAARoF,GAAsD,MAAtC7jB,KAAKkS,MAAMs4D,YAAY3mD,GAAM,IACT,MAAvC7jB,KAAKkS,MAAMs4D,YAAY3mD,GAAM,GAE7B,OAAO,KAIR,IAAK7jB,KAAK26G,YAAc72F,GAAUrF,GAAoB,MAAVqF,EAE3C,MAAO,GAIR,IAAK9jB,KAAKqqH,kBAAkBvmG,EAAQrF,GAEnC,MAAO,GAGR,GAAc,MAAVqF,GAA4B,MAAVrF,EACtB,CACC,IAAIkT,EAAQ,GAIZ,IAAK3xB,KAAK46G,WACV,CACC,IAAI/pG,EAAM7Q,KAAKkS,MAAM4gE,gBAAgBhvD,EAAQrF,GAAQ,IAGjD5N,EAAI1O,OAAS,GAAoB,GAAd0O,EAAI1O,QAAe0O,EAAI,IAAMgT,KAEnD8N,IAAU7sB,YAAY+G,IAAI7L,KAAK07G,2BAC9B17G,KAAK07G,0BAA0B,MAOlC,IAAI4O,EAAYtqH,KAAKkS,MAAMw6E,qBAAqB5oE,GAAQ,EAAMD,GAC1D0mG,EAAWvqH,KAAKkS,MAAMw6E,qBAAqBjuE,GAAQ,EAAOoF,GAG9D,GAA2B,MAAvB7jB,KAAKmoG,eAER,IAAK,IAAItjG,EAAI,EAAGA,EAAI7E,KAAKmoG,eAAehmG,OAAQ0C,IAChD,CACC,IAAI6D,EAGO,OAHPA,EAAM1I,KAAKmoG,eAAetjG,GAAGm7F,MAAMhgG,KAAM6jB,EAAMC,EAClDrF,EAAQ6rG,EAAWC,MAInB54F,GAASjpB,GAaZ,OALW,OAFPA,EAAM1I,KAAKwqH,aAAa3mG,EAAMC,EAAQrF,MAIzCkT,GAASjpB,GAGFipB,EAAMxvB,OAAS,EAAKwvB,EAAQ,KAGrC,OAAQ3xB,KAAuB,mBAAI,KAAO,IAe3C+nG,QAAQ37F,UAAUo+G,aAAe,SAAS3mG,EAAMC,EAAQrF,GAEvD,OAAO,MAmBRspF,QAAQ37F,UAAUq+G,cAAgB,SAASz4G,EAAM04G,GAEhD14G,EAAgB,MAARA,EAAgBA,EAAOhS,KAAKkS,MAAM8b,UAC1C08F,EAAsB,MAAXA,EAAmBA,EAAU,IAAIl7C,OAK5C,IAHA,IAAIm7C,GAAU,EACVz3G,EAAalT,KAAKkS,MAAMiB,cAAcnB,GAEjCnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIgM,EAAM7Q,KAAKkS,MAAMkB,WAAWpB,EAAMnN,GAClC+b,EAAM8pG,EAEN1qH,KAAK6nH,YAAYh3G,KAEpB+P,EAAM,IAAI4uD,QAGX,IAAIlkE,EAAOtL,KAAKyqH,cAAc55G,EAAK+P,GAEvB,MAARtV,EAEHtL,KAAKs9G,eAAezsG,EAAKvF,EAAKsD,QAAQ,MAAO,SAI7C5O,KAAKs9G,eAAezsG,EAAK,MAG1B85G,EAAUA,GAAmB,MAARr/G,EAGtB,IAAIiyG,EAAU,GAGVv9G,KAAK6tE,gBAAgB77D,KAAU24G,IAElCpN,IAAYz4G,YAAY+G,IAAI7L,KAAK27G,mCAChC37G,KAAK27G,kCAAoC,MAIvC37G,KAAKkS,MAAMC,OAAOH,GAErBurG,GAAWv9G,KAAKujH,uBAAuBvxG,EACvChS,KAAKkS,MAAMs4D,YAAYx4D,GAAM,GAC7BhS,KAAKkS,MAAMs4D,YAAYx4D,GAAM,KAAW,GAIxCurG,GAAWv9G,KAAK4qH,uBAAuB54G,IAAS,GAIjD,IAAItJ,EAAM1I,KAAKgrG,aAAah5F,EAAM04G,GAgBlC,OAdW,MAAPhiH,IAEH60G,GAAW70G,GAOsB,MAA9B1I,KAAKkS,MAAM+vC,UAAUjwC,IAExBhS,KAAKunB,KAAK6mF,WAGHmP,EAAQp7G,OAAS,IAAMwoH,EAAWpN,EAAU,MAcrDxV,QAAQ37F,UAAUw+G,uBAAyB,SAAS54G,GAEnD,IAAI64G,EAAW7qH,KAAKkS,MAAMw6E,qBAAqB16E,GAAM,GACjD84G,EAAU9qH,KAAKkS,MAAMw6E,qBAAqB16E,GAAM,GAChDjK,EAAQ/H,KAAKkS,MAAM6M,SAAS/M,GAC5B2f,EAAQ,GAEZ,GAA2B,MAAvB3xB,KAAKmoG,eAER,IAAK,IAAItjG,EAAI,EAAGA,EAAI7E,KAAKmoG,eAAehmG,OAAQ0C,IAChD,CACC,IAAIkmH,EAAO/qH,KAAKmoG,eAAetjG,IAE3BkmH,EAAKjnG,QAAUxb,QAAQ+N,OAAOtO,EAAOgjH,EAAKzkH,KAC7CykH,EAAKv1G,KAAMu1G,EAAKhjH,SAAW8iH,EAAWE,EAAK1hH,KAC3CwhH,EAAWE,EAAKh7G,OAIPg7G,EAAKjnG,QAAUxb,QAAQ+N,OAAOtO,EAAOgjH,EAAKzkH,KAClDykH,EAAKv1G,KAAMu1G,EAAKhjH,SAAW+iH,EAAUC,EAAK1hH,KAC1CyhH,EAAUC,EAAKh7G,QAJhB4hB,GAASo5F,EAAK5hB,WAAa,MAW9B,OAAQx3E,EAAMxvB,OAAS,EAAKwvB,EAAQ,MAerCo2E,QAAQ37F,UAAU4+F,aAAe,SAASh5F,EAAM04G,GAE/C,OAAO,MAYR3iB,QAAQ37F,UAAU4lG,mBAAqB,WAEtC,OAAOhyG,KAAKygD,iBAYbsnD,QAAQ37F,UAAU4+G,mBAAqB,SAAS33E,GAE/CrzC,KAAKygD,gBAAkBpN,GASxB00D,QAAQ37F,UAAU4yF,gBAAkB,SAASntF,GAE5C,GAAa,MAATA,GAAiB7R,KAAKi/F,iBAAmBj/F,KAAK+tB,WAAW5b,OAAON,EAAMG,MAC1E,CACC,IAAInB,EAAM7Q,KAAK6tE,gBAAgBh8D,EAAMG,MAErC,GAAIhS,KAAKolH,eAAevzG,EAAMG,MAAOnB,GAEpC,OAAO,EAAQ7Q,KAAKu7G,eAAiBv7G,KAAKw7G,cAI5C,OAAO,MA4BRzT,QAAQ37F,UAAUyxG,qBAAuB,SAAS7rG,GAEjD,IAAIjK,EAAQ/H,KAAKkS,MAAM6M,SAAS/M,GAEhC,GAAa,MAATjK,EACJ,CACC,GAAIO,QAAQ+N,OAAOtO,GAElB,OAAOA,EAAMuO,SAET,GAA8B,mBAAnBvO,EAAc,SAE7B,OAAOA,EAAMnG,WAIf,MAAO,IAuDRmmG,QAAQ37F,UAAU8xF,SAAW,SAASlsF,GAErC,IAAIrF,EAAS,GAEb,GAAI3M,KAAKi7G,eAAyB,MAARjpG,EAC1B,CACC,IAAItK,EAAQ1H,KAAK+pE,oBAAoB/3D,GAEhC1J,QAAQyW,SAASrX,EAAOiG,YAAY8sB,eAAe,KAEvD9tB,EAAS3M,KAAK69G,qBAAqB7rG,IAIrC,OAAOrF,GAaRo7F,QAAQ37F,UAAUiyF,YAAc,SAASrsF,GAExC,OAAOhS,KAAKirH,gBAQbljB,QAAQ37F,UAAU6+G,aAAe,WAEhC,OAAOjrH,KAAKk7G,YAQbnT,QAAQ37F,UAAU8+G,cAAgB,SAASnjH,GAE1C/H,KAAKk7G,WAAanzG,GAgDnBggG,QAAQ37F,UAAUgvF,WAAa,SAASppF,GAEvC,MAAwE,QAAjEhS,KAAK+pE,oBAAoB/3D,GAAMrE,YAAYsrB,oBAenD8uE,QAAQ37F,UAAUmyF,eAAiB,SAASvsF,GAE3C,MAAqE,UAA9DhS,KAAK+pE,oBAAoB/3D,GAAMrE,YAAY0qB,iBAsBnD0vE,QAAQ37F,UAAU++G,WAAa,SAASt5G,EAAO3M,EAAMkK,EAAGC,GAEvD,IAAI+7G,EAAM,KAEV,GAAa,MAATv5G,EACJ,CAqBC,GAnBqB,MAAjBA,EAAMsiF,SAAoBjvF,GAAQ2M,EAAMsiF,QAAQjvF,MACnDA,EAAK2O,YAAchC,EAAMsiF,QAAQjvF,OAEjCkmH,EAAMprH,KAAK47G,uBACXwP,EAAM9iH,QAAQsQ,aAAa9T,YAAY+G,IAAIu/G,IAAQA,GAAKx8G,QAAQ,OAAQ,SAG9D,MAAPw8G,GAAiC,MAAlBv5G,EAAMyxC,UAExBzxC,EAAMyxC,SAASx2C,OAAM,SAAS3I,EAAIkO,GAGtB,MAAP+4G,GAAgBlmH,GAAQmN,EAAMnN,MAAQA,EAAK2O,YAAcxB,EAAMnN,OAElEkmH,EAAM/4G,EAAM2hF,QAAQpyF,eAKZ,MAAPwpH,EACJ,CACC,IAAI9b,EAAUtvG,KAAK4gG,sBAAsByqB,WAAWx5G,EAAMG,MAE3C,MAAXs9F,GAAwD,mBAA9BA,EAAyB,oBAEtD8b,EAAM9b,EAAQgc,kBAAkBpmH,IAIvB,MAAPkmH,IAEHA,EAAMprH,KAAKurH,kBAAkB15G,EAAMG,OAIrC,OAAOo5G,GAyBRrjB,QAAQ37F,UAAUm/G,kBAAoB,SAASv5G,GAa9C,OATY,MAARA,GAAmC,MAAnBA,EAAKm5G,WAElBn5G,EAAKm5G,aAILnrH,KAAK69G,qBAAqB7rG,IAgBlC+1F,QAAQ37F,UAAUsqF,eAAiB,SAAS1kF,GAE3C,OAAO,MAaR+1F,QAAQ37F,UAAUo/G,uBAAyB,SAAS56E,GAEnD,OAAO5wC,KAAKyrH,iBAAiB76E,EAAG5N,YAajC+kE,QAAQ37F,UAAUq/G,iBAAmB,SAASz5G,GAE7C,OAAO,MAgBR+1F,QAAQ37F,UAAU8hE,aAAe,SAASqwC,EAAUiD,GAEnD,IAAI70G,EAAS,IAAI2C,YACb5H,EAAQ1H,KAAK+pE,oBAAoBw0C,EAAUiD,GAC3C3zF,EAAOzrB,SAASkG,QAAQyW,SAASrX,EACpCiG,YAAY2Z,gBAAiB3Z,YAAYspB,oBAW1C,OATI3uB,QAAQyW,SAASrX,EAAOiG,YAAY6Z,kBAAkB,GAEzD7a,EAAO9E,OAASgmB,EAIhBlhB,EAAO1E,MAAQ4lB,EAGTlhB,GAcRo7F,QAAQ37F,UAAUo2C,SAAW,SAAS3wC,GAErC,OAAiB,MAATA,GAAgC,MAAfA,EAAMnK,MAAiBmK,EAAMnK,MAAMiG,YAAYysB,aAAe,MAYxF2tE,QAAQ37F,UAAUs/G,mBAAqB,SAAS75G,GAE/C,IAAIlF,GAAS,EAEb,GAAa,MAATkF,EACJ,CACC,IAAIg3C,EAASvgD,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAY6rB,kBAAmB7rB,YAAYC,MAClFk7C,EAAOxgD,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYurB,gBAAiBvrB,YAAYC,MAElFjB,EAASk8C,GAAUl7C,YAAYC,MAAQk7C,GAAQn7C,YAAYC,MAAgC,MAAxB5N,KAAKwiD,SAAS3wC,GAIlF,OAAOlF,GAeRo7F,QAAQ37F,UAAUkyF,iBAAmB,SAASzsF,GAE7C,OAAiB,MAATA,GAAgC,MAAfA,EAAMnK,MAC7BmK,EAAMnK,MAAMiG,YAAYisB,uBACzBjsB,YAAYyyB,aAAgB,MAe9B2nE,QAAQ37F,UAAUgxF,kBAAoB,SAASvrF,GAE9C,OAAiB,MAATA,GAAgC,MAAfA,EAAMnK,MAAiBmK,EAAMnK,MAAMiG,YAAYqtB,uBAAyB,MAelG+sE,QAAQ37F,UAAUixF,0BAA4B,SAASxrF,GAEtD,OAAiB,MAATA,GAAgC,MAAfA,EAAMnK,MAAiBmK,EAAMnK,MAAMiG,YAAYutB,+BAAiC,MAc1G6sE,QAAQ37F,UAAU+wF,kBAAoB,SAAStrF,GAE9C,OAAiB,MAATA,GAAgC,MAAfA,EAAMnK,MAAiBmK,EAAMnK,MAAMiG,YAAYmtB,uBAAyB,MAclGitE,QAAQ37F,UAAUkxF,kBAAoB,SAASzrF,GAE9C,OAAiB,MAATA,GAAgC,MAAfA,EAAMnK,MAAiBmK,EAAMnK,MAAMiG,YAAYotB,uBAAyB,MAQlGgtE,QAAQ37F,UAAUm0G,UAAY,WAE7B,OAAOvgH,KAAKqvB,QAYb04E,QAAQ37F,UAAUu/G,UAAY,SAAS5jH,GAEtC/H,KAAKqvB,OAAStnB,GAcfggG,QAAQ37F,UAAUohE,WAAa,SAASx7D,GAEvC,OAAY,MAARA,GAAgBhS,KAAKkS,MAAM+vC,UAAUjwC,IAAShS,KAAKkS,MAAM8b,YAAchuB,KAAKkS,MAAMC,OAAOH,IAErFhS,KAAK+pE,oBAAoB/3D,GAAMrE,YAAYswB,cAAgBtwB,YAAYyxB,gBAehF2oE,QAAQ37F,UAAUw/G,kBAAoB,WAErC,OAAO5rH,KAAK25G,iBAYb5R,QAAQ37F,UAAUy/G,mBAAqB,SAAS9jH,GAE/C/H,KAAK25G,gBAAkB5xG,GAQxBggG,QAAQ37F,UAAUuH,UAAY,WAE7B,OAAO3T,KAAKg1C,SAab+yD,QAAQ37F,UAAUupC,WAAa,SAAS5tC,GAEvC/H,KAAKg1C,QAAUjtC,GAQhBggG,QAAQ37F,UAAU0/G,gBAAkB,WAEnC,OAAO9rH,KAAK83G,eAYb/P,QAAQ37F,UAAU2/G,iBAAmB,SAAShkH,GAE7C/H,KAAK83G,cAAgB/vG,GAQtBggG,QAAQ37F,UAAUkvF,yBAA2B,WAE5C,OAAOt7F,KAAK+3G,wBAQbhQ,QAAQ37F,UAAU4/G,0BAA4B,SAASjkH,GAEtD/H,KAAK+3G,uBAAyBhwG,GAQ/BggG,QAAQ37F,UAAUyuF,wBAA0B,WAE3C,OAAO76F,KAAKg4G,uBAQbjQ,QAAQ37F,UAAU6/G,yBAA2B,SAASlkH,GAErD/H,KAAKg4G,sBAAwBjwG,GAc9BggG,QAAQ37F,UAAU8/G,aAAe,SAASl6G,GAEzC,IAAIQ,EAAWxS,KAAKkS,MAAMk5D,YAAYp5D,GAEtC,OAAOhS,KAAKmsH,iBAAgC,MAAZ35G,GAAoBxS,KAAKkS,MAAM2vC,SAAS7vC,IAASQ,EAAS4vC,UAc3F2lD,QAAQ37F,UAAU+/G,cAAgB,WAEjC,OAAOnsH,KAAKo4G,aAabrQ,QAAQ37F,UAAUggH,eAAiB,SAASrkH,GAE3C/H,KAAKo4G,YAAcrwG,GAQpBggG,QAAQ37F,UAAUigH,kBAAoB,SAASliG,GAE9C,OAAOnqB,KAAKkS,MAAMw4E,YAAYvgE,EAAO7hB,QAAQ2M,KAAKjV,MAAM,SAASgS,GAEhE,OAAOhS,KAAKssH,gBAAgBt6G,QAe9B+1F,QAAQ37F,UAAUkgH,gBAAkB,SAASt6G,GAE5C,IAAItK,EAAQ1H,KAAK+pE,oBAAoB/3D,GAErC,OAAOhS,KAAKksG,oBAA4D,GAAtCxkG,EAAMiG,YAAYowB,kBASrDgqE,QAAQ37F,UAAU8/F,iBAAmB,WAEpC,OAAOlsG,KAAKq4G,gBAcbtQ,QAAQ37F,UAAUmgH,kBAAoB,SAASxkH,GAE9C/H,KAAKq4G,eAAiBtwG,GAQvBggG,QAAQ37F,UAAU0iC,mBAAqB,SAAS3kB,GAE/C,OAAOnqB,KAAKkS,MAAMw4E,YAAYvgE,EAAO7hB,QAAQ2M,KAAKjV,MAAM,SAASgS,GAEhE,OAAOhS,KAAKwsH,cAAcx6G,QAc5B+1F,QAAQ37F,UAAUogH,cAAgB,SAASx6G,GAE1C,OAAOhS,KAAKk4G,eAQbnQ,QAAQ37F,UAAU8iC,mBAAqB,SAAS/kB,GAE/C,OAAOnqB,KAAKkS,MAAMw4E,YAAYvgE,EAAO7hB,QAAQ2M,KAAKjV,MAAM,SAASgS,GAEhE,OAAOhS,KAAKysH,cAAcz6G,QAc5B+1F,QAAQ37F,UAAUqgH,cAAgB,SAASz6G,GAE1C,OAAOhS,KAAKm4G,eA8BbpQ,QAAQ37F,UAAUusF,iBAAmB,SAAS3mF,GAE7C,OAAOhS,KAAK0sH,qBAQb3kB,QAAQ37F,UAAUsgH,kBAAoB,WAErC,OAAO1sH,KAAK+4G,iBAQbhR,QAAQ37F,UAAUugH,mBAAqB,SAAS5kH,GAE/C/H,KAAK+4G,gBAAkBhxG,GAQxBggG,QAAQ37F,UAAUo4G,kBAAoB,SAASr6F,GAE9C,OAAOnqB,KAAKkS,MAAMw4E,YAAYvgE,EAAO7hB,QAAQ2M,KAAKjV,MAAM,SAASgS,GAEhE,OAAOhS,KAAK4sH,gBAAgB56G,QAe9B+1F,QAAQ37F,UAAUwgH,gBAAkB,SAAS56G,GAE5C,IAAItK,EAAQ1H,KAAK+pE,oBAAoB/3D,GAErC,OAAOhS,KAAK6sH,oBAA4D,GAAtCnlH,EAAMiG,YAAYqwB,kBAQrD+pE,QAAQ37F,UAAUygH,iBAAmB,WAEpC,OAAO7sH,KAAKu4G,gBAYbxQ,QAAQ37F,UAAU0gH,kBAAoB,SAAS/kH,GAE9C/H,KAAKu4G,eAAiBxwG,GAcvBggG,QAAQ37F,UAAU2gH,eAAiB,SAAS/6G,GAE3C,OAAQhS,KAAKksH,aAAal6G,KACvBhS,KAAKkS,MAAMC,OAAOH,IAAShS,KAAKy4G,mBACjCz4G,KAAKkS,MAAM2vC,SAAS7vC,IAAShS,KAAK04G,sBAarC3Q,QAAQ37F,UAAU4gH,gBAAkB,SAASh7G,GAI5C,OAA6C,GAFjChS,KAAK+pE,oBAAoB/3D,GAExBrE,YAAYmwB,kBAQ1BiqE,QAAQ37F,UAAU6gH,gBAAkB,SAAS9iG,GAE5C,OAAOnqB,KAAKkS,MAAMw4E,YAAYvgE,EAAO7hB,QAAQ2M,KAAKjV,MAAM,SAASgS,GAEhE,OAAOhS,KAAK4qE,cAAc54D,QAe5B+1F,QAAQ37F,UAAUw+D,cAAgB,SAAS54D,GAE1C,IAAItK,EAAQ1H,KAAK+pE,oBAAoB/3D,GAErC,OAAOhS,KAAKktH,mBAAqBltH,KAAKksH,aAAal6G,IAA6C,GAApCtK,EAAMiG,YAAY+vB,gBAQ/EqqE,QAAQ37F,UAAU8gH,eAAiB,WAElC,OAAOltH,KAAKw4G,cAabzQ,QAAQ37F,UAAU+gH,gBAAkB,SAASplH,GAE5C/H,KAAKw4G,aAAezwG,GAQrBggG,QAAQ37F,UAAUypC,cAAgB,WAEjC,OAAO71C,KAAKu1C,aAYbwyD,QAAQ37F,UAAU0pC,eAAiB,SAAS/tC,GAE3C/H,KAAKu1C,YAAcxtC,GAQpBggG,QAAQ37F,UAAUo7G,eAAiB,WAElC,OAAOxnH,KAAK02G,cAYb3O,QAAQ37F,UAAUghH,gBAAkB,SAASrlH,GAE5C/H,KAAK02G,aAAe3uG,GAQrBggG,QAAQ37F,UAAUihH,YAAc,WAE/B,OAAOrtH,KAAKm4C,UAQb4vD,QAAQ37F,UAAUkhH,YAAc,SAASvlH,GAExC/H,KAAKm4C,SAAWpwC,GAQjBggG,QAAQ37F,UAAUmhH,aAAe,WAEhC,OAAOvtH,KAAKyxD,WAQbs2C,QAAQ37F,UAAUohH,aAAe,SAASzlH,GAEzC/H,KAAKyxD,UAAY1pD,GAQlBggG,QAAQ37F,UAAUqhH,sBAAwB,WAEzC,OAAOztH,KAAK04G,qBAQb3Q,QAAQ37F,UAAUshH,uBAAyB,SAAS3lH,GAEnD/H,KAAK04G,oBAAsB3wG,GAQ5BggG,QAAQ37F,UAAUuhH,oBAAsB,WAEvC,OAAO3tH,KAAKy4G,mBAQb1Q,QAAQ37F,UAAUwhH,qBAAuB,SAAS7lH,GAEjD/H,KAAKy4G,kBAAoB1wG,GAQ1BggG,QAAQ37F,UAAUyhH,kBAAoB,WAErC,OAAO7tH,KAAKo7G,iBAabrT,QAAQ37F,UAAU0hH,mBAAqB,SAAS/lH,GAE/C/H,KAAKo7G,gBAAkBrzG,GAQxBggG,QAAQ37F,UAAUoyG,2BAA6B,WAE9C,OAAOx+G,KAAKm7G,0BAcbpT,QAAQ37F,UAAU2hH,4BAA8B,SAAShmH,GAExD/H,KAAKm7G,yBAA2BpzG,GAQjCggG,QAAQ37F,UAAU4hH,aAAe,WAEhC,OAAOhuH,KAAK46G,YAcb7S,QAAQ37F,UAAU6hH,cAAgB,SAASlmH,GAE1C/H,KAAK46G,WAAa7yG,GAQnBggG,QAAQ37F,UAAU8hH,aAAe,WAEhC,OAAOluH,KAAK26G,YAab5S,QAAQ37F,UAAU+hH,sBAAwB,SAASpmH,GAElD/H,KAAK86G,mBAAqB/yG,GAQ3BggG,QAAQ37F,UAAUo6G,qBAAuB,WAExC,OAAOxmH,KAAK86G,oBAYb/S,QAAQ37F,UAAUgiH,oBAAsB,SAASrmH,GAEhD/H,KAAK66G,iBAAmB9yG,GAQzBggG,QAAQ37F,UAAUiiH,mBAAqB,WAEtC,OAAOruH,KAAK66G,kBAcb9S,QAAQ37F,UAAUkiH,qBAAuB,SAASvmH,GAEjD/H,KAAK+6G,kBAAoBhzG,GAQ1BggG,QAAQ37F,UAAUi6G,oBAAsB,WAEvC,OAAOrmH,KAAK+6G,mBAYbhT,QAAQ37F,UAAUmiH,cAAgB,SAASxmH,GAE1C/H,KAAK26G,WAAa5yG,GAQnBggG,QAAQ37F,UAAUm6G,mBAAqB,WAEtC,OAAOvmH,KAAKg7G,kBAcbjT,QAAQ37F,UAAUoiH,oBAAsB,SAASzmH,GAEhD/H,KAAKg7G,iBAAmBjzG,GAQzBggG,QAAQ37F,UAAUyrC,cAAgB,WAEjC,OAAO73C,KAAK24G,aAcb5Q,QAAQ37F,UAAUqiH,eAAiB,SAAS1mH,GAE3C/H,KAAK24G,YAAc5wG,GAQpBggG,QAAQ37F,UAAUsiH,eAAiB,WAElC,OAAO1uH,KAAK44G,cAcb7Q,QAAQ37F,UAAUuiH,gBAAkB,SAAS5mH,GAE5C/H,KAAK44G,aAAe7wG,GAerBggG,QAAQ37F,UAAUg6G,gBAAkB,SAASp0G,GAE5C,IAAItK,EAAQ1H,KAAK+pE,oBAAoB/3D,GAErC,OAAOhS,KAAK4uH,qBAAuB5uH,KAAKksH,aAAal6G,IACS,KAA7D1J,QAAQyW,SAASrX,EAAOiG,YAAYgwB,gBAAiB,MAQvDoqE,QAAQ37F,UAAUwiH,iBAAmB,WAEpC,OAAO5uH,KAAK64G,gBAcb9Q,QAAQ37F,UAAUyiH,kBAAoB,SAAS9mH,GAE9C/H,KAAK64G,eAAiB9wG,GAiBvBggG,QAAQ37F,UAAU0iH,uBAAyB,SAAS98G,EAAM8R,GAEzD,OAAO,GAcRikF,QAAQ37F,UAAU2iH,eAAiB,SAAS/8G,GAE3C,IAAItK,EAAQ1H,KAAK+pE,oBAAoB/3D,GAErC,OAAOhS,KAAKgvH,oBAAsBhvH,KAAKksH,aAAal6G,IAA8C,GAArCtK,EAAMiG,YAAY8vB,iBAQhFsqE,QAAQ37F,UAAU4iH,gBAAkB,WAEnC,OAAOhvH,KAAK84G,eAcb/Q,QAAQ37F,UAAU6iH,iBAAmB,SAASlnH,GAE7C/H,KAAK84G,cAAgB/wG,GActBggG,QAAQ37F,UAAUwxG,eAAiB,SAAS5rG,GAE3C,IAAItK,EAAQ1H,KAAK+pE,oBAAoB/3D,GAErC,OAAOhS,KAAKkvH,oBAAsBlvH,KAAKksH,aAAal6G,IAA8C,GAArCtK,EAAMiG,YAAY4vB,iBAQhFwqE,QAAQ37F,UAAU8iH,gBAAkB,WAEnC,OAAOlvH,KAAKs4G,eAcbvQ,QAAQ37F,UAAU+iH,iBAAmB,SAASpnH,GAE7C/H,KAAKs4G,cAAgBvwG,GAiBtBggG,QAAQ37F,UAAUs7G,qBAAuB,SAAS11G,EAAM4R,EAAUE,GAEjE,OAAO9jB,KAAKovH,0BAA4BpvH,KAAKksH,aAAal6G,IAQ3D+1F,QAAQ37F,UAAUgjH,sBAAwB,WAEzC,OAAOpvH,KAAKg5G,qBAQbjR,QAAQ37F,UAAUijH,uBAAyB,SAAStnH,GAEnD/H,KAAKg5G,oBAAsBjxG,GAc5BggG,QAAQ37F,UAAUkjH,cAAgB,SAASt9G,GAE1C,OAAgB,MAARA,GAAgBhS,KAAK86G,oBACnB,MAAR9oG,KAAkBhS,KAAKkS,MAAMC,OAAOH,IACrChS,KAAK66G,mBAAqB76G,KAAK+pH,kBAAkB/3G,IAanD+1F,QAAQ37F,UAAUmjH,cAAgB,SAASv9G,GAE1C,OAAOhS,KAAKsvH,cAAct9G,IAiB3B+1F,QAAQ37F,UAAUi+G,kBAAoB,SAASvmG,EAAQrF,GAEtD,OAAOze,KAAKsvH,cAAcxrG,IAAW9jB,KAAKuvH,cAAc9wG,IAazDspF,QAAQ37F,UAAUijF,eAAiB,SAASL,GAE3ChvF,KAAKg8G,kBAAkBrmE,WAAWq5C,IAQnC+Y,QAAQ37F,UAAUkhF,cAAgB,WAEjC,OAAOttF,KAAKg8G,kBAAkBroG,aAa/Bo0F,QAAQ37F,UAAUojH,YAAc,SAAUx6E,GAEzCh1C,KAAK07F,eAAe/lD,WAAWX,IAahC+yD,QAAQ37F,UAAUqjH,WAAa,SAASz6E,GAEvCh1C,KAAKm8G,eAAeE,eAAiBrnE,GActC+yD,QAAQ37F,UAAU2mF,UAAY,SAAS/gF,GAEtC,GAAuB,MAAnBhS,KAAKy2G,WACT,CACC,IAAIzjB,EAAchzF,KAAKy2G,WAAWpa,iBAElC,OAAgB,MAARrqF,EAA+B,MAAfghF,EAAsBhhF,GAAQghF,EAGvD,OAAO,GAeR+U,QAAQ37F,UAAU2xG,eAAiB,SAAS/rG,GAE3C,IAAItK,EAAQ1H,KAAK+pE,oBAAoB/3D,GAErC,OAAOhS,KAAK0vH,mBAA0D,GAArChoH,EAAMiG,YAAY0vB,iBAQpD0qE,QAAQ37F,UAAUsjH,gBAAkB,WAEnC,OAAO1vH,KAAKi5G,eAgBblR,QAAQ37F,UAAUujH,iBAAmB,SAAS5nH,GAE7C/H,KAAKi5G,cAAgBlxG,GActBggG,QAAQ37F,UAAU+3G,eAAiB,SAASnyG,GAE3C,OAAQhS,KAAK+tB,WAAW5b,OAAOH,IAAShS,KAAK4vH,mBAQ9C7nB,QAAQ37F,UAAUwjH,gBAAkB,WAEnC,OAAO5vH,KAAK+5G,eAYbhS,QAAQ37F,UAAUyjH,iBAAmB,SAAS9nH,GAE7C/H,KAAK+5G,cAAgBhyG,GAQtBggG,QAAQ37F,UAAU83G,qBAAuB,SAASlyG,GAEjD,OAAOhS,KAAKg6G,oBAYbjS,QAAQ37F,UAAU0jH,sBAAwB,SAAS/nH,GAElD/H,KAAKg6G,mBAAqBjyG,GAQ3BggG,QAAQ37F,UAAUq6G,sBAAwB,WAEzC,OAAOzmH,KAAKi6G,qBAYblS,QAAQ37F,UAAU2jH,uBAAyB,SAAShoH,GAEnD/H,KAAKi6G,oBAAsBlyG,GAY5BggG,QAAQ37F,UAAU05G,kBAAoB,SAASj0G,GAE9C,OAAO7R,KAAKk6G,iBAYbnS,QAAQ37F,UAAU4jH,mBAAqB,SAASjoH,GAE/C/H,KAAKk6G,gBAAkBnyG,GAexBggG,QAAQ37F,UAAU66G,iBAAmB,SAASj1G,GAE7C,OAAOhS,KAAKiwH,wBAA0BjwH,KAAK+tB,WAAW5b,OAAOnS,KAAK+tB,WAAWk0B,UAAUjwC,KAQxF+1F,QAAQ37F,UAAU6jH,oBAAsB,WAEvC,OAAOjwH,KAAK65G,mBAQb9R,QAAQ37F,UAAU8jH,qBAAuB,SAASnoH,GAEjD/H,KAAK65G,kBAAoB9xG,GAQ1BggG,QAAQ37F,UAAU46G,4BAA8B,WAE/C,OAAOhnH,KAAK85G,2BAQb/R,QAAQ37F,UAAU+jH,6BAA+B,SAASpoH,GAEzD/H,KAAK85G,0BAA4B/xG,GAQlCggG,QAAQ37F,UAAU43G,2BAA6B,WAE9C,OAAOhkH,KAAK45G,0BAQb7R,QAAQ37F,UAAUk6G,4BAA8B,SAASv+G,GAExD/H,KAAK45G,yBAA2B7xG,GAiBjCggG,QAAQ37F,UAAU+6G,WAAa,SAASn1G,GAEvC,OAAQhS,KAAKowH,qBAAqBp+G,GAAShS,KAAKs3G,eAAiB,GAalEvP,QAAQ37F,UAAUgkH,qBAAuB,SAASp+G,GAEjD,OAAO,GAQR+1F,QAAQ37F,UAAU84G,iBAAmB,SAAS/6F,EAAOg1E,GAEpD,OAAOn/F,KAAKkS,MAAMw4E,YAAYvgE,EAAO7hB,QAAQ2M,KAAKjV,MAAM,SAASgS,GAEhE,OAAOhS,KAAKolH,eAAepzG,EAAMmtF,QAenC4I,QAAQ37F,UAAUg5G,eAAiB,SAASpzG,EAAMmtF,GAEjD,IAAIz3F,EAAQ1H,KAAK+pE,oBAAoB/3D,GAErC,OAAOhS,KAAKkS,MAAMiB,cAAcnB,GAAQ,GAA0C,GAArCtK,EAAMiG,YAAY2vB,iBAiBhEyqE,QAAQ37F,UAAUikH,kBAAoB,SAASr+G,EAAMmY,EAAOhiB,GAE3D,OAAe,MAAR6J,IAAkBhS,KAAK0uH,kBAC7B1uH,KAAKswH,cAAct+G,EAAMmY,EAAOhiB,KAAWnI,KAAKkS,MAAMC,OAAOH,KAC5DhS,KAAKwtE,WAAWx7D,IAAUhS,KAAKkS,MAAMiB,cAAcnB,GAAQ,IAC3DhS,KAAK6tE,gBAAgB77D,MAexB+1F,QAAQ37F,UAAUkkH,cAAgB,SAAS7xG,EAAQ0L,EAAOhiB,GAEzD,GAAInI,KAAKkS,MAAMC,OAAOsM,IAAoB,MAAT0L,GAAiC,GAAhBA,EAAMhoB,QACvDnC,KAAK+pH,kBAAkB5/F,EAAM,KACuB,MADhBnqB,KAAKujH,uBAAuB9kG,EAC/Dze,KAAKkS,MAAMs4D,YAAY/rD,GAAQ,GAAO0L,EAAM,IAC9C,CACC,IAAIllB,EAAMjF,KAAKkS,MAAMs4D,YAAY/rD,GAAQ,GACrCq5D,EAAM93E,KAAKkS,MAAMs4D,YAAY/rD,GAAQ,GAEzC,OAASze,KAAKkS,MAAMu4D,WAAWtgD,EAAM,GAAIllB,KACtCjF,KAAKkS,MAAMu4D,WAAWtgD,EAAM,GAAI2tD,GAGpC,OAAO,GAqBRiwB,QAAQ37F,UAAUimB,cAAgB,SAASlI,EAAOhiB,EAAK6J,EAAMvC,GAE5D,IAAKzP,KAAK6tH,oBAET,IAAK,IAAIhpH,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC,GAAI7E,KAAKwtE,WAAWrjD,EAAMtlB,IAEzB,OAAO,KAKV,IAAI4e,EAAKnb,QAAQqgB,aAAa3oB,KAAK2nB,UAClC1d,QAAQ04B,WAAWx6B,GAAM8B,QAAQ44B,WAAW16B,IAC7Csb,EAAGrU,GAAKpP,KAAKw3C,MACb/zB,EAAGpU,GAAKrP,KAAKy3C,MACb,IAAI8mE,EAAWv+G,KAAKy+G,cAAch7F,EAAGrU,EAAGqU,EAAGpU,GAE3C,GAAY,MAAR2C,EAEHA,EAAOusG,OAEH,GAAgB,MAAZA,EACT,CAKC,IAFA,IAAI1tG,EAAM7Q,KAAKkS,MAAM+vC,UAAUs8D,GAEjB,MAAP1tG,GAAe7Q,KAAKwtE,WAAW38D,IAAQA,GAAOmB,GAEpDnB,EAAM7Q,KAAKkS,MAAM+vC,UAAUpxC,GAGxBA,GAAOmB,IAEVA,EAAOusG,GAIT,KAAe,MAARvsG,IAAiBhS,KAAKqwH,kBAAkBr+G,EAAMmY,EAAOhiB,KAC1DnI,KAAKkS,MAAM86D,QAAQh7D,IAEpBA,EAAOhS,KAAKkS,MAAM+vC,UAAUjwC,GAI7B,GAAa,MAATvC,IAAkBA,EAIrB,IAFA,IAAIkH,EAAS3E,EAEI,MAAV2E,GAAkBrO,QAAQ/H,QAAQ4pB,EAAOxT,GAAU,GAEzDA,EAAS3W,KAAKkS,MAAM+vC,UAAUtrC,GAIhC,OAAS3W,KAAKkS,MAAM86D,QAAQh7D,IAAmB,MAAV2E,EAAyB,KAAP3E,GAexD+1F,QAAQ37F,UAAUgjC,iBAAmB,WAEpC,IAAIz4B,EAAS3W,KAAK2nH,iBAElB,GAAc,MAAVhxG,GAIW,OAFdA,EAAS3W,KAAKu3G,eAGd,CACC,IAAIz5D,EAAO99C,KAAKkS,MAAM8b,UACtBrX,EAAS3W,KAAKkS,MAAMkB,WAAW0qC,EAAM,GAIvC,OAAOnnC,GASRoxF,QAAQ37F,UAAU0wG,iBAAmB,SAAS9qG,GAE7ChS,KAAKu3G,cAAgBvlG,GAatB+1F,QAAQ37F,UAAUyxF,YAAc,SAAS7rF,GAExC,KAAe,MAARA,IAAiBhS,KAAKwtE,WAAWx7D,IAEvCA,EAAOhS,KAAKkS,MAAM+vC,UAAUjwC,GAG7B,OAAOA,GAgBR+1F,QAAQ37F,UAAUqyG,cAAgB,SAAUrvG,EAAGC,EAAGsH,GAYjD,GAVc,MAAVA,GAIW,OAFdA,EAAS3W,KAAK2nH,oBAIbhxG,EAAS3W,KAAKkS,MAAM8b,WAIR,MAAVrX,EAIH,IAFA,IAAIzD,EAAalT,KAAKkS,MAAMiB,cAAcwD,GAEjC9R,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQjS,KAAKkS,MAAMkB,WAAWuD,EAAQ9R,GAE1C,GAAa,MAAToN,EACJ,CACC,IAAItF,EAAS3M,KAAKy+G,cAAcrvG,EAAGC,EAAG4C,GAEtC,GAAc,MAAVtF,EAEH,OAAOA,EAEH,GAAI3M,KAAK8qE,cAAc74D,IAAUjS,KAAKwtE,WAAWv7D,GACtD,CACC,IAAIJ,EAAQ7R,KAAKunB,KAAKxV,SAASE,GAE/B,GAAIjS,KAAK2mB,WAAW9U,EAAOzC,EAAGC,GAE7B,OAAO4C,IAOZ,OAAO,MA0BR81F,QAAQ37F,UAAU2pC,UAAY,SAAS3mC,EAAGC,EAAGsH,EAAQgoD,EAAUrrD,EAAOmpG,GAerE,GAbA99C,EAAwB,MAAZA,GAAoBA,EAChCrrD,EAAkB,MAATA,GAAiBA,EAEZ,MAAVqD,GAIW,OAFdA,EAAS3W,KAAK2nH,oBAIbhxG,EAAS3W,KAAK+tB,WAAWC,WAIb,MAAVrX,EAIH,IAFA,IAES9R,EAFQ7E,KAAKkS,MAAMiB,cAAcwD,GAEhB,EAAG9R,GAAK,EAAGA,IACrC,CACC,IAAImN,EAAOhS,KAAKkS,MAAMkB,WAAWuD,EAAQ9R,GACrC8H,EAAS3M,KAAK+1C,UAAU3mC,EAAGC,EAAG2C,EAAM2sD,EAAUrrD,EAAOmpG,GAEzD,GAAc,MAAV9vG,EAEH,OAAOA,EAEH,GAAI3M,KAAK8qE,cAAc94D,KAAUsB,GAAStT,KAAKkS,MAAMC,OAAOH,IAChE2sD,GAAY3+D,KAAKkS,MAAM2vC,SAAS7vC,IACjC,CACC,IAAIH,EAAQ7R,KAAKunB,KAAKxV,SAASC,GAE/B,GAAa,MAATH,IAA8B,MAAZ4qG,IAAqBA,EAAS5qG,EAAOzC,EAAGC,KAC7DrP,KAAK2mB,WAAW9U,EAAOzC,EAAGC,GAE1B,OAAO2C,GAMX,OAAO,MAeR+1F,QAAQ37F,UAAUua,WAAa,SAAS9U,EAAOzC,EAAGC,GAEjD,GAAa,MAATwC,EACJ,CACC,IAAIqU,EAAMrU,EAAMsT,eAEhB,GAAW,MAAPe,EAKH,IAHA,IAAIuqE,EAAKzwF,KAAKyxD,UAAYzxD,KAAKyxD,UAC3BhuC,EAAKyC,EAAI,GAEJrhB,EAAI,EAAGA,EAAIqhB,EAAI/jB,OAAQ0C,IAChC,CACC,IAAI6T,EAAOwN,EAAIrhB,GAGf,GAFWyD,QAAQid,YAAY9B,EAAGrU,EAAGqU,EAAGpU,EAAGqJ,EAAKtJ,EAAGsJ,EAAKrJ,EAAGD,EAAGC,IAElDohF,EAEX,OAAO,EAGRhtE,EAAK/K,MAIP,CACC,IAAI+O,EAAQnf,QAAQuX,UAAUvX,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAY2W,iBAAmB,GAE3F,GAAa,GAATmD,EACJ,CACC,IAAI1G,EAAM3X,KAAK2X,KAAK0G,GAChBxG,EAAM7X,KAAK6X,KAAKwG,GAChBtE,EAAK,IAAIhU,QAAQ0C,EAAMlC,aAAckC,EAAMjC,cAE/CR,GADIqU,EAAKnb,QAAQkb,gBAAgB,IAAIrU,QAAQC,EAAGC,GAAI0R,EAAKE,EAAKkC,IACvD/T,EACPC,EAAIoU,EAAGpU,EAGR,GAAI/G,QAAQoe,SAAS7U,EAAOzC,EAAGC,GAE9B,OAAO,GAKV,OAAO,GAeR04F,QAAQ37F,UAAUmkH,oBAAsB,SAAShS,EAAUnvG,EAAGC,GAE7D,IAAIwC,EAAQ7R,KAAK8R,UAAUC,SAASwsG,GAChC1wF,EAAO7tB,KAAKkuE,aAAaqwC,GAE7B,GAAa,MAAT1sG,EACJ,CACC,IAAIS,EAAQtS,KAAK8R,UAAU8d,WAI3B,GAHAxgB,GAAKyC,EAAMzC,EACXC,GAAKwC,EAAMxC,EAEPwe,EAAK5lB,MAAQ,GAAKmH,EAAI,GAAKA,EAAIye,EAAK5lB,MAAQqK,EAE/C,OAAO,EAEH,GAAIub,EAAKhmB,OAAS,GAAKwH,EAAI,GAAKA,EAAIwe,EAAKhmB,OAASyK,EAEtD,OAAO,EAIT,OAAO,GAYRy1F,QAAQ37F,UAAU+yD,iBAAmB,SAASxoD,GAE7C,OAAO3W,KAAKopF,cAAczyE,GAAQ,GAAM,IAYzCoxF,QAAQ37F,UAAU+/E,cAAgB,SAASx1E,GAE1C,OAAO3W,KAAKopF,cAAczyE,GAAQ,GAAO,IAiB1CoxF,QAAQ37F,UAAUg9E,cAAgB,SAASzyE,EAAQgoD,EAAUrrD,GAE5DqD,EAAoB,MAAVA,EAAkBA,EAAS3W,KAAKovC,mBAC1CuvB,EAAwB,MAAZA,GAAoBA,EAChCrrD,EAAkB,MAATA,GAAiBA,EAM1B,IAJA,IAAI6W,EAAQnqB,KAAKkS,MAAMk3E,cAAczyE,EAAQgoD,EAAUrrD,GACnD3G,EAAS,GAGJ9H,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAE7B7E,KAAK8qE,cAAc3gD,EAAMtlB,KAE5B8H,EAAOC,KAAKud,EAAMtlB,IAIpB,OAAO8H,GAcRo7F,QAAQ37F,UAAUkjE,eAAiB,SAASt9D,EAAM2E,GAEjD,OAAO3W,KAAKuT,SAASvB,EAAM2E,GAAQ,GAAM,GAAM,IAgBhDoxF,QAAQ37F,UAAUygF,iBAAmB,SAAS76E,EAAM2E,GAEnD,OAAO3W,KAAKuT,SAASvB,EAAM2E,GAAQ,GAAM,GAAO,IAgBjDoxF,QAAQ37F,UAAU0gF,iBAAmB,SAAS96E,EAAM2E,GAEnD,OAAO3W,KAAKuT,SAASvB,EAAM2E,GAAQ,GAAO,GAAM,IA2BjDoxF,QAAQ37F,UAAUmH,SAAW,SAASvB,EAAM2E,EAAQo2E,EAAUJ,EAAUK,EAAcrrC,GAErForC,EAAwB,MAAZA,GAAoBA,EAChCJ,EAAwB,MAAZA,GAAoBA,EAChCK,EAAgC,MAAhBA,GAAwBA,EACxCrrC,EAAsB,MAAXA,GAAmBA,EAM9B,IAJA,IAAIruC,EAAQ,GACRw0E,EAAc9nF,KAAK6tE,gBAAgB77D,GACnCkB,EAAalT,KAAKkS,MAAMiB,cAAcnB,GAEjCnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQjS,KAAKkS,MAAMkB,WAAWpB,EAAMnN,IAEpCijF,GAAgB9nF,KAAK8qE,cAAc74D,KAEtCqB,EAAQA,EAAM2pE,OAAOj9E,KAAKkS,MAAMqB,SAAStB,EAAO86E,EAAUJ,KAI5Dr5E,EAAQA,EAAM2pE,OAAOj9E,KAAKkS,MAAMqB,SAASvB,EAAM+6E,EAAUJ,IACzD,IAAIhgF,EAAS,GAEb,IAAS9H,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAClC,CACC,IAAIgN,EAAQ7R,KAAKunB,KAAKxV,SAASuB,EAAMzO,IAEjCif,EAAmB,MAATjS,EAAiBA,EAAM8tD,oBAAmB,GAAQ3/D,KAAKunB,KAAKo4C,mBAAmBrsD,EAAMzO,IAAI,GACnG4Z,EAAmB,MAAT5M,EAAiBA,EAAM8tD,oBAAmB,GAAS3/D,KAAKunB,KAAKo4C,mBAAmBrsD,EAAMzO,IAAI,IAEnGmoF,GAAgBlpE,GAAUrF,GAAaqF,GAAUrF,IAAasuE,GAClEtuE,GAAUzM,IAAmB,MAAV2E,GAAkB3W,KAAK4pF,gBAAgB9lE,EAAQnN,EAAQgrC,KACzEgrC,GAAY7oE,GAAU9R,IAAmB,MAAV2E,GAC9B3W,KAAK4pF,gBAAgBnrE,EAAQ9H,EAAQgrC,OAEvCh1C,EAAOC,KAAK0G,EAAMzO,IAIpB,OAAO8H,GAgBRo7F,QAAQ37F,UAAUw9E,gBAAkB,SAAS53E,EAAM2E,EAAQgrC,GAE1D,OAAQA,EAAU3hD,KAAKkS,MAAMu4D,WAAW9zD,EAAQ3E,GAAQhS,KAAKkS,MAC1D+vC,UAAUjwC,IAAS2E,GAoBvBoxF,QAAQ37F,UAAU8pE,aAAe,SAAS5iE,EAAOsQ,EAAUspE,EAASC,GAEnED,EAAsB,MAAXA,GAAmBA,EAC9BC,EAAsB,MAAXA,GAAmBA,EAE9B,IAAIC,EAAY,GAGZ3tE,EAAO,IAAItT,aAEf,GAAa,MAATmH,EAEH,IAAK,IAAIzO,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAClC,CACC,IAAIgN,EAAQ7R,KAAKunB,KAAKxV,SAASuB,EAAMzO,IAEjCif,EAAmB,MAATjS,EAAiBA,EAAM8tD,oBAAmB,GAAQ3/D,KAAKunB,KAAKo4C,mBAAmBrsD,EAAMzO,IAAI,GACnG4Z,EAAmB,MAAT5M,EAAiBA,EAAM8tD,oBAAmB,GAAS3/D,KAAKunB,KAAKo4C,mBAAmBrsD,EAAMzO,IAAI,GAIpGif,GAAUF,GAAsB,MAAVnF,GAAkBA,GAAUmF,GAAYupE,EAE5D1tE,EAAK5T,IAAI4S,KAEbgB,EAAKlT,IAAIkS,GAAQ,GACjB2uE,EAAUxgF,KAAK6R,IAMRA,GAAUmF,GAAsB,MAAVE,GAAkBA,GAAUF,GAAYspE,IAEjEztE,EAAK5T,IAAIiY,KAEbrE,EAAKlT,IAAIuX,GAAQ,GACjBspE,EAAUxgF,KAAKkX,KAMnB,OAAOspE,GAgBR2a,QAAQ37F,UAAU0mE,gBAAkB,SAAShvD,EAAQrF,EAAQyrD,GAE5DA,EAAwB,MAAZA,GAAoBA,EAMhC,IALA,IAAI52D,EAAQtT,KAAKuT,SAASuQ,GACtBnX,EAAS,GAIJ9H,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAClC,CACC,IAAIgN,EAAQ7R,KAAKunB,KAAKxV,SAASuB,EAAMzO,IAEjCI,EAAgB,MAAT4M,EAAiBA,EAAM8tD,oBAAmB,GAAQ3/D,KAAKunB,KAAKo4C,mBAAmBrsD,EAAMzO,IAAI,GAChGizE,EAAgB,MAATjmE,EAAiBA,EAAM8tD,oBAAmB,GAAS3/D,KAAKunB,KAAKo4C,mBAAmBrsD,EAAMzO,IAAI,IAEhGI,GAAO6e,GAAUg0D,GAAOr5D,IAAayrD,GAAYjlE,GAAOwZ,GAAUq5D,GAAOh0D,IAE7EnX,EAAOC,KAAK0G,EAAMzO,IAIpB,OAAO8H,GAePo7F,QAAQ37F,UAAUokH,iBAAmB,SAASroH,EAAKsoH,GAEnD,IAAIp1G,EAAI/S,QAAQqgB,aAAa3oB,KAAK2nB,UACjC1d,QAAQ04B,WAAWx6B,GAAM8B,QAAQ44B,WAAW16B,IAEzC0Q,EAAI7Y,KAAKunB,KAAKjV,MACd9K,EAAKxH,KAAKunB,KAAKoH,UACfupB,EAAoB,GAAbu4E,EAAsBzwH,KAAKm4C,SAAW,EAAI,EAKrD,OAHA98B,EAAEjM,EAAIpP,KAAKo4C,KAAK/8B,EAAEjM,EAAIyJ,EAAIrR,EAAG4H,EAAI8oC,GACjC78B,EAAEhM,EAAIrP,KAAKo4C,KAAK/8B,EAAEhM,EAAIwJ,EAAIrR,EAAG6H,EAAI6oC,GAE1B78B,GAqBR0sF,QAAQ37F,UAAUqiC,SAAW,SAASr/B,EAAGC,EAAGpH,EAAOJ,EAAQ8O,EAAQhK,GAIlE,GAFAA,EAAoB,MAAVA,EAAkBA,EAAS,GAEjC1E,EAAQ,GAAKJ,EAAS,EAC1B,CACC,IAAIqK,EAAQlS,KAAK+tB,WACb/Q,EAAQ5N,EAAInH,EACZkV,EAAS9N,EAAIxH,EAYjB,GAVc,MAAV8O,GAIW,OAFdA,EAAS3W,KAAK2nH,oBAIbhxG,EAASzE,EAAM8b,WAIH,MAAVrX,EAIH,IAFA,IAAIzD,EAAahB,EAAMiB,cAAcwD,GAE5B9R,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAImN,EAAOE,EAAMkB,WAAWuD,EAAQ9R,GAChCgN,EAAQ7R,KAAKunB,KAAKxV,SAASC,GAE/B,GAAa,MAATH,GAAiB7R,KAAK8qE,cAAc94D,GACxC,CACC,IAAI8N,EAAMxX,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAY2W,iBAAmB,EACnEwoC,EAAMj7C,EAEC,GAAPiO,IAEHgtC,EAAMxkD,QAAQ2a,eAAe6pC,EAAKhtC,KAG9B5N,EAAMC,OAAOH,IAASE,EAAM2vC,SAAS7vC,KACzC86C,EAAI19C,GAAKA,GAAK09C,EAAIz9C,EAAIy9C,EAAIjlD,QAAUsV,GACpC2vC,EAAIz9C,GAAKA,GAAKy9C,EAAI19C,EAAI09C,EAAI7kD,OAAS+U,EAEnCrQ,EAAOC,KAAKoF,GAIZhS,KAAKyuC,SAASr/B,EAAGC,EAAGpH,EAAOJ,EAAQmK,EAAMrF,KAO9C,OAAOA,GAqBRo7F,QAAQ37F,UAAUskH,eAAiB,SAASvwG,EAAIC,EAAIzJ,EAAQg6G,EAAeC,GAE1E,IAAIjkH,EAAS,GAEb,IAAIgkH,GAAiBC,KAEN,MAAVj6G,IAEHA,EAAS3W,KAAKovC,oBAGD,MAAVz4B,GAIH,IAFA,IAAIzD,EAAalT,KAAKkS,MAAMiB,cAAcwD,GAEjC9R,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQjS,KAAKkS,MAAMkB,WAAWuD,EAAQ9R,GACtCgN,EAAQ7R,KAAKunB,KAAKxV,SAASE,GAE3BjS,KAAK8qE,cAAc74D,IAAmB,MAATJ,KAE1B8+G,GAAiB9+G,EAAMzC,GAAK+Q,MAC/BywG,GAAkB/+G,EAAMxC,GAAK+Q,IAE/BzT,EAAOC,KAAKqF,GAOjB,OAAOtF,GAoBRo7F,QAAQ37F,UAAUmjE,cAAgB,SAAS54D,EAAQk6G,EAASpzD,GAE3DozD,EAAsB,MAAXA,GAAmBA,EAC9BpzD,EAAoB,MAAVA,GAAkBA,EAC5B,IAAImB,EAAQ,GAEZ,GAAc,MAAVjoD,EACJ,CAMC,IALA,IAAIzE,EAAQlS,KAAK+tB,WACb7a,EAAahB,EAAMiB,cAAcwD,GACjC8wE,EAAO,KACPC,EAAU,EAEL7iF,EAAE,EAAGA,EAAEqO,EAAYrO,IAC5B,CACC,IAAImN,EAAOE,EAAMkB,WAAWuD,EAAQ9R,GAEpC,GAAI7E,KAAKkS,MAAM2vC,SAAS7vC,IAAShS,KAAK8qE,cAAc94D,GACpD,CAKC,IAJA,IAAIsnD,EAAQt5D,KAAKsvE,eAAet9D,EAAM,EAAY2E,EAAS,MACvDgxE,EAAS,EACTC,EAAQ,EAEHtoB,EAAI,EAAGA,EAAIhG,EAAMn3D,OAAQm9D,IAEvBt/D,KAAKunB,KAAKo4C,mBAAmBrG,EAAMgG,IAAI,IAEvBttD,EAEP21E,IAIAC,KAIfnqB,GAAoB,GAAVkqB,GAAeC,EAAQ,IACnCnqB,GAAmB,GAATmqB,GAAcD,EAAS,IAEnC/oB,EAAMhyD,KAAKoF,GAGZ,IAAIszB,EAAO,EAAWsiD,EAAQD,EAASA,EAASC,EAE5CtiD,EAAOoiD,IAEVA,EAAUpiD,EACVmiD,EAAOz1E,IAKU,GAAhB4sD,EAAMz8D,QAAuB,MAARslF,GAExB7oB,EAAMhyD,KAAK66E,GAIb,OAAO7oB,GAoCRmpC,QAAQ37F,UAAU49D,SAAW,SAASC,EAAQC,EAAUC,EAAMtmD,EAAMumD,EAAShQ,GAE5E,GAAY,MAAR+P,GAA0B,MAAVF,IAEnBC,EAAwB,MAAZA,GAAoBA,EAChC9P,EAAsB,MAAXA,GAAmBA,IAC9BgQ,EAAUA,GAAW,IAAIj+D,cAEZN,IAAIo+D,IACjB,CACCG,EAAQ79D,IAAI09D,GAAQ,GACpB,IAAIt9D,EAASw9D,EAAKF,EAAQpmD,GAE1B,GAAc,MAAVlX,GAAkBA,EACtB,CACC,IAAI09D,EAAYrqE,KAAKkS,MAAMo4D,aAAaL,GAExC,GAAII,EAAY,EAEf,IAAK,IAAIxlE,EAAI,EAAGA,EAAIwlE,EAAWxlE,IAC/B,CACC,IAAIuJ,EAAIpO,KAAKkS,MAAMq4D,UAAUN,EAAQplE,GACjC49B,EAAWziC,KAAKkS,MAAMs4D,YAAYp8D,GAAG,IAAS67D,EAElD,IAAKC,IAAc9P,GAAW33B,EAC9B,CACC,IAAI/pB,EAAO1Y,KAAKkS,MAAMs4D,YAAYp8D,GAAIq0B,GACtCziC,KAAKgqE,SAAStxD,EAAMwxD,EAAUC,EAAM/7D,EAAGg8D,EAAShQ,QAsBvD2tC,QAAQ37F,UAAUiyG,eAAiB,SAASrsG,GAE3C,OAAOhS,KAAKutG,oBAAoB74D,WAAW1iC,IAQ5C+1F,QAAQ37F,UAAU0kH,iBAAmB,WAEpC,OAAO9wH,KAAKutG,oBAAoB7+D,WAQjCq5D,QAAQ37F,UAAU6L,eAAiB,WAElC,OAAOjY,KAAKutG,oBAAoBrhG,SAQjC67F,QAAQ37F,UAAU2kH,kBAAoB,WAErC,OAAO/wH,KAAKutG,oBAAoBpjF,MAAMhoB,QAQvC4lG,QAAQ37F,UAAUuxG,iBAAmB,WAEpC,OAAO39G,KAAKutG,oBAAoBpjF,MAAM,IAQvC49E,QAAQ37F,UAAUyiC,kBAAoB,WAErC,OAAO7uC,KAAKutG,oBAAoBpjF,MAAMstC,SAYvCswC,QAAQ37F,UAAUqxG,iBAAmB,SAASzrG,GAE7ChS,KAAKutG,oBAAoB9U,QAAQzmF,IAYlC+1F,QAAQ37F,UAAUkjC,kBAAoB,SAASnlB,GAE9CnqB,KAAKutG,oBAAoB/+D,SAASrkB,IAYnC49E,QAAQ37F,UAAU4kH,iBAAmB,SAASh/G,GAE7ChS,KAAKutG,oBAAoB3U,QAAQ5mF,IAYlC+1F,QAAQ37F,UAAU6kH,kBAAoB,SAAS9mG,GAE9CnqB,KAAKutG,oBAAoB1U,SAAS1uE,IAYnC49E,QAAQ37F,UAAU8kH,oBAAsB,SAASl/G,GAEhDhS,KAAKutG,oBAAoBzU,WAAW9mF,IAYrC+1F,QAAQ37F,UAAUywG,qBAAuB,SAAS1yF,GAEjDnqB,KAAKutG,oBAAoB3+D,YAAYzkB,IActC49E,QAAQ37F,UAAU+kH,aAAe,SAASthH,EAAM1H,GAE/C,IAAIgiB,EAAQnqB,KAAKyuC,SAAS5+B,EAAKT,EAAGS,EAAKR,EAAGQ,EAAK5H,MAAO4H,EAAKhI,QAG3D,OAFA7H,KAAKoxH,oBAAoBjnG,EAAOhiB,GAEzBgiB,GAQR49E,QAAQ37F,UAAUilH,eAAiB,WAElCrxH,KAAKsxH,YAAW,IAQjBvpB,QAAQ37F,UAAUmlH,mBAAqB,WAEtCvxH,KAAKsxH,cAQNvpB,QAAQ37F,UAAUolH,iBAAmB,WAEpCxxH,KAAKsxH,YAAW,GAAO,IAQxBvpB,QAAQ37F,UAAUqlH,gBAAkB,WAEnCzxH,KAAKsxH,YAAW,GAAO,GAAO,IAe/BvpB,QAAQ37F,UAAUklH,WAAa,SAASI,EAAQC,EAAUC,GAEzD,IAAIC,EAAM7xH,KAAK0yF,eACX1gF,EAAQ6/G,EAAI1nG,MAAMhoB,OAAS,EAAK0vH,EAAI1nG,MAAM,GAAK,KAE/C0nG,EAAI1nG,MAAMhoB,OAAS,GAEtB0vH,EAAI3lH,QAGL,IAAIyK,EAAkB,MAAR3E,EACbhS,KAAKkS,MAAM+vC,UAAUjwC,GACrBhS,KAAKovC,mBAEFl8B,EAAalT,KAAKkS,MAAMiB,cAAcwD,GAE1C,GAAY,MAAR3E,GAAgBkB,EAAa,EACjC,CACC,IAAIjB,EAAQjS,KAAKkS,MAAMkB,WAAWuD,EAAQ,GAC1C3W,KAAKy9G,iBAAiBxrG,QAElB,GAAa,MAARD,IAAgB2/G,GACK,MAA9B3xH,KAAKunB,KAAKxV,SAAS4E,IACe,MAAlC3W,KAAKkS,MAAMk5D,YAAYz0D,IAOnB,GAAY,MAAR3E,GAAgB4/G,EAEd5xH,KAAKkS,MAAMiB,cAAcnB,GAEzB,IAELC,EAAQjS,KAAKkS,MAAMkB,WAAWpB,EAAM,GACxChS,KAAKy9G,iBAAiBxrG,SAGnB,GAAIiB,EAAa,EACtB,CACC,IAAIrO,EAAI8R,EAAOm2D,SAAS96D,GAExB,GAAI0/G,EAEH7sH,IACIoN,EAAQjS,KAAKkS,MAAMkB,WAAWuD,EAAQ9R,EAAIqO,GAC9ClT,KAAKy9G,iBAAiBxrG,OAGvB,CAEC,IAAIxD,IADJ5J,EACkB,EAAKqO,EAAa,EAAIrO,EACpCoN,EAAQjS,KAAKkS,MAAMkB,WAAWuD,EAAQlI,GAC1CzO,KAAKy9G,iBAAiBxrG,UA9BnBjS,KAAK2nH,kBAAoBhxG,GAE5B3W,KAAKy9G,iBAAiB9mG,IA+CzBoxF,QAAQ37F,UAAU0lH,UAAY,SAASn7G,EAAQo7G,GAE9Cp7G,EAASA,GAAU3W,KAAKovC,mBAExB,IAAIjlB,EAAQ,EAAgBnqB,KAAKkS,MAAMk2E,kBAAkB9/E,QAAQ2M,KAAKjV,MAAM,SAASgS,GAEpF,OAAOA,GAAQ2E,GAAsC,MAA5B3W,KAAKunB,KAAKxV,SAASC,MACzC2E,GAAU3W,KAAKkS,MAAMg6E,YAAYv1E,GAExB,MAATwT,GAEHnqB,KAAKsvC,kBAAkBnlB,IASzB49E,QAAQ37F,UAAU4lH,eAAiB,SAASr7G,EAAQs7G,GAEnDjyH,KAAKkyH,aAAY,GAAM,EAAOv7G,EAAQs7G,IAQvClqB,QAAQ37F,UAAU+lH,YAAc,SAASx7G,GAExC3W,KAAKkyH,aAAY,GAAO,EAAMv7G,IAoB/BoxF,QAAQ37F,UAAU8lH,YAAc,SAASvzD,EAAUrrD,EAAOqD,EAAQs7G,GAEjEt7G,EAASA,GAAU3W,KAAKovC,mBAExB,IAAI7zB,EAASjT,QAAQ2M,KAAKjV,MAAM,SAASgS,GAExC,OAAmC,MAA5BhS,KAAKunB,KAAKxV,SAASC,MACtBigH,GAAkD,GAAlCjyH,KAAKkS,MAAMiB,cAAcnB,KAC5ChS,KAAKkS,MAAM2vC,SAAS7vC,IAAS2sD,IACzB3+D,KAAKkS,MAAMC,OAAOnS,KAAKkS,MAAM+vC,UAAUjwC,KAC1ChS,KAAKkS,MAAMC,OAAOH,IAASsB,MAG1B6W,EAAQnqB,KAAKkS,MAAMk2E,kBAAkB7sE,EAAQ5E,GAEpC,MAATwT,GAEHnqB,KAAKsvC,kBAAkBnlB,IAgBzB49E,QAAQ37F,UAAUkyG,mBAAqB,SAAStsG,EAAM7J,GAErD,IAAIusC,EAAa10C,KAAKq+G,eAAersG,GAEjChS,KAAK2+G,cAAcx2G,GAElBusC,EAEH10C,KAAKkxH,oBAAoBl/G,GAIzBhS,KAAKgxH,iBAAiBh/G,GAGd0iC,GAA0C,GAA5B10C,KAAK+wH,qBAE5B/wH,KAAKy9G,iBAAiBzrG,IAgBxB+1F,QAAQ37F,UAAUglH,oBAAsB,SAASjnG,EAAOhiB,GAEnDnI,KAAK2+G,cAAcx2G,GAEtBnI,KAAKixH,kBAAkB9mG,GAIvBnqB,KAAKsvC,kBAAkBnlB,IAmBzB49E,QAAQ37F,UAAUgmH,cAAgB,SAASvgH,GAE1C,IAAIlF,EAAS,KAEb,GAAa,MAATkF,EAEH,GAAI7R,KAAKkS,MAAMC,OAAON,EAAMG,MAC5B,CACC,IAAI8R,EAASjS,EAAM6lF,yBAAwB,GACvCj5E,EAAS5M,EAAM6lF,yBAAwB,GACvCx1C,EAAMliD,KAAKmiD,gBAAgBtwC,EAAMG,MAEjC2xE,EAAY3jF,KAAKunB,KAAKosF,aAAa9hG,EAAe,MAAPqwC,EAAeA,EAAI8Q,OAAS,KAAMlvC,EAAQrF,GACzF9R,EAAS3M,KAAKqyH,kBAAkBxgH,EAAO8xE,QAIvCh3E,EAAS3M,KAAKsyH,oBAAoBzgH,GAIpC,OAAOlF,GAYRo7F,QAAQ37F,UAAUkmH,oBAAsB,SAASzgH,GAEhD,OAAO,IAAIo8F,gBAAgBp8F,IAY5Bk2F,QAAQ37F,UAAUimH,kBAAoB,SAASxgH,EAAO8xE,GAqBrD,OAjBIA,GAAaqd,YAAYY,MAC5Bje,GAAaqd,YAAYe,gBACzBpe,GAAaqd,YAAYgB,YACzBre,GAAaqd,YAAYiB,YAEhBjiG,KAAKuyH,uBAAuB1gH,GAE7B8xE,GAAaqd,YAAYkB,kBAChCve,GAAaqd,YAAY4D,cAEjB5kG,KAAKwyH,yBAAyB3gH,GAI9B,IAAIw8F,cAAcx8F,IAe7Bk2F,QAAQ37F,UAAUomH,yBAA2B,SAAS3gH,GAErD,OAAO,IAAI48F,qBAAqB58F,IAYjCk2F,QAAQ37F,UAAUmmH,uBAAyB,SAAS1gH,GAEnD,OAAO,IAAI28F,mBAAmB38F,IAkB/Bk2F,QAAQ37F,UAAU6vC,iBAAmB,SAASw2E,GAElB,MAAvBzyH,KAAKkoG,iBAERloG,KAAKkoG,eAAiB,IAGvBloG,KAAKkoG,eAAet7F,KAAK6lH,IAY1B1qB,QAAQ37F,UAAUywC,oBAAsB,SAAS41E,GAEhD,GAA2B,MAAvBzyH,KAAKkoG,eAER,IAAK,IAAIrjG,EAAI,EAAGA,EAAI7E,KAAKkoG,eAAe/lG,OAAQ0C,IAE/C,GAAI7E,KAAKkoG,eAAerjG,IAAM4tH,EAC9B,CACCzyH,KAAKkoG,eAAe9xF,OAAOvR,EAAG,GAC9B,QAiBJkjG,QAAQ37F,UAAUsmH,iBAAmB,SAAS9hF,EAAID,GAEjD,GAAiB,MAAbC,EAAGvO,QAA+B,MAAbuO,EAAGtO,OAC5B,CACC,IAAI7e,EAAKnb,QAAQqgB,aAAa3oB,KAAK2nB,UAAWipB,EAAGlO,OAAQkO,EAAGhO,QAE5DgO,EAAGvO,OAAS5e,EAAGrU,EAAIpP,KAAKw3C,MACxB5G,EAAGtO,OAAS7e,EAAGpU,EAAIrP,KAAKy3C,MAGJ,MAAhB7G,EAAG5N,WAAqBhjC,KAAKk3C,aAAevG,GAAW1mC,QAAQi7B,aAElE0L,EAAG/+B,MAAQ7R,KAAKunB,KAAKxV,SAAS/R,KAAK+1C,UAAUtyB,EAAGrU,EAAGqU,EAAGpU,EAAG,KAAM,KAAM,MAAM,SAASwC,GAEnF,OAAsB,MAAfA,EAAMQ,OAAiBR,EAAMQ,MAAMwkD,iBAAmB4E,iBAAiBrvD,UAAUyqD,iBACf,KAAxEvuD,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAYwrB,qBAAsB,MAC3C,MAApBtnB,EAAMQ,MAAMy2C,MAAgBj3C,EAAMQ,MAAMy2C,MAAQn7C,YAAYC,UAKjE,OAAOgjC,GAQRm3D,QAAQ37F,UAAUumH,sBAAwB,SAASxqH,GAElD,IAAIiH,EAAInF,QAAQ04B,WAAWx6B,GACvBkH,EAAIpF,QAAQ44B,WAAW16B,GAIvBsb,EAAKnb,QAAQqgB,aAAa3oB,KAAK2nB,UAAWvY,EAAGC,GAEjD,OAAOrP,KAAKunB,KAAKxV,SAAS/R,KAAK+1C,UAAUtyB,EAAGrU,EAAGqU,EAAGpU,KAQnD04F,QAAQ37F,UAAUwmH,eAAiB,SAASjiF,EAASC,EAAI9mC,GAExD,IAAI+oH,EAAa5oH,QAAQm5B,aAAawN,EAAGrO,YACrC51B,GAAS,EAmDb,OAhDIikC,EAAGrO,YAAcviC,KAAK8yH,UAEzBnmH,GAAS,EAIT3M,KAAK8yH,UAAYliF,EAAGrO,WAMG,MAApBviC,KAAK6hC,aAAuB8O,GAAW1mC,QAAQi7B,YAElDj7B,QAAQy6B,uBAAuB1kC,KAAK6hC,YAAa,KAAM7hC,KAAK+yH,kBAAmB/yH,KAAKgzH,iBACpFhzH,KAAK+yH,kBAAoB,KACzB/yH,KAAKgzH,gBAAkB,KACvBhzH,KAAK6hC,YAAc,MAEV3hC,SAASmC,OAA6B,MAApBrC,KAAK6hC,aAAuB+O,EAAGpO,aAAexiC,KAAK6hC,YAItE3hC,SAASqD,UAAYrD,SAAS+B,aAAe,IAAM0uC,GAAW1mC,QAAQg7B,aAC5E4tF,IAAe5oH,QAAQg8B,WAAW2K,EAAGrO,cAEvCviC,KAAK6hC,YAAc+O,EAAGpO,YAEtBxiC,KAAK+yH,kBAAoBzqH,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEpDnI,KAAKglC,eAAe/6B,QAAQi7B,WAAY,IAAIxD,aAAav5B,EAAKnI,KAAK2yH,sBAAsBxqH,QAE1FnI,KAAKgzH,gBAAkB1qH,QAAQ2M,KAAKjV,MAAM,SAASmI,GAElDnI,KAAKglC,eAAe/6B,QAAQk7B,SAAU,IAAIzD,aAAav5B,EAAKnI,KAAK2yH,sBAAsBxqH,QAGxF8B,QAAQq6B,oBAAoBtkC,KAAK6hC,YAAa,KAAM7hC,KAAK+yH,kBAAmB/yH,KAAKgzH,kBAhBjFrmH,GAAS,EAqBN3M,KAAKizH,wBAAwBtiF,EAASC,EAAI9mC,KAE7C6C,GAAS,IAIL1C,QAAQg5B,eAAejjC,KAAK8yH,YAAcniF,GAAW1mC,QAAQi7B,YAAuC,GAAzBllC,KAAK8yH,UAAUI,SAM3FviF,GAAW1mC,QAAQk7B,UAAYnlC,KAAKk3C,YAEvCl3C,KAAKk3C,aAAc,EAEXvG,GAAW1mC,QAAQg7B,YAAejlC,KAAKk3C,aAOtCvqC,MAAczM,SAASyC,OAASguC,GAAW1mC,QAAQi7B,aAC5DllC,KAAKk3C,aAAel3C,KAAKm3C,gBAAkB07E,GAC1CliF,GAAW1mC,QAAQg7B,YAAcjlC,KAAKk3C,aACtCvG,GAAW1mC,QAAQk7B,WAAanlC,KAAKk3C,eAEtCvqC,GAAS,IAVT3M,KAAKk3C,aAAc,EACnBl3C,KAAKm3C,eAAiB07E,GAYlBlmH,GAAUgkC,GAAW1mC,QAAQg7B,aAEjCjlC,KAAKmzH,WAAaviF,EAAGlO,OACrB1iC,KAAKozH,WAAaxiF,EAAGhO,QAGfj2B,IAQRo7F,QAAQ37F,UAAU6mH,wBAA0B,SAAStiF,EAASC,EAAI9mC,GAEjE,IAAI6C,GAAS,EACTkmH,EAAa5oH,QAAQm5B,aAAawN,EAAGrO,YAazC,OAVIviC,KAAKqzH,mBAAqBR,GAAcliF,GAAW1mC,QAAQi7B,YAE9DllC,KAAKqzH,kBAAoB1iF,GAAW1mC,QAAQk7B,SAC5Cx4B,GAAS,GAEDzM,SAASyC,QAAUkwH,GAAcliF,GAAW1mC,QAAQk7B,WAE5DnlC,KAAKqzH,mBAAoB,GAGnB1mH,GAgBRo7F,QAAQ37F,UAAUknH,qBAAuB,SAAS3iF,EAASC,GAE1D,IAAI9sB,EAAS8sB,EAAGpO,YACZziC,EAA2B,MAAnB+jB,EAAOxN,SAAoBwN,EAAOxN,SAAS5I,cAAgB,GACnE6lH,GAAatpH,QAAQm5B,aAAawN,EAAGrO,aAAet4B,QAAQo8B,kBAAkBuK,EAAGrO,YAErF,OAAOoO,GAAW1mC,QAAQg7B,YAAcsuF,IAAsB,UAARxzH,GAA4B,UAARA,GAChE,SAARA,GAAkC,YAAf+jB,EAAOxd,MAAqC,SAAfwd,EAAOxd,MACzC,UAAfwd,EAAOxd,MAAmC,UAAfwd,EAAOxd,MAAmC,QAAfwd,EAAOxd,OAa/DyhG,QAAQ37F,UAAUonH,cAAgB,SAAS3hH,GAE1C,OAAOA,GAiBRk2F,QAAQ37F,UAAU44B,eAAiB,SAAS2L,EAASC,EAAI9mC,GAExD,GAAI9J,KAAKszH,qBAAqB3iF,EAASC,GAEX,MAAvB5wC,KAAK07F,gBAER17F,KAAK07F,eAAe9pD,WAJtB,CAuBA,GAbc,MAAV9nC,IAEHA,EAAS9J,MAIV4wC,EAAK5wC,KAAK0yH,iBAAiB9hF,EAAID,IAOzB3wC,KAAK2+F,wBAA0B10F,QAAQg5B,eAAe2N,EAAGrO,aAAiBviC,KAAK22G,kBACpFz2G,SAASqD,WAAa0G,QAAQ47B,aAAa+K,EAAGrO,aAAet4B,QAAQg8B,WAAW2K,EAAGrO,aACpF,CACC,IAAIkxF,GAAc,IAAI1oH,MAAOC,UAG7B,IAAM9K,SAASU,WAAa+vC,GAAW1mC,QAAQg7B,YAAgB/kC,SAASU,WAAa+vC,GAAW1mC,QAAQk7B,WAAanlC,KAAK0zH,gBAEzH,GAA2B,MAAvB1zH,KAAK2zH,gBAA0B3zH,KAAK2zH,gBAAkB/iF,EAAGrO,YAC5DkxF,EAAczzH,KAAK+2G,cAAgB/2G,KAAK42G,kBACxCxtG,KAAKsX,IAAI1gB,KAAK4zH,WAAahjF,EAAGlO,QAAU1iC,KAAK62G,oBAC7CztG,KAAKsX,IAAI1gB,KAAK82G,WAAalmE,EAAGhO,QAAU5iC,KAAK62G,oBAC7C72G,KAAK6zH,mBAAqB,EAC3B,CACC7zH,KAAK6zH,qBACL,IAAIC,GAAmB,EAEvB,GAAInjF,GAAW1mC,QAAQk7B,UAEtB,GAAIyL,EAAG5N,WAAahjC,KAAK+zH,eAAuC,MAAtB/zH,KAAK+zH,cAC/C,CACC/zH,KAAK+2G,cAAgB,EACrB,IAAI/kG,EAAOhS,KAAK+zH,cAChB/zH,KAAK+zH,cAAgB,KAOjB7zH,SAASU,WAEZgwC,EAAGpO,YAAYgB,UAAU,cAG1BxjC,KAAK+kC,SAAS6L,EAAGrO,WAAYvwB,GAC7B8hH,GAAmB,QAKpB9zH,KAAK0zH,iBAAkB,EACvB1zH,KAAK+2G,cAAgB,EAItB,IAAK72G,SAASU,WAAakzH,EAG1B,YADA7pH,QAAQm4B,QAAQwO,EAAGrO,iBAIW,MAAvBviC,KAAK2zH,gBAA0B3zH,KAAK2zH,gBAAkB/iF,EAAGrO,aAEjEviC,KAAK+zH,cAAgBnjF,EAAG5N,UACxBhjC,KAAK4zH,WAAahjF,EAAGlO,OACrB1iC,KAAK82G,WAAalmE,EAAGhO,OACrB5iC,KAAK+2G,cAAgB0c,EACrBzzH,KAAK2zH,eAAiB/iF,EAAGrO,WACzBviC,KAAK6zH,mBAAqB,QAGvB,IAAK7zH,KAAKk3C,aAAevG,GAAW1mC,QAAQk7B,WAAanlC,KAAK0zH,gBAqBlE,OAnBA1zH,KAAK0zH,iBAAkB,EACnB1hH,EAAOhS,KAAK+zH,cAChB/zH,KAAK+zH,cAAgB,KACrB/zH,KAAKk3C,aAAc,QAGE,MAARllC,IAAmB/H,QAAQ47B,aAAa+K,EAAGrO,aAAet4B,QAAQg8B,WAAW2K,EAAGrO,eAC3FriC,SAASmC,OAASnC,SAASoB,SAEhB8H,KAAKsX,IAAI1gB,KAAK4zH,WAAahjF,EAAGlO,QAAU1iC,KAAK62G,oBACzDztG,KAAKsX,IAAI1gB,KAAK82G,WAAalmE,EAAGhO,QAAU5iC,KAAK62G,mBAE7C72G,KAAK+kC,SAAS6L,EAAGrO,WAAYvwB,GAI7B/H,QAAQm4B,QAAQwO,EAAGrO,aAOtB,IAAKviC,KAAK4yH,eAAejiF,EAASC,EAAI9mC,GACtC,CAKC,GAHA8mC,EAAG/+B,MAAQ7R,KAAKwzH,cAAc5iF,EAAG7+B,YACjC/R,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ4+B,iBAAkB,YAAa8H,EAAS,QAASC,IAErF1wC,SAASkB,OAASlB,SAASoB,OAASpB,SAASmC,OAASnC,SAASO,SAClEP,SAASE,OAASF,SAAS+C,QAAW2tC,EAAGrO,WAAW9jB,QAAUze,KAAK2nB,UACrE,CACC,GAAIgpB,GAAW1mC,QAAQi7B,YAAcllC,KAAKk3C,aAAel3C,KAAK03C,aAAeztC,QAAQk8B,kBAAkByK,EAAGrO,UAEzGviC,KAAK23C,qBAAqB/G,EAAG9N,YAAa8N,EAAG7N,YAAa/iC,KAAK43C,iBAE3D,GAAIjH,GAAW1mC,QAAQk7B,UAAYnlC,KAAKm5G,kBAAoBn5G,KAAKo5G,4BACtC,GAA7Bp5G,KAAK2nB,UAAUM,YAA+C,GAA5BjoB,KAAK2nB,UAAUnc,WACpD,CACC,IAAIqN,EAAI7Y,KAAKunB,KAAKjV,MACd9K,EAAKxH,KAAKunB,KAAKoH,UACnB3uB,KAAKunB,KAAKq1B,aAAap1C,EAAG4H,EAAIpP,KAAK2nB,UAAUM,WAAapP,EAAGrR,EAAG6H,EAAIrP,KAAK2nB,UAAUnc,UAAYqN,GAC/F7Y,KAAK2nB,UAAUM,WAAa,EAC5BjoB,KAAK2nB,UAAUnc,UAAY,EAG5B,GAA2B,MAAvBxL,KAAKkoG,eACT,CACC,IAAIzkE,EAAO,CAAC35B,EAAQ8mC,GAGfA,EAAGrO,WAAWW,iBAElB0N,EAAGrO,WAAWpe,aAAc,GAG7B,IAAK,IAAItf,EAAI,EAAGA,EAAI7E,KAAKkoG,eAAe/lG,OAAQ0C,IAChD,CACC,IAAIiwC,EAAI90C,KAAKkoG,eAAerjG,GAExB8rC,GAAW1mC,QAAQg7B,WAEtB6P,EAAErE,UAAUrlC,MAAM0pC,EAAGrR,GAEbkN,GAAW1mC,QAAQi7B,WAE3B4P,EAAE0B,UAAUprC,MAAM0pC,EAAGrR,GAEbkN,GAAW1mC,QAAQk7B,UAE3B2P,EAAE4B,QAAQtrC,MAAM0pC,EAAGrR,IAMlBkN,GAAW1mC,QAAQk7B,UAEtBnlC,KAAKi+G,MAAMrtE,IAKR3mC,QAAQ47B,aAAa+K,EAAGrO,aAAet4B,QAAQg8B,WAAW2K,EAAGrO,cACjEoO,GAAW1mC,QAAQg7B,YAAcjlC,KAAKg3G,oBAAsBh3G,KAAKk3G,sBAEjEl3G,KAAKk3G,sBAAuB,EAC5Bl3G,KAAKo3G,cAAgBxmE,EAAG9N,YACxB9iC,KAAKq3G,cAAgBzmE,EAAG7N,YAapB/iC,KAAKg0H,kBAERxyH,OAAOo5F,aAAa56F,KAAKg0H,kBAG1Bh0H,KAAKg0H,iBAAmBxyH,OAAOuR,WAAWzK,QAAQ2M,KAAKjV,MAhBzC,WAETA,KAAKm3G,iBAERn3G,KAAK4+G,WAAWhuE,GAGjB5wC,KAAKk3G,sBAAuB,EAC5Bl3G,KAAKm3G,iBAAkB,KAQ+Cn3G,KAAKi3G,iBAC5Ej3G,KAAKm3G,iBAAkB,GAEfxmE,GAAW1mC,QAAQk7B,UAE3BnlC,KAAKk3G,sBAAuB,EAC5Bl3G,KAAKm3G,iBAAkB,GAEfn3G,KAAKm3G,kBAEbn3G,KAAKm3G,gBACJ/tG,KAAKsX,IAAI1gB,KAAKo3G,cAAgBxmE,EAAG9N,aAAe9iC,KAAKyxD,WACrDroD,KAAKsX,IAAI1gB,KAAKq3G,cAAgBzmE,EAAG7N,aAAe/iC,KAAKyxD,WAInD9gB,GAAW1mC,QAAQg7B,YAAcjlC,KAAK+yF,cAAgB/yF,KAAKy2G,WAAW3b,cAAclqD,EAAGrO,aAE1FviC,KAAKizF,aAAajzF,KAAKs7F,4BAGxBt7F,KAAKi0H,kBAAkBtjF,EAASC,EAAI9mC,MAStCi+F,QAAQ37F,UAAU6nH,kBAAoB,SAAStjF,EAASC,EAAI9mC,GAGvD6mC,GAAW1mC,QAAQg7B,YAAch7B,QAAQ47B,aAAa+K,EAAGrO,aAE5DqO,EAAGxO,SAAQ,IAuCb2lE,QAAQ37F,UAAU2pG,iBAAmB,SAAS5tG,EAAK6J,GAGlDhS,KAAK+2G,cAAgB,EACrB/2G,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ6+B,QAAS,QAAS3gC,EAAK,OAAQ6J,KAQzE+1F,QAAQ37F,UAAU6iB,QAAU,WAEtBjvB,KAAKk0H,YAETl0H,KAAKk0H,WAAY,EAEU,MAAvBl0H,KAAK07F,gBAER17F,KAAK07F,eAAezsE,UAGa,MAA9BjvB,KAAK4gG,uBAER5gG,KAAK4gG,sBAAsB3xE,UAGD,MAAvBjvB,KAAKm8G,gBAERn8G,KAAKm8G,eAAeltF,UAGQ,MAAzBjvB,KAAKg2G,kBAERh2G,KAAKg2G,iBAAiB/mF,UAGO,MAA1BjvB,KAAKg8G,mBAERh8G,KAAKg8G,kBAAkB/sF,UAGC,MAArBjvB,KAAKq3C,cAERr3C,KAAKq3C,aAAapoB,UAGI,MAAnBjvB,KAAKy2G,YAERz2G,KAAKy2G,WAAWxnF,UAGA,MAAbjvB,KAAKunB,MAERvnB,KAAKunB,KAAK0H,UAGO,MAAdjvB,KAAKkS,OAAkD,MAAjClS,KAAK2oG,2BAE9B3oG,KAAKkS,MAAMqxB,eAAevjC,KAAK2oG,0BAC/B3oG,KAAK2oG,yBAA2B,MAGjC3oG,KAAK2nB,UAAY,OAInB1nB,WAAW8nG,aAA6B,IAAZA,QAA0BA,aAAUnhG,EAyEhEkiG,cAAc18F,UAAY,IAAIw1B,cAC9BknE,cAAc18F,UAAUH,YAAc68F,cAOtCA,cAAc18F,UAAUinC,MAAQ,KAOhCy1D,cAAc18F,UAAU28F,QAAU,KASlCD,cAAc18F,UAAUggB,MAAQze,YAAY4e,YAS5Cu8E,cAAc18F,UAAUzE,cAAgBgG,YAAY8e,aAQpDq8E,cAAc18F,UAAUwQ,OAAS,KAOjCksF,cAAc18F,UAAUgI,OAAS,KAQjC00F,cAAc18F,UAAUkrG,eAAiB,GAmCzCxO,cAAc18F,UAAUg0F,UAAY,SAASvuF,GAE5C,IAAIM,EAASN,EAAM0V,KAAKtW,MAAM8c,WAAW5b,OAAON,EAAMG,MAClD6G,EAAIhH,EAAM0V,KAAKjV,MACfmR,EAAK,KAEL3a,EAAI9I,KAAKqzC,MAAMprC,MACfY,EAAI7I,KAAKqzC,MAAMxrC,OAEnB,GAAIsK,EACJ,CACC,IAAI+T,EAAMrU,EAAMsT,eAEhB,GAAIe,EAAI/jB,OAAS,GAAK,EAErBshB,EAAKyC,EAAI9c,KAAKmnB,MAAMrK,EAAI/jB,OAAS,QAGlC,CACC,IAAIuM,EAAMwX,EAAI/jB,OAAS,EACnBq1D,EAAKtxC,EAAIxX,EAAI,GACb0U,EAAK8C,EAAIxX,GACb+U,EAAK,IAAItU,QAAQqoD,EAAGpoD,GAAKgU,EAAGhU,EAAIooD,EAAGpoD,GAAK,EACvCooD,EAAGnoD,GAAK+T,EAAG/T,EAAImoD,EAAGnoD,GAAK,SAKzBoU,EAAK,IAAItU,QAELnP,KAAKosB,OAASze,YAAY2e,WAE7B7I,EAAGrU,EAAIyC,EAAMzC,EAELpP,KAAKosB,OAASze,YAAYwyB,aAElC1c,EAAGrU,EAAIyC,EAAMzC,EAAIyC,EAAM5J,MAAQ,EAI/Bwb,EAAGrU,EAAIyC,EAAMzC,EAAIyC,EAAM5J,MAGpBjI,KAAK2H,eAAiBgG,YAAY6e,UAErC/I,EAAGpU,EAAIwC,EAAMxC,EAELrP,KAAK2H,eAAiBgG,YAAYyyB,aAE1C3c,EAAGpU,EAAIwC,EAAMxC,EAAIwC,EAAMhK,OAAS,EAIhC4b,EAAGpU,EAAIwC,EAAMxC,EAAIwC,EAAMhK,OAIzB,OAAO,IAAIyH,YAAYlG,KAAK2c,MAAMtC,EAAGrU,GAAKtG,EAAI9I,KAAKs3G,eAAiBt3G,KAAK4c,OAAOxN,GAAKyJ,GACpFzP,KAAK2c,MAAMtC,EAAGpU,GAAKxG,EAAI7I,KAAKs3G,eAAiBt3G,KAAK4c,OAAOvN,GAAKwJ,GAAI/P,EAAI+P,EAAGhQ,EAAIgQ,IAS/EiwF,cAAc18F,UAAUxK,SAAW,WAElC,OAAO5B,KAAK+oG,SAGb9oG,WAAW6oG,mBAAyC,IAAlBA,cAAgCA,mBAAgBliG,EAyElFoiG,UAAU58F,UAAU0X,OAAS,KAO7BklF,UAAU58F,UAAUsnD,QAAU,KAO9Bs1C,UAAU58F,UAAU+nH,gBAAkBxmH,YAAYulB,sBAOlD81E,UAAU58F,UAAU4oC,SAAU,EAO9Bg0D,UAAU58F,UAAUgoH,cAAe,EAOnCprB,UAAU58F,UAAUijB,OAAS,GAO7B25E,UAAU58F,UAAUioH,UAAY,EAOhCrrB,UAAU58F,UAAU6uG,eAAgB,EAQpCjS,UAAU58F,UAAUkoH,aAAc,EAOlCtrB,UAAU58F,UAAUmoH,WAAa,KAOjCvrB,UAAU58F,UAAU4tD,SAAW,KAkB/BgvC,UAAU58F,UAAUi/F,WAAY,EAUhCrC,UAAU58F,UAAUooH,gBAA2C,GAAzB3zH,SAASC,aAO/CkoG,UAAU58F,UAAU8jG,YAAc,SAASvoF,GAE1C,IAAI1W,EAAQ,IAAI82F,QAAQpgF,EAAW3nB,KAAK8jB,OAAOiK,WAAY/tB,KAAKm0H,gBAAiBn0H,KAAK8jB,OAAOy4F,iBAI7F,OAHAtrG,EAAMguF,gBAAiB,EACvBhuF,EAAMymC,YAAa,EAEZzmC,GAQR+3F,UAAU58F,UAAUjF,KAAO,SAASwgB,GAEnC3nB,KAAK0zD,QAAU1zD,KAAKkwG,YAAYvoF,GAGhC,IAAI8sG,EAA2Bz0H,KAAK0zD,QAAQ1W,kBAU5C,GATAh9C,KAAK0zD,QAAQ1W,kBAAoB10C,QAAQ2M,KAAKjV,MAAM,SAASkR,GAEvDlR,KAAKqrG,WAA6B,MAAhBrrG,KAAK0zD,SAE3B+gE,EAAyBrpH,MAAMpL,KAAK0zD,QAASroD,cAK3CnL,SAAS+C,OACb,CACC,IAAIiC,EAAOlF,KAAK0zD,QAAQ5hD,UAAUmkF,YAAYpiF,WAC9C3O,EAAKb,aAAa,kBAAmB,iBACrCa,EAAKb,aAAa,kBAAmB,iBAItCrE,KAAK0zD,QAAQunD,cAAgBj7G,KAAKi7G,cAClCj7G,KAAK0zD,QAAQ/d,YAAW,GAExB31C,KAAK6gG,cAAgBv4F,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAEnDnI,KAAKqrG,WAAcrrG,KAAKy7C,QAE5Bz7C,KAAKqmE,YAKPrmE,KAAK8jB,OAAOiK,WAAW/jB,YAAYC,QAAQugC,OAAQxqC,KAAK6gG,eACxD7gG,KAAK0zD,QAAQzX,iBAAiBj8C,MAG9B,IAAIunB,EAAOvnB,KAAK8jB,OAAOhS,UACvByV,EAAKvd,YAAYC,QAAQ2gC,MAAO5qC,KAAK6gG,eACrCt5E,EAAKvd,YAAYC,QAAQ4gC,UAAW7qC,KAAK6gG,eACzCt5E,EAAKvd,YAAYC,QAAQ6gC,oBAAqB9qC,KAAK6gG,eACnDt5E,EAAKvd,YAAYC,QAAQ+gC,KAAMhrC,KAAK6gG,eACpCt5E,EAAKvd,YAAYC,QAAQ8gC,GAAI/qC,KAAK6gG,eAGlC52F,QAAQD,YAAYhK,KAAK8jB,OAAO6D,UAAW,SAAU3nB,KAAK6gG,eAE1D7gG,KAAKorG,WAAa9iG,QAAQ2M,KAAKjV,MAAM,SAAS8J,GAEzC9J,KAAKs0H,aAERt0H,KAAK6gG,cAAcz1F,MAAMpL,KAAMqL,cAGjCrL,KAAK8jB,OAAO9Z,YAAYC,QAAQi+B,IAAKloC,KAAKorG,YAG1CprG,KAAKyrG,eAAiBnjG,QAAQ2M,KAAKjV,MAAM,SAAS8J,GAEjD9J,KAAK0zD,QAAQ80C,cAAcxoG,KAAK8jB,OAAOy4F,iBACvCv8G,KAAK0zD,QAAQ45C,aAEdttG,KAAK8jB,OAAO9Z,YAAYC,QAAQw+B,QAASzoC,KAAKyrG,gBAG9CzrG,KAAKymB,OAAS,IAAInX,YAAY,EAAG,EAAG,EAAG,GACvCtP,KAAK00H,gBAAkB,IAAIj5D,iBAAiBz7D,KAAKymB,OAAQ,KACxD9Y,YAAYuoB,cAAevoB,YAAYwoB,qBACxCn2B,KAAK00H,gBAAgBpmG,QAAUtuB,KAAK0zD,QAAQplC,QAExCtuB,KAAKw0H,kBAERx0H,KAAK00H,gBAAgB1gE,cAAgB,WAEpC,OAAO,IAITh0D,KAAK00H,gBAAgBvtH,KAAKnH,KAAK0zD,QAAQ5hD,UAAU+gD,kBAMjD,IAAIy8C,EAAUhnG,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEzC,IAAIyI,EAAI3G,QAAQu4B,UAAUr6B,GAEtBwsH,EAAWrsH,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE1CnI,KAAK0zD,QAAQ1uB,eAAe/6B,QAAQi7B,WAAY,IAAIxD,aAAav5B,OAG9DysH,EAAYtsH,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE3C8B,QAAQy6B,uBAAuB9zB,EAAG,KAAM+jH,EAAUC,GAClD50H,KAAK0zD,QAAQ1uB,eAAe/6B,QAAQk7B,SAAU,IAAIzD,aAAav5B,OAGhE8B,QAAQq6B,oBAAoB1zB,EAAG,KAAM+jH,EAAUC,GAC/C50H,KAAK0zD,QAAQ1uB,eAAe/6B,QAAQg7B,WAAY,IAAIvD,aAAav5B,OAGlE8B,QAAQq6B,oBAAoBtkC,KAAK00H,gBAAgBxvH,KAAMoqG,GAGvDtvG,KAAK60H,MAAQ70H,KAAK80H,cAEd90H,KAAKw0H,kBAERx0H,KAAK60H,MAAM7gE,cAAgB,WAE1B,OAAO,IAITh0D,KAAK60H,MAAM1tH,KAAKnH,KAAK0zD,QAAQ5hD,UAAU+gD,kBAEnC7yD,KAAKg1C,UAERh1C,KAAK60H,MAAM3vH,KAAKwC,MAAM0M,OAAS,eAGhCnK,QAAQq6B,oBAAoBtkC,KAAK60H,MAAM3vH,KAAMoqG,GAE7CtvG,KAAK00H,gBAAgBxvH,KAAKwC,MAAMgmB,QAAW1tB,KAAiB,aAAI,GAAK,OACrEA,KAAK60H,MAAM3vH,KAAKwC,MAAMgmB,QAAU1tB,KAAK00H,gBAAgBxvH,KAAKwC,MAAMgmB,QAChE1tB,KAAK00H,gBAAgBxvH,KAAKwC,MAAM0M,OAAS,OAEzCpU,KAAKqmE,QAAO,IASb2iC,UAAU58F,UAAUuH,UAAY,WAE/B,OAAO3T,KAAKg1C,SAabg0D,UAAU58F,UAAUupC,WAAa,SAAS5tC,GAEzC/H,KAAKg1C,QAAUjtC,GAahBihG,UAAU58F,UAAU2oH,eAAiB,SAAShtH,GAE7C/H,KAAK60H,MAAM3vH,KAAKwC,MAAM6D,WAAa,EAAU,UAAY,UAQ1Dy9F,UAAU58F,UAAUkhG,QAAU,WAE7BttG,KAAKqmE,QAAO,IAQb2iC,UAAU58F,UAAU0oH,YAAc,WAIhC,IAOID,EATL,OAAuB,MAAnB70H,KAAKu0H,aAEJM,EAAQ,IAAI/3D,aAAa,IAAIxtD,YAAY,EAAG,EAAGtP,KAAKu0H,WAAWtsH,MAAOjI,KAAKu0H,WAAW1sH,QAAS7H,KAAKu0H,WAAWtvH,MAC7GqpB,QAAUtuB,KAAK0zD,QAAQplC,QAEtBumG,KAIHA,EAAQ,IAAIp5D,iBAAiB,IAAInsD,YAAY,EAAG,EAAGtP,KAAKq0H,UAAWr0H,KAAKq0H,WAC3E1mH,YAAYgpB,yBAA0BhpB,YAAYipB,6BAC7CtI,QAAUtuB,KAAK0zD,QAAQplC,QAEtBumG,IAST7rB,UAAU58F,UAAU4oH,uBAAyB,WAE5C,OAAO,IAAI1lH,YAAY,EAAG,EAAGtP,KAAK8jB,OAAO6D,UAAUurC,YAAalzD,KAAK8jB,OAAO6D,UAAUlc,eAQvFu9F,UAAU58F,UAAU6oH,iBAAmB,SAAS3iH,GAE/C,OAAO,MAQR02F,UAAU58F,UAAU8oH,qBAAuB,WAE1C,OAAOl1H,KAAK8jB,OAAO4L,kBAQpBs5E,UAAU58F,UAAUi6D,OAAS,SAASwiC,GAErC,GAAmB,MAAf7oG,KAAK8jB,QAA2C,MAAzB9jB,KAAK8jB,OAAO6D,WACtB,MAAhB3nB,KAAK0zD,SAA6C,MAA1B1zD,KAAK0zD,QAAQ/rC,UACtC,CACC,IAAIwtG,EAAcn1H,KAAK8jB,OAAOyD,KAAKjV,MAC/B8iH,EAAoBp1H,KAAKk1H,uBACzBG,EAAsB,IAAI/lH,YAAY8lH,EAAkBhmH,EAAI+lH,EAAcn1H,KAAK8jB,OAAO0zB,MACxF49E,EAAkB/lH,EAAI8lH,EAAcn1H,KAAK8jB,OAAO2zB,MAAO29E,EAAkBntH,MAAQktH,EACjFC,EAAkBvtH,OAASstH,GAEzBG,EAAuB,IAAIhmH,YAAY,EAAG,EAC7CtP,KAAK8jB,OAAO6D,UAAUze,YAAcisH,EACpCn1H,KAAK8jB,OAAO6D,UAAU1e,aAAeksH,GAElCI,EAAQF,EAAoB5lH,QAChC8lH,EAAMxwH,IAAIuwH,GAGV,IAAIznG,EAAO7tB,KAAKg1H,yBACZQ,EAAgBpsH,KAAKC,IAAIwkB,EAAK5lB,MAAQktH,EAAaI,EAAMttH,OACzDwtH,EAAiBrsH,KAAKC,IAAIwkB,EAAKhmB,OAASstH,EAAaI,EAAM1tH,QAE3DwqE,EAAiBjpE,KAAKC,IAAI,EAAGrJ,KAAK0zD,QAAQ/rC,UAAUze,YAAclJ,KAAKqvB,QACvEolE,EAAkBrrF,KAAKC,IAAI,EAAGrJ,KAAK0zD,QAAQ/rC,UAAU1e,aAAejJ,KAAKqvB,QAEzEqmG,EAAetsH,KAAK2G,IAAIsiE,EAAiBmjD,EAAe/gC,EAAkBghC,GAC1EnjH,EAASsC,MAAM8gH,GAAiB11H,KAAKg6D,SAAW5wD,KAAKC,IAAIrJ,KAAKg6D,SAAU07D,GAE5E,GAAIpjH,EAAQ,EACZ,CACKtS,KAAK0zD,QAAQ5hD,UAAUQ,OAASA,IAEnCtS,KAAK0zD,QAAQ5hD,UAAUQ,MAAQA,EAC/Bu2F,GAAa,GAGd,IAAI8sB,EAAU31H,KAAK0zD,QAAQ5hD,UAEvB6jH,EAAQ1oD,aAAejtE,KAAK8jB,OAAOhS,UAAUm7D,aAEhD0oD,EAAQ3kB,eAAehxG,KAAK8jB,OAAOhS,UAAUm7D,aAG9C,IAAIr8D,EAAI5Q,KAAK8jB,OAAOyD,KAAKoH,UACrB9M,EAAKjR,EAAExB,EAAIpP,KAAK8jB,OAAO0zB,MACvB11B,EAAKlR,EAAEvB,EAAIrP,KAAK8jB,OAAO2zB,MAEvBS,EAAMl4C,KAAKi1H,iBAAiB3iH,GAErB,MAAP4lC,IAEHr2B,GAAMq2B,EAAI9oC,EACV0S,GAAMo2B,EAAI7oC,GAGPgmH,EAAoBjmH,EAAI,IAE3ByS,GAAUwzG,EAAoBjmH,GAE3BimH,EAAoBhmH,EAAI,IAE3ByS,GAAUuzG,EAAoBhmH,GAG3BsmH,EAAQhnG,UAAUvf,GAAKyS,GAAM8zG,EAAQhnG,UAAUtf,GAAKyS,IAEvD6zG,EAAQhnG,UAAUvf,EAAIyS,EACtB8zG,EAAQhnG,UAAUtf,EAAIyS,EACtB+mF,GAAa,GAId,IAAIpY,EAAKklC,EAAQhnG,UAEbinG,GADJtjH,EAAQtS,KAAK8jB,OAAOhS,UAAUQ,OACTqjH,EAAQrjH,MACzBujH,EAAS,EAAMF,EAAQrjH,MACvBqV,EAAY3nB,KAAK8jB,OAAO6D,UAG5B3nB,KAAKymB,OAAS,IAAInX,aAChBmhF,EAAGrhF,EAAIwB,EAAExB,EAAIpP,KAAK8jB,OAAO0zB,OAASq+E,GAClCplC,EAAGphF,EAAIuB,EAAEvB,EAAIrP,KAAK8jB,OAAO2zB,OAASo+E,EAClCluG,EAAUze,YAAc0sH,EACxBjuG,EAAU1e,aAAe2sH,GAG3B51H,KAAKymB,OAAOrX,GAAKpP,KAAK8jB,OAAO6D,UAAUM,WAAa0tG,EAAQrjH,MAAQA,EACpEtS,KAAKymB,OAAOpX,GAAKrP,KAAK8jB,OAAO6D,UAAUnc,UAAYmqH,EAAQrjH,MAAQA,GAE/D+J,EAAIrc,KAAK00H,gBAAgBjuG,QAEvBrX,GAAKpP,KAAKymB,OAAOrX,GAAKiN,EAAEhN,GAAKrP,KAAKymB,OAAOpX,GAAKgN,EAAEpU,OAASjI,KAAKymB,OAAOxe,OAASoU,EAAExU,QAAU7H,KAAKymB,OAAO5e,SAE3G7H,KAAK00H,gBAAgBjuG,OAASzmB,KAAKymB,OACnCzmB,KAAK00H,gBAAgB7hH,UAItB,IAAIwJ,EAAIrc,KAAK60H,MAAMpuG,OACflW,EAAK,IAAIjB,YAAYtP,KAAKymB,OAAOrX,EAAIpP,KAAKymB,OAAOxe,MAAQoU,EAAEpU,MAAQ,EACrEjI,KAAKymB,OAAOpX,EAAIrP,KAAKymB,OAAO5e,OAASwU,EAAExU,OAAS,EAAGwU,EAAEpU,MAAOoU,EAAExU,QAE5DwU,EAAEjN,GAAKmB,EAAGnB,GAAKiN,EAAEhN,GAAKkB,EAAGlB,GAAKgN,EAAEpU,OAASsI,EAAGtI,OAASoU,EAAExU,QAAU0I,EAAG1I,SAEvE7H,KAAK60H,MAAMpuG,OAASlW,EAGoB,UAApCvQ,KAAK60H,MAAM3vH,KAAKwC,MAAM6D,YAEzBvL,KAAK60H,MAAMhiH,UAITg2F,GAEH7oG,KAAK0zD,QAAQnsC,KAAKshF,gBAWtBG,UAAU58F,UAAUqkC,UAAY,SAAS3mC,EAAQ8mC,GAEhD,GAAI5wC,KAAKg1C,SAAWh1C,KAAKo0H,aACzB,CACC,IAAI1oE,EAAQzhD,QAAQm5B,aAAawN,EAAGrO,YAAuC,EAAxBviC,KAAK8jB,OAAO2tC,UAC3DqkE,EAAO91H,KAAK8jB,OAAOiyG,yBAA2B71H,SAASE,OAASsrD,EAAM,GACxE,IAAIp8C,YAAYshC,EAAG9N,YAAc4oB,EAAK9a,EAAG7N,YAAc2oB,EAAK,EAAIA,EAAK,EAAIA,GAAO,KAClF1rD,KAAK2tB,KAAOijB,EAAGnO,SAASziC,KAAK60H,QAAkB,MAAPiB,GAAextH,QAAQqe,WAAWtU,MAAMoU,OAAQqvG,GACxF91H,KAAKmyC,OAASvB,EAAGlO,OACjB1iC,KAAKoyC,OAASxB,EAAGhO,OACjB5iC,KAAKy7C,QAAS,EAEVz7C,KAAK8jB,OAAOm0F,yBAA2B3vG,QAAQyM,cAAc/U,KAAK8jB,OAAO6D,YAE5E3nB,KAAK4rE,IAAM5rE,KAAK8jB,OAAO6D,UAAUM,WACjCjoB,KAAK6rE,IAAM7rE,KAAK8jB,OAAO6D,UAAUnc,YAIjCxL,KAAK4rE,IAAM,EACX5rE,KAAK6rE,IAAM,GAIbj7B,EAAGxO,WASJ4mE,UAAU58F,UAAUoqC,UAAY,SAAS1sC,EAAQ8mC,GAEhD,GAAI5wC,KAAKy7C,OACT,CACCz7C,KAAK00H,gBAAgBxvH,KAAKwC,MAAMgmB,QAAW1tB,KAAiB,aAAI,GAAK,OACrEA,KAAK60H,MAAM3vH,KAAKwC,MAAMgmB,QAAU1tB,KAAK00H,gBAAgBxvH,KAAKwC,MAAMgmB,QAEhE,IAAIyhB,EAAQnvC,KAAKg2H,qBAAqBplF,GAClCr+B,EAAK48B,EAAM//B,EACXqD,EAAK08B,EAAM9/B,EACXoX,EAAS,KAEb,GAAKzmB,KAAK2tB,KAeV,CAEC,IAAIhG,EAAY3nB,KAAK8jB,OAAO6D,UAE5BlV,EAAKF,GADWoV,EAAUze,YAAcye,EAAU1e,cAElDwd,EAAS,IAAInX,YAAYtP,KAAKymB,OAAOrX,EACpCpP,KAAKymB,OAAOpX,EACZjG,KAAKC,IAAI,EAAGrJ,KAAKymB,OAAOxe,MAAQsK,GAChCnJ,KAAKC,IAAI,EAAGrJ,KAAKymB,OAAO5e,OAAS4K,IAClCzS,KAAK00H,gBAAgBjuG,OAASA,EAC9BzmB,KAAK00H,gBAAgB7hH,aAxBtB,CAEC,IAAIP,EAAQtS,KAAK0zD,QAAQ5hD,UAAUQ,MACnCmU,EAAS,IAAInX,YAAYtP,KAAKymB,OAAOrX,EAAImD,EACxCvS,KAAKymB,OAAOpX,EAAIoD,EAAIzS,KAAKymB,OAAOxe,MAAOjI,KAAKymB,OAAO5e,QACpD7H,KAAK00H,gBAAgBjuG,OAASA,EAC9BzmB,KAAK00H,gBAAgB7hH,SACrBN,GAAMD,EACNC,GAAMvS,KAAK8jB,OAAOhS,UAAUQ,MAC5BG,GAAMH,EACNG,GAAMzS,KAAK8jB,OAAOhS,UAAUQ,MAC5BtS,KAAK8jB,OAAOu4B,UAAU9pC,EAAKvS,KAAK4rE,KAAMn5D,EAAKzS,KAAK6rE,KAiBjD,IAAIxvD,EAAIrc,KAAK60H,MAAMpuG,OACnBzmB,KAAK60H,MAAMpuG,OAAS,IAAInX,YACvBmX,EAAOrX,EAAIqX,EAAOxe,MAAQoU,EAAEpU,MAAQ,EACpCwe,EAAOpX,EAAIoX,EAAO5e,OAASwU,EAAExU,OAAS,EACtCwU,EAAEpU,MAAOoU,EAAExU,QAG4B,UAApC7H,KAAK60H,MAAM3vH,KAAKwC,MAAM6D,YAEzBvL,KAAK60H,MAAMhiH,SAGZ+9B,EAAGxO,YA0BL4mE,UAAU58F,UAAU4pH,qBAAuB,SAASplF,GAEnD,OAAO,IAAIzhC,QAAQyhC,EAAGlO,OAAS1iC,KAAKmyC,OAAQvB,EAAGhO,OAAS5iC,KAAKoyC,SAQ9D42D,UAAU58F,UAAUsqC,QAAU,SAAS5sC,EAAQ8mC,GAE9C,GAAI5wC,KAAKy7C,OACT,CACC,IAAItM,EAAQnvC,KAAKg2H,qBAAqBplF,GAClCr+B,EAAK48B,EAAM//B,EACXqD,EAAK08B,EAAM9/B,EAEf,GAAIjG,KAAKsX,IAAInO,GAAM,GAAKnJ,KAAKsX,IAAIjO,GAAM,EACvC,CACC,GAAKzS,KAAK2tB,KAeV,CAEC,IAAI7kB,EAAI9I,KAAK00H,gBAAgBjuG,OAAOxe,MAChCqK,EAAQtS,KAAK8jB,OAAOhS,UAAUQ,MAClCtS,KAAK8jB,OAAO2kG,OAAOr/G,KAAKC,IAAIrJ,KAAKg6D,SAAU1nD,EAASC,EAAKD,EAASxJ,IAAI,QAftE,IAAK9I,KAAK8jB,OAAOm0F,0BACf3vG,QAAQyM,cAAc/U,KAAK8jB,OAAO6D,WACpC,CACC3nB,KAAK8jB,OAAOu4B,SAAS,EAAG,GACxB9pC,GAAMvS,KAAK0zD,QAAQ5hD,UAAUQ,MAC7BG,GAAMzS,KAAK0zD,QAAQ5hD,UAAUQ,MAC7B,IAAI1B,EAAI5Q,KAAK8jB,OAAOhS,UAAU6c,UAC9B3uB,KAAK8jB,OAAOhS,UAAU8qC,aAAahsC,EAAExB,EAAImD,EAAI3B,EAAEvB,EAAIoD,GAWrDzS,KAAKqmE,SACLz1B,EAAGxO,UAIJpiC,KAAKyO,MAAQ,KACbzO,KAAKy7C,QAAS,IAShButD,UAAU58F,UAAU6iB,QAAU,WAEV,MAAfjvB,KAAK8jB,SAER9jB,KAAK8jB,OAAOyf,eAAevjC,KAAKorG,YAChCprG,KAAK8jB,OAAOyf,eAAevjC,KAAKyrG,gBAChCzrG,KAAK8jB,OAAOiK,WAAWwV,eAAevjC,KAAK6gG,eAC3C7gG,KAAK8jB,OAAOhS,UAAUyxB,eAAevjC,KAAK6gG,eAC1C52F,QAAQs5B,eAAevjC,KAAK8jB,OAAO6D,UAAW,SAAU3nB,KAAK6gG,eAC7D7gG,KAAK8jB,OAAS,MAGK,MAAhB9jB,KAAK0zD,UAER1zD,KAAK0zD,QAAQ7W,oBAAoB78C,MACjCA,KAAK0zD,QAAQzkC,UACbjvB,KAAK0zD,QAAU,MAGY,MAAxB1zD,KAAK00H,kBAER10H,KAAK00H,gBAAgBzlG,UACrBjvB,KAAK00H,gBAAkB,MAGN,MAAd10H,KAAK60H,QAER70H,KAAK60H,MAAM5lG,UACXjvB,KAAK60H,MAAQ,OAIf50H,WAAW+oG,eAAiC,IAAdA,UAA4BA,eAAYpiG,EAyEtEqiG,eAAe78F,UAAU9F,KAAO,KAQhC2iG,eAAe78F,UAAUoJ,KAAO,KAQhCyzF,eAAe78F,UAAUrE,MAAQ,KAQjCkhG,eAAe78F,UAAU0X,OAAS,KAQlCmlF,eAAe78F,UAAU2D,IAAM,KAQ/Bk5F,eAAe78F,UAAU/C,IAAM,KAS/B4/F,eAAe78F,UAAU88F,eAAiB,KAQ1CD,eAAe78F,UAAUi9F,uBAAwB,EASjDJ,eAAe78F,UAAU+8F,WAAa,KAQtCF,eAAe78F,UAAUg9F,UAAY,KAiBrCH,eAAe78F,UAAU4zF,MAAQ,SAAS/uF,EAAO4S,EAAMC,EAAQrF,EAAQ6rG,EAAWC,GAEjF,IAAI54F,EAAQ,GAuBZ,OArBK3xB,KAAK8jB,QAAU9jB,KAAKi2H,cAAchlH,EAAO6S,EAAQD,KACnD7jB,KAAK8jB,QAAU9jB,KAAKi2H,cAAchlH,EAAOwN,EAAQoF,MAE5B,MAAnB7jB,KAAKmpG,aACNnpG,KAAK8jB,SAAuB,GAAZ9jB,KAAKqJ,KAAaihH,GAAatqH,KAAKqJ,OACpDrJ,KAAK8jB,SAAuB,GAAZ9jB,KAAKqJ,KAAakhH,GAAYvqH,KAAKqJ,QAErDsoB,GAAS3xB,KAAKmpG,WAAa,MAGD,MAAvBnpG,KAAKkpG,gBAA4C,MAAlBlpG,KAAKopG,WAAqBppG,KAAKkpG,eAAe/mG,OAAS,IAE3EnC,KAAKk2H,eAAejlH,EAAO4S,EAAMC,EAAQrF,KAItDkT,GAAS3xB,KAAKopG,UAAY,QAKrBz3E,EAAMxvB,OAAS,EAAKwvB,EAAQ,MASrCs3E,eAAe78F,UAAU8pH,eAAiB,SAASjlH,EAAO4S,EAAMC,EAAQrF,GAOvE,IALA,IAAI03G,EAAcllH,EAAMiB,MAAM6M,SAAS+E,GACnCsyG,EAAcnlH,EAAMiB,MAAM6M,SAASN,GACnCksG,GAAW3qH,KAAKqpG,sBAChBgtB,EAAQr2H,KAAKkpG,eAER5pC,EAAI,EAAGA,EAAI+2D,EAAMl0H,OAAQm9D,IAClC,CACC,GAAIt/D,KAAK8jB,QACR9jB,KAAKs2H,UAAUrlH,EAAOmlH,EAAaC,EAAM/2D,IAC1C,CACCqrD,EAAU3qH,KAAKqpG,sBACf,MAEI,IAAKrpG,KAAK8jB,QACd9jB,KAAKs2H,UAAUrlH,EAAOklH,EAAaE,EAAM/2D,IAC1C,CACCqrD,EAAU3qH,KAAKqpG,sBACf,OAIF,OAAOshB,GAUR1hB,eAAe78F,UAAU6pH,cAAgB,SAAShlH,EAAO2S,EAAUC,GAElE,IAAI9b,EAAQkJ,EAAMiB,MAAM6M,SAAS6E,GAEjC,OAAO5jB,KAAKs2H,UAAUrlH,EAAOlJ,EAAO/H,KAAKsG,KAAMtG,KAAKwV,KAAMxV,KAAK+H,QAQhEkhG,eAAe78F,UAAUkqH,UAAY,SAASrlH,EAAOlJ,EAAOzB,EAAMkP,EAAM+gH,GAEvE,OAAa,MAATxuH,IAEE6M,MAAM7M,EAAM0N,UAMT1N,GAASzB,EAJTgC,QAAQ+N,OAAOtO,EAAOzB,EAAMkP,EAAM+gH,KAW5Ct2H,WAAWgpG,oBAA2C,IAAnBA,eAAiCA,oBAAiBriG,EAyErF0iG,gBAAgBl9F,UAAY,IAAIw1B,cAChC0nE,gBAAgBl9F,UAAUH,YAAcq9F,gBAOxCA,gBAAgBl9F,UAAU6E,MAAQ,KAQlCq4F,gBAAgBl9F,UAAUoqH,UAAW,EAOrCltB,gBAAgBl9F,UAAU4oC,SAAU,EAOpCs0D,gBAAgBl9F,UAAUm9F,YAAc,KAOxCD,gBAAgBl9F,UAAUq9F,YAAc,KAOxCH,gBAAgBl9F,UAAUvC,cAAgB,KAQ1Cy/F,gBAAgBl9F,UAAUuH,UAAY,WAErC,OAAO3T,KAAKg1C,SAabs0D,gBAAgBl9F,UAAUupC,WAAa,SAASX,GAE/Ch1C,KAAKg1C,QAAUA,GAUhBs0D,gBAAgBl9F,UAAUqqH,WAAa,WAEtC,OAAOz2H,KAAKw2H,UAQbltB,gBAAgBl9F,UAAUsqH,YAAc,SAAS3uH,GAEhD/H,KAAKw2H,SAAWzuH,GAQjBuhG,gBAAgBl9F,UAAU0yD,SAAW,WAEpC,OAAO9+D,KAAKiR,OAQbq4F,gBAAgBl9F,UAAU6wC,SAAW,SAAShsC,GAE3B,MAAdjR,KAAKiR,QAEIjR,KAAKiR,MAAM8c,WACjBwV,eAAevjC,KAAKupG,aAC1BvpG,KAAKiR,MAAMsyB,eAAevjC,KAAKypG,aAC/BzpG,KAAKiR,MAAMsyB,eAAevjC,KAAK6J,gBAGhC7J,KAAKiR,MAAQA,EAEK,MAAdjR,KAAKiR,QAEIjR,KAAKiR,MAAM8c,WACjB/jB,YAAYC,QAAQogC,YAAarqC,KAAKupG,aAC5CvpG,KAAKiR,MAAMjH,YAAYC,QAAQqhC,WAAYtrC,KAAKypG,aAChDzpG,KAAKiR,MAAMjH,YAAYC,QAAQuhC,aAAcxrC,KAAK6J,iBAapDy/F,gBAAgBl9F,UAAUuqH,UAAY,SAAS3kH,EAAM4xB,GAEpD,OAAO,MAaR0lE,gBAAgBl9F,UAAUo9F,WAAa,SAASruD,GAE/Cn7C,KAAK42H,sBAAsB52H,KAAK62H,mBAAmB17E,EAAajqC,WAajEo4F,gBAAgBl9F,UAAUs9F,WAAa,SAASv/E,EAAOhiB,GAEtD,GAAa,MAATgiB,GAAwB,MAAPhiB,EAOpB,IALA,IAAIie,EAAQ9d,QAAQqgB,aAAa3oB,KAAK8+D,WAAWn3C,UAChD1d,QAAQ04B,WAAWx6B,GAAM8B,QAAQ44B,WAAW16B,IAIpCtD,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CACC,IAAI65D,EAAS1+D,KAAK82H,kBAAkB3sG,EAAMtlB,GAAIoF,QAAQqhC,YAExC,MAAVozB,GAEHA,EAAOkL,SAASz/C,EAAMtlB,GAAIuhB,EAAMhX,EAAGgX,EAAM/W,KAgB7Ci6F,gBAAgBl9F,UAAUu9F,aAAe,SAASx/E,EAAO1D,EAAQ86C,GAEhE,GAAa,MAATp3C,GAA2B,MAAV1D,EAIpB,IAAK,IAAI5hB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CACC,IAAI65D,EAAS1+D,KAAK82H,kBAAkB3sG,EAAMtlB,GAAIoF,QAAQuhC,cAExC,MAAVkzB,GAEHA,EAAOmL,WAAW1/C,EAAMtlB,GAAI4hB,EAAO5hB,GAAI08D,EAAK18D,MAWhDykG,gBAAgBl9F,UAAU0qH,kBAAoB,SAAS9kH,EAAM4xB,GAI5D,IAFA,IAAI1xB,EAAQlS,KAAK8+D,WAAW/wC,WAEb,MAAR/b,GACP,CACC,IAAI0sD,EAAS1+D,KAAK22H,UAAU3kH,EAAM4xB,GAElC,GAAc,MAAV86B,EAEH,OAAOA,EAGR1sD,EAAOE,EAAM+vC,UAAUjwC,GAGxB,OAAO,MAQRs3F,gBAAgBl9F,UAAUyqH,mBAAqB,SAAS3lH,GAIvD,IAFA,IAAIvE,EAAS,GAEJ9H,EAAI,EAAGA,EAAIqM,EAAQ/O,OAAQ0C,IACpC,CACC,IAAI0M,EAASL,EAAQrM,GAErB,GAAI0M,aAAkBg1E,aAErB,MAAO,GAIP55E,EAASA,EAAOswE,OAAOj9E,KAAK+2H,kBAAkBxlH,IAIhD,OAAO5E,GASR28F,gBAAgBl9F,UAAU2qH,kBAAoB,SAASxlH,GAEtD,OAAIA,aAAkBI,cAEd3R,KAAKg3H,mBAAmBzlH,EAAOU,MACrCjS,KAAKg3H,mBAAmBzlH,EAAO/E,WAExB+E,aAAkBE,kBAC1BF,aAAkBC,kBAIVD,aAAkBo1E,iBAC1Bp1E,aAAkBK,cAHX5R,KAAKg3H,mBAAmBzlH,EAAOS,MAQhC,IAQRs3F,gBAAgBl9F,UAAU4qH,mBAAqB,SAAShlH,EAAMrF,GAE7D,OAAO3M,KAAKi3H,yBAAyBjlH,EACpChS,KAAKk3H,uBAAuBllH,EAAMrF,KAQpC28F,gBAAgBl9F,UAAU8qH,uBAAyB,SAASllH,EAAMrF,GAIjE,GAFAA,EAAoB,MAAVA,EAAkBA,EAAS,GAEzB,MAARqF,IAIW,MAFDhS,KAAK22H,UAAU3kH,IAI3BrF,EAAOC,KAAKoF,GAGThS,KAAKy2H,cACT,CACC,IAAIvkH,EAAQlS,KAAK8+D,WAAW/wC,WAC5B/tB,KAAKk3H,uBACJhlH,EAAM+vC,UAAUjwC,GAAOrF,GAI1B,OAAOA,GAQR28F,gBAAgBl9F,UAAU6qH,yBAA2B,SAASjlH,EAAMrF,GAInE,GAFAA,EAAoB,MAAVA,EAAkBA,EAAS,GAEzB,MAARqF,GAAwC,MAAxBhS,KAAK22H,UAAU3kH,GAIlC,IAFA,IAAIE,EAAQlS,KAAK8+D,WAAW/wC,WAEnBlpB,EAAI,EAAGA,EAAIqN,EAAMiB,cAAcnB,GAAOnN,IAC/C,CACC,IAAIoN,EAAQC,EAAMkB,WAAWpB,EAAMnN,GAEN,MAAzB7E,KAAK22H,UAAU1kH,KAElBtF,EAAOC,KAAKqF,GACZjS,KAAKi3H,yBAAyBhlH,EAAOtF,IAKxC,OAAOA,GAQR28F,gBAAgBl9F,UAAUwqH,sBAAwB,SAASzsG,GAK1D,IAAIgtG,EAAS7uH,QAAQ4hB,UAAUC,GAAO,GACtCnqB,KAAKo3H,YAAYD,GAAQ,GACzBn3H,KAAKo3H,YAAYD,EAAOzY,WAAW,IAQpCpV,gBAAgBl9F,UAAUgrH,YAAc,SAASjtG,EAAOktG,GAEvD,GAAIltG,EAAMhoB,OAAS,EACnB,CAEC,IAAI+P,EAAQlS,KAAK8+D,WAAW/wC,WAE5B7b,EAAMuZ,cACN,IAIC,IAFA,IAAIrG,EAAO,KAEFvgB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAE7BslB,EAAMtlB,IAAMqN,EAAM8b,WAAa7D,EAAMtlB,IAAMugB,IAE9CplB,KAAKs3H,cAAcntG,EAAMtlB,GAAIwyH,GAC7BjyG,EAAO+E,EAAMtlB,IAIf7E,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQygC,aAAc,QAASvgB,IAEjE,QAECjY,EAAM0Z,eAUT09E,gBAAgBl9F,UAAUkrH,cAAgB,SAAStlH,EAAMqlH,GAExD,IAAI34D,EAAS1+D,KAAK22H,UAAU3kH,EAAM,EACjC/H,QAAQkgC,WAAalgC,QAAQggC,cAEhB,MAAVy0B,GAEHA,EAAO9iD,QAAQ5J,IASjBs3F,gBAAgBl9F,UAAU6iB,QAAU,WAEnCjvB,KAAKi9C,SAAS,OAGfh9C,WAAWqpG,qBAA6C,IAApBA,gBAAkCA,qBAAkB1iG,EAkDxFgjG,kBAAkBx9F,UAAY,IAAIw1B,cAClCgoE,kBAAkBx9F,UAAUH,YAAc29F,kBAO1CA,kBAAkBx9F,UAAU6E,MAAQ,KAOpC24F,kBAAkBx9F,UAAU4oC,SAAU,EAOtC40D,kBAAkBx9F,UAAUglD,YAAa,EAQzCw4C,kBAAkBx9F,UAAUy9F,YAAa,EAOzCD,kBAAkBx9F,UAAU09F,eAAgB,EAO5CF,kBAAkBx9F,UAAU29F,WAAa,KAOzCH,kBAAkBx9F,UAAUvC,cAAgB,KAQ5C+/F,kBAAkBx9F,UAAUuH,UAAY,WAEvC,OAAO3T,KAAKg1C,SAab40D,kBAAkBx9F,UAAUupC,WAAa,SAAS5tC,GAEjD/H,KAAKg1C,QAAUjtC,GAQhB6hG,kBAAkBx9F,UAAU68D,aAAe,WAE1C,OAAOjpE,KAAKoxD,YAQbw4C,kBAAkBx9F,UAAUmrH,cAAgB,SAASxvH,GAEpD/H,KAAKoxD,WAAarpD,GAQnB6hG,kBAAkBx9F,UAAU49F,aAAe,WAE1C,OAAOhqG,KAAK6pG,YAQbD,kBAAkBx9F,UAAUorH,cAAgB,SAASzvH,GAEpD/H,KAAK6pG,WAAa9hG,GAQnB6hG,kBAAkBx9F,UAAU89F,gBAAkB,WAE7C,OAAOlqG,KAAK8pG,eAQbF,kBAAkBx9F,UAAUqrH,iBAAmB,SAAS1vH,GAEvD/H,KAAK8pG,cAAgB/hG,GAQtB6hG,kBAAkBx9F,UAAU0yD,SAAW,WAEtC,OAAO9+D,KAAKiR,OAQb24F,kBAAkBx9F,UAAU6wC,SAAW,SAAShsC,GAE7B,MAAdjR,KAAKiR,QAERjR,KAAKiR,MAAMsyB,eAAevjC,KAAK+pG,YAC/B/pG,KAAKiR,MAAMsyB,eAAevjC,KAAK6J,gBAGhC7J,KAAKiR,MAAQA,EAEK,MAAdjR,KAAKiR,QAERjR,KAAKiR,MAAMjH,YAAYC,QAAQmhC,UAAWprC,KAAK+pG,YAC/C/pG,KAAKiR,MAAMjH,YAAYC,QAAQwhC,cAAezrC,KAAK6J,iBASrD+/F,kBAAkBx9F,UAAUsrH,kBAAoB,SAASnZ,GAExD,OAAQv+G,KAAK8+D,WAAW0O,WAAW+wC,IASpC3U,kBAAkBx9F,UAAUurH,iBAAmB,SAAS3lH,GAEvD,GAAIhS,KAAKiR,MAAMu8D,WAAWx7D,GAC1B,CACC,IAAItK,EAAQ1H,KAAKiR,MAAMw8D,aAAaz7D,GAEpC,OAAmE,GAA5D1J,QAAQyW,SAASrX,EAAOiG,YAAY6Z,iBAAkB,GAG9D,OAAQxnB,KAAKipE,gBAYd2gC,kBAAkBx9F,UAAU69F,WAAa,SAAS9/E,GAEjD,GAAa,MAATA,EACJ,CACC,IAAIjY,EAAQlS,KAAK8+D,WAAW/wC,WAE5B7b,EAAMuZ,cACN,IAEC,IAAK,IAAI5mB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAE5B7E,KAAK03H,kBAAkBvtG,EAAMtlB,KAEjC7E,KAAK43H,cAAcztG,EAAMtlB,IAI5B,QAECqN,EAAM0Z,eAeTg+E,kBAAkBx9F,UAAUwrH,cAAgB,SAASrZ,GAQpD,IANA,IAAIrsG,EAAQlS,KAAK8+D,WAAW/wC,WACxBpX,EAASzE,EAAM+vC,UAAUs8D,GACzBrrG,EAAahB,EAAMiB,cAAcwD,GACjCurC,EAAM,KAGDr9C,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQC,EAAMkB,WAAWuD,EAAQ9R,GAErC,GAAIoN,GAASssG,IAAav+G,KAAK03H,kBAAkBzlH,IAIrC,OAFXiwC,EAAMhwC,EAAMk5D,YAAYn5D,IAIvB,MAMH,GAAW,MAAPiwC,EACJ,CACC,IAAI21E,EAA8B,MAAVlhH,EAAkB3W,KAAK23H,iBAAiBhhH,GAAU3W,KAAKoxD,WAC/EpxD,KAAK83H,eAAevZ,EAAUr8D,EAAIj6C,MAAOi6C,EAAIr6C,OAAQgwH,KAcvDjuB,kBAAkBx9F,UAAUu9F,aAAe,SAASx/E,GAEnD,GAAa,MAATA,EACJ,CACC,IAAIjY,EAAQlS,KAAK8+D,WAAW/wC,WAE5B7b,EAAMuZ,cACN,IAGC,IAAK,IAAI5mB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC,IAAK7E,KAAK03H,kBAAkBvtG,EAAMtlB,IAClC,CACC,IAAIq9C,EAAMhwC,EAAMk5D,YAAYjhD,EAAMtlB,IAElC,GAAW,MAAPq9C,EACJ,CAKC,IAJA,IAAIr0B,EAAO,IAAIve,YAAY,EAAG,EAAG4yC,EAAIj6C,MAAOi6C,EAAIr6C,QAC5CoV,EAAMkN,EAAMtlB,GACZwgB,EAAUpI,EAEI,MAAXoI,GACP,CACCpI,EAAMoI,EACNA,EAAUnT,EAAM+vC,UAAU58B,GAC1B,IAAIxU,EAAO7Q,KAAKiR,MAAMu8D,WAAWnoD,GAC/BrlB,KAAKiR,MAAMi9D,aAAa7oD,GACxB,IAAI/V,YACNue,EAAK5lB,OAAS4I,EAAI5I,MAClB4lB,EAAKhmB,QAAUgJ,EAAIhJ,OAGpB,IAAIgwH,EAA+B,MAAXxyG,EAAmBrlB,KAAK23H,iBAAiBtyG,GAAWrlB,KAAKoxD,WACjFpxD,KAAK83H,eAAe76G,EAAK4Q,EAAK5lB,MAAO4lB,EAAKhmB,OAAQgwH,KAKtD,QAEC3lH,EAAM0Z,eAgBTg+E,kBAAkBx9F,UAAU0rH,eAAiB,SAASvZ,EAAUz1G,EAAGD,EAAGgvH,GAErE,IAAI3lH,EAAQlS,KAAK8+D,WAAW/wC,WAE5B7b,EAAMuZ,cACN,IAEC,IAAI2lC,EAAapxD,KAAK23H,iBAAiBpZ,GAEvC,IAAKv+G,KAAK03H,kBAAkBnZ,GAC5B,CACC,IAAIr8D,EAAMhwC,EAAMk5D,YAAYmzC,GAEjB,MAAPr8D,IAEE21E,GAAoB31E,EAAIr6C,QAAUgB,IAAQgvH,GAAoB31E,EAAIj6C,OAASa,KAE/Eo5C,EAAMA,EAAIzyC,QAENooH,EAEH31E,EAAIr6C,OAASgB,EAIbq5C,EAAIj6C,MAAQa,EAGboJ,EAAMu5D,YAAY8yC,EAAUr8D,IAK/B,IAAIrxC,EAAO7Q,KAAKiR,MAAMu8D,WAAW+wC,GAC/Bv+G,KAAKiR,MAAMi9D,aAAaqwC,GACxB,IAAIjvG,YACNxG,GAAK+H,EAAI5I,MACTY,GAAKgI,EAAIhJ,OAIT,IAFA,IAAIqL,EAAahB,EAAMiB,cAAcorG,GAE5B15G,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQC,EAAMkB,WAAWmrG,EAAU15G,GACvC7E,KAAK83H,eAAe7lH,EAAOnJ,EAAGD,EAAGuoD,IAGnC,QAECl/C,EAAM0Z,cASRg+E,kBAAkBx9F,UAAU6iB,QAAU,WAErCjvB,KAAKi9C,SAAS,OAGfh9C,WAAW2pG,uBAAiD,IAAtBA,kBAAoCA,uBAAoBhjG,EAmG9FkoB,sBAAsB1iB,UAAUmb,KAAO,KAOvCuH,sBAAsB1iB,UAAUm+F,UAAY,KAO5Cz7E,sBAAsB1iB,UAAUk+F,UAAY,KAO5Cx7E,sBAAsB1iB,UAAUq+F,SAAW,KAO3C37E,sBAAsB1iB,UAAU6iB,QAAU,WAEzCjvB,KAAKunB,KAAKujF,SAAS9qG,KAAKyqG,UACxBzqG,KAAKunB,KAAK0mC,UAAUjuD,KAAKuqG,WACzBvqG,KAAKunB,KAAK0jF,eAAejrG,KAAKsqG,WAC9BtqG,KAAKunB,KAAK8iF,kBAAoBrqG,KAAKoqG,qBACnCpqG,KAAKunB,KAAKtW,MAAM2B,aAAamuF,cAAgB/gG,KAAK0qG,kBAGnDzqG,WAAW6uB,2BAAyD,IAA1BA,sBAAwCA,2BAAwBloB,EA+B1G66C,mBAAmBr1C,UAAU6E,MAAQ,KAOrCwwC,mBAAmBr1C,UAAU8+F,OAAS,KAOtCzpD,mBAAmBr1C,UAAU8O,MAAQ,EAOrCumC,mBAAmBr1C,UAAUsiC,QAAU,WAEtC,OAAqB,GAAd1uC,KAAKkb,OAMbumC,mBAAmBr1C,UAAU01C,UAAY,SAASjwC,EAAOU,EAAIE,EAAI1N,EAAKwsG,GAErExsG,EAAc,MAAPA,GAAeA,EACtBwsG,EAAgC,MAAhBA,GAAwBA,EAExC,IAAIpiE,EAAQnvC,KAAKkrG,OAAOr/F,IAAIgG,EAAMG,MAyBlC,OAvBa,MAATm9B,GAGHA,EAAQ,CAAC/oB,MAAO,IAAIjX,QAAQoD,EAAIE,GAAKZ,MAAOA,GAC5C7R,KAAKkrG,OAAO3+F,IAAIsF,EAAMG,KAAMm9B,GAC5BnvC,KAAKkb,SAEGnW,GAERoqC,EAAM/oB,MAAMhX,GAAKmD,EACjB48B,EAAM/oB,MAAM/W,GAAKoD,IAIjB08B,EAAM/oB,MAAMhX,EAAImD,EAChB48B,EAAM/oB,MAAM/W,EAAIoD,GAGb8+F,GAEHvxG,KAAK+3H,SAASlmH,GAGRs9B,EAAM/oB,OAMdq7B,mBAAmBr1C,UAAU1B,KAAO,SAASqC,GAE5C/M,KAAKkrG,OAAOp+F,MAAMxE,QAAQ2M,KAAKjV,MAAM,SAASsM,EAAK6iC,GAElDnvC,KAAKg4H,eAAe7oF,EAAMt9B,MAAOs9B,EAAM/oB,MAAMhX,EAAG+/B,EAAM/oB,MAAM/W,OAG7DrP,KAAKkrG,OAAOp+F,MAAMxE,QAAQ2M,KAAKjV,MAAM,SAASsM,EAAK6iC,GAElDnvC,KAAKi4H,gBAAgB9oF,EAAMt9B,MAAOs9B,EAAM/oB,MAAMhX,EAAG+/B,EAAM/oB,MAAM/W,EAAGtC,QAOlE00C,mBAAmBr1C,UAAU4rH,eAAiB,SAASnmH,EAAOU,EAAIE,GAEjE,GAAa,MAATZ,EACJ,CACC,IAAIK,EAAQlS,KAAKiR,MAAM8c,WAEvB,GAAI7b,EAAM2vC,SAAShwC,EAAMG,MACzB,CACCH,EAAM0V,KAAK+qF,gBAAgBzgG,GAC3B,IAAIqwC,EAAMhwC,EAAMk5D,YAAYv5D,EAAMG,MAKvB,GAANO,GAAiB,GAANE,GAAmB,MAAPyvC,GAAiBA,EAAIE,UAA2C,MAA/BpiD,KAAKkrG,OAAOr/F,IAAIgG,EAAMG,QAElFH,EAAMzC,GAAKmD,EACXV,EAAMxC,GAAKoD,GAMV,IAFA,IAAIS,EAAahB,EAAMiB,cAActB,EAAMG,MAElCnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/B7E,KAAKg4H,eAAenmH,EAAM0V,KAAKxV,SAASG,EAAMkB,WAAWvB,EAAMG,KAAMnN,IAAK0N,EAAIE,KAQpFgvC,mBAAmBr1C,UAAU6rH,gBAAkB,SAASpmH,EAAOU,EAAIE,EAAI1F,GAEtE,GAAa,MAAT8E,EACJ,CACC,IAAIK,EAAQlS,KAAKiR,MAAM8c,WAInB7b,EAAMC,OAAON,EAAMG,OAEtBH,EAAM0V,KAAK+qF,gBAAgBzgG,GAG5B,IAAIqwC,EAAMliD,KAAKiR,MAAMkxC,gBAAgBtwC,EAAMG,MACvCwgG,EAAS3gG,EAAM0V,KAAKxV,SAASG,EAAM+vC,UAAUpwC,EAAMG,OAG5C,GAANO,GAAiB,GAANE,GAAmB,MAAPyvC,IAAeA,EAAIE,WAC9ClwC,EAAM2vC,SAAShwC,EAAMG,OAAoB,MAAVwgG,IAC/BtgG,EAAM2vC,SAAS2wD,EAAOxgG,OAAwC,MAA/BhS,KAAKkrG,OAAOr/F,IAAIgG,EAAMG,QAErDH,EAAMzC,GAAKmD,EACXV,EAAMxC,GAAKoD,GAGZzS,KAAKiR,MAAM2B,aAAaC,OAAOhB,GAGhB,MAAX9E,GAEHA,EAAQ8E,GAKN,IAFA,IAAIqB,EAAahB,EAAMiB,cAActB,EAAMG,MAElCnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/B7E,KAAKi4H,gBAAgBj4H,KAAKiR,MAAMsW,KAAKxV,SAASG,EAAMkB,WAAWvB,EAAMG,KAAMnN,IAAK0N,EAAIE,EAAI1F,KAQ9F00C,mBAAmBr1C,UAAU2rH,SAAW,SAASlmH,GAKhD,IAHA,IAAIK,EAAQlS,KAAKiR,MAAM8c,WACnBs8C,EAAYn4D,EAAMo4D,aAAaz4D,EAAMG,MAEhCnN,EAAI,EAAGA,EAAIwlE,EAAWxlE,IAC/B,CACC,IAAIgU,EAAIhH,EAAM0V,KAAKxV,SAASG,EAAMq4D,UAAU14D,EAAMG,KAAMnN,IAE/C,MAALgU,GAEH7Y,KAAK8hD,UAAUjpC,EAAG,EAAG,KAKxB5Y,WAAWwhD,wBAAmD,IAAvBA,mBAAqCA,wBAAqB76C,EAsCjG6yD,uBAAuBrtD,UAAUga,MAAQ,KAQzCqzC,uBAAuBrtD,UAAUotD,UAAY,KAO7CC,uBAAuBrtD,UAAUrM,KAAO,KAOxC05D,uBAAuBrtD,UAAUmG,GAAK,KAOtCknD,uBAAuBrtD,UAAUqG,GAAK,KAGtCxS,WAAWw5D,4BAA2D,IAA3BA,uBAAyCA,4BAAyB7yD,EAsH7GukG,eAAe/+F,UAAU6E,MAAQ,KAYjCk6F,eAAe/+F,UAAU8rH,SAAYh4H,SAAc,MAAI,GAAK,GAO5DirG,eAAe/+F,UAAU4oC,SAAU,EAQnCm2D,eAAe/+F,UAAU+rH,kBAAmB,EAO5ChtB,eAAe/+F,UAAUgsH,cAAe,EAOxCjtB,eAAe/+F,UAAUisH,aAAc,EAQvCltB,eAAe/+F,UAAUkpC,eAAgB,EAOzC61D,eAAe/+F,UAAUksH,gBAAiB,EAO1CntB,eAAe/+F,UAAUwlD,MAAQ,KAOjCu5C,eAAe/+F,UAAUs/F,UAAY,KAOrCP,eAAe/+F,UAAUu/F,UAAY,KAQrCR,eAAe/+F,UAAUmsH,cAAe,EAOxCptB,eAAe/+F,UAAUosH,eAAgB,EAOzCrtB,eAAe/+F,UAAU82G,uBAAwB,EAQjD/X,eAAe/+F,UAAUqsH,oBAAqB,EAQ9CttB,eAAe/+F,UAAUssH,eAAgB,EAQzCvtB,eAAe/+F,UAAUusH,cAAe,EAQxCxtB,eAAe/+F,UAAUklC,YAAc,EAOvC65D,eAAe/+F,UAAUwsH,aAAe,QASxCztB,eAAe/+F,UAAUysH,aAAc,EAOvC1tB,eAAe/+F,UAAUiG,MAAQ,KAOjC84F,eAAe/+F,UAAU0sH,WAAY,EAOrC3tB,eAAe/+F,UAAU2sH,iBAAkB,EAQ3C5tB,eAAe/+F,UAAU4sH,eAAiB,EAQ1C7tB,eAAe/+F,UAAU6sH,iBAAmB/4H,SAAS+C,OAOrDkoG,eAAe/+F,UAAUuH,UAAY,WAEpC,OAAO3T,KAAKg1C,SAQbm2D,eAAe/+F,UAAUupC,WAAa,SAAS5tC,GAE9C/H,KAAKg1C,QAAUjtC,GAQhBojG,eAAe/+F,UAAU+/F,eAAiB,WAEzC,OAAOnsG,KAAKo4H,cAYbjtB,eAAe/+F,UAAU8sH,gBAAkB,SAASnxH,GAEnD/H,KAAKo4H,aAAerwH,GAQrBojG,eAAe/+F,UAAU+sH,cAAgB,WAExC,OAAOn5H,KAAKq4H,aAQbltB,eAAe/+F,UAAUgtH,eAAiB,SAASrxH,GAElD/H,KAAKq4H,YAActwH,GAQpBojG,eAAe/+F,UAAUitH,gBAAkB,WAE1C,OAAOr5H,KAAKw4H,eAQbrtB,eAAe/+F,UAAUktH,iBAAmB,SAASvxH,GAEpD/H,KAAKw4H,cAAgBzwH,GAQtBojG,eAAe/+F,UAAUmtH,wBAA0B,WAElD,OAAOv5H,KAAKkjH,uBAQb/X,eAAe/+F,UAAUotH,yBAA2B,SAASzxH,GAE5D/H,KAAKkjH,sBAAwBn7G,GAQ9BojG,eAAe/+F,UAAUqtH,uBAAyB,SAAS7oF,GAE1D,OAAOA,EAAG5N,WAQXmoE,eAAe/+F,UAAUstH,mBAAqB,SAAS1nH,EAAM4+B,GAE5D,OAAO5wC,KAAKiR,MAAMotG,eAAersG,IAsBlCm5F,eAAe/+F,UAAU6nH,kBAAoB,SAAStjF,EAASC,GAE9DA,EAAGxO,WAUJ+oE,eAAe/+F,UAAUqkC,UAAY,SAAS3mC,EAAQ8mC,GAErD,IAAKA,EAAGzO,cAAgBniC,KAAK2T,aAAe3T,KAAKiR,MAAM0C,aACrC,MAAjBi9B,EAAG7+B,aAAuB9H,QAAQk8B,kBAAkByK,EAAGrO,YACxD,CACC,IAAIvwB,EAAOhS,KAAKy5H,uBAAuB7oF,GASvC,GARA5wC,KAAK25H,iBAAmB35H,KAAK05H,mBAAmB1nH,EAAM4+B,GACtD5wC,KAAKgS,KAAO,KAERhS,KAAKq5H,oBAAsBr5H,KAAK25H,kBAEnC35H,KAAKiR,MAAMqtG,mBAAmBtsG,EAAM4+B,EAAGrO,YAGpCviC,KAAKm5H,gBACT,CACC,IAAIjnH,EAAQlS,KAAKiR,MAAMiB,MACnBgwC,EAAMhwC,EAAMk5D,YAAYp5D,GAExBhS,KAAKiR,MAAM25D,cAAc54D,MAAYE,EAAMC,OAAOH,IAAShS,KAAKiR,MAAM8/G,oBAAsB,GAChF,MAAd7uE,EAAI8Q,QAAkB9Q,EAAI8Q,OAAO7wD,OAAS,GAAuC,MAAjC+P,EAAMs4D,YAAYx4D,GAAM,IACvC,MAAlCE,EAAMs4D,YAAYx4D,GAAM,IAAmBhS,KAAKiR,MAAM6pG,oBACrD96G,KAAKiR,MAAMg7F,aAAar7D,EAAGrO,aAAeviC,KAAKiR,MAAMi7F,oBAEtDlsG,KAAKqnB,MAAMrV,EAAM4+B,EAAGlO,OAAQkO,EAAGhO,QAEvB5iC,KAAK25H,mBAEb35H,KAAKgS,KAAOA,GAGbhS,KAAK45H,gBAAiB,EACtB55H,KAAKi0H,kBAAkBhqH,QAAQg7B,WAAY2L,MAU9Cu6D,eAAe/+F,UAAUkrC,eAAiB,WAEzC,IAAI3gC,EAAS3W,KAAKiR,MAAMm+B,mBACpBl9B,EAAQlS,KAAKiR,MAAM8c,WAEnBxS,EAASjT,QAAQ2M,KAAKjV,MAAM,SAASgS,GAExC,OAAyC,MAAlChS,KAAKiR,MAAMsW,KAAKxV,SAASC,IAC/BE,EAAM2vC,SAAS7vC,IACY,MAA3BE,EAAMk5D,YAAYp5D,KACjBE,EAAMk5D,YAAYp5D,GAAMowC,YAG3B,OAAOpiD,KAAKiR,MAAMsW,KAAK+tF,cAAcpjG,EAAMk2E,kBAAkB7sE,EAAQ5E,KAetEw0F,eAAe/+F,UAAUqiC,SAAW,SAASorF,GAE5C,OAAK75H,KAAK25H,kBAAoB35H,KAAKiR,MAAM25D,cAAcivD,GAE/C,CAACA,GAID75H,KAAKiR,MAAMg8G,gBAAgBjtH,KAAKiR,MAAM49B,sBAU/Cs8D,eAAe/+F,UAAUy/F,iBAAmB,SAAS1hF,GAEpD,IAAI1D,EAASzmB,KAAKijB,eAAekH,GAEjC,GAAc,MAAV1D,EACJ,CAKC,GAHAA,EAAOxe,MAAQmB,KAAKC,IAAI,EAAGod,EAAOxe,MAAQ,GAC1Cwe,EAAO5e,OAASuB,KAAKC,IAAI,EAAGod,EAAO5e,OAAS,GAExC4e,EAAOxe,MAAQjI,KAAKsxC,YACxB,CACC,IAAI/+B,EAAKvS,KAAKsxC,YAAc7qB,EAAOxe,MACnCwe,EAAOrX,GAAKmD,EAAK,EACjBkU,EAAOxe,MAAQjI,KAAKsxC,iBAIpB7qB,EAAOrX,EAAIhG,KAAK2c,MAAMU,EAAOrX,GAC7BqX,EAAOxe,MAAQmB,KAAKgZ,KAAKqE,EAAOxe,OAMjC,GAHSjI,KAAKiR,MAAMsW,KAAKoH,UACjB3uB,KAAKiR,MAAMsW,KAAKjV,MAEpBmU,EAAO5e,OAAS7H,KAAKsxC,YACzB,CACC,IAAI7+B,EAAKzS,KAAKsxC,YAAc7qB,EAAO5e,OACnC4e,EAAOpX,GAAKoD,EAAK,EACjBgU,EAAO5e,OAAS7H,KAAKsxC,iBAIrB7qB,EAAOpX,EAAIjG,KAAK2c,MAAMU,EAAOpX,GAC7BoX,EAAO5e,OAASuB,KAAKgZ,KAAKqE,EAAO5e,QAInC,OAAO4e,GAgBR0kF,eAAe/+F,UAAU6W,eAAiB,SAASkH,GAElD,IAAIxd,EAAS,KAEb,GAAa,MAATwd,GAAiBA,EAAMhoB,OAAS,EAInC,IAFA,IAAI+P,EAAQlS,KAAKiR,MAAM8c,WAEdlpB,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC,GAAIqN,EAAM2vC,SAAS13B,EAAMtlB,KAAOqN,EAAMC,OAAOgY,EAAMtlB,IACnD,CACC,IAAIgN,EAAQ7R,KAAKiR,MAAMsW,KAAKxV,SAASoY,EAAMtlB,IAE3C,GAAa,MAATgN,EACJ,CACC,IAAIg8C,EAAOh8C,EAEPK,EAAM2vC,SAAS13B,EAAMtlB,KAAsB,MAAfgN,EAAMQ,OAA4C,MAA3BR,EAAMQ,MAAMghD,cAElExF,EAAOh8C,EAAMQ,MAAMghD,aAGN,MAAV1mD,EAEHA,EAAS2C,YAAYwB,cAAc+8C,GAInClhD,EAAO5H,IAAI8oD,IAOhB,OAAOlhD,GAQRw+F,eAAe/+F,UAAU0tH,mBAAqB,SAASrzG,GAEtD,IAAIpU,EAAQ,IAAIopD,iBAAiBh1C,EAAQ,KAAMzmB,KAAK44H,cA4BpD,OA3BAvmH,EAAMy/C,UAAW,EAEb9xD,KAAK64H,aAERxmH,EAAMic,QAAU3gB,YAAY4lB,mBAC5BlhB,EAAMlL,KAAKnH,KAAKiR,MAAM0W,aAOtBtV,EAAMic,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YAClD5gB,YAAYylB,YAAczlB,YAAY4gB,YACvClc,EAAMlL,KAAKnH,KAAKiR,MAAMa,UAAU+gD,kBAChCxgD,EAAMskC,eAAgB,EAGlBz2C,SAAS6B,SAEZsQ,EAAM4hD,mBAAqB,WAE1B,OAAO,KAKH5hD,GAQR84F,eAAe/+F,UAAUib,MAAQ,SAASrV,EAAM5C,EAAGC,EAAG8a,GAErDnqB,KAAKgS,KAAOA,EACZhS,KAAKs/F,MAAQh3F,QAAQqgB,aAAa3oB,KAAKiR,MAAM0W,UAAWvY,EAAGC,GAC3DrP,KAAKmqB,MAAkB,MAATA,EAAiBA,EAAQnqB,KAAKyuC,SAASzuC,KAAKgS,MAC1DhS,KAAKymB,OAASzmB,KAAKiR,MAAMa,UAAUsuF,UAAUpgG,KAAKmqB,OAClDnqB,KAAK4rG,QAAU5rG,KAAK6rG,iBAAiB7rG,KAAKmqB,OAC1CnqB,KAAKylH,SAAW,IAAIt5G,aACpBnM,KAAKosG,SAAU,EACfpsG,KAAK+5H,UAAY,EAEjB,IAAK,IAAIl1H,EAAI,EAAGA,EAAI7E,KAAKmqB,MAAMhoB,OAAQ0C,IAEtC7E,KAAK+5H,WAAa/5H,KAAKg6H,UAAUh6H,KAAKmqB,MAAMtlB,GAAI7E,KAAKylH,UAGtD,GAAIzlH,KAAKs1C,cACT,CACCt1C,KAAK4xD,MAAQ,IAAIxa,QAAQp3C,KAAKiR,MAAOjR,KAAKs3C,kBAC1C,IAAI3gC,EAAS3W,KAAKiR,MAAMiB,MAAM+vC,UAAUjwC,GACpCioH,EAASj6H,KAAKiR,MAAMiB,MAAMiB,cAAcwD,GAAU,EAGlDguG,EAAY,IAAIx4G,aAChB+tH,EAAOl6H,KAAKiR,MAAMilE,aAAal2E,KAAKiR,MAAMsC,SAASvT,KAAKgS,MAAOhS,KAAKgS,MAExE,IAASnN,EAAI,EAAGA,EAAIq1H,EAAK/3H,OAAQ0C,IACjC,CACC,IAAIgN,EAAQ7R,KAAKiR,MAAMsW,KAAKxV,SAASmoH,EAAKr1H,IAE7B,MAATgN,GAAkB8yG,EAAU94G,IAAIgG,IAEnC8yG,EAAUp4G,IAAIsF,GAAO,GAIvB7R,KAAK4xD,MAAMG,eAAiBzpD,QAAQ2M,KAAKjV,MAAM,SAAS6R,GAEvD,IAAIwJ,EAAIrb,KAAKiR,MAAMiB,MAAM+vC,UAAUpwC,EAAMG,MAEzC,OAAqB,MAAdH,EAAMG,QAAmBhS,KAAKosG,SACpCpsG,KAAKm6H,aAAatoH,EAAMG,OACvBH,EAAMG,OAAShS,KAAKye,QAAU9H,KAAYsjH,IAC1CtV,EAAU94G,IAAIgG,KACC,MAAf7R,KAAKye,QAAkBze,KAAKiR,MAAMiB,MAAMiB,cACzCnT,KAAKye,SAAW,IAAMpD,IAAMrb,KAAKye,QAAU9H,SAU/Cw0F,eAAe/+F,UAAU4tH,UAAY,SAAShoH,EAAMyN,GAEnD,IAAI5N,EAAQ7R,KAAKiR,MAAMsW,KAAKxV,SAASC,GACjCkJ,EAAQ,EAEZ,GAAa,MAATrJ,GAAmC,MAAlB4N,EAAK5T,IAAImG,GAC9B,CACCyN,EAAKlT,IAAIyF,EAAMH,GACfqJ,IAIA,IAFA,IAAIhI,EAAalT,KAAKiR,MAAMiB,MAAMiB,cAAcnB,GAEvCnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/BqW,GAASlb,KAAKg6H,UAAUh6H,KAAKiR,MAAMiB,MAAMkB,WAAWpB,EAAMnN,GAAI4a,GAIhE,OAAOvE,GAQRiwF,eAAe/+F,UAAU+tH,aAAe,SAASnoH,GAEhD,OAAkC,MAA3BhS,KAAKylH,SAAS55G,IAAImG,IAS1Bm5F,eAAe/+F,UAAUguH,kBAAoB,SAASxpF,GAErD,OAAsB,MAAd5wC,KAAK4xD,OAAiB5xD,KAAK4xD,MAAM3Z,kBAAkBrH,EAAGrO,aAS/D4oE,eAAe/+F,UAAUgsC,KAAO,SAASiiF,GAExC,IAAI/nH,EAAStS,KAAc,UAAIA,KAAKiR,MAAMsW,KAAKjV,MAAQ,EAKvD,OAHA+nH,EAAOjrH,EAAIpP,KAAKiR,MAAMmnC,KAAKiiF,EAAOjrH,EAAIkD,GAASA,EAC/C+nH,EAAOhrH,EAAIrP,KAAKiR,MAAMmnC,KAAKiiF,EAAOhrH,EAAIiD,GAASA,EAExC+nH,GASRlvB,eAAe/+F,UAAUw1C,SAAW,SAAShR,GAE5C,IAAIxqB,EAAQ9d,QAAQqgB,aAAa3oB,KAAKiR,MAAM0W,UAAWipB,EAAGlO,OAAQkO,EAAGhO,QAErE,OAAO,IAAIzzB,QAAQiX,EAAMhX,EAAIpP,KAAKs/F,MAAMlwF,EAAIpP,KAAKiR,MAAMumC,MACtDpxB,EAAM/W,EAAIrP,KAAKs/F,MAAMjwF,EAAIrP,KAAKiR,MAAMwmC,QAQtC0zD,eAAe/+F,UAAUm/F,WAAa,SAAS36D,KAO/Cu6D,eAAe/+F,UAAUkuH,WAAa,aAStCnvB,eAAe/+F,UAAUmuH,YAAc,SAASp4H,GAE/C,OAAOiH,KAAK2c,MAAe,IAAT5jB,GAAgB,KAQnCgpG,eAAe/+F,UAAUikH,kBAAoB,SAAS5xG,GAErD,OAAOze,KAAKiR,MAAMiB,MAAM+vC,UAAUjiD,KAAKgS,OAASyM,GAQjD0sF,eAAe/+F,UAAUigG,aAAe,WAEnCrsG,KAAKw6H,mBAAqBx6H,KAAKosG,SAElCpsG,KAAKy6H,mBACLz6H,KAAKw6H,mBAAoB,GAEjBx6H,KAAKg5H,gBAAkBh5H,KAAK+5H,YAAc/5H,KAAKw6H,mBAAqBx6H,KAAKi5H,iBAE5Ej5H,KAAKosG,SAAYpsG,KAAKw6H,oBAE1Bx6H,KAAKw6H,mBAAoB,EACzBx6H,KAAK8rG,iBAAkB,GAGf9rG,KAAK8rG,iBAAiC,MAAd9rG,KAAKqS,QAEtCrS,KAAKqS,MAAQrS,KAAK85H,mBAAmB95H,KAAKymB,UAU5C0kF,eAAe/+F,UAAUoqC,UAAY,SAAS1sC,EAAQ8mC,GAErD,IAAI3/B,EAAQjR,KAAKiR,MAEjB,GAAK2/B,EAAGzO,eAAgBlxB,EAAMimC,aAA4B,MAAbl3C,KAAKgS,MACnC,MAAdhS,KAAKs/F,OAAgC,MAAft/F,KAAKymB,QAAmBzmB,KAAKqrG,WA2H/C,IAAKrrG,KAAKm5H,iBAAmBn5H,KAAKmsG,mBAAqBnsG,KAAKu4H,eAAiB3nF,EAAGzO,eACjE,MAAjByO,EAAG7+B,YAAwC,MAAlB6+B,EAAGjP,eAAyB1wB,EAAMimC,YAC9D,CACC,IAAI9iC,EAASnD,EAAMu6G,uBAAuB56E,GAE5B,MAAVx8B,GAAkBnD,EAAM0C,aAAe1C,EAAM25D,cAAch6B,EAAG5N,aAIhE5uB,EAFGnD,EAAM8c,WAAW5b,OAAOy+B,EAAG5N,WAErBr1B,YAAYmnB,oBAIZnnB,YAAYknB,uBAMT,MAAVzgB,GAAoC,MAAlBw8B,EAAGjP,aAExBiP,EAAGjP,YAAY22B,UAAUlkD,QA/I3B,CAEC,GAAInK,QAAQk8B,kBAAkByK,EAAGrO,YAGhC,YADAviC,KAAKk2C,QAIN,IAAI/G,EAAQnvC,KAAK4hD,SAAShR,GACtB8a,EAAMz6C,EAAMwgD,UAEhB,GAAkB,MAAdzxD,KAAKqS,OAAiBrS,KAAKw6H,mBAAqBpxH,KAAKsX,IAAIyuB,EAAM//B,GAAKs8C,GAAOtiD,KAAKsX,IAAIyuB,EAAM9/B,GAAKq8C,EACnG,CAEuB,MAAlB1rD,KAAK83C,YAER93C,KAAK83C,UAAY,IAAIP,gBAAgBv3C,KAAKiR,MACzCtD,YAAY4nB,kBAAmB,IAGjC,IAAI9lB,EAAQwB,EAAMg7F,aAAar7D,EAAGrO,aAAetxB,EAAMi7F,oBAAsBlsG,KAAKmsG,iBAC9E52D,EAActkC,EAAM8mC,mBAAmBnH,EAAGrO,YAC1CvwB,EAAO4+B,EAAG5N,UACVgV,GAAY,EACZv5B,EAAS,KACbze,KAAKosG,QAAU38F,EAEXwB,EAAM4mC,iBAAmB73C,KAAKm4H,mBAGjC15G,EAASxN,EAAMohB,cAAcryB,KAAKmqB,MAAOymB,EAAGrO,WAAYvwB,EAAMvC,IAG/D,IAAIoC,EAAQZ,EAAMa,UAAUC,SAAS0M,GACjCq5B,GAAY,EAEhB,GAAa,MAATjmC,IAAkBpC,GAASzP,KAAKqwH,kBAAkB5xG,IAE9Cze,KAAKye,QAAUA,IAElBze,KAAKye,OAASA,EACdze,KAAK06H,kBAAkB/sH,YAAY4nB,oBAGpCuiB,GAAY,OAMf,GAFA93C,KAAKye,OAAS,KAEVze,KAAK04H,eAAyB,MAAR1mH,GAAqC,GAArBhS,KAAKmqB,MAAMhoB,QACpD8O,EAAM8c,WAAW8zB,SAAS7vC,IAASf,EAAM84G,kBAAkB/3G,IAI9C,OAFbH,EAAQZ,EAAMa,UAAUC,SAASC,IAGjC,CACC,IACIiK,EAAkB,MADVhL,EAAMsyG,uBAAuB,KAAMvjH,KAAKgS,KAAMA,GAEzDrE,YAAY6nB,YACZ7nB,YAAY2nB,6BACbt1B,KAAK06H,kBAAkBz+G,GACvB67B,GAAY,EAKF,MAATjmC,GAAiBimC,EAEpB93C,KAAK83C,UAAUA,UAAUjmC,GAIzB7R,KAAK83C,UAAUlG,OAGE,MAAd5xC,KAAK4xD,OAAiB5xD,KAAKo6H,kBAAkBxpF,IAEhDzB,EAAQnvC,KAAK4xD,MAAM/sB,KAAK7kC,KAAKymB,OAAQ0oB,EAAOoG,EAAa9lC,GACzDuoC,GAAY,GAIZ7I,EAAQnvC,KAAKiR,MAAM8hD,UAAU5jB,EAAOnvC,KAAKymB,QAAS8uB,GAAa,GAAO,GAGrD,MAAdv1C,KAAK4xD,OAAiB5Z,GAEzBh4C,KAAK4xD,MAAMhgB,OAIR3gC,EAAMg5G,mBAAmBr5E,EAAGrO,cAE3Bn5B,KAAKsX,IAAIyuB,EAAM//B,GAAKhG,KAAKsX,IAAIyuB,EAAM9/B,GAEtC8/B,EAAM9/B,EAAI,EAIV8/B,EAAM//B,EAAI,GAIZpP,KAAKqsG,eAEDrsG,KAAK0rG,WAAav8D,EAAM//B,GAAKpP,KAAK2rG,WAAax8D,EAAM9/B,IAExDrP,KAAK0rG,UAAYv8D,EAAM//B,EACvBpP,KAAK2rG,UAAYx8D,EAAM9/B,EACvBrP,KAAKsrG,iBAIPtrG,KAAKurG,WAAW36D,GAChB5wC,KAAKi0H,kBAAkBhqH,QAAQi7B,WAAY0L,GAK3C3mC,QAAQm4B,QAAQwO,EAAGrO,cAiCrB4oE,eAAe/+F,UAAUk/F,cAAgB,SAASqvB,GAE7C36H,KAAK8rG,kBAAoB6uB,EAEV,MAAd36H,KAAKmqB,QAERnqB,KAAK+rG,0BAA0B/rG,KAAKiR,MAAM49B,qBAAqB,GAC/D7uC,KAAK46H,kBAAkB56H,KAAK0rG,UAAW1rG,KAAK2rG,YAK7C3rG,KAAK66H,sBASP1vB,eAAe/+F,UAAUyuH,mBAAqB,WAE3B,MAAd76H,KAAKqS,OAAiC,MAAhBrS,KAAK4rG,UAE9B5rG,KAAKqS,MAAMoU,OAAS,IAAInX,YAAYlG,KAAK2c,MAAM/lB,KAAK4rG,QAAQx8F,EAAIpP,KAAK0rG,WACnEtiG,KAAK2c,MAAM/lB,KAAK4rG,QAAQv8F,EAAIrP,KAAK2rG,WAAY3rG,KAAK4rG,QAAQ3jG,MAAOjI,KAAK4rG,QAAQ/jG,QAChF7H,KAAKqS,MAAMQ,WASbs4F,eAAe/+F,UAAUwuH,kBAAoB,SAASroH,EAAIE,GAEzD,IAAKzS,KAAKqrG,UACV,CACC,IAAI9nD,EAAS,GAkEb,GAhEqB,MAAjBvjD,KAAKylH,UAERzlH,KAAKylH,SAAS34G,MAAMxE,QAAQ2M,KAAKjV,MAAM,SAASsM,EAAKuF,GAGpD,GAA4C,MAAxC7R,KAAKiR,MAAMsW,KAAKxV,SAASF,EAAMG,MAElCH,EAAMod,cAGP,CAEC,IAAI6rG,EAAYjpH,EAAMpC,QACtB8zC,EAAO32C,KAAK,CAACiF,EAAOipH,IAGD,MAAfjpH,EAAMQ,QAEgC,MAArCR,EAAMQ,MAAM0oH,wBAEflpH,EAAMQ,MAAM0oH,sBAAwBlpH,EAAMQ,MAAMskC,eAGjD9kC,EAAMQ,MAAMskC,eAAgB,EAEV,MAAd9kC,EAAMxD,OAE+B,MAApCwD,EAAMxD,KAAK0sH,wBAEdlpH,EAAMxD,KAAK0sH,sBAAwBlpH,EAAMxD,KAAKsoC,eAG/C9kC,EAAMxD,KAAKsoC,eAAgB,IAKzB32C,KAAKiR,MAAMiB,MAAM2vC,SAAShwC,EAAMG,QAEnCH,EAAMzC,GAAKmD,EACXV,EAAMxC,GAAKoD,EAGNzS,KAAKosG,UAETv6F,EAAM0V,KAAKtW,MAAM2B,aAAaC,OAAOhB,GAAO,GAI5CA,EAAM0V,KAAK4mF,WAAWt8F,EAAMG,MAC5BH,EAAMolF,SAAU,EAGK,MAAjBplF,EAAMsiF,SAAyC,MAAtBtiF,EAAMsiF,QAAQjvF,OAE1C2M,EAAMsiF,QAAQjvF,KAAKwC,MAAM6D,WAAa,iBASvB,GAAjBg4C,EAAOphD,OAEVnC,KAAKk2C,YAGN,CAIC,IAFA,IAAIr9B,EAAI7Y,KAAKiR,MAAMsW,KAAKjV,MAEfzN,EAAI,EAAGA,EAAI0+C,EAAOphD,OAAQ0C,IACnC,CACC,IAAIgN,EAAQ0xC,EAAO1+C,GAAG,GAEtB,GAAI7E,KAAKiR,MAAMiB,MAAMC,OAAON,EAAMG,MAClC,CACC,IAAIQ,EAAWxS,KAAKiR,MAAMkxC,gBAAgBtwC,EAAMG,MAC5CghD,EAAS,GAEb,GAAgB,MAAZxgD,GAAuC,MAAnBA,EAASwgD,OAEhC,IAAK,IAAIsM,EAAI,EAAGA,EAAI9sD,EAASwgD,OAAO7wD,OAAQm9D,IAEjB,MAAtB9sD,EAASwgD,OAAOsM,IAEnBtM,EAAOpmD,KAAK,IAAIuC,QACfqD,EAASwgD,OAAOsM,GAAGlwD,EAAImD,EAAKsG,EAC5BrG,EAASwgD,OAAOsM,GAAGjwD,EAAIoD,EAAKoG,IAKhC,IAAIiL,EAASjS,EAAMqlF,mBACfz4E,EAAS5M,EAAMslF,mBACfjxE,EAAMq9B,EAAO1+C,GAAG,GAAGsgB,eAEvB,GAAc,MAAVrB,GAAmB9jB,KAAKm6H,aAAar2G,EAAO9R,MAQ/CH,EAAM0V,KAAK8rF,yBAAyBxhG,EAAOiS,GAAQ,EAClD9jB,KAAKiR,MAAMqiG,wBAAwBzhG,EAAOiS,GAAQ,QARpD,CACC,IAAIk3G,EAAM90G,EAAI,GACdrU,EAAM4lF,yBAAyB,IAAItoF,QAAQ6rH,EAAI5rH,EAAImD,EAAIyoH,EAAI3rH,EAAIoD,IAAK,GACpEqR,EAAS,KAQV,GAAc,MAAVrF,GAAmBze,KAAKm6H,aAAa17G,EAAOzM,MAQ/CH,EAAM0V,KAAK8rF,yBAAyBxhG,EAAO4M,GAAQ,EAClDze,KAAKiR,MAAMqiG,wBAAwBzhG,EAAO4M,GAAQ,QARpD,CACC,IAAIw8G,EAAM/0G,EAAIA,EAAI/jB,OAAS,GAC3B0P,EAAM4lF,yBAAyB,IAAItoF,QAAQ8rH,EAAI7rH,EAAImD,EAAI0oH,EAAI5rH,EAAIoD,IAAK,GACpEgM,EAAS,KAQV5M,EAAM0V,KAAKurF,aAAajhG,EAAOmhD,EAAQlvC,EAAQrF,GAC/C5M,EAAM0V,KAAKwrF,6BAA6BlhG,EAAOiS,EAAQrF,GACvD5M,EAAM0V,KAAK0rF,sBAAsBphG,GACjCA,EAAMolF,SAAU,EAGXj3F,KAAKosG,SAETv6F,EAAM0V,KAAKtW,MAAM2B,aAAaC,OAAOhB,GAAO,IAK/C7R,KAAKiR,MAAMsW,KAAK6mF,WAChBpuG,KAAKk7H,cAAc33E,GACnBvjD,KAAKm7H,mBAAmB53E,MAU3B4nD,eAAe/+F,UAAU8uH,cAAgB,SAAS33E,GAEjD,IAAK,IAAI1+C,EAAI,EAAGA,EAAI0+C,EAAOphD,OAAQ0C,IACnC,CACC,IAAIyqG,EAAUtvG,KAAKiR,MAAM2vF,sBAAsByqB,WAAW9nE,EAAO1+C,GAAG,GAAGmN,MAExD,MAAXs9F,GAEHA,EAAQz8F,QAAO,KAUlBs4F,eAAe/+F,UAAU+uH,mBAAqB,SAAS53E,GAEtD,IAAK,IAAI1+C,EAAI,EAAGA,EAAI0+C,EAAOphD,OAAQ0C,IAElC0+C,EAAO1+C,GAAG,GAAGqzF,SAAS30C,EAAO1+C,GAAG,KASlCsmG,eAAe/+F,UAAUgvH,QAAU,WAE7Bp7H,KAAKqrG,YAELrrG,KAAK8rG,iBAER9rG,KAAK46H,kBAAkB,EAAG,GAGT,MAAd56H,KAAKqS,QAERrS,KAAKqS,MAAMnN,KAAKwC,MAAM6D,WAAa,UAGlB,MAAdvL,KAAK4xD,OAER5xD,KAAK4xD,MAAMjnD,YAAW,GAGvB3K,KAAKqrG,WAAY,IASnBF,eAAe/+F,UAAUivH,OAAS,WAE7Br7H,KAAKqrG,YAERrrG,KAAKqrG,UAAY,KAEbrrG,KAAK8rG,kBAER9rG,KAAKw6H,mBAAoB,GAGR,MAAdx6H,KAAKqS,QAERrS,KAAKqS,MAAMnN,KAAKwC,MAAM6D,WAAa,WAGlB,MAAdvL,KAAK4xD,OAER5xD,KAAK4xD,MAAMjnD,YAAW,KAUzBwgG,eAAe/+F,UAAUquH,iBAAmB,WAEtB,MAAjBz6H,KAAKylH,WAERzlH,KAAKylH,SAAS34G,MAAMxE,QAAQ2M,KAAKjV,MAAM,SAASsM,EAAKuF,GAGjC,MAAfA,EAAMQ,OAAsD,MAArCR,EAAMQ,MAAM0oH,wBAEtClpH,EAAMQ,MAAMskC,cAAgB9kC,EAAMQ,MAAM0oH,sBACxClpH,EAAMQ,MAAM0oH,sBAAwB,KAGpClpH,EAAMQ,MAAMoU,OAAS,KAEH,MAAd5U,EAAMxD,OAETwD,EAAMxD,KAAKsoC,cAAgB9kC,EAAMxD,KAAK0sH,sBACtClpH,EAAMxD,KAAK0sH,sBAAwB,OAKhB,MAAjBlpH,EAAMsiF,SAAyC,MAAtBtiF,EAAMsiF,QAAQjvF,MACH,UAAvC2M,EAAMsiF,QAAQjvF,KAAKwC,MAAM6D,aAEzBsG,EAAMsiF,QAAQjvF,KAAKwC,MAAM6D,WAAa,IAIvCsG,EAAM0V,KAAK4mF,WAAWt8F,EAAMG,UAI7BhS,KAAKiR,MAAMsW,KAAK6mF,aASlBjD,eAAe/+F,UAAU2/F,0BAA4B,SAAS5hF,EAAOvf,GAEpE,GAAI5K,KAAKs4H,gBAAkB1tH,EAC3B,CACC5K,KAAKs4H,eAAiB1tH,EAEtB,IAAK,IAAI/F,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CACC,IAAImN,EAAOmY,EAAMtlB,GAEbyqG,EAAUtvG,KAAKiR,MAAM2vF,sBAAsByqB,WAAWr5G,GAE3C,MAAXs9F,IAEHA,EAAQgsB,kBAAkB1wH,GAEtBA,GAEH0kG,EAAQz8F,aAgBbs4F,eAAe/+F,UAAUsuH,kBAAoB,SAASz+G,GAE/B,MAAlBjc,KAAK83C,WAER93C,KAAK83C,UAAU4iF,kBAAkBz+G,IASnCkvF,eAAe/+F,UAAUsqC,QAAU,SAAS5sC,EAAQ8mC,GAEnD,IAAKA,EAAGzO,aAOP,GALIniC,KAAK8rG,iBAER9rG,KAAKy6H,mBAGW,MAAbz6H,KAAKgS,MAA8B,MAAdhS,KAAKs/F,OAAgC,MAAdt/F,KAAKqS,QAAiBrS,KAAK8rG,iBACxD,MAAlB9rG,KAAK0rG,WAAuC,MAAlB1rG,KAAK2rG,UA4BvB3rG,KAAKq5H,mBAAqBr5H,KAAK25H,kBAAiC,MAAb35H,KAAKgS,MAEhEhS,KAAKu7H,cAAc3qF,OA7BpB,CACC,IAAI3/B,EAAQjR,KAAKiR,MACbe,EAAO4+B,EAAG5N,UAEd,GAAIhjC,KAAK04H,eAAgC,MAAf14H,KAAKye,QAA0B,MAARzM,GAAgBf,EAAM8c,WAAW8zB,SAAS7vC,IAC1Ff,EAAM84G,kBAAkB/3G,IAASf,EAAMm5G,YAAY,KAAMpqH,KAAKgS,KAAMA,GAEpEf,EAAM+qG,kBAAkBltB,QAAQ9uF,KAAKgS,KAAMA,EAAM4+B,EAAGrO,gBAGrD,CACC,IAAI9yB,EAAQwB,EAAMg7F,aAAar7D,EAAGrO,aAAetxB,EAAMi7F,oBAAsBlsG,KAAKmsG,iBAC9E75F,EAAQrB,EAAMa,UAAUQ,MACxBC,EAAKvS,KAAKu6H,YAAYv6H,KAAK0rG,UAAYp5F,GACvCG,EAAKzS,KAAKu6H,YAAYv6H,KAAK2rG,UAAYr5F,GACvCmM,EAASze,KAAKye,OAEdxN,EAAMy9G,kBAAoBz9G,EAAMq/G,cAAc7xG,EAAQze,KAAKmqB,MAAOymB,EAAGrO,YAExEtxB,EAAM4zG,UAAUpmG,EAAQze,KAAKmqB,MAAO,KAAM5X,EAAIE,GAI9CzS,KAAK02E,UAAU12E,KAAKmqB,MAAO5X,EAAIE,EAAIhD,EAAOzP,KAAKye,OAAQmyB,EAAGrO,aAW1DviC,KAAK45H,gBAER55H,KAAKi0H,kBAAkBhqH,QAAQk7B,SAAUyL,GAG1C5wC,KAAKk2C,SAQNi1D,eAAe/+F,UAAUmvH,cAAgB,SAAS3qF,GAE5C5wC,KAAKiR,MAAMotG,eAAer+G,KAAKgS,OAAUhS,KAAKiR,MAAM+kG,iBAAiB/yE,eAAe2N,IAExF5wC,KAAKiR,MAAMqtG,mBAAmBt+G,KAAKgS,KAAM4+B,EAAGrO,aAS9C4oE,eAAe/+F,UAAU8pC,MAAQ,WAE5Bl2C,KAAK8rG,kBAER9rG,KAAKy6H,mBACLz6H,KAAK+rG,0BAA0B/rG,KAAKiR,MAAM49B,qBAAqB,IAGhE7uC,KAAKw7H,gBACLx7H,KAAKs6H,aAELt6H,KAAK25H,kBAAmB,EACxB35H,KAAKw6H,kBAAoB,KACzBx6H,KAAK8rG,gBAAkB,KACvB9rG,KAAK45H,gBAAiB,EACtB55H,KAAKqrG,UAAY,KACjBrrG,KAAK0rG,UAAY,KACjB1rG,KAAK2rG,UAAY,KACjB3rG,KAAK+5H,UAAY,KACjB/5H,KAAKosG,SAAU,EACfpsG,KAAKylH,SAAW,KAChBzlH,KAAK4rG,QAAU,KACf5rG,KAAKy7H,OAAS,KACdz7H,KAAKye,OAAS,KACdze,KAAKs/F,MAAQ,KACbt/F,KAAKmqB,MAAQ,KACbnqB,KAAKgS,KAAO,MASbm5F,eAAe/+F,UAAUsvH,4BAA8B,SAAS/kH,EAAQwT,EAAOhiB,GAE9E,GAAInI,KAAKiR,MAAM8c,WAAW8zB,SAASlrC,GACnC,CACC,IAAI67F,EAASxyG,KAAKiR,MAAMa,UAAUC,SAAS4E,GAE3C,GAAc,MAAV67F,EACJ,CACC,IAAI/uF,EAAKnb,QAAQqgB,aAAa3oB,KAAKiR,MAAM0W,UACxC1d,QAAQ04B,WAAWx6B,GAAM8B,QAAQ44B,WAAW16B,IACzCsf,EAAQnf,QAAQuX,UAAUvX,QAAQyW,SAASyzF,EAAO9qG,MAAOiG,YAAY2W,iBAAmB,GAE5F,GAAa,GAATmD,EACJ,CACC,IAAI1G,EAAM3X,KAAK2X,KAAK0G,GAChBxG,EAAM7X,KAAK6X,KAAKwG,GAChBtE,EAAK,IAAIhU,QAAQqjG,EAAO7iG,aAAc6iG,EAAO5iG,cACjD6T,EAAKnb,QAAQkb,gBAAgBC,EAAI1C,EAAKE,EAAKkC,GAG5C,OAAQ7a,QAAQoe,SAAS8rF,EAAQ/uF,EAAGrU,EAAGqU,EAAGpU,IAI5C,OAAO,GAQR87F,eAAe/+F,UAAUsqE,UAAY,SAASvsD,EAAO5X,EAAIE,EAAIhD,EAAOgP,EAAQtW,GAEvEsH,IAEH0a,EAAQnqB,KAAKiR,MAAMo7G,kBAAkBliG,IAItC,IAAIxT,EAAS3W,KAAKiR,MAAM8c,WAAWk0B,UAAUjiD,KAAKgS,MAEpC,MAAVyM,GAAkBze,KAAKu5H,2BAC1Bv5H,KAAK07H,4BAA4B/kH,EAAQwT,EAAOhiB,KAEhDsW,EAASze,KAAKiR,MAAMm+B,oBAIrB3/B,EAAQA,IAAUzP,KAAKiR,MAAMi7G,aAAaztG,GAAUze,KAAKiR,MAAMm+B,oBAE/DpvC,KAAKiR,MAAM8c,WAAWtC,cACtB,IAEC,IAAI4iE,EAAU,GAGd,IAAK5+E,GAAmB,MAAVgP,GAAkBze,KAAKy4H,mBACrC,CAIC,IAFA,IAAIh5G,EAAO,IAAItT,aAENtH,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAEjC4a,EAAKlT,IAAI4d,EAAMtlB,IAAI,GAIpB,IAASA,EAAI,EAAGA,EAAIslB,EAAMhoB,OAAQ0C,IAClC,CACC,IAAIonF,EAAMjsF,KAAKiR,MAAMiB,MAAM+vC,UAAU93B,EAAMtlB,IAEhC,MAAPonF,GAAgBxsE,EAAK5T,IAAIogF,KAE5BxsE,EAAKlT,IAAI0/E,GAAK,GACdoC,EAAQzhF,KAAKq/E,KAOhB9hE,EAAQnqB,KAAKiR,MAAMylE,UAAUvsD,EAAO5X,EAAIE,EAAIhD,EAAOgP,EAAQtW,GAG3D,IAAI0mB,EAAO,GAEX,IAAShqB,EAAI,EAAGA,EAAIwpF,EAAQlsF,OAAQ0C,IAE/B7E,KAAK27H,mBAAmBttC,EAAQxpF,KAEnCgqB,EAAKjiB,KAAKyhF,EAAQxpF,IAIpB7E,KAAKiR,MAAM29B,YAAY/f,GAAM,GAE9B,QAEC7uB,KAAKiR,MAAM8c,WAAWnC,YAInBnc,GAEHzP,KAAKiR,MAAMq+B,kBAAkBnlB,GAG1BnqB,KAAKq5H,mBAAqBr5H,KAAK24H,cAElC34H,KAAKiR,MAAMu4G,oBAAoBr/F,EAAM,KASvCghF,eAAe/+F,UAAUuvH,mBAAqB,SAAShlH,GAEtD,IAAI9E,EAAQ7R,KAAKiR,MAAMsW,KAAKxV,SAAS4E,GAErC,OAAgB,MAAT9E,IAAkB7R,KAAKiR,MAAMiB,MAAMC,OAAON,EAAMG,OAAShS,KAAKiR,MAAMiB,MAAM2vC,SAAShwC,EAAMG,QAC/FhS,KAAKiR,MAAM27G,gBAAgB/6G,EAAMG,OAAuD,GAA9ChS,KAAKiR,MAAMiB,MAAMiB,cAActB,EAAMG,OAC/EhS,KAAKiR,MAAMy6G,mBAAmB75G,IAQhCs5F,eAAe/+F,UAAUovH,cAAgB,WAGtB,MAAdx7H,KAAKqS,QAERrS,KAAKqS,MAAM4c,UACXjvB,KAAKqS,MAAQ,MAGI,MAAdrS,KAAK4xD,QAER5xD,KAAK4xD,MAAM3iC,UACXjvB,KAAK4xD,MAAQ,MAIQ,MAAlB5xD,KAAK83C,YAER93C,KAAK83C,UAAU7oB,UACfjvB,KAAK83C,UAAY,OASnBqzD,eAAe/+F,UAAU6iB,QAAU,WAElCjvB,KAAKiR,MAAM4rC,oBAAoB78C,MAC/BA,KAAKiR,MAAMsyB,eAAevjC,KAAKorG,YAEL,MAAtBprG,KAAKwrG,gBAERxrG,KAAKiR,MAAMsyB,eAAevjC,KAAKwrG,eAC/BxrG,KAAKwrG,cAAgB,MAGK,MAAvBxrG,KAAKyrG,iBAERzrG,KAAKiR,MAAM8c,WAAWwV,eAAevjC,KAAKyrG,gBAC1CzrG,KAAKyrG,eAAiB,MAGvBxhG,QAAQs5B,eAAe1iC,SAAU,UAAWb,KAAKgsG,YACjD/hG,QAAQs5B,eAAe1iC,SAAU,QAASb,KAAKgsG,YAE/ChsG,KAAKw7H,gBACLx7H,KAAKs6H,cAGNr6H,WAAWkrG,oBAA2C,IAAnBA,eAAiCA,oBAAiBvkG,EA2GrF0lG,iBAAiBlgG,UAAY,IAAIw1B,cACjC0qE,iBAAiBlgG,UAAUH,YAAcqgG,iBAOzCA,iBAAiBlgG,UAAU6E,MAAQ,KAQnCq7F,iBAAiBlgG,UAAUwvH,yBAA0B,EAOrDtvB,iBAAiBlgG,UAAUyvH,iBAAkB,EAQ7CvvB,iBAAiBlgG,UAAU0vH,YAAa,EAOxCxvB,iBAAiBlgG,UAAU2vH,gBAAiB,EAQ5CzvB,iBAAiBlgG,UAAU4vH,SAAU,EAOrC1vB,iBAAiBlgG,UAAUiwG,gBAAiB,EAO5C/P,iBAAiBlgG,UAAU6vH,cAAe,EAO1C3vB,iBAAiBlgG,UAAU8vH,SAAW,EAOtC5vB,iBAAiBlgG,UAAU4tD,SAAW,IAOtCsyC,iBAAiBlgG,UAAUmG,GAAK,KAOhC+5F,iBAAiBlgG,UAAUqG,GAAK,KAOhC65F,iBAAiBlgG,UAAU+lC,OAAS,EAOpCm6D,iBAAiBlgG,UAAUgmC,OAAS,EAOpCk6D,iBAAiBlgG,UAAU4pC,SAAW,WAErC,OAAOh2C,KAAKy7C,QAA+B,MAArBz7C,KAAK4sG,cAQ5BN,iBAAiBlgG,UAAU+vH,iBAAmB,WAE7C,OAAOn8H,KAAKq8G,gBAQb/P,iBAAiBlgG,UAAUgwH,kBAAoB,SAASr0H,GAEvD/H,KAAKq8G,eAAiBt0G,GAQvBukG,iBAAiBlgG,UAAUugG,eAAiB,WAE3C,OAAO3sG,KAAKi8H,cAQb3vB,iBAAiBlgG,UAAUiwH,gBAAkB,SAASt0H,GAErD/H,KAAKi8H,aAAel0H,GAUrBukG,iBAAiBlgG,UAAUkwH,iBAAmB,SAAS1rF,GAEtD,IAAIzoC,EAAMyoC,EAAGrO,WAEb,OAAQviC,KAAK47H,yBAA4C,MAAjBhrF,EAAG7+B,YACzC9H,QAAQo8B,kBAAkBl+B,IAAU8B,QAAQy8B,cAAcv+B,IAC1D8B,QAAQ08B,YAAYx+B,IAAUnI,KAAK67H,iBAAmB5xH,QAAQg5B,eAAe96B,IAUhFmkG,iBAAiBlgG,UAAUogG,oBAAsB,SAAS57D,GAEzD,OAAO5wC,KAAK87H,YAAc7xH,QAAQk8B,kBAAkByK,EAAGrO,aASxD+pE,iBAAiBlgG,UAAUqkC,UAAY,SAAS3mC,EAAQ8mC,GAEvD5wC,KAAK6sG,eAAiBj8D,GAEjBA,EAAGzO,cAAgBniC,KAAKm8H,qBAAuBn8H,KAAKy7C,QAAUz7C,KAAKs8H,iBAAiB1rF,KAExF5wC,KAAKqnB,MAAMupB,GACX5wC,KAAKu8H,sBAAsB3rF,KAS7B07D,iBAAiBlgG,UAAUib,MAAQ,SAASupB,GAE3C5wC,KAAK4rE,KAAO5rE,KAAKiR,MAAM0W,UAAUM,WACjCjoB,KAAK6rE,KAAO7rE,KAAKiR,MAAM0W,UAAUnc,UAGjCxL,KAAKmyC,OAASvB,EAAGlO,OACjB1iC,KAAKoyC,OAASxB,EAAGhO,OACjB5iC,KAAKuS,GAAK,KACVvS,KAAKyS,GAAK,KAEVzS,KAAK6+G,gBAAiB,GA+BvBvS,iBAAiBlgG,UAAUmwH,sBAAwB,SAAS3rF,GAE3DA,EAAGxO,WAQJkqE,iBAAiBlgG,UAAUoqC,UAAY,SAAS1sC,EAAQ8mC,GAKvD,GAHA5wC,KAAKuS,GAAKq+B,EAAGlO,OAAS1iC,KAAKmyC,OAC3BnyC,KAAKyS,GAAKm+B,EAAGhO,OAAS5iC,KAAKoyC,OAEvBpyC,KAAKy7C,OAEJz7C,KAAK+7H,iBAGJ/7H,KAAKg8H,UAERh8H,KAAKuS,GAAKvS,KAAKiR,MAAMmnC,KAAKp4C,KAAKuS,IAC/BvS,KAAKyS,GAAKzS,KAAKiR,MAAMmnC,KAAKp4C,KAAKyS,KAGhCzS,KAAKiR,MAAMorC,SAASr8C,KAAKuS,GAAKvS,KAAK4rE,IAAK5rE,KAAKyS,GAAKzS,KAAK6rE,MAGxD7rE,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQi+B,IAAK,QAAS0I,SAEnD,GAAI5wC,KAAK6+G,eACd,CACC,IAAIhuG,EAAM7Q,KAAKy7C,OAIfz7C,KAAKy7C,OAASryC,KAAKsX,IAAI1gB,KAAKuS,IAAMvS,KAAKiR,MAAMwgD,WAAaroD,KAAKsX,IAAI1gB,KAAKyS,IAAMzS,KAAKiR,MAAMwgD,WAEpF5gD,GAAO7Q,KAAKy7C,QAEhBz7C,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQg+B,UAAW,QAAS2I,KAI3D5wC,KAAKy7C,QAAUz7C,KAAK6+G,iBAEvBjuE,EAAGxO,WAULkqE,iBAAiBlgG,UAAUsqC,QAAU,SAAS5sC,EAAQ8mC,GAErD,GAAI5wC,KAAKy7C,OACT,CACC,GAAe,MAAXz7C,KAAKuS,IAAyB,MAAXvS,KAAKyS,GAC5B,CAEC,IAAKzS,KAAKiR,MAAMgnG,0BAA4B3vG,QAAQyM,cAAc/U,KAAKiR,MAAM0W,WAC7E,CACC,IAAIrV,EAAQtS,KAAKiR,MAAMa,UAAUQ,MAC7B1B,EAAI5Q,KAAKiR,MAAMa,UAAU6c,UAC7B3uB,KAAKiR,MAAMorC,SAAS,EAAG,GACvBr8C,KAAKq8C,SAASzrC,EAAExB,EAAIpP,KAAKuS,GAAKD,EAAO1B,EAAEvB,EAAIrP,KAAKyS,GAAKH,GAGtDs+B,EAAGxO,UAGJpiC,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQk+B,QAAS,QAASyI,IAG5D5wC,KAAKk2C,SAQNo2D,iBAAiBlgG,UAAU0gG,UAAY,SAAS3kG,GAE/C,IAAIJ,EAAQqB,KAAK2c,MAAM/lB,KAAK4sG,aAAezkG,EAAImK,MAAQ,KAAO,IAEzC,MAAjBtS,KAAKg6D,WAERjyD,EAAQqB,KAAKC,IAAIrJ,KAAKg6D,SAAUjyD,IAGZ,MAAjB/H,KAAKk8H,WAERn0H,EAAQqB,KAAK2G,IAAI/P,KAAKk8H,SAAUn0H,IAG7B/H,KAAKiR,MAAMsW,KAAKjV,OAASvK,IAE5B/H,KAAKiR,MAAMw3G,OAAO1gH,GAClBkC,QAAQm4B,QAAQj6B,KAUlBmkG,iBAAiBlgG,UAAU8pC,MAAQ,WAElCl2C,KAAK6+G,gBAAiB,EACtB7+G,KAAK6sG,eAAiB,KACtB7sG,KAAKy7C,QAAS,EACdz7C,KAAKuS,GAAK,KACVvS,KAAKyS,GAAK,MAQX65F,iBAAiBlgG,UAAUiwC,SAAW,SAAS9pC,EAAIE,GAElDzS,KAAKiR,MAAMa,UAAU8qC,aAAarqC,EAAIE,IAQvC65F,iBAAiBlgG,UAAU6iB,QAAU,WAEpCjvB,KAAKiR,MAAM4rC,oBAAoB78C,MAC/BA,KAAKiR,MAAMsyB,eAAevjC,KAAKusG,qBAC/BvsG,KAAKiR,MAAMsyB,eAAevjC,KAAKysG,gBAC/BxiG,QAAQs5B,eAAe1iC,SAAU,UAAWb,KAAKk8C,kBAGlDj8C,WAAWqsG,sBAA+C,IAArBA,iBAAmCA,sBAAmB1lG,EAsC3FmmG,mBAAmB3gG,UAAY,IAAI4sC,YACnC+zD,mBAAmB3gG,UAAUH,YAAc8gG,mBAO3CA,mBAAmB3gG,UAAU6E,MAAQ,KAQrC87F,mBAAmB3gG,UAAUowH,eAAgB,EAQ7CzvB,mBAAmB3gG,UAAUqwH,4BAA6B,EAO1D1vB,mBAAmB3gG,UAAUswH,SAAW,KAOxC3vB,mBAAmB3gG,UAAUuwH,SAAW,KAOxC5vB,mBAAmB3gG,UAAUwwH,QAAU,KAOvC7vB,mBAAmB3gG,UAAUywH,QAAU,KAOvC9vB,mBAAmB3gG,UAAUjF,KAAO,WAGnC6xC,YAAY5sC,UAAUjF,KAAKiE,MAAMpL,MAIjCiK,QAAQq6B,oBAAoBtkC,KAAKitB,IAAK3kB,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEjEnI,KAAKiR,MAAMyqF,eAAe9pD,YAU5Bm7D,mBAAmB3gG,UAAU0wH,gBAAkB,SAASlsF,GAEvD,OAAO5wC,KAAKw8H,eASbzvB,mBAAmB3gG,UAAUqkC,UAAY,SAAS3mC,EAAQ8mC,GAErD5wC,KAAK2T,cAAgB1J,QAAQk8B,kBAAkByK,EAAGrO,cAGrDviC,KAAKm5C,WACLn5C,KAAK08H,SAAW9rF,EAAG9N,YACnB9iC,KAAK28H,SAAW/rF,EAAG7N,YACnB/iC,KAAK48H,QAAU3yH,QAAQg9B,aAAa2J,EAAGrO,YAAYq6F,QACnD58H,KAAK68H,QAAU5yH,QAAQg9B,aAAa2J,EAAGrO,YAAYs6F,QACnD78H,KAAK+8H,aAAe/8H,KAAKijC,eAAe2N,GACxC5wC,KAAKgtG,aAAc,IASrBD,mBAAmB3gG,UAAUoqC,UAAY,SAAS1sC,EAAQ8mC,GAGrD5wC,KAAKgtG,aAA+B,MAAhBhtG,KAAK48H,SAAmC,MAAhB58H,KAAK68H,UAEhDzzH,KAAKsX,IAAIzW,QAAQg9B,aAAa2J,EAAGrO,YAAYq6F,QAAU58H,KAAK48H,SAAW58H,KAAKiR,MAAMwgD,WACrFroD,KAAKsX,IAAIzW,QAAQg9B,aAAa2J,EAAGrO,YAAYs6F,QAAU78H,KAAK68H,SAAW78H,KAAKiR,MAAMwgD,aAElFzxD,KAAKgtG,aAAc,IAWtBD,mBAAmB3gG,UAAUsqC,QAAU,SAAS5sC,EAAQ8mC,GAEvD,GAAI5wC,KAAK+8H,cAAgB/8H,KAAKgtG,aAAgC,MAAjBhtG,KAAK08H,UAAqC,MAAjB18H,KAAK28H,SAC3E,CACC,IAAI3qH,EAAOhS,KAAKg9H,qBAAqBpsF,GAGjC5wC,KAAKiR,MAAM0C,aAAe3T,KAAK88H,gBAAgBlsF,IAC1C,MAAR5+B,IAAiBhS,KAAKiR,MAAMotG,eAAersG,GAE3ChS,KAAKiR,MAAMwsG,iBAAiBzrG,GAEpBhS,KAAKy8H,4BAAsC,MAARzqH,GAE3ChS,KAAKiR,MAAMgH,iBAIZjY,KAAKiR,MAAMyqF,eAAe9pD,OAI1B,IAAIlpB,EAASpgB,QAAQigB,kBACrBvoB,KAAK4I,MAAMgoC,EAAGlO,OAASha,EAAOtZ,EAAI,EAAGwhC,EAAGhO,OAASla,EAAOrZ,EAAI,EAAG2C,EAAM4+B,EAAGrO,YACxEqO,EAAGxO,UAGJpiC,KAAK+8H,cAAe,EACpB/8H,KAAKgtG,aAAc,GAQpBD,mBAAmB3gG,UAAU4wH,qBAAuB,SAASpsF,GAE5D,OAAOA,EAAG5N,WAQX+pE,mBAAmB3gG,UAAU6iB,QAAU,WAEtCjvB,KAAKiR,MAAM4rC,oBAAoB78C,MAC/BA,KAAKiR,MAAMsyB,eAAevjC,KAAKysG,gBAG/BzzD,YAAY5sC,UAAU6iB,QAAQ7jB,MAAMpL,OAGrCC,WAAW8sG,wBAAmD,IAAvBA,mBAAqCA,wBAAqBnmG,EAgEjG0B,QAAQoX,OAAOutF,aAAcrrE,eAO7BqrE,aAAa7gG,UAAU6E,MAAQ,KAO/Bg8F,aAAa7gG,UAAU4oC,SAAU,EAUjCi4D,aAAa7gG,UAAU+a,QAAUxZ,YAAYmlB,gBAO7Cm6E,aAAa7gG,UAAU6wH,gBAAiB,EAOxChwB,aAAa7gG,UAAU8gG,WAAa,KAOpCD,aAAa7gG,UAAU+gG,aAAe,KAOtCF,aAAa7gG,UAAU2yG,aAAe,KAOtC9R,aAAa7gG,UAAU8wH,WAAa,KAOpCjwB,aAAa7gG,UAAU4yG,YAAc,KAYrC/R,aAAa7gG,UAAUupC,WAAa,SAASX,GAE5Ch1C,KAAKg1C,QAAUA,GAShBi4D,aAAa7gG,UAAUuH,UAAY,WAElC,OAAO3T,KAAKg1C,SAQbi4D,aAAa7gG,UAAU+wH,WAAa,SAASh2G,GAE5CnnB,KAAKmnB,QAAUA,GAQhB8lF,aAAa7gG,UAAUgxH,WAAa,WAEnC,OAAOp9H,KAAKmnB,SAQb8lF,aAAa7gG,UAAUixH,kBAAoB,SAASroF,GAEnDh1C,KAAKi9H,eAAiBjoF,GAQvBi4D,aAAa7gG,UAAUkxH,iBAAmB,WAEzC,OAAOt9H,KAAKi9H,gBAQbhwB,aAAa7gG,UAAUmxH,cAAgB,WAEtC,OAA0B,MAAnBv9H,KAAKk9H,YAQbjwB,aAAa7gG,UAAUoxH,cAAgB,WAEtC,OAAOx9H,KAAKk9H,YAQbjwB,aAAa7gG,UAAUqxH,eAAiB,WAEvC,OAAOz9H,KAAKg/G,aAQb/R,aAAa7gG,UAAU8pC,MAAQ,WAE9Bl2C,KAAKk9H,WAAa,KAEM,MAApBl9H,KAAKg/G,cAERh/G,KAAKg/G,YAAc,KACnBh/G,KAAK09H,WAcPzwB,aAAa7gG,UAAUuxH,QAAU,SAAS/sF,GAEzC,IAAI/+B,EAAQ,KAQZ,OANI7R,KAAK2T,cAER9B,EAAQ7R,KAAK+R,SAAS6+B,GACtB5wC,KAAK49H,gBAAgB/rH,EAAO++B,IAGtB/+B,GAQRo7F,aAAa7gG,UAAUwxH,gBAAkB,SAAS/rH,EAAO++B,EAAI30B,GAE5D,IAAI0uG,EAAoB,MAAT94G,GAAiB7R,KAAK69H,aAAahsH,GAClDoK,EAAkB,MAATA,EAAiBA,EAAQjc,KAAK89H,eAAeltF,EAAGrO,WAAY1wB,EAAO84G,GAI3E3qH,KAAKk9H,WAFFvS,EAEe94G,EAIA,KAGfA,GAAS7R,KAAKg/G,aAAe/iG,GAASjc,KAAK++G,eAE9C/+G,KAAK++G,aAAe9iG,EAEP,MAATpK,GAAsC,MAArB7R,KAAK++G,cAEzB/+G,KAAKg/G,YAAcntG,EACnB7R,KAAKi/G,QAEuB,MAApBj/G,KAAKg/G,cAEbh/G,KAAKg/G,YAAc,KACnBh/G,KAAK09H,YAURzwB,aAAa7gG,UAAU2xH,SAAW,SAAS/rH,EAAMiK,GAEhD,IAAIpK,EAAQ7R,KAAKiR,MAAMa,UAAUC,SAASC,GAE7B,MAATH,IAEH7R,KAAK++G,aAAyB,MAAT9iG,EAAiBA,EAAQjc,KAAKktG,WACnDltG,KAAKg/G,YAAcntG,EACnB7R,KAAKi/G,SASPhS,aAAa7gG,UAAU6yG,KAAO,WAE7Bj/G,KAAK83C,UAAU4iF,kBAAkB16H,KAAK++G,cACtC/+G,KAAK83C,UAAUA,UAAU93C,KAAKg/G,aAC9Bh/G,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQq/B,KAAM,QAAStpC,KAAKg/G,eAQ9D/R,aAAa7gG,UAAUsxH,OAAS,WAE/B19H,KAAKi/G,QAUNhS,aAAa7gG,UAAUyxH,aAAe,SAAShsH,GAE9C,OAAO,GASRo7F,aAAa7gG,UAAU0xH,eAAiB,SAAS31H,EAAK0J,EAAO84G,GAE5D,OAAO,EAAY3qH,KAAKktG,WAAaltG,KAAKmtG,cAS3CF,aAAa7gG,UAAU2F,SAAW,SAAS6+B,GAE1C,IAAIrpB,EAAOvnB,KAAKiR,MAAMa,UAClBE,EAAOhS,KAAKgjC,QAAQ4N,GACpB/+B,EAAQ7R,KAAKg+H,eAAez2G,EAAKxV,SAASC,IAE9C,OAAiB,MAATH,GAAiB7R,KAAK2mB,WAAW9U,EAAO++B,GAAO/+B,EAAQ,MAShEo7F,aAAa7gG,UAAU42B,QAAU,SAAS4N,GAEzC,OAAOA,EAAG5N,WASXiqE,aAAa7gG,UAAU4xH,eAAiB,SAASnsH,GAEhD,OAAOA,GAURo7F,aAAa7gG,UAAUua,WAAa,SAAS9U,EAAO++B,GAEnD,OAAI5wC,KAAKi9H,gBAED30H,QAAQ4e,kBAAkBrV,EAAO++B,EAAG9N,YAAa8N,EAAG7N,YAC1D/iC,KAAKmnB,QAASxZ,YAAYolB,iBAC1BplB,YAAYqlB,mBAWfi6E,aAAa7gG,UAAU6iB,QAAU,WAEhCjvB,KAAKiR,MAAMa,UAAUyxB,eAAevjC,KAAK0tG,cACzC1tG,KAAKiR,MAAM8c,WAAWwV,eAAevjC,KAAK0tG,cAC1C1tG,KAAK83C,UAAU7oB,WAGhBhvB,WAAWgtG,kBAAuC,IAAjBA,aAA+BA,kBAAermG,EAwD/E0B,QAAQoX,OAAO0tF,wBAAyBxrE,eAOxCwrE,wBAAwBhhG,UAAU6E,MAAQ,KAO1Cm8F,wBAAwBhhG,UAAU4oC,SAAU,EAO5Co4D,wBAAwBhhG,UAAUq/F,eAAiB,KAOnD2B,wBAAwBhhG,UAAU6xH,YAAc,IAOhD7wB,wBAAwBhhG,UAAUihG,SAAW,KAO7CD,wBAAwBhhG,UAAUuH,UAAY,WAE7C,OAAO3T,KAAKg1C,SAQbo4D,wBAAwBhhG,UAAUupC,WAAa,SAAS5tC,GAEvD/H,KAAKg1C,QAAUjtC,GAQhBqlG,wBAAwBhhG,UAAUi/G,WAAa,SAASr5G,GAEvD,OAAOhS,KAAKqtG,SAASxhG,IAAImG,IAQ1Bo7F,wBAAwBhhG,UAAU8pC,MAAQ,WAEzCl2C,KAAKqtG,SAASvgG,OAAM,SAASR,EAAKgjG,GAEjCA,EAAQp5D,MAAM9qC,MAAMkkG,OAStBlC,wBAAwBhhG,UAAUkhG,QAAU,WAG3C,IAAI4wB,EAAcl+H,KAAKqtG,SACvBrtG,KAAKqtG,SAAW,IAAIlhG,aAKpB,IAFA,IAAI0E,EAAM7Q,KAAKiR,MAAM49B,oBAEZhqC,EAAI,EAAGA,EAAIgM,EAAI1O,OAAQ0C,IAChC,CACC,IAAIgN,EAAQ7R,KAAKiR,MAAMsW,KAAKxV,SAASlB,EAAIhM,IAEzC,GAAa,MAATgN,EACJ,CACC,IAAIy9F,EAAU4uB,EAAYzxH,OAAOoE,EAAIhM,IAEtB,MAAXyqG,IAECA,EAAQz9F,OAASA,GAEpBy9F,EAAQrgF,UACRqgF,EAAU,MAEDtvG,KAAKm+H,gBAAgB7uB,KAEP,MAAnBA,EAAQhC,SAEXgC,EAAQhC,UAGTgC,EAAQz8F,WAIK,MAAXy8F,IAEHA,EAAUtvG,KAAKiR,MAAMmhH,cAAcvgH,GACnC7R,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQghC,IAAK,QAASp5B,KAGzC,MAAXy9F,GAEHtvG,KAAKqtG,SAAS9gG,IAAIsE,EAAIhM,GAAIyqG,IAM7B4uB,EAAYpxH,MAAMxE,QAAQ2M,KAAKjV,MAAM,SAASsM,EAAKgjG,GAElDtvG,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQihC,OAAQ,QAASokE,EAAQz9F,QAClEy9F,EAAQrgF,eASVm+E,wBAAwBhhG,UAAU+xH,gBAAkB,SAAS7uB,GAE5D,OAAwB,MAAjBA,EAAQ7gG,OAQhB2+F,wBAAwBhhG,UAAUy0F,cAAgB,SAAShvF,GAE1D,IAAIy9F,EAAUtvG,KAAKqtG,SAAS5gG,OAAOoF,EAAMG,MAEzC,GAAe,MAAXs9F,EACJ,CAEC,IAAI7gG,EAAQ6gG,EAAQ7gG,MAChBW,EAAIkgG,EAAQn9D,OACZ9iC,EAAIigG,EAAQl9D,OAEhBk9D,EAAQrgF,UAGO,OAFfqgF,EAAUtvG,KAAKiR,MAAMmhH,cAAcvgH,MAIlC7R,KAAKqtG,SAAS9gG,IAAIsF,EAAMG,KAAMs9F,GAEjB,MAAT7gG,GAAsB,MAALW,GAAkB,MAALC,GAEjCigG,EAAQjoF,MAAMjY,EAAGC,EAAGZ,MAWxB2+F,wBAAwBhhG,UAAUqkC,UAAY,SAAS3mC,EAAQ8mC,GAE9D,GAAI5wC,KAAKiR,MAAM0C,aAAe3T,KAAK2T,YACnC,CACC,IAAI8vB,EAAO,CAAC35B,EAAQ8mC,GAEpB5wC,KAAKqtG,SAASvgG,OAAM,SAASR,EAAKgjG,GAEjCA,EAAQ7+D,UAAUrlC,MAAMkkG,EAAS7rE,QAUpC2pE,wBAAwBhhG,UAAUoqC,UAAY,SAAS1sC,EAAQ8mC,GAE9D,GAAI5wC,KAAKiR,MAAM0C,aAAe3T,KAAK2T,YACnC,CACC,IAAI8vB,EAAO,CAAC35B,EAAQ8mC,GAEpB5wC,KAAKqtG,SAASvgG,OAAM,SAASR,EAAKgjG,GAEjCA,EAAQ94D,UAAUprC,MAAMkkG,EAAS7rE,QAUpC2pE,wBAAwBhhG,UAAUsqC,QAAU,SAAS5sC,EAAQ8mC,GAE5D,GAAI5wC,KAAKiR,MAAM0C,aAAe3T,KAAK2T,YACnC,CACC,IAAI8vB,EAAO,CAAC35B,EAAQ8mC,GAEpB5wC,KAAKqtG,SAASvgG,OAAM,SAASR,EAAKgjG,GAEjCA,EAAQ54D,QAAQtrC,MAAMkkG,EAAS7rE,QAUlC2pE,wBAAwBhhG,UAAU6iB,QAAU,WAE3CjvB,KAAKiR,MAAM4rC,oBAAoB78C,MAEJ,MAAvBA,KAAKyrG,iBAERzrG,KAAKiR,MAAMs8F,oBAAoBhqE,eAAevjC,KAAKyrG,gBACnDzrG,KAAKiR,MAAM8c,WAAWwV,eAAevjC,KAAKyrG,gBAC1CzrG,KAAKiR,MAAMa,UAAUyxB,eAAevjC,KAAKyrG,gBACzCzrG,KAAKyrG,eAAiB,OAIxBxrG,WAAWmtG,6BAA6D,IAA5BA,wBAA0CA,6BAA0BxmG,EAyLhH0B,QAAQoX,OAAO8tF,oBAAqB5rE,eAOpC4rE,oBAAoBphG,UAAU6E,MAAQ,KAStCu8F,oBAAoBphG,UAAUusC,eAAgB,EAU9C60D,oBAAoBphG,UAAUgyH,eAAgB,EAS9C5wB,oBAAoBphG,UAAUiyH,cAAe,EAQ7C7wB,oBAAoBphG,UAAUkyH,aAAe,KAQ7C9wB,oBAAoBphG,UAAUmyH,oBAAqB,EAOnD/wB,oBAAoBphG,UAAU4oC,SAAU,EAOxCw4D,oBAAoBphG,UAAUmoC,QAAS,EAYvCi5D,oBAAoBphG,UAAUoyH,cAAe,EAO7ChxB,oBAAoBphG,UAAU0yG,OAAS,KAQvCtR,oBAAoBphG,UAAUqyH,kBAAoB,KAOlDjxB,oBAAoBphG,UAAUulB,MAAQ,KAQtC67E,oBAAoBphG,UAAUsyH,kBAAmB,EASjDlxB,oBAAoBphG,UAAUuyH,iBAAkB,EAQhDnxB,oBAAoBphG,UAAUkzF,MAAQ,KAUtCkO,oBAAoBphG,UAAUwyH,kBAAoB,IAAIzvH,QAAQ,EAAGxB,YAAY8kB,yBAQ7E+6E,oBAAoBphG,UAAUoH,UAAY,KAO1Cg6F,oBAAoBphG,UAAU2wC,cAAgB,KAO9CywD,oBAAoBphG,UAAUyyH,aAAe,KAQ7CrxB,oBAAoBphG,UAAU0yH,iBAAmB,EASjDtxB,oBAAoBphG,UAAU2yH,gBAAkB7+H,SAAS4C,OASzD0qG,oBAAoBphG,UAAU4yH,gBAAiB,EAQ/CxxB,oBAAoBphG,UAAU8hG,aAAc,EAO5CV,oBAAoBphG,UAAUgI,OAAS,KAQvCo5F,oBAAoBphG,UAAU6yH,oBAAqB,EAQnDzxB,oBAAoBphG,UAAUuH,UAAY,WAEzC,OAAO3T,KAAKg1C,SAabw4D,oBAAoBphG,UAAUupC,WAAa,SAASX,GAEnDh1C,KAAKg1C,QAAUA,GAiBhBw4D,oBAAoBphG,UAAU8yH,eAAiB,SAASr7G,EAAMC,EAAQrF,EAAQtW,EAAKmwC,GAElF,OAAOt4C,KAAKi/H,oBAAsBn7G,GAAUrF,GAY7C+uF,oBAAoBphG,UAAU+yH,eAAiB,SAASh3H,GAEvD,OAAOnI,KAAKw+H,cAQbhxB,oBAAoBphG,UAAUgzH,gBAAkB,SAASr3H,GAExD/H,KAAKw+H,aAAez2H,GAQrBylG,oBAAoBphG,UAAU2wF,YAAc,WAG3C,IAAI1qF,EAASrS,KAAKkuG,aAAiC,MAAlBluG,KAAKwT,UACrCxT,KAAKiR,MAAM2B,aAAamqF,YAAY/8F,KAAKwT,WACzC,IAAIq+C,WAAW,GAAIlkD,YAAY8nB,eAShC,OARApjB,EAAMic,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YAClD5gB,YAAYylB,YAAczlB,YAAY4gB,YACvClc,EAAMC,MAAQtS,KAAKiR,MAAMsW,KAAKjV,MAC9BD,EAAMskC,eAAgB,EACtBtkC,EAAMy/C,UAAW,EACjBz/C,EAAMlL,KAAKnH,KAAKiR,MAAMa,UAAU+gD,kBAChC5oD,QAAQ06B,oBAAoBtyB,EAAMnN,KAAMlF,KAAKiR,MAAO,MAE7CoB,GAURm7F,oBAAoBphG,UAAUjF,KAAO,WAEpCnH,KAAKiR,MAAMgrC,iBAAiBj8C,MAC5BA,KAAK8+G,OAAS9+G,KAAKo7D,eACnBp7D,KAAKy+H,kBAAoB,IAAIhxB,oBAAoBztG,KAAKiR,OAGtDjR,KAAK+8C,cAAgBz0C,QAAQ2M,KAAKjV,MAAM,SAAS8J,GAE1B,MAAlB9J,KAAKq/H,YAERr/H,KAAKq/H,UAAYr/H,KAAKiR,MAAMa,UAAUC,SAAS/R,KAAKq/H,UAAUrtH,OAGzC,MAAlBhS,KAAKq/H,WAERr/H,KAAKs/H,YAAYt/H,KAAKu/H,MAAOv/H,KAAKq/H,WAClCr/H,KAAKy+H,kBAAkBvoF,SAEE,MAAjBl2C,KAAKwM,UAAoE,MAAhDxM,KAAKiR,MAAMsW,KAAKxV,SAAS/R,KAAKwM,SAASwF,OAExEhS,KAAKk2C,WAIPl2C,KAAKiR,MAAM8c,WAAW/jB,YAAYC,QAAQugC,OAAQxqC,KAAK+8C,eACvD/8C,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ2gC,MAAO5qC,KAAK+8C,eACrD/8C,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ4gC,UAAW7qC,KAAK+8C,eACzD/8C,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ6gC,oBAAqB9qC,KAAK+8C,eAGnE/8C,KAAK6+H,aAAev2H,QAAQ2M,KAAKjV,MAAM,SAAS8J,GAE/C9J,KAAKk2C,WAGNl2C,KAAKiR,MAAMjH,YAAYC,QAAQ0iC,cAAe3sC,KAAK6+H,cACnD7+H,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ+gC,KAAMhrC,KAAK6+H,cACpD7+H,KAAKiR,MAAMa,UAAU9H,YAAYC,QAAQ8gC,GAAI/qC,KAAK6+H,eASnDrxB,oBAAoBphG,UAAUozH,kBAAoB,SAASxtH,GAE1D,OAAO,GAQRw7F,oBAAoBphG,UAAUgvD,aAAe,WAE5C,IAAI0jD,EAAS,IAAI7R,aAAajtG,KAAKiR,OAsGnC,OArGA6tG,EAAOme,gBAAiB,EAIxBne,EAAO97E,QAAU16B,QAAQ2M,KAAKjV,MAAM,SAAS4wC,GAE5C,IAAI5+B,EAAOi7F,aAAa7gG,UAAU42B,QAAQ53B,MAAM0zG,EAAQzzG,WAUxD,GATArL,KAAK2xB,MAAQ,KAGD,MAAR3f,GAAqC,MAArBhS,KAAKm1C,eAExBnjC,EAAOhS,KAAKiR,MAAM8kC,UAAU/1C,KAAKm1C,aAAa/lC,EAAGpP,KAAKm1C,aAAa9lC,IAIxD,MAAR2C,IAAiBhS,KAAKiR,MAAM84G,kBAAkB/3G,GAClD,CACC,IAAI2E,EAAS3W,KAAKiR,MAAM8c,WAAWk0B,UAAUjwC,GAEzChS,KAAKiR,MAAM8c,WAAW8zB,SAASlrC,IAAW3W,KAAKiR,MAAM84G,kBAAkBpzG,KAE1E3E,EAAO2E,GA0CT,OAtCK3W,KAAKiR,MAAMu8D,WAAWx7D,IAA8B,MAArBhS,KAAKm1C,cACxCn1C,KAAKiR,MAAMs/G,oBAAoBv+G,EAAMhS,KAAKm1C,aAAa/lC,EAAGpP,KAAKm1C,aAAa9lC,KAC3ErP,KAAKw/H,kBAAkBxtH,MAExBA,EAAO,MAGI,MAARA,EAEChS,KAAKy/H,eAEa,MAAjBz/H,KAAKwM,WAERxM,KAAK2xB,MAAQ3xB,KAAK0/H,mBAAmB1/H,KAAKwM,SAASwF,KAAMA,GAEvC,MAAdhS,KAAK2xB,OAAsC,GAArB3xB,KAAK2xB,MAAMxvB,SAEpC6P,EAAO,KAGHhS,KAAKm/H,eAAevuF,EAAGrO,cAE1BviC,KAAK2xB,MAAQ,QAKP3xB,KAAKsvH,cAAct9G,EAAM4+B,KAElC5+B,EAAO,OAGAhS,KAAKy/H,gBAAmBz/H,KAAKm/H,eAAevuF,EAAGrO,aACrDviC,KAAKiR,MAAM6pG,qBAEb96G,KAAK2xB,MAAQ,IAGP3f,KAIR8sG,EAAO+e,aAAev1H,QAAQ2M,KAAKjV,MAAM,SAAS6R,GAEjD,OAAI7R,KAAKy/H,eAEa,MAAdz/H,KAAK2xB,MAILs7E,aAAa7gG,UAAUyxH,aAAazyH,MAAM0zG,EAAQzzG,cAM3DyzG,EAAOgf,eAAiBx1H,QAAQ2M,KAAKjV,MAAM,SAASmI,EAAK0J,EAAO84G,GAE/D,OAA6B,MAArB3qH,KAAKs+H,cAAwBt+H,KAAKy/H,eACzCxyB,aAAa7gG,UAAU0xH,eAAe1yH,MAAM0zG,EAAQzzG,WACpD,QAKFyzG,EAAOn4F,WAAare,QAAQ2M,KAAKjV,MAAM,SAAS6R,EAAO1J,GAEtD,QAAyB,MAArBnI,KAAKs+H,eAAwBt+H,KAAKy/H,iBAK/BxyB,aAAa7gG,UAAUua,WAAWvb,MAAM0zG,EAAQzzG,cAGjDyzG,GAQRtR,oBAAoBphG,UAAUib,MAAQ,SAASxV,EAAOzC,EAAGC,EAAGmE,GAE3DxT,KAAKwM,SAAWqF,EAChB7R,KAAKs/F,MAAQ,IAAInwF,QAAQC,EAAGC,GAC5BrP,KAAKwT,UAA0B,MAAbA,EAAqBA,EAAYxT,KAAKk/G,gBAAgB,MAGxEl/G,KAAK8+G,OAAOC,aAAe/+G,KAAK8+G,OAAO5R,WACvCltG,KAAK8+G,OAAOE,YAAcntG,EAC1B7R,KAAK8+G,OAAOG,OAEZj/G,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQkjC,MAAO,QAASntC,KAAKwM,YAS/DghG,oBAAoBphG,UAAUqzH,aAAe,WAE5C,OAAqB,MAAdz/H,KAAKs/F,OAA+B,MAAdt/F,KAAKqS,OAanCm7F,oBAAoBphG,UAAUkjH,cAAgB,SAASt9G,EAAM4+B,GAE5D,OAAO5wC,KAAKiR,MAAMq+G,cAAct9G,IAcjCw7F,oBAAoBphG,UAAUmjH,cAAgB,SAASv9G,GAEtD,OAAO,GAeRw7F,oBAAoBphG,UAAUszH,mBAAqB,SAAS57G,EAAQrF,GAEnE,OAAKze,KAAKuvH,cAAc9wG,GAKjBze,KAAKiR,MAAMsyG,uBAAuB,KAAMz/F,EAAQrF,GAH/C,IAgBT+uF,oBAAoBphG,UAAUuzH,gBAAkB,SAAS9tH,GAExD,OAAO7R,KAAKs+H,cAab9wB,oBAAoBphG,UAAUwzH,0BAA4B,SAAS/tH,GAElE,OAAkB,MAAdA,EAAMxD,MAAgBwD,EAAMxD,KAAKnJ,KAAK2O,YAAc7T,KAAKiR,MAAM0W,WAK5D3nB,KAAKo+H,eAab5wB,oBAAoBphG,UAAUyzH,YAAc,SAAShuH,GAEpD,IAAIwhC,EAAQrzC,KAAK2/H,gBAAgB9tH,GAEjC,GAAa,MAATwhC,GAA0B,MAATxhC,EACrB,CACC7R,KAAKq/H,UAAYxtH,EACjB,IAAI0tH,EAAQ,GAOR3tG,EAAO,IAAIkrC,aADF,IAAIxtD,YAAY,EAAG,EAAG+jC,EAAMprC,MAAOorC,EAAMxrC,QAClBwrC,EAAMpuC,IAAK,KAAM,KAAM,GAC3D2sB,EAAK+1C,qBAAsB,EAEvB3nE,KAAK4/H,0BAA0B/tH,IAElC+f,EAAKtD,QAAU3gB,YAAY4lB,mBAC3B3B,EAAKzqB,KAAKnH,KAAKiR,MAAM0W,aAIrBiK,EAAKtD,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YACjD5gB,YAAY4gB,YAAc5gB,YAAYylB,YACvCxB,EAAKzqB,KAAKnH,KAAKiR,MAAMa,UAAU+gD,kBAG3B7yD,KAAKq+H,cAA6C,MAA7BzsG,EAAK1sB,KAAKsT,iBAElCoZ,EAAK1sB,KAAK2O,WAAW2/B,aAAa5hB,EAAK1sB,KAAM0sB,EAAK1sB,KAAK2O,WAAW+B,aAIpEgc,EAAK1sB,KAAKwC,MAAM0M,OAASzG,YAAYwnB,eAGrC,IAAIpjB,EAAWzJ,QAAQ2M,KAAKjV,MAAM,WAEjC,OAA6B,MAArBA,KAAK8/H,aAAwB9/H,KAAK8/H,aAAejuH,KAItD4+B,EAAYnoC,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEtC8B,QAAQk4B,WAAWh6B,KAEvBnI,KAAK4xB,KAAOA,EACZ5xB,KAAKiR,MAAM+zB,eAAe/6B,QAAQg7B,WACjC,IAAIvD,aAAav5B,EAAK4J,UASzB,OALA9H,QAAQ06B,oBAAoB/S,EAAK1sB,KAAMlF,KAAKiR,MAAOc,EAAU0+B,GAE7D8uF,EAAM3yH,KAAKglB,GACX5xB,KAAKs/H,YAAYC,EAAOv/H,KAAKq/H,WAEtBE,EAGR,OAAO,MAYR/xB,oBAAoBphG,UAAUkzH,YAAc,SAASC,EAAO1tH,GAE3D,GAAa,MAAT0tH,GAA6B,MAAZA,EAAM,IAAuB,MAAT1tH,EACzC,CACC,IAAIuZ,EAAMprB,KAAK+/H,gBAAgBR,EAAM,GAAI1tH,GACzC0tH,EAAM,GAAG94G,OAAOrX,EAAIgc,EAAIhc,EACxBmwH,EAAM,GAAG94G,OAAOpX,EAAI+b,EAAI/b,EACxBkwH,EAAM,GAAG1sH,WAaX26F,oBAAoBphG,UAAU2zH,gBAAkB,SAASnuG,EAAM/f,GAE9D,IAAIS,EAAQtS,KAAKiR,MAAMa,UAAUQ,MAC7B6Q,EAAKtR,EAAMlC,aACXyX,EAAKvV,EAAMjC,aAEf,GAAI5P,KAAKiR,MAAMu8D,WAAW37D,EAAMG,MAChC,CACC,IAAI6b,EAAO7tB,KAAKiR,MAAMi9D,aAAar8D,EAAMG,MAEzCmR,EAAoB,GAAd0K,EAAK5lB,MAAc4J,EAAMzC,EAAIye,EAAK5lB,MAAQqK,EAAQ,EAAI6Q,EAC5DiE,EAAqB,GAAfyG,EAAKhmB,OAAegK,EAAMxC,EAAIwe,EAAKhmB,OAASyK,EAAQ,EAAI8U,EAE9D,IAAIK,EAAQnf,QAAQuX,UAAUvX,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAY2W,iBAAmB,GAE3F,GAAa,GAATmD,EACJ,CACC,IAAI1G,EAAM3X,KAAK2X,IAAI0G,GACfxG,EAAM7X,KAAK6X,IAAIwG,GACf4oE,EAAK,IAAIlhF,QAAQ0C,EAAMlC,aAAckC,EAAMjC,cAC3C6T,EAAKnb,QAAQkb,gBAAgB,IAAIrU,QAAQgU,EAAIiE,GAAKrG,EAAKE,EAAKovE,GAChEltE,EAAKM,EAAGrU,EACRgY,EAAK3D,EAAGpU,GAIV,OAAO,IAAIF,QAAQgU,EAAKyO,EAAKnL,OAAOxe,MAAQ,EAC1Cmf,EAAKwK,EAAKnL,OAAO5e,OAAS,IAQ7B2lG,oBAAoBphG,UAAU4zH,aAAe,WAE5C,GAAkB,MAAdhgI,KAAKu/H,MACT,CACC,IAAK,IAAI16H,EAAI,EAAGA,EAAI7E,KAAKu/H,MAAMp9H,OAAQ0C,IAEtC7E,KAAKu/H,MAAM16H,GAAGoqB,UAGfjvB,KAAKu/H,MAAQ,KACbv/H,KAAK4xB,KAAO,KACZ5xB,KAAKigI,aAAe,KACpBjgI,KAAKq/H,UAAY,OAanB7xB,oBAAoBphG,UAAU8zH,aAAe,SAAStvF,GAErD,OAAgD,MAAvC5wC,KAAKy+H,kBAAkB9wB,cAAoE,MAA5C3tG,KAAKy+H,kBAAkB0B,mBAC5D,MAAjBngI,KAAKwM,UAAkC,MAAdxM,KAAK2xB,QAAgC,MAAd3xB,KAAKu/H,OAAgC,MAAdv/H,KAAKu/H,OAChE,MAAbv/H,KAAK4xB,OAQP47E,oBAAoBphG,UAAUqkC,UAAY,SAAS3mC,EAAQ8mC,GAI1D,GAFA5wC,KAAK8+H,mBAED9+H,KAAK2T,aAAe3T,KAAKiR,MAAM0C,cAAgBi9B,EAAGzO,eACpDniC,KAAKy/H,gBAAkBz/H,KAAKkgI,aAAatvF,GAC3C,CA8BC,GA7BgD,MAA5C5wC,KAAKy+H,kBAAkB0B,mBACa,MAAvCngI,KAAKy+H,kBAAkB9wB,cACgB,MAAvC3tG,KAAKy+H,kBAAkBtpF,cAEvBn1C,KAAKogI,iBAAmBpgI,KAAKy+H,kBAAkB0B,kBAC/CngI,KAAKwM,SAAWxM,KAAKy+H,kBAAkB9wB,aACvC3tG,KAAKs/F,MAAQt/F,KAAKy+H,kBAAkBtpF,aAAa1lC,SAKjDzP,KAAKs/F,MAAQ,IAAInwF,QAAQyhC,EAAG9N,YAAa8N,EAAG7N,aAG7C/iC,KAAKwT,UAAYxT,KAAKk/G,gBAAgBtuE,GACtC5wC,KAAK8+H,iBAAmB,EAEpB9+H,KAAK0+H,kBAAkC,MAAd1+H,KAAKqS,QAEjCrS,KAAKqgI,UAAY,KACjBrgI,KAAKqS,MAAQrS,KAAK+8F,cAEI,MAAlB/8F,KAAKwT,WAERxT,KAAKqS,MAAMjH,MAAMpL,KAAKwT,YAKH,MAAjBxT,KAAKwM,UAAsC,MAAlBxM,KAAKwT,UAClC,CACC,IAAIiQ,EAAKzjB,KAAKiR,MAAMu/G,iBAAiB5/E,EAAGrO,YACxCviC,KAAKwT,UAAUxB,KAAKQ,SAAS49E,iBAAiB3sE,GAAI,GAGnDzjB,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQkjC,MAAO,QAASntC,KAAKwM,WAE9DokC,EAAGxO,UAGJpiC,KAAKigI,aAAejgI,KAAK4xB,KACzB5xB,KAAK4xB,KAAO,MAUb47E,oBAAoBphG,UAAUk0H,yBAA2B,SAASzuH,GAEjE,OAAQ7R,KAAKiR,MAAM25D,cAAc/4D,EAAMG,OAoBxCw7F,oBAAoBphG,UAAU8yG,gBAAkB,SAAStuE,GAExD,OAAO,MASR48D,oBAAoBphG,UAAUm0H,sBAAwB,SAAS3vF,GAE9D,IAAIh0B,EAAStU,QAAQof,UAAU1nB,KAAKiR,MAAM0W,WACtCxf,EAAMyoC,EAAGrO,WAET4E,EAAUl9B,QAAQ04B,WAAWx6B,GAC7Bi/B,EAAUn9B,QAAQ44B,WAAW16B,GAE7BjE,EAAMrD,SAAS2C,gBACfiZ,GAAQjb,OAAO6mB,aAAenkB,EAAI+jB,aAAe/jB,EAAIs8H,YAAc,GACnEvjH,GAAOzb,OAAO8mB,aAAepkB,EAAIsH,YAAetH,EAAIu8H,WAAa,GAEjEC,EAAQ1gI,KAAKm1C,aAAa/lC,EAAIpP,KAAKiR,MAAM0W,UAAUM,WAAarL,EAAOxN,EAAIqN,EAC3EkkH,EAAQ3gI,KAAKm1C,aAAa9lC,EAAIrP,KAAKiR,MAAM0W,UAAUnc,UAAYoR,EAAOvN,EAAI4N,EAE9E,OAAOjd,KAAKg/H,iBAAmB/0H,QAAQ08B,YAAYiK,EAAGrO,cACpDqO,EAAGnO,SAASziC,KAAK8+G,OAAOhnE,UAAUzlC,QAClCpI,QAAQ48B,UAAU+J,EAAGrO,aAAgC,MAAjBqO,EAAG7+B,YACxC/R,KAAK8+G,OAAOhnE,UAAU8oF,cAAcz5F,EAASC,KAC3Cs5F,GAASv5F,GAAWw5F,GAASv5F,IAA6B,MAAjBwJ,EAAG7+B,YAC9C/R,KAAK8+G,OAAOhnE,UAAU8oF,cAAcF,EAAOC,KAS7CnzB,oBAAoBphG,UAAUy0H,mBAAqB,SAASjwF,EAAIxqB,GAK/D,GAHApmB,KAAKy+H,kBAAkBp4D,OAAOz1B,EAAkB,MAAd5wC,KAAKs/F,OAAe,EAAsB,MAAdt/F,KAAKs/F,OAClE1uD,EAAGnO,SAASziC,KAAK8+G,OAAOhnE,UAAUzlC,OAAU,KAAO+T,GAET,MAAvCpmB,KAAKy+H,kBAAkB9wB,cAAoE,MAA5C3tG,KAAKy+H,kBAAkB0B,kBAI5C,MAAzBngI,KAAK8+G,OAAOhnE,WAAoD,MAA/B93C,KAAK8+G,OAAOhnE,UAAUjmC,OAC1D7R,KAAK8+G,OAAOhnE,UAAUjmC,MAAMG,MAAQhS,KAAKy+H,kBAAkB9wB,aAAa37F,KAG9B,eAAtChS,KAAK8+G,OAAOhnE,UAAUzlC,MAAMw2C,SAE/B7oD,KAAK8+G,OAAOhnE,UAAUzlC,MAAMw2C,OAAS,cACrC7oD,KAAK8+G,OAAOhnE,UAAUi2D,WAKvB/tG,KAAK8+G,OAAOif,SAAS/9H,KAAKy+H,kBAAkB9wB,aAAa37F,KAAM,eAI3C,MAAjBhS,KAAKwM,WAERxM,KAAK2xB,MAAQ3xB,KAAK0/H,mBAAmB1/H,KAAKwM,SAASwF,KAAMhS,KAAKy+H,kBAAkB9wB,aAAa37F,MAE3E,MAAdhS,KAAK2xB,QAER3xB,KAAK8/H,aAAe9/H,KAAKy+H,kBAAkB9wB,eAG1B,MAAd3tG,KAAK2xB,OAAuC,MAArB3xB,KAAK8/H,eAC9B9/H,KAAK8gI,cAAc9gI,KAAK8/H,aAAa9tH,QAEtChS,KAAKy+H,kBAAkBvoF,aAK1B,CACKl2C,KAAKiR,MAAMi5G,sBAAsBt5E,EAAGrO,aAEvCviC,KAAK8+G,OAAO5oE,QACZl2C,KAAK8/H,aAAe,OAIpB9/H,KAAK8+G,OAAO6e,QAAQ/sF,GACpB5wC,KAAK8/H,aAAe9/H,KAAK8+G,OAAO0e,iBAGR,MAArBx9H,KAAK8/H,cAAyB9/H,KAAK8gI,cAAc9gI,KAAK8/H,aAAa9tH,QAEtEhS,KAAKy+H,kBAAkBvoF,QACvBl2C,KAAK8+G,OAAO5oE,QACZl2C,KAAK8/H,aAAe,MAGrB,IAAIpsE,EAAU1zD,KAAKugI,sBAAsB3vF,GAEzC,GAAyB,MAArB5wC,KAAK8/H,cAAwBpsE,EACjC,CAGK9iB,EAAGnO,SAASziC,KAAK8+G,OAAOhnE,UAAUzlC,SAErC+T,EAAQ,IAAIjX,QAAQyhC,EAAG9N,YAAa8N,EAAG7N,cAGxC,IAAI9d,EAAajlB,KAAKiR,MAAMm2G,qBAAqBhhG,EAAOpmB,KAAK8/H,aAAclvF,GAC3E5wC,KAAKy+H,kBAAkBsC,SAASnwF,EAAI5wC,KAAK8/H,cAAc,GACvD9/H,KAAKy+H,kBAAkB0B,kBAAoBl7G,EAC3CjlB,KAAKy+H,kBAAkBtpF,aAAe/uB,EAGvC,GAAIpmB,KAAKg/H,gBAEqB,MAAzBh/H,KAAK8+G,OAAOhnE,WAAoD,MAA/B93C,KAAK8+G,OAAOhnE,UAAUzlC,MAC3D,CACC,IAAIwG,EAAI7Y,KAAKiR,MAAMsW,KAAKjV,MAEwB,MAA5CtS,KAAKy+H,kBAAkB0B,mBACa,MAAvCngI,KAAKy+H,kBAAkB9wB,cAEvB3tG,KAAK8+G,OAAOhnE,UAAUzlC,MAAMw2C,OAASl7C,YAAY6mB,wBACjDx0B,KAAK8+G,OAAOhnE,UAAUzlC,MAAMuhD,YAAcjmD,YAAY8mB,8BAAgC5b,EAAIA,EAC1F7Y,KAAK8+G,OAAOhnE,UAAUi2D,WAEd/tG,KAAK8+G,OAAOye,kBAKhBv9H,KAAKiR,MAAM84G,kBAAkBn5E,EAAG5N,YACnChjC,KAAK8+G,OAAO0e,iBAAmB5sF,EAAG7+B,YAElC/R,KAAK8+G,OAAOhnE,UAAUzlC,MAAMw2C,OAAS,cACrC7oD,KAAK8/H,aAAe,MAIpB9/H,KAAK8+G,OAAOhnE,UAAUzlC,MAAMw2C,OAASl7C,YAAY2mB,oBAGlDt0B,KAAK8+G,OAAOhnE,UAAUzlC,MAAMuhD,YAAcjmD,YAAY+mB,sBAAwB7b,EAAIA,EAClF7Y,KAAK8+G,OAAOhnE,UAAUi2D,cAa3BP,oBAAoBphG,UAAU00H,cAAgB,SAAS9uH,GAEtD,OAAO,GAQRw7F,oBAAoBphG,UAAU40H,gBAAkB,SAAS56G,GAExD,IAAI9T,EAAQtS,KAAKiR,MAAMa,UAAU8d,WAC7BpoB,EAAKxH,KAAKiR,MAAMa,UAAU8c,eAE9BxI,EAAMhX,EAAIgX,EAAMhX,EAAIkD,EAAQ9K,EAAG4H,EAC/BgX,EAAM/W,EAAI+W,EAAM/W,EAAIiD,EAAQ9K,EAAG6H,GAShCm+F,oBAAoBphG,UAAU60H,cAAgB,SAASrwF,EAAIxqB,GAE1D,IAAKnc,QAAQ48B,UAAU+J,EAAGrO,aAAgC,MAAjBviC,KAAKwM,SAC9C,CACC,IAAIk/C,EAAM1rD,KAAKiR,MAAMknC,SAAWn4C,KAAKiR,MAAMsW,KAAKjV,MAAQ,EACpDzB,EAAgC,MAAzB7Q,KAAKogI,iBAA4BpgI,KAAKs/F,MAChD,IAAInwF,QAAQnP,KAAKwM,SAASmD,aAAc3P,KAAKwM,SAASoD,cAEnDxG,KAAKsX,IAAI7P,EAAIzB,EAAIwhC,EAAG9N,aAAe4oB,IAEtCtlC,EAAMhX,EAAIyB,EAAIzB,GAGXhG,KAAKsX,IAAI7P,EAAIxB,EAAIuhC,EAAG7N,aAAe2oB,IAEtCtlC,EAAM/W,EAAIwB,EAAIxB,KAWjBm+F,oBAAoBphG,UAAUoqC,UAAY,SAAS1sC,EAAQ8mC,GAE1D,GAAKA,EAAGzO,eAAiBniC,KAAK2+H,iBAAiC,MAAd3+H,KAAKs/F,OAAkBt/F,KAAKiR,MAAMimC,YAgQlFl3C,KAAKy+H,kBAAkBvoF,YA/PxB,CAEMl2C,KAAK2T,aAAoC,MAArB3T,KAAK8/H,eAE7B9/H,KAAKggI,eACLhgI,KAAK8/H,aAAe,MAGrB,IAAIv4G,EAAOvnB,KAAKiR,MAAMa,UAClBQ,EAAQiV,EAAKjV,MACb9K,EAAK+f,EAAKoH,UACVvI,EAAQ,IAAIjX,QAAQyhC,EAAG9N,YAAa8N,EAAG7N,aAoB3C,GAnBA/iC,KAAK2xB,MAAQ,KAET3xB,KAAKiR,MAAM8mC,mBAAmBnH,EAAGrO,cAEpCnc,EAAQ,IAAIjX,SAASnP,KAAKiR,MAAMmnC,KAAKhyB,EAAMhX,EAAIkD,EAAQ9K,EAAG4H,GAAK5H,EAAG4H,GAAKkD,GACrEtS,KAAKiR,MAAMmnC,KAAKhyB,EAAM/W,EAAIiD,EAAQ9K,EAAG6H,GAAK7H,EAAG6H,GAAKiD,IAGrDtS,KAAKihI,cAAcrwF,EAAIxqB,GACvBpmB,KAAKm1C,aAAe/uB,GAED,MAAdpmB,KAAKs/F,OAAkBt/F,KAAK2T,aAAe3T,KAAKiR,MAAM0C,eAC3C,MAAd3T,KAAKqS,OAA+B,MAAdrS,KAAKs/F,OAC5Bl2F,KAAKsX,IAAIkwB,EAAG9N,YAAc9iC,KAAKs/F,MAAMlwF,GAAKpP,KAAKiR,MAAMwgD,WACrDroD,KAAKsX,IAAIkwB,EAAG7N,YAAc/iC,KAAKs/F,MAAMjwF,GAAKrP,KAAKiR,MAAMwgD,YAErDzxD,KAAK6gI,mBAAmBjwF,EAAIxqB,GAGX,MAAdpmB,KAAKs/F,MACT,CACC,IAAIr6E,EAAa,KACbI,EAAUe,EAGkC,MAA5CpmB,KAAKy+H,kBAAkB0B,mBACa,MAAvCngI,KAAKy+H,kBAAkB9wB,cACgB,MAAvC3tG,KAAKy+H,kBAAkBtpF,cAEvBlwB,EAAajlB,KAAKy+H,kBAAkB0B,kBACpC96G,EAAUrlB,KAAKy+H,kBAAkBtpF,aAAa1lC,SAErB,MAAjBzP,KAAKwM,WAAqBxM,KAAKiR,MAAMi5G,sBAAsBt5E,EAAGrO,aACtEt4B,QAAQ08B,YAAYiK,EAAGrO,cAEnBn5B,KAAKsX,IAAI1gB,KAAKwM,SAASmD,aAAeyW,EAAMhX,GAC/ChG,KAAKsX,IAAI1gB,KAAKwM,SAASoD,aAAewW,EAAM/W,GAE5C+W,EAAMhX,EAAIpP,KAAKwM,SAASmD,aAIxByW,EAAM/W,EAAIrP,KAAKwM,SAASoD,cAI1B,IAAIsxH,EAAMlhI,KAAKs/F,MAGf,GAAyB,MAArBt/F,KAAKigI,aACT,CACC,IAAIn3H,EAAI9I,KAAKigI,aAAax5G,OAAOxe,MAC7BY,EAAI7I,KAAKigI,aAAax5G,OAAO5e,OAEjC,GAAyB,MAArB7H,KAAK8/H,cAAwB9/H,KAAKu+H,mBACtC,CACC,IAAInzG,EAAMprB,KAAK+/H,gBAAgB//H,KAAKigI,aAAcjgI,KAAK8/H,cACvD9/H,KAAKigI,aAAax5G,OAAOrX,EAAIgc,EAAIhc,EACjCpP,KAAKigI,aAAax5G,OAAOpX,EAAI+b,EAAI/b,MAGlC,CACC,IAAIoX,EAAS,IAAInX,YAAYshC,EAAG9N,YAAc9iC,KAAK4+H,kBAAkBxvH,EACpEwhC,EAAG7N,YAAc/iC,KAAK4+H,kBAAkBvvH,EAAGvG,EAAGD,GAC/C7I,KAAKigI,aAAax5G,OAASA,EAG5BzmB,KAAKigI,aAAaptH,SAInB,GAAsB,MAAlB7S,KAAKwT,UAERxT,KAAK2yG,gBAAgBttF,EAASJ,GAC9BI,EAAUrlB,KAAKwT,UAAU2R,eAAenlB,KAAKwT,UAAU2R,eAAehjB,OAAS,GAC/E++H,EAAMlhI,KAAKwT,UAAU2R,eAAe,QAkBpC,GAdyB,MAArBnlB,KAAK8/H,cAEwC,MAA5C9/H,KAAKy+H,kBAAkB0B,mBAIf,OAFPtvH,EAAM7Q,KAAKmhI,wBAAwBnhI,KAAK8/H,aAAclvF,MAIzDvrB,EAAUxU,GAMgB,MAAzB7Q,KAAKogI,kBAA6C,MAAjBpgI,KAAKwM,SAC1C,CACC,IAAIkM,EAA0B,MAAlB1Y,KAAKqgI,WAAqBrgI,KAAKqgI,UAAUl+H,OAAS,EAC5DnC,KAAKqgI,UAAU,GAAKh7G,EAGX,OAFPxU,EAAM7Q,KAAKohI,wBAAwBphI,KAAKwM,SAAUkM,EAAMk4B,MAI3DswF,EAAMrwH,GAST,GAAyB,MAArB7Q,KAAK8/H,cAAwB9/H,KAAK++H,gBACtC,CACC,IAAIluH,EAAMqwH,EAEV,GAAsB,MAAlBlhI,KAAKwT,WAAqBxT,KAAKwT,UAAU2R,eAAehjB,QAAU,EACtE,CACC,IAAI8qF,EAAOjtF,KAAKwT,UAAU2R,eAAenlB,KAAKwT,UAAU2R,eAAehjB,OAAS,GAEpE,MAAR8qF,IAEHp8E,EAAMo8E,GAIR,IAAI16E,EAAK8S,EAAQjW,EAAIyB,EAAIzB,EACrBqD,EAAK4S,EAAQhW,EAAIwB,EAAIxB,EAErB6oE,EAAM9uE,KAAKqY,KAAKlP,EAAKA,EAAKE,EAAKA,GAEnC,GAAW,GAAPylE,EAEH,OAIDl4E,KAAKqhI,cAAgBh8G,EAAQ5V,QAC7B4V,EAAQjW,GAAU,EAALmD,EAAS2lE,EACtB7yD,EAAQhW,GAAU,EAALoD,EAASylE,OAItBl4E,KAAKqhI,cAAgB,KAwBtB,GApBkB,MAAdrhI,KAAKqS,QAEJE,EAAKnJ,KAAKsX,IAAIkwB,EAAG9N,YAAc9iC,KAAKs/F,MAAMlwF,GAC1CqD,EAAKrJ,KAAKsX,IAAIkwB,EAAG7N,YAAc/iC,KAAKs/F,MAAMjwF,IAE1CkD,EAAKvS,KAAKiR,MAAMwgD,WAAah/C,EAAKzS,KAAKiR,MAAMwgD,aAEhDzxD,KAAKqS,MAAQrS,KAAK+8F,cAEI,MAAlB/8F,KAAKwT,WAERxT,KAAKqS,MAAMjH,MAAMpL,KAAKwT,WAIvBxT,KAAK6gI,mBAAmBjwF,EAAIxqB,KAKZ,MAAdpmB,KAAKqS,MACT,CACC,GAAsB,MAAlBrS,KAAKwT,UAERxT,KAAKqS,MAAM2gD,OAAShzD,KAAKwT,UAAU2R,mBAGpC,CACC,IAAIe,EAAM,CAACg7G,GAEW,MAAlBlhI,KAAKqgI,YAERn6G,EAAMA,EAAI+2D,OAAOj9E,KAAKqgI,YAGvBn6G,EAAItZ,KAAKyY,GACTrlB,KAAKqS,MAAM2gD,OAAS9sC,EAGrBlmB,KAAKshI,cAIa,MAAfthI,KAAKoU,SAERpU,KAAKiR,MAAM0W,UAAUjgB,MAAM0M,OAASpU,KAAKoU,QAG1CnK,QAAQm4B,QAAQwO,EAAGrO,YACnBqO,EAAGxO,eAEMpiC,KAAK2T,aAAgB3T,KAAKiR,MAAM0C,YAIjC3T,KAAKwM,UAAYxM,KAAK8/H,cAAkC,MAAlB9/H,KAAKwT,WAEnDxT,KAAKggI,eAGoB,MAArBhgI,KAAK8/H,cAAsC,MAAd9/H,KAAK2xB,OAA6D,MAA5C3xB,KAAKy+H,kBAAkB0B,oBAE7EngI,KAAKu/H,MAAQv/H,KAAK6/H,YAAY7/H,KAAK8/H,cAEjB,MAAd9/H,KAAKu/H,QAERv/H,KAAK8/H,aAAaxnE,UAAU3qD,YAAYwnB,gBACxCyb,EAAGxO,YAILpiC,KAAKwM,SAAWxM,KAAK8/H,cAEb9/H,KAAKwM,UAAYxM,KAAK8/H,cAAqC,MAArB9/H,KAAK8/H,cAAsC,MAAd9/H,KAAKu/H,OAC/Ev/H,KAAKiR,MAAMimC,aAGZtG,EAAGxO,UAxBHpiC,KAAKy+H,kBAAkBvoF,QA2BxB,IAAKl2C,KAAKiR,MAAMimC,aAAoC,MAArBl3C,KAAK8/H,cAAsC,MAAd9/H,KAAKu/H,MACjE,CAIC,IAHA,IAAIgC,GAAW,EACX9iH,EAASmyB,EAAGpO,YAEP39B,EAAI,EAAGA,EAAI7E,KAAKu/H,MAAMp9H,SAAWo/H,EAAU18H,IAEnD08H,EAAW9iH,GAAUze,KAAKu/H,MAAM16H,GAAGK,MAAQuZ,EAAO5K,YAAc7T,KAAKu/H,MAAM16H,GAAGK,KAG1Eq8H,GAEJvhI,KAAKwhI,YAAYxhI,KAAK8/H,aAAc9/H,KAAKu/H,MAAO3uF,MAepD48D,oBAAoBphG,UAAUumG,gBAAkB,SAASttF,EAASJ,GAGpC,MAAzBjlB,KAAKogI,kBAA2D,MAA/BpgI,KAAKogI,iBAAiBh6G,QAE1DpmB,KAAKwT,UAAU9L,MAAMiG,YAAY4qB,cAAgBv4B,KAAKogI,iBAAiBh6G,MAAMhX,EAC7EpP,KAAKwT,UAAU9L,MAAMiG,YAAY6qB,cAAgBx4B,KAAKogI,iBAAiBh6G,MAAM/W,GAG5D,MAAd4V,GAA0C,MAApBA,EAAWmB,OAEpCpmB,KAAKwT,UAAU9L,MAAMiG,YAAYirB,eAAiB3T,EAAWmB,MAAMhX,EACnEpP,KAAKwT,UAAU9L,MAAMiG,YAAYkrB,eAAiB5T,EAAWmB,MAAM/W,WAI5DrP,KAAKwT,UAAU9L,MAAMiG,YAAYirB,sBACjC54B,KAAKwT,UAAU9L,MAAMiG,YAAYkrB,gBAGzC74B,KAAKwT,UAAU2R,eAAiB,CAAC,KAA4B,MAArBnlB,KAAK8/H,aAAwB,KAAOz6G,GAC5ErlB,KAAKiR,MAAMsW,KAAK8rF,yBAAyBrzG,KAAKwT,UAAWxT,KAAKwM,UAAU,EAAMxM,KAAKogI,kBAE1D,MAArBpgI,KAAK8/H,eAEU,MAAd76G,IAEHA,EAAajlB,KAAKiR,MAAMqiG,wBAAwBtzG,KAAKwT,UAAWxT,KAAKwM,UAAU,IAGhFxM,KAAKwT,UAAUikF,yBAAyB,MAAM,GAC9Cz3F,KAAKiR,MAAMsW,KAAK8rF,yBAAyBrzG,KAAKwT,UAAWxT,KAAK8/H,cAAc,EAAO76G,IAIpF,IAAIw8G,EAAa,KAEjB,GAAsB,MAAlBzhI,KAAKqgI,UACT,CACCoB,EAAa,GAEb,IAAK,IAAI58H,EAAI,EAAGA,EAAI7E,KAAKqgI,UAAUl+H,OAAQ0C,IAC3C,CACC,IAAI4e,EAAKzjB,KAAKqgI,UAAUx7H,GAAG4K,QAC3BzP,KAAKghI,gBAAgBv9G,GACrBg+G,EAAW58H,GAAK4e,GAIlBzjB,KAAKiR,MAAMsW,KAAKurF,aAAa9yG,KAAKwT,UAAWiuH,EAAYzhI,KAAKwM,SAAUxM,KAAK8/H,cAC7E9/H,KAAKiR,MAAMsW,KAAKwrF,6BAA6B/yG,KAAKwT,UAAWxT,KAAKwM,SAAUxM,KAAK8/H,eAalFtyB,oBAAoBphG,UAAU+0H,wBAA0B,SAAStvH,EAAO++B,GAEvE,IAAIjkC,EAAS,KACT4a,EAAO1V,EAAM0V,KACbm6G,EAAkBn6G,EAAKktF,qBAAqB5iG,GAEhD,GAAuB,MAAnB6vH,EACJ,CACC,IAAIhpH,EAA0B,MAAlB1Y,KAAKqgI,WAAqBrgI,KAAKqgI,UAAUl+H,OAAS,EAC5DnC,KAAKqgI,UAAUrgI,KAAKqgI,UAAUl+H,OAAS,GACvC,IAAIgN,QAAQnP,KAAKwM,SAASmD,aAAc3P,KAAKwM,SAASoD,cACpDiB,EAAM6wH,EAAgBn6G,EAAKiwE,mBAAmB3lF,GACjD7R,KAAKwT,UAAWkF,GAAM,GAEZ,MAAP7H,IAEHlE,EAASkE,QAKVlE,EAAS,IAAIwC,QAAQ0C,EAAMlC,aAAckC,EAAMjC,cAGhD,OAAOjD,GAeR6gG,oBAAoBphG,UAAUg1H,wBAA0B,SAASvvH,EAAO6G,EAAMk4B,GAE7E,IAAIjkC,EAAS,KACT4a,EAAO1V,EAAM0V,KACbo6G,EAAkBp6G,EAAKktF,qBAAqB5iG,GAC5C5C,EAAI,IAAIE,QAAQ0C,EAAMlC,aAAckC,EAAMjC,cAE9C,GAAuB,MAAnB+xH,EACJ,CACC,IAAI77E,EAAQx9C,QAAQyW,SAASlN,EAAMnK,MAAOiG,YAAY2W,eAAgB,GAClErE,GAAO6lC,GAAS18C,KAAK2W,GAAK,KAEjB,GAAT+lC,IAEHptC,EAAOpQ,QAAQkb,gBAAgB,IAAIrU,QAAQuJ,EAAKtJ,EAAGsJ,EAAKrJ,GAAIjG,KAAK2X,IAAId,GAAM7W,KAAK6X,IAAIhB,GAAMhR,IAG3F,IAAI4B,EAAM8wH,EAAgBp6G,EAAKiwE,mBAAmB3lF,GAAQA,EAAO6G,GAAM,GAE5D,MAAP7H,IAEU,GAATi1C,IAEHj1C,EAAMvI,QAAQkb,gBAAgB,IAAIrU,QAAQ0B,EAAIzB,EAAGyB,EAAIxB,GAAIjG,KAAK2X,KAAKd,GAAM7W,KAAK6X,KAAKhB,GAAMhR,IAG1FtC,EAASkE,QAKVlE,EAASsC,EAGV,OAAOtC,GAgBR6gG,oBAAoBphG,UAAUo1H,YAAc,SAAS3vH,EAAO0tH,EAAO3uF,KAanE48D,oBAAoBphG,UAAUw1H,YAAc,SAAShxF,GAEpD,OAAwB,MAAjBA,EAAG7+B,YAQXy7F,oBAAoBphG,UAAUy1H,oBAAsB,SAASjxF,GAE5D,IAAIxqB,EAAQ9d,QAAQqgB,aAAa3oB,KAAKiR,MAAM0W,UAAWipB,EAAGlO,OAAQkO,EAAGhO,QACjErwB,EAAKnJ,KAAKsX,IAAI0F,EAAMhX,EAAIpP,KAAKs/F,MAAMlwF,GACnCqD,EAAKrJ,KAAKsX,IAAI0F,EAAM/W,EAAIrP,KAAKs/F,MAAMjwF,GAIvC,GAHiC,MAAlBrP,KAAKqgI,WAAsBrgI,KAAK8+H,iBAAmB,IAC/DvsH,EAAKvS,KAAKiR,MAAMwgD,WAAah/C,EAAKzS,KAAKiR,MAAMwgD,WAGhD,CACuB,MAAlBzxD,KAAKqgI,YAERrgI,KAAKqgI,UAAY,IAGlB,IAAI/tH,EAAQtS,KAAKiR,MAAMsW,KAAKjV,MACxB8T,EAAQ,IAAIjX,QAAQnP,KAAKiR,MAAMmnC,KAAKxH,EAAG9N,YAAcxwB,GAASA,EAChEtS,KAAKiR,MAAMmnC,KAAKxH,EAAG7N,YAAczwB,GAASA,GAC5CtS,KAAKqgI,UAAUzzH,KAAKwZ,KAWtBonF,oBAAoBphG,UAAU01H,iBAAmB,SAAS30D,EAAIC,GAE7D,OAAc,MAAND,GAAoB,MAANC,GAA0B,MAAZD,EAAG/mD,OAA6B,MAAZgnD,EAAGhnD,QACzD+mD,EAAG/mD,MAAM5W,OAAO49D,EAAGhnD,QAAU+mD,EAAG56D,IAAM66D,EAAG76D,IAAM46D,EAAG16D,IAAM26D,EAAG36D,IAC5D06D,EAAG3T,WAAa4T,EAAG5T,WAQrBg0C,oBAAoBphG,UAAUsqC,QAAU,SAAS5sC,EAAQ8mC,GAExD,IAAKA,EAAGzO,cAAgBniC,KAAKy/H,eAC7B,CACC,GAAIz/H,KAAK0+H,mBAAqB1+H,KAAK4hI,YAAYhxF,GAK9C,OAHA5wC,KAAK6hI,oBAAoBjxF,QACzBA,EAAGxO,UAKJ,IAAI+qC,EAAKntE,KAAKogI,iBACVhzD,EAAKptE,KAAKy+H,kBAAkB0B,kBAE5Br8G,EAA2B,MAAjB9jB,KAAKwM,SAAoBxM,KAAKwM,SAASwF,KAAO,KACxDyM,EAAS,KAEmC,MAA5Cze,KAAKy+H,kBAAkB0B,mBACa,MAAvCngI,KAAKy+H,kBAAkB9wB,eAEvBlvF,EAASze,KAAKy+H,kBAAkB9wB,aAAa37F,MAGhC,MAAVyM,GAAuC,MAArBze,KAAK8/H,eAE1BrhH,EAASze,KAAK8/H,aAAa9tH,MAIV,MAAdhS,KAAK2xB,OAA4B,MAAV7N,GAA4B,MAAVrF,GAC5CqF,GAAUrF,IAAUze,KAAK8hI,iBAAiB30D,EAAIC,IAOzB,MAAjBptE,KAAKwM,UAA8C,MAA1BxM,KAAK8+G,OAAOoe,YACxCl9H,KAAKwM,SAASwF,MAAQhS,KAAK8+G,OAAOoe,WAAWlrH,MAE7ChS,KAAKiR,MAAMqtG,mBAAmBt+G,KAAK8+G,OAAOh7F,OAAQ8sB,EAAGrO,YAKpC,MAAdviC,KAAK2xB,OAAiB3xB,KAAK2xB,MAAMxvB,OAAS,GAE7CnC,KAAKiR,MAAMk5G,gBAAgBnqH,KAAK2xB,QAfjC3xB,KAAK8uF,QAAQhrE,EAAQrF,EAAQmyB,EAAGrO,WAAYqO,EAAG5N,WAoBhDhjC,KAAKggI,eACLpvF,EAAGxO,UAGc,MAAdpiC,KAAKs/F,OAERt/F,KAAKk2C,SASPs3D,oBAAoBphG,UAAU8pC,MAAQ,WAEnB,MAAdl2C,KAAKqS,QAERrS,KAAKqS,MAAM4c,UACXjvB,KAAKqS,MAAQ,MAIK,MAAfrS,KAAKoU,QAA0C,MAAxBpU,KAAKiR,MAAM0W,YAErC3nB,KAAKiR,MAAM0W,UAAUjgB,MAAM0M,OAAS,IAGrCpU,KAAKggI,eACLhgI,KAAK8+G,OAAO5oE,QACZl2C,KAAKy+H,kBAAkBvoF,QACvBl2C,KAAKqhI,cAAgB,KACrBrhI,KAAKm1C,aAAe,KACpBn1C,KAAKwT,UAAY,KACjBxT,KAAKwM,SAAW,KAChBxM,KAAK2xB,MAAQ,KACb3xB,KAAKogI,iBAAmB,KACxBpgI,KAAK8+H,iBAAmB,EACxB9+H,KAAKs/F,MAAQ,KAEbt/F,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQmjC,SAS1CogE,oBAAoBphG,UAAUk1H,YAAc,WAE3CthI,KAAKsrG,cAA4B,MAAdtrG,KAAK2xB,OACxB3xB,KAAKqS,MAAMQ,UAcZ26F,oBAAoBphG,UAAUk/F,cAAgB,SAAS+qB,GAEtDr2H,KAAKqS,MAAMuhD,YAAc5zD,KAAK6iE,aAAawzD,GAC3Cr2H,KAAKqS,MAAMw2C,OAAS7oD,KAAK+hI,aAAa1L,IAcvC7oB,oBAAoBphG,UAAU21H,aAAe,SAAS1L,GAErD,OAAO,EAAU1oH,YAAY6nB,YAAc7nB,YAAY8nB,eAcxD+3E,oBAAoBphG,UAAUy2D,aAAe,SAASwzD,GAErD,OAAO,EAAU,EAAI,GAiBtB7oB,oBAAoBphG,UAAU0iF,QAAU,SAAShrE,EAAQrF,EAAQtW,EAAKmwC,GAErE,GAAc,MAAV75B,GAAkBze,KAAKm/H,eAAeh3H,IAAQnI,KAAKiR,MAAM6pG,mBAC7D,CAGC,IAAI5oG,EAAQlS,KAAKiR,MAAM8c,WACnBi0G,GAAmB,EACnBn+G,EAAO,KAEX3R,EAAMuZ,cACN,IAEC,GAAc,MAAV3H,GAA4B,MAAVrF,IAAmBze,KAAKiR,MAAMi5G,sBAAsB/hH,IAAQnI,KAAKm/H,eAAeh3H,IAIvF,OAFdsW,EAASze,KAAKiiI,mBAAmB95H,EAAK2b,IAGtC,CAMC,GALAw0B,EAAat4C,KAAKiR,MAAMohB,cAAc,CAAC5T,GAAStW,EAAKmwC,GACrD0pF,GAAmB,EAID,MAAd1pF,GAAuBt4C,KAAKiR,MAAM8c,WAAW5b,OAAOmmC,GAavDA,EAAat4C,KAAKiR,MAAMm+B,uBAZzB,CACC,IAAIy9B,EAAS7sE,KAAKiR,MAAMa,UAAUC,SAASumC,GAE7B,MAAVu0B,KAECh8D,EAAMqB,EAAMk5D,YAAY3sD,IACxBrP,GAAKy9D,EAAOnkD,OAAOtZ,EACvByB,EAAIxB,GAAKw9D,EAAOnkD,OAAOrZ,GAQzBrP,KAAKiR,MAAM2nF,QAAQn6E,EAAQ65B,GAI7B,IAAI3hC,EAAS3W,KAAKiR,MAAMm+B,mBAEV,MAAVtrB,GAA4B,MAAVrF,GACrBvM,EAAM+vC,UAAUn+B,IAAW5R,EAAM+vC,UAAUxjC,IAC3CvM,EAAM+vC,UAAU/vC,EAAM+vC,UAAUn+B,KAAY5R,EAAM8b,YAElDrX,EAASzE,EAAM+vC,UAAUn+B,GAED,MAAnBA,EAAOtR,UAAoBsR,EAAOtR,SAAS4vC,UAC3B,MAAnB3jC,EAAOjM,UAAoBiM,EAAOjM,SAAS4vC,WAE5CzrC,EAASzE,EAAM+vC,UAAUtrC,KAM3B,IAAI5O,EAAQ,KACRL,EAAQ,KAUZ,GARsB,MAAlB1H,KAAKwT,YAERzL,EAAQ/H,KAAKwT,UAAUxB,KAAKjK,MAC5BL,EAAQ1H,KAAKwT,UAAUxB,KAAKtK,OAKjB,OAFZmc,EAAO7jB,KAAKwsF,WAAW71E,EAAQ,KAAM5O,EAAO+b,EAAQrF,EAAQ/W,IAG5D,CAcC,GAZA1H,KAAKiR,MAAMq2G,wBAAwBzjG,EAAMC,GAAQ,EAAM9jB,KAAKogI,kBAC5DpgI,KAAKiR,MAAMq2G,wBAAwBzjG,EAAMpF,GAAQ,EAAOze,KAAKy+H,kBAAkB0B,mBAGzD,MAAlBngI,KAAKwT,WAERtB,EAAMu5D,YAAY5nD,EAAM7jB,KAAKwT,UAAUxB,KAAKQ,UAGzCmE,EAASzE,EAAM+vC,UAAUn+B,GAGzB9jB,KAAKk/H,eAAer7G,EAAMC,EAAQrF,EAAQtW,EAAKmwC,GACnD,CAIC,IAHA,IACIznC,EAAMiT,EAEW,MAAdjT,EAAI8F,QAAkC,MAAhB9F,EAAI2B,UAChC3B,EAAI2B,SAAS4vC,UAAYvxC,EAAI8F,QAAUkN,EAAKlN,QAE5C9F,EAAM7Q,KAAKiR,MAAMiB,MAAM+vC,UAAUpxC,GAGvB,MAAPA,GAA6B,MAAdA,EAAI8F,QAAkB9F,EAAI8F,QAAUkN,EAAKlN,QAE3DzE,EAAMnN,IAAI4R,EAAQkN,EAAMhT,EAAI8F,OAAOm2D,SAASj8D,IAK9C,IAAIqxC,EAAMhwC,EAAMk5D,YAAYvnD,GAW5B,GATW,MAAPq+B,KAEHA,EAAM,IAAIopB,YACNlpB,UAAW,EAEflwC,EAAMu5D,YAAY5nD,EAAMq+B,IAIH,MAAlBliD,KAAKqgI,WAAqBrgI,KAAKqgI,UAAUl+H,OAAS,EACtD,CACC,IAAI0W,EAAI7Y,KAAKiR,MAAMsW,KAAKjV,MACpB9K,EAAKxH,KAAKiR,MAAMsW,KAAKoH,UACzBuzB,EAAI8Q,OAAS,GAEb,IAAK,IAAInuD,EAAI,EAAGA,EAAI7E,KAAKqgI,UAAUl+H,OAAQ0C,IAC3C,CACC,IAAI4e,EAAKzjB,KAAKqgI,UAAUx7H,GACxBq9C,EAAI8Q,OAAOpmD,KAAK,IAAIuC,QAAQsU,EAAGrU,EAAIyJ,EAAIrR,EAAG4H,EAAGqU,EAAGpU,EAAIwJ,EAAIrR,EAAG6H,KAI7D,GAAc,MAAVoP,EACJ,CACC,IAAI7N,EAAI5Q,KAAKiR,MAAMsW,KAAKoH,UACpB9V,EAAI7Y,KAAKiR,MAAMsW,KAAKjV,OACpBmR,EAA4B,MAAtBzjB,KAAKqhI,cACb,IAAIlyH,QAAQnP,KAAKqhI,cAAcjyH,EAAIyJ,EAAIjI,EAAExB,EAAGpP,KAAKqhI,cAAchyH,EAAIwJ,EAAIjI,EAAEvB,GAC1E,IAAIF,QAAQnP,KAAKm1C,aAAa/lC,EAAIyJ,EAAIjI,EAAExB,EAAGpP,KAAKm1C,aAAa9lC,EAAIwJ,EAAIjI,EAAEvB,IACrED,GAAKpP,KAAKiR,MAAMumC,MAAQx3C,KAAKiR,MAAMsW,KAAKjV,MAC3CmR,EAAGpU,GAAKrP,KAAKiR,MAAMwmC,MAAQz3C,KAAKiR,MAAMsW,KAAKjV,MAC3C4vC,EAAIkuC,iBAAiB3sE,GAAI,GAG1BzjB,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQi/B,QAAS,OAAQrlB,EAAM,WAAYpF,EAC3E,QAAStW,EAAK,SAAUmwC,EAAY,mBAAoB0pF,KAG3D,MAAO5zH,GAENvH,MAAM6D,OACN7D,MAAM2B,MAAM4F,EAAEkH,SAEf,QAECpD,EAAM0Z,YAGH5rB,KAAKu0C,QAERv0C,KAAKkyH,YAAYruG,EAAM,EAAqBpF,EAAS,QAWxD+uF,oBAAoBphG,UAAU8lH,YAAc,SAASruG,EAAMpF,GAE1Dze,KAAKiR,MAAMwsG,iBAAiB55F,IAU7B2pF,oBAAoBphG,UAAUogF,WAAa,SAAS71E,EAAQxS,EAAI4D,EAAO+b,EAAQrF,EAAQ/W,GAEtF,GAA0B,MAAtB1H,KAAK24C,cAER,OAAO34C,KAAKiR,MAAMu7E,WAAW71E,EAAQxS,EAAI4D,EAAO+b,EAAQrF,EAAQ/W,GAIhE,IAAImc,EAAO7jB,KAAKyjH,WAAW17G,EAAO+b,EAAQrF,EAAQ/W,GAGlD,OAFAmc,EAAO7jB,KAAKiR,MAAMyyG,QAAQ7/F,EAAMlN,EAAQmN,EAAQrF,IAkBlD+uF,oBAAoBphG,UAAU61H,mBAAqB,SAAS95H,EAAK2b,GAKhE,IAFA,IAAIo+B,EAAMliD,KAAKiR,MAAMkxC,gBAAgBr+B,GAEvB,MAAPo+B,GAAeA,EAAIE,UAEzBt+B,EAAS9jB,KAAKiR,MAAM8c,WAAWk0B,UAAUn+B,GACzCo+B,EAAMliD,KAAKiR,MAAMkxC,gBAAgBr+B,GAGlC,IAAIrU,EAAQzP,KAAKiR,MAAMq9E,UAAUxqE,GAGjC,GAAW,OAFPo+B,EAAMliD,KAAKiR,MAAM8c,WAAWq9C,YAAY37D,IAG5C,CACC,IAAImB,EAAI5Q,KAAKiR,MAAMsW,KAAKoH,UACpB9V,EAAI7Y,KAAKiR,MAAMsW,KAAKjV,MACpB8T,EAAQ,IAAIjX,QAAQnP,KAAKm1C,aAAa/lC,EAAIyJ,EAAIjI,EAAExB,EAAGpP,KAAKm1C,aAAa9lC,EAAIwJ,EAAIjI,EAAEvB,GACnF6yC,EAAI9yC,EAAIhG,KAAK2c,MAAMK,EAAMhX,EAAI8yC,EAAIj6C,MAAQ,EAAIjI,KAAKiR,MAAMumC,MAAQ3+B,GAChEqpC,EAAI7yC,EAAIjG,KAAK2c,MAAMK,EAAM/W,EAAI6yC,EAAIr6C,OAAS,EAAI7H,KAAKiR,MAAMwmC,MAAQ5+B,GAGjE,IAAI6yC,EAAM1rD,KAAKkiI,wBAEf,GAAIx2E,EAAM,EACV,CACC,IAAI/pB,EAAc3hC,KAAKiR,MAAMsW,KAAKxV,SAAS+R,GAE3C,GAAmB,MAAf6d,EACJ,CACC,IAAIvyB,EAAIuyB,EAAYvyB,EAAIyJ,EAAIjI,EAAExB,EAC1BC,EAAIsyB,EAAYtyB,EAAIwJ,EAAIjI,EAAEvB,EAE1BjG,KAAKsX,IAAItR,EAAI8yC,EAAI9yC,IAAMs8C,IAE1BxJ,EAAI9yC,EAAIhG,KAAK2c,MAAM3W,IAGhBhG,KAAKsX,IAAIrR,EAAI6yC,EAAI7yC,IAAMq8C,IAE1BxJ,EAAI7yC,EAAIjG,KAAK2c,MAAM1W,MAMvB,OAAOI,GAQR+9F,oBAAoBphG,UAAU81H,sBAAwB,SAAS/5H,GAE9D,OAAQnI,KAAKiR,MAAM4kC,gBAAmB71C,KAAKiR,MAAMknC,SAAW,EAAIn4C,KAAKiR,MAAMwgD,WAkB5E+7C,oBAAoBphG,UAAUq3G,WAAa,SAAS17G,EAAO+b,EAAQrF,EAAQ/W,GAE1E,IAAImc,EAAO,KAQX,GAL0B,MAAtB7jB,KAAK24C,gBAER90B,EAAO7jB,KAAK24C,cAAc70B,EAAQrF,EAAQ/W,IAG/B,MAARmc,EACJ,EACCA,EAAO,IAAIgjE,OAAO9+E,GAAS,KACtBqnF,SAAQ,GACbvrE,EAAK6H,SAAShkB,GAEd,IAAIw6C,EAAM,IAAIopB,WACdppB,EAAIE,UAAW,EACfv+B,EAAK4nD,YAAYvpB,GAGlB,OAAOr+B,GAUR2pF,oBAAoBphG,UAAU6iB,QAAU,WAEvCjvB,KAAKiR,MAAM4rC,oBAAoB78C,MAEb,MAAdA,KAAKqS,QAERrS,KAAKqS,MAAM4c,UACXjvB,KAAKqS,MAAQ,MAGK,MAAfrS,KAAK8+G,SAER9+G,KAAK8+G,OAAO7vF,UACZjvB,KAAK8+G,OAAS,MAGe,MAA1B9+G,KAAKy+H,oBAERz+H,KAAKy+H,kBAAkBxvG,UACvBjvB,KAAKy+H,kBAAoB,MAGA,MAAtBz+H,KAAK+8C,gBAER/8C,KAAKiR,MAAM8c,WAAWwV,eAAevjC,KAAK+8C,eAC1C/8C,KAAKiR,MAAMa,UAAUyxB,eAAevjC,KAAK+8C,eACzC/8C,KAAK+8C,cAAgB,MAGG,MAArB/8C,KAAK6+H,eAER7+H,KAAKiR,MAAMsyB,eAAevjC,KAAK6+H,cAC/B7+H,KAAKiR,MAAMa,UAAUyxB,eAAevjC,KAAK6+H,cACzC7+H,KAAK6+H,aAAe,MAGK,MAAtB7+H,KAAKwrG,gBAERxrG,KAAKiR,MAAMsyB,eAAevjC,KAAKwrG,eAC/BxrG,KAAKwrG,cAAgB,OAIvBvrG,WAAWutG,yBAAqD,IAAxBA,oBAAsCA,yBAAsB5mG,EAqDpG6mG,oBAAoBrhG,UAAU+1H,WAAa,IAAIhyF,QAAQjwC,SAAS0F,cAAgB,aAAc,EAAG,GAOjG6nG,oBAAoBrhG,UAAU6E,MAAQ,KAOtCw8F,oBAAoBrhG,UAAU4oC,SAAU,EAOxCy4D,oBAAoBrhG,UAAU+iG,eAAiBxhG,YAAY2mB,oBAQ3Dm5E,oBAAoBrhG,UAAUuH,UAAY,WAEzC,OAAO3T,KAAKg1C,SAaby4D,oBAAoBrhG,UAAUupC,WAAa,SAASX,GAEnDh1C,KAAKg1C,QAAUA,GAQhBy4D,oBAAoBrhG,UAAU8pC,MAAQ,WAErC,GAAuB,MAAnBl2C,KAAKoiI,WACT,CACC,IAAK,IAAIv9H,EAAI,EAAGA,EAAI7E,KAAKoiI,WAAWjgI,OAAQ0C,IAE3C7E,KAAKoiI,WAAWv9H,GAAGoqB,UAGpBjvB,KAAKoiI,WAAa,KAGQ,MAAvBpiI,KAAKqiI,iBAERriI,KAAKqiI,eAAepzG,UACpBjvB,KAAKqiI,eAAiB,MAGvBriI,KAAKmgI,kBAAoB,KACzBngI,KAAKsiI,iBAAmB,KACxBtiI,KAAKm1C,aAAe,KACpBn1C,KAAK2tG,aAAe,KACpB3tG,KAAKuiI,YAAc,MAapB90B,oBAAoBrhG,UAAUmhH,aAAe,SAAS38E,GAErD,OAAO5wC,KAAKiR,MAAMs8G,gBAQnB9f,oBAAoBrhG,UAAUo2H,sBAAwB,SAAS3wH,EAAOoT,EAAYmB,GAEjF,OAAOpmB,KAAKmiI,YASb10B,oBAAoBrhG,UAAUwmH,eAAiB,SAAShiF,EAAI9sB,GAE3D,OAAO,GAQR2pF,oBAAoBrhG,UAAU2lD,eAAiB,SAASlgD,EAAOiS,GAE9D,OAAO,GAQR2pF,oBAAoBrhG,UAAU4zH,aAAe,WAE5C,GAAuB,MAAnBhgI,KAAKoiI,WACT,CACC,IAAK,IAAIv9H,EAAI,EAAGA,EAAI7E,KAAKoiI,WAAWjgI,OAAQ0C,IAE3C7E,KAAKoiI,WAAWv9H,GAAGoqB,UAGpBjvB,KAAKoiI,WAAa,KAClBpiI,KAAKuiI,YAAc,OASrB90B,oBAAoBrhG,UAAUq2H,sBAAwB,WAE1B,MAAvBziI,KAAKqiI,iBAERriI,KAAKqiI,eAAepzG,UACpBjvB,KAAKqiI,eAAiB,OAUxB50B,oBAAoBrhG,UAAUs2H,iBAAmB,SAAS9xF,GAEzD,OAAO3mC,QAAQ08B,YAAYiK,EAAGrO,aAQ/BkrE,oBAAoBrhG,UAAUu2H,gBAAkB,SAAS/xF,EAAIxqB,GAE5D,IAAIpU,EAAO4+B,EAAG5N,UASd,GANY,MAARhxB,GAAyB,MAAToU,GAAkBwqB,EAAG9N,aAAe1c,EAAMhX,GAAKwhC,EAAG7N,aAAe3c,EAAM/W,IAE1F2C,EAAOhS,KAAKiR,MAAM8kC,UAAU3vB,EAAMhX,EAAGgX,EAAM/W,IAIhC,MAAR2C,IAAiBhS,KAAKiR,MAAM84G,kBAAkB/3G,GAClD,CACC,IAAI2E,EAAS3W,KAAKiR,MAAM8c,WAAWk0B,UAAUjwC,GAEzChS,KAAKiR,MAAM8c,WAAW8zB,SAASlrC,IAAW3W,KAAKiR,MAAM84G,kBAAkBpzG,KAE1E3E,EAAO2E,GAIT,OAAQ3W,KAAKiR,MAAMi7G,aAAal6G,GAAS,KAAOA,GASjDy7F,oBAAoBrhG,UAAUi6D,OAAS,SAASz1B,EAAI9sB,EAAQ8+G,EAAcx8G,GAEzE,GAAIpmB,KAAK2T,cAAgB3T,KAAK4yH,eAAehiF,GAC7C,CAE+B,MAA1B5wC,KAAK6iI,mBAAqD,MAAxB7iI,KAAKiR,MAAM0W,YAEhD3nB,KAAK6iI,kBAAoBv6H,QAAQ2M,KAAKjV,MAAM,WAE3CA,KAAKk2C,WAGNjsC,QAAQD,YAAYhK,KAAKiR,MAAM0W,UAAW,aAAc3nB,KAAK0tG,eAG9D,IAAIhiD,EAAM1rD,KAAKutH,aAAa38E,GAGxBkyF,EAAO,IAAIxzH,aAFG,MAAT8W,EAAiBA,EAAMhX,EAAIwhC,EAAG9N,aAER4oB,GADb,MAATtlC,EAAiBA,EAAM/W,EAAIuhC,EAAG7N,aACC2oB,EAAK,EAAIA,EAAK,EAAIA,GACtDq3E,EAAQ,IAAIzzH,YAAYshC,EAAG9N,YAAc4oB,EAAK9a,EAAG7N,YAAc2oB,EAAK,EAAIA,EAAK,EAAIA,GACjF75C,EAAQ7R,KAAKiR,MAAMsW,KAAKxV,SAAS/R,KAAK2iI,gBAAgB/xF,EAAIxqB,IAGzDpmB,KAAK0iI,iBAAiB9xF,IAAiC,MAAzB5wC,KAAKsiI,kBAAiD,MAArBtiI,KAAK2tG,cAC9D,MAAT97F,GAAmB7R,KAAKiR,MAAM8c,WAAW8zB,SAAS7hD,KAAK2tG,aAAa37F,OACpE1J,QAAQqe,WAAW3mB,KAAKsiI,iBAAkBS,IAAYlxH,GAAS7R,KAAK2tG,eAErE3tG,KAAKsiI,iBAAmB,KACxBtiI,KAAK2tG,aAAe,KACpB3tG,KAAK+gI,SAASnwF,EAAI/+B,EAAOiS,IAG1B9jB,KAAKmgI,kBAAoB,KACzBngI,KAAKm1C,aAAe,KACpB,IAAI6tF,EAAY,KAEhB,GAAuB,MAAnBhjI,KAAKoiI,YAA0C,MAApBpiI,KAAKi5D,cACzB,MAATpnD,GAAiB7R,KAAK2tG,cAAgB97F,GAKvC,IAHA,IAAIsR,EAAK4/G,EAAMpzH,aACXyX,EAAK27G,EAAMnzH,aAEN/K,EAAI,EAAGA,EAAI7E,KAAKoiI,WAAWjgI,OAAQ0C,IAC5C,CACC,IAAI0N,EAAK4Q,EAAKnjB,KAAKoiI,WAAWv9H,GAAG4hB,OAAO9W,aACpC8C,EAAK2U,EAAKpnB,KAAKoiI,WAAWv9H,GAAG4hB,OAAO7W,aACpCiB,EAAM0B,EAAKA,EAAKE,EAAKA,EAEzB,IAAKzS,KAAK2mB,WAAW3mB,KAAKoiI,WAAWv9H,GAAIk+H,EAAOj/G,EAAQ8+G,IAA2B,MAATx8G,GACzEpmB,KAAK2mB,WAAW3mB,KAAKoiI,WAAWv9H,GAAIi+H,EAAMh/G,EAAQ8+G,MACpC,MAAbI,GAAqBnyH,EAAMmyH,GAC7B,CAUC,GATAhjI,KAAKmgI,kBAAoBngI,KAAKi5D,YAAYp0D,GAC1C7E,KAAKm1C,aAAen1C,KAAKuiI,YAAY19H,GACrCm+H,EAAYnyH,GAERA,EAAM7Q,KAAKoiI,WAAWv9H,GAAG4hB,OAAOhX,SAChCe,KAAK7C,YAAYgnB,eAAiB,GACtC9jB,EAAI5I,OAAS,EACb4I,EAAIhJ,QAAU,EAEa,MAAvB7H,KAAKqiI,eACT,CACC,IAAIY,EAAKjjI,KAAKkjI,uBACdD,EAAG30G,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YAC9C5gB,YAAY4gB,YAAc5gB,YAAYylB,YACxC6vG,EAAGtsF,eAAgB,EAEnBssF,EAAG97H,KAAKnH,KAAKiR,MAAMa,UAAU+gD,kBAC7B7yD,KAAKqiI,eAAiBY,EAEtB,IAAIlxH,EAAWzJ,QAAQ2M,KAAKjV,MAAM,WAEjC,OAA6B,MAArBA,KAAK2tG,aAAwB3tG,KAAK2tG,aAAe97F,KAG1D5H,QAAQ06B,oBAAoBs+F,EAAG/9H,KAAMlF,KAAKiR,MAAOc,GAGlD/R,KAAKqiI,eAAe57G,OAAS5V,EAC7B7Q,KAAKqiI,eAAexvH,UAKO,MAA1B7S,KAAKmgI,mBAERngI,KAAKyiI,6BAKNziI,KAAKmgI,kBAAoB,KACzBngI,KAAK2tG,aAAe,KACpB3tG,KAAKm1C,aAAe,MAWtBs4D,oBAAoBrhG,UAAUyG,OAAS,WAEtC,GAAyB,MAArB7S,KAAK2tG,cAA4C,MAApB3tG,KAAKi5D,aAA0C,MAAnBj5D,KAAKoiI,WAClE,CACC,IAAIvwH,EAAQ7R,KAAKiR,MAAMsW,KAAKxV,SAAS/R,KAAK2tG,aAAa37F,MACvDhS,KAAK2tG,aAAe97F,EACpB7R,KAAKsiI,iBAAmB,IAAIhzH,YAAYuC,EAAMzC,EAAGyC,EAAMxC,EAAGwC,EAAM5J,MAAO4J,EAAMhK,QAE7E,IAAK,IAAIhD,EAAI,EAAGA,EAAI7E,KAAKi5D,YAAY92D,OAAQ0C,IAC7C,CACC,IAAIs+H,EAAKnjI,KAAKiR,MAAMuiG,mBAAmB3hG,EAAO7R,KAAKi5D,YAAYp0D,IAC3DitB,EAAM9xB,KAAKwiI,sBAAsB3wH,EAAO7R,KAAKi5D,YAAYp0D,GAAIs+H,GAE7D18G,EAAS,IAAInX,YAAYlG,KAAK2c,MAAMo9G,EAAG/zH,EAAI0iB,EAAI7pB,MAAQ,GAC1DmB,KAAK2c,MAAMo9G,EAAG9zH,EAAIyiB,EAAIjqB,OAAS,GAAIiqB,EAAI7pB,MAAO6pB,EAAIjqB,QACnD7H,KAAKoiI,WAAWv9H,GAAG4hB,OAASA,EAC5BzmB,KAAKoiI,WAAWv9H,GAAGgO,SACnB7S,KAAKsiI,iBAAiBv9H,IAAI/E,KAAKoiI,WAAWv9H,GAAG4hB,QAC7CzmB,KAAKuiI,YAAY19H,GAAKs+H,KAYzB11B,oBAAoBrhG,UAAU20H,SAAW,SAASnwF,EAAI/+B,EAAOiS,GAO5D,GALA9jB,KAAKi5D,YAAwB,MAATpnD,IAAkB7R,KAAK+xD,eAAelgD,EAAOiS,IAChE9jB,KAAKiR,MAAM84G,kBAAkBl4G,EAAMG,MAAWhS,KAAK2T,aAClD3T,KAAKiR,MAAMo2G,4BAA4Bx1G,EAAOiS,IAAiB,GAAM,KAG/C,MAApB9jB,KAAKi5D,YACT,CAIC,GAHAj5D,KAAK2tG,aAAe97F,EACpB7R,KAAKsiI,iBAAmB,IAAIhzH,YAAYuC,EAAMzC,EAAGyC,EAAMxC,EAAGwC,EAAM5J,MAAO4J,EAAMhK,QAEtD,MAAnB7H,KAAKoiI,WACT,CACC,IAAK,IAAIv9H,EAAI,EAAGA,EAAI7E,KAAKoiI,WAAWjgI,OAAQ0C,IAE3C7E,KAAKoiI,WAAWv9H,GAAGoqB,UAGpBjvB,KAAKoiI,WAAa,KAClBpiI,KAAKuiI,YAAc,KAMpB,IAHAviI,KAAKuiI,YAAc,GACnBviI,KAAKoiI,WAAa,GAETv9H,EAAI,EAAGA,EAAI7E,KAAKi5D,YAAY92D,OAAQ0C,IAC7C,CACC,IAAIs+H,EAAKnjI,KAAKiR,MAAMuiG,mBAAmB3hG,EAAO7R,KAAKi5D,YAAYp0D,IAC3DitB,EAAM9xB,KAAKwiI,sBAAsB3wH,EAAO7R,KAAKi5D,YAAYp0D,GAAIs+H,GAE7Dl+H,EAAM6sB,EAAI7sB,IAGV2sB,EAAO,IAAIkrC,aAFF,IAAIxtD,YAAYlG,KAAK2c,MAAMo9G,EAAG/zH,EAAI0iB,EAAI7pB,MAAQ,GAC1DmB,KAAK2c,MAAMo9G,EAAG9zH,EAAIyiB,EAAIjqB,OAAS,GAAIiqB,EAAI7pB,MAAO6pB,EAAIjqB,QACf5C,GACpC2sB,EAAKtD,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YAChD5gB,YAAY0lB,kBAAoB1lB,YAAY4gB,YAC9CqD,EAAK+1C,qBAAsB,EAC3B/1C,EAAKzqB,KAAKnH,KAAKiR,MAAMa,UAAUyjG,qBAG3Br1G,SAASU,WAAsC,GAAzBC,SAASC,eAElCmJ,QAAQD,YAAY4nB,EAAK1sB,KAAM,aAAa,SAASiD,GAIpD,OAFA8B,QAAQm4B,QAAQj6B,IAET,KAKwB,MAA7BypB,EAAK1sB,KAAKsT,iBAEboZ,EAAK1sB,KAAK2O,WAAW2/B,aAAa5hB,EAAK1sB,KAAM0sB,EAAK1sB,KAAK2O,WAAW+B,YAGnE,IAAI7D,EAAWzJ,QAAQ2M,KAAKjV,MAAM,WAEjC,OAA6B,MAArBA,KAAK2tG,aAAwB3tG,KAAK2tG,aAAe97F,KAG1D+f,EAAK/e,SAEL5I,QAAQ06B,oBAAoB/S,EAAK1sB,KAAMlF,KAAKiR,MAAOc,GACnD/R,KAAKsiI,iBAAiBv9H,IAAI6sB,EAAKnL,QAC/BzmB,KAAKoiI,WAAWx1H,KAAKglB,GACrB5xB,KAAKuiI,YAAY31H,KAAKu2H,GAGvBnjI,KAAKsiI,iBAAiB9xH,KAAKxQ,KAAKutH,aAAa38E,SAI7C5wC,KAAKggI,eACLhgI,KAAKyiI,yBAWPh1B,oBAAoBrhG,UAAU82H,qBAAuB,WAEpD,IAAID,EAAK,IAAIxnE,iBAAiB,KAAMz7D,KAAKmvG,eAAgBnvG,KAAKmvG,eAAgBxhG,YAAY+mB,uBAG1F,OAFAuuG,EAAGhwH,QAAUtF,YAAYinB,kBAElBquG,GAQRx1B,oBAAoBrhG,UAAUua,WAAa,SAASiL,EAAMmxG,EAAOj/G,EAAQ8+G,GAExE,OAAOt6H,QAAQqe,WAAWiL,EAAKnL,OAAQs8G,IAQxCt1B,oBAAoBrhG,UAAU6iB,QAAU,WAEvCjvB,KAAKk2C,QAEoB,MAArBl2C,KAAK0tG,eAER1tG,KAAKiR,MAAMiB,MAAMqxB,eAAevjC,KAAK0tG,cACrC1tG,KAAKiR,MAAMsW,KAAKgc,eAAevjC,KAAK0tG,cACpC1tG,KAAKiR,MAAMsyB,eAAevjC,KAAK0tG,cAC/B1tG,KAAK0tG,aAAe,MAGS,MAA1B1tG,KAAK6iI,mBAAqD,MAAxB7iI,KAAKiR,MAAM0W,YAEhD1d,QAAQs5B,eAAevjC,KAAKiR,MAAM0W,UAAW,aAAc3nB,KAAK6iI,mBAChE7iI,KAAK6iI,kBAAoB,OAI3B5iI,WAAWwtG,yBAAqD,IAAxBA,oBAAsCA,yBAAsB7mG,EAuFpGgnG,aAAaxhG,UAAUg3H,eAAiB,GAOxCx1B,aAAaxhG,UAAU4oC,SAAU,EAOjC44D,aAAaxhG,UAAU6gB,IAAM,KAO7B2gF,aAAaxhG,UAAUi3H,UAAY,KAOnCz1B,aAAaxhG,UAAUk3E,SAAW,EAOlCsqB,aAAaxhG,UAAUk3H,SAAW,EAOlC11B,aAAaxhG,UAAUqH,SAAU,EAQjCm6F,aAAaxhG,UAAUuH,UAAY,WAElC,OAAO3T,KAAKg1C,SASb44D,aAAaxhG,UAAUupC,WAAa,SAASX,GAE5Ch1C,KAAKg1C,QAAUA,GAShB44D,aAAaxhG,UAAU0hG,uBAAyB,SAASl9D,GAExD,OAAO3mC,QAAQ48B,UAAU+J,EAAGrO,aAU7BqrE,aAAaxhG,UAAUqkC,UAAY,SAAS3mC,EAAQ8mC,GAEnD,IAAKA,EAAGzO,cAAgBniC,KAAK2T,aAAe3T,KAAKiR,MAAM0C,aACrC,MAAjBi9B,EAAG7+B,aAAuB9H,QAAQk8B,kBAAkByK,EAAGrO,YACxD,CACC,IAAI3lB,EAAStU,QAAQof,UAAU1nB,KAAKiR,MAAM0W,WACtCe,EAASpgB,QAAQigB,gBAAgBvoB,KAAKiR,MAAM0W,WAChDe,EAAOtZ,GAAKwN,EAAOxN,EACnBsZ,EAAOrZ,GAAKuN,EAAOvN,EACnBrP,KAAKqnB,MAAMupB,EAAGlO,OAASha,EAAOtZ,EAAGwhC,EAAGhO,OAASla,EAAOrZ,GAOpDuhC,EAAGxO,SAAQ,KASbwrE,aAAaxhG,UAAUib,MAAQ,SAASjY,EAAGC,GAE1CrP,KAAKs/F,MAAQ,IAAInwF,QAAQC,EAAGC,GAE5B,IAAIsY,EAAY3nB,KAAKiR,MAAM0W,UAE3B,SAAS47G,EAAiBp7H,GAEzB,IAAIyoC,EAAK,IAAIlP,aAAav5B,GACtBsb,EAAKnb,QAAQqgB,aAAahB,EAAWipB,EAAGlO,OAAQkO,EAAGhO,QAKvD,OAHAgO,EAAGvO,OAAS5e,EAAGrU,EACfwhC,EAAGtO,OAAS7e,EAAGpU,EAERuhC,EAGR5wC,KAAKqyC,YAAc/pC,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE9CnI,KAAKw2C,UAAUx2C,KAAKiR,MAAOsyH,EAAiBp7H,OAG7CnI,KAAKwwC,YAAcloC,QAAQ2M,KAAKjV,MAAM,SAASmI,GAE9CnI,KAAK02C,QAAQ12C,KAAKiR,MAAOsyH,EAAiBp7H,OAIvCjI,SAASyC,OAEZsH,QAAQq6B,oBAAoBzjC,SAAU,KAAMb,KAAKqyC,YAAaryC,KAAKwwC,cASrEo9D,aAAaxhG,UAAUoqC,UAAY,SAAS1sC,EAAQ8mC,GAEnD,IAAKA,EAAGzO,cAA8B,MAAdniC,KAAKs/F,MAC7B,CACC,IAAI52E,EAASpgB,QAAQigB,gBAAgBvoB,KAAKiR,MAAM0W,WAC5C/K,EAAStU,QAAQof,UAAU1nB,KAAKiR,MAAM0W,WAC1Ce,EAAOtZ,GAAKwN,EAAOxN,EACnBsZ,EAAOrZ,GAAKuN,EAAOvN,EACnB,IAAID,EAAIwhC,EAAGlO,OAASha,EAAOtZ,EACvBC,EAAIuhC,EAAGhO,OAASla,EAAOrZ,EACvBkD,EAAKvS,KAAKs/F,MAAMlwF,EAAIA,EACpBqD,EAAKzS,KAAKs/F,MAAMjwF,EAAIA,EACpBq8C,EAAM1rD,KAAKiR,MAAMwgD,WAEL,MAAZzxD,KAAKitB,KAAe7jB,KAAKsX,IAAInO,GAAMm5C,GAAQtiD,KAAKsX,IAAIjO,GAAMi5C,KAE7C,MAAZ1rD,KAAKitB,MAERjtB,KAAKitB,IAAMjtB,KAAK+8F,eAKjBz0F,QAAQ2P,iBAERjY,KAAKqmE,OAAOj3D,EAAGC,GACfuhC,EAAGxO,aAUNwrE,aAAaxhG,UAAU2wF,YAAc,WAEd,MAAlB/8F,KAAKqjI,YAERrjI,KAAKqjI,UAAYxiI,SAASG,cAAc,OACxChB,KAAKqjI,UAAUnzF,UAAY,eAC3B5nC,QAAQ8J,WAAWpS,KAAKqjI,UAAWrjI,KAAKojI,iBAGzCpjI,KAAKiR,MAAM0W,UAAUpjB,YAAYvE,KAAKqjI,WACtC,IAAI12H,EAAS3M,KAAKqjI,UAOlB,OALInjI,SAAS+C,UAAY/C,SAASE,OAASS,SAASC,cAAgB,KAAOd,KAAKyT,UAE/EzT,KAAKqjI,UAAY,MAGX12H,GAQRihG,aAAaxhG,UAAU4pC,SAAW,SAASlsC,EAAQ8mC,GAElD,OAAmB,MAAZ5wC,KAAKitB,KAAyC,QAA1BjtB,KAAKitB,IAAIvlB,MAAMgmB,SAS3CkgF,aAAaxhG,UAAUsqC,QAAU,SAAS5sC,EAAQ8mC,GAEjD,IAAI6K,EAASz7C,KAAKg2C,WAClBh2C,KAAKk2C,QAEDuF,IAEHz7C,KAAK4b,QAAQg1B,EAAGrO,YAChBqO,EAAGxO,YAULwrE,aAAaxhG,UAAUwP,QAAU,SAASzT,GAEzC,IAAI0H,EAAO,IAAIP,YAAYtP,KAAKoP,EAAGpP,KAAKqP,EAAGrP,KAAKiI,MAAOjI,KAAK6H,QAC5D7H,KAAKiR,MAAMkgH,aAAathH,EAAM1H,IAQ/BylG,aAAaxhG,UAAU8pC,MAAQ,WAE9B,GAAgB,MAAZl2C,KAAKitB,IAER,GAAI/sB,SAAS+C,UAAY/C,SAASE,OAASS,SAASC,cAAgB,KAAOd,KAAKyT,QAChF,CACC,IAAIob,EAAO7uB,KAAKitB,IAChB3kB,QAAQuM,iBAAiBga,EAAKnnB,MAAO,aAAc,mBACnDmnB,EAAKnnB,MAAMivC,cAAgB,OAC3B9nB,EAAKnnB,MAAMuL,QAAU,EAElBzR,OAAOuR,YAAW,WAEhB8b,EAAKhb,WAAWC,YAAY+a,KAC1B,UAIP7uB,KAAKitB,IAAIpZ,WAAWC,YAAY9T,KAAKitB,KAIvChjB,QAAQy6B,uBAAuB7jC,SAAU,KAAMb,KAAKqyC,YAAaryC,KAAKwwC,aACtExwC,KAAKqyC,YAAc,KACnBryC,KAAKwwC,YAAc,KAEnBxwC,KAAKsjF,SAAW,EAChBtjF,KAAKsjI,SAAW,EAChBtjI,KAAKs/F,MAAQ,KACbt/F,KAAKitB,IAAM,MAQZ2gF,aAAaxhG,UAAUi6D,OAAS,SAASj3D,EAAGC,GAE3CrP,KAAKsjF,SAAWl0E,EAChBpP,KAAKsjI,SAAWj0H,EAEhBrP,KAAK+tG,WAQNH,aAAaxhG,UAAU2hG,QAAU,WAEhC,GAAgB,MAAZ/tG,KAAKitB,IACT,CACC,IAAI7d,EAAIpP,KAAKsjF,SAAWtjF,KAAKiR,MAAMumC,MAC/BnoC,EAAIrP,KAAKsjI,SAAWtjI,KAAKiR,MAAMwmC,MAEnCz3C,KAAKoP,EAAIhG,KAAK2G,IAAI/P,KAAKs/F,MAAMlwF,EAAGA,GAChCpP,KAAKqP,EAAIjG,KAAK2G,IAAI/P,KAAKs/F,MAAMjwF,EAAGA,GAChCrP,KAAKiI,MAAQmB,KAAKC,IAAIrJ,KAAKs/F,MAAMlwF,EAAGA,GAAKpP,KAAKoP,EAC9CpP,KAAK6H,OAAUuB,KAAKC,IAAIrJ,KAAKs/F,MAAMjwF,EAAGA,GAAKrP,KAAKqP,EAEhD,IAAIkD,EAAMrS,SAAe,OAAIF,KAAKiR,MAAMumC,MAAQ,EAC5C/kC,EAAMvS,SAAe,OAAIF,KAAKiR,MAAMwmC,MAAQ,EAEhDz3C,KAAKitB,IAAIvlB,MAAM+U,KAAQzc,KAAKoP,EAAImD,EAAM,KACtCvS,KAAKitB,IAAIvlB,MAAMuV,IAAOjd,KAAKqP,EAAIoD,EAAM,KACrCzS,KAAKitB,IAAIvlB,MAAMO,MAAQmB,KAAKC,IAAI,EAAGrJ,KAAKiI,OAAS,KACjDjI,KAAKitB,IAAIvlB,MAAMG,OAASuB,KAAKC,IAAI,EAAGrJ,KAAK6H,QAAU,OAWrD+lG,aAAaxhG,UAAU6iB,QAAU,WAE3BjvB,KAAKk0H,YAETl0H,KAAKk0H,WAAY,EACjBl0H,KAAKiR,MAAM4rC,oBAAoB78C,MAC/BA,KAAKiR,MAAMsyB,eAAevjC,KAAK6tG,wBAC/B7tG,KAAKiR,MAAMsyB,eAAevjC,KAAKorG,YAC/BprG,KAAKk2C,QAEiB,MAAlBl2C,KAAKqjI,YAERrjI,KAAKqjI,UAAY,QAKpBpjI,WAAW2tG,kBAAuC,IAAjBA,aAA+BA,kBAAehnG,EAiC/EonG,SAAS5hG,UAAUgI,OAAS,UAO5B45F,SAAS5hG,UAAUinC,MAAQ,KAO3B26D,SAAS5hG,UAAU67G,YAAa,EAOhCja,SAAS5hG,UAAUo3H,YAAc,SAAS/8G,KAO1CunF,SAAS5hG,UAAUq3H,YAAc,SAASh9G,EAAQhD,EAAImtB,KAOtDo9D,SAAS5hG,UAAUwP,QAAU,aAO7BoyF,SAAS5hG,UAAUs3H,UAAY,SAASp3H,GAEvCtM,KAAKiR,MAAMua,cAAclf,EAAKtM,KAAK6R,MAAMnK,MAAM4E,GAAM,CAACtM,KAAK6R,MAAMG,QAQlEg8F,SAAS5hG,UAAUu3H,aAAe,SAAS/yF,GAE1C,IAAIt+B,EAAQtS,KAAKiR,MAAMsW,KAAKjV,MACxB9K,EAAKxH,KAAKiR,MAAMsW,KAAKoH,UACrBlL,EAAK,IAAItU,QAAQyhC,EAAG9N,YAAcxwB,EAAQ9K,EAAG4H,EAAGwhC,EAAG7N,YAAczwB,EAAQ9K,EAAG6H,GAG9D,MAAdrP,KAAKqS,OAAsC,MAArBrS,KAAKqS,MAAMoU,SAEpChD,EAAGrU,GAAKpP,KAAKqS,MAAMoU,OAAOxe,MAAQqK,EAAQ,EAC1CmR,EAAGpU,GAAKrP,KAAKqS,MAAMoU,OAAO5e,OAASyK,EAAQ,GAI5C,IAAIm0C,GAAUn+C,QAAQuX,UAAU7f,KAAK04D,eACjChS,GAAUp+C,QAAQuX,UAAU7f,KAAK4jI,oBAAsBn9E,EAC3DhjC,EAAKzjB,KAAK6jI,UAAU7jI,KAAK6lD,YAAY7lD,KAAK8jI,UAAU9jI,KAAK6lD,YAAYpiC,EAAIgjC,GACvEzmD,KAAKioH,aAAejoH,KAAKiR,MAAM8mC,mBAAmBnH,EAAGrO,aAAcmkB,IACrE1mD,KAAKyjI,YAAYzjI,KAAK6R,MAAMkmF,iBAAkBt0E,EAAImtB,GAClD5wC,KAAKwhF,kBACLxhF,KAAK6S,UASNm7F,SAAS5hG,UAAUo1E,gBAAkB,WAEb,MAAnBxhF,KAAK6R,MAAMxD,MAEdrO,KAAK6R,MAAMxD,KAAKjD,MAAMpL,KAAK6R,OAGJ,MAApB7R,KAAK6R,MAAMQ,OAEdrS,KAAK6R,MAAMQ,MAAMjH,MAAMpL,KAAK6R,OAG7B7R,KAAKiR,MAAM2B,aAAaC,OAAO7S,KAAK6R,OAAO,IAQ5Cm8F,SAAS5hG,UAAUssD,YAAc,WAEhC,OAAwB,MAApB14D,KAAK6R,MAAMQ,MAEPrS,KAAK6R,MAAMQ,MAAMqmD,cAGlB,GASRs1C,SAAS5hG,UAAUw3H,iBAAmB,WAErC,OAAwB,MAApB5jI,KAAK6R,MAAMQ,MAEPrS,KAAK6R,MAAMQ,MAAMukD,mBAGlB,GAQRo3C,SAAS5hG,UAAUjF,KAAO,WAEzB,IAAIupB,EAAO1wB,KAAK+jI,iBAEE,MAAd/jI,KAAKqzC,OAERrzC,KAAKqS,MAAQ,IAAIyqD,aAAa,IAAIxtD,YAAY,EAAG,EAAGtP,KAAKqzC,MAAMprC,MAAOjI,KAAKqzC,MAAMxrC,QAAS7H,KAAKqzC,MAAMpuC,KACrGjF,KAAKqS,MAAMs1D,qBAAsB,GAIjC3nE,KAAKqS,MAAQrS,KAAK+8F,YAAYrsE,GAG/B1wB,KAAKgkI,UAAUtzG,IAQhBs9E,SAAS5hG,UAAU2wF,YAAc,SAASrsE,GAIzC,OAAO,IAAI+qC,iBAFE,IAAInsD,YAAY,EAAG,EAAG3B,YAAYyoB,YAAazoB,YAAYyoB,aAEpCzoB,YAAY2oB,iBAAkB3oB,YAAY4oB,qBAQ/Ey3E,SAAS5hG,UAAU43H,UAAY,SAAStzG,GAEnCA,GAAQ1wB,KAAKqS,MAAM2hD,iBAEtBh0D,KAAKqS,MAAMic,QAAU3gB,YAAY4lB,mBACjCvzB,KAAKqS,MAAMlL,KAAKnH,KAAKiR,MAAM0W,aAI3B3nB,KAAKqS,MAAMic,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YAAe5gB,YAAY0lB,kBAAoB1lB,YAAY4gB,YAEhG,MAAfvuB,KAAKoU,QAERpU,KAAKqS,MAAMlL,KAAKnH,KAAKiR,MAAMa,UAAU+gD,mBAIvC5oD,QAAQ06B,oBAAoB3kC,KAAKqS,MAAMnN,KAAMlF,KAAKiR,MAAOjR,KAAK6R,OAC9D7R,KAAKqS,MAAMnN,KAAKwC,MAAM0M,OAASpU,KAAKoU,QAQrC45F,SAAS5hG,UAAUyG,OAAS,WAE3B,GAAkB,MAAd7S,KAAKqS,OAAqC,MAApBrS,KAAK6R,MAAMQ,MACrC,CACC,IAAIoR,EAAKzjB,KAAKwjI,YAAYxjI,KAAK6R,MAAMkmF,kBAErC,GAAU,MAANt0E,EACJ,CACC,IAAIgE,EAAQnf,QAAQuX,UAAU7f,KAAK4jI,oBACnCngH,EAAKzjB,KAAK6lD,YAAY7lD,KAAK6jI,UAAUpgH,GAAKgE,GAE1C,IAAInV,EAAQtS,KAAKiR,MAAMsW,KAAKjV,MACxB9K,EAAKxH,KAAKiR,MAAMsW,KAAKoH,UACzB3uB,KAAKqS,MAAMoU,OAAOrX,EAAIhG,KAAKmnB,OAAO9M,EAAGrU,EAAI5H,EAAG4H,GAAKkD,EAAQtS,KAAKqS,MAAMoU,OAAOxe,MAAQ,GACnFjI,KAAKqS,MAAMoU,OAAOpX,EAAIjG,KAAKmnB,OAAO9M,EAAGpU,EAAI7H,EAAG6H,GAAKiD,EAAQtS,KAAKqS,MAAMoU,OAAO5e,OAAS,GAGpF7H,KAAKqS,MAAMQ,YAWdm7F,SAAS5hG,UAAU23H,eAAiB,WAEnC,OAA0B,MAAnB/jI,KAAK6R,MAAMxD,MAAgBrO,KAAK6R,MAAMxD,KAAKnJ,KAAK2O,YAAc7T,KAAKiR,MAAM0W,WAQjFqmF,SAAS5hG,UAAUy5C,YAAc,SAASpiC,EAAIgE,GAE7C,IAAIhB,EAASzmB,KAAK6R,MAAMgmF,gBACpB10E,EAAK,IAAIhU,QAAQsX,EAAO9W,aAAc8W,EAAO7W,cAC7CmR,EAAM3X,KAAK2X,IAAI0G,GACfxG,EAAM7X,KAAK6X,IAAIwG,GAEnB,OAAOnf,QAAQkb,gBAAgBC,EAAI1C,EAAKE,EAAKkC,IAQ9C6qF,SAAS5hG,UAAUy3H,UAAY,SAASpgH,GAEvC,GAAwB,MAApBzjB,KAAK6R,MAAMQ,MACf,CACC,IAAIoU,EAASzmB,KAAK6R,MAAMgmF,gBAEpB73F,KAAK6R,MAAMQ,MAAMqT,QAEpBjC,EAAGrU,EAAI,EAAIqX,EAAOrX,EAAIqX,EAAOxe,MAAQwb,EAAGrU,GAGrCpP,KAAK6R,MAAMQ,MAAMsT,QAEpBlC,EAAGpU,EAAI,EAAIoX,EAAOpX,EAAIoX,EAAO5e,OAAS4b,EAAGpU,GAI3C,OAAOoU,GASRuqF,SAAS5hG,UAAU03H,UAAY,SAASrgH,EAAIw2G,GAQ3C,OANKA,IAEJx2G,EAAGrU,EAAIpP,KAAKiR,MAAMmnC,KAAK30B,EAAGrU,GAC1BqU,EAAGpU,EAAIrP,KAAKiR,MAAMmnC,KAAK30B,EAAGpU,IAGpBoU,GAQRuqF,SAAS5hG,UAAUzB,WAAa,SAASC,GAEtB,MAAd5K,KAAKqS,OAAoC,MAAnBrS,KAAKqS,MAAMnN,OAEpClF,KAAKqS,MAAMnN,KAAKwC,MAAMgmB,QAAU,EAAY,GAAK,SASnDsgF,SAAS5hG,UAAU8pC,MAAQ,WAE1Bl2C,KAAK2K,YAAW,GAChB3K,KAAK6R,MAAMnK,MAAQ1H,KAAKiR,MAAMw8D,aAAaztE,KAAK6R,MAAMG,MACtDhS,KAAKwhF,mBAQNwsB,SAAS5hG,UAAU6iB,QAAU,WAEV,MAAdjvB,KAAKqS,QAERrS,KAAKqS,MAAM4c,UACXjvB,KAAKqS,MAAQ,OAIfpS,WAAW+tG,cAA+B,IAAbA,SAA2BA,cAAWpnG,EAsDnEqnG,gBAAgB7hG,UAAU6E,MAAQ,KAOlCg9F,gBAAgB7hG,UAAUyF,MAAQ,KAQlCo8F,gBAAgB7hG,UAAU63H,aAAc,EAOxCh2B,gBAAgB7hG,UAAUqC,MAAQ,KAQlCw/F,gBAAgB7hG,UAAU2pH,wBAAyB,EAOnD9nB,gBAAgB7hG,UAAU83H,YAAc,KAOxCj2B,gBAAgB7hG,UAAUqlD,UAAY,EAOtCw8C,gBAAgB7hG,UAAU2sH,iBAAkB,EAQ5C9qB,gBAAgB7hG,UAAU+3H,wBAAyB,EAQnDl2B,gBAAgB7hG,UAAUg4H,gBAAiB,EAO3Cn2B,gBAAgB7hG,UAAUi4H,eAAiB,YAQ3Cp2B,gBAAgB7hG,UAAU8hG,aAAc,EAQxCD,gBAAgB7hG,UAAUk4H,cAAe,EAQzCr2B,gBAAgB7hG,UAAUm4H,0BAA2B,EAOrDt2B,gBAAgB7hG,UAAUo4H,wBAA0B,GAQpDv2B,gBAAgB7hG,UAAUq4H,iBAAmB,EAQ7Cx2B,gBAAgB7hG,UAAUs4H,eAAiB,EAO3Cz2B,gBAAgB7hG,UAAUjF,KAAO,WAmBhC,GAjBAnH,KAAKiR,MAAQjR,KAAK6R,MAAM0V,KAAKtW,MAC7BjR,KAAK2kI,gBAAkB3kI,KAAK4kI,mBAAmB5kI,KAAK6R,OACpD7R,KAAKymB,OAAS,IAAInX,YAAYtP,KAAK2kI,gBAAgBv1H,EAAGpP,KAAK2kI,gBAAgBt1H,EAAGrP,KAAK2kI,gBAAgB18H,MAAOjI,KAAK2kI,gBAAgB98H,QAC/H7H,KAAK00H,gBAAkB10H,KAAK6kI,qBAAqB7kI,KAAKymB,QAEtDzmB,KAAK00H,gBAAgBpmG,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YAAe5gB,YAAYylB,YAAczlB,YAAY4gB,YACvHvuB,KAAK00H,gBAAgB/9E,eAAgB,EACrC32C,KAAK00H,gBAAgBxxG,SAAWjE,OAAOjf,KAAK6R,MAAMnK,MAAMiG,YAAY2W,iBAAmB,KACvFtkB,KAAK00H,gBAAgBvtH,KAAKnH,KAAKiR,MAAMa,UAAU+gD,kBAC/C5oD,QAAQ06B,oBAAoB3kC,KAAK00H,gBAAgBxvH,KAAMlF,KAAKiR,MAAOjR,KAAK6R,OAEpE7R,KAAKiR,MAAM25D,cAAc5qE,KAAK6R,MAAMG,OAEvChS,KAAK00H,gBAAgBp8D,UAAU3qD,YAAYknB,uBAIxCs2E,eAAe/+F,UAAU8rH,UAAY,GAAKl4H,KAAKiR,MAAM8/G,oBAAsB5lB,eAAe/+F,UAAU8rH,SACxG,CACC,IAAIhmF,EAAYlyC,KAAKiR,MAAMm1G,gBAAgBpmH,KAAK6R,MAAMG,MAGtD,GAFAhS,KAAK8kI,OAAS,GAEV5yF,GAAclyC,KAAKiR,MAAM87G,eAAe/sH,KAAK6R,MAAMG,OACtDhS,KAAK6R,MAAM5J,OAAS,GAAKjI,KAAK6R,MAAMhK,QAAU,EAC/C,CACC,IAAIhD,EAAI,EAEJqtC,IAEElyC,KAAKikI,cAETjkI,KAAK8kI,OAAOl4H,KAAK5M,KAAK80H,YAAY,YAAajwH,MAC/C7E,KAAK8kI,OAAOl4H,KAAK5M,KAAK80H,YAAY,WAAYjwH,MAC9C7E,KAAK8kI,OAAOl4H,KAAK5M,KAAK80H,YAAY,YAAajwH,MAC/C7E,KAAK8kI,OAAOl4H,KAAK5M,KAAK80H,YAAY,WAAYjwH,MAC9C7E,KAAK8kI,OAAOl4H,KAAK5M,KAAK80H,YAAY,WAAYjwH,MAC9C7E,KAAK8kI,OAAOl4H,KAAK5M,KAAK80H,YAAY,YAAajwH,MAC/C7E,KAAK8kI,OAAOl4H,KAAK5M,KAAK80H,YAAY,WAAYjwH,OAG/C7E,KAAK8kI,OAAOl4H,KAAK5M,KAAK80H,YAAY,YAAajwH,OAGhD,IAAIq9C,EAAMliD,KAAKiR,MAAMiB,MAAMk5D,YAAYprE,KAAK6R,MAAMG,MAEvC,MAAPkwC,GAAgBA,EAAIE,UAAapiD,KAAKiR,MAAMu8D,WAAWxtE,KAAK6R,MAAMG,QACrEhS,KAAKiR,MAAM87G,eAAe/sH,KAAK6R,MAAMG,QAGrChS,KAAK+kI,WAAa/kI,KAAK80H,YAAYnnH,YAAYonB,oBAAqB9qB,QAAQs9B,aAC3E55B,YAAY0oB,kBAAmB1oB,YAAY6oB,wBAC5Cx2B,KAAK8kI,OAAOl4H,KAAK5M,KAAK+kI,kBAGf/kI,KAAKiR,MAAM25D,cAAc5qE,KAAK6R,MAAMG,QAAUhS,KAAKiR,MAAMm1G,gBAAgBpmH,KAAK6R,MAAMG,OAC5FhS,KAAK6R,MAAM5J,MAAQ,GAAKjI,KAAK6R,MAAMhK,OAAS,IAE5C7H,KAAK+kI,WAAa/kI,KAAK80H,YAAYnnH,YAAYknB,sBAC9C5qB,QAAQs9B,aAAc,KAAM55B,YAAY6oB,wBACzCx2B,KAAK8kI,OAAOl4H,KAAK5M,KAAK+kI,aAKpB/kI,KAAKglI,4BAERhlI,KAAKilI,cAAgBjlI,KAAK80H,YAAY90H,KAAKqkI,eAAgBp6H,QAAQu9B,gBAClE75B,YAAYyoB,YAAc,EAAGzoB,YAAY2oB,kBAC1Ct2B,KAAK8kI,OAAOl4H,KAAK5M,KAAKilI,gBAGvBjlI,KAAKklI,cAAgBllI,KAAKmlI,sBAC1BnlI,KAAK6S,SAED7S,KAAKukI,0BAERvkI,KAAKolI,mBASPn3B,gBAAgB7hG,UAAU44H,wBAA0B,WAEnD,OAAOhlI,KAAKiR,MAAM0C,aAAe3T,KAAK+4H,iBAAmB/4H,KAAKiR,MAAM+7G,gBAAgBhtH,KAAK6R,MAAMG,QAC7Fm5F,eAAe/+F,UAAU8rH,UAAY,GAAKl4H,KAAKiR,MAAM8/G,oBAAsB5lB,eAAe/+F,UAAU8rH,WACrGl4H,KAAK6R,MAAM5J,OAAS,GAAKjI,KAAK6R,MAAMhK,QAAU,GAQhDomG,gBAAgB7hG,UAAU69G,mBAAqB,SAASr5E,GAEvD,OAAO3mC,QAAQ08B,YAAYiK,EAAGrO,aAA6D,SAA9CviC,KAAK6R,MAAMnK,MAAMiG,YAAYyvB,eAQ3E6wE,gBAAgB7hG,UAAUi5H,gBAAkB,SAASxzH,EAAO++B,GAE3D,OAAO,GAQRq9D,gBAAgB7hG,UAAU+4H,oBAAsB,WAE/C,OAAO,MAQRl3B,gBAAgB7hG,UAAUg5H,gBAAkB,WAE3C,IAAI/wH,EAAWrU,KAAKiR,MAAMm4E,cAAcppF,KAAK6R,MAAMG,MAEnD,GAAIqC,EAASlS,OAAS,IAErBnC,KAAKslI,UAAYtlI,KAAKiR,MAAMsW,KAAK64E,UAAU/rF,GAErB,MAAlBrU,KAAKslI,WACT,CACC,IAAIzsH,EAAI7Y,KAAK6R,MAAM0V,KAAKjV,MACpB1B,EAAI5Q,KAAK6R,MAAM0V,KAAKoH,UAExB3uB,KAAKslI,UAAUl2H,GAAKpP,KAAK6R,MAAMzC,EAC/BpP,KAAKslI,UAAUj2H,GAAKrP,KAAK6R,MAAMxC,EAC/BrP,KAAKslI,UAAUl2H,GAAKyJ,EACpB7Y,KAAKslI,UAAUj2H,GAAKwJ,EACpB7Y,KAAKslI,UAAUr9H,OAAS4Q,EACxB7Y,KAAKslI,UAAUz9H,QAAUgR,EACzB7Y,KAAKmgB,GAAKngB,KAAK6R,MAAMzC,EAAIyJ,EAAIjI,EAAExB,EAC/BpP,KAAKogB,GAAKpgB,KAAK6R,MAAMxC,EAAIwJ,EAAIjI,EAAEvB,IAWlC4+F,gBAAgB7hG,UAAUw4H,mBAAqB,SAAS/yH,GAEvD,OAAO,IAAIvC,YAAYlG,KAAK2c,MAAMlU,EAAMzC,GAAIhG,KAAK2c,MAAMlU,EAAMxC,GAAIjG,KAAK2c,MAAMlU,EAAM5J,OAAQmB,KAAK2c,MAAMlU,EAAMhK,UAQ5GomG,gBAAgB7hG,UAAUm5H,2BAA6B,SAAS9+G,GAE/D,OAAOzmB,KAAK6kI,qBAAqBp+G,IAQlCwnF,gBAAgB7hG,UAAUy4H,qBAAuB,SAASp+G,GAEzD,IAAIpU,EAAQ,IAAIopD,iBACfnsD,YAAYwB,cAAc2V,GAC1B,KAAMzmB,KAAKwlI,qBAIZ,OAHAnzH,EAAMuhD,YAAc5zD,KAAKylI,0BACzBpzH,EAAMy/C,SAAW9xD,KAAK0lI,oBAEfrzH,GAQR47F,gBAAgB7hG,UAAUo5H,kBAAoB,WAE7C,OAAO73H,YAAYgoB,wBAQpBs4E,gBAAgB7hG,UAAUq5H,wBAA0B,WAEnD,OAAO93H,YAAYioB,8BAQpBq4E,gBAAgB7hG,UAAUs5H,kBAAoB,WAE7C,OAAO/3H,YAAYmoB,yBASpBm4E,gBAAgB7hG,UAAU0oH,YAAc,SAAS1gH,EAAQ3F,EAAOof,EAAMu2B,GAIrE,IAAI39B,EAAS,IAAInX,YAAY,EAAG,EAFhCue,EAAOA,GAAQlgB,YAAYyoB,YAEcvI,GACrCgnG,EAAQ70H,KAAK2lI,iBAAiBl/G,EAAQhY,EAAO21C,GA4BjD,OA1BIywE,EAAM7gE,iBAAsC,MAAnBh0D,KAAK6R,MAAMxD,MAAgBrO,KAAK6R,MAAMxD,KAAKnJ,KAAK2O,YAAc7T,KAAKiR,MAAM0W,WAErGktG,EAAMpuG,OAAO5e,QAAU,EACvBgtH,EAAMpuG,OAAOxe,OAAS,EACtB4sH,EAAMvmG,QAAU3gB,YAAY4lB,mBAC5BshG,EAAM1tH,KAAKnH,KAAKiR,MAAM0W,aAItBktG,EAAMvmG,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YACjD5gB,YAAY0lB,kBAAoB1lB,YAAY4gB,YAC9CsmG,EAAM1tH,KAAKnH,KAAKiR,MAAMa,UAAU+gD,mBAGjC5oD,QAAQ06B,oBAAoBkwF,EAAM3vH,KAAMlF,KAAKiR,MAAOjR,KAAK6R,OAErD7R,KAAKiR,MAAM0C,aAEdkhH,EAAMv8D,UAAUlkD,GAGZpU,KAAK4lI,eAAen3H,KAExBomH,EAAMjqH,SAAU,GAGViqH,GASR5mB,gBAAgB7hG,UAAUw5H,eAAiB,SAASn3H,GAEnD,OAAO,GAURw/F,gBAAgB7hG,UAAUu5H,iBAAmB,SAASl/G,EAAQhY,EAAO21C,GAEpE,GAAwB,MAApBpkD,KAAKkkI,YACT,CAEC,IAAI7xH,EAAQ,IAAIyqD,aADhBr2C,EAAS,IAAInX,YAAYmX,EAAOrX,EAAGqX,EAAOpX,EAAGrP,KAAKkkI,YAAYj8H,MAAOjI,KAAKkkI,YAAYr8H,QACjD7H,KAAKkkI,YAAYj/H,KAKtD,OAFAoN,EAAMs1D,qBAAsB,EAErBt1D,EAEH,OAAI5D,GAASxE,QAAQu9B,gBAElB,IAAIk0B,UAAUj1C,EAAQ29B,GAAaz2C,YAAY2oB,iBAAkB3oB,YAAY4oB,oBAI7E,IAAIklC,iBAAiBh1C,EAAQ29B,GAAaz2C,YAAY2oB,iBAAkB3oB,YAAY4oB,qBAU7F03E,gBAAgB7hG,UAAUy5H,YAAc,SAASxzH,EAAOjD,EAAGC,GAE7C,MAATgD,IAEHA,EAAMoU,OAAOrX,EAAIhG,KAAKmnB,MAAMnhB,EAAIiD,EAAMoU,OAAOxe,MAAQ,GACrDoK,EAAMoU,OAAOpX,EAAIjG,KAAKmnB,MAAMlhB,EAAIgD,EAAMoU,OAAO5e,OAAS,GAGpC,MAAdwK,EAAMnN,MAA4C,QAA5BmN,EAAMnN,KAAKwC,MAAMgmB,SAE1Crb,EAAMQ,WAWTo7F,gBAAgB7hG,UAAU05H,kBAAoB,SAASl1F,GAGtD,IAAI8a,EAAQzhD,QAAQm5B,aAAawN,EAAGrO,YAAgC,EAAjBviC,KAAKyxD,UACpDqkE,EAAO91H,KAAK+1H,yBAA2B71H,SAASE,OAASsrD,EAAM,GAClE,IAAIp8C,YAAYshC,EAAG9N,YAAc4oB,EAAK9a,EAAG7N,YAAc2oB,EAAK,EAAIA,EAAK,EAAIA,GAAO,KAEjF,SAASq6E,EAAW1zH,GAEnB,OAAgB,MAATA,IAAkBu+B,EAAGnO,SAASpwB,IAAkB,MAAPyjH,GAAextH,QAAQqe,WAAWtU,EAAMoU,OAAQqvG,IACnE,QAA5BzjH,EAAMnN,KAAKwC,MAAMgmB,SAAoD,UAA/Brb,EAAMnN,KAAKwC,MAAM6D,YAGzD,GAA0B,MAAtBvL,KAAKklI,eAAyBllI,KAAKgmI,oBAAoBp1F,GAG1D,IAAK,IAAI/rC,EAAI7E,KAAKklI,cAAc/iI,OAAS,EAAG0C,GAAK,EAAGA,IAEnD,GAAIkhI,EAAW/lI,KAAKklI,cAAcrgI,GAAGwN,OAGpC,OAAOpI,QAAQw9B,cAAgB5iC,EAKlC,GAAIkhI,EAAW/lI,KAAKilI,eAEnB,OAAOh7H,QAAQu9B,gBAEX,GAAIu+F,EAAW/lI,KAAK+kI,YAExB,OAAO96H,QAAQs9B,aAGhB,GAAmB,MAAfvnC,KAAK8kI,OAER,IAASjgI,EAAI,EAAGA,EAAI7E,KAAK8kI,OAAO3iI,OAAQ0C,IAEvC,GAAIkhI,EAAW/lI,KAAK8kI,OAAOjgI,IAE1B,OAAOA,EAKV,OAAO,MASRopG,gBAAgB7hG,UAAU45H,oBAAsB,SAASp1F,GAExD,OAAO,GAURq9D,gBAAgB7hG,UAAUqkC,UAAY,SAAS3mC,EAAQ8mC,GAEtD,IAAI8a,EAAQzhD,QAAQm5B,aAAawN,EAAGrO,YAAgC,EAAjBviC,KAAKyxD,UAExD,IAAK7gB,EAAGzO,cAAgBniC,KAAKiR,MAAM0C,cAAgB+3C,EAAM,GAAK9a,EAAG7+B,YAAc/R,KAAK6R,OACpF,CACC,IAAIo0H,EAASjmI,KAAK8lI,kBAAkBl1F,GAEtB,MAAVq1F,IAEHjmI,KAAKqnB,MAAMupB,EAAG9N,YAAa8N,EAAG7N,YAAakjG,GAC3Cr1F,EAAGxO,aAWN6rE,gBAAgB7hG,UAAU85H,oBAAsB,WAE/C,OAA2B,MAApBlmI,KAAK6R,MAAMQ,OAA0C,MAAzBrS,KAAK6R,MAAMQ,MAAMy2C,MAA2C,MAA3B9oD,KAAK6R,MAAMQ,MAAMw2C,QAQtFolD,gBAAgB7hG,UAAUib,MAAQ,SAASjY,EAAGC,EAAGZ,GAEhD,GAA4B,MAAxBzO,KAAK00H,gBACT,CACC10H,KAAKw6H,kBAAoBx6H,KAAKkuG,aAAkE,GAAnDluG,KAAKiR,MAAMiB,MAAMiB,cAAcnT,KAAK6R,MAAMG,MACvFhS,KAAKgtG,aAAc,EACnBhtG,KAAKmmI,aAAe,EACpBnmI,KAAKomI,aAAe,EACpBpmI,KAAKyO,MAAQA,EACbzO,KAAKmyC,OAAS/iC,EACdpP,KAAKoyC,OAAS/iC,EAGd,IAAI6C,EAAQlS,KAAK6R,MAAM0V,KAAKtW,MAAMiB,MAC9ByE,EAASzE,EAAM+vC,UAAUjiD,KAAK6R,MAAMG,MA6BxC,GA3BIhS,KAAK6R,MAAM0V,KAAK0lD,aAAet2D,IAAWzE,EAAM2vC,SAASlrC,IAAWzE,EAAMC,OAAOwE,MAEpF3W,KAAK6jH,YAAc7jH,KAAK6R,MAAM0V,KAAKtW,MAAMsW,KAAKxV,SAAS4E,IAIxD3W,KAAK00H,gBAAgBxvH,KAAKwC,MAAMgmB,QAAWjf,GAASxE,QAAQu9B,gBAAmB,SAAW,OAGrFxnC,KAAKw6H,oBAAqBx6H,KAAKkmI,wBAEnClmI,KAAKqmI,QAAUrmI,KAAK6kI,qBAAqB7kI,KAAKymB,QAExCvmB,SAAS+C,QAAyE,GAA/Dgc,OAAOjf,KAAK6R,MAAMnK,MAAMiG,YAAY2W,iBAAmB,MAC5D,MAAnBtkB,KAAK6R,MAAMxD,MAAgBrO,KAAK6R,MAAMxD,KAAKnJ,KAAK2O,YAAc7T,KAAKiR,MAAM0W,WAOzE3nB,KAAKqmI,QAAQ/3G,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YACxD5gB,YAAYylB,YAAczlB,YAAY4gB,YACxCvuB,KAAKqmI,QAAQl/H,KAAKnH,KAAKiR,MAAMsW,KAAKsrC,oBAPlC7yD,KAAKqmI,QAAQ/3G,QAAU3gB,YAAY4lB,mBACnCvzB,KAAKqmI,QAAQl/H,KAAKnH,KAAKiR,MAAM0W,aAU3BlZ,GAASxE,QAAQu9B,gBACrB,CAEC,IAAIpc,EAAMprB,KAAKsmI,4BAEX/zH,EAAK6Y,EAAIhc,EAAIpP,KAAK6R,MAAMlC,aACxB8C,EAAK2Y,EAAI/b,EAAIrP,KAAK6R,MAAMjC,aAE5B5P,KAAKumI,WAAoB,GAANh0H,EAAgC,IAArBnJ,KAAKo9H,KAAK/zH,EAAKF,GAAYnJ,KAAK2W,GAAK,GAAOtN,EAAK,EAAK,IAAM,EAC1FzS,KAAKymI,UAAYr9H,KAAKqY,KAAKlP,EAAKA,EAAKE,EAAKA,GAI3C,GAAIzS,KAAKw6H,kBACT,CACCx6H,KAAK0mI,aAEDj4H,GAASxE,QAAQu9B,gBAEpBxnC,KAAKilI,cAAc//H,KAAKwC,MAAMgmB,QAAU,GAEhCjf,GAASxE,QAAQs9B,aAEzBvnC,KAAK+kI,WAAW7/H,KAAKwC,MAAMgmB,QAAU,GAEd,MAAf1tB,KAAK8kI,QAAwC,MAAtB9kI,KAAK8kI,OAAOr2H,GAE3CzO,KAAK8kI,OAAOr2H,GAAOvJ,KAAKwC,MAAMgmB,QAAU,GAEhCjf,GAASxE,QAAQw9B,eAAuC,MAAtBznC,KAAKklI,eAE/CllI,KAAKklI,cAAcj7H,QAAQw9B,cAAgBh5B,GAAO9D,YAAW,GAI9D,IAAI2I,EAAQtT,KAAKiR,MAAMsC,SAASvT,KAAK6R,MAAMG,MAC3ChS,KAAK2mI,aAAe,GAEpB,IAAK,IAAI9hI,EAAI,EAAGA,EAAIyO,EAAMnR,OAAQ0C,IAClC,CACC,IAAIyqG,EAAUtvG,KAAKiR,MAAM2vF,sBAAsByqB,WAAW/3G,EAAMzO,IAEjD,MAAXyqG,GAEHtvG,KAAK2mI,aAAa/5H,KAAK0iG,OAY5BrB,gBAAgB7hG,UAAUkvH,kBAAoB,SAAS1wH,GAEtD,GAAmB,MAAf5K,KAAK8kI,OAER,IAAK,IAAIjgI,EAAI,EAAGA,EAAI7E,KAAK8kI,OAAO3iI,OAAQ0C,IAEvC7E,KAAK8kI,OAAOjgI,GAAGK,KAAKwC,MAAMgmB,QAAU,EAAY,GAAK,OAIvD,GAA0B,MAAtB1tB,KAAKklI,cAER,IAASrgI,EAAI,EAAGA,EAAI7E,KAAKklI,cAAc/iI,OAAQ0C,IAE9C7E,KAAKklI,cAAcrgI,GAAG8F,WAAWC,IAYpCqjG,gBAAgB7hG,UAAUs6H,WAAa,WAEtC1mI,KAAKs7H,mBAAkB,IAUxBrtB,gBAAgB7hG,UAAUw6H,eAAiB,SAASh2F,GAE/C5wC,KAAKgtG,aAA8B,MAAfhtG,KAAKmyC,QAAiC,MAAfnyC,KAAKoyC,SAE/CnoC,QAAQm5B,aAAawN,EAAGrO,aAC3Bn5B,KAAKsX,IAAIkwB,EAAG9N,YAAc9iC,KAAKmyC,QAAUnyC,KAAKiR,MAAMwgD,WACpDroD,KAAKsX,IAAIkwB,EAAG7N,YAAc/iC,KAAKoyC,QAAUpyC,KAAKiR,MAAMwgD,aAEpDzxD,KAAKgtG,aAAc,IAUtBiB,gBAAgB7hG,UAAUm/F,WAAa,SAAS36D,KAOhDq9D,gBAAgB7hG,UAAUkuH,WAAa,aAOvCrsB,gBAAgB7hG,UAAUy6H,WAAa,SAASxmH,GAE/C,OAAOjX,KAAK2c,MAAc,GAAR1F,GAAc,IAQjC4tF,gBAAgB7hG,UAAUmuH,YAAc,SAASp4H,GAEhD,OAAOiH,KAAK2c,MAAe,IAAT5jB,GAAgB,KAQnC8rG,gBAAgB7hG,UAAUoqC,UAAY,SAAS1sC,EAAQ8mC,GAEjDA,EAAGzO,cAA8B,MAAdniC,KAAKyO,MAkCnBzO,KAAKiR,MAAMimC,aAA6C,MAA9Bl3C,KAAK8lI,kBAAkBl1F,IAE1DA,EAAGxO,SAAQ,IAjCXpiC,KAAK4mI,eAAeh2F,GAEf5wC,KAAKgtG,cAELhtG,KAAKyO,OAASxE,QAAQw9B,cAEC,MAAtBznC,KAAKklI,gBAERllI,KAAKklI,cAAcj7H,QAAQw9B,cAAgBznC,KAAKyO,OAAOk1H,aAAa/yF,GACpE5wC,KAAKklI,cAAcj7H,QAAQw9B,cAAgBznC,KAAKyO,OAAOgtC,QAAS,GAGzDz7C,KAAKyO,OAASxE,QAAQs9B,aAE9BvnC,KAAK8mI,UAAUl2F,GAEP5wC,KAAKyO,OAASxE,QAAQu9B,gBAE9BxnC,KAAK+mI,aAAan2F,GAIlB5wC,KAAKgnI,aAAap2F,GAGnB5wC,KAAKurG,WAAW36D,IAGjBA,EAAGxO,YAcL6rE,gBAAgB7hG,UAAU06H,UAAY,SAASl2F,GAE9C,IAAIxqB,EAAQ,IAAIjX,QAAQyhC,EAAG9N,YAAa8N,EAAG7N,aACvCv7B,EAAKxH,KAAKiR,MAAMsW,KAAKoH,UACrBrc,EAAQtS,KAAKiR,MAAMsW,KAAKjV,MAExBtS,KAAKiR,MAAM8mC,mBAAmBnH,EAAGrO,cAEpCnc,EAAMhX,GAAKpP,KAAKiR,MAAMmnC,KAAKhyB,EAAMhX,EAAIkD,EAAQ9K,EAAG4H,GAAK5H,EAAG4H,GAAKkD,EAC7D8T,EAAM/W,GAAKrP,KAAKiR,MAAMmnC,KAAKhyB,EAAM/W,EAAIiD,EAAQ9K,EAAG6H,GAAK7H,EAAG6H,GAAKiD,GAG9D,IAAI7D,EAA+B,MAAtBzO,KAAKilI,cAAyBjlI,KAAK8kI,OAAO3iI,OAAS,EAAInC,KAAK8kI,OAAO3iI,OAAS,EACzFnC,KAAK6lI,YAAY7lI,KAAK8kI,OAAOr2H,GAAQ2X,EAAMhX,EAAGgX,EAAM/W,IAQrD4+F,gBAAgB7hG,UAAU26H,aAAe,SAASn2F,GAEjD,IAAIxqB,EAAQ,IAAIjX,QAAQyhC,EAAG9N,YAAa8N,EAAG7N,aACvCxwB,EAAKvS,KAAK6R,MAAMzC,EAAIpP,KAAK6R,MAAM5J,MAAQ,EAAIme,EAAMhX,EACjDqD,EAAKzS,KAAK6R,MAAMxC,EAAIrP,KAAK6R,MAAMhK,OAAS,EAAIue,EAAM/W,EAWtD,GAVArP,KAAKinI,aAAsB,GAAN10H,EAAgC,IAArBnJ,KAAKo9H,KAAK/zH,EAAKF,GAAYnJ,KAAK2W,GAAK,GAAOtN,EAAK,EAAK,IAAM,EAExFF,EAAK,IAERvS,KAAKinI,cAAgB,KAGtBjnI,KAAKinI,cAAgBjnI,KAAKumI,WAGtBvmI,KAAKokI,gBAAkBpkI,KAAKiR,MAAM8mC,mBAAmBnH,EAAGrO,YAC5D,CACKhwB,EAAK6T,EAAMhX,EAAIpP,KAAK6R,MAAMlC,aAC1B8C,EAAK2T,EAAM/W,EAAIrP,KAAK6R,MAAMjC,aAD9B,IAEI0V,EAAOlc,KAAKqY,KAAKlP,EAAKA,EAAKE,EAAKA,GAEhC6S,EAAOtlB,KAAKymI,UAAY,EAE3BS,OAAS,GAED5hH,EAAOtlB,KAAKymI,UAAY,GAEhCS,OAAS,EAITA,OAAS,EAGVlnI,KAAKinI,aAAe79H,KAAK2c,MAAM/lB,KAAKinI,aAAeC,QAAUA,YAI7DlnI,KAAKinI,aAAejnI,KAAK6mI,WAAW7mI,KAAKinI,cAG1CjnI,KAAK00H,gBAAgBxxG,SAAWljB,KAAKinI,aACrCjnI,KAAK00H,gBAAgB7hH,SAEjB7S,KAAKw6H,mBAERx6H,KAAKk7H,iBASPjtB,gBAAgB7hG,UAAU46H,aAAe,SAASp2F,GAEjD,IAAIy/C,EAAK,IAAIlhF,QAAQnP,KAAK6R,MAAMlC,aAAc3P,KAAK6R,MAAMjC,cACrD6X,EAAQnf,QAAQuX,UAAU7f,KAAK6R,MAAMnK,MAAMiG,YAAY2W,iBAAmB,KAC1E8B,EAAQ,IAAIjX,QAAQyhC,EAAG9N,YAAa8N,EAAG7N,aACvCv7B,EAAKxH,KAAKiR,MAAMsW,KAAKoH,UACrBrc,EAAQtS,KAAKiR,MAAMsW,KAAKjV,MACxByO,EAAM3X,KAAK2X,KAAK0G,GAChBxG,EAAM7X,KAAK6X,KAAKwG,GAOhB3F,EAAKb,GALL1O,EAAK6T,EAAMhX,EAAIpP,KAAKmyC,QAKJpxB,GAJhBtO,EAAK2T,EAAM/W,EAAIrP,KAAKoyC,QAMxB7/B,EAHSwO,EAAMxO,EAAK0O,EAAMxO,EAI1BA,EAAKqP,EAEL,IAAIogC,EAAMliD,KAAKiR,MAAMkxC,gBAAgBniD,KAAK6R,MAAMG,MAOhD,GANAhS,KAAKmnI,eAAiBnnI,KAAKu1H,MAAMrzE,EAAK3vC,EAAKD,EAAOG,EAAKH,EAAOtS,KAAKyO,MAClEzO,KAAKiR,MAAM8mC,mBAAmBnH,EAAGrO,YAAa,EAC9C,IAAIpzB,QAAQ,EAAG,GAAInP,KAAKiqH,mBAAmBr5E,GAC3C5wC,KAAKqlI,gBAAgBrlI,KAAK6R,MAAO++B,KAG7BsR,EAAIE,SACT,CACC,IAAI/4C,EAAMrJ,KAAKiR,MAAM61G,wBAWrB,GARW,MAAPz9G,GAAmC,MAApBrJ,KAAK6jH,eAEvBx6G,EAAMiG,YAAYwB,cAAczH,IAE5B+F,IAAMpP,KAAK6jH,YAAYz0G,EAAI5H,EAAG4H,EAAIkD,GAASA,EAC/CjJ,EAAIgG,IAAMrP,KAAK6jH,YAAYx0G,EAAI7H,EAAG6H,EAAIiD,GAASA,GAG5CtS,KAAKiR,MAAMg2G,iBAAiBjnH,KAAK6R,MAAMG,MAC3C,CACC,IAAInB,EAAM7Q,KAAKiR,MAAM41G,uBAAuB7mH,KAAK6R,MAAMG,MAEvD,GAAW,MAAPnB,EACJ,CACC,IAAIq2G,EAAUlnH,KAAKiR,MAAMk2G,WAAWnnH,KAAK6R,MAAMG,MAE3Ck1G,EAAU,KAEbr2G,EAAMvB,YAAYwB,cAAcD,IAE5BzB,GAAKyB,EAAI5I,MAAQi/G,EACrBr2G,EAAIxB,GAAKwB,EAAIhJ,OAASq/G,EACtBr2G,EAAI5I,OAAS,EAAI4I,EAAI5I,MAAQi/G,EAC7Br2G,EAAIhJ,QAAU,EAAIgJ,EAAIhJ,OAASq/G,GAGrB,MAAP79G,EAEHA,EAAMwH,GAINxH,EAAMiG,YAAYwB,cAAczH,IAC5B8G,UAAUU,IAKN,MAAPxH,IAECrJ,KAAKmnI,eAAe/3H,EAAI/F,EAAI+F,IAE/BpP,KAAKmnI,eAAel/H,OAASoB,EAAI+F,EAAIpP,KAAKmnI,eAAe/3H,EACzDpP,KAAKmnI,eAAe/3H,EAAI/F,EAAI+F,GAGzBpP,KAAKmnI,eAAe93H,EAAIhG,EAAIgG,IAE/BrP,KAAKmnI,eAAet/H,QAAUwB,EAAIgG,EAAIrP,KAAKmnI,eAAe93H,EAC1DrP,KAAKmnI,eAAe93H,EAAIhG,EAAIgG,GAGzBrP,KAAKmnI,eAAe/3H,EAAIpP,KAAKmnI,eAAel/H,MAAQoB,EAAI+F,EAAI/F,EAAIpB,QAEnEjI,KAAKmnI,eAAel/H,OAASjI,KAAKmnI,eAAe/3H,EAChDpP,KAAKmnI,eAAel/H,MAAQoB,EAAI+F,EAAI/F,EAAIpB,OAGtCjI,KAAKmnI,eAAe93H,EAAIrP,KAAKmnI,eAAet/H,OAASwB,EAAIgG,EAAIhG,EAAIxB,SAEpE7H,KAAKmnI,eAAet/H,QAAU7H,KAAKmnI,eAAe93H,EACjDrP,KAAKmnI,eAAet/H,OAASwB,EAAIgG,EAAIhG,EAAIxB,SAK7C,IAAImmC,EAAMhuC,KAAKymB,OACfzmB,KAAKymB,OAAS,IAAInX,aAAkC,MAApBtP,KAAK6jH,YAAuB7jH,KAAK6jH,YAAYz0G,EAAI5H,EAAG4H,EAAIkD,GACtFtS,KAAKmnI,eAAgB,EAAI70H,GAA6B,MAApBtS,KAAK6jH,YAAuB7jH,KAAK6jH,YAAYx0G,EAAI7H,EAAG6H,EAAIiD,GAC1FtS,KAAKmnI,eAAgB,EAAI70H,EAAOtS,KAAKmnI,eAAel/H,MAAQqK,EAAOtS,KAAKmnI,eAAet/H,OAASyK,GAE9F4vC,EAAIE,UAAgC,MAApBpiD,KAAK6jH,cAExB7jH,KAAKymB,OAAOrX,GAAKpP,KAAK6R,MAAMzC,EAAIpP,KAAK6jH,YAAYz0G,EACjDpP,KAAKymB,OAAOpX,GAAKrP,KAAK6R,MAAMxC,EAAIrP,KAAK6jH,YAAYx0G,GAGlD0R,EAAM3X,KAAK2X,IAAI0G,GACfxG,EAAM7X,KAAK6X,IAAIwG,GAEf,IAEIlV,EACAE,EAHA26D,EAAK,IAAIj+D,QAAQnP,KAAKymB,OAAO9W,aAAc3P,KAAKymB,OAAO7W,cAQvDw3H,EAHMrmH,GAHNxO,EAAK66D,EAAGh+D,EAAIihF,EAAGjhF,GAGE6R,GAFjBxO,EAAK26D,EAAG/9D,EAAIghF,EAAGhhF,GAKHkD,EACZ80H,EAHMpmH,EAAM1O,EAAKwO,EAAMtO,EAGXA,EAEZ60H,EAAMtnI,KAAKymB,OAAOrX,EAAIpP,KAAK6R,MAAMzC,EACjCm4H,EAAMvnI,KAAKymB,OAAOpX,EAAIrP,KAAK6R,MAAMxC,EAEjCm4H,EAAMzmH,EAAMumH,EAAMrmH,EAAMsmH,EACxBE,EAAMxmH,EAAMqmH,EAAMvmH,EAAMwmH,EAE5BvnI,KAAKymB,OAAOrX,GAAKg4H,EACjBpnI,KAAKymB,OAAOpX,GAAKg4H,EAGjBrnI,KAAKmnI,eAAe/3H,EAAIpP,KAAKu6H,YAAYv6H,KAAKmnI,eAAe/3H,EAAIg4H,EAAM90H,GACvEtS,KAAKmnI,eAAe93H,EAAIrP,KAAKu6H,YAAYv6H,KAAKmnI,eAAe93H,EAAIg4H,EAAM/0H,GACvEtS,KAAKmnI,eAAel/H,MAAQjI,KAAKu6H,YAAYv6H,KAAKmnI,eAAel/H,OACjEjI,KAAKmnI,eAAet/H,OAAS7H,KAAKu6H,YAAYv6H,KAAKmnI,eAAet/H,QAG7D7H,KAAKiR,MAAM48D,gBAAgB7tE,KAAK6R,MAAMG,OAAiB,GAAPo1H,GAAmB,GAAPC,GAOhErnI,KAAKmmI,aAAe,EACpBnmI,KAAKomI,aAAe,IANpBpmI,KAAKmmI,aAAenmI,KAAK6R,MAAMzC,EAAIpP,KAAKymB,OAAOrX,EAAIo4H,EACnDxnI,KAAKomI,aAAepmI,KAAK6R,MAAMxC,EAAIrP,KAAKymB,OAAOpX,EAAIo4H,GAQ/Cz5F,EAAIx+B,OAAOxP,KAAKymB,UAEhBzmB,KAAKw6H,mBAERx6H,KAAK46H,kBAAkBhqF,GAGJ,MAAhB5wC,KAAKqmI,QAERrmI,KAAKshI,cAILthI,KAAK0nI,0BAURz5B,gBAAgB7hG,UAAUwuH,kBAAoB,SAAShqF,GAGtD,IAAIt+B,EAAQtS,KAAKiR,MAAMsW,KAAKjV,MACxB9K,EAAKxH,KAAKiR,MAAMsW,KAAKoH,UAGrBmsG,EAAY96H,KAAK6R,MAAMpC,QAG3BzP,KAAK6R,MAAMzC,EAAIpP,KAAKymB,OAAOrX,EAC3BpP,KAAK6R,MAAMxC,EAAIrP,KAAKymB,OAAOpX,EAC3BrP,KAAK6R,MAAM6W,OAAS,IAAIvZ,QAAQnP,KAAK6R,MAAMzC,EAAIkD,EAAQ9K,EAAG4H,EAAGpP,KAAK6R,MAAMxC,EAAIiD,EAAQ9K,EAAG6H,GACvFrP,KAAK6R,MAAM5J,MAAQjI,KAAKymB,OAAOxe,MAC/BjI,KAAK6R,MAAMhK,OAAS7H,KAAKymB,OAAO5e,OAGhC,IAAIqwC,EAAMl4C,KAAK6R,MAAM0gF,eACrBr6C,EAAM,IAAI/oC,QAAQ+oC,EAAI9oC,EAAG8oC,EAAI7oC,GAG7BrP,KAAK6R,MAAM0gF,eAAenjF,EAAI,EAC9BpP,KAAK6R,MAAM0gF,eAAeljF,EAAI,EAC9B,IAAI6yC,EAAMliD,KAAKiR,MAAMkxC,gBAAgBniD,KAAK6R,MAAMG,MAEhD,GAAW,MAAPkwC,EACJ,CACC,IAAItlC,EAASslC,EAAItlC,QAAU5c,KAAKuwG,YAElB,MAAV3zF,GAAmBslC,EAAIE,WAE1BpiD,KAAK6R,MAAM0gF,eAAenjF,EAAIpP,KAAK6R,MAAM0V,KAAKjV,MAAQsK,EAAOxN,EAC7DpP,KAAK6R,MAAM0gF,eAAeljF,EAAIrP,KAAK6R,MAAM0V,KAAKjV,MAAQsK,EAAOvN,GAG9DrP,KAAK6R,MAAM0V,KAAKqrF,wBAAwB5yG,KAAK6R,OAI9C7R,KAAK6R,MAAM0V,KAAKtW,MAAM2B,aAAaC,OAAO7S,KAAK6R,OAAO,GAGtD7R,KAAK6R,MAAM0V,KAAK4mF,WAAWnuG,KAAK6R,MAAMG,MACtChS,KAAK6R,MAAMolF,SAAU,EACrBj3F,KAAK6R,MAAM0V,KAAK6mF,WAChBpuG,KAAKk7H,iBAGmB,MAAnBl7H,KAAK6R,MAAMxD,MAAwC,MAAxBrO,KAAK6R,MAAMxD,KAAKnJ,MACX,MAApClF,KAAK6R,MAAMxD,KAAKnJ,KAAK2Q,aACA,MAApB7V,KAAK6R,MAAMQ,OAA0C,MAAzBrS,KAAK6R,MAAMQ,MAAMnN,MACT,MAArClF,KAAK6R,MAAMQ,MAAMnN,KAAK2Q,cAA2C,MAAnB7V,KAAK6R,MAAMxD,MACzDrO,KAAK6R,MAAMQ,MAAMnN,KAAK2Q,aAAe7V,KAAK6R,MAAMxD,KAAKnJ,SAE7B,MAApBlF,KAAK6R,MAAMQ,OAA0C,MAAzBrS,KAAK6R,MAAMQ,MAAMnN,MAEhDlF,KAAK6R,MAAMQ,MAAMnN,KAAK2O,WAAWtP,YAAYvE,KAAK6R,MAAMQ,MAAMnN,MAGxC,MAAnBlF,KAAK6R,MAAMxD,MAAwC,MAAxBrO,KAAK6R,MAAMxD,KAAKnJ,MAE9ClF,KAAK6R,MAAMxD,KAAKnJ,KAAK2O,WAAWtP,YAAYvE,KAAK6R,MAAMxD,KAAKnJ,OAKpC,MAAtBlF,KAAK6R,MAAMsiF,SAA8C,MAA3Bn0F,KAAK6R,MAAMsiF,QAAQjvF,OAEpDlF,KAAK6R,MAAMsiF,QAAQjvF,KAAKwC,MAAM6D,WAAa,UAI5CvL,KAAK6R,MAAMqmF,SAAS4iC,IAQrB7sB,gBAAgB7hG,UAAUsqC,QAAU,SAAS5sC,EAAQ8mC,GAEpD,GAAkB,MAAd5wC,KAAKyO,OAA+B,MAAdzO,KAAK6R,MAC/B,CACC,IAAIuU,EAAQ,IAAIjX,QAAQyhC,EAAG9N,YAAa8N,EAAG7N,aACvCt0B,EAAQzO,KAAKyO,MACjBzO,KAAKyO,MAAQ,KAEbzO,KAAKiR,MAAM8c,WAAWtC,cACtB,IAEC,GAAIhd,GAASxE,QAAQw9B,cAEM,MAAtBznC,KAAKklI,gBAERllI,KAAKklI,cAAcj7H,QAAQw9B,cAAgBh5B,GAAOgtC,QAAS,EAC3Dz7C,KAAKklI,cAAcj7H,QAAQw9B,cAAgBh5B,GAAOmN,gBAG/C,GAAInN,GAASxE,QAAQu9B,gBAEzB,GAAyB,MAArBxnC,KAAKinI,aACT,CACC,IAAI93F,EAAQnvC,KAAKinI,cAAgBjnI,KAAK6R,MAAMnK,MAAMiG,YAAY2W,iBAAmB,GAEpE,GAAT6qB,GAEHnvC,KAAK2nI,WAAW3nI,KAAK6R,MAAMG,KAAMm9B,QAKlCnvC,KAAK4nI,kBAIP,CACC,IAAIryF,EAAcv1C,KAAKiR,MAAM8mC,mBAAmBnH,EAAGrO,YAC/C9a,EAAQnf,QAAQuX,UAAU7f,KAAK6R,MAAMnK,MAAMiG,YAAY2W,iBAAmB,KAC1EvD,EAAM3X,KAAK2X,KAAK0G,GAChBxG,EAAM7X,KAAK6X,KAAKwG,GAEhBlV,EAAK6T,EAAMhX,EAAIpP,KAAKmyC,OACpB1/B,EAAK2T,EAAM/W,EAAIrP,KAAKoyC,OAIpBtwB,EAAKb,EAAM1O,EAAKwO,EAAMtO,EAE1BF,EAHSwO,EAAMxO,EAAK0O,EAAMxO,EAI1BA,EAAKqP,EAEL,IAAIjJ,EAAI7Y,KAAKiR,MAAMsW,KAAKjV,MACpBqvC,EAAU3hD,KAAK8lH,kBAAkB9lH,KAAK6R,MAAO++B,GACjD5wC,KAAK6pE,WAAW7pE,KAAK6R,MAAMG,KAAMhS,KAAKu6H,YAAYhoH,EAAKsG,GAAI7Y,KAAKu6H,YAAY9nH,EAAKoG,GAChFpK,EAAO8mC,EAAav1C,KAAKiqH,mBAAmBr5E,GAAK+Q,IAGpD,QAEC3hD,KAAKiR,MAAM8c,WAAWnC,YAGvBglB,EAAGxO,UACHpiC,KAAKk2C,UASP+3D,gBAAgB7hG,UAAU05G,kBAAoB,SAASj0G,EAAO++B,GAE7D,OAAO5wC,KAAKiR,MAAM60G,kBAAkB9lH,KAAK6R,QAU1Co8F,gBAAgB7hG,UAAUw7H,YAAc,aAYxC35B,gBAAgB7hG,UAAUu7H,WAAa,SAAS31H,EAAMqO,EAAO1J,GAE5D,GAAa,GAAT0J,EACJ,CACC,IAAInO,EAAQlS,KAAKiR,MAAM8c,WAEvB,GAAI7b,EAAM2vC,SAAS7vC,IAASE,EAAMC,OAAOH,GACzC,CACC,IAAKE,EAAMC,OAAOH,GAClB,CACC,IACIw/D,GADQxxE,KAAKiR,MAAM84D,oBAAoB/3D,GACxBrE,YAAY2W,iBAAmB,GAAKjE,EACvDrgB,KAAKiR,MAAMua,cAAc7d,YAAY2W,eAAgBktD,EAAO,CAACx/D,IAG9D,IAAIkwC,EAAMliD,KAAKiR,MAAMkxC,gBAAgBnwC,GAErC,GAAW,MAAPkwC,EACJ,CACC,IAAIG,EAAOriD,KAAKiR,MAAMkxC,gBAAgBxrC,GAStC,GAPY,MAAR0rC,GAAiBnwC,EAAMC,OAAOwE,MAEjCurC,EAAMA,EAAIzyC,SACNu2C,OAAO3lC,EAAO,IAAIlR,QAAQkzC,EAAKp6C,MAAQ,EAAGo6C,EAAKx6C,OAAS,IAC5DqK,EAAMu5D,YAAYz5D,EAAMkwC,IAGpBhwC,EAAM2vC,SAAS7vC,KAAUkwC,EAAIE,UAAalwC,EAAMC,OAAOH,GAK3D,IAFA,IAAIkB,EAAahB,EAAMiB,cAAcnB,GAE5BnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/B7E,KAAK2nI,WAAWz1H,EAAMkB,WAAWpB,EAAMnN,GAAIwb,EAAOrO,OAaxDi8F,gBAAgB7hG,UAAU8pC,MAAQ,WAmBjC,GAjBmB,MAAfl2C,KAAK8kI,QAAgC,MAAd9kI,KAAKyO,OAA4C,MAA3BzO,KAAK8kI,OAAO9kI,KAAKyO,QACnB,QAA9CzO,KAAK8kI,OAAO9kI,KAAKyO,OAAOvJ,KAAKwC,MAAMgmB,UAEnC1tB,KAAK8kI,OAAO9kI,KAAKyO,OAAOvJ,KAAKwC,MAAMgmB,QAAU,IAG9C1tB,KAAKinI,aAAe,KACpBjnI,KAAKgtG,YAAc,KACnBhtG,KAAKyO,MAAQ,KAGO,MAAhBzO,KAAKqmI,UAERrmI,KAAKqmI,QAAQp3G,UACbjvB,KAAKqmI,QAAU,MAGZrmI,KAAKw6H,mBAAoC,MAAfx6H,KAAK8kI,OACnC,CACC,IAAK,IAAIjgI,EAAI,EAAGA,EAAI7E,KAAK8kI,OAAO3iI,OAAQ0C,IAEjB,MAAlB7E,KAAK8kI,OAAOjgI,KAEf7E,KAAK8kI,OAAOjgI,GAAGK,KAAKwC,MAAMgmB,QAAU,IAKZ,MAAtB1tB,KAAK6R,MAAMsiF,SAA8C,MAA3Bn0F,KAAK6R,MAAMsiF,QAAQjvF,OAEpDlF,KAAK6R,MAAMsiF,QAAQjvF,KAAKwC,MAAM6D,WAAa,IAI7C,GAA0B,MAAtBvL,KAAKklI,cAER,IAASrgI,EAAI,EAAGA,EAAI7E,KAAKklI,cAAc/iI,OAAQ0C,IAE1C7E,KAAKklI,cAAcrgI,GAAG42C,QAEzBz7C,KAAKklI,cAAcrgI,GAAG42C,QAAS,EAC/Bz7C,KAAKklI,cAAcrgI,GAAGqxC,SAItBl2C,KAAKklI,cAAcrgI,GAAG8F,YAAW,GAMR,MAAxB3K,KAAK00H,kBAER10H,KAAK00H,gBAAgBxvH,KAAKwC,MAAMgmB,QAAU,SAC1C1tB,KAAK2kI,gBAAkB3kI,KAAK4kI,mBAAmB5kI,KAAK6R,OACpD7R,KAAKymB,OAAS,IAAInX,YAAYtP,KAAK2kI,gBAAgBv1H,EAAGpP,KAAK2kI,gBAAgBt1H,EAC1ErP,KAAK2kI,gBAAgB18H,MAAOjI,KAAK2kI,gBAAgB98H,QAClD7H,KAAKshI,eAGNthI,KAAKs6H,aACLt6H,KAAKk7H,gBACLl7H,KAAK2mI,aAAe,KACpB3mI,KAAKmnI,eAAiB,KACtBnnI,KAAKw6H,kBAAoB,MAS1BvsB,gBAAgB7hG,UAAUy9D,WAAa,SAAS73D,EAAMO,EAAIE,EAAIhE,EAAO8mC,EAAasyF,EAAalmF,GAE9F,IAAIO,EAAMliD,KAAKiR,MAAMiB,MAAMk5D,YAAYp5D,GAEvC,GAAW,MAAPkwC,EAEH,GAAIzzC,GAASxE,QAAQs9B,aACrB,CACC,IAAI9f,GAASnf,QAAQuX,UAAU7f,KAAK6R,MAAMnK,MAAMiG,YAAY2W,iBAAmB,KAC3EvD,EAAM3X,KAAK2X,IAAI0G,GACfxG,EAAM7X,KAAK6X,IAAIwG,GACfnV,EAAQtS,KAAKiR,MAAMsW,KAAKjV,MACxBmR,EAAKnb,QAAQkb,gBAAgB,IAAIrU,QACpC/F,KAAK2c,OAAO/lB,KAAK+kI,WAAWt+G,OAAO9W,aAAe3P,KAAKmyC,QAAU7/B,GACjElJ,KAAK2c,OAAO/lB,KAAK+kI,WAAWt+G,OAAO7W,aAAe5P,KAAKoyC,QAAU9/B,IACjEyO,EAAKE,GAIY,OAFlBihC,EAAMA,EAAIzyC,SAEFmN,OAEPslC,EAAItlC,OAAS6G,GAIby+B,EAAItlC,OAAOxN,GAAKqU,EAAGrU,EACnB8yC,EAAItlC,OAAOvN,GAAKoU,EAAGpU,GAGpBrP,KAAKiR,MAAMiB,MAAMu5D,YAAYz5D,EAAMkwC,QAEJ,MAAvBliD,KAAKmnI,iBAET70H,EAAQtS,KAAKiR,MAAMsW,KAAKjV,MAEH,GAArBtS,KAAKmmI,cAA0C,GAArBnmI,KAAKomI,cAElCpmI,KAAK8nI,aAAa91H,EAAM5I,KAAK2c,MAAM/lB,KAAKmmI,aAAe7zH,GAAQlJ,KAAK2c,MAAM/lB,KAAKomI,aAAe9zH,IAG/FtS,KAAKiR,MAAM44D,WAAW73D,EAAMhS,KAAKmnI,eAAgBxlF,KAUpDssD,gBAAgB7hG,UAAU07H,aAAe,SAAS91H,EAAMO,EAAIE,GAK3D,IAHA,IAAIP,EAAQlS,KAAKiR,MAAM8c,WACnB7a,EAAahB,EAAMiB,cAAcnB,GAE5BnN,EAAI,EAAGA,EAAIqO,EAAYrO,IAChC,CACC,IAAIoN,EAAQC,EAAMkB,WAAWpB,EAAMnN,GAC/Bq9C,EAAMliD,KAAKiR,MAAMkxC,gBAAgBlwC,GAE1B,MAAPiwC,KAEHA,EAAMA,EAAIzyC,SACNkf,UAAUpc,EAAIE,GAClBP,EAAMu5D,YAAYx5D,EAAOiwC,MAwD5B+rD,gBAAgB7hG,UAAUmpH,MAAQ,SAAS9uG,EAAQlU,EAAIE,EAAIhE,EAAO8mC,EAAajjC,EAAO9K,EAAIqgI,EAAaE,GAItG,GAFAxyF,EAA8B,MAAfA,EAAuBA,GAAev1C,KAAKiR,MAAMskC,YAAcv1C,KAAKiR,MAAMskC,YAErFv1C,KAAKikI,YACT,CACC,IAAI70H,EAAIqX,EAAOrX,EAAIqX,EAAOxe,MAAQsK,EAC9BlD,EAAIoX,EAAOpX,EAAIoX,EAAO5e,OAAS4K,EAE/B8iC,IAEHnmC,EAAIpP,KAAKiR,MAAMmnC,KAAKhpC,EAAIkD,GAASA,EACjCjD,EAAIrP,KAAKiR,MAAMmnC,KAAK/oC,EAAIiD,GAASA,GAGlC,IAAIzC,EAAO,IAAIP,YAAYmX,EAAOrX,EAAGqX,EAAOpX,EAAG,EAAG,GAGlD,OAFAQ,EAAK9K,IAAI,IAAIuK,YAAYF,EAAGC,EAAG,EAAG,IAE3BQ,EAIP,IAAIqpD,EAAKzyC,EAAOxe,MACZkxD,EAAK1yC,EAAO5e,OACZ4U,EAAOgK,EAAOrX,EAAI5H,EAAG4H,EAAIkD,EACzB0K,EAAQP,EAAOy8C,EACfj8C,EAAMwJ,EAAOpX,EAAI7H,EAAG6H,EAAIiD,EACxB6K,EAASF,EAAMk8C,EAEfh2C,EAAK1G,EAAOy8C,EAAK,EACjB9xC,EAAKnK,EAAMk8C,EAAK,EAEhB1qD,EAAQ,GAEX0O,GAAkB1K,EAIjB0K,EAFGo4B,EAEMv1C,KAAKiR,MAAMmnC,KAAKj7B,EAAS7K,GAASA,EAIlClJ,KAAK2c,MAAM5I,EAAS7K,GAASA,GAG/B7D,EAAQ,IAEhBwO,GAAYxK,EAIXwK,EAFGs4B,EAEGv1C,KAAKiR,MAAMmnC,KAAKn7B,EAAM3K,GAASA,EAI/BlJ,KAAK2c,MAAM9I,EAAM3K,GAASA,GAIrB,GAAT7D,GAAuB,GAATA,GAAuB,GAATA,GAE/BgO,GAAQlK,EAIPkK,EAFG84B,EAEIv1C,KAAKiR,MAAMmnC,KAAK37B,EAAOnK,GAASA,EAIhClJ,KAAK2c,MAAMtJ,EAAOnK,GAASA,GAGlB,GAAT7D,GAAuB,GAATA,GAAuB,GAATA,IAEpCuO,GAASzK,EAIRyK,EAFGu4B,EAEKv1C,KAAKiR,MAAMmnC,KAAKp7B,EAAQ1K,GAASA,EAIjClJ,KAAK2c,MAAM/I,EAAQ1K,GAASA,GAItC,IAAIrK,EAAQ+U,EAAQP,EAChB5U,EAASsV,EAASF,EAEtB,GAAI4qH,EACJ,CACC,IAAI3lF,EAAMliD,KAAKiR,MAAMkxC,gBAAgBniD,KAAK6R,MAAMG,MAEhD,GAAW,MAAPkwC,EACJ,CACC,IAAIuG,EAASvG,EAAIj6C,MAAQi6C,EAAIr6C,OAEjB,GAAR4G,GAAqB,GAARA,GAAsB,GAATA,GAAuB,GAATA,EAE3CxG,EAAQJ,EAAS4gD,EAIjB5gD,EAASI,EAAQwgD,EAGL,GAATh6C,IAEHgO,EAAOO,EAAQ/U,EACfgV,EAAME,EAAStV,IAKlB,GAAIkgI,EACJ,CAIC,IAAIC,EAAM7kH,GAAM1G,GAHhBxU,GAAUA,EAAQixD,GAGa,GAC3B+uE,EAAM7gH,GAAMnK,GAHhBpV,GAAWA,EAASsxD,GAGW,GAE/B18C,GAAQurH,EACR/qH,GAAOgrH,EACPjrH,GAASgrH,EACT7qH,GAAU8qH,EAIPhgI,EAAQ,IAEXwU,GAAQxU,EACRA,EAAQmB,KAAKsX,IAAIzY,IAIdJ,EAAS,IAEZoV,GAAOpV,EACPA,EAASuB,KAAKsX,IAAI7Y,IAGnB,IAAI8E,EAAS,IAAI2C,YAAYmN,EAAOjV,EAAG4H,EAAIkD,EAAO2K,EAAMzV,EAAG6H,EAAIiD,EAAOrK,EAAOJ,GAU7E,OARsB,MAAlB7H,KAAKslI,YAER34H,EAAO1E,MAAQmB,KAAKC,IAAIsD,EAAO1E,MAAOjI,KAAKslI,UAAUl2H,EAAIkD,EAAQtS,KAAKslI,UAAUr9H,MAAQqK,EACvFlJ,KAAKC,IAAI,EAAGrJ,KAAKmgB,GAAK7N,EAAQ3F,EAAOyC,IACtCzC,EAAO9E,OAASuB,KAAKC,IAAIsD,EAAO9E,OAAQ7H,KAAKslI,UAAUj2H,EAAIiD,EAAQtS,KAAKslI,UAAUz9H,OAASyK,EAC1FlJ,KAAKC,IAAI,EAAGrJ,KAAKogB,GAAK9N,EAAQ3F,EAAO0C,KAGhC1C,GASTshG,gBAAgB7hG,UAAUyG,OAAS,SAASq1H,GAE3CloI,KAAK2kI,gBAAkB3kI,KAAK4kI,mBAAmB5kI,KAAK6R,OACpD7R,KAAKymB,OAAS,IAAInX,YAAYtP,KAAK2kI,gBAAgBv1H,EAAGpP,KAAK2kI,gBAAgBt1H,EAAGrP,KAAK2kI,gBAAgB18H,MAAOjI,KAAK2kI,gBAAgB98H,QAC/H7H,KAAKshI,cAEA4G,GAEJloI,KAAKk7H,iBAOPjtB,gBAAgB7hG,UAAU+7H,iBAAmB,WAG5C,IAAIx7H,EAAS,IAAIwC,QAAQ,EAAG,GACxBu8C,EAAM1rD,KAAKyxD,UAYf,OAVmB,MAAfzxD,KAAK8kI,QAAkB9kI,KAAK8kI,OAAO3iI,OAAS,GAAuB,MAAlBnC,KAAK8kI,OAAO,KAC/D9kI,KAAKymB,OAAOxe,MAAQ,EAAIjI,KAAK8kI,OAAO,GAAGr+G,OAAOxe,MAAQ,EAAIyjD,GAC3D1rD,KAAKymB,OAAO5e,OAAS,EAAI7H,KAAK8kI,OAAO,GAAGr+G,OAAO5e,OAAS,EAAI6jD,KAE5DA,GAAO,EAEP/+C,EAAOyC,EAAIpP,KAAK8kI,OAAO,GAAGr+G,OAAOxe,MAAQyjD,EACzC/+C,EAAO0C,EAAIrP,KAAK8kI,OAAO,GAAGr+G,OAAO5e,OAAS6jD,GAGpC/+C,GAqBRshG,gBAAgB7hG,UAAU8uH,cAAgB,WAEzC,IAAIxvE,EAAM1rD,KAAKyxD,UACfzxD,KAAKykI,iBAAmB,EACxBzkI,KAAK0kI,eAAiB,EACtB,IAAI7rH,EAAI7Y,KAAKymB,OAEb,GAA0B,MAAtBzmB,KAAKklI,cAER,IAAK,IAAIrgI,EAAI,EAAGA,EAAI7E,KAAKklI,cAAc/iI,OAAQ0C,IAC/C,CACC,IAAIgqB,EAAO7uB,KAAKklI,cAAcrgI,GAAGwN,MAAMnN,KAAKwC,MAAMgmB,QAClD1tB,KAAKklI,cAAcrgI,GAAGgO,SACtB7S,KAAKklI,cAAcrgI,GAAGwN,MAAMnN,KAAKwC,MAAMgmB,QAAUmB,EAGjD7uB,KAAKklI,cAAcrgI,GAAGwN,MAAMnN,KAAKwC,MAAM6D,WACrCvL,KAAKooI,sBAAsBpoI,KAAKklI,cAAcrgI,IAC/C,GAAK,SAIR,GAAmB,MAAf7E,KAAK8kI,QAAkB9kI,KAAK8kI,OAAO3iI,OAAS,GAAuB,MAAlBnC,KAAK8kI,OAAO,GACjE,CACC,GAAkB,MAAd9kI,KAAKyO,OAAiBzO,KAAKskI,cAAgBtkI,KAAK8kI,OAAO3iI,QAAU,EACrE,CAEC,IAAI0vB,EAAU7xB,KAAKmoI,mBACnBnoI,KAAKykI,iBAAmB5yG,EAAQziB,EAChCpP,KAAK0kI,eAAiB7yG,EAAQxiB,EAED,GAAzBrP,KAAKykI,kBAAgD,GAAvBzkI,KAAK0kI,kBAEtC7rH,EAAI,IAAIvJ,YAAYuJ,EAAEzJ,EAAGyJ,EAAExJ,EAAGwJ,EAAE5Q,MAAO4Q,EAAEhR,SAEvCuH,GAAKpP,KAAKykI,iBAAmB,EAC/B5rH,EAAE5Q,OAASjI,KAAKykI,iBAChB5rH,EAAExJ,GAAKrP,KAAK0kI,eAAiB,EAC7B7rH,EAAEhR,QAAU7H,KAAK0kI,gBAGd1kI,KAAK8kI,OAAO3iI,QAAU,IAEpB0W,EAAE5Q,MAAQ,EAAIjI,KAAK8kI,OAAO,GAAGr+G,OAAOxe,MAAQ,EAAIyjD,GACnD7yC,EAAEhR,OAAS,EAAI7H,KAAK8kI,OAAO,GAAGr+G,OAAO5e,OAAS,EAAI6jD,GAEnD1rD,KAAK8kI,OAAO,GAAG5/H,KAAKwC,MAAMgmB,QAAU,OACpC1tB,KAAK8kI,OAAO,GAAG5/H,KAAKwC,MAAMgmB,QAAU,OACpC1tB,KAAK8kI,OAAO,GAAG5/H,KAAKwC,MAAMgmB,QAAU,OACpC1tB,KAAK8kI,OAAO,GAAG5/H,KAAKwC,MAAMgmB,QAAU,SAIpC1tB,KAAK8kI,OAAO,GAAG5/H,KAAKwC,MAAMgmB,QAAU,GACpC1tB,KAAK8kI,OAAO,GAAG5/H,KAAKwC,MAAMgmB,QAAU,GACpC1tB,KAAK8kI,OAAO,GAAG5/H,KAAKwC,MAAMgmB,QAAU,GACpC1tB,KAAK8kI,OAAO,GAAG5/H,KAAKwC,MAAMgmB,QAAU,KAKvC,IAAI3F,EAAIlP,EAAEzJ,EAAIyJ,EAAE5Q,MACZoU,EAAIxD,EAAExJ,EAAIwJ,EAAEhR,OAEhB,GAAI7H,KAAKikI,YAERjkI,KAAK6lI,YAAY7lI,KAAK8kI,OAAO,GAAI/8G,EAAG1L,OAGrC,CACC,IAAI8G,EAAKtK,EAAEzJ,EAAIyJ,EAAE5Q,MAAQ,EACrBmf,EAAKvO,EAAExJ,EAAIwJ,EAAEhR,OAAS,EAE1B,GAAI7H,KAAK8kI,OAAO3iI,QAAU,EAC1B,CACC,IAAIkmI,EAAM,CAAC,YAAa,WAAY,YAAa,WAAY,YAAa,WAAY,YAAa,YAE/F5gH,EAAQnf,QAAQuX,UAAU7f,KAAK6R,MAAMnK,MAAMiG,YAAY2W,iBAAmB,KAC1EvD,EAAM3X,KAAK2X,IAAI0G,GACfxG,EAAM7X,KAAK6X,IAAIwG,GAEf6gH,EAAKl/H,KAAK2c,MAAc,EAAR0B,EAAYre,KAAK2W,IAEjCswE,EAAK,IAAIlhF,QAAQ0J,EAAElJ,aAAckJ,EAAEjJ,cACnC6T,EAAKnb,QAAQkb,gBAAgB,IAAIrU,QAAQ0J,EAAEzJ,EAAGyJ,EAAExJ,GAAI0R,EAAKE,EAAKovE,GAElErwF,KAAK6lI,YAAY7lI,KAAK8kI,OAAO,GAAIrhH,EAAGrU,EAAGqU,EAAGpU,GAC1CrP,KAAK8kI,OAAO,GAAGxsE,UAAU+vE,EAAI//H,QAAQ4gB,IAAI,EAAIo/G,EAAID,EAAIlmI,UAErDshB,EAAGrU,EAAI+T,EACPM,EAAGpU,EAAIwJ,EAAExJ,EACToU,EAAKnb,QAAQkb,gBAAgBC,EAAI1C,EAAKE,EAAKovE,GAE3CrwF,KAAK6lI,YAAY7lI,KAAK8kI,OAAO,GAAIrhH,EAAGrU,EAAGqU,EAAGpU,GAC1CrP,KAAK8kI,OAAO,GAAGxsE,UAAU+vE,EAAI//H,QAAQ4gB,IAAI,EAAIo/G,EAAID,EAAIlmI,UAErDshB,EAAGrU,EAAI2Y,EACPtE,EAAGpU,EAAIwJ,EAAExJ,EACToU,EAAKnb,QAAQkb,gBAAgBC,EAAI1C,EAAKE,EAAKovE,GAE3CrwF,KAAK6lI,YAAY7lI,KAAK8kI,OAAO,GAAIrhH,EAAGrU,EAAGqU,EAAGpU,GAC1CrP,KAAK8kI,OAAO,GAAGxsE,UAAU+vE,EAAI//H,QAAQ4gB,IAAI,EAAIo/G,EAAID,EAAIlmI,UAErDshB,EAAGrU,EAAIyJ,EAAEzJ,EACTqU,EAAGpU,EAAI+X,EACP3D,EAAKnb,QAAQkb,gBAAgBC,EAAI1C,EAAKE,EAAKovE,GAE3CrwF,KAAK6lI,YAAY7lI,KAAK8kI,OAAO,GAAIrhH,EAAGrU,EAAGqU,EAAGpU,GAC1CrP,KAAK8kI,OAAO,GAAGxsE,UAAU+vE,EAAI//H,QAAQ4gB,IAAI,EAAIo/G,EAAID,EAAIlmI,UAErDshB,EAAGrU,EAAI2Y,EACPtE,EAAGpU,EAAI+X,EACP3D,EAAKnb,QAAQkb,gBAAgBC,EAAI1C,EAAKE,EAAKovE,GAE3CrwF,KAAK6lI,YAAY7lI,KAAK8kI,OAAO,GAAIrhH,EAAGrU,EAAGqU,EAAGpU,GAC1CrP,KAAK8kI,OAAO,GAAGxsE,UAAU+vE,EAAI//H,QAAQ4gB,IAAI,EAAIo/G,EAAID,EAAIlmI,UAErDshB,EAAGrU,EAAIyJ,EAAEzJ,EACTqU,EAAGpU,EAAIgN,EACPoH,EAAKnb,QAAQkb,gBAAgBC,EAAI1C,EAAKE,EAAKovE,GAE3CrwF,KAAK6lI,YAAY7lI,KAAK8kI,OAAO,GAAIrhH,EAAGrU,EAAGqU,EAAGpU,GAC1CrP,KAAK8kI,OAAO,GAAGxsE,UAAU+vE,EAAI//H,QAAQ4gB,IAAI,EAAIo/G,EAAID,EAAIlmI,UAErDshB,EAAGrU,EAAI+T,EACPM,EAAGpU,EAAIgN,EACPoH,EAAKnb,QAAQkb,gBAAgBC,EAAI1C,EAAKE,EAAKovE,GAE3CrwF,KAAK6lI,YAAY7lI,KAAK8kI,OAAO,GAAIrhH,EAAGrU,EAAGqU,EAAGpU,GAC1CrP,KAAK8kI,OAAO,GAAGxsE,UAAU+vE,EAAI//H,QAAQ4gB,IAAI,EAAIo/G,EAAID,EAAIlmI,UAErDshB,EAAGrU,EAAI2Y,EACPtE,EAAGpU,EAAIgN,EACPoH,EAAKnb,QAAQkb,gBAAgBC,EAAI1C,EAAKE,EAAKovE,GAE3CrwF,KAAK6lI,YAAY7lI,KAAK8kI,OAAO,GAAIrhH,EAAGrU,EAAGqU,EAAGpU,GAC1CrP,KAAK8kI,OAAO,GAAGxsE,UAAU+vE,EAAI//H,QAAQ4gB,IAAI,EAAIo/G,EAAID,EAAIlmI,UAErDshB,EAAGrU,EAAI+T,EAAKnjB,KAAK6R,MAAM0gF,eAAenjF,EACtCqU,EAAGpU,EAAI+X,EAAKpnB,KAAK6R,MAAM0gF,eAAeljF,EACtCoU,EAAKnb,QAAQkb,gBAAgBC,EAAI1C,EAAKE,EAAKovE,GAC3CrwF,KAAK6lI,YAAY7lI,KAAK8kI,OAAO,GAAIrhH,EAAGrU,EAAGqU,EAAGpU,QAElCrP,KAAK6R,MAAM5J,OAAS,GAAKjI,KAAK6R,MAAMhK,QAAU,EAEtD7H,KAAK6lI,YAAY7lI,KAAK8kI,OAAO,GAAI3hH,EAAKnjB,KAAK6R,MAAM0gF,eAAenjF,EAAGgY,EAAKpnB,KAAK6R,MAAM0gF,eAAeljF,GAIlGrP,KAAK6lI,YAAY7lI,KAAK8kI,OAAO,GAAI9kI,KAAK6R,MAAMzC,EAAGpP,KAAK6R,MAAMxC,IA4B7D,GAvB0B,MAAtBrP,KAAKilI,gBAEJx9G,EAAQnf,QAAQuX,UAAgC,MAArB7f,KAAKinI,aAAwBjnI,KAAKinI,aAAejnI,KAAK6R,MAAMnK,MAAMiG,YAAY2W,iBAAmB,KAC5HvD,EAAM3X,KAAK2X,IAAI0G,GACfxG,EAAM7X,KAAK6X,IAAIwG,GAEf4oE,EAAK,IAAIlhF,QAAQnP,KAAK6R,MAAMlC,aAAc3P,KAAK6R,MAAMjC,cACrD6T,EAAKnb,QAAQkb,gBAAgBxjB,KAAKsmI,4BAA6BvlH,EAAKE,EAAKovE,GAE9C,MAA3BrwF,KAAKilI,cAAc//H,OAEtBlF,KAAK6lI,YAAY7lI,KAAKilI,cAAexhH,EAAGrU,EAAGqU,EAAGpU,GAG9CrP,KAAKilI,cAAc//H,KAAKwC,MAAM6D,WAAcvL,KAAK6R,MAAM0V,KAAKtW,MAAM8hF,YAAe,SAAW,KAIlE,MAAxB/yF,KAAK00H,kBAER10H,KAAK00H,gBAAgBxxG,SAAWjE,OAAOjf,KAAK6R,MAAMnK,MAAMiG,YAAY2W,iBAAmB,MAG/D,MAArBtkB,KAAK2mI,aAER,IAAS9hI,EAAI,EAAGA,EAAI7E,KAAK2mI,aAAaxkI,OAAQ0C,IAE7C7E,KAAK2mI,aAAa9hI,GAAGgO,UAUxBo7F,gBAAgB7hG,UAAUg8H,sBAAwB,SAASnC,GAE1D,OAAQjmI,KAAKiR,MAAM8hF,aAA4D,GAA7C/yF,KAAK6R,MAAM0V,KAAKtW,MAAM8/G,qBAQzD9iB,gBAAgB7hG,UAAUk6H,0BAA4B,WAErD,OAAO,IAAIn3H,QAAQnP,KAAKymB,OAAOrX,EAAIpP,KAAKymB,OAAOxe,MAAQ,EAAGjI,KAAKymB,OAAOpX,EAAIrP,KAAKwkI,yBAQhFv2B,gBAAgB7hG,UAAUs7H,sBAAwB,WAGjD,GAA4B,MAAxB1nI,KAAK00H,gBAER,GAA4B,MAAxB10H,KAAKuoI,gBACT,CACC,IAAI5xH,EAAS3W,KAAKiR,MAAMiB,MAAM+vC,UAAUjiD,KAAK6R,MAAMG,MAEnD,GAAIhS,KAAKiR,MAAMiB,MAAM2vC,SAASlrC,GAC9B,CACC,IAAIk2D,EAAS7sE,KAAKiR,MAAMsW,KAAKxV,SAAS4E,GAClC0F,EAAIrc,KAAKuoI,gBAAgB9hH,OAEf,MAAVomD,GAAmBxwD,EAAEjN,GAAKy9D,EAAOz9D,GAAKiN,EAAEhN,GAAKw9D,EAAOx9D,GACvDgN,EAAEpU,OAAS4kE,EAAO5kE,OAASoU,EAAExU,QAAUglE,EAAOhlE,SAE9C7H,KAAKuoI,gBAAgB9hH,OAASnX,YAAYwB,cAAc+7D,GACxD7sE,KAAKuoI,gBAAgB11H,eAKtB7S,KAAKuoI,gBAAgBt5G,UACrBjvB,KAAKuoI,gBAAkB,UAGhBvoI,KAAKmkI,yBAETxtH,EAAS3W,KAAKiR,MAAMiB,MAAM+vC,UAAUjiD,KAAK6R,MAAMG,MAE/ChS,KAAKiR,MAAMiB,MAAM2vC,SAASlrC,IAIf,OAFVk2D,EAAS7sE,KAAKiR,MAAMsW,KAAKxV,SAAS4E,MAIrC3W,KAAKuoI,gBAAkBvoI,KAAKulI,2BAA2B14D,GAEvD7sE,KAAKuoI,gBAAgBj6G,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YAAe5gB,YAAYylB,YAAczlB,YAAY4gB,YACvHvuB,KAAKuoI,gBAAgB5xF,eAAgB,EACrC32C,KAAKuoI,gBAAgBrlH,SAAWjE,OAAO4tD,EAAOnlE,MAAMiG,YAAY2W,iBAAmB,KACnFtkB,KAAKuoI,gBAAgBphI,KAAKnH,KAAKiR,MAAMa,UAAU+gD,kBAC/C7yD,KAAKuoI,gBAAgB11H,YAY1Bo7F,gBAAgB7hG,UAAUk1H,YAAc,WAEnB,MAAhBthI,KAAKqmI,UAERrmI,KAAKqmI,QAAQ5/G,OAASzmB,KAAKymB,OAEvBzmB,KAAKqmI,QAAQnhI,KAAK2O,YAAc7T,KAAKiR,MAAM0W,YAE9C3nB,KAAKqmI,QAAQ5/G,OAAOxe,MAAQmB,KAAKC,IAAI,EAAGrJ,KAAKqmI,QAAQ5/G,OAAOxe,MAAQ,GACpEjI,KAAKqmI,QAAQ5/G,OAAO5e,OAASuB,KAAKC,IAAI,EAAGrJ,KAAKqmI,QAAQ5/G,OAAO5e,OAAS,IAGvE7H,KAAKqmI,QAAQnjH,SAAWjE,OAAOjf,KAAK6R,MAAMnK,MAAMiG,YAAY2W,iBAAmB,KAC/EtkB,KAAKqmI,QAAQxzH,UAGd7S,KAAK00H,gBAAgBjuG,OAASzmB,KAAKymB,OACnCzmB,KAAK00H,gBAAgB7hH,SACrB7S,KAAK0nI,yBAQNz5B,gBAAgB7hG,UAAU6iB,QAAU,WA6BnC,GA3B0B,MAAtBjvB,KAAKwrG,gBAERxrG,KAAK6R,MAAM0V,KAAKtW,MAAMsyB,eAAevjC,KAAKwrG,eAC1CxrG,KAAKwrG,cAAgB,MAGF,MAAhBxrG,KAAKqmI,UAERrmI,KAAKqmI,QAAQp3G,UACbjvB,KAAKqmI,QAAU,MAGY,MAAxBrmI,KAAKuoI,kBAERvoI,KAAKuoI,gBAAgBt5G,UACrBjvB,KAAKuoI,gBAAkB,MAGI,MAAxBvoI,KAAK00H,kBAER10H,KAAK00H,gBAAgBzlG,UACrBjvB,KAAK00H,gBAAkB,MAGxB10H,KAAK+kI,WAAa,KAClB/kI,KAAKs6H,aAEc,MAAft6H,KAAK8kI,OACT,CACC,IAAK,IAAIjgI,EAAI,EAAGA,EAAI7E,KAAK8kI,OAAO3iI,OAAQ0C,IAEvC7E,KAAK8kI,OAAOjgI,GAAGoqB,UAGhBjvB,KAAK8kI,OAAS,KAGf,GAA0B,MAAtB9kI,KAAKklI,cACT,CACC,IAASrgI,EAAI,EAAGA,EAAI7E,KAAKklI,cAAc/iI,OAAQ0C,IAE9C7E,KAAKklI,cAAcrgI,GAAGoqB,UAGvBjvB,KAAKklI,cAAgB,OAIvBjlI,WAAWguG,qBAA6C,IAApBA,gBAAkCA,qBAAkBrnG,EA2DxFynG,cAAcjiG,UAAU6E,MAAQ,KAOhCo9F,cAAcjiG,UAAUyF,MAAQ,KAOhCw8F,cAAcjiG,UAAU0yG,OAAS,KAQjCzQ,cAAcjiG,UAAUqyH,kBAAoB,KAO5CpwB,cAAcjiG,UAAUulB,MAAQ,KAOhC08E,cAAcjiG,UAAUiG,MAAQ,KAOhCg8F,cAAcjiG,UAAUo8H,MAAQ,KAOhCn6B,cAAcjiG,UAAU24H,WAAa,KAOrC12B,cAAcjiG,UAAUgsH,cAAe,EAQvC/pB,cAAcjiG,UAAUy9F,YAAa,EAQrCwE,cAAcjiG,UAAUq8H,eAAgB,EAOxCp6B,cAAcjiG,UAAUs8H,uBAAwB,EAQhDr6B,cAAcjiG,UAAUu8H,oBAAqB,EAS7Ct6B,cAAcjiG,UAAUw8H,uBAAwB,EAShDv6B,cAAcjiG,UAAUy8H,qBAAsB,EAQ9Cx6B,cAAcjiG,UAAU08H,mBAAqB,GAQ7Cz6B,cAAcjiG,UAAU+3H,wBAAyB,EASjD91B,cAAcjiG,UAAU28H,YAAa,EAQrC16B,cAAcjiG,UAAU2pH,wBAAyB,EAQjD1nB,cAAcjiG,UAAU48H,iBAAkB,EAO1C36B,cAAcjiG,UAAU83H,YAAc,KAOtC71B,cAAcjiG,UAAUqlD,UAAY,EASpC48C,cAAcjiG,UAAU4yH,gBAAiB,EAQzC3wB,cAAcjiG,UAAU68H,mBAAoB,EAO5C56B,cAAcjiG,UAAUjF,KAAO,WAyB9B,GAvBAnH,KAAKiR,MAAQjR,KAAK6R,MAAM0V,KAAKtW,MAC7BjR,KAAK8+G,OAAS9+G,KAAKo7D,eACnBp7D,KAAKy+H,kBAAoB,IAAIhxB,oBAAoBztG,KAAKiR,OAItDjR,KAAKgzD,OAAS,GAIdhzD,KAAKkpI,UAAYlpI,KAAKmpI,mBAAmBnpI,KAAK6R,OAC9C7R,KAAKqS,MAAQrS,KAAK6kI,qBAAqB7kI,KAAKkpI,WAC5ClpI,KAAKqS,MAAMic,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YACvD5gB,YAAY0lB,kBAAoB1lB,YAAY4gB,YAC7CvuB,KAAKqS,MAAMlL,KAAKnH,KAAKiR,MAAMa,UAAU+gD,kBACrC7yD,KAAKqS,MAAMskC,eAAgB,EAC3B32C,KAAKqS,MAAMimD,UAAU3qD,YAAYmnB,qBACjC7qB,QAAQ06B,oBAAoB3kC,KAAKqS,MAAMnN,KAAMlF,KAAKiR,MAAOjR,KAAK6R,OAG9D7R,KAAK+oI,WAAgC,MAAnB/oI,KAAK6R,MAAMxD,MAC5BrO,KAAK6R,MAAMxD,KAAKnJ,KAAK2O,YAAc7T,KAAKiR,MAAM0W,WAE1C3nB,KAAK+oI,WACV,CAEC,IAAIpnG,EAAc3hC,KAAK6R,MAAM6lF,yBAAwB,GAQrD,GANmB,MAAf/1D,IAEH3hC,KAAK+oI,WAAiC,MAApBpnG,EAAYtzB,MAC7BszB,EAAYtzB,KAAKnJ,KAAK2O,YAAc7T,KAAKiR,MAAM0W,YAG5C3nB,KAAK+oI,WACV,CAEC,IAAIK,EAAcppI,KAAK6R,MAAM6lF,yBAAwB,GAElC,MAAf0xC,IAEHppI,KAAK+oI,WAAiC,MAApBK,EAAY/6H,MAC9B+6H,EAAY/6H,KAAKnJ,KAAK2O,YAAc7T,KAAKiR,MAAM0W,YAMlD,GAAI3nB,KAAKmkI,uBACT,CACC,IAAIxtH,EAAS3W,KAAKiR,MAAMiB,MAAM+vC,UAAUjiD,KAAK6R,MAAMG,MAEnD,GAAIhS,KAAKiR,MAAMiB,MAAM2vC,SAASlrC,GAC9B,CACC,IAAIk2D,EAAS7sE,KAAKiR,MAAMsW,KAAKxV,SAAS4E,GAExB,MAAVk2D,IAEH7sE,KAAKuoI,gBAAkBvoI,KAAKulI,2BAA2B14D,GAEvD7sE,KAAKuoI,gBAAgBj6G,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YAAe5gB,YAAYylB,YAAczlB,YAAY4gB,YACvHvuB,KAAKuoI,gBAAgB5xF,eAAgB,EACrC32C,KAAKuoI,gBAAgBrlH,SAAWjE,OAAO4tD,EAAOnlE,MAAMiG,YAAY2W,iBAAmB,KACnFtkB,KAAKuoI,gBAAgBphI,KAAKnH,KAAKiR,MAAMa,UAAU+gD,qBAO9C7yD,KAAKiR,MAAM8/G,oBAAsB5lB,eAAe/+F,UAAU8rH,UAC7D/sB,eAAe/+F,UAAU8rH,UAAY,KAErCl4H,KAAKwoI,MAAQxoI,KAAKqpI,cAEdrpI,KAAKspI,0BAERtpI,KAAKupI,aAAevpI,KAAKwpI,uBAK3BxpI,KAAKmb,MAAQ,IAAIhM,QAAQnP,KAAK6R,MAAM0gF,eAAenjF,EAAGpP,KAAK6R,MAAM0gF,eAAeljF,GAChFrP,KAAK+kI,WAAa/kI,KAAKypI,yBACvBzpI,KAAK0pI,SAAS1pI,KAAK+kI,YACnB/kI,KAAK+kI,WAAWzsE,UAAU3qD,YAAYonB,qBAEtC/0B,KAAKklI,cAAgBllI,KAAKmlI,sBAE1BnlI,KAAK6S,UAQNw7F,cAAcjiG,UAAU+4H,oBAAsB,WAE7C,OAAO,MAUR92B,cAAcjiG,UAAUk9H,sBAAwB,SAASnhI,GAExD,OAAOnI,KAAK6oI,sBAAoE,MAA5C7oI,KAAK6R,MAAMnK,MAAMiG,YAAYuwB,aAC/Dl+B,KAAK6R,MAAMnK,MAAMiG,YAAYuwB,aAAevwB,YAAYC,MACL,GAAnD5N,KAAK6R,MAAMnK,MAAMiG,YAAY+sB,qBACwC,SAArEpyB,QAAQyW,SAAS/e,KAAK6R,MAAMnK,MAAOiG,YAAYswB,YAAa,OAS/DowE,cAAcjiG,UAAU00H,cAAgB,SAAS9uH,GAEhD,OAAO,GASRq8F,cAAcjiG,UAAUu9H,gBAAkB,SAASxhI,GAElD,OAAO8B,QAAQ08B,YAAYx+B,IAS5BkmG,cAAcjiG,UAAUw9H,mBAAqB,SAASzhI,GAErD,OAAO8B,QAAQ08B,YAAYx+B,IAQ5BkmG,cAAcjiG,UAAU+8H,mBAAqB,SAASt3H,GAErD,OAAOA,EAAMsT,gBAQdkpF,cAAcjiG,UAAUm5H,2BAA6B,SAAS9+G,GAE7D,IAAIpU,EAAQ,IAAIopD,iBAAiBh1C,EAAQ,KAAMzmB,KAAKwlI,qBAIpD,OAHAnzH,EAAMuhD,YAAc5zD,KAAKylI,0BACzBpzH,EAAMy/C,SAAW9xD,KAAK0lI,oBAEfrzH,GAQRg8F,cAAcjiG,UAAUy4H,qBAAuB,SAAS7xE,GAEvD,IAAI3gD,EAAQ,IAAIrS,KAAK6R,MAAMQ,MAAMpG,YAQjC,OAPAoG,EAAMqhD,SAAU,EAChBrhD,EAAMjH,MAAMpL,KAAK6R,OAEjBQ,EAAMy/C,SAAW9xD,KAAK0lI,oBACtBrzH,EAAMw2C,OAAS7oD,KAAKwlI,oBACpBnzH,EAAMmjD,UAAW,EAEVnjD,GAQRg8F,cAAcjiG,UAAUo5H,kBAAoB,WAE3C,OAAO73H,YAAY+nB,sBAQpB24E,cAAcjiG,UAAUq5H,wBAA0B,WAEjD,OAAO93H,YAAYkoB,4BAQpBw4E,cAAcjiG,UAAUs5H,kBAAoB,WAE3C,OAAO/3H,YAAYooB,uBASpBs4E,cAAcjiG,UAAUozH,kBAAoB,SAASxtH,GAEpD,OAAO,GAQRq8F,cAAcjiG,UAAU2pC,UAAY,SAAS3mC,EAAGC,GAE/C,OAASrP,KAAKg/H,eAA+C,KAA7Bh/H,KAAKiR,MAAM8kC,UAAU3mC,EAAGC,IAQzDg/F,cAAcjiG,UAAUgvD,aAAe,WAEtC,IAAI0jD,EAAS,IAAI7R,aAAajtG,KAAKiR,OAC/B05F,EAAO3qG,KA6DX,OAzDA8+G,EAAO97E,QAAU,SAAS4N,GAEzB,IAAI5+B,EAAOi7F,aAAa7gG,UAAU42B,QAAQ53B,MAAMpL,KAAMqL,WAStD,GANK2G,GAAQ24F,EAAK94F,MAAMG,MAAgB,MAARA,GAAsC,MAArB24F,EAAKx1D,eAErDnjC,EAAO24F,EAAK15F,MAAM8kC,UAAU40D,EAAKx1D,aAAa/lC,EAAGu7F,EAAKx1D,aAAa9lC,IAIxD,MAAR2C,IAAiBhS,KAAKiR,MAAM84G,kBAAkB/3G,GAClD,CACC,IAAI2E,EAAS3W,KAAKiR,MAAM8c,WAAWk0B,UAAUjwC,GAEzChS,KAAKiR,MAAM8c,WAAW8zB,SAASlrC,IAAW3W,KAAKiR,MAAM84G,kBAAkBpzG,KAE1E3E,EAAO2E,GAIT,IAAIzE,EAAQy4F,EAAK15F,MAAM8c,WAgBvB,OAdK/tB,KAAKiR,MAAMu8D,WAAWx7D,IAA8B,MAArB24F,EAAKx1D,cACxCn1C,KAAKiR,MAAMs/G,oBAAoBv+G,EAAM24F,EAAKx1D,aAAa/lC,EAAGu7F,EAAKx1D,aAAa9lC,KAC1Es7F,EAAK60B,kBAAkBxtH,IAAWA,GAAQ24F,EAAK94F,MAAMG,MAC9C,MAARA,IAAiB24F,EAAK15F,MAAM4pG,kBAAoB3oG,EAAMC,OAAOH,IAC9DE,EAAMu4D,WAAWkgC,EAAK94F,MAAMG,KAAMA,MAElCA,EAAO,MAGHhS,KAAKiR,MAAM84G,kBAAkB/3G,KAEjCA,EAAO,MAGDA,GAIR8sG,EAAO+e,aAAe,SAAShsH,GAE9B,IAAIK,EAAQy4F,EAAK15F,MAAM8c,WACnBkgD,EAAQ08B,EAAK15F,MAAMsW,KAAKqsF,gBAAgB/hG,EAC3C84F,EAAK15F,MAAMsW,KAAKxV,SAASG,EAAMs4D,YAAYmgC,EAAK94F,MAAMG,MACrD24F,EAAKloE,YAAakoE,EAAKloE,UACrBonG,EAAsB,MAAT57D,EAAiBA,EAAMj8D,KAAO,KAC3C8R,EAAU6mF,EAAa,SAAI94F,EAAMG,KAAO63H,EACxCprH,EAAUksF,EAAa,SAAIk/B,EAAYh4H,EAAMG,KAKjD,OAFA24F,EAAKh5E,MAAQg5E,EAAK+0B,mBAAmB57G,EAAQrF,GAExB,MAAdksF,EAAKh5E,OAGNmtF,GAeRzQ,cAAcjiG,UAAUszH,mBAAqB,SAAS57G,EAAQrF,GAE7D,OAAOze,KAAKiR,MAAMsyG,uBAAuBvjH,KAAK6R,MAAMG,KAAM8R,EAAQrF,IASlE4vF,cAAcjiG,UAAUi9H,YAAc,WAKtC,IAHA,IAAIr3H,EAAOhS,KAAK6R,MAAMG,KAClBw2H,EAAQ,GAEH3jI,EAAI,EAAGA,EAAI7E,KAAKkpI,UAAU/mI,OAAQ0C,IAE1C,GAAI7E,KAAK8pI,gBAAgBjlI,GACzB,CACC,IAAIif,EAAc,GAALjf,EACT4Z,EAAS5Z,GAAK7E,KAAKkpI,UAAU/mI,OAAS,EACtCyhB,EAAWE,GAAUrF,GAErBmF,GAAY5jB,KAAKiR,MAAM89G,eAAe/8G,KAExC1J,QAAQ2M,KAAKjV,MAAM,SAASyO,GAE5B,IAAIs7H,EAAO/pI,KAAKgqI,kBAAkBv7H,GAClCzO,KAAK0pI,SAASK,EAAMzhI,QAAQ2M,KAAKjV,KAAMsI,QAAQ2M,KAAKjV,MAAM,WAErDA,KAAK0oI,uBAER1oI,KAAKiqI,YAAYjqI,KAAK6R,MAAOpD,QAI3BzO,KAAKkqI,gBAAgBrlI,IAExBklI,EAAKzxE,UAAU,EAAa3qD,YAAYqnB,uBAAyBrnB,YAAYsnB,oBAG9EuzG,EAAM57H,KAAKm9H,GAENnmH,IAEJ5jB,KAAKgzD,OAAOpmD,KAAK,IAAIuC,QAAQ,EAAE,IAC/B46H,EAAK7kI,KAAKwC,MAAM6D,WAAa,YArB/B,CAuBI1G,GAKP,OAAO2jI,GASPn6B,cAAcjiG,UAAUo9H,mBAAqB,WAE7C,IAAIx3H,EAAOhS,KAAK6R,MAAMG,KAElBw2H,GADOxoI,KAAKkpI,UAAU,GACd,IAEZ,GAAIlpI,KAAKiR,MAAM89G,eAAe/8G,GAE7B,IAAK,IAAInN,EAAI,EAAGA,EAAI7E,KAAKkpI,UAAU/mI,OAAQ0C,IAEzCyD,QAAQ2M,KAAKjV,MAAM,SAAS+pI,GAE5B/pI,KAAK0pI,SAASK,GACdA,EAAKzxE,UAAU3qD,YAAYunB,4BAC3BszG,EAAM57H,KAAKm9H,KAJZ,CAKI/pI,KAAKgqI,qBAIX,OAAOxB,GAQRn6B,cAAcjiG,UAAU89H,gBAAkB,SAASz7H,GAElD,OAAO,GAQR4/F,cAAcjiG,UAAU09H,gBAAkB,SAASr7H,GAElD,IAAIqV,EAAS9jB,KAAK6R,MAAM6lF,yBAAwB,GAC5Cj5E,EAASze,KAAK6R,MAAM6lF,yBAAwB,GAC5Cx1C,EAAMliD,KAAKiR,MAAMkxC,gBAAgBniD,KAAK6R,MAAMG,MAGhD,OAFwB,MAAPkwC,EAAeliD,KAAKiR,MAAMsW,KAAKosF,aAAa3zG,KAAK6R,MAAOqwC,EAAI8Q,OAAQlvC,EAAQrF,GAAU,OAEnFuiF,YAAYC,gBAA2B,GAATxyF,GAAcA,GAASzO,KAAKkpI,UAAU/mI,OAAS,GAYlGksG,cAAcjiG,UAAU49H,kBAAoB,SAASv7H,GAEpD,GAAwB,MAApBzO,KAAKkkI,YACT,CACC,IAAI7xH,EAAQ,IAAIyqD,aAAa,IAAIxtD,YAAY,EAAG,EAAGtP,KAAKkkI,YAAYj8H,MAAOjI,KAAKkkI,YAAYr8H,QAAS7H,KAAKkkI,YAAYj/H,KAKtH,OAFAoN,EAAMs1D,qBAAsB,EAErBt1D,EAIP,IAAIwG,EAAIlL,YAAYyoB,YAOpB,OALIp2B,KAAK+oI,aAERlwH,GAAK,GAGC,IAAI4iD,iBAAiB,IAAInsD,YAAY,EAAG,EAAGuJ,EAAGA,GAAIlL,YAAY2oB,iBAAkB3oB,YAAY4oB,qBASrG83E,cAAcjiG,UAAUq9H,uBAAyB,WAEhD,GAA6B,MAAzBzpI,KAAKmqI,iBACT,CACC,IAAI93H,EAAQ,IAAIyqD,aAAa,IAAIxtD,YAAY,EAAG,EAAGtP,KAAKmqI,iBAAiBliI,MAAOjI,KAAKmqI,iBAAiBtiI,QAAS7H,KAAKmqI,iBAAiBllI,KAKrI,OAFAoN,EAAMs1D,qBAAsB,EAErBt1D,EAIP,IAAIwG,EAAIlL,YAAY0oB,kBACpB,OAAO,IAAIolC,iBAAiB,IAAInsD,YAAY,EAAG,EAAGuJ,EAAGA,GAAIlL,YAAY6oB,uBAAwB7oB,YAAY4oB,qBAa3G83E,cAAcjiG,UAAUs9H,SAAW,SAASK,EAAMhlG,GAE7C/kC,KAAK+oI,YAERgB,EAAKz7G,QAAU3gB,YAAY4lB,mBAC3Bw2G,EAAK5iI,KAAKnH,KAAKiR,MAAM0W,aAIrBoiH,EAAKz7G,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YACjD5gB,YAAY0lB,kBAAoB1lB,YAAY4gB,YAC7Cw7G,EAAK5iI,KAAKnH,KAAKiR,MAAMa,UAAU+gD,mBAGhC5oD,QAAQ06B,oBAAoBolG,EAAK7kI,KAAMlF,KAAKiR,MAAOjR,KAAK6R,MACtD,KAAM,KAAM,KAAMkzB,IAGhB7kC,SAASU,WAAsC,GAAzBC,SAASC,eAElCmJ,QAAQD,YAAY+/H,EAAK7kI,KAAM,aAAa,SAASiD,GAIpD,OAFA8B,QAAQm4B,QAAQj6B,IAET,KAILjI,SAASqD,UAEZwmI,EAAK7kI,KAAKb,aAAa,iBAAkB,SAS3CgqG,cAAcjiG,UAAU05H,kBAAoB,SAASl1F,GAGpD,IAAI8a,EAAQzhD,QAAQm5B,aAAawN,EAAGrO,YAAgC,EAAjBviC,KAAKyxD,UACpDqkE,EAAO91H,KAAK+1H,yBAA2B71H,SAASE,OAASsrD,EAAM,GAClE,IAAIp8C,YAAYshC,EAAG9N,YAAc4oB,EAAK9a,EAAG7N,YAAc2oB,EAAK,EAAIA,EAAK,EAAIA,GAAO,KAC7Es3E,EAAY,KACZr2H,EAAS,KAEb,SAASo5H,EAAW1zH,GAEnB,GAAa,MAATA,GAA+B,MAAdA,EAAMnN,MAA4C,QAA5BmN,EAAMnN,KAAKwC,MAAMgmB,SAC5B,UAA/Brb,EAAMnN,KAAKwC,MAAM6D,aAChBqlC,EAAGnO,SAASpwB,IAAkB,MAAPyjH,GAAextH,QAAQqe,WAAWtU,EAAMoU,OAAQqvG,IACzE,CACC,IAAIvjH,EAAKq+B,EAAG9N,YAAczwB,EAAMoU,OAAO9W,aACnC8C,EAAKm+B,EAAG7N,YAAc1wB,EAAMoU,OAAO7W,aACnCiB,EAAM0B,EAAKA,EAAKE,EAAKA,EAEzB,GAAiB,MAAbuwH,GAAqBnyH,GAAOmyH,EAI/B,OAFAA,EAAYnyH,GAEL,EAIT,OAAO,EAGR,GAA0B,MAAtB7Q,KAAKklI,eAAyBllI,KAAKgmI,oBAAoBp1F,GAG1D,IAAK,IAAI/rC,EAAI7E,KAAKklI,cAAc/iI,OAAS,EAAG0C,GAAK,EAAGA,IAEnD,GAAIkhI,EAAW/lI,KAAKklI,cAAcrgI,GAAGwN,OAGpC,OAAOpI,QAAQw9B,cAAgB5iC,EAUlC,IALI+rC,EAAGnO,SAASziC,KAAK6R,MAAMxD,OAAS03H,EAAW/lI,KAAK+kI,eAEnDp4H,EAAS1C,QAAQs9B,cAGA,MAAdvnC,KAAKwoI,MAER,IAAS3jI,EAAI,EAAGA,EAAI7E,KAAKwoI,MAAMrmI,OAAQ0C,IAElCkhI,EAAW/lI,KAAKwoI,MAAM3jI,MAEzB8H,EAAS9H,GAKZ,GAAyB,MAArB7E,KAAKupI,cAAwBvpI,KAAKoqI,sBAAsBx5F,GAE3D,IAAS/rC,EAAI,EAAGA,EAAI7E,KAAKupI,aAAapnI,OAAQ0C,IAEzCkhI,EAAW/lI,KAAKupI,aAAa1kI,MAEhC8H,EAAS1C,QAAQy9B,eAAiB7iC,GAKrC,OAAO8H,GASR0hG,cAAcjiG,UAAUg+H,sBAAwB,SAASx5F,GAExD,OAAO,GASRy9D,cAAcjiG,UAAU45H,oBAAsB,SAASp1F,GAEtD,OAAO,GAYRy9D,cAAcjiG,UAAUqkC,UAAY,SAAS3mC,EAAQ8mC,GAEpD,IAAIq1F,EAASjmI,KAAK8lI,kBAAkBl1F,GAEpC,GAAkB,MAAd5wC,KAAKwoI,OAAuC,MAAtBxoI,KAAKwoI,MAAMvC,GACrC,CACC,IAAI5pH,EAAIrc,KAAKwoI,MAAMvC,GAAQx/G,OAC3BzmB,KAAK8jI,UAAY,IAAI30H,QAAQkN,EAAE1M,aAAc0M,EAAEzM,cAG5C5P,KAAK6pG,YAAwB,MAAVo8B,GAAkBjmI,KAAK2pI,gBAAgB/4F,EAAGrO,aAEhEviC,KAAKgoH,SAAShoH,KAAK6R,MAAO++B,EAAGrO,YAC7BqO,EAAGxO,WAEe,MAAV6jG,IAAmBr1F,EAAGzO,cAAgBniC,KAAKiR,MAAM0C,cAErD3T,KAAKyoI,eAAiBzoI,KAAK4pI,mBAAmBh5F,EAAGrO,YAEpDviC,KAAKiqI,YAAYjqI,KAAK6R,MAAOo0H,IAErBA,GAAUh8H,QAAQs9B,cAAgBvnC,KAAKiR,MAAM87G,eAAen8E,EAAG5N,cAEnEijG,GAAUh8H,QAAQy9B,gBAErBp/B,QAAQ8J,WAAWpS,KAAKupI,aAAat/H,QAAQy9B,eAAiBu+F,GAAQ/gI,KAAM,KAG7ElF,KAAKqnB,MAAMupB,EAAGlO,OAAQkO,EAAGhO,OAAQqjG,IAGlCr1F,EAAGxO,YASLisE,cAAcjiG,UAAUib,MAAQ,SAASjY,EAAGC,EAAGZ,GAS9C,GAPAzO,KAAKmyC,OAAS/iC,EACdpP,KAAKoyC,OAAS/iC,EAEdrP,KAAKyiC,SAA0B,MAAdziC,KAAKwoI,OAAkC,GAAT/5H,EAC/CzO,KAAKqqI,SAA0B,MAAdrqI,KAAKwoI,OAAyB/5H,GAASzO,KAAKwoI,MAAMrmI,OAAS,EAC5EnC,KAAKsqI,QAAU77H,GAASxE,QAAQs9B,aAE5BvnC,KAAKyiC,UAAYziC,KAAKqqI,SAC1B,CACC,IAAIr4H,EAAOhS,KAAK6R,MAAMG,KAClB4R,EAAW5jB,KAAKiR,MAAMiB,MAAMs4D,YAAYx4D,EAAMhS,KAAKyiC,WAEtC,MAAZ7e,GAAoB5jB,KAAKiR,MAAM69G,uBAAuB98G,EAAMhS,KAAKyiC,WACxD,MAAZ7e,GAAoB5jB,KAAKiR,MAAMy2G,qBAAqB11G,EAAM4R,EAAU5jB,KAAKyiC,aAE1EziC,KAAKyO,MAAQA,QAKdzO,KAAKyO,MAAQA,EAId,GAAIzO,KAAKyO,OAASxE,QAAQw9B,eAAiBznC,KAAKyO,MAAQxE,QAAQy9B,gBAErC,MAAtB1nC,KAAKklI,cAER,IAAK,IAAIrgI,EAAI,EAAGA,EAAI7E,KAAKklI,cAAc/iI,OAAQ0C,IAE1CA,GAAKoF,QAAQw9B,cAAgBznC,KAAKyO,OAErCzO,KAAKklI,cAAcrgI,GAAG8F,YAAW,IAYtC0jG,cAAcjiG,UAAUm+H,kBAAoB,SAASnkH,EAAOxC,GAE3D,OAAO5jB,KAAK6R,MAAMpC,SASnB4+F,cAAcjiG,UAAUo+H,2BAA6B,WAEpD,OAAOxqI,KAAKiR,MAAMknC,SAAWn4C,KAAKiR,MAAMsW,KAAKjV,MAAQ,GAQtD+7F,cAAcjiG,UAAUm/F,WAAa,SAAS36D,EAAIxqB,KAOlDioF,cAAcjiG,UAAUkuH,WAAa,aAOrCjsB,cAAcjiG,UAAUmuH,YAAc,SAASp4H,GAE9C,OAAOiH,KAAK2c,MAAM5jB,IAQnBksG,cAAcjiG,UAAUq+H,uBAAyB,SAAS75F,GAEzD,OAAO5wC,KAAKgpI,kBAAoB/+H,QAAQ48B,UAAU+J,EAAGrO,aAQtD8rE,cAAcjiG,UAAUokH,iBAAmB,SAAS5/E,GAEnD,IAAIrpB,EAAOvnB,KAAKiR,MAAMa,UAClBQ,EAAQiV,EAAKjV,MACb8T,EAAQ,IAAIjX,QAAQnP,KAAKu6H,YAAY3pF,EAAG9N,YAAcxwB,GAASA,EAClEtS,KAAKu6H,YAAY3pF,EAAG7N,YAAczwB,GAASA,GAExC0/C,EAAKhyD,KAAKwqI,6BACVv4E,GAAY,EACZG,GAAY,EAEhB,GAAIJ,EAAK,GAAKhyD,KAAKyqI,uBAAuB75F,GAC1C,CACC,SAAS85F,EAAYjnH,GAEpB,GAAU,MAANA,EACJ,CACC,IAAIrU,EAAIqU,EAAGrU,EAEPhG,KAAKsX,IAAI0F,EAAMhX,EAAIA,GAAK4iD,IAE3B5rC,EAAMhX,EAAIA,EACV6iD,GAAY,GAGb,IAAI5iD,EAAIoU,EAAGpU,EAEPjG,KAAKsX,IAAI0F,EAAM/W,EAAIA,GAAK2iD,IAE3B5rC,EAAM/W,EAAIA,EACV+iD,GAAY,IAMf,SAASu4E,EAAe/mH,GAEP,MAAZA,GAEH8mH,EAAYn7H,KAAKvP,KAAM,IAAImP,QAAQoY,EAAKu6E,kBAAkBl+E,GACxD2D,EAAKg6E,kBAAkB39E,KAO3B,GAHA+mH,EAAep7H,KAAKvP,KAAMA,KAAK6R,MAAM6lF,yBAAwB,IAC7DizC,EAAep7H,KAAKvP,KAAMA,KAAK6R,MAAM6lF,yBAAwB,IAE5B,MAA7B13F,KAAK6R,MAAMsT,eAEd,IAAK,IAAItgB,EAAI,EAAGA,EAAI7E,KAAK6R,MAAMsT,eAAehjB,OAAQ0C,IAErD6lI,EAAYn7H,KAAKvP,KAAMA,KAAK6R,MAAMsT,eAAetgB,IAKpD,GAAI7E,KAAKiR,MAAM8mC,mBAAmBnH,EAAGrO,YACrC,CACC,IAAI/6B,EAAK+f,EAAKoH,UAETsjC,IAEJ7rC,EAAMhX,GAAKpP,KAAKiR,MAAMmnC,KAAKhyB,EAAMhX,EAAIkD,EAAQ9K,EAAG4H,GAAK5H,EAAG4H,GAAKkD,GAGzD8/C,IAEJhsC,EAAM/W,GAAKrP,KAAKiR,MAAMmnC,KAAKhyB,EAAM/W,EAAIiD,EAAQ9K,EAAG6H,GAAK7H,EAAG6H,GAAKiD,GAI/D,OAAO8T,GAQRioF,cAAcjiG,UAAUw+H,wBAA0B,SAASh6F,GAI1D,GAFA5wC,KAAKy+H,kBAAkBp4D,OAAOz1B,EAAI5wC,KAAKyiC,UAAU,EAAMmO,EAAGnO,SAASziC,KAAK8+G,OAAOhnE,UAAUzlC,OAAS,KAAOrS,KAAKm1C,cAEnE,MAAvCn1C,KAAKy+H,kBAAkB9wB,cAAoE,MAA5C3tG,KAAKy+H,kBAAkB0B,kBAC1E,CAG8B,MAAzBngI,KAAK8+G,OAAOhnE,WAAoD,MAA/B93C,KAAK8+G,OAAOhnE,UAAUjmC,OAC1D7R,KAAK8+G,OAAOhnE,UAAUjmC,MAAMG,MAAQhS,KAAKy+H,kBAAkB9wB,aAAa37F,KAG9B,eAAtChS,KAAK8+G,OAAOhnE,UAAUzlC,MAAMw2C,SAE/B7oD,KAAK8+G,OAAOhnE,UAAUzlC,MAAMw2C,OAAS,cACrC7oD,KAAK8+G,OAAOhnE,UAAUi2D,WAKvB/tG,KAAK8+G,OAAOif,SAAS/9H,KAAKy+H,kBAAkB9wB,aAAa37F,KAAM,eAGhE,IAAIE,EAAQlS,KAAKiR,MAAM8c,WACnBkgD,EAAQjuE,KAAKiR,MAAMsW,KAAKqsF,gBAAgB5zG,KAAK6R,MAC/C7R,KAAKiR,MAAMsW,KAAKxV,SAASG,EAAMs4D,YAAYxqE,KAAK6R,MAAMG,MACtDhS,KAAKyiC,YAAaziC,KAAKyiC,UACrBonG,EAAsB,MAAT57D,EAAiBA,EAAMj8D,KAAO,KAC3C8R,EAAU9jB,KAAa,SAAIA,KAAKy+H,kBAAkB9wB,aAAa37F,KAAO63H,EACtEprH,EAAUze,KAAa,SAAI6pI,EAAY7pI,KAAKy+H,kBAAkB9wB,aAAa37F,KAG/EhS,KAAK2xB,MAAQ3xB,KAAK0/H,mBAAmB57G,EAAQrF,GAC7C,IAAI9R,EAAS,KAab,OAXkB,MAAd3M,KAAK2xB,QAERhlB,EAAS3M,KAAKy+H,kBAAkB9wB,eAGf,MAAd3tG,KAAK2xB,OAA4B,MAAVhlB,IACzB3M,KAAK8gI,cAAcn0H,EAAOqF,QAE3BhS,KAAKy+H,kBAAkBvoF,QAGjBvpC,EAEH,GAAK3M,KAAKiR,MAAMi5G,sBAAsBt5E,EAAGrO,YAiB7C,OAFAviC,KAAK8+G,OAAO5oE,QAEL,KAfPl2C,KAAK8+G,OAAO6e,QAAQ/sF,GACpB,IAAI/+B,EAAQ7R,KAAK8+G,OAAO0e,gBAQxB,OANa,MAAT3rH,GAAkB7R,KAAK8gI,cAAcjvH,EAAMG,QAE9ChS,KAAKy+H,kBAAkBvoF,QACvBl2C,KAAK8+G,OAAO5oE,SAGNl2C,KAAK8+G,OAAO0e,iBAoBrBnvB,cAAcjiG,UAAUy+H,iBAAmB,SAASpnH,EAAImtB,GAEvD,IAgFyBliC,EAAKmC,EAhF1B2B,EAAWxS,KAAKiR,MAAMkxC,gBAAgBniD,KAAK6R,MAAMG,MACjDghD,EAA6B,MAAnBxgD,EAASwgD,OAAkBxgD,EAASwgD,OAAOyE,QAAU,KAC/DrxC,EAAQ,IAAIjX,QAAQsU,EAAGrU,EAAGqU,EAAGpU,GAC7B1C,EAAS,KAEb,GAAK3M,KAAKyiC,UAAaziC,KAAKqqI,SAkGnBrqI,KAAKiR,MAAMypG,sBAEnB1nD,EAAS,WAhGT,GAFAhzD,KAAK2oB,aAAavC,GAAO,GAEX,MAAV4sC,EAEHA,EAAS,CAAC5sC,OAGX,CAQC,GANIpmB,KAAKyO,OAASxE,QAAQy9B,gBAEzBsrB,EAAO58C,OAAOnM,QAAQy9B,eAAiB1nC,KAAKyO,MAAO,EAAG2X,IAIlDpmB,KAAKyiC,WAAaziC,KAAKqqI,SAC5B,CACC,IAAK,IAAIxlI,EAAI,EAAGA,EAAI7E,KAAKwoI,MAAMrmI,OAAQ0C,IAEtC,GAAIA,GAAK7E,KAAKyO,MACd,CACC,IAAIs7H,EAAO/pI,KAAKwoI,MAAM3jI,GAEV,MAARklI,GAAgBzhI,QAAQoe,SAASqjH,EAAKtjH,OAAQhD,EAAGrU,EAAGqU,EAAGpU,KAEtDrP,KAAKyO,OAASxE,QAAQy9B,eAEzBsrB,EAAO58C,OAAOnM,QAAQy9B,eAAiB1nC,KAAKyO,MAAO,GAInDukD,EAAO58C,OAAOpW,KAAKyO,MAAQ,EAAG,GAG/B9B,EAASqmD,GAMZ,GAAc,MAAVrmD,GAAkB3M,KAAK4oI,wBAAgC,MAANh4F,IAAe3mC,QAAQ48B,UAAU+J,EAAGrO,aACzF,CACC,IAAImpB,EAAM1rD,KAAKiR,MAAMwgD,UAAYzxD,KAAKiR,MAAMwgD,UACxC/wC,EAAM1gB,KAAK6R,MAAMsT,eAAesyC,QACpC/2C,EAAI1gB,KAAKyO,OAASgV,EAGlB,IAAIxe,EAAMjF,KAAK6R,MAAM6lF,yBAAwB,GAElC,MAAPzyF,IAKM,OAHLgK,EAAIjP,KAAKiR,MAAMqiG,wBAAwBtzG,KAAK6R,MAAO5M,GAAK,KAGF,MAAzCjF,KAAKiR,MAAMuiG,mBAAmBvuG,EAAKgK,KAEnDyR,EAAI,GAAK,IAAIvR,QAAQlK,EAAIsiB,KAAKu6E,kBAAkB78F,GAAMA,EAAIsiB,KAAKg6E,kBAAkBt8F,MAInF,IAIKgK,EAJD6oE,EAAM93E,KAAK6R,MAAM6lF,yBAAwB,GAElC,MAAP5f,IAKM,OAHL7oE,EAAIjP,KAAKiR,MAAMqiG,wBAAwBtzG,KAAK6R,MAAOimE,GAAK,KAGF,MAAzC93E,KAAKiR,MAAMuiG,mBAAmB17B,EAAK7oE,KAEnDyR,EAAIA,EAAIve,OAAS,GAAK,IAAIgN,QAAQ2oE,EAAIvwD,KAAKu6E,kBAAkBhqB,GAAMA,EAAIvwD,KAAKg6E,kBAAkBzpB,MAI3EppE,EAYT1O,KAAKyO,MAZSoC,EAYF4S,EAVnB/U,EAAM,GAAKA,EAAMgS,EAAIve,OAAS,GACjCmG,QAAQid,YAAY7E,EAAIhS,EAAM,GAAGU,EAAGsR,EAAIhS,EAAM,GAAGW,EAChDqR,EAAIhS,EAAM,GAAGU,EAAGsR,EAAIhS,EAAM,GAAGW,EAAGwB,EAAIzB,EAAGyB,EAAIxB,GAAKq8C,IAEjDsH,EAAO58C,OAAO1H,EAAM,EAAG,GACvB/B,EAASqmD,IAUC,MAAVrmD,GAAkB3M,KAAKyO,MAAQxE,QAAQy9B,iBAE1CsrB,EAAOhzD,KAAKyO,MAAQ,GAAK2X,GAS5B,OAAkB,MAAVzZ,EAAkBA,EAASqmD,GASpCq7C,cAAcjiG,UAAUm0H,sBAAwB,SAAS3vF,GAExD,IAAIh0B,EAAStU,QAAQof,UAAU1nB,KAAKiR,MAAM0W,WACtCxf,EAAMyoC,EAAGrO,WAET4E,EAAUl9B,QAAQ04B,WAAWx6B,GAC7Bi/B,EAAUn9B,QAAQ44B,WAAW16B,GAE7BjE,EAAMrD,SAAS2C,gBACfiZ,GAAQjb,OAAO6mB,aAAenkB,EAAI+jB,aAAe/jB,EAAIs8H,YAAc,GACnEvjH,GAAOzb,OAAO8mB,aAAepkB,EAAIsH,YAAetH,EAAIu8H,WAAa,GAEjEC,EAAQ1gI,KAAKm1C,aAAa/lC,EAAIpP,KAAKiR,MAAM0W,UAAUM,WAAarL,EAAOxN,EAAIqN,EAC3EkkH,EAAQ3gI,KAAKm1C,aAAa9lC,EAAIrP,KAAKiR,MAAM0W,UAAUnc,UAAYoR,EAAOvN,EAAI4N,EAE9E,OAAOjd,KAAKg/H,iBAAmB/0H,QAAQ08B,YAAYiK,EAAGrO,cACpDqO,EAAGnO,SAASziC,KAAK8+G,OAAOhnE,UAAUzlC,QAClCpI,QAAQ48B,UAAU+J,EAAGrO,aAAgC,MAAjBqO,EAAG7+B,YACxC/R,KAAK8+G,OAAOhnE,UAAU8oF,cAAcz5F,EAASC,KAC3Cs5F,GAASv5F,GAAWw5F,GAASv5F,IAA6B,MAAjBwJ,EAAG7+B,YAC9C/R,KAAK8+G,OAAOhnE,UAAU8oF,cAAcF,EAAOC,KAQ7CtyB,cAAcjiG,UAAU0+H,mBAAqB,SAASjnH,EAAMuC,EAAOwxE,EAAehnD,EAAI8iB,GAGrF,IAAI/xB,EAAe3hC,KAAa,SAAI43F,EAAgB53F,KAAK6R,MAAM6lF,yBAAwB,GACnF0xC,EAAeppI,KAAa,SAAI43F,EAAgB53F,KAAK6R,MAAM6lF,yBAAwB,GAEnF0oC,EAAmBpgI,KAAKiR,MAAMqiG,wBAAwBzvF,EAAM8d,GAAa,GACzEopG,EAAmB/qI,KAAKiR,MAAMqiG,wBAAwBzvF,EAAMulH,GAAa,GAEzEnkH,EAAajlB,KAAKy+H,kBAAkB0B,kBAwBxC,GAtBkB,MAAdl7G,GAAsByuC,IAEJ,MAAjBkkC,GAIChnD,EAAGnO,SAASziC,KAAK8+G,OAAOhnE,UAAUzlC,SAErC+T,EAAQ,IAAIjX,QAAQyhC,EAAG9N,YAAa8N,EAAG7N,cAGxC9d,EAAajlB,KAAKiR,MAAMm2G,qBAAqBhhG,EAAOwxE,EAAehnD,GACnE5wC,KAAKy+H,kBAAkBsC,SAASnwF,EAAIgnD,EAAe53F,KAAKyiC,UACxDziC,KAAKy+H,kBAAkB0B,kBAAoBl7G,EAC3CjlB,KAAKy+H,kBAAkBtpF,aAAe/uB,GAItCnB,EAAa,IAAIw0C,wBAIfz5D,KAAKg/H,gBAA2C,MAAzBh/H,KAAK8+G,OAAOhnE,WAAoD,MAA/B93C,KAAK8+G,OAAOhnE,UAAUzlC,MAClF,CACC,IAAIwG,EAAI7Y,KAAKiR,MAAMsW,KAAKjV,MAEwB,MAA5CtS,KAAKy+H,kBAAkB0B,mBACa,MAAvCngI,KAAKy+H,kBAAkB9wB,cAEvB3tG,KAAK8+G,OAAOhnE,UAAUzlC,MAAMw2C,OAAS,EAAYl7C,YAAY6mB,wBAA0B,cACvFx0B,KAAK8+G,OAAOhnE,UAAUzlC,MAAMuhD,YAAcjmD,YAAY8mB,8BAAgC5b,EAAIA,EAC1F7Y,KAAK8+G,OAAOhnE,UAAUi2D,WAEd/tG,KAAK8+G,OAAOye,kBAEpBv9H,KAAK8+G,OAAOhnE,UAAUzlC,MAAMw2C,OAAU7oD,KAAKiR,MAAM84G,kBAAkBn5E,EAAG5N,YACrEhjC,KAAK8+G,OAAO0e,iBAAmB5sF,EAAG7+B,WAClC,cAAgBpE,YAAY2mB,oBAC7Bt0B,KAAK8+G,OAAOhnE,UAAUzlC,MAAMuhD,YAAcjmD,YAAY+mB,sBAAwB7b,EAAIA,EAClF7Y,KAAK8+G,OAAOhnE,UAAUi2D,WAIpB/tG,KAAKyiC,SAER29F,EAAmBn7G,EAEXjlB,KAAKqqI,WAEbU,EAAmB9lH,IAGhBjlB,KAAKyiC,UAAYziC,KAAKqqI,YAEP,MAAdplH,GAA0C,MAApBA,EAAWmB,OAEpCvC,EAAKnc,MAAO1H,KAAa,SAAI2N,YAAY4qB,aAAe5qB,YAAYirB,eAAiB3T,EAAWmB,MAAMhX,EACtGyU,EAAKnc,MAAO1H,KAAa,SAAI2N,YAAY6qB,aAAe7qB,YAAYkrB,eAAiB5T,EAAWmB,MAAM/W,WAI/FwU,EAAKnc,MAAO1H,KAAa,SAAI2N,YAAY4qB,aAAe5qB,YAAYirB,sBACpE/U,EAAKnc,MAAO1H,KAAa,SAAI2N,YAAY6qB,aAAe7qB,YAAYkrB,iBAI7EhV,EAAK8zE,wBAAwBh2D,GAAa,GAC1C9d,EAAK8zE,wBAAwByxC,GAAa,GAErCppI,KAAKyiC,UAA2B,MAAfd,GAErB9d,EAAK0D,KAAK8rF,yBAAyBxvF,EAAM8d,GAAa,EAAMy+F,GAGxDpgI,KAAKqqI,UAA2B,MAAfjB,GAErBvlH,EAAK0D,KAAK8rF,yBAAyBxvF,EAAMulH,GAAa,EAAO2B,IAGzD/qI,KAAKyiC,UAAYziC,KAAKqqI,WAA8B,MAAjBzyC,IAEvC/zE,EAAK4zE,yBAAyBrxE,EAAOpmB,KAAKyiC,UAEN,MAAhCziC,KAAK8+G,OAAO2e,mBAEfz9H,KAAK2xB,MAAS3xB,KAAKiR,MAAwB,mBAAI,KAAO,KAIxD4S,EAAK0D,KAAKurF,aAAajvF,EAAM7jB,KAAKgzD,OAAQrxB,EAAaynG,GACvDvlH,EAAK0D,KAAKwrF,6BAA6BlvF,EAAM8d,EAAaynG,IAQ3D/6B,cAAcjiG,UAAUoqC,UAAY,SAAS1sC,EAAQ8mC,GAEpD,GAAkB,MAAd5wC,KAAKyO,OAAgC,MAAfzO,KAAK8+G,OAC/B,CAiBC,GAhBA9+G,KAAKm1C,aAAen1C,KAAKwwH,iBAAiB5/E,GAC1C5wC,KAAK2xB,MAAQ,MAGR3xB,KAAKiR,MAAMi5G,sBAAsBt5E,EAAGrO,aAAet4B,QAAQ08B,YAAYiK,EAAGrO,aAAiC,MAAlBviC,KAAK8jI,YAE9F16H,KAAKsX,IAAI1gB,KAAK8jI,UAAU10H,EAAIpP,KAAKm1C,aAAa/lC,GAAKhG,KAAKsX,IAAI1gB,KAAK8jI,UAAUz0H,EAAIrP,KAAKm1C,aAAa9lC,GAEpGrP,KAAKm1C,aAAa/lC,EAAIpP,KAAK8jI,UAAU10H,EAIrCpP,KAAKm1C,aAAa9lC,EAAIrP,KAAK8jI,UAAUz0H,GAInCrP,KAAKyO,OAASxE,QAAQw9B,eAAiBznC,KAAKyO,MAAQxE,QAAQy9B,eAErC,MAAtB1nC,KAAKklI,eAERllI,KAAKklI,cAAcj7H,QAAQw9B,cAAgBznC,KAAKyO,OAAOk1H,aAAa/yF,QAGjE,GAAI5wC,KAAKsqI,QAEbtqI,KAAKmb,MAAM/L,EAAIpP,KAAKm1C,aAAa/lC,EACjCpP,KAAKmb,MAAM9L,EAAIrP,KAAKm1C,aAAa9lC,MAGlC,CACCrP,KAAKgzD,OAAShzD,KAAK6qI,iBAAiB7qI,KAAKm1C,aAAcvE,GACvD,IAAIgnD,EAAiB53F,KAAKyiC,UAAYziC,KAAKqqI,SAAYrqI,KAAK4qI,wBAAwBh6F,GAAM,KAE1F,GAAgD,MAA5C5wC,KAAKy+H,kBAAkB0B,mBACa,MAAvCngI,KAAKy+H,kBAAkB9wB,cACgB,MAAvC3tG,KAAKy+H,kBAAkBtpF,aAEvBn1C,KAAKm1C,aAAen1C,KAAKy+H,kBAAkBtpF,aAAa1lC,aAEpD,GAAIzP,KAAKg/H,eACd,CAEC,IAAItrE,KAAW1zD,KAAKyiC,WAAYziC,KAAKqqI,WAAYrqI,KAAKugI,sBAAsB3vF,GAExE8iB,EAEHkkC,EAAgB53F,KAAK8+G,OAAOhnE,UAAUjmC,MAEb,MAAjB+lF,GAAyBA,GAAiBhnD,EAAG7+B,YACrD/R,KAAKiR,MAAM84G,kBAAkBn5E,EAAG5N,YACD,MAA/BhjC,KAAK8+G,OAAOhnE,UAAUzlC,QAEtBrS,KAAK8+G,OAAOhnE,UAAUzlC,MAAMw2C,OAAS,cACrC7oD,KAAK8+G,OAAOhnE,UAAUi2D,UACtBnW,EAAgB,MAIG,MAAjBA,GAA0B53F,KAAK8gI,cAAclpC,EAAc5lF,QAE9D4lF,EAAgB,KAChB53F,KAAK8+G,OAAO5oE,SAGb,IAAIzmC,EAAQzP,KAAKuqI,kBAAkBvqI,KAAKm1C,aAAgC,MAAjByiD,EAAyBA,EAAc5lF,KAAO,MACrGhS,KAAK8qI,mBAAmBr7H,EAAOzP,KAAKm1C,aAAcyiD,EAAehnD,EAAI8iB,GAIrE,IAAIz3C,EAAuB,MAAdjc,KAAK2xB,MAAiB3xB,KAAK8+G,OAAO5R,WAAaltG,KAAK8+G,OAAO3R,aACxEntG,KAAKgrI,gBAAgB/uH,GACrBjc,KAAKkpI,UAAYz5H,EAAM0V,eACvBnlB,KAAKy7C,QAAS,EAMfz7C,KAAKurG,WAAW36D,EAAI5wC,KAAKm1C,cACzBn1C,KAAKshI,cACLr3H,QAAQm4B,QAAQwO,EAAGrO,YACnBqO,EAAGxO,eAGKliC,SAASE,OAAuC,MAA9BJ,KAAK8lI,kBAAkBl1F,IAEjDA,EAAGxO,SAAQ,IAUbisE,cAAcjiG,UAAUsqC,QAAU,SAAS5sC,EAAQ8mC,GAGlD,GAAkB,MAAd5wC,KAAKyO,OAAgC,MAAfzO,KAAK8+G,OAC/B,CACC,IAAIj7F,EAAO7jB,KAAK6R,MAAMG,KAClBvD,EAAQzO,KAAKyO,MAIjB,GAHAzO,KAAKyO,MAAQ,KAGTmiC,EAAGlO,QAAU1iC,KAAKmyC,QAAUvB,EAAGhO,QAAU5iC,KAAKoyC,OAClD,CACC,IAAI3iC,GAASzP,KAAKiR,MAAMi5G,sBAAsBt5E,EAAGrO,aAAeviC,KAAKiR,MAAMg7F,aAAar7D,EAAGrO,aAC1FviC,KAAKo4H,cAAgBp4H,KAAKiR,MAAMi7F,mBAIjC,GAAkB,MAAdlsG,KAAK2xB,MAEJ3xB,KAAK2xB,MAAMxvB,OAAS,GAEvBnC,KAAKiR,MAAMk5G,gBAAgBnqH,KAAK2xB,YAG7B,GAAIljB,GAASxE,QAAQw9B,eAAiBh5B,EAAQxE,QAAQy9B,gBAE1D,GAA0B,MAAtB1nC,KAAKklI,cACT,EACKhzH,EAAQlS,KAAKiR,MAAM8c,YAEjBtC,cACN,IAECzrB,KAAKklI,cAAcj7H,QAAQw9B,cAAgBh5B,GAAOmN,UAEnD,QAEC1J,EAAM0Z,mBAIJ,GAAI5rB,KAAKsqI,QAEbtqI,KAAK8mI,UAAU9mI,KAAK6R,MAAO7R,KAAKmb,MAAM/L,EAAGpP,KAAKmb,MAAM9L,QAEhD,GAAIrP,KAAKyiC,UAAYziC,KAAKqqI,SAC/B,CACC,IAAIzmH,EAAW,KAgBf,GAdgD,MAA5C5jB,KAAKy+H,kBAAkB0B,mBACa,MAAvCngI,KAAKy+H,kBAAkB9wB,eAEvB/pF,EAAW5jB,KAAKy+H,kBAAkB9wB,aAAa37F,MAGhC,MAAZ4R,GAAoB5jB,KAAK8+G,OAAOye,iBAA4C,MAAzBv9H,KAAK8+G,OAAOhnE,WACnC,MAA/B93C,KAAK8+G,OAAOhnE,UAAUzlC,OACgB,eAAtCrS,KAAK8+G,OAAOhnE,UAAUzlC,MAAMw2C,QACU,SAAtC7oD,KAAK8+G,OAAOhnE,UAAUzlC,MAAMw2C,SAE5BjlC,EAAW5jB,KAAK8+G,OAAOoe,WAAWlrH,MAGnB,MAAZ4R,EACJ,CACC,IAAI1R,EACAyE,GADAzE,EAAQlS,KAAKiR,MAAM8c,YACJk0B,UAAUp+B,GAE7B3R,EAAMuZ,cACN,IAGC,GAAIhc,EACJ,CACC,IAAIyyC,EAAMhwC,EAAMk5D,YAAYvnD,GACxBpU,EAAQzP,KAAKiR,MAAMq9E,UAAUzqE,GACjC3R,EAAMnN,IAAI4R,EAAQlH,EAAOyC,EAAMiB,cAAcwD,IAElC,MAAPurC,IAEHA,EAAMA,EAAIzyC,QACVyC,EAAMu5D,YAAYh8D,EAAOyyC,IAG1B,IAAI+rB,EAAQ/7D,EAAMs4D,YAAY3mD,GAAO7jB,KAAKyiC,UAC1CziC,KAAKiR,MAAMs2G,YAAY93G,EAAOw+D,GAAQjuE,KAAKyiC,UAE3C5e,EAAOpU,EAGRoU,EAAO7jB,KAAK8uF,QAAQjrE,EAAMD,EAAU5jB,KAAKyiC,SAAUhzB,EAAOmhC,GAE3D,QAEC1+B,EAAM0Z,kBAGH,GAAI5rB,KAAKiR,MAAMu1G,uBACpB,CACC,IAAI/iG,EAAKzjB,KAAKkpI,UAAWlpI,KAAa,SAAI,EAAIA,KAAKkpI,UAAU/mI,OAAS,GACtEshB,EAAGrU,EAAIpP,KAAKu6H,YAAY92G,EAAGrU,EAAIpP,KAAKiR,MAAMsW,KAAKjV,MAAQtS,KAAKiR,MAAMsW,KAAKoH,UAAUvf,GACjFqU,EAAGpU,EAAIrP,KAAKu6H,YAAY92G,EAAGpU,EAAIrP,KAAKiR,MAAMsW,KAAKjV,MAAQtS,KAAKiR,MAAMsW,KAAKoH,UAAUtf,GAEjF,IAAIw9D,EAAS7sE,KAAKiR,MAAMa,UAAUC,SAChC/R,KAAKiR,MAAM8c,WAAWk0B,UAAUp+B,IAEpB,MAAVgpD,IAEHppD,EAAGrU,GAAKy9D,EAAOnkD,OAAOtZ,EACtBqU,EAAGpU,GAAKw9D,EAAOnkD,OAAOrZ,GAGvBoU,EAAGrU,GAAKpP,KAAKiR,MAAMumC,MAAQx3C,KAAKiR,MAAMsW,KAAKjV,MAC3CmR,EAAGpU,GAAKrP,KAAKiR,MAAMwmC,MAAQz3C,KAAKiR,MAAMsW,KAAKjV,MAG3CuR,EAAO7jB,KAAKirI,oBAAoBpnH,EAAMJ,EAAIzjB,KAAKyiC,SAAUhzB,SAGlDzP,KAAKy7C,OAEb53B,EAAO7jB,KAAKkrI,aAAarnH,EAAM7jB,KAAKgzD,OAAQvjD,IAI5CzP,KAAKiR,MAAMa,UAAUq8F,WAAWnuG,KAAK6R,MAAMG,MAC3ChS,KAAKiR,MAAMa,UAAUs8F,SAASpuG,KAAK6R,MAAMG,OAMxB,MAAfhS,KAAK8+G,SAER9+G,KAAKk2C,QAGDryB,GAAQ7jB,KAAK6R,MAAMG,MAEtBhS,KAAKiR,MAAMwsG,iBAAiB55F,IAI9B+sB,EAAGxO,YASLisE,cAAcjiG,UAAU8pC,MAAQ,WAiB/B,GAfIl2C,KAAKy7C,QAERz7C,KAAKstG,UAGNttG,KAAK2xB,MAAQ,KACb3xB,KAAKyO,MAAQ,KACbzO,KAAKmb,MAAQ,KACbnb,KAAKgzD,OAAS,KACdhzD,KAAK8jI,UAAY,KACjB9jI,KAAKsqI,SAAU,EACftqI,KAAKyiC,UAAW,EAChBziC,KAAKqqI,UAAW,EAChBrqI,KAAKy7C,QAAS,EAEVz7C,KAAKkuG,aAA8B,MAAfluG,KAAK8kI,OAE5B,IAAK,IAAIjgI,EAAI,EAAGA,EAAI7E,KAAK8kI,OAAO3iI,OAAQ0C,IAEjB,MAAlB7E,KAAK8kI,OAAOjgI,KAEf7E,KAAK8kI,OAAOjgI,GAAGK,KAAKwC,MAAMgmB,QAAU,IAevC,GAVmB,MAAf1tB,KAAK8+G,QAER9+G,KAAK8+G,OAAO5oE,QAGiB,MAA1Bl2C,KAAKy+H,mBAERz+H,KAAKy+H,kBAAkBvoF,QAGE,MAAtBl2C,KAAKklI,cAER,IAASrgI,EAAI,EAAGA,EAAI7E,KAAKklI,cAAc/iI,OAAQ0C,IAE9C7E,KAAKklI,cAAcrgI,GAAGqxC,QAIxBl2C,KAAKgrI,gBAAgBr9H,YAAY+nB,sBACjC11B,KAAKs6H,aACLt6H,KAAK6S,UAQNw7F,cAAcjiG,UAAU4+H,gBAAkB,SAAS/uH,GAEhC,MAAdjc,KAAKqS,QAERrS,KAAKqS,MAAMw2C,OAAS5sC,IAiBtBoyF,cAAcjiG,UAAUuc,aAAe,SAASvC,EAAOmvB,GAEtD,IAAIjjC,EAAQtS,KAAKiR,MAAMa,UAAU8d,WAC7BpoB,EAAKxH,KAAKiR,MAAMa,UAAU8c,eAE1B2mB,IAEHnvB,EAAMhX,EAAIpP,KAAKiR,MAAMmnC,KAAKhyB,EAAMhX,GAChCgX,EAAM/W,EAAIrP,KAAKiR,MAAMmnC,KAAKhyB,EAAM/W,IAGjC+W,EAAMhX,EAAIhG,KAAK2c,MAAMK,EAAMhX,EAAIkD,EAAQ9K,EAAG4H,GAC1CgX,EAAM/W,EAAIjG,KAAK2c,MAAMK,EAAM/W,EAAIiD,EAAQ9K,EAAG6H,GAE1C,IAAIw9D,EAAS7sE,KAAKiR,MAAMa,UAAUC,SACjC/R,KAAKiR,MAAM8c,WAAWk0B,UAAUjiD,KAAK6R,MAAMG,OAQ5C,OANc,MAAV66D,IAEHzmD,EAAMhX,GAAKy9D,EAAOnkD,OAAOtZ,EACzBgX,EAAM/W,GAAKw9D,EAAOnkD,OAAOrZ,GAGnB+W,GAcRioF,cAAcjiG,UAAU06H,UAAY,SAAStzH,EAAWpE,EAAGC,GAE1D,IAAI6C,EAAQlS,KAAKiR,MAAM8c,WACnBvb,EAAWN,EAAMk5D,YAAY53D,EAAUxB,MAE3C,GAAgB,MAAZQ,EACJ,CACC,IAAIF,EAAQtS,KAAKiR,MAAMa,UAAUQ,MAGjC,IAFAE,EAAWA,EAAS/C,SAEP2yC,SACb,CAEC,IAAI3+B,EAAKzjB,KAAKiR,MAAMa,UAAU+iG,iBAAiBrhG,EAAWpE,EAAGC,GAC7DmD,EAASpD,EAAIhG,KAAK2c,MAAa,IAAPtC,EAAGrU,GAAa,IACxCoD,EAASnD,EAAIjG,KAAK2c,MAAMtC,EAAGpU,GAI3BmD,EAASoK,OAAS,IAAIzN,QAAQ,EAAG,GAC7BsU,EAAKzjB,KAAKiR,MAAMsW,KAAK7W,SAAS8C,EAAWhB,GAC7CA,EAASoK,OAAS,IAAIzN,QAAQ/F,KAAK2c,OAAO3W,EAAIqU,EAAGrU,GAAKkD,GAAQlJ,KAAK2c,OAAO1W,EAAIoU,EAAGpU,GAAKiD,QAGvF,CACC,IAAI0gD,EAASx/C,EAAU2R,eACnBqyC,EAAKxE,EAAO,GACZuE,EAAKvE,EAAOA,EAAO7wD,OAAS,GAEhC,GAAU,MAANq1D,GAAoB,MAAND,EAClB,CACC,IAAIp0C,EAAKq0C,EAAGpoD,GAAKmoD,EAAGnoD,EAAIooD,EAAGpoD,GAAK,EAC5BgY,EAAKowC,EAAGnoD,GAAKkoD,EAAGloD,EAAImoD,EAAGnoD,GAAK,EAEhCmD,EAASoK,OAAS,IAAIzN,QAAQ/F,KAAK2c,OAAO3W,EAAI+T,GAAM7Q,GAAQlJ,KAAK2c,OAAO1W,EAAI+X,GAAM9U,IAClFE,EAASpD,EAAI,EACboD,EAASnD,EAAI,GAIf6C,EAAMu5D,YAAYj4D,EAAUxB,KAAMQ,KAoBpC67F,cAAcjiG,UAAU0iF,QAAU,SAASjrE,EAAMD,EAAU6e,EAAU0oG,EAASv6F,GAE7E,IAAI1+B,EAAQlS,KAAKiR,MAAM8c,WACV7b,EAAM+vC,UAAUp+B,GAE7B3R,EAAMuZ,cACN,IAEC,IAAIxG,EAAajlB,KAAKy+H,kBAAkB0B,kBAEtB,MAAdl7G,IAEHA,EAAa,IAAIw0C,wBAGlBz5D,KAAKiR,MAAMs2G,YAAY1jG,EAAMD,EAAU6e,EAAUxd,GAElD,QAEC/S,EAAM0Z,YAGP,OAAO/H,GAQRwqF,cAAcjiG,UAAU6+H,oBAAsB,SAASpnH,EAAMuC,EAAOqc,EAAUhzB,GAE7E,IAAIyC,EAAQlS,KAAKiR,MAAM8c,WAEvB7b,EAAMuZ,cACN,IAEC,GAAIhc,EACJ,CACC,IAAIkH,EAASzE,EAAM+vC,UAAUp+B,GACzBD,EAAW1R,EAAMs4D,YAAY3mD,GAAO4e,GACxC5e,EAAO7jB,KAAKiR,MAAMq9E,UAAUzqE,GAC5B3R,EAAMnN,IAAI4R,EAAQkN,EAAM3R,EAAMiB,cAAcwD,IAC5CzE,EAAMk6E,YAAYvoE,EAAMD,GAAW6e,GAGpC,IAAIyf,EAAMhwC,EAAMk5D,YAAYvnD,GAEjB,MAAPq+B,KAEHA,EAAMA,EAAIzyC,SACN2gF,iBAAiBhqE,EAAOqc,GAC5BvwB,EAAMu5D,YAAY5nD,EAAMq+B,GACxBliD,KAAKiR,MAAMs2G,YAAY1jG,EAAM,KAAM4e,EAAU,IAAIg3B,yBAGnD,QAECvnD,EAAM0Z,YAGP,OAAO/H,GAQRwqF,cAAcjiG,UAAU8+H,aAAe,SAASrnH,EAAMmvC,EAAQvjD,GAE7D,IAAIyC,EAAQlS,KAAKiR,MAAM8c,WACvB7b,EAAMuZ,cACN,IAEC,GAAIhc,EACJ,CACC,IAAIkH,EAASzE,EAAM+vC,UAAUp+B,GACzBC,EAAS5R,EAAMs4D,YAAY3mD,GAAM,GACjCpF,EAASvM,EAAMs4D,YAAY3mD,GAAM,GACrCA,EAAO7jB,KAAKiR,MAAMq9E,UAAUzqE,GAC5B3R,EAAMnN,IAAI4R,EAAQkN,EAAM3R,EAAMiB,cAAcwD,IAC5CzE,EAAMk6E,YAAYvoE,EAAMC,GAAQ,GAChC5R,EAAMk6E,YAAYvoE,EAAMpF,GAAQ,GAGjC,IAAIyjC,EAAMhwC,EAAMk5D,YAAYvnD,GAEjB,MAAPq+B,KAEHA,EAAMA,EAAIzyC,SACNujD,OAASA,EAEb9gD,EAAMu5D,YAAY5nD,EAAMq+B,IAG1B,QAEChwC,EAAM0Z,YAGP,OAAO/H,GAQRwqF,cAAcjiG,UAAU47G,SAAW,SAASn2G,EAAO1J,GAElD,IAAIsb,EAAKnb,QAAQqgB,aAAa3oB,KAAKiR,MAAM0W,UAAW1d,QAAQ04B,WAAWx6B,GACrE8B,QAAQ44B,WAAW16B,IACjBotC,EAAcv1C,KAAKiR,MAAM8mC,mBAAmB5vC,GAChDnI,KAAK2oB,aAAalF,EAAI8xB,GACtBv1C,KAAKorI,WAAWv5H,EAAO4R,EAAGrU,EAAGqU,EAAGpU,GAChCpF,QAAQm4B,QAAQj6B,IAQjBkmG,cAAcjiG,UAAUg/H,WAAa,SAASv5H,EAAOzC,EAAGC,GAEvD,IAAI6yC,EAAMliD,KAAKiR,MAAMkxC,gBAAgBtwC,EAAMG,MACvCyR,EAAK,IAAItU,QAAQC,EAAGC,GAExB,GAAW,MAAP6yC,EACJ,CACCA,EAAMA,EAAIzyC,QACV,IAAImB,EAAI5Q,KAAKiR,MAAMsW,KAAKoH,UACpB9V,EAAI7Y,KAAKiR,MAAMsW,KAAKjV,MACpBsK,EAAS,IAAIzN,QAAQyB,EAAExB,EAAIyJ,EAAGjI,EAAEvB,EAAIwJ,GAEpClC,EAAS3W,KAAKiR,MAAMiB,MAAM+vC,UAAUjiD,KAAK6R,MAAMG,MAEnD,GAAIhS,KAAKiR,MAAMiB,MAAM2vC,SAASlrC,GAC9B,CACC,IAAI67F,EAASxyG,KAAKiR,MAAMsW,KAAKxV,SAAS4E,GACtCiG,EAAS,IAAIzN,QAAQqjG,EAAOpjG,EAAGojG,EAAOnjG,GAGvC,IAAIZ,EAAQnG,QAAQ4c,mBAAmBrT,EAAO4R,EAAGrU,EAAIyJ,EAAI+D,EAAOxN,EAAGqU,EAAGpU,EAAIwJ,EAAI+D,EAAOvN,GAEnE,MAAd6yC,EAAI8Q,OAEP9Q,EAAI8Q,OAAS,CAACvvC,GAIdy+B,EAAI8Q,OAAO58C,OAAO3H,EAAO,EAAGgV,GAG7BzjB,KAAKiR,MAAM8c,WAAW09C,YAAY55D,EAAMG,KAAMkwC,GAC9CliD,KAAKstG,UACLttG,KAAK6S,WASPw7F,cAAcjiG,UAAU69H,YAAc,SAASp4H,EAAOpD,GAErD,GAAIA,EAAQ,GAAKA,EAAQzO,KAAKkpI,UAAU/mI,OAAS,EACjD,CACC,IAAI+/C,EAAMliD,KAAKiR,MAAMkxC,gBAAgBniD,KAAK6R,MAAMG,MAErC,MAAPkwC,GAA6B,MAAdA,EAAI8Q,UAEtB9Q,EAAMA,EAAIzyC,SACNujD,OAAO58C,OAAO3H,EAAQ,EAAG,GAC7BzO,KAAKiR,MAAM8c,WAAW09C,YAAY55D,EAAMG,KAAMkwC,GAC9CliD,KAAKstG,UACLttG,KAAK6S,YAURw7F,cAAcjiG,UAAUi/H,mBAAqB,SAAS58H,GAErD,IAAIg0B,EAAoB,GAATh0B,EACXuD,EAAOhS,KAAK6R,MAAMG,KAClB4R,EAAW5jB,KAAKiR,MAAM8c,WAAWy8C,YAAYx4D,EAAMywB,GACnDxmB,EAAQtO,YAAY2oB,iBAYxB,OAViB,MAAZ1S,IAAqB5jB,KAAKiR,MAAMy2G,qBAAqB11G,EAAM4R,EAAU6e,IAC5D,MAAZ7e,IAAqB5jB,KAAKiR,MAAM69G,uBAAuB98G,EAAMywB,GAE9DxmB,EAAQtO,YAAY+oB,wBAEA,MAAZ9S,GAAoB5jB,KAAKiR,MAAMy2G,qBAAqB11G,EAAM4R,EAAU6e,KAE5ExmB,EAAQtO,YAAY8oB,0BAGdxa,GAQRoyF,cAAcjiG,UAAUyG,OAAS,SAASq1H,GAEzCloI,KAAKkpI,UAAYlpI,KAAK6R,MAAMsT,eAAesyC,QAC3C,IAAIhL,EAAIzsD,KAAKiR,MAAM8c,WAAWq9C,YAAYprE,KAAK6R,MAAMG,MAErD,GAAS,MAALy6C,EACJ,CACC,IAAIvmC,EAAMumC,EAAEuG,OAEZ,GAAkB,MAAdhzD,KAAKwoI,OAAiBxoI,KAAKwoI,MAAMrmI,OAAS,GAElC,MAAP+jB,EACJ,CACoB,MAAflmB,KAAKgzD,SAERhzD,KAAKgzD,OAAS,IAGf,IAAK,IAAInuD,EAAI,EAAGA,EAAI7E,KAAKwoI,MAAMrmI,OAAS,EAAG0C,IAErB,MAAjB7E,KAAKwoI,MAAM3jI,IAAmC,MAArB7E,KAAKkpI,UAAUrkI,KAE3C7E,KAAKgzD,OAAOnuD,EAAI,GAAKqhB,EAAIrhB,EAAI,KAOlC7E,KAAKshI,cAEA4G,GAEJloI,KAAKk7H,iBASP7sB,cAAcjiG,UAAU8uH,cAAgB,WAEvC,IAAIlpH,EAAOhS,KAAK6R,MAAMG,KAGlBqK,EAAIrc,KAAK+kI,WAAWt+G,OACxBzmB,KAAKmb,MAAQ,IAAIhM,QAAQnP,KAAK6R,MAAM0gF,eAAenjF,EAAGpP,KAAK6R,MAAM0gF,eAAeljF,GAChFrP,KAAK+kI,WAAWt+G,OAAS,IAAInX,YAAYlG,KAAK2c,MAAM/lB,KAAKmb,MAAM/L,EAAIiN,EAAEpU,MAAQ,GAC5EmB,KAAK2c,MAAM/lB,KAAKmb,MAAM9L,EAAIgN,EAAExU,OAAS,GAAIwU,EAAEpU,MAAOoU,EAAExU,QAGrD,IAAIyC,EAAMtK,KAAKiR,MAAMitF,SAASlsF,GAG9B,GAFAhS,KAAK+kI,WAAWn6H,QAAkB,MAAPN,GAAeA,EAAInI,OAAS,GAAKnC,KAAKiR,MAAM87G,eAAe/6G,GAEpE,MAAdhS,KAAKwoI,OAAiBxoI,KAAKwoI,MAAMrmI,OAAS,EAC9C,CACC,IAAI6gB,EAAIhjB,KAAKkpI,UAAU/mI,OAAS,EAE5Bq1D,EAAKx3D,KAAKkpI,UAAU,GACpB/oH,EAAKq3C,EAAGpoD,EACRgR,EAAKo3C,EAAGnoD,EAEZgN,EAAIrc,KAAKwoI,MAAM,GAAG/hH,OAClBzmB,KAAKwoI,MAAM,GAAG/hH,OAAS,IAAInX,YAAYlG,KAAKmnB,MAAMpQ,EAAK9D,EAAEpU,MAAQ,GAC/DmB,KAAKmnB,MAAMnQ,EAAK/D,EAAExU,OAAS,GAAIwU,EAAEpU,MAAOoU,EAAExU,QAC5C7H,KAAKwoI,MAAM,GAAG1/E,KAAO9oD,KAAKqrI,mBAAmB,GAC7CrrI,KAAKwoI,MAAM,GAAG31H,SAEV7S,KAAKipI,mBAERjpI,KAAKsrI,iBAAiBtrI,KAAKwoI,MAAM,GAAG/hH,QAGrC,IAAI8wC,EAAKv3D,KAAKkpI,UAAUlmH,GACpBuoH,EAAKh0E,EAAGnoD,EACRo8H,EAAKj0E,EAAGloD,EAERo8H,EAAKzrI,KAAKwoI,MAAMrmI,OAAS,EAC7Bka,EAAIrc,KAAKwoI,MAAMiD,GAAIhlH,OACnBzmB,KAAKwoI,MAAMiD,GAAIhlH,OAAS,IAAInX,YAAYlG,KAAKmnB,MAAMg7G,EAAKlvH,EAAEpU,MAAQ,GAChEmB,KAAKmnB,MAAMi7G,EAAKnvH,EAAExU,OAAS,GAAIwU,EAAEpU,MAAOoU,EAAExU,QAC5C7H,KAAKwoI,MAAMiD,GAAI3iF,KAAO9oD,KAAKqrI,mBAAmBI,GAC9CzrI,KAAKwoI,MAAMiD,GAAI54H,SAEX7S,KAAKipI,mBAERjpI,KAAKsrI,iBAAiBtrI,KAAKwoI,MAAMiD,GAAIhlH,QAGtCzmB,KAAK0rI,iBAAiBl0E,EAAID,GAG3B,GAAsB,MAAlBv3D,KAAKkpI,WAA0C,MAArBlpI,KAAKupI,cAAwBvpI,KAAKupI,aAAapnI,OAAS,EAIrF,IAFA,IAAIijB,EAAOplB,KAAKkpI,UAAU,GAEjBrkI,EAAI,EAAGA,EAAI7E,KAAKupI,aAAapnI,OAAQ0C,IAE7C,GAA4B,MAAxB7E,KAAKupI,aAAa1kI,IAAuC,MAAzB7E,KAAKkpI,UAAUrkI,EAAI,GACvD,CACC,IAAI4e,EAAKzjB,KAAKkpI,UAAUrkI,EAAI,GAExBuK,GADAiN,EAAIrc,KAAKupI,aAAa1kI,GAClBugB,EAAKhW,GAAKqU,EAAGrU,EAAIgW,EAAKhW,GAAK,GAC/BC,EAAI+V,EAAK/V,GAAKoU,EAAGpU,EAAI+V,EAAK/V,GAAK,EACnCgN,EAAEoK,OAAS,IAAInX,YAAYlG,KAAKmnB,MAAMnhB,EAAIiN,EAAEoK,OAAOxe,MAAQ,GACzDmB,KAAKmnB,MAAMlhB,EAAIgN,EAAEoK,OAAO5e,OAAS,GAAIwU,EAAEoK,OAAOxe,MAAOoU,EAAEoK,OAAO5e,QAChEwU,EAAExJ,SACFvK,QAAQ8J,WAAWiK,EAAEnX,KAAMlF,KAAK8oI,oBAChC1jH,EAAO3B,EAEHzjB,KAAKipI,mBAERjpI,KAAKsrI,iBAAiBjvH,EAAEoK,QAW5B,GALuB,MAAnBzmB,KAAK+kI,YAER/kI,KAAK+kI,WAAWlyH,SAGS,MAAtB7S,KAAKklI,cAER,IAASrgI,EAAI,EAAGA,EAAI7E,KAAKklI,cAAc/iI,OAAQ0C,IAC/C,CACC,IAAIgqB,EAAO7uB,KAAKklI,cAAcrgI,GAAGwN,MAAMnN,KAAKwC,MAAMgmB,QAClD1tB,KAAKklI,cAAcrgI,GAAGgO,SACtB7S,KAAKklI,cAAcrgI,GAAGwN,MAAMnN,KAAKwC,MAAMgmB,QAAUmB,EAGjD7uB,KAAKklI,cAAcrgI,GAAGwN,MAAMnN,KAAKwC,MAAM6D,WACrCvL,KAAKooI,sBAAsBpoI,KAAKklI,cAAcrgI,IAC/C,GAAK,WAUTwpG,cAAcjiG,UAAUg8H,sBAAwB,SAASnC,GAExD,OAAQjmI,KAAKiR,MAAM8hF,aAA4D,GAA7C/yF,KAAK6R,MAAM0V,KAAKtW,MAAM8/G,qBAQzD1iB,cAAcjiG,UAAUkvH,kBAAoB,SAAS1wH,GAEpD,GAAkB,MAAd5K,KAAKwoI,MAER,IAAK,IAAI3jI,EAAI,EAAGA,EAAI7E,KAAKwoI,MAAMrmI,OAAQ0C,IAEtC7E,KAAKwoI,MAAM3jI,GAAGK,KAAKwC,MAAMgmB,QAAU,EAAY,GAAK,OAItD,GAAyB,MAArB1tB,KAAKupI,aAER,IAAS1kI,EAAI,EAAGA,EAAI7E,KAAKupI,aAAapnI,OAAQ0C,IAE7C7E,KAAKupI,aAAa1kI,GAAGK,KAAKwC,MAAMgmB,QAAU,EAAY,GAAK,OAS7D,GALuB,MAAnB1tB,KAAK+kI,aAER/kI,KAAK+kI,WAAW7/H,KAAKwC,MAAMgmB,QAAU,EAAY,GAAK,QAG7B,MAAtB1tB,KAAKklI,cAER,IAASrgI,EAAI,EAAGA,EAAI7E,KAAKklI,cAAc/iI,OAAQ0C,IAE9C7E,KAAKklI,cAAcrgI,GAAG8F,WAAWC,IAepCyjG,cAAcjiG,UAAUs/H,iBAAmB,SAASl0E,EAAID,GAEvD,IAAK,IAAI1yD,EAAI,EAAGA,EAAI7E,KAAKwoI,MAAMrmI,OAAS,EAAG0C,IAE1C,GAAqB,MAAjB7E,KAAKwoI,MAAM3jI,GAEd,GAAyB,MAArB7E,KAAKkpI,UAAUrkI,GACnB,CACC,IAAIuK,EAAIpP,KAAKkpI,UAAUrkI,GAAGuK,EACtBC,EAAIrP,KAAKkpI,UAAUrkI,GAAGwK,EAEtBgN,EAAIrc,KAAKwoI,MAAM3jI,GAAG4hB,OACtBzmB,KAAKwoI,MAAM3jI,GAAGK,KAAKwC,MAAM6D,WAAa,UACtCvL,KAAKwoI,MAAM3jI,GAAG4hB,OAAS,IAAInX,YAAYlG,KAAK2c,MAAM3W,EAAIiN,EAAEpU,MAAQ,GAC9DmB,KAAK2c,MAAM1W,EAAIgN,EAAExU,OAAS,GAAIwU,EAAEpU,MAAOoU,EAAExU,QAEvC7H,KAAKipI,kBAERjpI,KAAKsrI,iBAAiBtrI,KAAKwoI,MAAM3jI,GAAG4hB,QAER,MAApBzmB,KAAKkkI,aAAuBlkI,KAAK+kI,WAAWn6H,SAAWtC,QAAQqe,WAAW3mB,KAAKwoI,MAAM3jI,GAAG4hB,OAAQzmB,KAAK+kI,WAAWt+G,UAExH3d,EAAI6E,YAAYyoB,YAAc,EAC9BvtB,EAAI8E,YAAYyoB,YAAc,EAC9Bp2B,KAAKwoI,MAAM3jI,GAAG4hB,OAAS,IAAInX,YAAYlG,KAAK2c,MAAM3W,EAAItG,EAAI,GAAIM,KAAK2c,MAAM1W,EAAIxG,EAAI,GAAIC,EAAGD,IAGzF7I,KAAKwoI,MAAM3jI,GAAGgO,cAId7S,KAAKwoI,MAAM3jI,GAAGoqB,UACdjvB,KAAKwoI,MAAM3jI,GAAK,MAYpBwpG,cAAcjiG,UAAUk/H,iBAAmB,SAASjvH,GAEnD,GAAuB,MAAnBrc,KAAK+kI,WACT,CACC,IAAIx0H,EAAKvQ,KAAK+kI,WAAWt+G,OAErBne,QAAQqe,WAAWtK,EAAG9L,KAErB8L,EAAEzM,aAAeW,EAAGX,aAEvBW,EAAGlB,EAAIgN,EAAEhN,EAAIgN,EAAExU,OAIf0I,EAAGlB,EAAIgN,EAAEhN,EAAIkB,EAAG1I,UAWpBwmG,cAAcjiG,UAAUk1H,YAAc,WAErC,GAAIthI,KAAKsqI,QACT,CACC,IAAIjuH,EAAIrc,KAAK+kI,WAAWt+G,OACpBA,EAAS,IAAInX,YAAYlG,KAAK2c,MAAM/lB,KAAKmb,MAAM/L,EAAIiN,EAAEpU,MAAQ,GAChEmB,KAAK2c,MAAM/lB,KAAKmb,MAAM9L,EAAIgN,EAAExU,OAAS,GAAIwU,EAAEpU,MAAOoU,EAAExU,QAEhD7H,KAAK+kI,WAAWt+G,OAAOjX,OAAOiX,KAElCzmB,KAAK+kI,WAAWt+G,OAASA,EACzBzmB,KAAK+kI,WAAWlyH,UAIA,MAAd7S,KAAKqS,OAAkB/J,QAAQ+W,YAAYrf,KAAKqS,MAAM2gD,OAAQhzD,KAAKkpI,aAEtElpI,KAAKqS,MAAMjH,MAAMpL,KAAK6R,OACtB7R,KAAKqS,MAAM2gD,OAAShzD,KAAKkpI,UAAUzxE,QACnCz3D,KAAKqS,MAAMC,MAAQtS,KAAK6R,MAAM0V,KAAKjV,MACnCtS,KAAKqS,MAAMy/C,SAAW9xD,KAAK0lI,oBAC3B1lI,KAAKqS,MAAMw2C,OAAS7oD,KAAKwlI,oBACzBxlI,KAAKqS,MAAMuhD,YAAc5zD,KAAKylI,0BAA4BzlI,KAAKqS,MAAMC,MAAQtS,KAAKqS,MAAMC,MACxFtS,KAAKqS,MAAMmjD,UAAW,EACtBx1D,KAAKqS,MAAMQ,UAGgB,MAAxB7S,KAAKuoI,iBAERvoI,KAAKuoI,gBAAgB11H,UASvBw7F,cAAcjiG,UAAUkhG,QAAU,WAEjCttG,KAAKkpI,UAAYlpI,KAAKmpI,mBAAmBnpI,KAAK6R,OAC9C7R,KAAKgzD,OAAS,GAEI,MAAdhzD,KAAKwoI,QAERxoI,KAAK2rI,aAAa3rI,KAAKwoI,OACvBxoI,KAAKwoI,MAAQxoI,KAAKqpI,eAGM,MAArBrpI,KAAKupI,eAERvpI,KAAK2rI,aAAa3rI,KAAKupI,cACvBvpI,KAAKupI,aAAevpI,KAAKwpI,sBAGA,MAAtBxpI,KAAKklI,gBAERllI,KAAK2rI,aAAa3rI,KAAKklI,eACvBllI,KAAKklI,cAAgBllI,KAAKmlI,uBAIJ,MAAnBnlI,KAAK+kI,YAA8C,MAAxB/kI,KAAK+kI,WAAW7/H,MAAmD,MAAnClF,KAAK+kI,WAAW7/H,KAAK2O,YAEnF7T,KAAK+kI,WAAW7/H,KAAK2O,WAAWtP,YAAYvE,KAAK+kI,WAAW7/H,OAS9DmpG,cAAcjiG,UAAUu/H,aAAe,SAASnD,GAE/C,GAAa,MAATA,EAEH,IAAK,IAAI3jI,EAAI,EAAGA,EAAI2jI,EAAMrmI,OAAQ0C,IAEjB,MAAZ2jI,EAAM3jI,IAET2jI,EAAM3jI,GAAGoqB,WAabo/E,cAAcjiG,UAAU6iB,QAAU,WAEP,MAAtBjvB,KAAKwrG,gBAERxrG,KAAK6R,MAAM0V,KAAKtW,MAAMsyB,eAAevjC,KAAKwrG,eAC1CxrG,KAAKwrG,cAAgB,MAGH,MAAfxrG,KAAK8+G,SAER9+G,KAAK8+G,OAAO7vF,UACZjvB,KAAK8+G,OAAS,MAGG,MAAd9+G,KAAKqS,QAERrS,KAAKqS,MAAM4c,UACXjvB,KAAKqS,MAAQ,MAGc,MAAxBrS,KAAKuoI,kBAERvoI,KAAKuoI,gBAAgBt5G,UACrBjvB,KAAKuoI,gBAAkB,MAGD,MAAnBvoI,KAAK+kI,aAER/kI,KAAK+kI,WAAW91G,UAChBjvB,KAAK+kI,WAAa,MAGW,MAA1B/kI,KAAKy+H,oBAERz+H,KAAKy+H,kBAAkBxvG,UACvBjvB,KAAKy+H,kBAAoB,MAG1Bz+H,KAAK2rI,aAAa3rI,KAAKupI,cACvBvpI,KAAKupI,aAAe,KAEpBvpI,KAAK2rI,aAAa3rI,KAAKklI,eACvBllI,KAAKklI,cAAgB,KAErBllI,KAAK2rI,aAAa3rI,KAAKwoI,OACvBxoI,KAAKwoI,MAAQ,KAEbxoI,KAAKs6H,cAGNr6H,WAAWouG,mBAAyC,IAAlBA,cAAgCA,mBAAgBznG,EA8BlF0B,QAAQoX,OAAO8uF,mBAAoBH,eAMnCG,mBAAmBpiG,UAAUw/H,aAAc,EAU3Cp9B,mBAAmBpiG,UAAUy/H,+BACN,QAArB3rI,SAAS4F,SAAsB,yBAA2B,GAO3D0oG,mBAAmBpiG,UAAUi9H,YAAc,WAE3C,IAAIb,EAAQ,GAGRuB,EAAO/pI,KAAKgqI,kBAAkB,GAuBlC,OAtBAhqI,KAAK0pI,SAASK,GACdA,EAAKzxE,UAAU3qD,YAAYqnB,wBAC3BwzG,EAAM57H,KAAKm9H,GAGXvB,EAAM57H,KAAK5M,KAAK8rI,kBAAkBxjI,QAAQ2M,KAAKjV,MAAM,SAASmI,IAExD8B,QAAQk4B,WAAWh6B,IAAQnI,KAAK4rI,cAEpC5rI,KAAKiR,MAAMkxG,SAASniH,KAAK6R,MAAMG,KAAM7J,GACrC8B,QAAQm4B,QAAQj6B,SAIlBnI,KAAKgzD,OAAOpmD,KAAK,IAAIuC,QAAQ,EAAE,IAG/B46H,EAAO/pI,KAAKgqI,kBAAkB,GAC9BhqI,KAAK0pI,SAASK,GACdA,EAAKzxE,UAAU3qD,YAAYqnB,wBAC3BwzG,EAAM57H,KAAKm9H,GAEJvB,GASRh6B,mBAAmBpiG,UAAU0/H,kBAAoB,SAASC,GAEzD,IAAIhC,EAAO/pI,KAAKgqI,oBAUhB,OATAhqI,KAAK0pI,SAASK,EAAMgC,GAEpBhC,EAAKzxE,UAAUt4D,KAAKgsI,oBAEfhsI,KAAKiR,MAAM89G,eAAe/uH,KAAK6R,MAAMG,QAEzC+3H,EAAK7kI,KAAKwC,MAAMgmB,QAAU,QAGpBq8G,GAQRv7B,mBAAmBpiG,UAAU4/H,iBAAmB,WAE/C,OAAQhsI,KAAK6R,MAAMnK,MAAMiG,YAAYuwB,aAAe8iE,YAAYiB,aAC/DjiG,KAAK6R,MAAMnK,MAAMiG,YAAYuwB,aAAevwB,YAAYqzB,wBACtDhhC,KAAK6R,MAAMnK,MAAMiG,YAAYuwB,aAAe8iE,YAAYe,gBAC1D/hG,KAAK6R,MAAMnK,MAAMiG,YAAYuwB,aAAevwB,YAAYizB,kBACxD5gC,KAAK6R,MAAMnK,MAAMiG,YAAYovB,cAAgBpvB,YAAY+yB,eACzD,aAAe,cAQjB8tE,mBAAmBpiG,UAAUk/G,kBAAoB,SAASpmH,GAEzD,IAAIkmH,EAAM,KASV,OAPkB,MAAdprH,KAAKwoI,OAAkC,MAAjBxoI,KAAKwoI,MAAM,IAAetjI,GAAQlF,KAAKwoI,MAAM,GAAGtjI,MACzEA,EAAK2O,YAAc7T,KAAKwoI,MAAM,GAAGtjI,OAEjCkmH,EAAMprH,KAAK6rI,+BACXzgB,EAAMtmH,YAAY+G,IAAIu/G,IAAQA,GAGxBA,GAcR5c,mBAAmBpiG,UAAUuc,aAAe,SAASvC,EAAOmvB,GAE3D,IAAIjjC,EAAQtS,KAAKiR,MAAMa,UAAU8d,WAC7BpoB,EAAKxH,KAAKiR,MAAMa,UAAU8c,eAC1BlG,EAAS1oB,KAAK6R,MAAM6W,OAWxB,OATI6sB,IAEHnvB,EAAMhX,EAAIpP,KAAKiR,MAAMmnC,KAAKhyB,EAAMhX,GAChCgX,EAAM/W,EAAIrP,KAAKiR,MAAMmnC,KAAKhyB,EAAM/W,IAGjC+W,EAAMhX,EAAIhG,KAAK2c,MAAMK,EAAMhX,EAAIkD,EAAQ9K,EAAG4H,EAAIsZ,EAAOtZ,GACrDgX,EAAM/W,EAAIjG,KAAK2c,MAAMK,EAAM/W,EAAIiD,EAAQ9K,EAAG6H,EAAIqZ,EAAOrZ,GAE9C+W,GAaRooF,mBAAmBpiG,UAAUs/H,iBAAmB,SAASl0E,EAAID,GAE5D,IAAI9K,EAAIzsD,KAAKiR,MAAM8c,WAAWq9C,YAAYprE,KAAK6R,MAAMG,MACjDkU,EAAMlmB,KAAK6R,MAAMsT,eACjB1B,EAAK,KAGLyC,EAAI/jB,OAAS,GAEhBq1D,EAAKtxC,EAAI,GACTqxC,EAAKrxC,EAAIA,EAAI/jB,OAAS,IAEF,MAAZsqD,EAAEuG,QAAkBvG,EAAEuG,OAAO7wD,OAAS,IAE9CshB,EAAKyC,EAAI,IAKTzC,EAFS,MAANA,EAEE,IAAItU,QAAQqoD,EAAGpoD,GAAKmoD,EAAGnoD,EAAIooD,EAAGpoD,GAAK,EAAGooD,EAAGnoD,GAAKkoD,EAAGloD,EAAImoD,EAAGnoD,GAAK,GAI7D,IAAIF,QAAQnP,KAAKiR,MAAMa,UAAUQ,OAASmR,EAAGrU,EAAIpP,KAAKiR,MAAMa,UAAU6c,UAAUvf,EAAIpP,KAAK6R,MAAM6W,OAAOtZ,GACzGpP,KAAKiR,MAAMa,UAAUQ,OAASmR,EAAGpU,EAAIrP,KAAKiR,MAAMa,UAAU6c,UAAUtf,EAAIrP,KAAK6R,MAAM6W,OAAOrZ,IAK7F,IAAIgN,EAAIrc,KAAKwoI,MAAM,GAAG/hH,OAClB3d,EAAIuT,EAAEpU,MACNY,EAAIwT,EAAExU,OACN4e,EAAS,IAAInX,YAAYlG,KAAK2c,MAAMtC,EAAGrU,EAAItG,EAAI,GAAIM,KAAK2c,MAAMtC,EAAGpU,EAAIxG,EAAI,GAAIC,EAAGD,GAEhF7I,KAAKipI,kBAERjpI,KAAKsrI,iBAAiB7kH,GAEM,MAApBzmB,KAAKkkI,aAAuBlkI,KAAK+kI,WAAWn6H,SAAWtC,QAAQqe,WAAWF,EAAQzmB,KAAK+kI,WAAWt+G,UAE1G3d,EAAI6E,YAAYyoB,YAAc,EAC9BvtB,EAAI8E,YAAYyoB,YAAc,EAC9B3P,EAAS,IAAInX,YAAYlG,KAAKmnB,MAAM9M,EAAGrU,EAAItG,EAAI,GAAIM,KAAKmnB,MAAM9M,EAAGpU,EAAIxG,EAAI,GAAIC,EAAGD,IAGjF7I,KAAKwoI,MAAM,GAAG/hH,OAASA,EACvBzmB,KAAKwoI,MAAM,GAAG31H,SAEV7S,KAAKipI,mBAERjpI,KAAKsrI,iBAAiBtrI,KAAKwoI,MAAM,GAAG/hH,SAItCxmB,WAAWuuG,wBAAmD,IAAvBA,mBAAqCA,wBAAqB5nG,EAcjG0B,QAAQoX,OAAO+uF,qBAAsBD,oBAOrCC,qBAAqBriG,UAAU6/H,iBAAmB,WAEjD,IAAI/lH,EAAMlmB,KAAK6R,MAAMsT,eAErB,GAAW,MAAPe,EACJ,CAEC,IAAIwlC,EAAMtiD,KAAKC,IAAI,EAAGrJ,KAAKiR,MAAMsW,KAAKjV,OAEtC,GAAkB,GAAd4T,EAAI/jB,QAA8B,GAAd+jB,EAAI/jB,SAC1BiH,KAAKsX,IAAIwF,EAAI,GAAG9W,EAAI8W,EAAI,GAAG9W,GAAKs8C,GAAOtiD,KAAKsX,IAAIwF,EAAI,GAAG9W,EAAI8W,EAAI,GAAG9W,GAAKs8C,GACxEtiD,KAAKsX,IAAIwF,EAAI,GAAG7W,EAAI6W,EAAI,GAAG7W,GAAKq8C,GAAOtiD,KAAKsX,IAAIwF,EAAI,GAAG7W,EAAI6W,EAAI,GAAG7W,GAAKq8C,GACxE,CACC,IAAIvoC,EAAK+C,EAAI,GAAG9W,GAAK8W,EAAIA,EAAI/jB,OAAS,GAAGiN,EAAI8W,EAAI,GAAG9W,GAAK,EACrDgY,EAAKlB,EAAI,GAAG7W,GAAK6W,EAAIA,EAAI/jB,OAAS,GAAGkN,EAAI6W,EAAI,GAAG7W,GAAK,EAEzD6W,EAAM,CAACA,EAAI,GAAI,IAAI/W,QAAQgU,EAAIiE,GAAK,IAAIjY,QAAQgU,EAAIiE,GAAKlB,EAAIA,EAAI/jB,OAAS,KAI5E,OAAO+jB,GAQRuoF,qBAAqBriG,UAAUy+H,iBAAmB,SAASzkH,GAE1D,GAAIpmB,KAAKyiC,UAAYziC,KAAKqqI,SAEzB,OAAO77B,mBAAmBpiG,UAAUy+H,iBAAiBz/H,MAAMpL,KAAMqL,WAIjE,IAAI6a,EAAMlmB,KAAKisI,mBACX7mH,EAAOplB,KAAK2oB,aAAazC,EAAI,GAAGzW,SAAS,GAC7C2W,EAAQpmB,KAAK2oB,aAAavC,EAAM3W,SAAS,GAGzC,IAFA,IAAI9C,EAAS,GAEJ9H,EAAI,EAAGA,EAAIqhB,EAAI/jB,OAAQ0C,IAChC,CACC,IAAI4e,EAAKzjB,KAAK2oB,aAAazC,EAAIrhB,GAAG4K,SAAS,GAEvC5K,GAAK7E,KAAKyO,QAEoB,GAA7BrF,KAAK2c,MAAMX,EAAKhW,EAAIqU,EAAGrU,KAE1BgW,EAAKhW,EAAIgX,EAAMhX,EACfqU,EAAGrU,EAAIgX,EAAMhX,GAGmB,GAA7BhG,KAAK2c,MAAMX,EAAK/V,EAAIoU,EAAGpU,KAEzB+V,EAAK/V,EAAI+W,EAAM/W,EACfoU,EAAGpU,EAAI+W,EAAM/W,IAIZxK,EAAIqhB,EAAI/jB,OAAS,GAEpBwK,EAAOC,KAAK6W,GAGb2B,EAAO3B,EAIR,GAAqB,GAAjB9W,EAAOxK,OACX,CACC,IAAI2hB,EAAS9jB,KAAK6R,MAAM6lF,yBAAwB,GAC5Cj5E,EAASze,KAAK6R,MAAM6lF,yBAAwB,GAC5CplF,EAAQtS,KAAK6R,MAAM0V,KAAKqI,WACxBpoB,EAAKxH,KAAK6R,MAAM0V,KAAKqH,eAErBxf,EAAIzC,EAAO,GAAGyC,EAAIkD,EAAQ9K,EAAG4H,EAC7BC,EAAI1C,EAAO,GAAG0C,EAAIiD,EAAQ9K,EAAG6H,GAElB,MAAVyU,GAAkBxb,QAAQoe,SAAS5C,EAAQ1U,EAAGC,IACvC,MAAVoP,GAAkBnW,QAAQoe,SAASjI,EAAQrP,EAAGC,MAE/C1C,EAAS,CAACyZ,EAAOA,IAInB,OAAOzZ,GAST8hG,qBAAqBriG,UAAU0+H,mBAAqB,SAASjnH,EAAMuC,EAAOwxE,EAAehnD,GAKxF,GAHAy9D,cAAcjiG,UAAU0+H,mBAAmB1/H,MAAMpL,KAAMqL,YAGlDrL,KAAKyiC,WAAaziC,KAAKqqI,SAC5B,CACCjkH,EAAQpmB,KAAK2oB,aAAavC,EAAM3W,SAAS,GAOzC,IANA,IAAIyW,EAAMrC,EAAKsB,eACX61G,EAAM90G,EAAI,GACVgmH,EAAMhmH,EAAI,GAEVvZ,EAAS,GAEJ9H,EAAI,EAAGA,EAAIqhB,EAAI/jB,OAAQ0C,IAChC,CACC,IAAIq8H,EAAMh7G,EAAIrhB,GAGoB,GAA7BuE,KAAK2c,MAAMi1G,EAAI5rH,EAAI88H,EAAI98H,IAAwC,GAA7BhG,KAAK2c,MAAMmmH,EAAI98H,EAAI8xH,EAAI9xH,IAC/B,GAA7BhG,KAAK2c,MAAMi1G,EAAI3rH,EAAI68H,EAAI78H,IAAwC,GAA7BjG,KAAK2c,MAAMmmH,EAAI78H,EAAI6xH,EAAI7xH,IAE1D1C,EAAOC,KAAK5M,KAAK2oB,aAAaujH,EAAIz8H,SAAS,IAG5CurH,EAAMkR,EACNA,EAAMhL,EAGP,IAAIp9G,EAAS9jB,KAAK6R,MAAM6lF,yBAAwB,GAC5Cj5E,EAASze,KAAK6R,MAAM6lF,yBAAwB,GAC5Cy0C,EAAOnsI,KAAK6R,MAAMsT,eAGtB,GAAqB,GAAjBxY,EAAOxK,QAAgE,GAAhDiH,KAAK2c,MAAMG,EAAI,GAAG9W,EAAI8W,EAAIA,EAAI/jB,OAAS,GAAGiN,IACpB,GAAhDhG,KAAK2c,MAAMG,EAAI,GAAG7W,EAAI6W,EAAIA,EAAI/jB,OAAS,GAAGkN,IAKtC,GAAkB,GAAd6W,EAAI/jB,QAAgC,GAAjBwK,EAAOxK,QAAyB,MAAV2hB,GAA4B,MAAVrF,GAC1D,MAAR0tH,GAAmE,GAAnD/iI,KAAK2c,MAAMomH,EAAK,GAAG/8H,EAAI+8H,EAAKA,EAAKhqI,OAAS,GAAGiN,GAC/D,CACC,IAAImY,EAAOvnB,KAAKiR,MAAMa,UAClBQ,EAAQiV,EAAKqI,WACbpoB,EAAK+f,EAAKqH,eAEVxO,EAAKmH,EAAKg6E,kBAAkBz9E,GAAUxR,EAAQ9K,EAAG6H,EAGjDsgB,EAAK3vB,KAAKiR,MAAMqiG,wBAAwBzvF,EAAMC,GAAQ,GAEhD,MAAN6L,GAIO,OAFNlM,EAAKzjB,KAAKiR,MAAMuiG,mBAAmB1vF,EAAQ6L,MAI9C3vB,KAAK2oB,aAAalF,GAAI,GACtBrD,EAAKqD,EAAGpU,GAIV,IAOKoU,EAPDg+E,EAAKl6E,EAAKg6E,kBAAkB9iF,GAAUnM,EAAQ9K,EAAG6H,EAGjD4kG,EAAKj0G,KAAKiR,MAAMqiG,wBAAwBzvF,EAAMpF,GAAQ,GAEtDw1F,GAIO,OAFNxwF,EAAKzjB,KAAKiR,MAAMuiG,mBAAmB/0F,EAAQw1F,MAI9Cj0G,KAAK2oB,aAAalF,GAAI,GACtBg+E,EAAKh+E,EAAGpU,GAIV1C,EAAS,CAAC,IAAIwC,QAAQiX,EAAMhX,EAAGgR,GAAK,IAAIjR,QAAQiX,EAAMhX,EAAGqyF,UA1CzD90F,EAAS,CAACyZ,EAAOA,GA6ClBpmB,KAAKgzD,OAASrmD,EAGdkX,EAAK0D,KAAKsrF,0BAA0BhvF,EAAMC,EAAQrF,GAClDoF,EAAK0D,KAAKurF,aAAajvF,EAAM7jB,KAAKgzD,OAAQlvC,EAAQrF,GAClDoF,EAAK0D,KAAKwrF,6BAA6BlvF,EAAMC,EAAQrF,KAOvDgwF,qBAAqBriG,UAAU0iF,QAAU,SAASjrE,EAAMD,EAAU6e,EAAU0oG,EAASv6F,GAEpF,IAAI1+B,EAAQlS,KAAKiR,MAAM8c,WAEnBphB,EAAS,KAGb,GAAW,OAJPu1C,EAAMhwC,EAAMk5D,YAAYvnD,KAIK,MAAdq+B,EAAI8Q,QAAkB9Q,EAAI8Q,OAAO7wD,OAAS,EAC7D,CACC,IAAI+jB,EAAMlmB,KAAKkpI,UACXlO,EAAM90G,EAAI,GACVgmH,EAAMhmH,EAAI,GACdvZ,EAAS,GAET,IAAK,IAAI9H,EAAI,EAAGA,EAAIqhB,EAAI/jB,OAAQ0C,IAChC,CACC,IAAIq8H,EAAMh7G,EAAIrhB,GAGoB,GAA7BuE,KAAK2c,MAAMi1G,EAAI5rH,EAAI88H,EAAI98H,IAAwC,GAA7BhG,KAAK2c,MAAMmmH,EAAI98H,EAAI8xH,EAAI9xH,IAC/B,GAA7BhG,KAAK2c,MAAMi1G,EAAI3rH,EAAI68H,EAAI78H,IAAwC,GAA7BjG,KAAK2c,MAAMmmH,EAAI78H,EAAI6xH,EAAI7xH,IAE1D1C,EAAOC,KAAK5M,KAAK2oB,aAAaujH,EAAIz8H,SAAS,IAG5CurH,EAAMkR,EACNA,EAAMhL,GAIRhvH,EAAMuZ,cACN,IAIE,IAAIy2B,EAFS,MAAVv1C,GAIQ,OAFPu1C,EAAMhwC,EAAMk5D,YAAYvnD,OAI3Bq+B,EAAMA,EAAIzyC,SACNujD,OAASrmD,EAEbuF,EAAMu5D,YAAY5nD,EAAMq+B,IAI1Br+B,EAAOwqF,cAAcjiG,UAAU0iF,QAAQ1jF,MAAMpL,KAAMqL,WAEpD,QAEC6G,EAAM0Z,YAGP,OAAO/H,GAQR4qF,qBAAqBriG,UAAUk/G,kBAAoB,SAASpmH,GAE3D,OAAO,MAQRupG,qBAAqBriG,UAAUib,MAAQ,SAASjY,EAAGC,EAAGZ,GAErD4/F,cAAcjiG,UAAUib,MAAMjc,MAAMpL,KAAMqL,WAExB,MAAdrL,KAAKwoI,OAAsC,MAArBxoI,KAAKwoI,MAAM/5H,IACnCzO,KAAKyiC,UAAaziC,KAAKqqI,UAExB/hI,QAAQ8J,WAAWpS,KAAKwoI,MAAM/5H,GAAOvJ,KAAM,MAS7CupG,qBAAqBriG,UAAUi9H,YAAc,WAE5C,IAAIb,EAAQ,GAGRuB,EAAO/pI,KAAKgqI,kBAAkB,GAClChqI,KAAK0pI,SAASK,GACdA,EAAKzxE,UAAU3qD,YAAYqnB,wBAC3BwzG,EAAM57H,KAAKm9H,GAEX,IAAI7jH,EAAMlmB,KAAKisI,mBAGf,GAAIjsI,KAAKiR,MAAM89G,eAAe/uH,KAAK6R,MAAMG,MACzC,CACoB,MAAfhS,KAAKgzD,SAERhzD,KAAKgzD,OAAS,IAGf,IAAK,IAAInuD,EAAI,EAAGA,EAAIqhB,EAAI/jB,OAAS,EAAG0C,IACpC,CACCklI,EAAO/pI,KAAK8rI,oBACZtD,EAAM57H,KAAKm9H,GACX,IAAI34E,EAAoD,GAAvChoD,KAAK2c,MAAMG,EAAIrhB,GAAGuK,EAAI8W,EAAIrhB,EAAI,GAAGuK,GAGP,GAAvChG,KAAK2c,MAAMG,EAAIrhB,GAAGwK,EAAI6W,EAAIrhB,EAAI,GAAGwK,IAAWxK,EAAIqhB,EAAI/jB,OAAS,IAEhEivD,EAAoD,GAAvChoD,KAAK2c,MAAMG,EAAIrhB,GAAGuK,EAAI8W,EAAIrhB,EAAI,GAAGuK,IAG/C26H,EAAKzxE,UAAU,EAAe,aAAe,cAC7Ct4D,KAAKgzD,OAAOpmD,KAAK,IAAIuC,QAAQ,EAAE,KAUjC,OALI46H,EAAO/pI,KAAKgqI,kBAAkB9jH,EAAI/jB,QACtCnC,KAAK0pI,SAASK,GACdA,EAAKzxE,UAAU3qD,YAAYqnB,wBAC3BwzG,EAAM57H,KAAKm9H,GAEJvB,GAQR/5B,qBAAqBriG,UAAUyG,OAAS,WAEvC7S,KAAKstG,UACLe,cAAcjiG,UAAUyG,OAAOzH,MAAMpL,KAAMqL,YAQ5CojG,qBAAqBriG,UAAUs/H,iBAAmB,SAASl0E,EAAID,GAE9D,GAAIv3D,KAAKiR,MAAM89G,eAAe/uH,KAAK6R,MAAMG,MACzC,CACC,IAAIkU,EAAMlmB,KAAKisI,mBAEf,GAAW,MAAP/lH,GAAeA,EAAI/jB,OAAS,EAChC,CACC,IAAIiqI,GAAW,EAGf,GAAkB,GAAdlmH,EAAI/jB,QAAkD,GAAnCiH,KAAK2c,MAAMG,EAAI,GAAG9W,EAAI8W,EAAI,GAAG9W,IAA8C,GAAnChG,KAAK2c,MAAMG,EAAI,GAAG7W,EAAI6W,EAAI,GAAG7W,GAI3F,GAFA+8H,GAAW,EAEyC,GAAhDhjI,KAAK2c,MAAMG,EAAI,GAAG7W,EAAI6W,EAAIA,EAAI/jB,OAAS,GAAGkN,GAC9C,CACC,IAAI8T,EAAK+C,EAAI,GAAG9W,GAAK8W,EAAIA,EAAI/jB,OAAS,GAAGiN,EAAI8W,EAAI,GAAG9W,GAAK,EACzD8W,EAAI,GAAK,IAAI/W,QAAQgU,EAAI+C,EAAI,GAAG7W,GAChC6W,EAAI,GAAK,IAAI/W,QAAQgU,EAAI+C,EAAI,GAAG7W,OAGjC,CACC,IAAI+X,EAAKlB,EAAI,GAAG7W,GAAK6W,EAAIA,EAAI/jB,OAAS,GAAGkN,EAAI6W,EAAI,GAAG7W,GAAK,EACzD6W,EAAI,GAAK,IAAI/W,QAAQ+W,EAAI,GAAG9W,EAAGgY,GAC/BlB,EAAI,GAAK,IAAI/W,QAAQ+W,EAAI,GAAG9W,EAAGgY,GAIjC,IAAK,IAAIviB,EAAI,EAAGA,EAAIqhB,EAAI/jB,OAAS,EAAG0C,IAEnC,GAAyB,MAArB7E,KAAKwoI,MAAM3jI,EAAI,GACnB,CACM2yD,EAAKtxC,EAAIrhB,GACT0yD,EAAKrxC,EAAIrhB,EAAI,GADjB,IAEI4e,EAAK,IAAItU,QAAQqoD,EAAGpoD,GAAKmoD,EAAGnoD,EAAIooD,EAAGpoD,GAAK,EAAGooD,EAAGnoD,GAAKkoD,EAAGloD,EAAImoD,EAAGnoD,GAAK,GAClEgN,EAAIrc,KAAKwoI,MAAM3jI,EAAI,GAAG4hB,OAC1BzmB,KAAKwoI,MAAM3jI,EAAI,GAAG4hB,OAAS,IAAInX,YAAYlG,KAAKmnB,MAAM9M,EAAGrU,EAAIiN,EAAEpU,MAAQ,GACrEmB,KAAKmnB,MAAM9M,EAAGpU,EAAIgN,EAAExU,OAAS,GAAIwU,EAAEpU,MAAOoU,EAAExU,QAC9C7H,KAAKwoI,MAAM3jI,EAAI,GAAGgO,SAEd7S,KAAKipI,mBAETjpI,KAAKsrI,iBAAiBtrI,KAAKwoI,MAAM3jI,EAAI,GAAG4hB,QAKvC2lH,IAEH9jI,QAAQ8J,WAAWpS,KAAKwoI,MAAM,GAAGtjI,KAAMlF,KAAK8oI,oBAC5CxgI,QAAQ8J,WAAWpS,KAAKwoI,MAAM,GAAGtjI,KAAMlF,KAAK8oI,wBAMhD7oI,WAAWwuG,0BAAuD,IAAzBA,qBAAuCA,0BAAuB7nG,EA0GvG8nG,aAAatiG,UAAU6E,MAAQ,KAQ/By9F,aAAatiG,UAAUqS,OAAS,KAOhCiwF,aAAatiG,UAAUuiG,WAAa,KAOpCD,aAAatiG,UAAUwiG,UAAY,KAOnCF,aAAatiG,UAAUyiG,YAAc,KAOrCH,aAAatiG,UAAU0iG,iBAAmB,KAO1CJ,aAAatiG,UAAU4oC,SAAU,EAQjC05D,aAAatiG,UAAUuH,UAAY,WAElC,OAAO3T,KAAKg1C,SAYb05D,aAAatiG,UAAUupC,WAAa,SAASX,GAE5Ch1C,KAAKg1C,QAAUA,GAchB05D,aAAatiG,UAAUigI,QAAU,SAASC,EAAM/hI,GAE/CvK,KAAK2uG,WAAW29B,GAAQ/hI,GAczBmkG,aAAatiG,UAAUmgI,aAAe,SAASD,EAAM/hI,GAEpDvK,KAAK4uG,UAAU09B,GAAQ/hI,GAcxBmkG,aAAatiG,UAAUogI,eAAiB,SAASF,EAAM/hI,GAEtDvK,KAAK6uG,YAAYy9B,GAAQ/hI,GAc1BmkG,aAAatiG,UAAUqgI,oBAAsB,SAASH,EAAM/hI,GAE3DvK,KAAK8uG,iBAAiBw9B,GAAQ/hI,GAY/BmkG,aAAatiG,UAAUs6B,cAAgB,SAASv+B,GAE/C,OAAO8B,QAAQy8B,cAAcv+B,IAa9BumG,aAAatiG,UAAUsgI,YAAc,SAASvkI,GAE7C,OAAW,MAAPA,GAAgB8B,QAAQ48B,UAAU1+B,GA0B/B,KAxBFnI,KAAK0mC,cAAcv+B,GAElB8B,QAAQ08B,YAAYx+B,GAEhBnI,KAAK8uG,iBAAiB3mG,EAAImyF,SAI1Bt6F,KAAK6uG,YAAY1mG,EAAImyF,SAKzBrwF,QAAQ08B,YAAYx+B,GAEhBnI,KAAK4uG,UAAUzmG,EAAImyF,SAInBt6F,KAAK2uG,WAAWxmG,EAAImyF,UAoB/BoU,aAAatiG,UAAUugI,aAAe,SAASxkI,GAE9C,IAAI2b,EAAS7Z,QAAQu4B,UAAUr6B,GAI/B,SAAK2b,GAAU9jB,KAAKye,QAAUqF,EAAOjQ,YAAc7T,KAAKye,QAC7B,MAAzBze,KAAKiR,MAAMwlG,YAAsBz2G,KAAKiR,MAAMwlG,WAAW3b,cAAc3yF,KAMhEG,QAAQmO,eAAezW,KAAKiR,MAAM0W,UAAW7D,IAerD4qF,aAAatiG,UAAU4iG,QAAU,SAAS7mG,GAEzC,GAAInI,KAAKi4C,kBAAkB9vC,GAG1B,GAAmB,IAAfA,EAAImyF,QAEPt6F,KAAKuvG,OAAOpnG,QAIR,IAAKnI,KAAK4yH,eAAezqH,GAC9B,CACC,IAAIykI,EAAgB5sI,KAAK0sI,YAAYvkI,GAEhB,MAAjBykI,IAEHA,EAAczkI,GACd8B,QAAQm4B,QAAQj6B,MAmBpBumG,aAAatiG,UAAU6rC,kBAAoB,SAAS9vC,GAEnD,OAAQnI,KAAKiR,MAAM0C,cAAgB1J,QAAQk4B,WAAWh6B,IACrDnI,KAAK2sI,aAAaxkI,IAAQnI,KAAK2T,aAajC+6F,aAAatiG,UAAUwmH,eAAiB,SAASzqH,GAEhD,OAAOnI,KAAKiR,MAAM8hF,aAenB2b,aAAatiG,UAAUmjG,OAAS,SAASpnG,GAEpCnI,KAAKiR,MAAM66G,mBAEd9rH,KAAKiR,MAAMs+F,OAAOpnG,IAWpBumG,aAAatiG,UAAU6iB,QAAU,WAEb,MAAfjvB,KAAKye,QAAyC,MAAvBze,KAAK+uG,iBAE/B9kG,QAAQs5B,eAAevjC,KAAKye,OAAQ,UAAWze,KAAK+uG,gBACpD/uG,KAAK+uG,eAAiB,MAGvB/uG,KAAKye,OAAS,MAGfxe,WAAWyuG,kBAAuC,IAAjBA,aAA+BA,kBAAe9nG,EA6C/EqoG,iBAAiB7iG,UAAU2lC,OAAS,MAOpCk9D,iBAAiB7iG,UAAU6E,MAAQ,KAOnCg+F,iBAAiB7iG,UAAU4G,MAAQ,KAOnCi8F,iBAAiB7iG,UAAUygI,mBAAoB,EAQ/C59B,iBAAiB7iG,UAAU0gI,aAAc,EAOzC79B,iBAAiB7iG,UAAU8nH,WAAY,EAOvCjlB,iBAAiB7iG,UAAU4oC,SAAU,EAQrCi6D,iBAAiB7iG,UAAUuH,UAAY,WAEtC,OAAO3T,KAAKg1C,SASbi6D,iBAAiB7iG,UAAUupC,WAAa,SAASX,GAEhDh1C,KAAKg1C,QAAUA,GAQhBi6D,iBAAiB7iG,UAAUimG,cAAgB,WAE1C,OAAOryG,KAAK8sI,aAQb79B,iBAAiB7iG,UAAU2gI,eAAiB,SAAShlI,GAEpD/H,KAAK8sI,YAAc/kI,GAQpBknG,iBAAiB7iG,UAAUjF,KAAO,WAEZ,MAAjBtG,SAASuG,OAEZpH,KAAKitB,IAAMpsB,SAASG,cAAc,OAClChB,KAAKitB,IAAIijB,UAAY,YACrBlwC,KAAKitB,IAAIvlB,MAAM6D,WAAa,SAE5B1K,SAASuG,KAAK7C,YAAYvE,KAAKitB,KAE/BhjB,QAAQq6B,oBAAoBtkC,KAAKitB,IAAK3kB,QAAQ2M,KAAKjV,MAAM,SAASmI,GAEjEnI,KAAK27F,oBAURsT,iBAAiB7iG,UAAU4gI,iBAAmB,SAASp8F,GAEtD,OAAOA,EAAG7+B,YAUXk9F,iBAAiB7iG,UAAUqkC,UAAY,SAAS3mC,EAAQ8mC,GAEvD5wC,KAAKk2C,MAAMtF,GAAI,GACf5wC,KAAK27F,eAQNsT,iBAAiB7iG,UAAUoqC,UAAY,SAAS1sC,EAAQ8mC,GAEvD,GAAIA,EAAGlO,QAAU1iC,KAAK0jD,OAAS9S,EAAGhO,QAAU5iC,KAAK2jD,MACjD,CACC3jD,KAAKk2C,MAAMtF,GAAI,GACf,IAAI/+B,EAAQ7R,KAAKgtI,iBAAiBp8F,IAE9B5wC,KAAKqyG,iBAAmBxgG,GAAS7R,KAAK6R,OAAU++B,EAAGpO,aAAexiC,KAAKkF,QACxElF,KAAKitI,aAAyB,MAATp7H,GAAiB7R,KAAKitI,cAC5Cr8F,EAAGnO,SAAS5wB,EAAMQ,SAAWu+B,EAAGnO,SAAS5wB,EAAMxD,UAEhDrO,KAAK27F,cAIP37F,KAAK0jD,MAAQ9S,EAAGlO,OAChB1iC,KAAK2jD,MAAQ/S,EAAGhO,QASjBqsE,iBAAiB7iG,UAAUsqC,QAAU,SAAS5sC,EAAQ8mC,GAErD5wC,KAAKk2C,MAAMtF,GAAI,GACf5wC,KAAK27F,eASNsT,iBAAiB7iG,UAAU8gI,WAAa,WAEpB,MAAfltI,KAAKw7C,SAERh6C,OAAOo5F,aAAa56F,KAAKw7C,QACzBx7C,KAAKw7C,OAAS,OAShByzD,iBAAiB7iG,UAAU8pC,MAAQ,SAAStF,EAAIu8F,EAASt7H,GAExD,KAAK7R,KAAK6sI,mBAAqB5iI,QAAQm5B,aAAawN,EAAGrO,eAEtDviC,KAAKktI,aACLr7H,EAAkB,MAATA,EAAiBA,EAAQ7R,KAAKgtI,iBAAiBp8F,GAEpDu8F,GAAWntI,KAAK2T,aAAwB,MAAT9B,IAA8B,MAAZ7R,KAAKitB,KAC5B,UAA7BjtB,KAAKitB,IAAIvlB,MAAM6D,aAChB,CACC,IAAIrG,EAAO0rC,EAAGpO,YACVpzB,EAAIwhC,EAAGlO,OACPrzB,EAAIuhC,EAAGhO,OACPqqG,EAAcr8F,EAAGnO,SAAS5wB,EAAMQ,QAAUu+B,EAAGnO,SAAS5wB,EAAMxD,MAEhErO,KAAKw7C,OAASh6C,OAAOuR,WAAWzK,QAAQ2M,KAAKjV,MAAM,WAElD,IAAKA,KAAKiR,MAAM8hF,cAAgB/yF,KAAKiR,MAAM+kG,iBAAiB98D,kBAAoBl5C,KAAKiR,MAAMimC,YAC3F,CAIC,IAAIk0E,EAAMprH,KAAKiR,MAAMk6G,WAAWt5G,EAAO3M,EAAMkK,EAAGC,GAChDrP,KAAK0K,KAAK0gH,EAAKh8G,EAAGC,GAClBrP,KAAK6R,MAAQA,EACb7R,KAAKkF,KAAOA,EACZlF,KAAKitI,YAAcA,MAEjBjtI,KAAKgT,SAUZi8F,iBAAiB7iG,UAAUwlC,KAAO,WAEjC5xC,KAAKktI,aACLltI,KAAK27F,eAQNsT,iBAAiB7iG,UAAUuvF,YAAc,WAExB,MAAZ37F,KAAKitB,MAERjtB,KAAKitB,IAAIvlB,MAAM6D,WAAa,SAC5BvL,KAAKitB,IAAI3S,UAAY,KAUvB20F,iBAAiB7iG,UAAU1B,KAAO,SAAS0gH,EAAKh8G,EAAGC,GAElD,IAAKrP,KAAKk0H,WAAoB,MAAP9I,GAAeA,EAAIjpH,OAAS,EACnD,CAEiB,MAAZnC,KAAKitB,KAERjtB,KAAKmH,OAGN,IAAIuhB,EAASpgB,QAAQigB,kBAErBvoB,KAAKitB,IAAIvlB,MAAMqqC,OAAS/xC,KAAK+xC,OAC7B/xC,KAAKitB,IAAIvlB,MAAM+U,KAAQrN,EAAIsZ,EAAOtZ,EAAK,KACvCpP,KAAKitB,IAAIvlB,MAAMuV,IAAO5N,EAAI1B,YAAY8kB,wBACrC/J,EAAOrZ,EAAK,KAER/G,QAAQ+N,OAAO+0G,IAMnBprH,KAAKitB,IAAI3S,UAAY,GACrBta,KAAKitB,IAAI1oB,YAAY6mH,IALrBprH,KAAKitB,IAAI3S,UAAY8wG,EAAIx8G,QAAQ,MAAO,QAQzC5O,KAAKitB,IAAIvlB,MAAM6D,WAAa,GAC5BjD,QAAQiU,IAAIvc,KAAKitB,OASnBgiF,iBAAiB7iG,UAAU6iB,QAAU,WAE/BjvB,KAAKk0H,YAETl0H,KAAKiR,MAAM4rC,oBAAoB78C,MAC/BiK,QAAQm7B,QAAQplC,KAAKitB,KAEL,MAAZjtB,KAAKitB,KAAsC,MAAvBjtB,KAAKitB,IAAIpZ,YAEhC7T,KAAKitB,IAAIpZ,WAAWC,YAAY9T,KAAKitB,KAGtCjtB,KAAKk0H,WAAY,EACjBl0H,KAAKitB,IAAM,OAIbhtB,WAAWgvG,sBAA+C,IAArBA,iBAAmCA,sBAAmBroG,EAoG3F0B,QAAQoX,OAAOwvF,cAAejC,cAO9BiC,cAAc9iG,UAAUqkC,UAAY,SAAS3mC,EAAQ8mC,KAQrDs+D,cAAc9iG,UAAUoqC,UAAY,SAAS1sC,EAAQ8mC,GAEhD5wC,KAAK2T,aAER3T,KAAK29H,QAAQ/sF,IASfs+D,cAAc9iG,UAAUsqC,QAAU,SAAS5sC,EAAQ8mC,KASnDs+D,cAAc9iG,UAAU6iB,QAAU,WAE5BjvB,KAAKk0H,YAETl0H,KAAKk0H,WAAY,EAEjBl0H,KAAKiR,MAAM4rC,oBAAoB78C,MAC/BitG,aAAa7gG,UAAU6iB,QAAQ7jB,MAAMpL,QAIvCC,WAAWivG,mBAAyC,IAAlBA,cAAgCA,mBAAgBtoG,EAwElF2wC,gBAAgBnrC,UAAUghI,WAAY,EAOtC71F,gBAAgBnrC,UAAU6E,OAAQ,EAOlCsmC,gBAAgBnrC,UAAUyF,MAAQ,KAQlC0lC,gBAAgBnrC,UAAU4rD,QAAU,EAQpCzgB,gBAAgBnrC,UAAUshG,aAAe,KAWzCn2D,gBAAgBnrC,UAAUsuH,kBAAoB,SAASz+G,GAEtDjc,KAAKmvG,eAAiBlzF,EAEJ,MAAdjc,KAAKqS,QAERrS,KAAKqS,MAAMw2C,OAAS5sC,IAStBs7B,gBAAgBnrC,UAAUihI,cAAgB,WAEzCrtI,KAAKqS,MAAQrS,KAAK+8F,cAClB/8F,KAAK+tG,UAEA/tG,KAAKotI,WAAaptI,KAAKqS,MAAMnN,KAAK2O,WAAW+B,YAAc5V,KAAKqS,MAAMnN,MAE1ElF,KAAKqS,MAAMnN,KAAK2O,WAAW2/B,aAAaxzC,KAAKqS,MAAMnN,KAAMlF,KAAKqS,MAAMnN,KAAK2O,WAAW+B,aAStF2hC,gBAAgBnrC,UAAU2wF,YAAc,WAEvC,IAAI1qF,EAAQrS,KAAKiR,MAAM2B,aAAamqF,YAAY/8F,KAAK6R,OAuBrD,OArBAQ,EAAMihD,mBAAqBtzD,KAAKiR,MAAMwgD,UACtCp/C,EAAM2gD,OAAShzD,KAAK6R,MAAMsT,eAC1B9S,EAAMjH,MAAMpL,KAAK6R,OACjBQ,EAAMw2C,OAAS7oD,KAAKmvG,eACpB98F,EAAMY,QAAUjT,KAAKiT,QACrBZ,EAAMy/C,SAAW9xD,KAAK2kD,OACtBtyC,EAAMmjD,UAAW,EAEjBnjD,EAAMic,QAAWtuB,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YAAe5gB,YAAYylB,YAAczlB,YAAY4gB,YACxGlc,EAAMlL,KAAKnH,KAAKiR,MAAMa,UAAU+gD,kBAChC5oD,QAAQ06B,oBAAoBtyB,EAAMnN,KAAMlF,KAAKiR,MAAOjR,KAAK6R,OAErD7R,KAAKiR,MAAMqd,SAAW3gB,YAAY4gB,YAErClc,EAAMskC,eAAgB,EAItBtkC,EAAMkhD,iBAAmB,SAGnBlhD,GAQRklC,gBAAgBnrC,UAAUkhI,eAAiB,SAASz7H,GAEnD,OAAO7R,KAAK0kD,aAQbnN,gBAAgBnrC,UAAU2hG,QAAU,WAEjB,MAAd/tG,KAAK6R,OAA+B,MAAd7R,KAAKqS,QAE9BrS,KAAKqS,MAAMC,MAAQtS,KAAK6R,MAAM0V,KAAKjV,MAE/BtS,KAAKiR,MAAMiB,MAAMC,OAAOnS,KAAK6R,MAAMG,OAEtChS,KAAKqS,MAAMuhD,YAAc5zD,KAAKstI,iBAC9BttI,KAAKqS,MAAM2gD,OAAShzD,KAAK6R,MAAMsT,eAC/BnlB,KAAKqS,MAAMqhD,SAAU,IAIrB1zD,KAAKqS,MAAMoU,OAAS,IAAInX,YAAYtP,KAAK6R,MAAMzC,EAAIpP,KAAKg4D,QAASh4D,KAAK6R,MAAMxC,EAAIrP,KAAKg4D,QACnFh4D,KAAK6R,MAAM5J,MAAQ,EAAIjI,KAAKg4D,QAASh4D,KAAK6R,MAAMhK,OAAS,EAAI7H,KAAKg4D,SACpEh4D,KAAKqS,MAAM6Q,SAAWjE,OAAOjf,KAAK6R,MAAMnK,MAAMiG,YAAY2W,iBAAmB,KAC7EtkB,KAAKqS,MAAMuhD,YAAc5zD,KAAKstI,iBAAmBttI,KAAK6R,MAAM0V,KAAKjV,MACjEtS,KAAKqS,MAAMqhD,SAAU,GAIE,MAApB1zD,KAAK6R,MAAMQ,OAEdrS,KAAKqS,MAAMimD,UAAUt4D,KAAK6R,MAAMQ,MAAMkmD,cAKnCr4D,SAASU,WAAsC,GAAzBC,SAASC,gBAET,eAArBd,KAAKqS,MAAMw2C,QAKd7oD,KAAKqS,MAAMw2C,OAAS,QACpB7oD,KAAKqS,MAAMY,QAAU,GAIrBjT,KAAKqS,MAAMY,QAAUjT,KAAKiT,SAI5BjT,KAAKqS,MAAMQ,WASb0kC,gBAAgBnrC,UAAUwlC,KAAO,WAEhC5xC,KAAK83C,UAAU,OAQhBP,gBAAgBnrC,UAAU0rC,UAAY,SAASjmC,GAE1C7R,KAAK6R,OAASA,IAEC,MAAd7R,KAAKqS,QAERrS,KAAKqS,MAAM4c,UACXjvB,KAAKqS,MAAQ,MAGdrS,KAAK6R,MAAQA,EAEK,MAAd7R,KAAK6R,OAER7R,KAAKqtI,kBAUR91F,gBAAgBnrC,UAAUw0H,cAAgB,SAASxxH,EAAGC,GAErD,IAAIymH,GAAM,EAGV,GAAkB,MAAd91H,KAAKqS,OAA8C,MAA7BxR,SAASg2C,mBAA6B32C,SAASU,UAIxE,IAFA,IAAI+I,EAAM9I,SAASg2C,iBAAiBznC,EAAGC,GAEzB,MAAP1F,GACP,CACC,GAAIA,GAAO3J,KAAKqS,MAAMnN,KACtB,CACC4wH,GAAM,EACN,MAGDnsH,EAAMA,EAAIkK,WAIZ,OAAOiiH,GAQRv+E,gBAAgBnrC,UAAU6iB,QAAU,WAEnCjvB,KAAKiR,MAAMa,UAAUyxB,eAAevjC,KAAK0tG,cACzC1tG,KAAKiR,MAAMa,UAAUyxB,eAAevjC,KAAKovG,gBACzCpvG,KAAKiR,MAAM8c,WAAWwV,eAAevjC,KAAKovG,gBAExB,MAAdpvG,KAAKqS,QAERrS,KAAKqS,MAAM4c,UACXjvB,KAAKqS,MAAQ,OAIfpS,WAAWs3C,qBAA6C,IAApBA,gBAAkCA,qBAAkB3wC,EAyExFyoG,oBAAoBjjG,UAAUqP,OAAS,KAOvC4zF,oBAAoBjjG,UAAUkjG,QAAU,KAgBxCD,oBAAoBjjG,UAAUmhI,WAAa,SAAUjB,EAAM5wH,EAAQy4E,GAElE,IAAI6X,EAAa1jG,QAAQ2M,KAAKjV,MAAM,WAEnCA,KAAKyb,OAAOG,QAAQF,MAIjBy4E,EAEHn0F,KAAKsvG,QAAQk9B,eAAeF,EAAMtgC,GAMlChsG,KAAKsvG,QAAQ+8B,QAAQC,EAAMtgC,IAW7BqD,oBAAoBjjG,UAAU6iB,QAAU,WAEvCjvB,KAAKsvG,QAAQrgF,UACbjvB,KAAKsvG,QAAU,MAGhBrvG,WAAWovG,yBAAqD,IAAxBA,oBAAsCA,yBAAsBzoG,EA4CpG6oG,mBAAmBrjG,UAAUxG,cAAgB,KAS7C6pG,mBAAmBrjG,UAAUsjG,OAAS,KAsGtCD,mBAAmBrjG,UAAUohI,WAAa,SAAS/xH,EAAQs9B,EAAM/mC,EAAM7J,GAEtE,GAAmB,MAAfnI,KAAK0vG,OACT,CACC,IAAI+9B,EAAaztI,KAAK0tI,iBAAiBjyH,EAAQzJ,EAAM7J,GACjDq4C,EAAOxgD,KAAK0vG,OAAO95F,WAEvB5V,KAAK2tI,SAASlyH,EAAQs9B,EAAM/mC,EAAM7J,EAAKslI,EAAYjtF,EAAM,QAmB3DivD,mBAAmBrjG,UAAUuhI,SAAW,SAASlyH,EAAQs9B,EAAM/mC,EAAM7J,EAAKslI,EAAYjtF,EAAM7pC,GAI3F,IAFA,IAAIujC,GAAe,EAEJ,MAARsG,GACP,CACC,GAAqB,OAAjBA,EAAKlqC,SACT,CACC,IAAIs3H,EAAYptF,EAAK7qC,aAAa,MAElC,GAAiB,MAAbi4H,GAAqBH,EAAWG,GACpC,CACC,IAAIC,EAAKrtF,EAAK7qC,aAAa,MAC3Bk4H,EAAK/oI,YAAY+G,IAAIgiI,IAAOA,EAC5B,IAAItjI,EAAQjC,QAAQ6M,KAAK7M,QAAQqQ,eAAe6nC,IAC5C9kC,EAAS8kC,EAAK7qC,aAAa,UAC3Bic,EAAO4uB,EAAK7qC,aAAa,QACzB6pC,EAAUgB,EAAK7qC,aAAa,WAC5Bm4H,EAActtF,EAAK7qC,aAAa,cAChCq/B,EAAyB,MAAf84F,GAAuBL,EAAWK,GAE5C5zF,IAEHnB,EAAKmB,aAAavjC,GAClBujC,GAAe,GAGJ,MAARtoB,GAAgB5xB,KAAK4F,gBAExBgsB,EAAO5xB,KAAK4F,cAAgBgsB,GAG7B,IAAIgvB,EAAM5gD,KAAK+tI,UAAUh1F,EAAMt9B,EAAQoyH,EAAIj8G,EAAMrnB,EAAOmR,EAAQ1J,EAAM2E,EAAQ6oC,EAASxK,GACvFh1C,KAAK2tI,SAASlyH,EAAQs9B,EAAM/mC,EAAM7J,EAAKslI,EAAYjtF,EAAK5qC,WAAYgrC,QAG5C,aAAjBJ,EAAKlqC,WAEb4jC,GAAe,GAGhBsG,EAAOA,EAAK3qC,cAyBd45F,mBAAmBrjG,UAAU2hI,UAAY,SAASh1F,EAAMt9B,EAAQnR,EAAKsnB,EAAMrnB,EAAOmR,EAAQ1J,EAAM2E,EAAQ6oC,EAASxK,GAehH,OAAO+D,EAAKN,QAAQnuC,EAAKsnB,GAbN,SAASzpB,GAEN,mBAAX,GAEToC,EAAMgF,KAAKkM,EAAQA,EAAQzJ,EAAM7J,GAGpB,MAAVuT,GAEHD,EAAOG,QAAQF,EAAQ1J,EAAM7J,KAIcwO,EAAQ6oC,EAASxK,IAQ/Dy6D,mBAAmBrjG,UAAUshI,iBAAmB,SAASjyH,EAAQzJ,EAAM7J,GAGtE,IAAI+J,EAAQuJ,EAAOxK,MAAM8c,WACrB7a,EAAahB,EAAMiB,cAAcnB,GAGjCy7H,EAAa,GACjBA,EAAmB,OAAY,MAARz7H,EACvBy7H,EAAmB,OAAIhyH,EAAOxK,MAAM8/G,oBAAsB,EAC1D0c,EAAoB,QAAIv7H,EAAM8b,WAC7B9b,EAAM+vC,UAAUxmC,EAAOxK,MAAMm+B,oBAC9Bq+F,EAAiB,KAAY,MAARz7H,EAErB,IAAIg8H,EAAiB,MAARh8H,GAAoD,GAApCyJ,EAAOxK,MAAM8/G,oBAC1C0c,EAAqB,SAAIO,GAAU96H,EAAa,EAChDu6H,EAAuB,WAAIO,GAAUvyH,EAAOxK,MAAMm0G,eAAepzG,GAAM,GACvEy7H,EAAwB,YAAIO,GAAUvyH,EAAOxK,MAAMm0G,eAAepzG,GAAM,GACxEy7H,EAAsB,UAAIO,GAAUvyH,EAAOxK,MAAM42G,YAAY71G,GAC7Dy7H,EAA2B,eAAIA,EAAsB,WAAmB,GAAdv6H,EAC1Du6H,EAAqB,SAAIO,GAAUvyH,EAAOxK,MAAMu8D,WAAWx7D,GAK3D,IAFA,IAAIi8H,EAAYjuI,KAAK0vG,OAAOprG,qBAAqB,aAExCO,EAAE,EAAGA,EAAEopI,EAAU9rI,OAAQ0C,IAClC,CACC,IAAI0F,EAAQjC,QAAQ6M,KAAK7M,QAAQqQ,eAAes1H,EAAUppI,KACtD9E,EAAOkuI,EAAUppI,GAAG8Q,aAAa,QAEzB,MAAR5V,GAAiC,mBAAX,IAEzB0tI,EAAW1tI,GAAQwK,EAAMkR,EAAQzJ,EAAM7J,IAIzC,OAAOslI,GAGRxtI,WAAWwvG,wBAAmD,IAAvBA,mBAAqCA,wBAAqB7oG,EA0DjG+oG,iBAAiBvjG,UAAUqP,OAAS,KAOpCk0F,iBAAiBvjG,UAAU+jG,QAAU,KAOrCR,iBAAiBvjG,UAAUshG,aAAe,KAS1CiC,iBAAiBvjG,UAAU4rD,QAAU,EAQrC23C,iBAAiBvjG,UAAUssH,eAAgB,EAa3C/oB,iBAAiBvjG,UAAUjF,KAAO,SAASwgB,GAEzB,MAAbA,IAEH3nB,KAAKmwG,QAAU,IAAIt/D,UAAUlpB,GAI7B3nB,KAAKmwG,QAAQnmG,YAAYC,QAAQ0+B,OAAQrgC,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAE5E,IAAIoC,EAAQpC,EAAI+5B,YAAY,YAI3BliC,KAAKyb,OAAOyyH,eAFA,MAAT3jI,EAE0BjC,QAAQ2M,KAAKjV,MAAM,WAE/CuK,EAAMa,MAAMpL,KAAMqL,WAClBrL,KAAKmwG,QAAQn2D,eAKe,SAK/Bh6C,KAAK0tG,aAAeplG,QAAQ2M,KAAKjV,MAAM,WAElB,MAAhBA,KAAKmwG,SAERnwG,KAAKmwG,QAAQn2D,WAAU,MAIzBh6C,KAAKyb,OAAOxK,MAAMjH,YAAYC,QAAQijC,aAAcltC,KAAK0tG,cACzD1tG,KAAKyb,OAAOzR,YAAYC,QAAQgjC,OAAQjtC,KAAK0tG,gBAiB/CiC,iBAAiBvjG,UAAUqsC,QAAU,SAASpxC,EAAOuqB,EAAMlW,EAAQyyH,GAElE,IAAI95C,EAAe/rF,QAAQ2M,KAAKjV,MAAM,WAEvB,MAAV0b,GAAkBA,EAAOvZ,OAAS,GAErCnC,KAAKyb,OAAOG,QAAQF,MAItB,OAAO1b,KAAKmwG,QAAQ13D,QAAQpxC,EAAOuqB,EAAMyiE,EAAc85C,IAaxDx+B,iBAAiBvjG,UAAU8tC,aAAe,SAAStoB,GAElDA,EAAOA,GAAQ1xB,SAAS0F,cAAgB,iBACxC5F,KAAKmwG,QAAQj2D,aAAatoB,IAS3B+9E,iBAAiBvjG,UAAUioC,SAAW,WAErC,OAAOr0C,KAAKmwG,QAAQ97D,YAarBs7D,iBAAiBvjG,UAAUgtC,eAAiB,SAAS/xC,GAEpD,OAAOrH,KAAKmwG,QAAQ/2D,eAAe/xC,IAgBpCsoG,iBAAiBvjG,UAAUgiI,gBAAkB,SAAS35F,EAAOptC,EAAOqU,GAEnE,IAAI24E,EAAe/rF,QAAQ2M,KAAKjV,MAAM,WAErCA,KAAKyb,OAAOG,QAAQF,MAGrB1b,KAAKw0C,UAAUC,EAAOptC,EAAOgtF,IAe9Bsb,iBAAiBvjG,UAAUooC,UAAY,SAASC,EAAOptC,EAAOU,GAE7D,OAAO/H,KAAKmwG,QAAQ37D,UAAUC,EAAOptC,EAAOU,IAoB7C4nG,iBAAiBvjG,UAAUwtC,QAAU,SAASvyC,EAAOuqB,EAAMy8G,EAAMF,EAAS5jI,GAEzE,IAAI8pF,EAAe/rF,QAAQ2M,KAAKjV,MAAM,WAErCA,KAAKyb,OAAO6yH,QAAQD,GAEP,MAAT9jI,GAEHA,EAAMvK,KAAKyb,WAIb,OAAOzb,KAAKmwG,QAAQ52D,cAAclyC,EAAOuqB,EAAMyiE,EAAc85C,IAwB9Dx+B,iBAAiBvjG,UAAUmiI,aAAe,SAASlnI,EAAOuqB,EAAM48G,EAAOL,EAAS1jD,EAAQ5wC,GAIvF,IAAI40F,EAAUnmI,QAAQ2M,KAAKjV,MAAM,WAEhC,MAAqB,mBAAX,EAEFwuI,IAEU,MAATA,EAEDxuI,KAAKyb,OAAOxK,MAAMq9E,UAAUkgD,GAG7B,QAKJn6C,EAAe/rF,QAAQ2M,KAAKjV,MAAM,SAASmI,EAAK6J,GAE7B,mBAAZ,EAETy4E,EAAOzqF,KAAKyb,OAAQgzH,IAAWtmI,EAAK6J,GAIpChS,KAAKi3C,KAAKw3F,IAAWtmI,EAAK6J,GAG3BhS,KAAKmwG,QAAQn2D,YACb/vC,QAAQm4B,QAAQj6B,MAGb2pB,EAAM9xB,KAAKmwG,QAAQv2D,QAAQvyC,EAAOuqB,EAAMyiE,EAAc85C,EAAS,KAAMt0F,GAWzE,OAFA75C,KAAK0uI,mBAAmB58G,GALN,SAAS7gB,EAAO9I,EAAK6J,GAEtCqiF,EAAalsF,EAAK6J,MAKZ8f,GAgBR69E,iBAAiBvjG,UAAU6qC,KAAO,SAASgzB,EAAQ9hE,EAAKsW,GAEvD,IAAIxN,EAAQjR,KAAKyb,OAAOxK,MACpBiB,EAAQjB,EAAM8c,WAElB,GAAc,MAAVtP,IACHvM,EAAMC,OAAOsM,IACZze,KAAK04H,eACLznH,EAAM84G,kBAAkBtrG,GAYzBze,KAAK8uF,QAAQ7kB,EAAQ9hE,EAAKsW,OAX3B,CACC,KAAiB,MAAVA,IACLxN,EAAMo/G,kBAAkB5xG,EAAQ,CAACwrD,GAAS9hE,IAE3CsW,EAASvM,EAAM+vC,UAAUxjC,GAG1Bze,KAAKyqF,OAAOxgB,EAAQ9hE,EAAKsW,KAoB3BkxF,iBAAiBvjG,UAAUq+E,OAAS,SAASxgB,EAAQ9hE,EAAKsW,GAEzD,IAAIxN,EAAQjR,KAAKyb,OAAOxK,MAExB,GAAIA,EAAMw7G,cAAcxiD,GACxB,CACC,IAAI76D,EAAInF,QAAQ04B,WAAWx6B,GACvBkH,EAAIpF,QAAQ44B,WAAW16B,GACvBsb,EAAKnb,QAAQqgB,aAAa1X,EAAM0W,UAAWvY,EAAGC,GAGlD,OAAI4B,EAAMy9G,kBACTz9G,EAAMq/G,cAAc7xG,EAAQ,CAACwrD,GAAS9hE,GAE/B8I,EAAM4zG,UAAUpmG,EAAQ,CAACwrD,GAAS,KAAMxmD,EAAGrU,EAAGqU,EAAGpU,GAIjDrP,KAAKyb,OAAOkzH,UAAUlwH,EAAQwrD,EAAQxmD,EAAGrU,EAAGqU,EAAGpU,GAIxD,OAAO,MAYRsgG,iBAAiBvjG,UAAU0iF,QAAU,SAAS7kB,EAAQ9hE,EAAK2b,GAE1D,IAAI7S,EAAQjR,KAAKyb,OAAOxK,MACpBiB,EAAQjB,EAAM8c,WAElB,GAAc,MAAVjK,GACH7S,EAAM84G,kBAAkB9/C,IACxBh5D,EAAMm5G,YAAY,KAAMtmG,EAAQmmD,GACjC,CACC,IAAIpmD,EAAO,KAEX3R,EAAMuZ,cACN,IAEC,IAAIy2B,EAAMhwC,EAAMk5D,YAAYtnD,GACxB2oC,EAAIv6C,EAAMk5D,YAAYnB,GAAQx6D,QAIlCg9C,EAAEr9C,EAAI8yC,EAAI9yC,GAAK8yC,EAAIj6C,MAAQwkD,EAAExkD,OAAS,EACtCwkD,EAAEp9C,EAAI6yC,EAAI7yC,GAAK6yC,EAAIr6C,OAAS4kD,EAAE5kD,QAAU,EAExC,IAAIuJ,EAAOpR,KAAKg4D,QAAU/mD,EAAMknC,SAC5B7yB,EAAkD,GAA3CpT,EAAMw6E,qBAAqB5oE,GAAQ,GAE1C9jB,KAAKyb,OAAOmzH,eAEfniF,EAAEr9C,IAAMq9C,EAAExkD,MAAQi6C,EAAIj6C,OAAS,EAAImJ,EAAOkU,EAI1CmnC,EAAEp9C,IAAMo9C,EAAE5kD,OAASq6C,EAAIr6C,QAAU,EAAIuJ,EAAOkU,EAG7C2kD,EAAOwB,YAAYhf,GAInB,IAAI91C,EAASzE,EAAM+vC,UAAUn+B,GAQ7B,GAPA7S,EAAM2nF,QAAQ3uB,EAAQtzD,GACtB1F,EAAMozG,eAAep6C,GAIrBpmD,EAAO7jB,KAAKyb,OAAOgoG,WAAW3/F,EAAQmmD,GAEP,MAA3B/3D,EAAMk5D,YAAYvnD,GACtB,CACC,IAAIgrH,EAAe,IAAIvjE,WACvBujE,EAAazsF,UAAW,EAExBlwC,EAAMu5D,YAAY5nD,EAAMgrH,GAGzB59H,EAAMyyG,QAAQ7/F,EAAMlN,EAAQmN,EAAQmmD,GAErC,QAEC/3D,EAAM0Z,YAGP3a,EAAMq+B,kBAAkB,CAAC26B,EAAQpmD,IACjC5S,EAAMu4G,oBAAoBv/C,KAe5B0lC,iBAAiBvjG,UAAUsiI,mBAAqB,SAAU58G,EAAK0e,GAE9D,IAAIs+F,EAASjuI,SAASG,cAAc,OACpC8tI,EAAOzqI,aAAa,MAAOytB,EAAInc,aAAa,QAG5C,IAAIo5H,EAASzmI,QAAQ2M,KAAKjV,MAAM,SAASmI,GAOxC2mI,EAAOpnI,MAAMO,MAAS,EAAI6pB,EAAInV,YAAe,KAC7CmyH,EAAOpnI,MAAMG,OAAU,EAAIiqB,EAAI/nB,aAAgB,KAE/CzB,QAAQypB,cAAcD,EAAK9xB,KAAKyb,OAAOxK,MAAOu/B,EAC7Cs+F,GACD7kI,QAAQs5B,eAAeurG,EAAQ,OAAQC,MAGpC7uI,SAASE,MAEZ2uI,IAIA9kI,QAAQD,YAAY8kI,EAAQ,OAAQC,IAYtCp/B,iBAAiBvjG,UAAU6iB,QAAU,WAEX,MAArBjvB,KAAK0tG,eAER1tG,KAAKyb,OAAOxK,MAAMsyB,eAAe,WAAYvjC,KAAK0tG,cAClD1tG,KAAKyb,OAAO8nB,eAAe,SAAUvjC,KAAK0tG,cAC1C1tG,KAAK0tG,aAAe,MAGD,MAAhB1tG,KAAKmwG,UAERnwG,KAAKmwG,QAAQlhF,UACbjvB,KAAKmwG,QAAU,OAIjBlwG,WAAW0vG,sBAA+C,IAArBA,iBAAmCA,sBAAmB/oG,EA+YvFxB,gBAEHN,YAAYC,IAAI7E,SAASwF,SAAW,qBAIpCxF,SAAS4D,eAAe8I,KAAK1M,SAASwF,SAAW,qBAMlDkqG,SAASxjG,UAAY,IAAIw1B,cACzBguE,SAASxjG,UAAUH,YAAc2jG,SAajCA,SAASxjG,UAAU4iI,gBAAwC,QAArB9uI,SAAS4F,SAAsB,UAAY,GASjF8pG,SAASxjG,UAAU6iI,kBAA0C,QAArB/uI,SAAS4F,SAAsB,YAAc,GASrF8pG,SAASxjG,UAAU8iI,oBAA4C,QAArBhvI,SAAS4F,SAAsB,cAAgB,GASzF8pG,SAASxjG,UAAU+iI,mBAA2C,QAArBjvI,SAAS4F,SAAsB,aAAe,GASvF8pG,SAASxjG,UAAUgjI,cAAsC,QAArBlvI,SAAS4F,SAAsB,QAAU,GAS7E8pG,SAASxjG,UAAUijI,aAAqC,QAArBnvI,SAAS4F,SAAsB,OAAS,GAS3E8pG,SAASxjG,UAAUkjI,gBAAwC,QAArBpvI,SAAS4F,SAAsB,UAAY,GAQjF8pG,SAASxjG,UAAUsnD,QAAU,KAQ7Bk8C,SAASxjG,UAAU6E,MAAQ,KAS3B2+F,SAASxjG,UAAU+nH,gBAAkB,KAQrCvkB,SAASxjG,UAAU+jG,QAAU,KAQ7BP,SAASxjG,UAAUiS,OAAS,KAQ5BuxF,SAASxjG,UAAU4jG,aAAe,KAOlCJ,SAASxjG,UAAU6jG,YAAc,KAQjCL,SAASxjG,UAAU4/F,WAAa,KAehC4D,SAASxjG,UAAUyjG,QAAU,KAwB7BD,SAASxjG,UAAUmjI,eAAiB,OAUpC3/B,SAASxjG,UAAUojI,kBAAmB,EAQtC5/B,SAASxjG,UAAUu5B,oBAAqB,EAaxCiqE,SAASxjG,UAAU8hI,eAAiB,KAUpCt+B,SAASxjG,UAAUqjI,iBAAkB,EASrC7/B,SAASxjG,UAAUsjI,UAAY,KAQ/B9/B,SAASxjG,UAAUujI,YAAc,KAQjC//B,SAASxjG,UAAUwjI,iBAAmB,KAQtChgC,SAASxjG,UAAUyjI,aAAe,KASlCjgC,SAASxjG,UAAU0jI,gBAAkB,KAYrClgC,SAASxjG,UAAU2jI,SAAW,KAO9BngC,SAASxjG,UAAU+M,SAAW,QAQ9By2F,SAASxjG,UAAU4jI,kBAAoB,MAQvCpgC,SAASxjG,UAAU6jI,gBAAiB,EAQpCrgC,SAASxjG,UAAU8jI,QAAU,KAQ7BtgC,SAASxjG,UAAU+jI,SAAW,KAc9BvgC,SAASxjG,UAAUwiI,gBAAiB,EAgBpCh/B,SAASxjG,UAAUgkI,eAAgB,EASnCxgC,SAASxjG,UAAUikI,gBAAkB,EAcrCzgC,SAASxjG,UAAUkkI,mBAAoB,EAUvC1gC,SAASxjG,UAAUmkI,iBAAkB,EAarC3gC,SAASxjG,UAAU2jG,qBAAuB,KAU1CH,SAASxjG,UAAUokI,oBAAsB,EAQzC5gC,SAASxjG,UAAUkkG,mBAAqB,YAWxCV,SAASxjG,UAAUqkI,MAAQ,KAO3B7gC,SAASxjG,UAAUskI,iBAAmB,KAQtC9gC,SAASxjG,UAAUukI,SAAW,GAO9B/gC,SAASxjG,UAAUwkI,KAAO,KAO1BhhC,SAASxjG,UAAUykI,gBAAkB,KAUrCjhC,SAASxjG,UAAU0kI,QAAU,KAQ7BlhC,SAASxjG,UAAU2kI,UAAY,IAQ/BnhC,SAASxjG,UAAU4kI,WAAa,IAQhCphC,SAASxjG,UAAU6kI,gBAAkB,IASrCrhC,SAASxjG,UAAU8kI,iBAAmB,KAUtCthC,SAASxjG,UAAU+kI,sBAAuB,EAQ1CvhC,SAASxjG,UAAUglI,YAAa,EAOhCxhC,SAASxjG,UAAU4sF,UAAW,EAO9B4W,SAASxjG,UAAUilI,WAAa,WAE/B,OAAOrxI,KAAKg5F,UAQb4W,SAASxjG,UAAUklI,YAAc,SAAUvpI,GAE1C/H,KAAKg5F,SAAWjxF,GA8DjB6nG,SAASxjG,UAAU0jG,WAAa,WAE/B9vG,KAAK+tI,UAAU,QAAQ,SAAStyH,GAE/BA,EAAO2lC,UAGRphD,KAAK+tI,UAAU,SAAS,SAAStyH,GAElB,IAAIq2E,eAAer2E,EAAOxK,MAAO,GACvCwf,UAGTzwB,KAAK+tI,UAAU,QAAQ,SAAStyH,GAE/BnT,QAAQoC,KAAK+Q,EAAOxK,MAAO,KAAM,GAAI,OAGtCjR,KAAK+tI,UAAU,eAAe,SAAStyH,GAEtC,IAAI2B,EAAM3B,EAAO81H,cAEjB,GAAW,MAAPn0H,GAAeld,SAASyD,SAE3B8X,EAAOG,QAAQ,YAGhB,CACC,IAAI1W,EAAOoD,QAAQwlB,WAAWrS,EAAOxK,MAAO,GACxC6G,EAAMxP,QAAQ4Q,OAAOhU,EAAM,MAE/BoD,QAAQkW,OAAOpB,EAAK3B,EAAOu0H,kBAAoB,IAC9CruB,mBAAmB7pG,GAAMjX,SAAU,cAItCb,KAAK+tI,UAAU,WAAW,SAAStyH,GAElCA,EAAOxK,MAAMq8F,aAGdttG,KAAK+tI,UAAU,OAAO,SAAStyH,GAE1BA,EAAOxK,MAAM0C,aAEhB06B,YAAYM,IAAIlzB,EAAOxK,UAIzBjR,KAAK+tI,UAAU,QAAQ,SAAStyH,GAE3BA,EAAOxK,MAAM0C,aAEhB06B,YAAY5lC,KAAKgT,EAAOxK,UAI1BjR,KAAK+tI,UAAU,SAAS,SAAStyH,GAE5BA,EAAOxK,MAAM0C,aAEhB06B,YAAYY,MAAMxzB,EAAOxK,UAI3BjR,KAAK+tI,UAAU,UAAU,SAAStyH,GAE7BA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAM29B,iBAIf5uC,KAAK+tI,UAAU,SAAS,SAAStyH,GAE5BA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMwsG,iBAAiBhiG,EAAOinG,iBAIvC1iH,KAAK+tI,UAAU,WAAW,SAAStyH,GAE9BA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMq+B,kBAAkB7zB,EAAOxK,MAAM6xG,mBAI9C9iH,KAAK+tI,UAAU,oBAAoB,SAAStyH,GAEvCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMiyG,2BAIfljH,KAAK+tI,UAAU,QAAQ,SAAStyH,GAE3BA,EAAOxK,MAAM0C,aAEhB8H,EAAOk/B,UAIT36C,KAAK+tI,UAAU,QAAQ,SAAStyH,GAE3BA,EAAOxK,MAAM0C,aAEhB8H,EAAOm/B,UAIT56C,KAAK+tI,UAAU,UAAU,SAAStyH,GAEjCA,EAAOxK,MAAMq3G,YAGdtoH,KAAK+tI,UAAU,WAAW,SAAStyH,GAElCA,EAAOxK,MAAMs3G,aAGdvoH,KAAK+tI,UAAU,cAAc,SAAStyH,GAErCA,EAAOxK,MAAMu3G,gBAGdxoH,KAAK+tI,UAAU,OAAO,SAAStyH,GAE9BA,EAAOxK,MAAMsL,SAGdvc,KAAK+tI,UAAU,kBAAkB,SAAStyH,EAAQzJ,GAEjDyJ,EAAO+1H,eAAex/H,MAGvBhS,KAAK+tI,UAAU,aAAa,SAAStyH,GAEhCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAM6gH,eAIf9xH,KAAK+tI,UAAU,cAAc,SAAStyH,GAEjCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMgH,oBAIfjY,KAAK+tI,UAAU,kBAAkB,SAAStyH,GAErCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAM+gH,oBAIfhyH,KAAK+tI,UAAU,eAAe,SAAStyH,GAElCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMkhH,iBAIfnyH,KAAK+tI,UAAU,QAAQ,SAAStyH,EAAQzJ,GAEnCyJ,EAAOxK,MAAM0C,aAChB8H,EAAOxK,MAAM2sG,eAAe5rG,IAE5ByJ,EAAOxK,MAAMysG,mBAAmB1rG,MAIlChS,KAAK+tI,UAAU,UAAU,SAAStyH,EAAQzJ,GAErCyJ,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMsxG,YAAW,MAI1BviH,KAAK+tI,UAAU,WAAW,SAAStyH,EAAQzJ,GAEtCyJ,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMsxG,YAAW,MAI1BviH,KAAK+tI,UAAU,cAAc,SAAStyH,EAAQzJ,GAE7CyJ,EAAOxK,MAAM22G,WAAW51G,MAGzBhS,KAAK+tI,UAAU,aAAa,SAAStyH,GAEpCA,EAAOxK,MAAM62G,eAGd9nH,KAAK+tI,UAAU,QAAQ,SAAStyH,GAE/BA,EAAOxK,MAAMgsG,UAGdj9G,KAAK+tI,UAAU,kBAAkB,SAAStyH,GAErCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMsgH,wBAIfvxH,KAAK+tI,UAAU,cAAc,SAAStyH,GAEjCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMogH,oBAIfrxH,KAAK+tI,UAAU,gBAAgB,SAAStyH,GAEnCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMugH,sBAIfxxH,KAAK+tI,UAAU,eAAe,SAAStyH,GAElCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMwgH,qBAIfzxH,KAAK+tI,UAAU,YAAY,SAAStyH,GAE/BA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMmuF,WAAU,MAIzBp/F,KAAK+tI,UAAU,eAAe,SAAStyH,GAEtC,GAAIA,EAAOxK,MAAM0C,YACjB,CACC,IAAIwW,EAAQ1O,EAAOxK,MAAMkuD,mBACzB1jD,EAAOxK,MAAMmuF,WAAU,GAAM,EAAOj1E,OAItCnqB,KAAK+tI,UAAU,UAAU,SAAStyH,GAE7BA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMmuF,WAAU,MAIzBp/F,KAAK+tI,UAAU,aAAa,SAAStyH,GAEpC,GAAIA,EAAOxK,MAAM0C,YACjB,CACC,IAAIwW,EAAQ1O,EAAOxK,MAAMkuD,mBACzB1jD,EAAOxK,MAAMmuF,WAAU,GAAO,EAAOj1E,OAIvCnqB,KAAK+tI,UAAU,QAAQ,SAAStyH,GAE3BA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAM+wG,qBACZr0G,YAAYwvB,gBACZxvB,YAAYyf,cAIfptB,KAAK+tI,UAAU,UAAU,SAAStyH,GAE7BA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAM+wG,qBACZr0G,YAAYwvB,gBACZxvB,YAAY2f,gBAIfttB,KAAK+tI,UAAU,aAAa,SAAStyH,GAEhCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAM+wG,qBACZr0G,YAAYwvB,gBACZxvB,YAAY6f,mBAIfxtB,KAAK+tI,UAAU,kBAAkB,SAAStyH,GAErCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMgxG,WAAWt0G,YAAY2e,eAItCtsB,KAAK+tI,UAAU,oBAAoB,SAAStyH,GAEvCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMgxG,WAAWt0G,YAAYwyB,iBAItCngC,KAAK+tI,UAAU,mBAAmB,SAAStyH,GAEtCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMgxG,WAAWt0G,YAAY4e,gBAItCvsB,KAAK+tI,UAAU,iBAAiB,SAAStyH,GAEpCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMgxG,WAAWt0G,YAAY6e,cAItCxsB,KAAK+tI,UAAU,oBAAoB,SAAStyH,GAEvCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMgxG,WAAWt0G,YAAYyyB,iBAItCpgC,KAAK+tI,UAAU,oBAAoB,SAAStyH,GAEvCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMgxG,WAAWt0G,YAAY8e,iBAItCzsB,KAAK+tI,UAAU,iBAAiB,SAAStyH,GAGxCA,EAAOxK,MAAMua,cACZ7d,YAAYgsB,YACZhsB,YAAY2e,eAGdtsB,KAAK+tI,UAAU,mBAAmB,SAAStyH,GAEtCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMua,cACZ7d,YAAYgsB,YACZhsB,YAAYwyB,iBAIfngC,KAAK+tI,UAAU,kBAAkB,SAAStyH,GAErCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMua,cACZ7d,YAAYgsB,YACZhsB,YAAY4e,gBAIfvsB,KAAK+tI,UAAU,gBAAgB,SAAStyH,GAEnCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMua,cACZ7d,YAAYisB,qBACZjsB,YAAY6e,cAIfxsB,KAAK+tI,UAAU,mBAAmB,SAAStyH,GAEtCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMua,cACZ7d,YAAYisB,qBACZjsB,YAAYyyB,iBAIfpgC,KAAK+tI,UAAU,mBAAmB,SAAStyH,GAEtCA,EAAOxK,MAAM0C,aAEhB8H,EAAOxK,MAAMua,cACZ7d,YAAYisB,qBACZjsB,YAAY8e,iBAIfzsB,KAAK+tI,UAAU,QAAQ,SAAStyH,GAE/B,IAAI4J,EAAuC,IAA7B5J,EAAOxK,MAAMa,UAAUQ,MACjCA,EAAQqC,WAAWrM,QAAQmpB,OAC9B3sB,YAAY+G,IAAI4P,EAAOuzH,kBACvBvzH,EAAOuzH,gBACP3pH,IAAU,IAENzQ,MAAMtC,IAEVmJ,EAAOxK,MAAMa,UAAUg5F,SAASx4F,MAIlCtS,KAAK+tI,UAAU,eAAe,SAAStyH,GAElB,MAAhBA,EAAOg1H,MAEVh1H,EAAOg1H,MAAM9lI,YAAY8Q,EAAOg1H,MAAMhmI,aAItCgR,EAAOg2H,eAITzxI,KAAK+tI,UAAU,cAAc,SAAStyH,GAElB,MAAfA,EAAOm1H,KAEVn1H,EAAOm1H,KAAKjmI,YAAY8Q,EAAOm1H,KAAKnmI,aAIpCgR,EAAOi2H,cAIT1xI,KAAK+tI,UAAU,iBAAiB,SAAStyH,GAElB,MAAlBA,EAAOi4C,QAEVj4C,EAAOk2H,cAIPl2H,EAAOi4C,QAAQ/oD,YAAY8Q,EAAOi4C,QAAQjpD,gBAI5CzK,KAAK+tI,UAAU,iBAAiB,SAAStyH,GAExC5U,MAAM8D,YAAY9D,MAAM4D,iBAmB1BmlG,SAASxjG,UAAUikG,UAAY,SAAUnrG,GAE5B,MAARA,IAIO,IAAI6pB,QAAQ7pB,EAAK8V,eACvB42H,OAAO1sI,EAAMlF,MAIjBA,KAAK6xI,iBAUPjiC,SAASxjG,UAAU0lI,eAAiB,WAEnCjxI,SAASkxI,OACR,+DAQFniC,SAASxjG,UAAUylI,aAAe,WAEjC7xI,KAAKmhD,cAAe,IAAIp2C,MAAOC,UAC/BhL,KAAKiwG,YAAY/jG,QACjBlM,KAAKkhD,eAAiB,EACtBlhD,KAAKsxI,aAAY,IAyBlB1hC,SAASxjG,UAAU2hI,UAAY,SAAUiE,EAAYznI,GAEpDvK,KAAK6vG,QAAQmiC,GAAcznI,GAmB5BqlG,SAASxjG,UAAUwP,QAAU,SAAUo2H,EAAYhgI,EAAM7J,GAExD,IAAIuT,EAAS1b,KAAK6vG,QAAQmiC,GAE1B,GAAc,MAAVt2H,EAEH,IAIC,IAAI+nB,EAAOp4B,UACXo4B,EAAK,GAAKzjC,KAGV0b,EAAOtQ,MAAMpL,KAAMyjC,GAEpB,MAAOr1B,GAKN,MAHA9F,QAAQqpB,MAAM,kBAAoBqgH,EACjC,KAAO5jI,EAAEkH,QAAS,KAAK,GAElBlH,OAKP9F,QAAQqpB,MAAM,sBAAsBqgH,EAAY,KAAK,IASvDpiC,SAASxjG,UAAU6lI,YAAc,SAAUlyI,EAAMmyI,GAEhDlyI,KAAK0vI,UAAU3vI,GAAQmyI,GAQxBtiC,SAASxjG,UAAU+lI,YAAc,SAAUpyI,GAE1C,OAAOC,KAAK0vI,UAAU3vI,IASvB6vG,SAASxjG,UAAU8jG,YAAc,WAEhC,IAAIj/F,EAAQ,IAAI82F,QAAQ,KAAM,KAAM/nG,KAAKm0H,iBA6CzC,OA1CAljH,EAAMu+G,aAAY,GAClBv+G,EAAMw+G,YAAW,GAKjBzvH,KAAKoyI,uBAAuBnhI,GAG5BjR,KAAKqyI,mBAAmBphI,GAGxBjR,KAAKsyI,oBAAoBrhI,GAGzBjR,KAAKuyI,qBAAqBthI,GAK1BjR,KAAKwyI,qBAAqBvhI,GAI1BA,EAAM+kG,iBAAiBr9D,cACtBrwC,QAAQ2M,KAAKjV,MAAM,SAAS+4C,EAAM/mC,EAAM7J,GAEvC,OAAOnI,KAAKyyI,gBAAgB15F,EAAM/mC,EAAM7J,MAK1C8I,EAAM+qG,kBAAkBrjE,cACvBrwC,QAAQ2M,KAAKjV,MAAM,SAAS8jB,EAAQrF,GAEnC,OAAOze,KAAKyjH,WAAW3/F,EAAQrF,MAIjCze,KAAK0yI,sBAAsBzhI,GAC3BjR,KAAK2yI,oBAAoB1hI,GAElBA,GAQR2+F,SAASxjG,UAAUsmI,sBAAwB,SAAUzhI,GAEpD,IAAI2hI,EAAc,IAAIhpC,kBAAkB34F,GAAO,GAY/C,OAVA2hI,EAAY3pE,aAAe3gE,QAAQ2M,KAAKjV,MAAM,WAE7C,OAAOA,KAAK4uI,kBAGbgE,EAAYj/H,UAAYrL,QAAQ2M,KAAKjV,MAAM,WAE1C,OAAOA,KAAKswI,qBAGNsC,GASRhjC,SAASxjG,UAAUumI,oBAAsB,SAAU1hI,GAElD,IAAI4hI,EAAY,IAAIvpC,gBAAgBr4F,GAEhC05F,EAAO3qG,KAyCX,OAxCA6yI,EAAUlc,UAAY,SAAS3kH,GAE9B,IAAI0sD,EAAS,KACTxsD,EAAQy4F,EAAK15F,MAAM8c,WAkCvB,OAhC6B,MAAzB7b,EAAM+vC,UAAUjwC,KAKf24F,EAAK4lC,iBACRt/H,EAAMu8D,WAAWx7D,IAEU,MAAvB24F,EAAKmoC,iBAERnoC,EAAKmoC,eAAiBnoC,EAAKooC,wBAG5Br0E,EAASisC,EAAKmoC,gBAMNnoC,EAAKylC,gBACZn/H,EAAM42G,YAAY71G,IACuB,MAA1CE,EAAM+vC,UAAU/vC,EAAM+vC,UAAUjwC,OAEN,MAAtB24F,EAAKqoC,gBAERroC,EAAKqoC,cAAgBroC,EAAKsoC,uBAG3Bv0E,EAASisC,EAAKqoC,gBAITt0E,GAGDm0E,GAQRjjC,SAASxjG,UAAU8mI,kBAAoB,SAAUvrH,GAEpB,MAAxB3nB,KAAKiR,MAAM0W,YAId3nB,KAAKiR,MAAM9J,KAAKwgB,GAIhB3nB,KAAKmzI,WAAa,IAAIvlC,aAAa5tG,KAAKiR,OAGpCjR,KAAK2lC,oBAER17B,QAAQ07B,mBAAmBhe,GAIxBznB,SAASU,WAEZ,IAAIwvC,aAAazoB,KAWpBioF,SAASxjG,UAAUgmI,uBAAyB,SAAUnhI,GAGrDA,EAAMjH,YAAYC,QAAQijC,aACzB5kC,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAEnC,IAAI6J,EAAO7J,EAAI+5B,YAAY,QAEf,MAARlwB,GACHf,EAAM0C,aACiB,MAAvB3T,KAAKuvI,iBAELvvI,KAAK4b,QAAQ5b,KAAKuvI,eAAgBv9H,GAClC7J,EAAIi6B,gBAWRwtE,SAASxjG,UAAUimI,mBAAqB,SAAUphI,GAEjD,IAAIwhH,EAAWnqH,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAElD,IAAI6yC,EAAO7yC,EAAI+5B,YAAY,QAC3BliC,KAAKiwG,YAAY/0D,qBAAqBF,MAGvC/pC,EAAM8c,WAAW/jB,YAAYC,QAAQqgC,KAAMmoF,GAC3CxhH,EAAMa,UAAU9H,YAAYC,QAAQqgC,KAAMmoF,GAG1C,IAAIlpB,EAAc,SAASz/F,EAAQ3B,GAElC,IAAI+I,EAAU/I,EAAI+5B,YAAY,QAAQhxB,QACtCD,EAAMq+B,kBAAkBr+B,EAAMurG,4BAA4BtrG,KAG3DlR,KAAKiwG,YAAYjmG,YAAYC,QAAQqgC,KAAMi/D,GAC3CvpG,KAAKiwG,YAAYjmG,YAAYC,QAAQsgC,KAAMg/D,IAQ5CqG,SAASxjG,UAAUkmI,oBAAsB,SAAUrhI,GAElD,IAAIwhH,EAAWnqH,QAAQ2M,KAAKjV,MAAM,SAAS8J,GAE1C9J,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQs/B,UAG1Ct4B,EAAMa,UAAU9H,YAAYC,QAAQ+gC,KAAMynF,GAC1CxhH,EAAMa,UAAU9H,YAAYC,QAAQ8gC,GAAI0nF,IAUzC7iB,SAASxjG,UAAUmmI,qBAAuB,SAAUthI,GAEnD,IAAIwhH,EAAWnqH,QAAQ2M,KAAKjV,MAAM,SAAS8J,EAAQ3B,GAGlDnI,KAAKsxI,aAAY,GAIM,GAAnBtxI,KAAKoxI,YAERngI,EAAMw5G,gBAMP,IAFA,IAAIv5G,EAAU/I,EAAI+5B,YAAY,QAAQhxB,QAE7BrM,EAAI,EAAGA,EAAIqM,EAAQ/O,OAAQ0C,IACpC,CACC,IAAI0M,EAASL,EAAQrM,GAErB,GAAI0M,aAAkBg1E,cACpBh1E,aAAkBG,eACnBH,EAAOS,MAAQhS,KAAKiR,MAAMiB,MAAM4rC,MAC/BvsC,aAAkBq1E,uBACnBr1E,EAAOS,MAAQhS,KAAKiR,MAAMiB,MAAM4rC,KACjC,CACC99C,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQs/B,OACzC,WAKHt4B,EAAM8c,WAAW/jB,YAAYC,QAAQugC,OAAQioF,IAS9C7iB,SAASxjG,UAAUomI,qBAAuB,SAAUvhI,GAEnD,IAAI05F,EAAO3qG,KACPozI,EACJ,CACC3iG,UAAW,SAAS3mC,EAAQ8mC,GAEA,MAAvB+5D,EAAKujC,gBACPt9F,EAAG3N,mBACH0nE,EAAK8kC,iBACW,MAAjB7+F,EAAG7+B,aAEH44F,EAAK15F,MAAMgH,iBACX0yF,EAAKujC,eAAet9F,EAAGrO,WAAYqO,EAAG5N,WAItChjC,KAAKg2C,UAAW,EAChBpF,EAAGxO,YAILoU,UAAW,SAAS1sC,EAAQ8mC,GAEvB5wC,KAAKg2C,UAERpF,EAAGxO,WAILsU,QAAS,SAAS5sC,EAAQ8mC,GAErB5wC,KAAKg2C,WAERh2C,KAAKg2C,UAAW,EAChBpF,EAAGxO,aAKNnxB,EAAMgrC,iBAAiBm3F,IASxBxjC,SAASxjG,UAAU6mI,oBAAsB,WAExC,IAAII,EAAKrzI,KAAKiR,MAAMknC,SAChBumB,EAAS,IAAIpB,cAAct9D,KAAKiR,OAAQjR,KAAK4uI,eAC/C5uI,KAAKqwI,gBAAiB,EAAEgD,EAAI,EAAEA,GAQhC,OALA30E,EAAOmM,gBAAkB,SAAS74D,GAEjC,OAAQ0sD,EAAOztD,MAAMu8D,WAAWx7D,IAG1B0sD,GASRkxC,SAASxjG,UAAU2mI,qBAAuB,WAEzC,OAAO,IAAIv1E,oBAAoBx9D,KAAKiR,MAAOjR,KAAK4uI,iBAQjDh/B,SAASxjG,UAAUgkG,cAAgB,WAElC,OAAO,IAAIT,iBAAiB,KAAM3vG,OAQnC4vG,SAASxjG,UAAUknI,oBAAsB,SAAU3rH,GAElD3nB,KAAKmwG,QAAQhpG,KAAKwgB,GAGdznB,SAASU,WAEZ,IAAIwvC,aAAazoB,IAiBnBioF,SAASxjG,UAAUmnI,mBAAqB,SAAU5rH,GAE9B,MAAf3nB,KAAKqe,SAERre,KAAKqe,OAASsJ,EAId3nB,KAAKgK,YAAYC,QAAQy/B,KAAMphC,QAAQ2M,KAAKjV,MAAM,WAEjD,IAAIwzI,GAAS,IAAIzoI,MAAO0oI,iBACxBzzI,KAAK0zI,WAAW5uI,YAAY+G,IAAI7L,KAAKivI,oBACpCjvI,KAAKivI,mBAAmB,KAAKuE,OAK/BxzI,KAAKgK,YAAYC,QAAQw/B,KAAMnhC,QAAQ2M,KAAKjV,MAAM,WAEjDA,KAAK0zI,WAAW5uI,YAAY+G,IAAI7L,KAAKkvI,sBACpClvI,KAAKkvI,qBAAqB,KAAKlvI,KAAK+vI,cAIlC7vI,SAASU,WAEZ,IAAIwvC,aAAazoB,KAepBioF,SAASxjG,UAAUsnI,UAAY,SAAUp+H,GAErB,MAAftV,KAAKqe,QAA6B,MAAX/I,IAE1BtV,KAAKqe,OAAO/D,UAAYhF,IAc1Bs6F,SAASxjG,UAAUunI,kBAAoB,SAAUhsH,GAEhD3nB,KAAKgK,YAAYC,QAAQs/B,KAAMjhC,QAAQ2M,KAAKjV,MAAM,SAAS8J,GAE1D6d,EAAUrN,UAAYta,KAAK4zI,eAIxB1zI,SAASU,WAEZ,IAAIwvC,aAAazoB,IAiBnBioF,SAASxjG,UAAUynI,WAAa,SAAU7hI,EAAMo/C,GAEnC,MAARp/C,GAEU,IAAIwrD,oBAAoBx9D,KAAKiR,MAAOmgD,GAC1Cx1C,QAAQ5J,IAUjB49F,SAASxjG,UAAUwnI,SAAW,WAM7B,IAJA,IAAIvsI,EAAQ,GACR4J,EAAQjR,KAAKiR,MACbe,EAAOf,EAAM02G,iBAEF,MAAR31G,GAEiC,MADpCf,EAAM8c,WAAWk0B,UAClBhxC,EAAM8c,WAAWk0B,UAAUjwC,KAGzBf,EAAM42G,YAAY71G,KAErB3K,EAAQ,MACR4J,EAAM4sG,qBAAqB7rG,GAAQ3K,GAGpC2K,EAAOf,EAAM8c,WAAWk0B,UAAUjwC,GAKnC,OAFahS,KAAK8zI,eAEFzsI,GASjBuoG,SAASxjG,UAAU0nI,aAAe,WAEjC,IAAIh2F,EAAO99C,KAAKiR,MAAM8c,WAAWC,UACjC,OAAOhuB,KAAKiR,MAAM4sG,qBAAqB//D,IAQxC8xD,SAASxjG,UAAUuuC,KAAO,WAEzB36C,KAAKiwG,YAAYt1D,QAQlBi1D,SAASxjG,UAAUwuC,KAAO,WAEzB56C,KAAKiwG,YAAYr1D,QAUlBg1D,SAASxjG,UAAUs2G,WAAa,WAE/B,IAAIrzF,EAAkC,MAAxBrvB,KAAK8vI,gBAClB9vI,KAAK8vI,gBACL9vI,KAAKiR,MAAMknC,SACZ,OAAOn4C,KAAKiR,MAAMyxG,WAAW1iH,KAAK+zI,cAAe1kH,IASlDugF,SAASxjG,UAAU2nI,YAAc,WAIhC,OAFY/zI,KAAKiR,MAAM8c,WAEVugE,UAAUtuF,KAAK6vI,eA0B7BjgC,SAASxjG,UAAUqkB,KAAO,SAAUs/G,GAEnC,GAAgB,MAAZA,EACJ,CACC,IAAIj4H,EAAMxP,QAAQ4F,KAAK6hI,GAAU72H,SACjClZ,KAAKg0I,eAAel8H,EAAItU,iBACxBxD,KAAK+vI,SAAWA,EAEhB/vI,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQw/B,KAAM,WAAYsmG,MAU7DngC,SAASxjG,UAAU4nI,eAAiB,SAAU9uI,GAEnC,IAAI6pB,QAAQ7pB,EAAK8V,eACvB42H,OAAO1sI,EAAMlF,KAAKiR,MAAM8c,YAC5B/tB,KAAK6xI,gBAuBNjiC,SAASxjG,UAAUg1C,KAAO,SAAUhkC,EAAKjE,GAMxC,GAAW,OAHXiE,EAAMA,GAAOpd,KAAKi0I,eAGC72H,EAAIjb,OAAS,EAChC,CACC,IAAI+xI,EAAOl0I,KAAKm0I,gBAAgBh7H,GAChCnZ,KAAKo0I,YAAYh3H,EAAK82H,GAGtBl0I,KAAKsxI,aAAY,GAIlBtxI,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQy/B,KAAM,MAAOtsB,KAyBvDwyF,SAASxjG,UAAUgoI,YAAc,SAAUh3H,EAAK82H,GAE3Cl0I,KAAKiwI,iBAERiE,EAAOvyB,mBAAmBuyB,IAG3B5rI,QAAQiW,KAAKnB,EAAKpd,KAAKgwI,kBAAkB,IAAIkE,EAC5C5rI,QAAQ2M,KAAKjV,MAAM,SAAS+N,GAE3B/N,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQu/B,KACxC,UAAWz7B,EAAK,MAAOqP,EAAK,OAAQ82H,SAuBxCtkC,SAASxjG,UAAU+nI,gBAAkB,SAAUh7H,GAE9CA,EAAwB,MAAZA,EAAoBA,EAAWnZ,KAAKmZ,SAChD,IACIjU,GADM,IAAI6pB,SACCC,OAAOhvB,KAAKiR,MAAM8c,YAEjC,OAAOzlB,QAAQ4Q,OAAOhU,EAAMiU,IAU7By2F,SAASxjG,UAAU6nI,WAAa,WAE/B,OAAOj0I,KAAKkwI,SAYbtgC,SAASxjG,UAAUmlI,YAAc,WAEhC,OAAOvxI,KAAKmwI,UASbvgC,SAASxjG,UAAUioI,WAAa,SAAU/0C,EAAOg1C,GAEhD,IAAI5sI,EAAQ1H,KAAKiR,MAAMsrG,gBAAgBzrF,OAAOwjH,GAC9Ct0I,KAAKiR,MAAMa,UAAUyqG,gBAAgB5lB,aACpC29C,EAAQt0I,KAAKiR,MAAMsrG,gBAAgBzrF,OAAOwuE,IAC3Ct/F,KAAKiR,MAAMsrG,gBAAgB5lB,aAAa2I,EAAO53F,GAC/C1H,KAAKiR,MAAMq8F,WAUZsC,SAASxjG,UAAUolI,eAAiB,SAAUx/H,GAiB7C,GAVY,OALZA,EAAOA,GAAQhS,KAAKiR,MAAM0sG,qBASb,OAFZ3rG,EAAOhS,KAAKiR,MAAM02G,oBAIjB31G,EAAOhS,KAAKiR,MAAM8c,WAAWC,WAInB,MAARhc,EACJ,CAGChS,KAAKiR,MAAMgiF,aAAY,GAEvB,IAAIr2E,EAAStU,QAAQof,UAAU1nB,KAAKiR,MAAM0W,WACtCvY,EAAIwN,EAAOxN,EAAE,GACbC,EAAIuN,EAAOvN,EAGf,GAAuB,MAAnBrP,KAAKyhC,YAAuBzhC,KAAKmxI,qBASrC,CACC,IAAI1qH,EAASzmB,KAAKiR,MAAM4mF,cAAc7lF,GAExB,MAAVyU,IAEHrX,GAAKqX,EAAOrX,EAAEhG,KAAK2G,IAAI,IAAK0W,EAAOxe,OACnCoH,GAAKoX,EAAOpX,QAbbD,EAAIpP,KAAKyhC,WAAWiB,OACpBrzB,EAAIrP,KAAKyhC,WAAWmB,OAkBrB5iC,KAAKwvG,iBACL,IAAItqG,EAAOlF,KAAKu0I,iBAAiBviI,GAErB,MAAR9M,IAIHlF,KAAKyhC,WAAa,IAAIt4B,SAASrE,YAAY+G,IAAI7L,KAAKmvI,qBACnDnvI,KAAKmvI,mBAAoBjqI,EAAMkK,EAAGC,EAAGrP,KAAKixI,gBAAiBjxI,KAAKkxI,kBAAkB,GACnFlxI,KAAKyhC,WAAW92B,YAAW,MAU9BilG,SAASxjG,UAAUooI,oBAAsB,WAExC,OAA0B,MAAnBx0I,KAAKyhC,YAWbmuE,SAASxjG,UAAUmoI,iBAAmB,SAAUviI,GAE/C,IAAIE,EAAQlS,KAAKiR,MAAM8c,WACnBhmB,EAAQmK,EAAM6M,SAAS/M,GAE3B,GAAI1J,QAAQ+N,OAAOtO,GACnB,CAGC,IAAImmC,EAAO,IAAI+B,OAAO,cAGb/B,EAAK4F,QAAQ,KAAM9hC,EAAKk5E,SAC9B7mF,aAAa,WAAY,QAE5B,IAAI69C,EAAM,KACNuyF,EAAS,KACTC,EAAS,KACTC,EAAa,KACbC,EAAc,KAGd1iI,EAAM2vC,SAAS7vC,IAIP,OAFXkwC,EAAMhwC,EAAMk5D,YAAYp5D,MAIvByiI,EAASvmG,EAAK4F,QAAQ,MAAOoO,EAAI7yC,GACjCqlI,EAASxmG,EAAK4F,QAAQ,OAAQoO,EAAI9yC,GAClCulI,EAAazmG,EAAK4F,QAAQ,QAASoO,EAAIj6C,OACvC2sI,EAAc1mG,EAAK4F,QAAQ,SAAUoO,EAAIr6C,SAa3C,IARA,IAAIgJ,EAAMqB,EAAMyZ,SAAS3Z,GACrBtK,EAAQwmC,EAAK4F,QAAQ,QAASjjC,GAAO,IAIrCiJ,EAAQ/R,EAAMkP,WACd49H,EAAQ,GAEHhwI,EAAI,EAAGA,EAAIiV,EAAM3X,OAAQ0C,IAClC,CAGC,IAAIkV,EAAMD,EAAMjV,GAAGkD,MACnB8sI,EAAMhwI,GAAKqpC,EAAKiG,YAAYr6B,EAAMjV,GAAGyR,SAAUyD,EACxB,SAArBD,EAAMjV,GAAGyR,SAAuB,EAAI,GASvC,IAAIw+H,EAAaxsI,QAAQ2M,KAAKjV,MAAM,WAGnCA,KAAKwvG,iBAILt9F,EAAMuZ,cACN,IAEY,MAAPy2B,KAEHA,EAAMA,EAAIzyC,SAENL,EAAIuF,WAAW+/H,EAAO3sI,OAC1Bm6C,EAAI7yC,EAAIsF,WAAW8/H,EAAO1sI,OAC1Bm6C,EAAIj6C,MAAQ0M,WAAWggI,EAAW5sI,OAClCm6C,EAAIr6C,OAAS8M,WAAWigI,EAAY7sI,OAEpCmK,EAAMu5D,YAAYz5D,EAAMkwC,IAIrBx6C,EAAMK,MAAM5F,OAAS,EAExB+P,EAAMwZ,SAAS1Z,EAAMtK,EAAMK,OAI3BmK,EAAMwZ,SAAS1Z,EAAM,MAOtB,IAAK,IAAInN,EAAE,EAAGA,EAAEiV,EAAM3X,OAAQ0C,IAC9B,CACC,IAAIm2C,EAAO,IAAI4rC,sBACd50E,EAAM8H,EAAMjV,GAAGyR,SACfu+H,EAAMhwI,GAAGkD,OACVmK,EAAM0J,QAAQo/B,GAOXh7C,KAAKiR,MAAM8sG,eAAe/rG,IAE7BhS,KAAKiR,MAAMszG,eAAevyG,GAG5B,QAECE,EAAM0Z,gBAMJmpH,EAAiBzsI,QAAQ2M,KAAKjV,MAAM,WAGvCA,KAAKwvG,oBAKN,OAFAthE,EAAKyF,WAAWmhG,EAAYC,GAErB7mG,EAAK5mC,MAGb,OAAO,MAQRsoG,SAASxjG,UAAUojG,eAAiB,WAEZ,MAAnBxvG,KAAKyhC,aAERzhC,KAAKyhC,WAAWxS,UAChBjvB,KAAKyhC,WAAa,OA0BpBmuE,SAASxjG,UAAUqlI,UAAY,WAE9B,GAAkB,MAAdzxI,KAAKywI,MACT,CACC,IAAIxjH,EAAMpsB,SAASG,cAAc,OACjCisB,EAAIvlB,MAAMmqB,QAAU,MACpB5E,EAAIvlB,MAAMyU,YAAc,OACxB,IAAIrT,EAAIjI,SAASuG,KAAK8B,YAClBgf,EAAM,IAAI/e,SACbrE,YAAY+G,IAAI7L,KAAKovI,gBACrBpvI,KAAKovI,cACLniH,EAAKnkB,EAAI,IAAK9I,KAAK2wI,SAAU,KAC9BzoH,EAAIze,aAAY,GAChBye,EAAIxe,gBAAiB,EAKrB,IAAIa,EAAQjC,QAAQ2M,KAAKjV,MAAM,SAAS8J,GAEvCG,QAAQm7B,QAAQnY,GAChBA,EAAI3S,UAAY,GAChBta,KAAKg1I,YAAY/nH,MAGlBjtB,KAAKiR,MAAM8c,WAAW/jB,YAAYC,QAAQugC,OAAQjgC,GAClDvK,KAAKiR,MAAMs8F,oBAAoBvjG,YAAYC,QAAQugC,OAAQjgC,GAC3DvK,KAAKiR,MAAMjH,YAAYC,QAAQs/B,KAAMh/B,GAGR,MAAzBvK,KAAK0wI,kBAERxoH,EAAIkrB,SAASpzC,KAAK0wI,kBAGnB1wI,KAAKywI,MAAQvoH,EACbloB,KAAKg1I,YAAY/nH,GAGlBjtB,KAAKywI,MAAM9lI,YAAW,IAQvBilG,SAASxjG,UAAU6oI,aAAe,SAAUhoH,GAEzB,MAAdjtB,KAAKywI,QAEJxjH,EAAMjtB,KAAKywI,MAAMpoI,QACrB4B,QAAQm7B,QAAQnY,GAChBA,EAAI3S,UAAY,GAChBta,KAAKg1I,YAAY/nH,KAanB2iF,SAASxjG,UAAU4oI,YAAc,SAAU/nH,KAa3C2iF,SAASxjG,UAAUslI,SAAW,SAAUjB,GAEvC,GAAiB,MAAbzwI,KAAK4wI,KACT,CACC,IAAIsE,EAAQr0I,SAASG,cAAc,UACnCk0I,EAAM7wI,aAAa,MAAOS,YAAY+G,IAAI,YAAc7L,KAAK8wI,SAC7DoE,EAAM7wI,aAAa,SAAU,QAC7B6wI,EAAM7wI,aAAa,QAAS,QAC5B6wI,EAAM7wI,aAAa,cAAe,KAClC6wI,EAAMxtI,MAAMoxC,gBAAkB,QAE9B,IAAIhwC,EAAIjI,SAASuG,KAAK8B,YAClBL,EAAKhI,SAASuG,KAAK6B,cAAgBpI,SAAS2C,gBAAgByF,aAE5Dif,EAAM,IAAI/e,SAASrE,YAAY+G,IAAI7L,KAAKqvI,eAAiBrvI,KAAKqvI,aACjE6F,GAAQpsI,EAAE9I,KAAK+wI,WAAW,GAAIloI,EAAE7I,KAAKgxI,YAAY,EAAGhxI,KAAK+wI,UAAW/wI,KAAKgxI,YAa1E,GAZA9oH,EAAI5e,gBAAe,GACnB4e,EAAIze,aAAY,GAChBye,EAAIxe,gBAAiB,EACrBwe,EAAI1e,cAAa,GAGW,MAAxBxJ,KAAK6wI,iBAER3oH,EAAIkrB,SAASpzC,KAAK6wI,iBAIf3wI,SAASiB,MACb,CACC,IAAImuG,EAAU,SAASxlG,GAEtB,IAAIjB,EAAIqf,EAAI+E,IAAIljB,aAChBmrI,EAAM7wI,aAAa,SAAWwE,EAAE,GAAI,OAGrCqf,EAAIle,YAAYC,QAAQC,WAAYolG,GACpCpnF,EAAIle,YAAYC,QAAQE,SAAUmlG,GAClCpnF,EAAIle,YAAYC,QAAQG,UAAWklG,GACnCpnF,EAAIle,YAAYC,QAAQq+B,KAAMgnE,GAG/BtvG,KAAK4wI,KAAO1oH,EAGbloB,KAAK4wI,KAAKjmI,YAAW,IAStBilG,SAASxjG,UAAUulI,YAAc,WAIhC,GAF6B,MAAhB3xI,KAAK0zD,QAGlB,CACC,IAAIzmC,EAAMpsB,SAASG,cAAc,OAEjCisB,EAAIvlB,MAAMsN,SAAW,SACrBiY,EAAIvlB,MAAMogB,SAAW,WACrBmF,EAAIvlB,MAAMO,MAAQ,OAClBglB,EAAIvlB,MAAMG,OAAS,OACnBolB,EAAIvlB,MAAM40D,WAAa,QACvBrvC,EAAIvlB,MAAM0M,OAAS,OAEU,GAAzBvT,SAASC,eAEZmsB,EAAIvlB,MAAM6T,OAAS,wDAGpB,IAAI2M,EAAM,IAAI/e,SACbrE,YAAY+G,IAAI7L,KAAKsvI,kBACrBtvI,KAAKsvI,gBACLriH,EAAK,IAAK,IAAK,IAAK,KAAK,GAItBymC,EAAU,IAAIs1C,UAAUhpG,KAAKiR,MAAOgc,GACxC/E,EAAIze,aAAY,GAChBye,EAAI1e,cAAa,GACjB0e,EAAIxe,gBAAiB,EAErBwe,EAAIle,YAAYC,QAAQC,YAAY,WAEnCwpD,EAAQ2S,YAGTrmE,KAAK0zD,QAAUxrC,EACfloB,KAAK0zD,QAAQA,QAAUA,EAIxB1zD,KAAK0zD,QAAQ/oD,YAAW,GACxB3K,KAAK0zD,QAAQA,QAAQ2S,QAAO,IAe7BupC,SAASxjG,UAAUkiI,QAAU,SAAS6G,GAErB,UAAZA,GAEHn1I,KAAKiR,MAAMkrG,eAAeyf,yBAA0B,EACpD57H,KAAKiR,MAAMo+E,gBAAe,IAEN,WAAZ8lD,GAERn1I,KAAKiR,MAAMkrG,eAAeyf,yBAA0B,EACpD57H,KAAKiR,MAAMo+E,gBAAe,IAEN,OAAZ8lD,IAERn1I,KAAKiR,MAAMkrG,eAAeyf,yBAA0B,EACpD57H,KAAKiR,MAAMo+E,gBAAe,KAW5BugB,SAASxjG,UAAUqmI,gBAAkB,SAAU15F,EAAM/mC,EAAM7J,GAE1DnI,KAAKgwG,aAAaw9B,WAAWxtI,KAAM+4C,EAAM/mC,EAAM7J,IAWhDynG,SAASxjG,UAAUq3G,WAAa,SAAU3/F,EAAQrF,GAGjD,IAAIrQ,EAAI,KAER,GAAwB,MAApBpO,KAAK2vI,YAGRvhI,EADYpO,KAAKiR,MAAM8c,WACbugE,UAAUtuF,KAAK2vI,iBAG1B,EACCvhI,EAAI,IAAIy4E,OAAO,KACbuI,SAAQ,GAEV,IAAIltC,EAAM,IAAIopB,WACdppB,EAAIE,UAAW,EACfh0C,EAAEq9D,YAAYvpB,GAIf,IAAIx6C,EAAQ1H,KAAK2zG,eAOjB,OALa,MAATjsG,GAEH0G,EAAEsd,SAAShkB,GAGL0G,GAURwhG,SAASxjG,UAAUunG,aAAe,WAEjC,OAAO3zG,KAAK4vI,kBAUbhgC,SAASxjG,UAAUgpI,sBAAwB,SAAUpjI,GAEpD,OAAqC,MAA7BhS,KAAK+vG,sBACZ/vG,KAAK+vG,qBAAqB5tG,OAAS,GACnCnC,KAAKiR,MAAMu8D,WAAWx7D,GACtBhS,KAAK+vG,qBAAqB/vG,KAAKwwI,sBAC9BxwI,KAAK+vG,qBAAqB5tG,QAAU,MAUvCytG,SAASxjG,UAAUipI,eAAiB,SAAUrjI,GAE7C,GAA+B,MAA3BhS,KAAKswG,mBACT,CACC,IAAIvoG,EAAQ/H,KAAKo1I,sBAAsBpjI,GAE1B,MAATjK,GAEHiK,EAAK0Z,SAAS1Z,EAAK2Z,WAAW,IAC7B3rB,KAAKswG,mBAAmB,IAAIvoG,KAWhC6nG,SAASxjG,UAAUuiI,UAAY,SAAUh4H,EAAQszD,EAAQ76D,EAAGC,GAI3D,IAFA,IAAI6C,EAAQlS,KAAKiR,MAAM8c,WAEN,MAAVpX,IAAmB3W,KAAKiR,MAAMo/G,kBAAkB15G,IAEtDA,EAASzE,EAAM+vC,UAAUtrC,GAG1BA,EAAoB,MAAVA,EAAkBA,EAAS3W,KAAKiR,MAAMwtG,cAAcrvG,EAAGC,GACjE,IAAIiD,EAAQtS,KAAKiR,MAAMa,UAAUQ,MAE7B4vC,EAAMhwC,EAAMk5D,YAAYnB,GACxB5nB,EAAOnwC,EAAMk5D,YAAYz0D,GAE7B,GAAI3W,KAAKiR,MAAMu8D,WAAWvD,KACxBjqE,KAAKiR,MAAMmqG,gBAEZzkG,EAAS,SAEL,IAAc,MAAVA,GAAkB3W,KAAKwvI,iBAE/B,OAAO,KAEH,GAAc,MAAV74H,GAA0B,MAAR0rC,EAC3B,CAEC,IAAIxwC,EAAQ7R,KAAKiR,MAAMa,UAAUC,SAAS4E,GAE1C,GAAa,MAAT9E,GAKH,GAHAzC,GAAKyC,EAAM6W,OAAOtZ,EAAIkD,EACtBjD,GAAKwC,EAAM6W,OAAOrZ,EAAIiD,EAElBtS,KAAKiR,MAAMqkI,oBACf,CACC,IAAIrtI,EAAQi6C,EAAIj6C,MACZJ,EAASq6C,EAAIr6C,OACbgJ,EAAMgB,EAAMzC,EAAEyC,EAAM5J,MAEpBmH,EAAEnH,EAAQ4I,IAEbzB,GAAKA,EAAEnH,EAAQ4I,GAKZxB,EAAExH,GAFNgJ,EAAMgB,EAAMxC,EAAEwC,EAAMhK,UAInBwH,GAAKA,EAAExH,EAASgJ,SAIF,MAARwxC,IAERjzC,GAAKizC,EAAKjzC,EAAEkD,EACZjD,GAAKgzC,EAAKhzC,EAAEiD,KAId4vC,EAAMA,EAAIzyC,SACNL,EAAIpP,KAAKiR,MAAMmnC,KAAKhpC,EAAIkD,EAC3BtS,KAAKiR,MAAMa,UAAU6c,UAAUvf,EAC/BpP,KAAKiR,MAAMknC,SAAS,GACrB+J,EAAI7yC,EAAIrP,KAAKiR,MAAMmnC,KAAK/oC,EAAIiD,EAC3BtS,KAAKiR,MAAMa,UAAU6c,UAAUtf,EAC/BrP,KAAKiR,MAAMknC,SAAS,GACrB8xB,EAAOwB,YAAYvpB,GAEL,MAAVvrC,IAEHA,EAAS3W,KAAKiR,MAAMm+B,oBAGrBpvC,KAAKq1I,eAAeprE,GACpBjqE,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ0/B,kBACvC,SAAUsgC,EAAQ,SAAUtzD,IAE9BzE,EAAMuZ,cACN,IAIe,OAFdw+C,EAASjqE,KAAKiR,MAAM2nF,QAAQ3uB,EAAQtzD,MAInC3W,KAAKiR,MAAMozG,eAAep6C,GAE1BjqE,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ2/B,WAAY,SAAUqgC,KAGjE,QAEC/3D,EAAM0Z,YAUP,OAPc,MAAVq+C,IAEHjqE,KAAKiR,MAAMwsG,iBAAiBxzC,GAC5BjqE,KAAKiR,MAAMu4G,oBAAoBv/C,GAC/BjqE,KAAKwjC,UAAU,IAAIhC,cAAcv3B,QAAQ4/B,iBAAkB,SAAUogC,KAG/DA,GAUR2lC,SAASxjG,UAAU6iB,QAAU,WAEvBjvB,KAAKk0H,YAETl0H,KAAKk0H,WAAY,EAEC,MAAdl0H,KAAKywI,OAERzwI,KAAKywI,MAAMxhH,UAGQ,MAAhBjvB,KAAK0zD,SAER1zD,KAAK0zD,QAAQzkC,UAGS,MAAnBjvB,KAAKyhC,YAERzhC,KAAKyhC,WAAWxS,UAGM,MAAnBjvB,KAAKgsG,YAERhsG,KAAKgsG,WAAW/8E,UAGM,MAAnBjvB,KAAKmzI,YAERnzI,KAAKmzI,WAAWlkH,UAGG,MAAhBjvB,KAAKmwG,SAERnwG,KAAKmwG,QAAQlhF,UAGI,MAAdjvB,KAAKiR,OAERjR,KAAKiR,MAAMge,UAGZjvB,KAAKqe,OAAS,KACdre,KAAK0vI,UAAY,OAInBzvI,WAAW2vG,cAA+B,IAAbA,SAA2BA,cAAWhpG,EAMnE,IAAI2uI,gBACJ,CAuCCC,OAAQ,GAORC,QAAS,GAYTC,SAAU,SAASC,GAElB,GAAa,MAATA,EACJ,CACC,IAAI51I,EAAO41I,EAAM3zG,UACjBuzG,gBAAgBC,OAAOz1I,GAAQ41I,EAE/B,IAAIC,EAAYttI,QAAQ0D,gBAAgB2pI,EAAMzD,SAASjmI,aAEnD2pI,GAAa71I,GAEhBw1I,gBAAgBM,SAASD,EAAW71I,GAItC,OAAO41I,GAQRE,SAAU,SAASD,EAAWE,GAE7BP,gBAAgBE,QAAQG,GAAaE,GAatCC,SAAU,SAAShqI,GAElB,IAAI4pI,EAAQ,KAEZ,GAAY,MAAR5pI,EACJ,CACC,IAAIhM,EAAOuI,QAAQ0D,gBAAgBD,GAC/B8E,EAAM0kI,gBAAgBE,QAAQ11I,GAWlC,GATW,MAAP8Q,IAEH9Q,EAAO8Q,GAOK,OAJb8kI,EAAQJ,gBAAgBC,OAAOz1I,IAM9B,IAEC41I,EAAQ,IAAIK,cAAc,IAAIjqI,GAC9BwpI,gBAAgBG,SAASC,GAE1B,MAAOvnI,KAOT,OAAOunI,IAgvDJA,MAxnDL,SAAS5mH,QAAQluB,GAEhBb,KAAKa,SAAWA,GAAYyH,QAAQ8O,oBACpCpX,KAAKi2I,QAAU,GAmsBhB,SAASD,cAAc9D,EAAU76E,EAAS6+E,EAAQhoD,GAUjD,IAAK,IAAIrpF,KART7E,KAAKkyI,SAAWA,EAEhBlyI,KAAKq3D,QAAsB,MAAXA,EAAmBA,EAAU,GAC7Cr3D,KAAKk2I,OAAoB,MAAVA,EAAkBA,EAAS,GAC1Cl2I,KAAKkuF,QAAsB,MAAXA,EAAmBA,EAAU,GAE7CluF,KAAK0+G,QAAU,IAAIlvC,OAELxvE,KAAKkuF,QAElBluF,KAAK0+G,QAAQ1+G,KAAKkuF,QAAQrpF,IAAMA,EAr0BlC5E,WAAWs1I,qBAA6C,IAApBA,gBAAkCA,qBAAkB3uI,EA8HxFmoB,QAAQ3iB,UAAUvL,SAAW,KAO7BkuB,QAAQ3iB,UAAU6pI,QAAU,KAO5BlnH,QAAQ3iB,UAAU+pI,SAAW,KAO7BpnH,QAAQ3iB,UAAUgqI,gBAAiB,EAanCrnH,QAAQ3iB,UAAUiqI,UAAY,SAASlyI,EAAI2H,GAI1C,OAFA9L,KAAKi2I,QAAQ9xI,GAAM2H,EAEZA,GAWRijB,QAAQ3iB,UAAUkqI,UAAY,SAASnyI,GAEtC,IAAI2H,EAAM,KAEV,GAAU,MAAN3H,GAIQ,OAFX2H,EAAM9L,KAAKi2I,QAAQ9xI,KAMP,OAFX2H,EAAM9L,KAAKqqB,OAAOlmB,IAGlB,CACC,IAAIe,EAAOlF,KAAKyqD,eAAetmD,GAEnB,MAARe,IAEH4G,EAAM9L,KAAK4xI,OAAO1sI,IAMtB,OAAO4G,GAuBRijB,QAAQ3iB,UAAUie,OAAS,SAASlmB,GAEnC,OAAO,MAYR4qB,QAAQ3iB,UAAUq+C,eAAiB,SAAStmD,GAI3C,OAFAnE,KAAKu2I,iBAEEv2I,KAAKm2I,SAAShyI,IAYtB4qB,QAAQ3iB,UAAUmqI,eAAiB,WAEb,MAAjBv2I,KAAKm2I,WAERn2I,KAAKm2I,SAAW,IAAI3mE,OAEiB,MAAjCxvE,KAAKa,SAAS2C,iBAEjBxD,KAAKw2I,WAAWx2I,KAAKa,SAAS2C,mBAUjCurB,QAAQ3iB,UAAUoqI,WAAa,SAAStxI,GAEvC,GAAIA,EAAKuQ,UAAY9H,YAAY+H,iBACjC,CACC,IAAIvR,EAAKe,EAAKyQ,aAAa,MAE3B,GAAU,MAANxR,EAEH,GAAyB,MAArBnE,KAAKm2I,SAAShyI,GAEjBnE,KAAKm2I,SAAShyI,GAAMe,OAEhB,GAAIlF,KAAKm2I,SAAShyI,IAAOe,EAE7B,MAAM,IAAIuxI,MAAMtyI,EAAK,kBAOxB,IAFAe,EAAOA,EAAK0Q,WAEG,MAAR1Q,GAENlF,KAAKw2I,WAAWtxI,GAChBA,EAAOA,EAAK2Q,aAiBdkZ,QAAQ3iB,UAAU8+E,MAAQ,SAASp/E,GAElC,IAAI3H,EAAK,KAuBT,OArBW,MAAP2H,GAIO,OAFV3H,EAAKnE,KAAK02I,UAAU5qI,KAEFA,aAAe+6E,QAItB,OAFV1iF,EAAK2H,EAAIo/E,UAOS,IAFjB/mF,EAAKsmB,WAAWC,OAAO5e,IAEhB3J,SAENgC,EAAK,QAMFA,GAwBR4qB,QAAQ3iB,UAAUsqI,UAAY,SAAS5qI,GAEtC,OAAO,MAaRijB,QAAQ3iB,UAAU4iB,OAAS,SAASljB,GAEnC,IAAI5G,EAAO,KAEX,GAAW,MAAP4G,GAAkC,MAAnBA,EAAIG,YACvB,CACC,IAAI0qI,EAAMpB,gBAAgBQ,SAASjqI,EAAIG,aAE5B,MAAP0qI,EAEHzxI,EAAOyxI,EAAI3nH,OAAOhvB,KAAM8L,GAIpBxD,QAAQ+N,OAAOvK,GAElB5G,EAAOoD,QAAQuO,WAAW7W,KAAKa,SAAUiL,GAAK,GAI3CjF,MAAMyE,KAAK,gCAAkChD,QAAQ0D,gBAAgBF,EAAIG,cAK/E,OAAO/G,GAmBR6pB,QAAQ3iB,UAAUwlI,OAAS,SAAS1sI,EAAM0xI,GAEzC52I,KAAKu2I,iBACL,IAAIzqI,EAAM,KAEV,GAAY,MAAR5G,GAAgBA,EAAKuQ,UAAY9H,YAAY+H,iBACjD,CACC,IAAI3J,EAAO,KAEX,IAECA,EAAOvK,OAAO0D,EAAKoR,UAEpB,MAAO5N,IAKP,IAAImuI,EAAMtB,gBAAgBQ,SAAShqI,GAExB,MAAP8qI,EAEH/qI,EAAM+qI,EAAIjF,OAAO5xI,KAAMkF,EAAM0xI,IAI7B9qI,EAAM5G,EAAKwpB,WAAU,IACjBi9B,gBAAgB,MAItB,OAAO7/C,GAuBRijB,QAAQ3iB,UAAU0qI,WAAa,SAAS9kI,EAAM9M,EAAMqpF,GAInD,GAFArpF,EAAKX,YAAYvE,KAAKgvB,OAAOhd,IAEN,MAAnBu8E,GAA2BA,EAI9B,IAFA,IAAIr7E,EAAalB,EAAKmB,gBAEbtO,EAAI,EAAGA,EAAIqO,EAAYrO,IAE/B7E,KAAK82I,WAAW9kI,EAAKoB,WAAWvO,GAAIK,IAYvC6pB,QAAQ3iB,UAAU2qI,YAAc,SAASpB,GAExC,OAAa,MAATA,GAA8C,mBAAtBA,EAAiB,aAErCA,EAAMoB,eAuBfhoH,QAAQ3iB,UAAU4qI,WAAa,SAAS9xI,EAAM+xI,GAE7CA,EAA0C,MAArBA,GAA6BA,EAClD,IAAIjlI,EAAO,KAEX,GAAY,MAAR9M,GAAgBA,EAAKuQ,UAAY9H,YAAY+H,iBACjD,CAIC,IAAIwhI,EAAU3B,gBAAgBQ,SAAS7wI,EAAKoR,UAK5C,IAAKtW,KAAK+2I,YAAYG,GAIrB,IAFA,IAAIjlI,EAAQ/M,EAAK0Q,WAED,MAAT3D,IAAkBjS,KAAK+2I,YAAYG,IAEzCA,EAAU3B,gBAAgBQ,SAAS9jI,EAAMqE,UACzCrE,EAAQA,EAAM4D,YAIX7V,KAAK+2I,YAAYG,KAErBA,EAAU3B,gBAAgBQ,SAASlvD,SAGpC70E,EAAOklI,EAAQtF,OAAO5xI,KAAMkF,GAExB+xI,GAEHj3I,KAAKm3I,gBAAgBnlI,GAIvB,OAAOA,GAQR+c,QAAQ3iB,UAAU+qI,gBAAkB,SAASnlI,GAE5C,IAAI2E,EAAS3E,EAAK2E,OACdmN,EAAS9R,EAAKw4D,aAAY,GAC1B/rD,EAASzM,EAAKw4D,aAAY,GAO9B,GAJAx4D,EAAKo6E,YAAY,MAAM,GACvBp6E,EAAKo6E,YAAY,MAAM,GACvBp6E,EAAK2E,OAAS,KAEA,MAAVA,EACJ,CACC,GAAIA,GAAU3E,EAEb,MAAM,IAAIykI,MAAM9/H,EAAOxS,GAAK,oBAI5BwS,EAAO8zE,OAAOz4E,GAIF,MAAV8R,GAEHA,EAAO0oE,WAAWx6E,GAAM,GAGX,MAAVyM,GAEHA,EAAO+tE,WAAWx6E,GAAM,IAiB1B+c,QAAQ3iB,UAAU/H,aAAe,SAASa,EAAMy0D,EAAW5xD,GAEzC,MAAb4xD,GAA8B,MAAT5xD,GAExB7C,EAAKb,aAAas1D,EAAW5xD,IAI/B9H,WAAW8uB,aAA6B,IAAZA,QAA0BA,aAAUnoB,EA+NhEovI,cAAch9E,WAAY,EAO1Bg9E,cAAc5pI,UAAU8lI,SAAW,KAQnC8D,cAAc5pI,UAAUirD,QAAU,KASlC2+E,cAAc5pI,UAAU8pI,OAAS,KAOjCF,cAAc5pI,UAAU8hF,QAAU,KAOlC8nD,cAAc5pI,UAAUsyG,QAAU,KAWlCs3B,cAAc5pI,UAAU41B,QAAU,WAEjC,OAAO15B,QAAQ0D,gBAAgBhM,KAAKkyI,SAASjmI,cAQ9C+pI,cAAc5pI,UAAUgrI,cAAgB,WAEvC,OAAO,IAAIp3I,KAAKkyI,SAASjmI,aAW1B+pI,cAAc5pI,UAAUirI,aAAe,SAASC,GAE/C,GAAqB,MAAjBA,EACJ,CACC,IAAIC,EAASv3I,KAAK0+G,QAAQ44B,GAEZ,MAAVC,IAEHD,EAAgBC,GAIlB,OAAOD,GAWRtB,cAAc5pI,UAAUorI,iBAAmB,SAASC,GAEnD,GAAiB,MAAbA,EACJ,CACC,IAAIF,EAASv3I,KAAKkuF,QAAQupD,GAEZ,MAAVF,IAEHE,EAAYF,GAId,OAAOE,GAkBRzB,cAAc5pI,UAAUsrI,WAAa,SAAS5rI,EAAK0J,EAAMzN,EAAO3D,GAE/D,OAAOoR,GAAQ9J,iBAAiBC,YAC/BrD,QAAQ/H,QAAQP,KAAKq3D,QAAS7hD,IAAS,GAkBzCwgI,cAAc5pI,UAAUurI,YAAc,SAAS7rI,EAAK0J,EAAMzN,EAAO3D,GAEhE,OAAOkE,QAAQ/H,QAAQP,KAAKk2I,OAAQ1gI,IAAS,GA6C9CwgI,cAAc5pI,UAAU4iB,OAAS,SAAS2nH,EAAK7qI,GAE9C,IAAI5G,EAAOyxI,EAAI91I,SAASG,cAAchB,KAAKgiC,WAK3C,OAHAl2B,EAAM9L,KAAK43I,aAAajB,EAAK7qI,EAAK5G,GAClClF,KAAK63I,aAAalB,EAAK7qI,EAAK5G,GAErBlF,KAAK83I,YAAYnB,EAAK7qI,EAAK5G,IAenC8wI,cAAc5pI,UAAUyrI,aAAe,SAASlB,EAAK7qI,EAAK5G,GAItD,IAAK,IAAIL,KAFZ8xI,EAAItyI,aAAaa,EAAM,KAAMyxI,EAAIzrD,MAAMp/E,IAEtBA,EACd,CACF,IAAI/L,EAAO8E,EACPkD,EAAQ+D,EAAI/L,GAEA,MAATgI,GAAkB/H,KAAK03I,WAAW5rI,EAAK/L,EAAMgI,GAAO,KAEnDO,QAAQ2gB,UAAUlpB,KAErBA,EAAO,MAGRC,KAAK+3I,YAAYpB,EAAK7qI,EAAK/L,EAAMgI,EAAO7C,MAoB9C8wI,cAAc5pI,UAAU2rI,YAAc,SAASpB,EAAK7qI,EAAK/L,EAAMgI,EAAO7C,GAErE,GAAa,MAAT6C,EACJ,CACC,GAAI/H,KAAK23I,YAAY7rI,EAAK/L,EAAMgI,GAAO,GACvC,CACC,IAAI8I,EAAM8lI,EAAIzrD,MAAMnjF,GAEpB,GAAW,MAAP8I,EAIA,YAFAhK,MAAMyE,KAAK,mCACVtL,KAAKgiC,UAAY,IAAMjiC,EAAO,IAAMgI,GAItCA,EAAQ8I,EAGZ,IAAI9B,EAAe/O,KAAKkyI,SAASnyI,IAIrB,MAARA,GAAgB42I,EAAIP,gBAAkBrnI,GAAgBhH,KAEzDhI,EAAOC,KAAKw3I,iBAAiBz3I,GAC7BC,KAAKg4I,eAAerB,EAAK7qI,EAAK/L,EAAMgI,EAAO7C,MAW9C8wI,cAAc5pI,UAAU4rI,eAAiB,SAASrB,EAAK7qI,EAAK/L,EAAMgI,EAAO7C,GAEnD,iBAAX,EAETlF,KAAKi4I,wBAAwBtB,EAAK7qI,EAAK/L,EAAMgI,EAAO7C,GAIpDlF,KAAKk4I,sBAAsBvB,EAAK7qI,EAAK/L,EAAMgI,EAAO7C,IASpD8wI,cAAc5pI,UAAU6rI,wBAA0B,SAAStB,EAAK7qI,EAAK/L,EAAMgI,EAAO7C,GAIjF,GAFA6C,EAAQ/H,KAAKm4I,sBAAsBxB,EAAK7qI,EAAK/L,EAAMgI,EAAO7C,GAE9C,MAARnF,EACJ,CACC,IAAIkS,EAAQ0kI,EAAI91I,SAASG,cAAc,OAElB,mBAAX,EAENiR,EAAM1N,YAAYoyI,EAAI91I,SAASqW,eAAenP,IAI9C4uI,EAAItyI,aAAa4N,EAAO,QAASlK,GAGrC7C,EAAKX,YAAY0N,OAEQ,mBAAX,GAEX0kI,EAAItyI,aAAaa,EAAMnF,EAAMgI,IASlCiuI,cAAc5pI,UAAU8rI,sBAAwB,SAASvB,EAAK7qI,EAAK/L,EAAMgI,EAAO7C,GAE/E,IAAI+M,EAAQ0kI,EAAI3nH,OAAOjnB,GAEV,MAATkK,GAES,MAARlS,GAEAkS,EAAM5N,aAAa,KAAMtE,GAG1BmF,EAAKX,YAAY0N,IAIpBpL,MAAMyE,KAAK,qCAAuCtL,KAAKgiC,UAAY,IAAMjiC,EAAO,KAAOgI,IAiBzFiuI,cAAc5pI,UAAU+rI,sBAAwB,SAASxB,EAAK7qI,EAAK/L,EAAMgI,GAUxE,OAPI/H,KAAKo4I,mBAAmBzB,EAAK7qI,EAAK/L,EAAMgI,KAI3CA,EAAkB,GAATA,EAAiB,IAAM,KAG1BA,GAeRiuI,cAAc5pI,UAAUgsI,mBAAqB,SAASzB,EAAK7qI,EAAK/L,EAAMgI,GAErE,YAAgC,IAAjBA,EAAY,SAA8B,GAATA,GAA0B,GAATA,IAelEiuI,cAAc5pI,UAAUisI,wBAA0B,SAASxB,EAAKrhI,EAAM1J,GAErE,IAAI/D,EAAQyN,EAAKzN,MAYjB,OAVI/H,KAAKs4I,mBAAmBzB,EAAKrhI,EAAM1J,KAEtC/D,EAAQ4M,WAAW5M,IAEf6M,MAAM7M,IAAWihB,SAASjhB,KAE7BA,EAAQ,IAIHA,GAcRiuI,cAAc5pI,UAAUksI,mBAAqB,SAASzB,EAAKrhI,EAAM1J,GAUhE,OAPcA,EAAIG,aAAeq/D,aAClB,KAAb91D,EAAKzV,MAA4B,KAAbyV,EAAKzV,MACb,SAAbyV,EAAKzV,MAAgC,UAAbyV,EAAKzV,OAC5B+L,EAAIG,aAAekD,UACN,KAAbqG,EAAKzV,MAA4B,KAAbyV,EAAKzV,OAC1BuI,QAAQygB,UAAUvT,EAAKzN,QAmBzBiuI,cAAc5pI,UAAUwrI,aAAe,SAASjB,EAAK7qI,EAAK5G,GAEzD,OAAO4G,GAkBRkqI,cAAc5pI,UAAU0rI,YAAc,SAASnB,EAAK7qI,EAAK5G,GAExD,OAAOA,GAyDR8wI,cAAc5pI,UAAUwlI,OAAS,SAASiF,EAAK3xI,EAAM0xI,GAEpD,IAAIzyI,EAAKe,EAAKyQ,aAAa,MACvB7J,EAAM+qI,EAAIZ,QAAQ9xI,GAenB,OAbQ,MAAP2H,IAEHA,EAAM8qI,GAAQ52I,KAAKo3I,gBAET,MAANjzI,GAEH0yI,EAAIR,UAAUlyI,EAAI2H,IAIpB5G,EAAOlF,KAAKu4I,aAAa1B,EAAK3xI,EAAM4G,GACpC9L,KAAKw4I,WAAW3B,EAAK3xI,EAAM4G,GAEjB9L,KAAKy4I,YAAY5B,EAAK3xI,EAAM4G,IAcvCkqI,cAAc5pI,UAAUosI,WAAa,SAAS3B,EAAK3xI,EAAM4G,GAE5C,MAAR5G,IAEHlF,KAAK04I,iBAAiB7B,EAAK3xI,EAAM4G,GACjC9L,KAAK24I,eAAe9B,EAAK3xI,EAAM4G,KAejCkqI,cAAc5pI,UAAUssI,iBAAmB,SAAS7B,EAAK3xI,EAAM4G,GAE9D,IAAIgO,EAAQ5U,EAAK+R,WAEjB,GAAa,MAAT6C,EAEH,IAAK,IAAIjV,EAAI,EAAGA,EAAIiV,EAAM3X,OAAQ0C,IAEjC7E,KAAK44I,gBAAgB/B,EAAK/8H,EAAMjV,GAAIiH,IAiBvCkqI,cAAc5pI,UAAUysI,mBAAqB,SAAShC,EAAKrhI,EAAM1J,GAEhE,MAAwB,MAAjB0J,EAAKc,UAAqC,MAAjBd,EAAKc,UActC0/H,cAAc5pI,UAAUwsI,gBAAkB,SAAS/B,EAAKrhI,EAAM1J,GAE7D,IAAK9L,KAAK64I,mBAAmBhC,EAAKrhI,EAAM1J,GACxC,CACC,IAAI/L,EAAOyV,EAAKc,SAMZvO,EAAQ/H,KAAKq4I,wBAAwBxB,EAAKrhI,EAAM1J,GAChD2rI,EAAYz3I,KAAKq3I,aAAat3I,GAElC,GAAIC,KAAK23I,YAAY7rI,EAAK2rI,EAAW1vI,GAAO,GAC5C,CACC,IAAI8I,EAAMgmI,EAAIP,UAAUvuI,GAExB,GAAW,MAAP8I,EAIA,YAFAhK,MAAMyE,KAAK,uCACVtL,KAAKgiC,UAAY,IAAMjiC,EAAO,IAAMgI,GAItCA,EAAQ8I,EAGP7Q,KAAK03I,WAAW5rI,EAAK/L,EAAMgI,GAAO,KAGtC+D,EAAI/L,GAAQgI,KAgBfiuI,cAAc5pI,UAAUusI,eAAiB,SAAS9B,EAAK3xI,EAAM4G,GAI5D,IAFA,IAAImG,EAAQ/M,EAAK0Q,WAED,MAAT3D,GACP,CACC,IAAIpB,EAAMoB,EAAM4D,YAEZ5D,EAAMwD,UAAY9H,YAAY+H,kBAChC1V,KAAK84I,eAAejC,EAAK5kI,EAAOnG,IAEjC9L,KAAK+4I,YAAYlC,EAAK5kI,EAAOnG,GAG9BmG,EAAQpB,IAeVmlI,cAAc5pI,UAAU2sI,YAAc,SAASlC,EAAK5kI,EAAOnG,GAE1D,IAAI2rI,EAAYz3I,KAAKq3I,aAAaplI,EAAM0D,aAAa,OAErD,GAAiB,MAAb8hI,IAAsBz3I,KAAK03I,WAAW5rI,EAAK2rI,EAAWxlI,GAAO,GACjE,CACC,IAAIigI,EAAWlyI,KAAKg5I,iBAAiBltI,EAAK2rI,EAAWxlI,GACjDlK,EAAQ,KAEU,OAAlBkK,EAAMqE,SAII,OAFbvO,EAAQkK,EAAM0D,aAAa,WAENqgI,cAAch9E,YAElCjxD,EAAQO,QAAQ6M,KAAK7M,QAAQqQ,eAAe1G,KAK7ClK,EAAQ8uI,EAAIjF,OAAO3/H,EAAOigI,GAG3B,IAEClyI,KAAKi5I,eAAentI,EAAK2rI,EAAW1vI,EAAOmqI,GAE5C,MAAO9jI,GAEN,MAAM,IAAIqoI,MAAMroI,EAAEkH,QAAU,QAAUrD,EAAMqE,aAe/C0/H,cAAc5pI,UAAU4sI,iBAAmB,SAASltI,EAAK2rI,EAAWxlI,GAEnE,IAAIigI,EAAWpmI,EAAI2rI,GAQhB,OALIvF,aAAoB7qD,OAAS6qD,EAAS/vI,OAAS,IAE/C+vI,EAAW,MAGRA,GAaX8D,cAAc5pI,UAAU6sI,eAAiB,SAASntI,EAAK2rI,EAAW1vI,EAAOmqI,GAE3D,MAATnqI,GAAiBA,GAASmqI,IAEZ,MAAbuF,GAAqBA,EAAUt1I,OAAS,EAE3C2J,EAAI2rI,GAAa1vI,EAIjB+D,EAAIc,KAAK7E,KAmBZiuI,cAAc5pI,UAAU0sI,eAAiB,SAASjC,EAAK3xI,EAAM0xI,GAE5D,GAAqB,WAAjB1xI,EAAKoR,SACT,CACC,IAAIvW,EAAOmF,EAAKyQ,aAAa,QAE7B,GAAY,MAAR5V,EAEH,IAEC,IAAI+X,EAAMxP,QAAQ4F,KAAKnO,GAAM6tC,qBAElB,MAAP91B,GAEH++H,EAAIjF,OAAO95H,EAAK8+H,GAGlB,MAAOxoI,IAMR,OAAO,EAGR,OAAO,GAqBR4nI,cAAc5pI,UAAUmsI,aAAe,SAAS1B,EAAK3xI,EAAM4G,GAE1D,OAAO5G,GAiBR8wI,cAAc5pI,UAAUqsI,YAAc,SAAS5B,EAAK3xI,EAAM4G,GAEzD,OAAOA,GAGR7L,WAAW+1I,mBAAyC,IAAlBA,cAAgCA,mBAAgBpvI,EAMlF2uI,gBAAgBG,UAyCXC,MAAQ,IAAIK,cAAc,IAAInvD,OACjC,CAAC,WAAY,QAAS,WAAY,eAClC,CAAC,SAAU,SAAU,WAOtB8uD,MAAMoB,YAAc,WAEnB,OAAO,GAMRpB,MAAM2C,mBAAqB,SAASzB,EAAKrhI,EAAM1J,GAE9C,MAAyB,UAAlB0J,EAAKc,UAAwB0/H,cAAc5pI,UAAUksI,mBAAmBltI,MAAMpL,KAAMqL,YAQ5FsqI,MAAM+B,WAAa,SAAS5rI,EAAK0J,EAAMzN,EAAOmxI,GAE7C,OAAOlD,cAAc5pI,UAAUsrI,WAAWtsI,MAAMpL,KAAMqL,YACpD6tI,GAAmB,SAAR1jI,GACZzN,EAAM0N,UAAY9H,YAAY+H,kBAShCigI,MAAMmC,YAAc,SAASnB,EAAK7qI,EAAK5G,GAEtC,GAAiB,MAAb4G,EAAI/D,OAAiB+D,EAAI/D,MAAM0N,UAAY9H,YAAY+H,iBAC3D,CAIC,IAAI7E,EAAM3L,GACVA,EAAOoD,QAAQuO,WAAW8/H,EAAI91I,SAAUiL,EAAI/D,OAAO,IAC9CxD,YAAYsM,GAIjB,IAAI1M,EAAK0M,EAAI8E,aAAa,MAC1BzQ,EAAKb,aAAa,KAAMF,GACxB0M,EAAI86C,gBAAgB,MAGrB,OAAOzmD,GASRywI,MAAM4C,aAAe,SAAS1B,EAAK3xI,EAAM4G,GAExC,IAAIwkD,EAAQprD,EAAKwpB,WAAU,GACvBknH,EAAY51I,KAAKgiC,UAErB,GAAI98B,EAAKoR,UAAYs/H,EACrB,CAGC,IAAI/kI,EAAM3L,EAAKZ,qBAAqBsxI,GAAW,GAEpC,MAAP/kI,GAAeA,EAAIgD,YAAc3O,GAEpCoD,QAAQgQ,iBAAiBzH,GAAK,GAC9BvI,QAAQgQ,iBAAiBzH,GAAK,GAC9BA,EAAIgD,WAAWC,YAAYjD,GAC3By/C,EAAQz/C,GAIRy/C,EAAQ,KAITxkD,EAAI/D,MAAQ7C,EAAKwpB,WAAU,GAC3B,IAAIvqB,EAAK2H,EAAI/D,MAAM4N,aAAa,MAEtB,MAANxR,IAEH2H,EAAIq/E,MAAMhnF,GACV2H,EAAI/D,MAAM4jD,gBAAgB,YAM3B7/C,EAAIq/E,MAAMjmF,EAAKyQ,aAAa,OAK7B,GAAa,MAAT26C,EAEH,IAAK,IAAIzrD,EAAI,EAAGA,EAAI7E,KAAKk2I,OAAO/zI,OAAQ0C,IACxC,CACC,IAAI2Q,EAAOxV,KAAKk2I,OAAOrxI,GACnBs0I,EAAM7oF,EAAM36C,aAAaH,GAE7B,GAAW,MAAP2jI,EACJ,CACC7oF,EAAM3E,gBAAgBn2C,GACtB,IAAI4jI,EAASvC,EAAIZ,QAAQkD,IAAQtC,EAAIxsH,OAAO8uH,GAE5C,GAAc,MAAVC,EACJ,CAEC,IAAIjlI,EAAU0iI,EAAIpsF,eAAe0uF,GAElB,MAAXhlI,IAGHilI,GADc7D,gBAAgBC,OAAOrhI,EAAQmC,WAAatW,MACzC4xI,OAAOiF,EAAK1iI,IAI/BrI,EAAI0J,GAAQ4jI,GAKf,OAAO9oF,GAIDqlF,QAIR11I,WAAWo5I,YAAqC,oBAAhBA,YAA8BA,iBAAczyI,EAM5E2uI,gBAAgBG,SAAS,WASxB,IAAIC,EAAQ,IAAIK,cAAc,IAAI7vD,cAgElC,OAvDAwvD,EAAMkC,aAAe,SAASlB,EAAK7qI,EAAK5G,GAEvC,IAAIo0I,EAAW3C,EAAI91I,SAASG,cAAc,QAC1C21I,EAAIG,WAAWhrI,EAAIkiB,UAAWsrH,GAC9Bp0I,EAAKX,YAAY+0I,IAQlB3D,EAAMoD,YAAc,SAASlC,EAAK5kI,EAAOnG,GAElB,QAAlBmG,EAAMqE,SAETtW,KAAKu5I,WAAW1C,EAAK5kI,EAAOnG,GAI5BkqI,cAAc5pI,UAAU2sI,YAAY3tI,MAAMpL,KAAMqL,YAUlDsqI,EAAM4D,WAAa,SAAS1C,EAAK/4F,EAAM5rC,GAKtC,IAHA,IAAIsnI,EAAW,KACX3oI,EAAMitC,EAAKloC,WAED,MAAP/E,GACP,CACC,IAAImB,EAAO6kI,EAAIG,WAAWnmI,GAEd,MAARmB,GAAoC,MAApBA,EAAKiwC,cAExBu3F,EAAWxnI,GAGZnB,EAAMA,EAAIgF,YAIK,MAAZ2jI,GAEHtnI,EAAMo0E,QAAQkzD,IAKT7D,EAzEiB,IA6EzB11I,WAAWw5I,aAAuC,oBAAjBA,aAA+BA,kBAAe7yI,EAM/E2uI,gBAAgBG,SAAS,WAexB,IAAIC,EAAQ,IAAIK,cAAc,IAAIzvD,aACjC,CAAC,QAAS,WAAY,SA4DvB,OArDAovD,EAAMmC,YAAc,SAASnB,EAAK7qI,EAAK5G,GAItC,OAFAyxI,EAAIG,WAAWhrI,EAAIgyC,KAAM54C,GAElBA,GASRywI,EAAM4C,aAAe,SAAS1B,EAAK3xI,EAAM4G,GAExC,GAAuB,MAAnB5G,EAAK0Q,YACR1Q,EAAK0Q,WAAWH,UAAY9H,YAAY+H,iBACzC,CAIC,IAAI7E,GAFJ3L,EAAOA,EAAKwpB,WAAU,IAEP9Y,WACf9J,EAAIgyC,KAAO+4F,EAAIG,WAAWnmI,GAAK,GAE/B,IAAIo8E,EAAOp8E,EAAIgF,YAIf,IAHAhF,EAAIgD,WAAWC,YAAYjD,GAC3BA,EAAMo8E,EAEQ,MAAPp8E,GAENo8E,EAAOp8E,EAAIgF,YACXghI,EAAIG,WAAWnmI,GACfA,EAAIgD,WAAWC,YAAYjD,GAC3BA,EAAMo8E,EAIR,OAAO/nF,GAQRywI,EAAM8C,YAAc,SAAS5B,EAAK3xI,EAAM4G,GAIvC,OAFAA,EAAIU,SAAWV,EAAIgyC,KAEZhyC,GAID6pI,EA5EiB,IAgFzB11I,WAAWy5I,kBAAiD,oBAAtBA,kBAAoCA,uBAAoB9yI,EAM9F2uI,gBAAgBG,SAAS,WAoBxB,IAAIC,EAAQ,IAAIK,cAAc,IAAIrkI,cACjC,CAAC,QAAS,QAAS,iBACnB,CAAC,SAAU,aA2IZ,OAjIAgkI,EAAMgC,YAAc,SAAS7rI,EAAK0J,EAAMzN,EAAOmxI,GAE9C,QAAY,SAAR1jI,GAAqB0jI,IAAWptI,EAAIoG,MAAMwU,SAAS5a,EAAIU,YAKpDlE,QAAQ/H,QAAQP,KAAKk2I,OAAQ1gI,IAAS,GAQ5CmgI,EAAM+B,WAAa,SAAS5rI,EAAK0J,EAAMzN,EAAO3D,GAE7C,OAAO4xI,cAAc5pI,UAAUsrI,WAAWtsI,MAAMpL,KAAMqL,YACpDjH,GAAkB,MAAT2D,IAA0B,YAARyN,GACpB,UAARA,KAAsB1J,EAAIoG,MAAMwU,SAAS3e,IAS7C4tI,EAAMmC,YAAc,SAASnB,EAAK7qI,EAAK5G,GAiBtC,OAfIlF,KAAK23I,YAAY7rI,EAAK,QAASA,EAAImG,OAAO,GAG7C/M,EAAKb,aAAa,QAASsyI,EAAIzrD,MAAMp/E,EAAImG,QASzC0kI,EAAIG,WAAWhrI,EAAImG,MAAO/M,GAGpBA,GASRywI,EAAM4C,aAAe,SAAS1B,EAAK3xI,EAAM4G,GAExC,GAAuB,MAAnB5G,EAAK0Q,YACR1Q,EAAK0Q,WAAWH,UAAY9H,YAAY+H,iBACzC,CAIC,IAAI7E,GAFJ3L,EAAOA,EAAKwpB,WAAU,IAEP9Y,WACf9J,EAAImG,MAAQ4kI,EAAIG,WAAWnmI,GAAK,GAEhC,IAAIo8E,EAAOp8E,EAAIgF,YAIf,IAHAhF,EAAIgD,WAAWC,YAAYjD,GAC3BA,EAAMo8E,EAEQ,MAAPp8E,GACP,CAGC,GAFAo8E,EAAOp8E,EAAIgF,YAEPhF,EAAI4E,UAAY9H,YAAY+H,iBAChC,CAMC,IAAIvR,EAAK0M,EAAI8E,aAAa,MAEJ,MAAlBkhI,EAAIxsH,OAAOlmB,IAEd0yI,EAAIG,WAAWnmI,GAIjBA,EAAIgD,WAAWC,YAAYjD,GAC3BA,EAAMo8E,OAIR,CACC,IAAI0sD,EAAWz0I,EAAKyQ,aAAa,SACjC7J,EAAImG,MAAQ4kI,EAAIP,UAAUqD,GAG3B,OAAOz0I,GAQRywI,EAAM8C,YAAc,SAAS5B,EAAK3xI,EAAM4G,GAmBvC,OAbuB,MAAbA,EAAImG,QAEoB,MAApBnG,EAAImG,MAAM0E,QAAkC,MAAhB7K,EAAIU,UAChCV,EAAImG,MAAM0E,QAAU7K,EAAIU,WAExBV,EAAIU,SAAWV,EAAImG,MAAM0E,QAG7B7K,EAAImG,MAAM0E,OAAS7K,EAAIU,SACvBV,EAAIU,SAAWV,EAAI6K,OACnB7K,EAAI06E,cAAgB16E,EAAI2C,OAG3B3C,GAID6pI,EAjKiB,IAqKzB11I,WAAW25I,mBAAmD,oBAAvBA,mBAAqCA,wBAAqBhzI,EAMjG2uI,gBAAgBG,SAAS,WAmBxB,IAAIC,EAAQ,IAAIK,cAAc,IAAIvkI,iBACjC,CAAC,QAAS,YAAa,CAAC,OAAQ,aAejC,OARAkkI,EAAM8C,YAAc,SAAS5B,EAAK3xI,EAAM4G,GAIvC,OAFAA,EAAIU,SAAWV,EAAI8X,SAEZ9X,GAID6pI,EAnCiB,IAuCzB11I,WAAW45I,sBAAyD,oBAA1BA,sBAAwCA,2BAAwBjzI,EAiC1G,IAAIkzI,qBAAuB,SAAShuI,EAAKiuI,GAExC,IAAIpE,EAAQ,IAAIK,cAAclqI,EAAM,CAAC,QAAS,YAAa,CAAC,SAqB5D,OAdA6pI,EAAM8C,YAAc,SAAS5B,EAAK3xI,EAAM4G,GAWvC,OAPIxD,QAAQ+N,OAAOvK,EAAIkG,QAEtBlG,EAAIkG,KAAO6kI,EAAIG,WAAWlrI,EAAIkG,MAAM,IAGrClG,EAAIU,SAAWV,EAAIiuI,GAEZjuI,GAGD6pI,GAIRJ,gBAAgBG,SAASoE,qBAAqB,IAAIpoI,cAAiB,UACnE6jI,gBAAgBG,SAASoE,qBAAqB,IAAIloI,cAAiB,UACnE2jI,gBAAgBG,SAASoE,qBAAqB,IAAItoI,iBAAoB,aACtE+jI,gBAAgBG,SAASoE,qBAAqB,IAAIrzD,iBAAoB,cACtE8uD,gBAAgBG,SAASoE,qBAAqB,IAAInzD,gBAAmB,YACrE4uD,gBAAgBG,SAASoE,qBAAqB,IAAIlzD,sBAAyB,UAE3E3mF,WAAW65I,0BAAuD,IAAzBA,qBAAuCA,0BAAuBlzI,EAMvG2uI,gBAAgBG,SAmBR,IAAIM,cAAc,IAAIjuC,QAC5B,CAAC,iBAAkB,iBAAkB,OAAQ,YAC7C,eAAgB,SAAU,eAI5B9nG,WAAW+5I,aAAuC,oBAAjBA,aAA+BA,kBAAepzI,EAM/E2uI,gBAAgBG,SAAS,WAYxB,IAAIC,EAAQ,IAAIK,cAAc,IAAIpuC,aAkLlC,OAzKA+tC,EAAM3mH,OAAS,SAAS2nH,EAAKpvH,GAE5B,OAAOvnB,KAAK82I,WAAWH,EAAKpvH,EAC3BA,EAAKtW,MAAM8c,WAAWC,YAuBxB2nH,EAAMmB,WAAa,SAASH,EAAKpvH,EAAMvV,GAEtC,IAAIE,EAAQqV,EAAKtW,MAAM8c,WACnBlc,EAAQ0V,EAAKxV,SAASC,GACtB2E,EAASzE,EAAM+vC,UAAUjwC,GAE7B,GAAc,MAAV2E,GAA2B,MAAT9E,EACtB,CACC,IAAIqB,EAAahB,EAAMiB,cAAcnB,GACjCkwC,EAAM36B,EAAKtW,MAAMkxC,gBAAgBnwC,GACjCjS,EAAO,KAuBX,GArBI4W,GAAUzE,EAAM8b,UAEnBjuB,EAAO,QAEW,MAAV4W,EAER5W,EAAO,QAECmS,EAAMC,OAAOH,GAErBjS,EAAO,OAECmT,EAAa,GAAY,MAAPgvC,EAE1BniD,EAAO,QAECmS,EAAM2vC,SAAS7vC,KAEvBjS,EAAO,UAGI,MAARA,EACJ,CACC,IAAImF,EAAOyxI,EAAI91I,SAASG,cAAcjB,GAatC,GAVW,MAFDwnB,EAAKtW,MAAMitF,SAASlsF,KAI7B9M,EAAKb,aAAa,QAASkjB,EAAKtW,MAAMitF,SAASlsF,IAE3CuV,EAAKtW,MAAMotF,YAAYrsF,IAE1B9M,EAAKb,aAAa,QAAQ,IAId,MAAVsS,EACJ,CACC,IAAI8P,EAASc,EAAKmI,iBAEJ,MAAVjJ,IAEHvhB,EAAKb,aAAa,IAAK+E,KAAK2c,MAAMU,EAAOrX,IACzClK,EAAKb,aAAa,IAAK+E,KAAK2c,MAAMU,EAAOpX,IACzCnK,EAAKb,aAAa,QAAS+E,KAAK2c,MAAMU,EAAOxe,QAC7C/C,EAAKb,aAAa,SAAU+E,KAAK2c,MAAMU,EAAO5e,UAG/C3C,EAAKb,aAAa,QAASkjB,EAAKjV,YAE5B,GAAa,MAATT,GAAwB,MAAPqwC,EAC1B,CAEI,IAAK,IAAIr9C,KAAKgN,EAAMnK,MACpB,CACC,IAAIK,EAAQ8J,EAAMnK,MAAM7C,GAGH,mBAAX,GACK,iBAAX,IAEHkD,EAAQ2/F,gBAAgB1lE,QAAQj6B,IAGpB,MAATA,GACc,mBAAX,GACQ,iBAAX,GAEN7C,EAAKb,aAAaQ,EAAGkD,GAIvB,IAAI2Y,EAAM7O,EAAMsT,eAGhB,GAAW,MAAPzE,GAAeA,EAAIve,OAAS,EAChC,CACC,IAAI+jB,EAAM9c,KAAK2c,MAAMrF,EAAI,GAAGtR,GAAK,IAAMhG,KAAK2c,MAAMrF,EAAI,GAAGrR,GAEzD,IAASxK,EAAE,EAAGA,EAAE6b,EAAIve,OAAQ0C,IAE3BqhB,GAAO,IAAM9c,KAAK2c,MAAMrF,EAAI7b,GAAGuK,GAAK,IACnChG,KAAK2c,MAAMrF,EAAI7b,GAAGwK,GAGpBnK,EAAKb,aAAa,SAAU6hB,QAM5BhhB,EAAKb,aAAa,IAAK+E,KAAK2c,MAAMlU,EAAMzC,IACxClK,EAAKb,aAAa,IAAK+E,KAAK2c,MAAMlU,EAAMxC,IACxCnK,EAAKb,aAAa,QAAS+E,KAAK2c,MAAMlU,EAAM5J,QAC5C/C,EAAKb,aAAa,SAAU+E,KAAK2c,MAAMlU,EAAMhK,SAG9C,IAAI+U,EAAS/K,EAAM0gF,eAGL,MAAV31E,IAEa,GAAZA,EAAOxN,GAEVlK,EAAKb,aAAa,KAAM+E,KAAK2c,MAAMnJ,EAAOxN,IAG3B,GAAZwN,EAAOvN,GAEVnK,EAAKb,aAAa,KAAM+E,KAAK2c,MAAMnJ,EAAOvN,KAK7C,IAASxK,EAAE,EAAGA,EAAEqO,EAAYrO,IAC5B,CACC,IAAI21D,EAAYx6D,KAAK82I,WAAWH,EAC9BpvH,EAAMrV,EAAMkB,WAAWpB,EAAMnN,IAEd,MAAb21D,GAEHt1D,EAAKX,YAAYi2D,KAMrB,OAAOt1D,GAIDywI,EA9LiB,IAkMzB11I,WAAWg6I,iBAA+C,oBAArBA,iBAAmCA,sBAAmBrzI,EAa3F,IAAIszI,kBAAoB3E,gBAAgBG,SAAS,WAEhD,IAAIC,EAAQ,IAAIK,cAAc,IAAI/jD,cAgMlC,OAxLA0jD,EAAM3mH,OAAS,SAAS2nH,EAAK7qI,GAE5B,IAAI5G,EAAOyxI,EAAI91I,SAASG,cAAchB,KAAKgiC,WAE3C,IAAK,IAAIn9B,KAAKiH,EAAIglB,OAClB,CACC,IAAIppB,EAAQoE,EAAIglB,OAAOjsB,GACnBs1I,EAAYxD,EAAI91I,SAASG,cAAc,OAE3C,GAAS,MAAL6D,EACJ,CAGC,IAAK,IAAIy6D,KAFT66E,EAAU91I,aAAa,KAAMQ,GAEf6C,EACd,CACC,IAAIK,EAAQ/H,KAAKo6I,eAAe96E,EAAG53D,EAAM43D,IAEzC,GAAa,MAATv3D,EACJ,CACC,IAAI+7B,EAAQ6yG,EAAI91I,SAASG,cAAc,OACvC8iC,EAAMz/B,aAAa,QAAS0D,GAC5B+7B,EAAMz/B,aAAa,KAAMi7D,GACzB66E,EAAU51I,YAAYu/B,IAIpBq2G,EAAU7lI,WAAWnS,OAAS,GAEjC+C,EAAKX,YAAY41I,IAKjB,OAAOj1I,GAQXywI,EAAMyE,eAAiB,SAAS9tI,EAAKvE,GAEpC,IAAIzB,SAAa,EAWjB,MATY,YAARA,EAEHyB,EAAQ2/F,gBAAgB1lE,QAAQj6B,GAEhB,UAARzB,IAERyB,EAAQ,MAGFA,GA4CR4tI,EAAM/D,OAAS,SAASiF,EAAK3xI,EAAM0xI,GAElC,IAAI9qI,EAAM8qI,GAAQ,IAAI52I,KAAKkyI,SAASjmI,YAChC9H,EAAKe,EAAKyQ,aAAa,MAS3B,IAPU,MAANxR,IAEH0yI,EAAIZ,QAAQ9xI,GAAM2H,GAGnB5G,EAAOA,EAAK0Q,WAEG,MAAR1Q,GACP,CACC,IAAKlF,KAAK84I,eAAejC,EAAK3xI,EAAM4G,IAAyB,OAAjB5G,EAAKoR,SACjD,CACC,IAAIu3H,EAAK3oI,EAAKyQ,aAAa,MAE3B,GAAU,MAANk4H,EACJ,CACC,IAAInuH,EAASxa,EAAKyQ,aAAa,UAC3BjO,EAAmB,MAAVgY,EAAkBpX,QAAQmH,MAAM3D,EAAIglB,OAAOpR,IAAW,KAEtD,MAAThY,IAEW,MAAVgY,GAEH7Y,MAAMyE,KAAK,wCACVoU,EAAS,wBAGXhY,EAAQ,IAAI8nE,QAKb,IAFA,IAAI1rC,EAAQ5+B,EAAK0Q,WAED,MAATkuB,GACP,CACC,GAAIA,EAAMruB,UAAY9H,YAAY+H,iBAClC,CACE,IAAIpJ,EAAMw3B,EAAMnuB,aAAa,MAE7B,GAAsB,OAAlBmuB,EAAMxtB,SACV,CACC,IAAIjI,EAAO/F,QAAQqQ,eAAemrB,GAC9B/7B,EAAQ,KAEA,MAARsG,GAAgBA,EAAKlM,OAAS,GAAK+3I,kBAAkBlhF,UAExDjxD,EAAQO,QAAQ6M,KAAK9G,IAIrBtG,EAAQ+7B,EAAMnuB,aAAa,SAEvBrN,QAAQygB,UAAUhhB,KAEtBA,EAAQ4M,WAAW5M,KAIP,MAATA,IAEHL,EAAM4E,GAAOvE,OAGY,UAAlB+7B,EAAMxtB,iBAEP5O,EAAM4E,GAIhBw3B,EAAQA,EAAMjuB,YAGf/J,EAAI6qF,aAAak3C,EAAInmI,IAIvBxC,EAAOA,EAAK2Q,YAGb,OAAO/J,GAID6pI,EAlMyC,IA6MjDuE,kBAAkBlhF,WAAY,EAE9B/4D,WAAWi6I,uBAAiD,IAAtBA,kBAAoCA,uBAAoBtzI,EAM9F2uI,gBAAgBG,SAAS,WAUxB,IAAIC,EAAQ,IAAIK,cAAc,IAAI3mC,qBAuElC,OAhEAsmC,EAAM3mH,OAAS,SAAS2nH,EAAK7qI,GAE5B,OAAO,MAmCR6pI,EAAM/D,OAAS,SAASiF,EAAK3xI,EAAM0xI,GAElC,GAAY,MAARA,EAKH,IAHaA,EAAKn7H,OAClBvW,EAAOA,EAAK0Q,WAEG,MAAR1Q,GACP,CACC,IAAKlF,KAAK84I,eAAejC,EAAK3xI,EAAM0xI,IAClB,OAAjB1xI,EAAKoR,SACN,CACC,IAAIu3H,EAAK3oI,EAAKyQ,aAAa,MACvB+F,EAASxW,EAAKyQ,aAAa,UAC3Bw+E,EAAUjvF,EAAKyQ,aAAa,WAEhCihI,EAAKrJ,WAAWM,EAAInyH,EAAQy4E,GAG7BjvF,EAAOA,EAAK2Q,YAId,OAAO+gI,GAIDjB,EAjFiB,IAqFzB11I,WAAWo6I,yBAA+D,oBAA7BA,yBAA2CA,8BAA2BzzI,EAcnH,IAAI0zI,sBAAwB/E,gBAAgBG,SAAS,WAEpD,IAAIC,EAAQ,IAAIK,cAAc,IAAIrmC,kBA8RlC,OAvRAgmC,EAAM3mH,OAAS,SAAS2nH,EAAK7qI,GAE5B,OAAO,MA+FR6pI,EAAM/D,OAAS,SAASiF,EAAK3xI,EAAM0xI,GAElC,GAAY,MAARA,EACJ,CACC,IAAIn7H,EAASm7H,EAAKn7H,OAGlB,IAFAvW,EAAOA,EAAK0Q,WAEG,MAAR1Q,GACP,CACC,GAAIA,EAAKuQ,UAAY9H,YAAY+H,mBAE3B1V,KAAK84I,eAAejC,EAAK3xI,EAAM0xI,GAEnC,GAAqB,aAAjB1xI,EAAKoR,SAERsgI,EAAK18F,oBAED,GAAqB,MAAjBh1C,EAAKoR,SAEbsgI,EAAKzmC,QAAQh2D,gBAET,GAAqB,MAAjBj1C,EAAKoR,SAEbsgI,EAAKzmC,QAAQ/1D,eAET,GAAqB,OAAjBl1C,EAAKoR,SACd,CACC,IAAIu3H,EAAK3oI,EAAKyQ,aAAa,MAC3Bk4H,EAAK/oI,YAAY+G,IAAIgiI,IAAOA,EAC5B,IAAIj8G,EAAO1sB,EAAKyQ,aAAa,QACzB+iC,EAAcxzC,EAAKyQ,aAAa,eAChC+F,EAASxW,EAAKyQ,aAAa,UAC3B04H,EAAOnpI,EAAKyQ,aAAa,QACzBu8H,EAAWhtI,EAAKyQ,aAAa,YAC7BkkC,EAAwC,KAA/B30C,EAAKyQ,aAAa,UAC3BtH,EAAO/F,QAAQqQ,eAAezT,GAC9ByE,EAAM,KAEV,GAAc,MAAV+R,EAEH/R,EAAMitI,EAAKn+F,QAAQo1F,EAAIj8G,EAAMlW,EAAQg9B,QAEjC,GAAY,MAAR21F,EACT,CACC,IAAI9jI,EAAS+vI,sBAA+B,UAAIhyI,QAAQ6M,KAAK9G,GAAQ,KACrE1E,EAAMitI,EAAKh9F,QAAQi0F,EAAIj8G,EAAMy8G,EAAM31F,EAAanuC,QAE5C,GAAgB,MAAZ2nI,GAA6B,MAAR7jI,GAAgBA,EAAKlM,OAAS,EAC5D,CACC,IAAI6P,EAAOyJ,EAAOi0H,UAAUwC,GACxBxqI,EAAQxC,EAAKyQ,aAAa,SAElB,MAAR3D,GAAyB,MAATtK,IAEnBsK,EAAOyJ,EAAOxK,MAAMq9E,UAAUt8E,IACzB0Z,SAAShkB,GAGf,IAAIwmI,EAAiB,KAET,MAAR7/H,GAAgBA,EAAKlM,OAAS,GAAKm4I,sBAAsBthF,YAE5Dk1E,EAAiB5lI,QAAQ6M,KAAK9G,IAG/B1E,EAAMitI,EAAKrI,aAAaV,EAAIj8G,EAAM5f,EAAM0mC,EAAaw1F,EAAgBr0F,OAGtE,CACC,IAAIxlC,EAAW/L,QAAQsO,cAAc1R,GAErC,GAAImP,EAASlS,OAAS,EAErB,GAAY,MAARyvB,GAIH,IAFA,IAAI6iB,EAAQmiG,EAAKx9F,eAAey0F,GAEvBhpI,EAAE,EAAGA,EAAEwP,EAASlS,OAAQ0C,IAIhC,GAAsB,cAFlBoN,EAAQoC,EAASxP,IAEXyR,SAETsgI,EAAKpiG,UAAUC,EAAO,YAElB,GAAsB,OAAlBxiC,EAAMqE,SACf,CACC,IAAIhM,EAAM2H,EAAM0D,aAAa,MACzB4kI,EAAMtoI,EAAM0D,aAAa,UAC7BihI,EAAKxI,gBAAgB35F,EAAOnqC,EAAKiwI,QAKpC,CACC,IAAIhmG,EAAS,KAyBTziB,EAAM8kH,EAAKrI,aAAaV,EAAIj8G,GAxBnB,WAEZ,IAAIsgH,EAAWz2H,EAAOi0H,UAAUn7F,EAAOxsC,OAEvC,GAAgB,MAAZmqI,EACJ,CACC,IAAIziI,EAAQyiI,EAASziI,QACjB/H,EAAQ6sC,EAAO8E,QAAQ9E,EAAO+E,eAAeqsE,UAOjD,OALa,MAATj+G,GAEH+H,EAAMic,SAAShkB,GAGT+H,EAOR,OAHC5I,MAAMyE,KAAK,YAAY4mI,EAAS,cAG1B,OAGsC,KAAM,KAAMr4F,GAmB1D,IAlBAtF,EAASqiG,EAAKviG,WAIdpqC,QAAQD,YAAYuqC,EAAQ,UAAU,WAErCqiG,EAAKzmC,QAAQx2D,WAAW7nB,GAAK,SAAS3pB,GAErC,IAAIsb,EAAKnb,QAAQqgB,aAAalN,EAAOxK,MAAM0W,UAC1C1d,QAAQ04B,WAAWx6B,GAAM8B,QAAQ44B,WAAW16B,IAE7C,OAAOsT,EAAOkzH,UAAU,KAAMpkI,IAASkZ,EAAGrU,EAAGqU,EAAGpU,MAGjDunI,EAAKzmC,QAAQ53D,SAAU,KAIf1zC,EAAE,EAAGA,EAAEwP,EAASlS,OAAQ0C,IACjC,CACC,IAAIoN,EAEJ,GAAsB,cAFlBA,EAAQoC,EAASxP,IAEXyR,SAETsgI,EAAKpiG,UAAUD,EAAQ,YAEnB,GAAsB,OAAlBtiC,EAAMqE,SACf,CACKhM,EAAM2H,EAAM0D,aAAa,MAA7B,IACI9E,EAAMoB,EAAM0D,aAAa,YAChBihI,EAAKpiG,UAAUD,EAAQjqC,EAAKuG,GAAOqhI,GACzCvsB,UAAY1zG,EAAM0D,aAAa,YAS3C,GAAW,MAAPhM,EACJ,CACC,IAAIxF,EAAKe,EAAKyQ,aAAa,MAEjB,MAANxR,GAAcA,EAAGhC,OAAS,GAE7BwH,EAAItF,aAAa,KAAMF,IAO5Be,EAAOA,EAAK2Q,aAId,OAAO+gI,GAIDjB,EAhS6C,IA+lBrD,OApTA2E,sBAAsBthF,WAAY,EAElC/4D,WAAWq6I,2BAAyD,IAA1BA,sBAAwCA,2BAAwB1zI,EAM1G2uI,gBAAgBG,SAAS,WAaxB,IAAIC,EAAQ,IAAIK,cAAc,IAAIvmC,oBAkClC,OA3BAkmC,EAAM3mH,OAAS,SAAS2nH,EAAK7qI,GAE5B,OAAO,MAQR6pI,EAAM/D,OAAS,SAASiF,EAAK3xI,EAAM0xI,GAElC,IAAI4D,EAAMt1I,EAAKZ,qBAAqB,WAAW,GAW/C,OATW,MAAPk2I,EAEHx6I,KAAK84I,eAAejC,EAAK2D,EAAK5D,GAEd,MAARA,IAERA,EAAKlnC,OAASxqG,GAGR0xI,GAIDjB,EA/CiB,IAmDzB11I,WAAWw6I,wBAA6D,oBAA5BA,wBAA0CA,6BAA0B7zI,EAMhH2uI,gBAAgBG,SAAS,WAkBxB,IAAIC,EAAQ,IAAIK,cAAc,IAAIpmC,SACjC,CAAC,WAAY,eAAgB,iBAC7B,cAAe,iBAAkB,qBA0NlC,OAlKA+lC,EAAM8C,YAAc,SAAS5B,EAAK3xI,EAAM4G,GAGvC,IAAI6jI,EAAczqI,EAAKyQ,aAAa,eAEjB,MAAfg6H,IAEHzqI,EAAKymD,gBAAgB,eACrB7/C,EAAI6jI,YAAc7jI,EAAI4jI,UAAUC,IAIjC,IAAIE,EAAe3qI,EAAKyQ,aAAa,gBAQrC,OANoB,MAAhBk6H,IAEH3qI,EAAKymD,gBAAgB,gBACrB7/C,EAAI+jI,aAAe/jI,EAAI4jI,UAAUG,IAG3B/jI,GAQR6pI,EAAMoD,YAAc,SAASlC,EAAK5kI,EAAOnG,GAExC,GAAsB,SAAlBmG,EAAMqE,SACV,CACC,IAAIokI,EAAOzoI,EAAM0D,aAAa,MAE9B,GAAY,aAAR+kI,EAGH,YADA16I,KAAK26I,gBAAgB9D,EAAK5kI,EAAOnG,QAI9B,GAAsB,MAAlBmG,EAAMqE,SAGd,YADAtW,KAAK46I,SAAS/D,EAAK5kI,EAAOnG,GAI3BkqI,cAAc5pI,UAAU2sI,YAAY3tI,MAAMpL,KAAMqL,YAQjDsqI,EAAMiF,SAAW,SAAS/D,EAAK3xI,EAAMuW,GAGpC,IADA,IAAI5K,EAAM3L,EAAK0Q,WACD,MAAP/E,GACP,CACC,GAAoB,OAAhBA,EAAIyF,SACR,CACC,IAAIu3H,EAAKh9H,EAAI8E,aAAa,MACtBhM,EAAMkH,EAAI8E,aAAa,WACvBjO,EAAQmJ,EAAI8E,aAAa,SACzBxB,EAAU,KAEd,GAAW,MAAPxK,EAIY,OAFfwK,EAAUtT,SAAS4pD,eAAe9gD,KAEF,MAATjC,IAEtByM,EAAQzM,MAAMlB,SAAW,IAAMkB,OAIjC,CACC,IAAI0H,EAAIhN,SAASyO,EAAI8E,aAAa,MAC9BtG,EAAIjN,SAASyO,EAAI8E,aAAa,MAC9B1N,EAAQ4I,EAAI8E,aAAa,SACzB9N,EAASgJ,EAAI8E,aAAa,WAG9BxB,EAAUtT,SAASG,cAAc,QACzB0G,MAAMlB,QAAUkB,EAEd,IAAIyB,SAASrE,YAAY+G,IAAIgiI,IAAOA,EAC7C15H,EAAS/E,EAAGC,EAAGpH,EAAOJ,GAAQ,GAAO,GAClC8C,YAAW,GAIN,SAANkjI,EAEHpyH,EAAOy3H,kBAAkB/+H,GAEX,WAAN05H,EAERpyH,EAAO63H,oBAAoBn/H,GAEb,SAAN05H,EAERpyH,EAAOk4H,kBAAkBx/H,GAEX,UAAN05H,EAERpyH,EAAO83H,mBAAmBp/H,GAEZ,OAAN05H,GAERpyH,EAAOo/H,gBAAgB1mI,OAGA,YAAhBtD,EAAIyF,SAEZxR,YAAYC,IAAI8L,EAAI8E,aAAa,aAET,cAAhB9E,EAAIyF,UAEZpW,SAAS8D,KAAK,aAAc6M,EAAI8E,aAAa,SAG9C9E,EAAMA,EAAIgF,cASZ8/H,EAAMgF,gBAAkB,SAAS9D,EAAK3xI,EAAMuW,GAEnB,MAApBA,EAAOi0H,YAEVj0H,EAAOi0H,UAAY,IAIpB,IADA,IAAIr7H,EAAW/L,QAAQsO,cAAc1R,GAC5Bo6D,EAAE,EAAGA,EAAEjrD,EAASlS,OAAQm9D,IACjC,CAIC,IAHA,IAAIv/D,EAAOsU,EAASirD,GAAG3pD,aAAa,MAChC1D,EAAQoC,EAASirD,GAAG1pD,WAER,MAAT3D,GAAmC,GAAlBA,EAAMwD,UAE7BxD,EAAQA,EAAM4D,YAGF,MAAT5D,IAOHwJ,EAAOi0H,UAAU3vI,GAAQ82I,EAAIG,WAAW/kI,MAMpC0jI,EA9OiB,IAkPzB11I,WAAW66I,cAAyC,oBAAlBA,cAAgCA,mBAAgBl0I,EAC3E3G,aA5izFP,6BAAO,QAAW,sDAAP,+BAAF,SAAS,4J,iCCMH,SAAS86I,IACtB,IAAIt3G,EAAO,GAAGg0B,MAAMloD,KAAKlE,UAAW,GAEpC,OAAoB,IAAhBo4B,EAAKthC,OACAshC,EAAK,GAGP,WACL,IAAK,IAAI5+B,EAAI,EAAGA,EAAI4+B,EAAKthC,OAAQ0C,IAC3B4+B,EAAK5+B,IAAM4+B,EAAK5+B,GAAGuG,OACrBq4B,EAAK5+B,GAAGuG,MAAMpL,KAAMqL,YAlB5B,mC,iCCAe,SAAS2vI,EAAiBC,GACvC,GAAsB,oBAAXC,QAA0BA,OAAOC,YAAY3rE,OAAOyrE,GAAO,OAAO5zD,MAAM3zE,KAAKunI,GAD1F,mC,iCCME,IAEgCnvI,EAPhC0jE,OAAO4rE,eAAez0I,EAAS,aAAc,CAC3CoB,OAAO,IAETpB,EAAQ00I,aAAU,EAMlB,IAAIC,GAF4BxvI,EAFe,EAAQ,OAEFA,EAAIyvI,WAAazvI,EAAM,CAAE,QAAWA,GAGzFnF,EAAQ00I,QAAUC,EAClB50I,EAAOC,QAAU20I,G,iCCVnB,IAAIE,EAAyB,EAAQ,IAEjCC,EAA0B,EAAQ,IAEtCjsE,OAAO4rE,eAAez0I,EAAS,aAAc,CAC3CoB,OAAO,IAETpB,EAAQ00I,aAAU,EAElB,IAAIK,EAAQD,EAAwB,EAAQ,IAExCE,EAAoBH,EAAuB,EAAQ,MAEnDI,EAAYJ,EAAuB,EAAQ,KAI3CK,EAAmB,SAA0BC,EAAO3C,GACtD,OAAOuC,EAAM16I,cAAc46I,EAAUP,QAAS7rE,OAAOusE,OAAO,GAAID,EAAO,CACrE3C,IAAKA,EACLvnH,KAAM+pH,EAAkBN,YAI5BQ,EAAiBG,YAAc,mBAE/B,IAAIV,EAAWI,EAAMO,WAAWJ,GAEhCl1I,EAAQ00I,QAAUC,G,iCC5BlB9rE,OAAO4rE,eAAez0I,EAAS,aAAc,CAAEoB,OAAO,IAEtDpB,EAAQ00I,QADe,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,uOAA2O,KAAQ,cAAe,MAAS,W,iCCGva,IAEgCvvI,EAPhC0jE,OAAO4rE,eAAez0I,EAAS,aAAc,CAC3CoB,OAAO,IAETpB,EAAQ00I,aAAU,EAMlB,IAAIC,GAF4BxvI,EAFgB,EAAQ,OAEHA,EAAIyvI,WAAazvI,EAAM,CAAE,QAAWA,GAGzFnF,EAAQ00I,QAAUC,EAClB50I,EAAOC,QAAU20I,G,iCCVnB,IAAIE,EAAyB,EAAQ,IAEjCC,EAA0B,EAAQ,IAEtCjsE,OAAO4rE,eAAez0I,EAAS,aAAc,CAC3CoB,OAAO,IAETpB,EAAQ00I,aAAU,EAElB,IAAIK,EAAQD,EAAwB,EAAQ,IAExCS,EAAqBV,EAAuB,EAAQ,MAEpDI,EAAYJ,EAAuB,EAAQ,KAI3CW,EAAoB,SAA2BL,EAAO3C,GACxD,OAAOuC,EAAM16I,cAAc46I,EAAUP,QAAS7rE,OAAOusE,OAAO,GAAID,EAAO,CACrE3C,IAAKA,EACLvnH,KAAMsqH,EAAmBb,YAI7Bc,EAAkBH,YAAc,oBAEhC,IAAIV,EAAWI,EAAMO,WAAWE,GAEhCx1I,EAAQ00I,QAAUC,G,iCC5BlB9rE,OAAO4rE,eAAez0I,EAAS,aAAc,CAAEoB,OAAO,IAEtDpB,EAAQ00I,QADgB,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,wRAA4R,KAAQ,eAAgB,MAAS,W,iCCG1d,IAEgCvvI,EAPhC0jE,OAAO4rE,eAAez0I,EAAS,aAAc,CAC3CoB,OAAO,IAETpB,EAAQ00I,aAAU,EAMlB,IAAIC,GAF4BxvI,EAFsB,EAAQ,OAETA,EAAIyvI,WAAazvI,EAAM,CAAE,QAAWA,GAGzFnF,EAAQ00I,QAAUC,EAClB50I,EAAOC,QAAU20I,G,iCCVnB,IAAIE,EAAyB,EAAQ,IAEjCC,EAA0B,EAAQ,IAEtCjsE,OAAO4rE,eAAez0I,EAAS,aAAc,CAC3CoB,OAAO,IAETpB,EAAQ00I,aAAU,EAElB,IAAIK,EAAQD,EAAwB,EAAQ,IAExCW,EAA2BZ,EAAuB,EAAQ,MAE1DI,EAAYJ,EAAuB,EAAQ,KAI3Ca,EAA0B,SAAiCP,EAAO3C,GACpE,OAAOuC,EAAM16I,cAAc46I,EAAUP,QAAS7rE,OAAOusE,OAAO,GAAID,EAAO,CACrE3C,IAAKA,EACLvnH,KAAMwqH,EAAyBf,YAInCgB,EAAwBL,YAAc,0BAEtC,IAAIV,EAAWI,EAAMO,WAAWI,GAEhC11I,EAAQ00I,QAAUC,G,iCC5BlB9rE,OAAO4rE,eAAez0I,EAAS,aAAc,CAAEoB,OAAO,IAEtDpB,EAAQ00I,QADsB,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,uOAA2O,KAAQ,qBAAsB,MAAS,W,kDCHvb,iFASE,SAAUiB,EAAQ7N,GAEV/nI,OAAOC,QAAU8nI,EAAQ6N,GAFlC,CAMmB,oBAAT3xC,KAAuBA,KACN,oBAAXnpG,OAAyBA,YACd,IAAX86I,OAAyBA,OACxCt8I,MACC,SAASs8I,QACR,aAEAA,OAASA,QAAU,GACnB,IAAIC,QAAUD,OAAOE,OACjBC,QAAU,QAEVv1I,OACJ,GAAqCR,OAAOC,QACxC,IACIO,OAASiO,KAAK,4BAChB,MAAOzM,GACLxB,YAASN,EAIjB,IAAI81I,SACE,mEACFC,OAAS,SAASC,GAElB,IADA,IAAIhsI,EAAI,GACC/L,EAAI,EAAGiwC,EAAI8nG,EAAIz6I,OAAQ0C,EAAIiwC,EAAGjwC,IAAK+L,EAAEgsI,EAAIpuI,OAAO3J,IAAMA,EAC/D,OAAO+L,EAHE,CAIX8rI,UACEG,aAAe9jI,OAAO8jI,aAEtBC,QAAU,SAAS7tI,GACnB,GAAIA,EAAE9M,OAAS,EAEX,OADI46I,EAAK9tI,EAAEN,WAAW,IACV,IAAOM,EACb8tI,EAAK,KAASF,aAAa,IAAQE,IAAO,GAC1BF,aAAa,IAAa,GAALE,GACpCF,aAAa,IAASE,IAAO,GAAM,IAChCF,aAAa,IAASE,IAAQ,EAAK,IACnCF,aAAa,IAAsB,GAAbE,GAEhC,IAAIA,EAAK,MAC0B,MAA5B9tI,EAAEN,WAAW,GAAK,QAClBM,EAAEN,WAAW,GAAK,OACzB,OAAQkuI,aAAa,IAASE,IAAO,GAAM,GACjCF,aAAa,IAASE,IAAO,GAAM,IACnCF,aAAa,IAASE,IAAQ,EAAK,IACnCF,aAAa,IAAsB,GAAbE,IAGpCC,QAAU,gDACVC,KAAO,SAASC,GAChB,OAAOA,EAAEtuI,QAAQouI,QAASF,UAE1BK,UAAY,SAASC,GACrB,IAAIC,EAAS,CAAC,EAAG,EAAG,GAAGD,EAAIj7I,OAAS,GACpCm7I,EAAMF,EAAIzuI,WAAW,IAAM,IACnByuI,EAAIj7I,OAAS,EAAIi7I,EAAIzuI,WAAW,GAAK,IAAM,GAC3CyuI,EAAIj7I,OAAS,EAAIi7I,EAAIzuI,WAAW,GAAK,GAO7C,MANQ,CACJ+tI,SAASluI,OAAQ8uI,IAAQ,IACzBZ,SAASluI,OAAQ8uI,IAAQ,GAAM,IAC/BD,GAAU,EAAI,IAAMX,SAASluI,OAAQ8uI,IAAQ,EAAK,IAClDD,GAAU,EAAI,IAAMX,SAASluI,OAAa,GAAN8uI,IAE3BpuI,KAAK,KAElBquI,KAAOjB,OAAOiB,KAAO,SAASlhI,GAC9B,OAAOigI,OAAOiB,KAAKlhI,IACnB,SAASA,GACT,OAAOA,EAAEzN,QAAQ,eAAgBuuI,YAEjCK,QAAU,SAASN,GAEnB,MADyD,wBAAtC1tE,OAAOpjE,UAAUxK,SAAS2N,KAAK2tI,GAC5BA,EAAEt7I,SAAS,UAC3B27I,KAAKN,KAAKlkI,OAAOmkI,MAEvBluH,OAAS,SAASkuH,EAAGO,GACrB,OAAQA,EAEFD,QAAQzkI,OAAOmkI,IAAItuI,QAAQ,UAAU,SAAS8uI,GAC5C,MAAa,KAANA,EAAY,IAAM,OAC1B9uI,QAAQ,KAAM,IAHf4uI,QAAQN,IAKdS,UAAY,SAAST,GAAK,OAAOluH,OAAOkuH,GAAG,IAE3CU,QAAU,8EACVC,QAAU,SAASC,GACnB,OAAOA,EAAK37I,QACZ,KAAK,EACD,IAIAya,IAJW,EAAOkhI,EAAKnvI,WAAW,KAAO,IAC9B,GAAOmvI,EAAKnvI,WAAW,KAAO,IAC9B,GAAOmvI,EAAKnvI,WAAW,KAAQ,EAC/B,GAAOmvI,EAAKnvI,WAAW,IACpB,MACd,OAAQkuI,aAAgC,OAAlBjgI,IAAY,KACxBigI,aAAgC,OAAT,KAATjgI,IAC5B,KAAK,EACD,OAAOigI,cACD,GAAOiB,EAAKnvI,WAAW,KAAO,IACxB,GAAOmvI,EAAKnvI,WAAW,KAAO,EAC9B,GAAOmvI,EAAKnvI,WAAW,IAEvC,QACI,OAAQkuI,cACF,GAAOiB,EAAKnvI,WAAW,KAAO,EACxB,GAAOmvI,EAAKnvI,WAAW,MAIvCovI,KAAO,SAAS1hI,GAChB,OAAOA,EAAEzN,QAAQgvI,QAASC,UAE1BG,UAAY,SAASF,GACrB,IAAI5lE,EAAM4lE,EAAK37I,OACfk7I,EAASnlE,EAAM,EACfl1D,GAAKk1D,EAAM,EAAIykE,OAAOmB,EAAKtvI,OAAO,KAAO,GAAK,IACvC0pE,EAAM,EAAIykE,OAAOmB,EAAKtvI,OAAO,KAAO,GAAK,IACzC0pE,EAAM,EAAIykE,OAAOmB,EAAKtvI,OAAO,KAAQ,EAAI,IACzC0pE,EAAM,EAAIykE,OAAOmB,EAAKtvI,OAAO,IAAY,GAChDoa,EAAQ,CACJi0H,aAAc75H,IAAM,IACpB65H,aAAc75H,IAAO,EAAK,KAC1B65H,aAA0B,IAAZ75H,IAGlB,OADA4F,EAAMzmB,QAAU,CAAC,EAAG,EAAG,EAAG,GAAGk7I,GACtBz0H,EAAM1Z,KAAK,KAElB+uI,MAAQ3B,OAAO4B,KAAO,SAASliI,GAC/B,OAAOsgI,OAAO4B,KAAKliI,IACnB,SAASA,GACT,OAAOA,EAAEpN,QAAQ,WAAYovI,YAE7BE,KAAO,SAASliI,GAChB,OAAOiiI,MAAMllI,OAAOiD,GAAGpN,QAAQ,oBAAqB,MAEpDuvI,QAAUj3I,OACVA,OAAOwM,MAAQ0qI,YAAcl3I,OAAOwM,OAAS0qI,WAAW1qI,KACtD,SAASsI,GACP,OAAQA,EAAE/P,cAAgB/E,OAAO+E,YACvB+P,EAAI9U,OAAOwM,KAAKsI,EAAG,WAAWpa,YAE1C,SAASoa,GACP,OAAQA,EAAE/P,cAAgB/E,OAAO+E,YACvB+P,EAAI,IAAI9U,OAAO8U,EAAG,WAAWpa,YAEzC,SAASoa,GAAK,OAAO+hI,KAAKE,MAAMjiI,KAClC41H,OAAS,SAAS51H,GAClB,OAAOmiI,QACHplI,OAAOiD,GAAGpN,QAAQ,SAAS,SAAS8uI,GAAM,MAAa,KAANA,EAAY,IAAM,OAC9D9uI,QAAQ,oBAAqB,MAGtCyvI,WAAa,WACb,IAAI7B,EAASF,OAAOE,OAEpB,OADAF,OAAOE,OAASD,QACTC,GAkBX,GAfAF,OAAOE,OAAS,CACZr8I,QAASs8I,QACTyB,KAAMA,KACNX,KAAMA,KACNe,WAAY1M,OACZ2M,SAAUvvH,OACViuH,KAAMA,KACNjuH,OAAQA,OACR2uH,UAAWA,UACXI,KAAMA,KACNnM,OAAQA,OACRyM,WAAYA,WACZG,WAAYt3I,QAGqB,mBAA1BsoE,OAAO4rE,eAA+B,CAC7C,IAAIqD,OAAS,SAASv8I,GAClB,MAAO,CAAC6F,MAAM7F,EAAEw8I,YAAW,EAAMC,UAAS,EAAKC,cAAa,IAEhEtC,OAAOE,OAAOqC,aAAe,WACzBrvE,OAAO4rE,eACHriI,OAAO3M,UAAW,aAAcqyI,QAAO,WACnC,OAAO7M,OAAO5xI,UAEtBwvE,OAAO4rE,eACHriI,OAAO3M,UAAW,WAAYqyI,QAAO,SAAUhB,GAC3C,OAAOzuH,OAAOhvB,KAAMy9I,OAE5BjuE,OAAO4rE,eACHriI,OAAO3M,UAAW,cAAeqyI,QAAO,WACpC,OAAOzvH,OAAOhvB,MAAM,QAoBpC,OAbIs8I,OAAe,SACfE,OAASF,OAAOE,QAIiB91I,OAAOC,QACxCD,OAAOC,QAAQ61I,OAASF,OAAOE,QAI/B,6BAAO,GAAI,8BAAF,WAAc,OAAOF,OAAOE,QAAQ,oIAG1C,CAACA,OAAQF,OAAOE,a,kGC9NvB,EAAqB,CACvBsC,QAAS,EACTC,QAAS,GAEPC,EAAe,CAAC,EAAG,GACZC,EAAa,CACtBxiI,KAAM,CACJu2C,OAAQ,CAAC,KAAM,MACfh+C,SAAU,EACV4H,OAAQ,EAAE,EAAG,GACboiI,aAAcA,GAEhBhiI,MAAO,CACLg2C,OAAQ,CAAC,KAAM,MACfh+C,SAAU,EACV4H,OAAQ,CAAC,EAAG,GACZoiI,aAAcA,GAEhB/hI,IAAK,CACH+1C,OAAQ,CAAC,KAAM,MACfh+C,SAAU,EACV4H,OAAQ,CAAC,GAAI,GACboiI,aAAcA,GAEhB7hI,OAAQ,CACN61C,OAAQ,CAAC,KAAM,MACfh+C,SAAU,EACV4H,OAAQ,CAAC,EAAG,GACZoiI,aAAcA,GAEhBE,QAAS,CACPlsF,OAAQ,CAAC,KAAM,MACfh+C,SAAU,EACV4H,OAAQ,CAAC,GAAI,GACboiI,aAAcA,GAEhBG,QAAS,CACPnsF,OAAQ,CAAC,KAAM,MACfh+C,SAAU,EACV4H,OAAQ,EAAE,EAAG,GACboiI,aAAcA,GAEhBI,SAAU,CACRpsF,OAAQ,CAAC,KAAM,MACfh+C,SAAU,EACV4H,OAAQ,CAAC,GAAI,GACboiI,aAAcA,GAEhBK,SAAU,CACRrsF,OAAQ,CAAC,KAAM,MACfh+C,SAAU,EACV4H,OAAQ,CAAC,EAAG,GACZoiI,aAAcA,GAEhBM,YAAa,CACXtsF,OAAQ,CAAC,KAAM,MACfh+C,SAAU,EACV4H,OAAQ,CAAC,EAAG,GACZoiI,aAAcA,GAEhBO,YAAa,CACXvsF,OAAQ,CAAC,KAAM,MACfh+C,SAAU,EACV4H,OAAQ,CAAC,EAAG,GACZoiI,aAAcA,GAEhBQ,WAAY,CACVxsF,OAAQ,CAAC,KAAM,MACfh+C,SAAU,EACV4H,OAAQ,CAAC,EAAG,GACZoiI,aAAcA,GAEhBS,WAAY,CACVzsF,OAAQ,CAAC,KAAM,MACfh+C,SAAU,EACV4H,OAAQ,EAAE,EAAG,GACboiI,aAAcA,IC7DH,EAbD,SAAiBlD,GAC7B,IAAI9nD,EAAU8nD,EAAM9nD,QAChB0rD,EAAY5D,EAAM4D,UAClBv7I,EAAK23I,EAAM33I,GACXw7I,EAAoB7D,EAAM6D,kBAC9B,OAAO,IAAM3+I,cAAc,MAAO,CAChCkvC,UAAW,GAAG+sC,OAAOyiE,EAAW,UAChCv7I,GAAIA,EACJu2I,KAAM,UACNhzI,MAAOi4I,GACa,mBAAZ3rD,EAAyBA,IAAYA,ICZjD,SAAS4rD,EAAQ9zI,GAAmV,OAAtO8zI,EAArD,mBAAX1E,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBrvI,GAAO,cAAcA,GAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXovI,QAAyBpvI,EAAIG,cAAgBivI,QAAUpvI,IAAQovI,OAAO9uI,UAAY,gBAAkBN,IAAyBA,GAEnX,SAAS+zI,EAAQzG,EAAQ0G,GAAkB,IAAIC,EAAOvwE,OAAOuwE,KAAK3G,GAAS,GAAI5pE,OAAOwwE,sBAAuB,CAAE,IAAIC,EAAUzwE,OAAOwwE,sBAAsB5G,GAAa0G,IAAgBG,EAAUA,EAAQ1kI,QAAO,SAAU2kI,GAAO,OAAO1wE,OAAO2wE,yBAAyB/G,EAAQ8G,GAAKxB,eAAgBqB,EAAKnzI,KAAKxB,MAAM20I,EAAME,GAAY,OAAOF,EAI9U,SAASK,EAAgBt0I,EAAKQ,EAAKvE,GAAiK,OAApJuE,KAAOR,EAAO0jE,OAAO4rE,eAAetvI,EAAKQ,EAAK,CAAEvE,MAAOA,EAAO22I,YAAY,EAAME,cAAc,EAAMD,UAAU,IAAkB7yI,EAAIQ,GAAOvE,EAAgB+D,EAE3M,SAASu0I,EAAyBv8H,EAAQw8H,GAAY,GAAc,MAAVx8H,EAAgB,MAAO,GAAI,IAAkExX,EAAKzH,EAAnE4Z,EAEzF,SAAuCqF,EAAQw8H,GAAY,GAAc,MAAVx8H,EAAgB,MAAO,GAAI,IAA2DxX,EAAKzH,EAA5D4Z,EAAS,GAAQ8hI,EAAa/wE,OAAOuwE,KAAKj8H,GAAqB,IAAKjf,EAAI,EAAGA,EAAI07I,EAAWp+I,OAAQ0C,IAAOyH,EAAMi0I,EAAW17I,GAAQy7I,EAAS//I,QAAQ+L,IAAQ,IAAamS,EAAOnS,GAAOwX,EAAOxX,IAAQ,OAAOmS,EAFxM+hI,CAA8B18H,EAAQw8H,GAAuB,GAAI9wE,OAAOwwE,sBAAuB,CAAE,IAAIS,EAAmBjxE,OAAOwwE,sBAAsBl8H,GAAS,IAAKjf,EAAI,EAAGA,EAAI47I,EAAiBt+I,OAAQ0C,IAAOyH,EAAMm0I,EAAiB57I,GAAQy7I,EAAS//I,QAAQ+L,IAAQ,GAAkBkjE,OAAOpjE,UAAUs0I,qBAAqBnxI,KAAKuU,EAAQxX,KAAgBmS,EAAOnS,GAAOwX,EAAOxX,IAAU,OAAOmS,EASne,IChBe,EDyGA,sBAzFD,SAAiBq9H,EAAO3C,GACpC,IAAIwH,EAAmB7E,EAAM6E,iBACzBC,EAAiB9E,EAAM/iD,QACvBA,OAA6B,IAAnB6nD,EAA4B,CAAC,SAAWA,EAClDC,EAAwB/E,EAAMgF,gBAC9BA,OAA4C,IAA1BD,EAAmC,EAAIA,EACzDE,EAAwBjF,EAAMkF,gBAC9BA,OAA4C,IAA1BD,EAAmC,GAAMA,EAC3DE,EAAenF,EAAMmF,aACrBC,EAAmBpF,EAAM4D,UACzBA,OAAiC,IAArBwB,EAA8B,aAAeA,EACzD7sI,EAAWynI,EAAMznI,SACjB8sI,EAAkBrF,EAAMqF,gBACxBC,EAAqBtF,EAAMsF,mBAC3BC,EAAiBvF,EAAMuF,eACvBC,EAAYxF,EAAMwF,UAClBC,EAAmBzF,EAAM0F,UACzBA,OAAiC,IAArBD,EAA8B,QAAUA,EACpDE,EAAe3F,EAAM1vH,MACrBA,OAAyB,IAAjBq1H,EAA0B,GAAKA,EACvCC,EAAwB5F,EAAM6F,qBAC9BA,OAAiD,IAA1BD,GAA2CA,EAClEE,EAAiB9F,EAAM8F,eACvBC,EAAsB/F,EAAM+F,oBAC5BlC,EAAoB7D,EAAM6D,kBAC1BmC,EAAYzB,EAAyBvE,EAAO,CAAC,mBAAoB,UAAW,kBAAmB,kBAAmB,eAAgB,YAAa,WAAY,kBAAmB,qBAAsB,iBAAkB,YAAa,YAAa,QAAS,uBAAwB,iBAAkB,sBAAuB,sBAE1TiG,EAAS,iBAAO,MACpB,8BAAoB5I,GAAK,WACvB,OAAO4I,EAAO18H,WAGhB,IAAI28H,EA7CN,SAAuBvjI,GAAU,IAAK,IAAI5Z,EAAI,EAAGA,EAAIwG,UAAUlJ,OAAQ0C,IAAK,CAAE,IAAIif,EAAyB,MAAhBzY,UAAUxG,GAAawG,UAAUxG,GAAK,GAAQA,EAAI,EAAKg7I,EAAQrwE,OAAO1rD,IAAS,GAAM3N,SAAQ,SAAU7J,GAAO8zI,EAAgB3hI,EAAQnS,EAAKwX,EAAOxX,OAAsBkjE,OAAOyyE,0BAA6BzyE,OAAO0yE,iBAAiBzjI,EAAQ+wD,OAAOyyE,0BAA0Bn+H,IAAmB+7H,EAAQrwE,OAAO1rD,IAAS3N,SAAQ,SAAU7J,GAAOkjE,OAAO4rE,eAAe38H,EAAQnS,EAAKkjE,OAAO2wE,yBAAyBr8H,EAAQxX,OAAe,OAAOmS,EA6C1f0jI,CAAc,GAAIL,GAE/B,YAAahG,IACfkG,EAAWI,aAAetG,EAAMlxI,SAGlC,IAiBIy3I,GAAiB,EACjBC,GAAc,EAElB,GAAoC,kBAAzBX,EACTU,EAAiBV,OACZ,GAAIA,GAA0D,WAAlC/B,EAAQ+B,GAAoC,CAC7E,IAAIY,EAAaZ,EAAqBY,WACtCF,GAAgC,IAAfE,EACjBD,GAA6B,IAAfC,EAGhB,OAAO,IAAMvhJ,cAAc,IAASwuE,OAAOusE,OAAO,CAChDyG,eAAgB7B,EAChBjB,UAAWA,EACX92I,MA/BoB,WACpB,IAAI65I,EAAsB3G,EAAM4G,aAC5BA,OAAuC,IAAxBD,EAAiC,KAAOA,EACvDzuD,EAAU8nD,EAAM9nD,QAChB7vF,EAAK23I,EAAM33I,GACf,MAAO,CAAC,IAAMnD,cAAc,MAAO,CACjCkvC,UAAW,GAAG+sC,OAAOyiE,EAAW,UAChCpzI,IAAK,SACJo2I,GAAe,IAAM1hJ,cAAc,EAAS,CAC7CsL,IAAK,UACLozI,UAAWA,EACXv7I,GAAIA,EACJ6vF,QAASA,EACT2rD,kBAAmBA,MAmBrBjkI,OAAQq9E,EACR4pD,kBAAmB1D,EACnB2D,eAAgBpB,EAChBrI,IAAK4I,EACLc,WAAYz2H,EACZ02H,kBAAmBjB,EACnBkB,qBAAsB5B,EACtB6B,wBAAyB5B,EACzB6B,oBAAqB5B,EACrB6B,eAAgB5B,EAChB6B,oBAAqBvB,EACrBwB,mBAAoBf,EACpBC,YAAaA,EACbtB,gBAAiBA,EACjBqC,WAAYpC,EACZH,gBAAiBA,GAChBkB,GAAa3tI,M,gBEvGlB,SAASivI,IAA2Q,OAA9PA,EAAW9zE,OAAOusE,QAAU,SAAUt9H,GAAU,IAAK,IAAI5Z,EAAI,EAAGA,EAAIwG,UAAUlJ,OAAQ0C,IAAK,CAAE,IAAIif,EAASzY,UAAUxG,GAAI,IAAK,IAAIyH,KAAOwX,EAAc0rD,OAAOpjE,UAAUm3I,eAAeh0I,KAAKuU,EAAQxX,KAAQmS,EAAOnS,GAAOwX,EAAOxX,IAAY,OAAOmS,IAA2BrT,MAAMpL,KAAMqL,WAGhT,IAAIm4I,EAA4B,CAC9B1E,QAAS,EACTC,QAAS,GAEP0E,EAA6B,CAC/B3E,QAAS,EACTC,QAAS,GAEP,EAAe,CAAC,EAAG,GAChB,SAAS2E,EAAmBC,GACjC,MAAkC,kBAAvBA,EACFA,EAAqBH,EAA4BC,EAGnDH,EAASA,EAAS,GAAIG,GAA6BE,G,6BCdjDC,GAFyB,YAAM,UAAW,aAAc,QAAS,UAAW,WAEzD,YAAM,OAAQ,MAAO,SAAU,SAAU,OAAQ,QAAS,OAAQ,SAAU,WAAY,UAAW,UAAW,OAAQ,SCHpJ,SAAS,EAAgB93I,EAAKQ,EAAKvE,GAAiK,OAApJuE,KAAOR,EAAO0jE,OAAO4rE,eAAetvI,EAAKQ,EAAK,CAAEvE,MAAOA,EAAO22I,YAAY,EAAME,cAAc,EAAMD,UAAU,IAAkB7yI,EAAIQ,GAAOvE,EAAgB+D,EAE3M,SAAS+3I,EAAerkI,EAAK3a,GAAK,OAUlC,SAAyB2a,GAAO,GAAI6nE,MAAMy8D,QAAQtkI,GAAM,OAAOA,EAVtBukI,CAAgBvkI,IAQzD,SAA+BA,EAAK3a,GAAK,GAAsB,oBAAXq2I,UAA4BA,OAAOC,YAAY3rE,OAAOhwD,IAAO,OAAQ,IAAIwkI,EAAO,GAAQC,GAAK,EAAUC,GAAK,EAAWC,OAAKv9I,EAAW,IAAM,IAAK,IAAiCw9I,EAA7BC,EAAK7kI,EAAI07H,OAAOC,cAAmB8I,GAAMG,EAAKC,EAAG3rI,QAAQvH,QAAoB6yI,EAAKp3I,KAAKw3I,EAAGr8I,QAAYlD,GAAKm/I,EAAK7hJ,SAAW0C,GAA3Do/I,GAAK,IAAoE,MAAOv7I,GAAOw7I,GAAK,EAAMC,EAAKz7I,EAAO,QAAU,IAAWu7I,GAAsB,MAAhBI,EAAW,QAAWA,EAAW,SAAO,QAAU,GAAIH,EAAI,MAAMC,GAAQ,OAAOH,EARjaM,CAAsB9kI,EAAK3a,IAI5F,SAAqC0/I,EAAGC,GAAU,IAAKD,EAAG,OAAQ,GAAiB,iBAANA,EAAgB,OAAOE,EAAkBF,EAAGC,GAAS,IAAIxhI,EAAIwsD,OAAOpjE,UAAUxK,SAAS2N,KAAKg1I,GAAG9sF,MAAM,GAAI,GAAc,WAANz0C,GAAkBuhI,EAAEt4I,cAAa+W,EAAIuhI,EAAEt4I,YAAYlM,MAAM,GAAU,QAANijB,GAAqB,QAANA,EAAa,OAAOqkE,MAAM3zE,KAAK6wI,GAAI,GAAU,cAANvhI,GAAqB,2CAA2CzhB,KAAKyhB,GAAI,OAAOyhI,EAAkBF,EAAGC,GAJpTE,CAA4BllI,EAAK3a,IAEnI,WAA8B,MAAM,IAAI8/I,UAAU,6IAFuFC,GAMzI,SAASH,EAAkBjlI,EAAK04D,IAAkB,MAAPA,GAAeA,EAAM14D,EAAIrd,UAAQ+1E,EAAM14D,EAAIrd,QAAQ,IAAK,IAAI0C,EAAI,EAAGggJ,EAAO,IAAIx9D,MAAMnP,GAAMrzE,EAAIqzE,EAAKrzE,IAAOggJ,EAAKhgJ,GAAK2a,EAAI3a,GAAM,OAAOggJ,EAMhL,SAAS,IAA2Q,OAA9P,EAAWr1E,OAAOusE,QAAU,SAAUt9H,GAAU,IAAK,IAAI5Z,EAAI,EAAGA,EAAIwG,UAAUlJ,OAAQ0C,IAAK,CAAE,IAAIif,EAASzY,UAAUxG,GAAI,IAAK,IAAIyH,KAAOwX,EAAc0rD,OAAOpjE,UAAUm3I,eAAeh0I,KAAKuU,EAAQxX,KAAQmS,EAAOnS,GAAOwX,EAAOxX,IAAY,OAAOmS,IAA2BrT,MAAMpL,KAAMqL,WAUhT,IAiBIy5I,EAAmB,IAAIj8H,OAAO,KAAKo0D,OAAO2mE,EAAiB10I,KAAK,KAAM,kBAI1E,SAAS61I,EAA8B5wI,EAASurI,GAC9C,IAAIsF,EAAc7wI,EAAQ7N,KAE1B,KAAkC,IAA7B0+I,EAAYC,eAAsD,IAA7BD,EAAYE,eAAwD,IAA/BF,EAAYG,gBAA4C,WAAjBhxI,EAAQ7N,OAAsB6N,EAAQ2nI,MAAMsJ,SAAU,CAG1K,IAAIC,EA3BU,SAAqBv5I,EAAKi0I,GAC1C,IAAIuF,EAAS,GAETC,EAAU,EAAS,GAAIz5I,GAQ3B,OANAi0I,EAAK5pI,SAAQ,SAAU7J,GACjBR,GAAOQ,KAAOR,IAChBw5I,EAAOh5I,GAAOR,EAAIQ,UACXi5I,EAAQj5I,OAGZ,CACLg5I,OAAQA,EACRC,QAASA,GAcUC,CAAYrxI,EAAQ2nI,MAAMp0I,MAAO,CAAC,WAAY,OAAQ,QAAS,MAAO,SAAU,QAAS,UAAW,WACnH49I,EAASD,EAAaC,OACtBC,EAAUF,EAAaE,QAEvBE,EAAY,EAAS,EAAS,CAChC/3H,QAAS,gBACR43H,GAAS,CACVlxI,OAAQ,cACRnM,MAAOkM,EAAQ2nI,MAAMjvF,MAAQ,OAAS,OAGpC64F,EAAc,EAAS,EAAS,GAAIH,GAAU,CAChD5uG,cAAe,SAGb1kC,EAAQ,YAAakC,EAAS,CAChCzM,MAAOg+I,EACPx1G,UAAW,OAEb,OAAoB,gBAAoB,OAAQ,CAC9CxoC,MAAO+9I,EACPv1G,UAAW,IAAW/7B,EAAQ2nI,MAAM5rG,UAAW,GAAG+sC,OAAOyiE,EAAW,kCACnEztI,GAGL,OAAOkC,EAGT,IAAI,EAAuB,cAAiB,SAAU2nI,EAAO3C,GAC3D,IAAIwM,EAEAC,EAAoB,aAAiB,KACrCC,EAA2BD,EAAkB9C,kBAC7CgD,EAAeF,EAAkBE,aACjCt/F,EAAYo/F,EAAkBp/F,UAG9Bu/F,EAAmBlC,EADD,aAAiB/H,EAAMlxI,WAAakxI,EAAM8F,gBACT,GACnDh3I,EAAUm7I,EAAiB,GAC3Bp7I,EAAao7I,EAAiB,GAElC,aAAgB,WACV,YAAajK,GACfnxI,EAAWmxI,EAAMlxI,WAElB,CAACkxI,EAAMlxI,UAEV,IAAIo7I,EAAY,WACd,IAAI3+I,EAAQy0I,EAAMz0I,MACd2sF,EAAU8nD,EAAM9nD,QACpB,OAAQ3sF,IAAU2sF,GAAqB,IAAV3sF,GAa3B4+I,EAAuB,WACzB,IAAItD,EAAoB7G,EAAM6G,kBAC1BuD,EAAqBpK,EAAMoK,mBAC3BvC,EAAqB7H,EAAM6H,mBAC/B,OAAOhB,GFnGI,SAAuBjzC,GACpC,IAAIy2C,EAAqBz2C,EAAO5zC,WAC5BA,OAAoC,IAAvBqqF,EAAgC,EAAIA,EACjDC,EAAwB12C,EAAO22C,qBAC/BA,OAAiD,IAA1BD,EAAmC,GAAKA,EAC/DE,EAAwB52C,EAAO62C,mBAC/BA,OAA+C,IAA1BD,EAAmC,EAAIA,EAC5D3C,EAAqBj0C,EAAOi0C,mBAC5B6C,EAAe,CACjB/pI,KAAM,CACJu2C,OAAQ,CAAC,KAAM,MACfp2C,OAAQ,EAAE,EAAG,IAEfI,MAAO,CACLg2C,OAAQ,CAAC,KAAM,MACfp2C,OAAQ,CAAC,EAAG,IAEdK,IAAK,CACH+1C,OAAQ,CAAC,KAAM,MACfp2C,OAAQ,CAAC,GAAI,IAEfO,OAAQ,CACN61C,OAAQ,CAAC,KAAM,MACfp2C,OAAQ,CAAC,EAAG,IAEdsiI,QAAS,CACPlsF,OAAQ,CAAC,KAAM,MACfp2C,OAAQ,GAAGypI,EAAuBvqF,IAAc,IAElDqjF,QAAS,CACPnsF,OAAQ,CAAC,KAAM,MACfp2C,OAAQ,EAAE,IAAK2pI,EAAqBzqF,KAEtCsjF,SAAU,CACRpsF,OAAQ,CAAC,KAAM,MACfp2C,OAAQ,CAACypI,EAAuBvqF,GAAa,IAE/CujF,SAAU,CACRrsF,OAAQ,CAAC,KAAM,MACfp2C,OAAQ,CAAC,IAAK2pI,EAAqBzqF,KAErCwjF,YAAa,CACXtsF,OAAQ,CAAC,KAAM,MACfp2C,OAAQ,CAACypI,EAAuBvqF,EAAY,IAE9CyjF,YAAa,CACXvsF,OAAQ,CAAC,KAAM,MACfp2C,OAAQ,CAAC,EAAG2pI,EAAqBzqF,IAEnC0jF,WAAY,CACVxsF,OAAQ,CAAC,KAAM,MACfp2C,OAAQ,GAAGypI,EAAuBvqF,GAAa,IAEjD2jF,WAAY,CACVzsF,OAAQ,CAAC,KAAM,MACfp2C,OAAQ,EAAE,EAAG2pI,EAAqBzqF,KAYtC,OATA0T,OAAOuwE,KAAKyG,GAAcrwI,SAAQ,SAAU7J,GAC1Ck6I,EAAal6I,GAAOojG,EAAOw2C,mBAAqB5C,EAASA,EAAS,GAAIkD,EAAal6I,IAAO,CACxF0I,SAAU0uI,EAAmBC,GAC7B3E,aAAc,IACXsE,EAASA,EAAS,GAAIrE,EAAW3yI,IAAO,CAC3C0I,SAAU0uI,EAAmBC,KAE/B6C,EAAal6I,GAAKm6I,aAAc,KAE3BD,EEgCuBE,CAAc,CACxCR,mBAAoBA,EACpBvC,mBAAoBA,KAiDpBgD,EAAqB7K,EAAM4D,UAC3BkH,EAAgB9K,EAAM8K,cACtB9D,EAAoBhH,EAAMgH,kBAC1BjB,EAAsB/F,EAAM+F,oBAC5BlB,EAAmB7E,EAAM6E,iBACzB1kI,EAAQ6/H,EAAM7/H,MACd0jI,EAAoB7D,EAAM6D,kBAC1BtrI,EAAWynI,EAAMznI,SACjBqrI,EAAYoG,EAAa,UAAWa,GACpCE,EAAcj8I,IAEZ,YAAakxI,IAAUkK,MAC3Ba,GAAc,GAGhB,IAIIC,EACAC,EA9BE1/I,EACA2sF,EAwBF/hF,EAAQ8yI,EAA8B,YAAe1wI,GAAYA,EAAwB,gBAAoB,OAAQ,KAAMA,GAAWqrI,GACtIsH,EAAa/0I,EAAM6pI,MACnBmL,EAAW,IAAWD,EAAW92G,UAAW,EAAgB,GAAI02G,GAAiB,GAAG3pE,OAAOyiE,EAAW,UAAU,IAChHwH,EAAyB,IAAWvG,GAAsC,EAAnBgF,EAAe,GAAkC,GAAG1oE,OAAOyiE,EAAW,QAAuB,QAAdl5F,GAAsB,EAAgBm/F,EAAc,GAAG1oE,OAAOyiE,EAAW,KAAKziE,OAAOhhE,GAAQA,GAAS6oI,EAAiBvjJ,KAAK0a,IAAS0pI,IAa/Q,OATI1pI,IAAU6oI,EAAiBvjJ,KAAK0a,KAClC6qI,EAA6B,EAAS,EAAS,GAAInH,GAAoB,CACrErjF,WAAYrgD,IAEd8qI,EAAoB,CAClBzqF,WAAYrgD,IAII,gBAAoB,EAAW,EAAS,GAAI6/H,EAAO,CACrE4D,UAAWA,EACXiB,iBAAkBuG,EAClBrF,oBAAqBiB,GAAqBjB,GAAuBgE,EACjE1M,IAAKA,EACLwJ,kBAAmBsD,IACnBjyD,SA/CI3sF,EAAQy0I,EAAMz0I,MACd2sF,EAAU8nD,EAAM9nD,QAEN,IAAV3sF,EACKA,EAGF2sF,GAAW3sF,GAAS,IAyC3BuD,QAASi8I,EACT1F,gBAxGoB,SAAyBrhD,GACvC,YAAag8C,GACjBnxI,GAAWq7I,KAAsBlmD,GAG/Bg8C,EAAMqF,kBAAoB6E,KAC5BlK,EAAMqF,gBAAgBrhD,IAmGxBqnD,aApFiB,SAAsBptG,EAAS3tB,GAChD,IAAI6yH,EAAagH,IAEbzE,EAAYhyE,OAAOuwE,KAAKd,GAAY1jI,QAAO,SAAUjP,GACvD,OAAO2yI,EAAW3yI,GAAK0mD,OAAO,KAAO5mC,EAAM4mC,OAAO,IAAMisF,EAAW3yI,GAAK0mD,OAAO,KAAO5mC,EAAM4mC,OAAO,MAClG,GAEH,GAAKwuF,EAAL,CAKA,IAAI3xI,EAAOkqC,EAAQ/xB,wBACfo/H,EAAkB,CACpBnqI,IAAK,MACLR,KAAM,OAGJ+kI,EAAUjhJ,QAAQ,QAAU,GAAKihJ,EAAUjhJ,QAAQ,WAAa,EAClE6mJ,EAAgBnqI,IAAM,GAAGggE,OAAOptE,EAAKhI,OAASukB,EAAMxP,OAAO,GAAI,OACtD4kI,EAAUjhJ,QAAQ,QAAU,GAAKihJ,EAAUjhJ,QAAQ,WAAa,KACzE6mJ,EAAgBnqI,IAAM,GAAGggE,QAAQ7wD,EAAMxP,OAAO,GAAI,OAGhD4kI,EAAUjhJ,QAAQ,SAAW,GAAKihJ,EAAUjhJ,QAAQ,UAAY,EAClE6mJ,EAAgB3qI,KAAO,GAAGwgE,OAAOptE,EAAK5H,MAAQmkB,EAAMxP,OAAO,GAAI,OACtD4kI,EAAUjhJ,QAAQ,UAAY,GAAKihJ,EAAUjhJ,QAAQ,SAAW,KACzE6mJ,EAAgB3qI,KAAO,GAAGwgE,QAAQ7wD,EAAMxP,OAAO,GAAI,OAGrDm9B,EAAQryC,MAAM0/I,gBAAkB,GAAGnqE,OAAOmqE,EAAgB3qI,KAAM,KAAKwgE,OAAOmqE,EAAgBnqI,OAuD5F0iI,kBAAmBmH,EACnBpE,aAA2B,gBAAoB,OAAQ,CACrDxyG,UAAW,GAAG+sC,OAAOyiE,EAAW,kBAChCh4I,MAAOq/I,MAEPF,EAAc,YAAa50I,EAAO,CACpCi+B,UAAW+2G,IACRh1I,MAEP,EAAQ+pI,YAAc,UACtB,EAAQqL,aAAe,CACrB7F,UAAW,MACXH,eAAgB,gBAChBP,gBAAiB,GACjBE,gBAAiB,GACjBkF,oBAAoB,EACpBvC,oBAAoB,GAEP,O,oGChOA,SAAS2D,EAAmB9nI,GACzC,OCJa,SAA4BA,GACzC,GAAI6nE,MAAMy8D,QAAQtkI,GAAM,OAAO,OAAA+nI,EAAA,GAAiB/nI,GDGzC,CAAkBA,IAAQ,OAAAgoI,EAAA,GAAgBhoI,IAAQ,OAAAioI,EAAA,GAA2BjoI,IELvE,WACb,MAAM,IAAImlI,UAAU,wIFIwE,K,gKGE9F,SAAS+C,EAAaC,GAAW,IAAIC,EAErC,WAAuC,GAAuB,oBAAZC,UAA4BA,QAAQC,UAAW,OAAO,EAAO,GAAID,QAAQC,UAAUC,KAAM,OAAO,EAAO,GAAqB,mBAAVC,MAAsB,OAAO,EAAM,IAAiF,OAA3Ej9I,KAAKqB,UAAUxK,SAAS2N,KAAKs4I,QAAQC,UAAU/8I,KAAM,IAAI,iBAAyB,EAAQ,MAAOqD,GAAK,OAAO,GAFzP65I,GAA6B,OAAO,WAAc,IAAsCt7I,EAAlCu7I,EAAQ,YAAgBP,GAAkB,GAAIC,EAA2B,CAAE,IAAIO,EAAY,YAAgBnoJ,MAAMiM,YAAaU,EAASk7I,QAAQC,UAAUI,EAAO78I,UAAW88I,QAAqBx7I,EAASu7I,EAAM98I,MAAMpL,KAAMqL,WAAc,OAAO,YAA2BrL,KAAM2M,IAQxY,IAAI,EAAsB,SAAUy7I,GAClC,YAAUC,EAAQD,GAElB,IAAIE,EAASZ,EAAaW,GAE1B,SAASA,IACP,IAAIE,EAoCJ,OAlCA,YAAgBvoJ,KAAMqoJ,IAEtBE,EAAQD,EAAOl9I,MAAMpL,KAAMqL,YACrBm9I,WAAa,KAEnBD,EAAM33H,MAAQ,SAAUxiB,GAClBA,GACFA,EAAEi5B,kBAGJkhH,EAAME,kBAEN,IAAIC,EAAUH,EAAMzM,MAAM4M,QAEtBA,GACFA,KAIJH,EAAMI,gBAAkB,WAClBJ,EAAMzM,MAAM8M,WACdL,EAAMC,WAAahnJ,OAAOuR,YAAW,WACnCw1I,EAAM33H,UACkB,IAAvB23H,EAAMzM,MAAM8M,YAInBL,EAAME,gBAAkB,WAClBF,EAAMC,aACR5tD,aAAa2tD,EAAMC,YACnBD,EAAMC,WAAa,OAIhBD,EAwET,OArEA,YAAaF,EAAQ,CAAC,CACpB/7I,IAAK,oBACLvE,MAAO,WACL/H,KAAK2oJ,oBAEN,CACDr8I,IAAK,qBACLvE,MAAO,SAA4B8gJ,IAC7B7oJ,KAAK87I,MAAM8M,WAAaC,EAAUD,UAAY5oJ,KAAK87I,MAAMz1E,SAC3DrmE,KAAK8oJ,sBAGR,CACDx8I,IAAK,uBACLvE,MAAO,WACL/H,KAAKyoJ,oBAEN,CACDn8I,IAAK,oBACLvE,MAAO,WACL/H,KAAKyoJ,kBACLzoJ,KAAK2oJ,oBAEN,CACDr8I,IAAK,SACLvE,MAAO,WACL,IAAIghJ,EAAS/oJ,KAETgpJ,EAAchpJ,KAAK87I,MACnB4D,EAAYsJ,EAAYtJ,UACxBxvG,EAAY84G,EAAY94G,UACxBuD,EAAWu1G,EAAYv1G,SACvBw1G,EAAYD,EAAYC,UACxBvhJ,EAAQshJ,EAAYthJ,MACpBwhJ,EAAUF,EAAYE,QACtB70I,EAAW20I,EAAY30I,SACvB80I,EAASH,EAAYG,OACrBC,EAAiB,GAAGnsE,OAAOyiE,EAAW,WACtC2J,EAA2B75E,OAAOuwE,KAAK//I,KAAK87I,OAAOwN,QAAO,SAAUC,EAAKj9I,GAK3E,MAJyB,UAArBA,EAAIk9I,OAAO,EAAG,IAAuC,UAArBl9I,EAAIk9I,OAAO,EAAG,IAA0B,SAARl9I,IAClEi9I,EAAIj9I,GAAOy8I,EAAOjN,MAAMxvI,IAGnBi9I,IACN,IACCrkJ,EAAO,IAAMlE,cAAc,MAAOwuE,OAAOusE,OAAO,CAClD7rG,UAAW,IAAWk5G,EAAgBl5G,EAAW,YAAgB,GAAI,GAAG+sC,OAAOmsE,EAAgB,aAAc31G,IAC7G/rC,MAAOA,EACP+hJ,aAAczpJ,KAAKyoJ,gBACnBiB,aAAc1pJ,KAAK2oJ,gBACnBO,QAASA,GACRG,GAA2B,IAAMroJ,cAAc,MAAO,CACvDkvC,UAAW,GAAG+sC,OAAOmsE,EAAgB,aACpC/0I,GAAWo/B,EAAW,IAAMzyC,cAAc,IAAK,CAChD2oJ,SAAU,EACVT,QAASlpJ,KAAK4wB,MACdsf,UAAW,GAAG+sC,OAAOmsE,EAAgB,WACpCH,GAAa,IAAMjoJ,cAAc,OAAQ,CAC1CkvC,UAAW,GAAG+sC,OAAOmsE,EAAgB,eACjC,MAEN,OAAID,EACK,IAASS,aAAa1kJ,EAAMikJ,GAG9BjkJ,MAIJmjJ,EAlHiB,CAmHxB,aAGF,EAAOhB,aAAe,CACpBqB,QAAS,aACTE,SAAU,IACVlhJ,MAAO,CACLsV,MAAO,Q,qBCjIX,SAAS6iI,EAAQzG,EAAQ0G,GAAkB,IAAIC,EAAOvwE,OAAOuwE,KAAK3G,GAAS,GAAI5pE,OAAOwwE,sBAAuB,CAAE,IAAIC,EAAUzwE,OAAOwwE,sBAAsB5G,GAAa0G,IAAgBG,EAAUA,EAAQ1kI,QAAO,SAAU2kI,GAAO,OAAO1wE,OAAO2wE,yBAAyB/G,EAAQ8G,GAAKxB,eAAgBqB,EAAKnzI,KAAKxB,MAAM20I,EAAME,GAAY,OAAOF,EAE9U,SAASoC,EAAc1jI,GAAU,IAAK,IAAI5Z,EAAI,EAAGA,EAAIwG,UAAUlJ,OAAQ0C,IAAK,CAAE,IAAIif,EAAyB,MAAhBzY,UAAUxG,GAAawG,UAAUxG,GAAK,GAAQA,EAAI,EAAKg7I,EAAQrwE,OAAO1rD,IAAS,GAAM3N,SAAQ,SAAU7J,GAAO,YAAgBmS,EAAQnS,EAAKwX,EAAOxX,OAAsBkjE,OAAOyyE,0BAA6BzyE,OAAO0yE,iBAAiBzjI,EAAQ+wD,OAAOyyE,0BAA0Bn+H,IAAmB+7H,EAAQrwE,OAAO1rD,IAAS3N,SAAQ,SAAU7J,GAAOkjE,OAAO4rE,eAAe38H,EAAQnS,EAAKkjE,OAAO2wE,yBAAyBr8H,EAAQxX,OAAe,OAAOmS,EAE7gB,SAAS,EAAakpI,GAAW,IAAIC,EAErC,WAAuC,GAAuB,oBAAZC,UAA4BA,QAAQC,UAAW,OAAO,EAAO,GAAID,QAAQC,UAAUC,KAAM,OAAO,EAAO,GAAqB,mBAAVC,MAAsB,OAAO,EAAM,IAAiF,OAA3Ej9I,KAAKqB,UAAUxK,SAAS2N,KAAKs4I,QAAQC,UAAU/8I,KAAM,IAAI,iBAAyB,EAAQ,MAAOqD,GAAK,OAAO,GAFzP,GAA6B,OAAO,WAAc,IAAsCzB,EAAlCu7I,EAAQ,YAAgBP,GAAkB,GAAIC,EAA2B,CAAE,IAAIO,EAAY,YAAgBnoJ,MAAMiM,YAAaU,EAASk7I,QAAQC,UAAUI,EAAO78I,UAAW88I,QAAqBx7I,EAASu7I,EAAM98I,MAAMpL,KAAMqL,WAAc,OAAO,YAA2BrL,KAAM2M,IAWxY,IAAIk9I,EAAO,EACPC,EAAM/+I,KAAK++I,MAEf,SAASC,IACP,IAAI5lJ,EAAK0lJ,EAET,OADAA,GAAQ,EACD,kBAAkB5sE,OAAO6sE,EAAK,KAAK7sE,OAAO94E,GAGnD,IAAI,EAA4B,SAAUikJ,GACxC,YAAU4B,EAAc5B,GAExB,IAAIE,EAAS,EAAa0B,GAE1B,SAASA,IACP,IAAIzB,EA6DJ,OA3DA,YAAgBvoJ,KAAMgqJ,IAEtBzB,EAAQD,EAAOl9I,MAAMpL,KAAMqL,YACrBwG,MAAQ,CACZo4I,QAAS,IAEX1B,EAAM2B,SAAW,IAAIC,IAErB5B,EAAMxjJ,IAAM,SAAUqlJ,EAAQC,GAE5BD,EAAO99I,IAAM89I,EAAO99I,KAAOy9I,IAC3B,IAAIz9I,EAAM89I,EAAO99I,IACbg+I,EAAW/B,EAAMzM,MAAMwO,SAE3B/B,EAAMrwD,UAAS,SAAUqyD,GACvB,IAAIN,EAAUM,EAAcN,QACxBO,EAAcP,EAAQ59I,KAAI,SAAUnK,GACtC,OAAOA,EAAEkoJ,OAAO99I,OACf/L,QAAQ+L,GACPm+I,EAAiBR,EAAQhtE,SAuB7B,OArBqB,IAAjButE,EACFC,EAAer0I,OAAOo0I,EAAa,EAAG,CACpCJ,OAAQA,EACRC,eAAgBA,KAGdC,GAAYL,EAAQ9nJ,QAAUmoJ,IAKhCF,EAAOM,UAAYD,EAAe,GAAGL,OAAOM,WAAaD,EAAe,GAAGL,OAAO99I,IAClFm+I,EAAervG,SAGjBqvG,EAAe79I,KAAK,CAClBw9I,OAAQA,EACRC,eAAgBA,KAIb,CACLJ,QAASQ,OAKflC,EAAM97I,OAAS,SAAUH,GACvBi8I,EAAMrwD,UAAS,SAAUqyD,GACvB,MAAO,CACLN,QAASM,EAAcN,QAAQ1uI,QAAO,SAAUovI,GAE9C,OADaA,EAAKP,OACJ99I,MAAQA,UAMvBi8I,EA6ET,OA1EA,YAAayB,EAAc,CAAC,CAC1B19I,IAAK,oBACLvE,MAAO,WACL,IAAIihJ,EAAchpJ,KAAK87I,MACnB4D,EAAYsJ,EAAYtJ,UACxB4B,EAAY0H,EAAY1H,UACxBD,EAAiBrhJ,KAAK87I,MAAMuF,eAMhC,OAJKA,GAAkBC,IACrBD,EAAiB,GAAGpkE,OAAOyiE,EAAW,KAAKziE,OAAOqkE,IAG7CD,IAER,CACD/0I,IAAK,SACLvE,MAAO,WACL,IAAIghJ,EAAS/oJ,KAETiqJ,EAAUjqJ,KAAK6R,MAAMo4I,QACrBW,EAAe5qJ,KAAK87I,MACpB4D,EAAYkL,EAAalL,UACzBxvG,EAAY06G,EAAa16G,UACzB+4G,EAAY2B,EAAa3B,UACzBvhJ,EAAQkjJ,EAAaljJ,MACrBmjJ,EAAcZ,EAAQ59I,KAAI,SAAUy+I,EAAOr8I,GAC7C,IAAI27I,EAASU,EAAMV,OACfC,EAAiBS,EAAMT,eACvBhkF,EAAS0kF,QAAQt8I,IAAUw7I,EAAQ9nJ,OAAS,GAAKioJ,EAAOM,WACxDp+I,EAAM89I,EAAOM,UAAYN,EAAOM,UAAYN,EAAO99I,IACnDo8I,EAAU,OAAA3N,EAAA,GAAsBgO,EAAOt8I,OAAOwI,KAAK8zI,EAAQqB,EAAO99I,KAAM89I,EAAO1B,SAE/EsC,EAAc7I,EAAcA,EAAcA,EAAc,CAC1DzC,UAAWA,EACXuJ,UAAWA,GACVmB,GAASA,EAAOtO,OAAQ,GAAI,CAC7BxvI,IAAKA,EACL+5D,OAAQA,EACRqiF,QAASA,EACTQ,QAASkB,EAAOlB,QAChB70I,SAAU+1I,EAAO/hJ,UAGnB,OAAIgiJ,EACK,IAAMrpJ,cAAc,MAAO,CAChCsL,IAAKA,EACL4jC,UAAW,GAAG+sC,OAAOyiE,EAAW,gBAChCvG,IAAK,SAAalsH,QACG,IAAR3gB,IAIP2gB,GACF87H,EAAOmB,SAASe,IAAI3+I,EAAK2gB,GAEzBo9H,EAAep9H,EAAK+9H,IAEpBjC,EAAOmB,SAASgB,OAAO5+I,OAMxB,IAAMtL,cAAc,EAAQwuE,OAAOusE,OAAO,GAAIiP,OAEvD,OAAO,IAAMhqJ,cAAc,MAAO,CAChCkvC,UAAW,IAAWwvG,EAAWxvG,GACjCxoC,MAAOA,GACN,IAAM1G,cAAcmqJ,EAAA,EAAS,CAC9B9J,eAAgBrhJ,KAAKorJ,qBACpBP,QAIAb,EAhJuB,CAiJ9B,aAEF,EAAa3C,aAAe,CAC1B3H,UAAW,kBACX4B,UAAW,OACX55I,MAAO,CACLuV,IAAK,GACLR,KAAM,QAIV,EAAa4uI,YAAc,SAAiC5pH,EAAY78B,GACtE,IAAI0mJ,EAAQ7pH,GAAc,GACtB8pH,EAAeD,EAAMC,aACrBzP,EAAQ,YAAyBwP,EAAO,CAAC,iBAEzCr+H,EAAMpsB,SAASG,cAAc,OAE7BuqJ,EACSA,IACNhnJ,YAAY0oB,GAEjBpsB,SAASuG,KAAK7C,YAAY0oB,GAG5B,IAAIu+H,GAAS,EAsCb,IAASC,OAAO,IAAMzqJ,cAAc,EAAcwuE,OAAOusE,OAAO,GAAID,EAAO,CACzE3C,IArCF,SAAauS,GACPF,IAIJA,GAAS,EACT5mJ,EAAS,CACPwlJ,OAAQ,SAAgBY,GACtBU,EAAa3mJ,IAAIimJ,IAEnBW,aAAc,SAAsBr/I,GAClCo/I,EAAaj/I,OAAOH,IAEtBs/I,UAAWF,EACXz8H,QAAS,WACP,IAAS48H,uBAAuB5+H,GAE5BA,EAAIpZ,YACNoZ,EAAIpZ,WAAWC,YAAYmZ,IAI/B6+H,gBAAiB,WACf,OC/NgCC,ED+NRL,EC9N1BM,EAAa,SAAa,IAE1BC,EAAkB,WAAe,IACjClG,EAAmB,YAAekG,EAAiB,GACnD9V,EAAW4P,EAAiB,GAC5BmG,EAAcnG,EAAiB,GAkB5B,CAhBP,SAAgBiF,GACde,EAAqBhnJ,IAAIimJ,GAAa,SAAU/9H,EAAK6uH,GACnD,IAAIxvI,EAAMwvI,EAAMxvI,IAEhB,GAAI2gB,IAAQ++H,EAAW3mI,QAAQ/Y,GAAM,CACnC,IAAI6/I,EAAY,gBAAoB,EAAQ38E,OAAOusE,OAAO,GAAID,EAAO,CACnEqN,OAAQl8H,KAEV++H,EAAW3mI,QAAQ/Y,GAAO6/I,EAC1BD,GAAY,SAAUE,GACpB,MAAO,GAAGnvE,OAAO,YAAmBmvE,GAAiB,CAACD,YAM9C,gBAAoB,WAAgB,KAAMhW,IAxB7C,IAAyB4V,EAClCC,EAEAC,EACAlG,EACA5P,EACA+V,UDwOCj/H,IAGQ,IEpPA,EFoPA,E,gFGrPf,SAASq2H,IAA2Q,OAA9PA,EAAW9zE,OAAOusE,QAAU,SAAUt9H,GAAU,IAAK,IAAI5Z,EAAI,EAAGA,EAAIwG,UAAUlJ,OAAQ0C,IAAK,CAAE,IAAIif,EAASzY,UAAUxG,GAAI,IAAK,IAAIyH,KAAOwX,EAAc0rD,OAAOpjE,UAAUm3I,eAAeh0I,KAAKuU,EAAQxX,KAAQmS,EAAOnS,GAAOwX,EAAOxX,IAAY,OAAOmS,IAA2BrT,MAAMpL,KAAMqL,WAEhT,SAAS+0I,EAAgBt0I,EAAKQ,EAAKvE,GAAiK,OAApJuE,KAAOR,EAAO0jE,OAAO4rE,eAAetvI,EAAKQ,EAAK,CAAEvE,MAAOA,EAAO22I,YAAY,EAAME,cAAc,EAAMD,UAAU,IAAkB7yI,EAAIQ,GAAOvE,EAAgB+D,EAU3M,IACIugJ,EACAC,EAIA,EACAhC,EAPAiC,EAAkB,EAGlB,EAAM,EACN,EAAY,cACZlL,EAAiB,UAGjBmL,GAAM,EA2BV,IAAIC,EAAU,CACZrkJ,K,OAAM,EACNskJ,QAAS,IACT/6H,MAAO,IACP4rF,QAAS,IACTovC,QAAS,KAmDX,IAAIC,EAAM,CACRn8H,KAjDF,SAAgBgT,GACd,IAAIopH,EAEAjE,OAA6BhiJ,IAAlB68B,EAAKmlH,SAAyBnlH,EAAKmlH,SAAW2D,EACzDO,EAAgBL,EAAQhpH,EAAKn9B,MAC7BymJ,EAAe,IAAW,GAAG9vE,OAAO,EAAW,oBAAuCmjE,EAAlByM,EAAc,GAAiC,GAAG5vE,OAAO,EAAW,KAAKA,OAAOx5C,EAAKn9B,MAAOm9B,EAAKn9B,MAAO85I,EAAgByM,EAAa,GAAG5vE,OAAO,EAAW,SAAiB,IAARuvE,GAAeK,IACtPpuI,EAASglB,EAAKn3B,KAAO,IACrB0gJ,EAAe,IAAIC,SAAQ,SAAU18D,GACvC,IAAI3rF,EAAW,WAKb,MAJ4B,mBAAjB6+B,EAAKilH,SACdjlH,EAAKilH,UAGAn4D,GAAQ,KA9CrB,SAA4B3rF,GACtB0nJ,EACF1nJ,EAAS0nJ,GAIX,EAAajB,YAAY,CACvB3L,UAAW,EACX2B,eAAgBA,EAChB35I,MAAO,CACLuV,IAAKovI,GAEPd,aAAc,EACdjB,SAAUA,IACT,SAAU4C,GACPZ,EACF1nJ,EAAS0nJ,IAIXA,EAAkBY,EAClBtoJ,EAASsoJ,OA4BTC,EAAmB,SAAUD,GAC3BA,EAAS9C,OAAO,CACd99I,IAAKmS,EACLmqI,SAAUA,EACVlhJ,MAAO+7B,EAAK/7B,OAAS,GACrBwoC,UAAWzM,EAAKyM,UAChB7nC,QAAsB,gBAAoB,MAAO,CAC/C6nC,UAAW68G,GACVtpH,EAAK7R,MAAQk7H,GAA8B,gBAAoBA,EAAe,MAAoB,gBAAoB,OAAQ,KAAMrpH,EAAKp7B,UAC5IqgJ,QAAS9jJ,UAKX+H,EAAS,WACP2/I,GACFA,EAAgBX,aAAaltI,IASjC,OALA9R,EAAOygJ,KAAO,SAAUviG,EAAQwiG,GAC9B,OAAOL,EAAaI,KAAKviG,EAAQwiG,IAGnC1gJ,EAAO2gJ,QAAUN,EACVrgJ,GASP+iG,OAAQ,SAAgBr2D,QACFzyC,IAAhByyC,EAAQp8B,MACVovI,EAAahzG,EAAQp8B,IACrBqvI,EAAkB,WAGK1lJ,IAArByyC,EAAQuvG,WACV2D,EAAkBlzG,EAAQuvG,eAGFhiJ,IAAtByyC,EAAQqmG,YACV,EAAYrmG,EAAQqmG,gBAGO94I,IAAzByyC,EAAQkyG,eACV,EAAelyG,EAAQkyG,mBAGM3kJ,IAA3ByyC,EAAQgoG,iBACVA,EAAiBhoG,EAAQgoG,eACzBiL,EAAkB,WAGK1lJ,IAArByyC,EAAQixG,WACVA,EAAWjxG,EAAQixG,SACnBgC,EAAkB,WAGA1lJ,IAAhByyC,EAAQmzG,MACVA,EAAMnzG,EAAQmzG,MAGlBv9H,QAAS,WACHq9H,IACFA,EAAgBr9H,UAChBq9H,EAAkB,QAIxB,CAAC,UAAW,OAAQ,UAAW,QAAS,WAAWn2I,SAAQ,SAAU7P,GACnEsmJ,EAAItmJ,GAAQ,SAAU+B,EAASugJ,EAAUF,GACvC,OA/CJ,SAAqBrgJ,GACnB,MAAmD,oBAA5CmnE,OAAOpjE,UAAUxK,SAAS2N,KAAKlH,MAAoCA,EAAQA,QA8C5EklJ,CAAYllJ,GACPukJ,EAAIn8H,KAAK6yH,EAASA,EAAS,GAAIj7I,GAAU,CAC9C/B,KAAMA,MAIc,mBAAbsiJ,IACTF,EAAUE,EACVA,OAAWhiJ,GAGNgmJ,EAAIn8H,KAAK,CACdpoB,QAASA,EACTugJ,SAAUA,EACVtiJ,KAAMA,EACNoiJ,QAASA,SAIfkE,EAAIthJ,KAAOshJ,EAAIrvC,QACA,O,8DCtKJiwC,EAAqB,SAA4BC,GAC1D,OAAKA,EAIuC,mBAAdA,EAGrBA,IAGFA,EATE,MCFX,SAASnK,IAA2Q,OAA9PA,EAAW9zE,OAAOusE,QAAU,SAAUt9H,GAAU,IAAK,IAAI5Z,EAAI,EAAGA,EAAIwG,UAAUlJ,OAAQ0C,IAAK,CAAE,IAAIif,EAASzY,UAAUxG,GAAI,IAAK,IAAIyH,KAAOwX,EAAc0rD,OAAOpjE,UAAUm3I,eAAeh0I,KAAKuU,EAAQxX,KAAQmS,EAAOnS,GAAOwX,EAAOxX,IAAY,OAAOmS,IAA2BrT,MAAMpL,KAAMqL,WAEhT,IAAIqiJ,EAAgC,SAAU70I,EAAGzK,GAC/C,IAAIwC,EAAI,GAER,IAAK,IAAIyK,KAAKxC,EACR22D,OAAOpjE,UAAUm3I,eAAeh0I,KAAKsJ,EAAGwC,IAAMjN,EAAE7N,QAAQ8a,GAAK,IAAGzK,EAAEyK,GAAKxC,EAAEwC,IAG/E,GAAS,MAALxC,GAAqD,mBAAjC22D,OAAOwwE,sBAA2C,KAAIn7I,EAAI,EAAb,IAAgBwW,EAAIm0D,OAAOwwE,sBAAsBnnI,GAAIhU,EAAIwW,EAAElZ,OAAQ0C,IAClIuJ,EAAE7N,QAAQ8a,EAAExW,IAAM,GAAK2qE,OAAOpjE,UAAUs0I,qBAAqBnxI,KAAKsJ,EAAGwC,EAAExW,MAAK+L,EAAEyK,EAAExW,IAAMgU,EAAEwC,EAAExW,KAEhG,OAAO+L,GAOL+8I,EAAuB,cAAiB,SAAUC,EAAIzU,GACxD,IAAIwN,EAAqBiH,EAAGlO,UACxBr4I,EAAQumJ,EAAGvmJ,MACXgB,EAAUulJ,EAAGvlJ,QACbwlJ,EAAaH,EAAOE,EAAI,CAAC,YAAa,QAAS,YAa/ClO,GAAYoG,EAXQ,aAAiB,KACJA,cAUR,UAAWa,GACxC,OAAoB,gBAAoB,IAASrD,EAAS,GAAIuK,EAAY,CACxEnO,UAAWA,EACXvG,IAAKA,EACLnlD,QAZe,SAAoB0rD,GACnC,OAAoB,gBAAoB,WAAgB,KAAMr4I,GAAsB,gBAAoB,MAAO,CAC7G6oC,UAAW,GAAG+sC,OAAOyiE,EAAW,WAC/B8N,EAAmBnmJ,IAAsB,gBAAoB,MAAO,CACrE6oC,UAAW,GAAG+sC,OAAOyiE,EAAW,mBAC/B8N,EAAmBnlJ,KAObylJ,CAAWpO,SAGxBiO,EAAQ3R,YAAc,UACtB2R,EAAQtG,aAAe,CACrB7F,UAAW,MACXH,eAAgB,WAChBtoD,QAAS,QACT+nD,gBAAiB,GACjBE,gBAAiB,GACjBC,aAAc,IAED","file":"3.index.min.js","sourcesContent":["(function (root, factory) {\nif (typeof define === 'function' && define.amd) {\ndefine([], factory);\n} else if (typeof module === 'object' && module.exports) {\nmodule.exports = factory();\n} else {\nroot.mxgraph = factory();\n}\n}(this, function () {\nreturn function (opts) {\nfor (var name in opts) { this[name] = opts[name]; }\nvar __mxOutput = {};\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\nvar mxClient =\n{\n\t/**\n\t * Class: mxClient\n\t *\n\t * Bootstrapping mechanism for the mxGraph thin client. The production version\n\t * of this file contains all code required to run the mxGraph thin client, as\n\t * well as global constants to identify the browser and operating system in\n\t * use. You may have to load chrome://global/content/contentAreaUtils.js in\n\t * your page to disable certain security restrictions in Mozilla.\n\t * \n\t * Variable: VERSION\n\t *\n\t * Contains the current version of the mxGraph library. The strings that\n\t * communicate versions of mxGraph use the following format.\n\t * \n\t * versionMajor.versionMinor.buildNumber.revisionNumber\n\t * \n\t * Current version is 4.1.1.\n\t */\n\tVERSION: '4.1.1',\n\n\t/**\n\t * Variable: IS_IE\n\t *\n\t * True if the current browser is Internet Explorer 10 or below. Use <mxClient.IS_IE11>\n\t * to detect IE 11.\n\t */\n\tIS_IE: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE') >= 0,\n\n\t/**\n\t * Variable: IS_IE6\n\t *\n\t * True if the current browser is Internet Explorer 6.x.\n\t */\n\tIS_IE6: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE 6') >= 0,\n\n\t/**\n\t * Variable: IS_IE11\n\t *\n\t * True if the current browser is Internet Explorer 11.x.\n\t */\n\tIS_IE11: navigator.userAgent != null && !!navigator.userAgent.match(/Trident\\/7\\./),\n\n\t/**\n\t * Variable: IS_EDGE\n\t *\n\t * True if the current browser is Microsoft Edge.\n\t */\n\tIS_EDGE: navigator.userAgent != null && !!navigator.userAgent.match(/Edge\\//),\n\n\t/**\n\t * Variable: IS_QUIRKS\n\t *\n\t * True if the current browser is Internet Explorer and it is in quirks mode.\n\t */\n\tIS_QUIRKS: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE') >= 0 &&\n\t\t(document.documentMode == null || document.documentMode == 5),\n\n\t/**\n\t * Variable: IS_EM\n\t * \n\t * True if the browser is IE11 in enterprise mode (IE8 standards mode).\n\t */\n\tIS_EM: 'spellcheck' in document.createElement('textarea') && document.documentMode == 8,\n\n\t/**\n\t * Variable: VML_PREFIX\n\t * \n\t * Prefix for VML namespace in node names. Default is 'v'.\n\t */\n\tVML_PREFIX: 'v',\n\n\t/**\n\t * Variable: OFFICE_PREFIX\n\t * \n\t * Prefix for VML office namespace in node names. Default is 'o'.\n\t */\n\tOFFICE_PREFIX: 'o',\n\n\t/**\n\t * Variable: IS_NS\n\t *\n\t * True if the current browser is Netscape (including Firefox).\n\t */\n  \tIS_NS: navigator.userAgent != null &&\n  \t\tnavigator.userAgent.indexOf('Mozilla/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('MSIE') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\n\t/**\n\t * Variable: IS_OP\n\t *\n\t * True if the current browser is Opera.\n\t */\n  \tIS_OP: navigator.userAgent != null &&\n  \t\t(navigator.userAgent.indexOf('Opera/') >= 0 ||\n  \t\tnavigator.userAgent.indexOf('OPR/') >= 0),\n\n\t/**\n\t * Variable: IS_OT\n\t *\n\t * True if -o-transform is available as a CSS style, ie for Opera browsers\n\t * based on a Presto engine with version 2.5 or later.\n\t */\n  \tIS_OT: navigator.userAgent != null &&\n  \t\tnavigator.userAgent.indexOf('Presto/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.4.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.3.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.2.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.0.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/1.') < 0,\n  \t\n\t/**\n\t * Variable: IS_SF\n\t *\n\t * True if the current browser is Safari.\n\t */\n  \tIS_SF: /constructor/i.test(window.HTMLElement) || (function (p) {\n  \t\treturn p.toString() === \"[object SafariRemoteNotification]\";\n  \t\t})(!window['safari'] || (typeof safari !== 'undefined' && safari.pushNotification)),\n\n\t/**\n\t * Variable: IS_ANDROID\n\t * \n\t * Returns true if the user agent contains Android.\n\t */\n  \tIS_ANDROID: navigator.appVersion.indexOf('Android') >= 0,\n\n\t/**\n\t * Variable: IS_IOS\n\t * \n\t * Returns true if the user agent is an iPad, iPhone or iPod.\n\t */\n  \tIS_IOS: (/iP(hone|od|ad)/.test(navigator.platform)),\n\n\t/**\n\t * Variable: IOS_VERSION\n\t * \n\t * Returns the major version number for iOS devices or 0 if the\n\t * device is not an iOS device.\n\t */\n  \tIOS_VERSION: (function()\n  \t{\n  \t\tif ((/iP(hone|od|ad)/.test(navigator.platform)))\n  \t\t{\n  \t\t\tvar v = (navigator.appVersion).match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n  \t\t\t\n  \t\t\tif (v != null && v.length > 0)\n  \t\t\t{\n  \t\t\t\treturn parseInt(v[1]);\n  \t\t\t}\n  \t\t}\n  \t\t\n  \t\treturn 0;\n  \t})(),\n \n\t/**\n\t * Variable: IS_GC\n\t *\n\t * True if the current browser is Google Chrome.\n\t */\n  \tIS_GC: /Google Inc/.test(navigator.vendor),\n\t\n\t/**\n\t * Variable: IS_CHROMEAPP\n\t *\n\t * True if the this is running inside a Chrome App.\n\t */\n  \tIS_CHROMEAPP: window.chrome != null && chrome.app != null && chrome.app.runtime != null,\n\n\t/**\n\t * Variable: IS_FF\n\t *\n\t * True if the current browser is Firefox.\n\t */\n  \tIS_FF: typeof InstallTrigger !== 'undefined',\n  \t\n\t/**\n\t * Variable: IS_MT\n\t *\n\t * True if -moz-transform is available as a CSS style. This is the case\n\t * for all Firefox-based browsers newer than or equal 3, such as Camino,\n\t * Iceweasel, Seamonkey and Iceape.\n\t */\n  \tIS_MT: (navigator.userAgent.indexOf('Firefox/') >= 0 &&\n\t\tnavigator.userAgent.indexOf('Firefox/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Firefox/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceweasel/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('SeaMonkey/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('SeaMonkey/1.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceape/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceape/1.') < 0),\n\n\t/**\n\t * Variable: IS_VML\n\t *\n\t * True if the browser supports VML.\n\t */\n  \tIS_VML: navigator.appName.toUpperCase() == 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: IS_SVG\n\t *\n\t * True if the browser supports SVG.\n\t */\n  \tIS_SVG: navigator.appName.toUpperCase() != 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: NO_FO\n\t *\n\t * True if foreignObject support is not available. This is the case for\n\t * Opera, older SVG-based browsers and all versions of IE.\n\t */\n  \tNO_FO: !document.createElementNS || document.createElementNS('http://www.w3.org/2000/svg',\n  \t\t'foreignObject') != '[object SVGForeignObjectElement]' || navigator.userAgent.indexOf('Opera/') >= 0,\n\n\t/**\n\t * Variable: IS_WIN\n\t *\n\t * True if the client is a Windows.\n\t */\n  \tIS_WIN: navigator.appVersion.indexOf('Win') > 0,\n\n\t/**\n\t * Variable: IS_MAC\n\t *\n\t * True if the client is a Mac.\n\t */\n  \tIS_MAC: navigator.appVersion.indexOf('Mac') > 0,\n\t\n\t/**\n\t * Variable: IS_CHROMEOS\n\t *\n\t * True if the client is a Chrome OS.\n\t */\n  \tIS_CHROMEOS: /\\bCrOS\\b/.test(navigator.appVersion),\n\n\t/**\n\t * Variable: IS_TOUCH\n\t * \n\t * True if this device supports touchstart/-move/-end events (Apple iOS,\n\t * Android, Chromebook and Chrome Browser on touch-enabled devices).\n\t */\n  \tIS_TOUCH: 'ontouchstart' in document.documentElement,\n\n\t/**\n\t * Variable: IS_POINTER\n\t * \n\t * True if this device supports Microsoft pointer events (always false on Macs).\n\t */\n  \tIS_POINTER: window.PointerEvent != null && !(navigator.appVersion.indexOf('Mac') > 0),\n\n\t/**\n\t * Variable: IS_LOCAL\n\t *\n\t * True if the documents location does not start with http:// or https://.\n\t */\n  \tIS_LOCAL: document.location.href.indexOf('http://') < 0 &&\n  \t\t\t  document.location.href.indexOf('https://') < 0,\n\n\t/**\n\t * Variable: defaultBundles\n\t * \n\t * Contains the base names of the default bundles if mxLoadResources is false.\n\t */\n  \tdefaultBundles: [],\n\n\t/**\n\t * Function: isBrowserSupported\n\t *\n\t * Returns true if the current browser is supported, that is, if\n\t * <mxClient.IS_VML> or <mxClient.IS_SVG> is true.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * if (!mxClient.isBrowserSupported())\n\t * {\n\t *   mxUtils.error('Browser is not supported!', 200, false);\n\t * }\n\t * (end)\n\t */\n\tisBrowserSupported: function()\n\t{\n\t\treturn mxClient.IS_VML || mxClient.IS_SVG;\n\t},\n\n\t/**\n\t * Function: link\n\t *\n\t * Adds a link node to the head of the document. Use this\n\t * to add a stylesheet to the page as follows:\n\t *\n\t * (code)\n\t * mxClient.link('stylesheet', filename);\n\t * (end)\n\t *\n\t * where filename is the (relative) URL of the stylesheet. The charset\n\t * is hardcoded to ISO-8859-1 and the type is text/css.\n\t * \n\t * Parameters:\n\t * \n\t * rel - String that represents the rel attribute of the link node.\n\t * href - String that represents the href attribute of the link node.\n\t * doc - Optional parent document of the link node.\n\t * id - unique id for the link element to check if it already exists\n\t */\n\tlink: function(rel, href, doc, id)\n\t{\n\t\tdoc = doc || document;\n\n\t\t// Workaround for Operation Aborted in IE6 if base tag is used in head\n\t\tif (mxClient.IS_IE6)\n\t\t{\n\t\t\tdoc.write('<link rel=\"' + rel + '\" href=\"' + href + '\" charset=\"UTF-8\" type=\"text/css\"/>');\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tvar link = doc.createElement('link');\n\t\t\t\n\t\t\tlink.setAttribute('rel', rel);\n\t\t\tlink.setAttribute('href', href);\n\t\t\tlink.setAttribute('charset', 'UTF-8');\n\t\t\tlink.setAttribute('type', 'text/css');\n\t\t\t\n\t\t\tif (id)\n\t\t\t{\n\t\t\t\tlink.setAttribute('id', id);\n\t\t\t}\n\t\t\t\n\t\t\tvar head = doc.getElementsByTagName('head')[0];\n\t   \t\thead.appendChild(link);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: loadResources\n\t * \n\t * Helper method to load the default bundles if mxLoadResources is false.\n\t * \n\t * Parameters:\n\t * \n\t * fn - Function to call after all resources have been loaded.\n\t * lan - Optional string to pass to <mxResources.add>.\n\t */\n\tloadResources: function(fn, lan)\n\t{\n\t\tvar pending = mxClient.defaultBundles.length;\n\t\t\n\t\tfunction callback()\n\t\t{\n\t\t\tif (--pending == 0)\n\t\t\t{\n\t\t\t\tfn();\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < mxClient.defaultBundles.length; i++)\n\t\t{\n\t\t\tmxResources.add(mxClient.defaultBundles[i], lan, callback);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: include\n\t *\n\t * Dynamically adds a script node to the document header.\n\t * \n\t * In production environments, the includes are resolved in the mxClient.js\n\t * file to reduce the number of requests required for client startup. This\n\t * function should only be used in development environments, but not in\n\t * production systems.\n\t */\n\tinclude: function(src)\n\t{\n\t\tdocument.write('<script src=\"'+src+'\"></script>');\n\t}\n};\n\n/**\n * Detects desktop mode on iPad Pro which should block event handling like iOS 12.\n */\nif (mxClient.IS_SF && mxClient.IS_TOUCH && !mxClient.IS_IOS)\n{\n\tmxClient.IOS_VERSION = 13;\n\tmxClient.IOS = true;\n}\n\n/**\n * Variable: mxLoadResources\n * \n * Optional global config variable to toggle loading of the two resource files\n * in <mxGraph> and <mxEditor>. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient. If this is false, you can use <mxClient.loadResources>\n * with its callback to load the default bundles asynchronously.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadResources) == 'undefined')\n{\n\tmxLoadResources = true;\n}\n\n/**\n * Variable: mxForceIncludes\n * \n * Optional global config variable to force loading the JavaScript files in\n * development mode. Default is undefined. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = true;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxForceIncludes) == 'undefined')\n{\n\tmxForceIncludes = false;\n}\n\n/**\n * Variable: mxResourceExtension\n * \n * Optional global config variable to specify the extension of resource files.\n * Default is true. NOTE: This is a global variable, not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxResourceExtension = '.txt';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxResourceExtension) == 'undefined')\n{\n\tmxResourceExtension = '.txt';\n}\n\n/**\n * Variable: mxLoadStylesheets\n * \n * Optional global config variable to toggle loading of the CSS files when\n * the library is initialized. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadStylesheets = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadStylesheets) == 'undefined')\n{\n\tmxLoadStylesheets = true;\n}\n\n/**\n * Variable: basePath\n *\n * Basepath for all URLs in the core without trailing slash. Default is '.'.\n * Set mxBasePath prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxBasePath = '/path/to/core/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxBasePath) != 'undefined' && mxBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxBasePath.substring(mxBasePath.length - 1) == '/')\n\t{\n\t\tmxBasePath = mxBasePath.substring(0, mxBasePath.length - 1);\n\t}\n\n\tmxClient.basePath = mxBasePath;\n}\nelse\n{\n\tmxClient.basePath = '.';\n}\n\n/**\n * Variable: imageBasePath\n *\n * Basepath for all images URLs in the core without trailing slash. Default is\n * <mxClient.basePath> + '/images'. Set mxImageBasePath prior to loading the\n * mxClient library as follows to override this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxImageBasePath = '/path/to/image/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxImageBasePath) != 'undefined' && mxImageBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxImageBasePath.substring(mxImageBasePath.length - 1) == '/')\n\t{\n\t\tmxImageBasePath = mxImageBasePath.substring(0, mxImageBasePath.length - 1);\n\t}\n\n\tmxClient.imageBasePath = mxImageBasePath;\n}\nelse\n{\n\tmxClient.imageBasePath = mxClient.basePath + '/images';\t\n}\n\n/**\n * Variable: language\n *\n * Defines the language of the client, eg. en for english, de for german etc.\n * The special value 'none' will disable all built-in internationalization and\n * resource loading. See <mxResources.getSpecialBundle> for handling identifiers\n * with and without a dash.\n * \n * Set mxLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguage = 'en';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * If internationalization is disabled, then the following variables should be\n * overridden to reflect the current language of the system. These variables are\n * cleared when i18n is disabled.\n * <mxEditor.askZoomResource>, <mxEditor.lastSavedResource>,\n * <mxEditor.currentFileResource>, <mxEditor.propertiesResource>,\n * <mxEditor.tasksResource>, <mxEditor.helpResource>, <mxEditor.outlineResource>,\n * <mxElbowEdgeHandler.doubleClickOrientationResource>, <mxUtils.errorResource>,\n * <mxUtils.closeResource>, <mxGraphSelectionModel.doneResource>,\n * <mxGraphSelectionModel.updatingSelectionResource>, <mxGraphView.doneResource>,\n * <mxGraphView.updatingDocumentResource>, <mxCellRenderer.collapseExpandResource>,\n * <mxGraph.containsValidationErrorsResource> and\n * <mxGraph.alreadyConnectedResource>.\n */\nif (typeof(mxLanguage) != 'undefined' && mxLanguage != null)\n{\n\tmxClient.language = mxLanguage;\n}\nelse\n{\n\tmxClient.language = (mxClient.IS_IE) ? navigator.userLanguage : navigator.language;\n}\n\n/**\n * Variable: defaultLanguage\n * \n * Defines the default language which is used in the common resource files. Any\n * resources for this language will only load the common resource file, but not\n * the language-specific resource file. Default is 'en'.\n * \n * Set mxDefaultLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxDefaultLanguage = 'de';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxDefaultLanguage) != 'undefined' && mxDefaultLanguage != null)\n{\n\tmxClient.defaultLanguage = mxDefaultLanguage;\n}\nelse\n{\n\tmxClient.defaultLanguage = 'en';\n}\n\n// Adds all required stylesheets and namespaces\nif (mxLoadStylesheets)\n{\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css');\n}\n\n/**\n * Variable: languages\n *\n * Defines the optional array of all supported language extensions. The default\n * language does not have to be part of this list. See\n * <mxResources.isLanguageSupported>.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguages = ['de', 'it', 'fr'];\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * This is used to avoid unnecessary requests to language files, ie. if a 404\n * will be returned.\n */\nif (typeof(mxLanguages) != 'undefined' && mxLanguages != null)\n{\n\tmxClient.languages = mxLanguages;\n}\n\n// Adds required namespaces, stylesheets and memory handling for older IE browsers\nif (mxClient.IS_VML)\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tmxClient.IS_VML = false;\n\t}\n\telse\n\t{\n\t\t// Enables support for IE8 standards mode. Note that this requires all attributes for VML\n\t\t// elements to be set using direct notation, ie. node.attr = value, not setAttribute.\n\t\tif (document.namespaces != null)\n\t\t{\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml', '#default#VML');\n\t\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office', '#default#VML');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml');\n\t\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office');\n\t\t\t}\n\t\t}\n\n\t\t// Workaround for limited number of stylesheets in IE (does not work in standards mode)\n\t\tif (mxClient.IS_QUIRKS && document.styleSheets.length >= 30)\n\t\t{\n\t\t\t(function()\n\t\t\t{\n\t\t\t\tvar node = document.createElement('style');\n\t\t\t\tnode.type = 'text/css';\n\t\t\t\tnode.styleSheet.cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t        \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t        document.getElementsByTagName('head')[0].appendChild(node);\n\t\t\t})();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t    \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t}\n\t    \n\t    if (mxLoadStylesheets)\n\t    {\n\t    \tmxClient.link('stylesheet', mxClient.basePath + '/css/explorer.css');\n\t    }\n\t}\n}\n\n// PREPROCESSOR-REMOVE-START\n// If script is loaded via CommonJS, do not write <script> tags to the page\n// for dependencies. These are already included in the build.\nif (mxForceIncludes || !(typeof module === 'object' && module.exports != null))\n{\n// PREPROCESSOR-REMOVE-END\n\tmxClient.include(mxClient.basePath+'/js/util/mxLog.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxObjectIdentity.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDictionary.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxResources.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPoint.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxRectangle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEffects.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUtils.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxConstants.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventObject.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMouseEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlRequest.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxClipboard.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxWindow.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxForm.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImage.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDivResizer.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDragSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoableEdit.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUrlConverter.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPanningManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAutoSaveManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAnimation.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMorphing.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageBundle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageExport.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAbstractCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxSvgCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxVmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxGuide.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencil.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencilRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxActor.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCloud.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRectangleShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxDoubleEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRhombus.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxPolyline.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrow.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrowConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxText.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxTriangle.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxHexagon.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLine.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxImageShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLabel.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCylinder.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxSwimlane.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxGraphLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxStackLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxPartitionLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompactTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxRadialTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxFastOrganicLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCircleLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxParallelEdgeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompositeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxEdgeLabelLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphAbstractHierarchyCell.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyNode.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyEdge.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxSwimlaneModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxHierarchicalLayoutStage.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMedianHybridCrossingReduction.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMinimumCycleRemover.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxCoordinateAssignment.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxSwimlaneOrdering.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxHierarchicalLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxSwimlaneLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGraphModel.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCell.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGeometry.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCellPath.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPerimeter.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPrintPreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStylesheet.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellState.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphSelectionModel.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellRenderer.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxEdgeStyle.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStyleRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphView.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraph.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellOverlay.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxOutline.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxMultiplicity.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxLayoutManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxSwimlaneManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxTemporaryCellStates.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellStatePreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxConnectionConstraint.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxGraphHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPanningHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPopupMenuHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxSelectionCellsHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConnectionHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConstraintHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxRubberband.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxHandle.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxVertexHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxElbowEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeSegmentHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxTooltipHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellTracker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellHighlight.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodecRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxObjectCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCellCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxModelCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxRootChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxChildChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxTerminalChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGenericChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphViewCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxStylesheetCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultKeyHandlerCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultToolbarCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultPopupMenuCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxEditorCodec.js');\n// PREPROCESSOR-REMOVE-START\n}\n// PREPROCESSOR-REMOVE-END\n\n__mxOutput.mxClient = typeof mxClient !== 'undefined' ? mxClient : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxLog =\n{\n\t/**\n\t * Class: mxLog\n\t * \n\t * A singleton class that implements a simple console.\n\t * \n\t * Variable: consoleName\n\t * \n\t * Specifies the name of the console window. Default is 'Console'.\n\t */\n\tconsoleName: 'Console',\n\t\n\t/**\n\t * Variable: TRACE\n\t * \n\t * Specified if the output for <enter> and <leave> should be visible in the\n\t * console. Default is false.\n\t */\n\tTRACE: false,\n\n\t/**\n\t * Variable: DEBUG\n\t * \n\t * Specifies if the output for <debug> should be visible in the console.\n\t * Default is true.\n\t */\n\tDEBUG: true,\n\n\t/**\n\t * Variable: WARN\n\t * \n\t * Specifies if the output for <warn> should be visible in the console.\n\t * Default is true.\n\t */\n\tWARN: true,\n\n\t/**\n\t * Variable: buffer\n\t * \n\t * Buffer for pre-initialized content.\n\t */\n\tbuffer: '',\n\t\n\t/**\n\t * Function: init\n\t *\n\t * Initializes the DOM node for the console. This requires document.body to\n\t * point to a non-null value. This is called from within <setVisible> if the\n\t * log has not yet been initialized.\n\t */\n\tinit: function()\n\t{\n\t\tif (mxLog.window == null && document.body != null)\n\t\t{\n\t\t\tvar title = mxLog.consoleName + ' - mxGraph ' + mxClient.VERSION;\n\n\t\t\t// Creates a table that maintains the layout\n\t\t\tvar table = document.createElement('table');\n\t\t\ttable.setAttribute('width', '100%');\n\t\t\ttable.setAttribute('height', '100%');\n\n\t\t\tvar tbody = document.createElement('tbody');\n\t\t\tvar tr = document.createElement('tr');\n\t\t\tvar td = document.createElement('td');\n\t\t\ttd.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t// Adds the actual console as a textarea\n\t\t\tmxLog.textarea = document.createElement('textarea');\n\t\t\tmxLog.textarea.setAttribute('wrap', 'off');\n\t\t\tmxLog.textarea.setAttribute('readOnly', 'true');\n\t\t\tmxLog.textarea.style.height = '100%';\n\t\t\tmxLog.textarea.style.resize = 'none';\n\t\t\tmxLog.textarea.value = mxLog.buffer;\n\n\t\t\t// Workaround for wrong width in standards mode\n\t\t\tif (mxClient.IS_NS && document.compatMode != 'BackCompat')\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '99%';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '100%';\n\t\t\t}\n\t\t\t\n\t\t\ttd.appendChild(mxLog.textarea);\n\t\t\ttr.appendChild(td);\n\t\t\ttbody.appendChild(tr);\n\n\t\t\t// Creates the container div\n\t\t\ttr = document.createElement('tr');\n\t\t\tmxLog.td = document.createElement('td');\n\t\t\tmxLog.td.style.verticalAlign = 'top';\n\t\t\tmxLog.td.setAttribute('height', '30px');\n\t\t\t\n\t\t\ttr.appendChild(mxLog.td);\n\t\t\ttbody.appendChild(tr);\n\t\t\ttable.appendChild(tbody);\n\n\t\t\t// Adds various debugging buttons\n\t\t\tmxLog.addButton('Info', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.info();\n\t\t\t});\n\t\t\n\t\t\tmxLog.addButton('DOM', function (evt)\n\t\t\t{\n\t\t\t\tvar content = mxUtils.getInnerHtml(document.body);\n\t\t\t\tmxLog.debug(content);\n\t\t\t});\n\t\n\t\t\tmxLog.addButton('Trace', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.TRACE = !mxLog.TRACE;\n\t\t\t\t\n\t\t\t\tif (mxLog.TRACE)\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing enabled');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing disabled');\n\t\t\t\t}\n\t\t\t});\t\n\n\t\t\tmxLog.addButton('Copy', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.copy(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\n\t\t\tmxLog.addButton('Show', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.popup(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\n\t\t\t\n\t\t\tmxLog.addButton('Clear', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.textarea.value = '';\n\t\t\t});\n\n\t\t\t// Cross-browser code to get window size\n\t\t\tvar h = 0;\n\t\t\tvar w = 0;\n\t\t\t\n\t\t\tif (typeof(window.innerWidth) === 'number')\n\t\t\t{\n\t\t\t\th = window.innerHeight;\n\t\t\t\tw = window.innerWidth;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\th = (document.documentElement.clientHeight || document.body.clientHeight);\n\t\t\t\tw = document.body.clientWidth;\n\t\t\t}\n\n\t\t\tmxLog.window = new mxWindow(title, table, Math.max(0, w - 320), Math.max(0, h - 210), 300, 160);\n\t\t\tmxLog.window.setMaximizable(true);\n\t\t\tmxLog.window.setScrollable(false);\n\t\t\tmxLog.window.setResizable(true);\n\t\t\tmxLog.window.setClosable(true);\n\t\t\tmxLog.window.destroyOnClose = false;\n\t\t\t\n\t\t\t// Workaround for ignored textarea height in various setups\n\t\t\tif (((mxClient.IS_NS || mxClient.IS_IE) && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_SF && document.compatMode != 'BackCompat') ||\n\t\t\t\tdocument.documentMode == 11)\n\t\t\t{\n\t\t\t\tvar elt = mxLog.window.getElement();\n\t\t\t\t\n\t\t\t\tvar resizeHandler = function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tmxLog.textarea.style.height = Math.max(0, elt.offsetHeight - 70) + 'px';\n\t\t\t\t}; \n\t\t\t\t\n\t\t\t\tmxLog.window.addListener(mxEvent.RESIZE_END, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.MAXIMIZE, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.NORMALIZE, resizeHandler);\n\n\t\t\t\tmxLog.textarea.style.height = '92px';\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: info\n\t * \n\t * Writes the current navigator information to the console.\n\t */\n\tinfo: function()\n\t{\n\t\tmxLog.writeln(mxUtils.toString(navigator));\n\t},\n\t\t\t\n\t/**\n\t * Function: addButton\n\t * \n\t * Adds a button to the console using the given label and function.\n\t */\n\taddButton: function(lab, funct)\n\t{\n\t\tvar button = document.createElement('button');\n\t\tmxUtils.write(button, lab);\n\t\tmxEvent.addListener(button, 'click', funct);\n\t\tmxLog.td.appendChild(button);\n\t},\n\t\t\t\t\n\t/**\n\t * Function: isVisible\n\t * \n\t * Returns true if the console is visible.\n\t */\n\tisVisible: function()\n\t{\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\treturn mxLog.window.isVisible();\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n\t\n\n\t/**\n\t * Function: show\n\t * \n\t * Shows the console.\n\t */\n\tshow: function()\n\t{\n\t\tmxLog.setVisible(true);\n\t},\n\n\t/**\n\t * Function: setVisible\n\t * \n\t * Shows or hides the console.\n\t */\n\tsetVisible: function(visible)\n\t{\n\t\tif (mxLog.window == null)\n\t\t{\n\t\t\tmxLog.init();\n\t\t}\n\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\tmxLog.window.setVisible(visible);\n\t\t}\n\t},\n\n\t/**\n\t * Function: enter\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and returns the current \n\t * time in milliseconds.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * var t0 = mxLog.enter('Hello');\n\t * // Do something\n\t * mxLog.leave('World!', t0);\n\t * (end)\n\t */\n\tenter: function(string)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tmxLog.writeln('Entering '+string);\n\t\t\t\n\t\t\treturn new Date().getTime();\n\t\t}\n\t},\n\n\t/**\n\t * Function: leave\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and computes the difference\n\t * between the current time and t0 in milliseconds.\n\t * See <enter> for an example.\n\t */\n\tleave: function(string, t0)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tvar dt = (t0 != 0) ? ' ('+(new Date().getTime() - t0)+' ms)' : '';\n\t\t\tmxLog.writeln('Leaving '+string+dt);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: debug\n\t * \n\t * Adds all arguments to the console if <DEBUG> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.debug('Hello, World!');\n\t * (end)\n\t */\n\tdebug: function()\n\t{\n\t\tif (mxLog.DEBUG)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: warn\n\t * \n\t * Adds all arguments to the console if <WARN> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.warn('Hello, World!');\n\t * (end)\n\t */\n\twarn: function()\n\t{\n\t\tif (mxLog.WARN)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\n\t/**\n\t * Function: write\n\t * \n\t * Adds the specified strings to the console.\n\t */\n\twrite: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (mxLog.textarea != null)\n\t\t{\n\t\t\tmxLog.textarea.value = mxLog.textarea.value + string;\n\n\t\t\t// Workaround for no update in Presto 2.5.22 (Opera 10.5)\n\t\t\tif (navigator.userAgent != null &&\n\t\t\t\tnavigator.userAgent.indexOf('Presto/2.5') >= 0)\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.visibility = 'hidden';\n\t\t\t\tmxLog.textarea.style.visibility = 'visible';\n\t\t\t}\n\t\t\t\n\t\t\tmxLog.textarea.scrollTop = mxLog.textarea.scrollHeight;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxLog.buffer += string;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Adds the specified strings to the console, appending a linefeed at the\n\t * end of each string.\n\t */\n\twriteln: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\n\t\tmxLog.write(string + '\\n');\n\t}\n\t\n};\n\n__mxOutput.mxLog = typeof mxLog !== 'undefined' ? mxLog : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxObjectIdentity =\n{\n\t/**\n\t * Class: mxObjectIdentity\n\t * \n\t * Identity for JavaScript objects and functions. This is implemented using\n\t * a simple incrementing counter which is stored in each object under\n\t * <FIELD_NAME>.\n\t * \n\t * The identity for an object does not change during its lifecycle.\n\t * \n\t * Variable: FIELD_NAME\n\t * \n\t * Name of the field to be used to store the object ID. Default is\n\t * <code>mxObjectId</code>.\n\t */\n\tFIELD_NAME: 'mxObjectId',\n\n\t/**\n\t * Variable: counter\n\t * \n\t * Current counter.\n\t */\n\tcounter: 0,\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the ID for the given object or function or null if no object\n\t * is specified.\n\t */\n\tget: function(obj)\n\t{\n\t\tif (obj != null)\n\t\t{\n\t\t\tif (obj[mxObjectIdentity.FIELD_NAME] == null)\n\t\t\t{\n\t\t\t\tif (typeof obj === 'object')\n\t\t\t\t{\n\t\t\t\t\tvar ctor = mxUtils.getFunctionName(obj.constructor);\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = ctor + '#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t\telse if (typeof obj === 'function')\n\t\t\t\t{\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = 'Function#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: clear\n\t * \n\t * Deletes the ID from the given object or function.\n\t */\n\tclear: function(obj)\n\t{\n\t\tif (typeof(obj) === 'object' || typeof obj === 'function')\n\t\t{\n\t\t\tdelete obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxObjectIdentity = typeof mxObjectIdentity !== 'undefined' ? mxObjectIdentity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDictionary\n *\n * A wrapper class for an associative array with object keys. Note: This\n * implementation uses <mxObjectIdentitiy> to turn object keys into strings.\n * \n * Constructor: mxEventSource\n *\n * Constructs a new dictionary which allows object to be used as keys.\n */\nfunction mxDictionary()\n{\n\tthis.clear();\n};\n\n/**\n * Function: map\n *\n * Stores the (key, value) pairs in this dictionary.\n */\nmxDictionary.prototype.map = null;\n\n/**\n * Function: clear\n *\n * Clears the dictionary.\n */\nmxDictionary.prototype.clear = function()\n{\n\tthis.map = {};\n};\n\n/**\n * Function: get\n *\n * Returns the value for the given key.\n */\nmxDictionary.prototype.get = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\t\n\treturn this.map[id];\n};\n\n/**\n * Function: put\n *\n * Stores the value under the given key and returns the previous\n * value for that key.\n */\nmxDictionary.prototype.put = function(key, value)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tthis.map[id] = value;\n\t\n\treturn previous;\n};\n\n/**\n * Function: remove\n *\n * Removes the value for the given key and returns the value that\n * has been removed.\n */\nmxDictionary.prototype.remove = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tdelete this.map[id];\n\t\n\treturn previous;\n};\n\n/**\n * Function: getKeys\n *\n * Returns all keys as an array.\n */\nmxDictionary.prototype.getKeys = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(key);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getValues\n *\n * Returns all values as an array.\n */\nmxDictionary.prototype.getValues = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(this.map[key]);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: visit\n *\n * Visits all entries in the dictionary using the given function with the\n * following signature: function(key, value) where key is a string and\n * value is an object.\n * \n * Parameters:\n * \n * visitor - A function that takes the key and value as arguments.\n */\nmxDictionary.prototype.visit = function(visitor)\n{\n\tfor (var key in this.map)\n\t{\n\t\tvisitor(key, this.map[key]);\n\t}\n};\n\n__mxOutput.mxDictionary = typeof mxDictionary !== 'undefined' ? mxDictionary : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\nvar mxResources =\n{\n\t/**\n\t * Class: mxResources\n\t * \n\t * Implements internationalization. You can provide any number of \n\t * resource files on the server using the following format for the \n\t * filename: name[-en].properties. The en stands for any lowercase \n\t * 2-character language shortcut (eg. de for german, fr for french).\n\t *\n\t * If the optional language extension is omitted, then the file is used as a \n\t * default resource which is loaded in all cases. If a properties file for a \n\t * specific language exists, then it is used to override the settings in the \n\t * default resource. All entries in the file are of the form key=value. The\n\t * values may then be accessed in code via <get>. Lines without \n\t * equal signs in the properties files are ignored.\n\t *\n\t * Resource files may either be added programmatically using\n\t * <add> or via a resource tag in the UI section of the \n\t * editor configuration file, eg:\n\t * \n\t * (code)\n\t * <mxEditor>\n\t *   <ui>\n\t *     <resource basename=\"examples/resources/mxWorkflow\"/>\n\t * (end)\n\t * \n\t * The above element will load examples/resources/mxWorkflow.properties as well\n\t * as the language specific file for the current language, if it exists.\n\t * \n\t * Values may contain placeholders of the form {1}...{n} where each placeholder\n\t * is replaced with the value of the corresponding array element in the params\n\t * argument passed to <mxResources.get>. The placeholder {1} maps to the first\n\t * element in the array (at index 0).\n\t * \n\t * See <mxClient.language> for more information on specifying the default\n\t * language or disabling all loading of resources.\n\t * \n\t * Lines that start with a # sign will be ignored.\n\t * \n\t * Special characters\n\t * \n\t * To use unicode characters, use the standard notation (eg. \\u8fd1) or %u as a\n\t * prefix (eg. %u20AC will display a Euro sign). For normal hex encoded strings,\n\t * use % as a prefix, eg. %F6 will display a \"o umlaut\" (&ouml;).\n\t * \n\t * See <resourcesEncoded> to disable this. If you disable this, make sure that\n\t * your files are UTF-8 encoded.\n\t * \n\t * Asynchronous loading\n\t * \n\t * By default, the core adds two resource files synchronously at load time.\n\t * To load these files asynchronously, set <mxLoadResources> to false\n\t * before loading mxClient.js and use <mxResources.loadResources> instead.\n\t * \n\t * Variable: resources\n\t * \n\t * Object that maps from keys to values.\n\t */\n\tresources: {},\n\n\t/**\n\t * Variable: extension\n\t * \n\t * Specifies the extension used for language files. Default is <mxResourceExtension>.\n\t */\n\textension: mxResourceExtension,\n\n\t/**\n\t * Variable: resourcesEncoded\n\t * \n\t * Specifies whether or not values in resource files are encoded with \\u or\n\t * percentage. Default is false.\n\t */\n\tresourcesEncoded: false,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the default file for a given basename should be loaded.\n\t * Default is true.\n\t */\n\tloadDefaultBundle: true,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the specific language file file for a given basename should\n\t * be loaded. Default is true.\n\t */\n\tloadSpecialBundle: true,\n\n\t/**\n\t * Function: isLanguageSupported\n\t * \n\t * Hook for subclassers to disable support for a given language. This\n\t * implementation returns true if lan is in <mxClient.languages>.\n\t * \n\t * Parameters:\n\t *\n\t * lan - The current language.\n\t */\n\tisLanguageSupported: function(lan)\n\t{\n\t\tif (mxClient.languages != null)\n\t\t{\n\t\t\treturn mxUtils.indexOf(mxClient.languages, lan) >= 0;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getDefaultBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + <extension> or null if\n\t * <loadDefaultBundle> is false.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The current language.\n\t */\n\tgetDefaultBundle: function(basename, lan)\n\t{\n\t\tif (mxResources.loadDefaultBundle || !mxResources.isLanguageSupported(lan))\n\t\t{\n\t\t\treturn basename + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: getSpecialBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + '_' + lan + <extension> or null if\n\t * <loadSpecialBundle> is false or lan equals <mxClient.defaultLanguage>.\n\t * \n\t * If <mxResources.languages> is not null and <mxClient.language> contains\n\t * a dash, then this method checks if <isLanguageSupported> returns true\n\t * for the full language (including the dash). If that returns false the\n\t * first part of the language (up to the dash) will be tried as an extension.\n\t * \n\t * If <mxResources.language> is null then the first part of the language is\n\t * used to maintain backwards compatibility.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t */\n\tgetSpecialBundle: function(basename, lan)\n\t{\n\t\tif (mxClient.languages == null || !this.isLanguageSupported(lan))\n\t\t{\n\t\t\tvar dash = lan.indexOf('-');\n\t\t\t\n\t\t\tif (dash > 0)\n\t\t\t{\n\t\t\t\tlan = lan.substring(0, dash);\n\t\t\t}\n\t\t}\n\n\t\tif (mxResources.loadSpecialBundle && mxResources.isLanguageSupported(lan) && lan != mxClient.defaultLanguage)\n\t\t{\n\t\t\treturn basename + '_' + lan + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: add\n\t * \n\t * Adds the default and current language properties file for the specified\n\t * basename. Existing keys are overridden as new files are added. If no\n\t * callback is used then the request is synchronous.\n\t *\n\t * Example:\n\t * \n\t * At application startup, additional resources may be \n\t * added using the following code:\n\t * \n\t * (code)\n\t * mxResources.add('resources/editor');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t * callback - Optional callback for asynchronous loading.\n\t */\n\tadd: function(basename, lan, callback)\n\t{\n\t\tlan = (lan != null) ? lan : ((mxClient.language != null) ?\n\t\t\tmxClient.language.toLowerCase() : mxConstants.NONE);\n\t\t\n\t\tif (lan != mxConstants.NONE)\n\t\t{\n\t\t\tvar defaultBundle = mxResources.getDefaultBundle(basename, lan);\n\t\t\tvar specialBundle = mxResources.getSpecialBundle(basename, lan);\n\t\t\t\n\t\t\tvar loadSpecialBundle = function()\n\t\t\t{\n\t\t\t\tif (specialBundle != null)\n\t\t\t\t{\n\t\t\t\t\tif (callback)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxUtils.get(specialBundle, function(req)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t}, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t   \t\tvar req = mxUtils.load(specialBundle);\n\t\t\t\t\t   \t\t\n\t\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t\t   \t\t{\n\t\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t\t   \t\t}\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\tcatch (e)\n\t\t\t\t   \t\t{\n\t\t\t\t   \t\t\t// ignore\n\t\t\t\t\t   \t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (callback != null)\n\t\t\t\t{\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (defaultBundle != null)\n\t\t\t{\n\t\t\t\tif (callback)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.get(defaultBundle, function(req)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t}, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t   \t\tvar req = mxUtils.load(defaultBundle);\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t   \t\t{\n\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tloadSpecialBundle();\n\t\t\t\t  \t}\n\t\t\t\t  \tcatch (e)\n\t\t\t\t  \t{\n\t\t\t\t  \t\t// ignore\n\t\t\t\t  \t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Overlays the language specific file (_lan-extension)\n\t\t\t\tloadSpecialBundle();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: parse\n\t * \n\t * Parses the key, value pairs in the specified\n\t * text and stores them as local resources.\n\t */\n\tparse: function(text)\n\t{\n\t\tif (text != null)\n\t\t{\n\t\t\tvar lines = text.split('\\n');\n\t\t\t\n\t\t\tfor (var i = 0; i < lines.length; i++)\n\t\t\t{\n\t\t\t\tif (lines[i].charAt(0) != '#')\n\t\t\t\t{\n\t\t\t\t\tvar index = lines[i].indexOf('=');\n\t\t\t\t\t\n\t\t\t\t\tif (index > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar key = lines[i].substring(0, index);\n\t\t\t\t\t\tvar idx = lines[i].length;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (lines[i].charCodeAt(idx - 1) == 13)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tidx--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar value = lines[i].substring(index + 1, idx);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.resourcesEncoded)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue = value.replace(/\\\\(?=u[a-fA-F\\d]{4})/g,\"%\");\n\t\t\t\t\t\t\tmxResources.resources[key] = unescape(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.resources[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the value for the specified resource key.\n\t *\n\t * Example:\n\t * To read the value for 'welomeMessage', use the following:\n\t * (code)\n\t * var result = mxResources.get('welcomeMessage') || '';\n\t * (end)\n\t *\n\t * This would require an entry of the following form in\n\t * one of the English language resource files:\n\t * (code)\n\t * welcomeMessage=Welcome to mxGraph!\n\t * (end)\n\t * \n\t * The part behind the || is the string value to be used if the given\n\t * resource is not available.\n\t * \n\t * Parameters:\n\t * \n\t * key - String that represents the key of the resource to be returned.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t * defaultValue - Optional string that specifies the default return value.\n\t */\n\tget: function(key, params, defaultValue)\n\t{\n\t\tvar value = mxResources.resources[key];\n\t\t\n\t\t// Applies the default value if no resource was found\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\t\n\t\t// Replaces the placeholders with the values in the array\n\t\tif (value != null && params != null)\n\t\t{\n\t\t\tvalue = mxResources.replacePlaceholders(value, params);\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: replacePlaceholders\n\t * \n\t * Replaces the given placeholders with the given parameters.\n\t * \n\t * Parameters:\n\t * \n\t * value - String that contains the placeholders.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t */\n\treplacePlaceholders: function(value, params)\n\t{\n\t\tvar result = [];\n\t\tvar index = null;\n\t\t\n\t\tfor (var i = 0; i < value.length; i++)\n\t\t{\n\t\t\tvar c = value.charAt(i);\n\n\t\t\tif (c == '{')\n\t\t\t{\n\t\t\t\tindex = '';\n\t\t\t}\n\t\t\telse if (index != null && \tc == '}')\n\t\t\t{\n\t\t\t\tindex = parseInt(index)-1;\n\t\t\t\t\n\t\t\t\tif (index >= 0 && index < params.length)\n\t\t\t\t{\n\t\t\t\t\tresult.push(params[index]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tindex = null;\n\t\t\t}\n\t\t\telse if (index != null)\n\t\t\t{\n\t\t\t\tindex += c;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(c);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\n\t/**\n\t * Function: loadResources\n\t * \n\t * Loads all required resources asynchronously. Use this to load the graph and\n\t * editor resources if <mxLoadResources> is false.\n\t * \n\t * Parameters:\n\t * \n\t * callback - Callback function for asynchronous loading.\n\t */\n\tloadResources: function(callback)\n\t{\n\t\tmxResources.add(mxClient.basePath+'/resources/editor', null, function()\n\t\t{\n\t\t\tmxResources.add(mxClient.basePath+'/resources/graph', null, callback);\n\t\t});\n\t}\n\n};\n\n__mxOutput.mxResources = typeof mxResources !== 'undefined' ? mxResources : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPoint\n *\n * Implements a 2-dimensional vector with double precision coordinates.\n * \n * Constructor: mxPoint\n *\n * Constructs a new point for the optional x and y coordinates. If no\n * coordinates are given, then the default values for <x> and <y> are used.\n */\nfunction mxPoint(x, y)\n{\n\tthis.x = (x != null) ? x : 0;\n\tthis.y = (y != null) ? y : 0;\n};\n\n/**\n * Variable: x\n *\n * Holds the x-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.x = null;\n\n/**\n * Variable: y\n *\n * Holds the y-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.y = null;\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this point.\n */\nmxPoint.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxPoint.prototype.clone = function()\n{\n\t// Handles subclasses as well\n\treturn mxUtils.clone(this);\n};\n\n__mxOutput.mxPoint = typeof mxPoint !== 'undefined' ? mxPoint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangle\n *\n * Extends <mxPoint> to implement a 2-dimensional rectangle with double\n * precision coordinates.\n * \n * Constructor: mxRectangle\n *\n * Constructs a new rectangle for the optional parameters. If no parameters\n * are given then the respective default values are used.\n */\nfunction mxRectangle(x, y, width, height)\n{\n\tmxPoint.call(this, x, y);\n\n\tthis.width = (width != null) ? width : 0;\n\tthis.height = (height != null) ? height : 0;\n};\n\n/**\n * Extends mxPoint.\n */\nmxRectangle.prototype = new mxPoint();\nmxRectangle.prototype.constructor = mxRectangle;\n\n/**\n * Variable: width\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxRectangle.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxRectangle.prototype.height = null;\n\n/**\n * Function: setRect\n * \n * Sets this rectangle to the specified values\n */\nmxRectangle.prototype.setRect = function(x, y, w, h)\n{\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n};\n\n/**\n * Function: getCenterX\n * \n * Returns the x-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterX = function ()\n{\n\treturn this.x + this.width/2;\n};\n\n/**\n * Function: getCenterY\n * \n * Returns the y-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterY = function ()\n{\n\treturn this.y + this.height/2;\n};\n\n/**\n * Function: add\n *\n * Adds the given rectangle to this rectangle.\n */\nmxRectangle.prototype.add = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar minX = Math.min(this.x, rect.x);\n\t\tvar minY = Math.min(this.y, rect.y);\n\t\tvar maxX = Math.max(this.x + this.width, rect.x + rect.width);\n\t\tvar maxY = Math.max(this.y + this.height, rect.y + rect.height);\n\t\t\n\t\tthis.x = minX;\n\t\tthis.y = minY;\n\t\tthis.width = maxX - minX;\n\t\tthis.height = maxY - minY;\n\t}\n};\n\n/**\n * Function: intersect\n * \n * Changes this rectangle to where it overlaps with the given rectangle.\n */\nmxRectangle.prototype.intersect = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar r1 = this.x + this.width;\n\t\tvar r2 = rect.x + rect.width;\n\t\t\n\t\tvar b1 = this.y + this.height;\n\t\tvar b2 = rect.y + rect.height;\n\t\t\n\t\tthis.x = Math.max(this.x, rect.x);\n\t\tthis.y = Math.max(this.y, rect.y);\n\t\tthis.width = Math.min(r1, r2) - this.x;\n\t\tthis.height = Math.min(b1, b2) - this.y;\n\t}\n};\n\n/**\n * Function: grow\n *\n * Grows the rectangle by the given amount, that is, this method subtracts\n * the given amount from the x- and y-coordinates and adds twice the amount\n * to the width and height.\n */\nmxRectangle.prototype.grow = function(amount)\n{\n\tthis.x -= amount;\n\tthis.y -= amount;\n\tthis.width += 2 * amount;\n\tthis.height += 2 * amount;\n};\n\n/**\n * Function: getPoint\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxRectangle.prototype.getPoint = function()\n{\n\treturn new mxPoint(this.x, this.y);\n};\n\n/**\n * Function: rotate90\n * \n * Rotates this rectangle by 90 degree around its center point.\n */\nmxRectangle.prototype.rotate90 = function()\n{\n\tvar t = (this.width - this.height) / 2;\n\tthis.x += t;\n\tthis.y -= t;\n\tvar tmp = this.width;\n\tthis.width = this.height;\n\tthis.height = tmp;\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this rectangle.\n */\nmxRectangle.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y &&\n\t\tobj.width == this.width && obj.height == this.height;\n};\n\n/**\n * Function: fromRectangle\n * \n * Returns a new <mxRectangle> which is a copy of the given rectangle.\n */\nmxRectangle.fromRectangle = function(rect)\n{\n\treturn new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n};\n\n__mxOutput.mxRectangle = typeof mxRectangle !== 'undefined' ? mxRectangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEffects =\n{\n\n\t/**\n\t * Class: mxEffects\n\t * \n\t * Provides animation effects.\n\t */\n\n\t/**\n\t * Function: animateChanges\n\t * \n\t * Asynchronous animated move operation. See also: <mxMorphing>.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n\t * {\n\t *   var changes = evt.getProperty('edit').changes;\n\t * \n\t *   if (changes.length < 10)\n\t *   {\n\t *     mxEffects.animateChanges(graph, changes);\n\t *   }\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that received the changes.\n\t * changes - Array of changes to be animated.\n\t * done - Optional function argument that is invoked after the\n\t * last step of the animation.\n\t */\n\tanimateChanges: function(graph, changes, done)\n\t{\n\t\tvar maxStep = 10;\n\t\tvar step = 0;\n\n\t\tvar animate = function() \n\t\t{\n\t\t\tvar isRequired = false;\n\t\t\t\n\t\t\tfor (var i = 0; i < changes.length; i++)\n\t\t\t{\n\t\t\t\tvar change = changes[i];\n\t\t\t\t\n\t\t\t\tif (change instanceof mxGeometryChange ||\n\t\t\t\t\tchange instanceof mxTerminalChange ||\n\t\t\t\t\tchange instanceof mxValueChange ||\n\t\t\t\t\tchange instanceof mxChildChange ||\n\t\t\t\t\tchange instanceof mxStyleChange)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.getView().getState(change.cell || change.child, false);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tisRequired = true;\n\t\t\t\t\t\n\t\t\t\t\t\tif (change.constructor != mxGeometryChange || graph.model.isEdge(change.cell))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxUtils.setOpacity(state.shape.node, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar scale = graph.getView().scale;\t\t\t\t\t\n\n\t\t\t\t\t\t\tvar dx = (change.geometry.x - change.previous.x) * scale;\n\t\t\t\t\t\t\tvar dy = (change.geometry.y - change.previous.y) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar sx = (change.geometry.width - change.previous.width) * scale;\n\t\t\t\t\t\t\tvar sy = (change.geometry.height - change.previous.height) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (step == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x -= dx;\n\t\t\t\t\t\t\t\tstate.y -= dy;\n\t\t\t\t\t\t\t\tstate.width -= sx;\n\t\t\t\t\t\t\t\tstate.height -= sy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x += dx / maxStep;\n\t\t\t\t\t\t\t\tstate.y += dy / maxStep;\n\t\t\t\t\t\t\t\tstate.width += sx / maxStep;\n\t\t\t\t\t\t\t\tstate.height += sy / maxStep;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tgraph.cellRenderer.redraw(state);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Fades all connected edges and children\n\t\t\t\t\t\t\tmxEffects.cascadeOpacity(graph, change.cell, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (step < maxStep && isRequired)\n\t\t\t{\n\t\t\t\tstep++;\n\t\t\t\twindow.setTimeout(animate, delay);\n\t\t\t}\n\t\t\telse if (done != null)\n\t\t\t{\n\t\t\t\tdone();\n\t\t\t}\n\t\t};\n\t\t\n\t\tvar delay = 30;\n\t\tanimate();\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * Sets the opacity on the given cell and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells.\n\t * cell - <mxCell> to set the opacity for.\n\t * opacity - New value for the opacity in %.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\t// Fades all children\n\t\tvar childCount = graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar child = graph.model.getChildAt(cell, i);\n\t\t\tvar childState = graph.getView().getState(child);\n\t\t\t\n\t\t\tif (childState != null)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(childState.shape.node, opacity);\n\t\t\t\tmxEffects.cascadeOpacity(graph, child, opacity);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Fades all connected edges\n\t\tvar edges = graph.model.getEdges(cell);\n\t\t\n\t\tif (edges != null)\n\t\t{\n\t\t\tfor (var i=0; i<edges.length; i++)\n\t\t\t{\n\t\t\t\tvar edgeState = graph.getView().getState(edges[i]);\n\t\t\t\t\n\t\t\t\tif (edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.setOpacity(edgeState.shape.node, opacity);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * Asynchronous fade-out operation.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tstep = step || 40;\n\t\tdelay = delay || 30;\n\t\t\n\t\tvar opacity = from || 100;\n\t\t\n\t\tmxUtils.setOpacity(node, opacity);\n\t\t\n\t\tif (isEnabled || isEnabled == null)\n\t\t{\n\t\t\tvar f = function()\n\t\t\t{\n\t\t\t    opacity = Math.max(opacity-step, 0);\n\t\t\t\tmxUtils.setOpacity(node, opacity);\n\t\t\t\t\n\t\t\t\tif (opacity > 0)\n\t\t\t\t{\n\t\t\t\t\twindow.setTimeout(f, delay);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\t\t\n\t\t\t\t\tif (remove && node.parentNode)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\twindow.setTimeout(f, delay);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\n\t\t\tif (remove && node.parentNode)\n\t\t\t{\n\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t}\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxEffects = typeof mxEffects !== 'undefined' ? mxEffects : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxUtils =\n{\n\t/**\n\t * Class: mxUtils\n\t * \n\t * A singleton class that provides cross-browser helper methods.\n\t * This is a global functionality. To access the functions in this\n\t * class, use the global classname appended by the functionname.\n\t * You may have to load chrome://global/content/contentAreaUtils.js\n\t * to disable certain security restrictions in Mozilla for the <open>,\n\t * <save>, <saveAs> and <copy> function.\n\t * \n\t * For example, the following code displays an error message:\n\t * \n\t * (code)\n\t * mxUtils.error('Browser is not supported!', 200, false);\n\t * (end)\n\t * \n\t * Variable: errorResource\n\t * \n\t * Specifies the resource key for the title of the error window. If the\n\t * resource for this key does not exist then the value is used as\n\t * the title. Default is 'error'.\n\t */\n\terrorResource: (mxClient.language != 'none') ? 'error' : '',\n\t\n\t/**\n\t * Variable: closeResource\n\t * \n\t * Specifies the resource key for the label of the close button. If the\n\t * resource for this key does not exist then the value is used as\n\t * the label. Default is 'close'.\n\t */\n\tcloseResource: (mxClient.language != 'none') ? 'close' : '',\n\n\t/**\n\t * Variable: errorImage\n\t * \n\t * Defines the image used for error dialogs.\n\t */\n\terrorImage: mxClient.imageBasePath + '/error.gif',\n\t\n\t/**\n\t * Function: removeCursors\n\t * \n\t * Removes the cursors from the style of the given DOM node and its\n\t * descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the cursor style from.\n\t */\n\tremoveCursors: function(element)\n\t{\n\t\tif (element.style != null)\n\t\t{\n\t\t\telement.style.cursor = '';\n\t\t}\n\t\t\n\t\tvar children = element.childNodes;\n\t\t\n\t\tif (children != null)\n\t\t{\n\t        var childCount = children.length;\n\t        \n\t        for (var i = 0; i < childCount; i += 1)\n\t        {\n\t            mxUtils.removeCursors(children[i]);\n\t        }\n\t    }\n\t},\n\n\t/**\n\t * Function: getCurrentStyle\n\t * \n\t * Returns the current style of the specified element.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node whose current style should be returned.\n\t */\n\tgetCurrentStyle: function()\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 9))\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ? element.currentStyle : null;\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ?\n\t\t\t\t\twindow.getComputedStyle(element, '') :\n\t\t\t\t\tnull;\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: parseCssNumber\n\t * \n\t * Parses the given CSS numeric value adding handling for the values thin,\n\t * medium and thick (2, 4 and 6).\n\t */\n\tparseCssNumber: function(value)\n\t{\n\t\tif (value == 'thin')\n\t\t{\n\t\t\tvalue = '2';\n\t\t}\n\t\telse if (value == 'medium')\n\t\t{\n\t\t\tvalue = '4';\n\t\t}\n\t\telse if (value == 'thick')\n\t\t{\n\t\t\tvalue = '6';\n\t\t}\n\t\t\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: setPrefixedStyle\n\t * \n\t * Adds the given style with the standard name and an optional vendor prefix for the current\n\t * browser.\n\t * \n\t * (code)\n\t * mxUtils.setPrefixedStyle(node.style, 'transformOrigin', '0% 0%');\n\t * (end)\n\t */\n\tsetPrefixedStyle: function()\n\t{\n\t\tvar prefix = null;\n\t\t\n\t\tif (mxClient.IS_OT)\n\t\t{\n\t\t\tprefix = 'O';\n\t\t}\n\t\telse if (mxClient.IS_SF || mxClient.IS_GC)\n\t\t{\n\t\t\tprefix = 'Webkit';\n\t\t}\n\t\telse if (mxClient.IS_MT)\n\t\t{\n\t\t\tprefix = 'Moz';\n\t\t}\n\t\telse if (mxClient.IS_IE && document.documentMode >= 9 && document.documentMode < 10)\n\t\t{\n\t\t\tprefix = 'ms';\n\t\t}\n\n\t\treturn function(style, name, value)\n\t\t{\n\t\t\tstyle[name] = value;\n\t\t\t\n\t\t\tif (prefix != null && name.length > 0)\n\t\t\t{\n\t\t\t\tname = prefix + name.substring(0, 1).toUpperCase() + name.substring(1);\n\t\t\t\tstyle[name] = value;\n\t\t\t}\n\t\t};\n\t}(),\n\t\n\t/**\n\t * Function: hasScrollbars\n\t * \n\t * Returns true if the overflow CSS property of the given node is either\n\t * scroll or auto.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose style should be checked for scrollbars.\n\t */\n\thasScrollbars: function(node)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(node);\n\n\t\treturn style != null && (style.overflow == 'scroll' || style.overflow == 'auto');\n\t},\n\t\n\t/**\n\t * Function: bind\n\t * \n\t * Returns a wrapper function that locks the execution scope of the given\n\t * function to the specified scope. Inside funct, the \"this\" keyword\n\t * becomes a reference to that scope.\n\t */\n\tbind: function(scope, funct)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\treturn funct.apply(scope, arguments);\n\t\t};\n\t},\n\t\n\t/**\n\t * Function: eval\n\t * \n\t * Evaluates the given expression using eval and returns the JavaScript\n\t * object that represents the expression result. Supports evaluation of\n\t * expressions that define functions and returns the function object for\n\t * these expressions.\n\t * \n\t * Parameters:\n\t * \n\t * expr - A string that represents a JavaScript expression.\n\t */\n\teval: function(expr)\n\t{\n\t\tvar result = null;\n\n\t\tif (expr.indexOf('function') >= 0)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\teval('var _mxJavaScriptExpression='+expr);\n\t\t\t\tresult = _mxJavaScriptExpression;\n\t\t\t\t// TODO: Use delete here?\n\t\t\t\t_mxJavaScriptExpression = null;\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tresult = eval(expr);\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNode\n\t * \n\t * Returns the first node where attr equals value.\n\t * This implementation does not use XPath.\n\t */\n\tfindNode: function(node, attr, value)\n\t{\n\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\tvar tmp = node.getAttribute(attr);\n\t\n\t\t\tif (tmp != null && tmp == value)\n\t\t\t{\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tvar result = mxUtils.findNode(node, attr, value);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: getFunctionName\n\t * \n\t * Returns the name for the given function.\n\t * \n\t * Parameters:\n\t * \n\t * f - JavaScript object that represents a function.\n\t */\n\tgetFunctionName: function(f)\n\t{\n\t\tvar str = null;\n\n\t\tif (f != null)\n\t\t{\n\t\t\tif (f.name != null)\n\t\t\t{\n\t\t\t\tstr = f.name;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstr = mxUtils.trim(f.toString());\n\t\t\t\t\n\t\t\t\tif (/^function\\s/.test(str))\n\t\t\t\t{\n\t\t\t\t\tstr = mxUtils.ltrim(str.substring(9));\n\t\t\t\t\tvar idx2 = str.indexOf('(');\n\t\t\t\t\t\n\t\t\t\t\tif (idx2 > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstr = str.substring(0, idx2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn str;\n\t},\n\n\t/**\n\t * Function: indexOf\n\t * \n\t * Returns the index of obj in array or -1 if the array does not contain\n\t * the given object.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array to check for the given obj.\n\t * obj - Object to find in the given array.\n\t */\n\tindexOf: function(array, obj)\n\t{\n\t\tif (array != null && obj != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tif (array[i] == obj)\n\t\t\t\t{\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn -1;\n\t},\n\n\t/**\n\t * Function: forEach\n\t * \n\t * Calls the given function for each element of the given array and returns\n\t * the array.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array that contains the elements.\n\t * fn - Function to be called for each object.\n\t */\n\tforEach: function(array, fn)\n\t{\n\t\tif (array != null && fn != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tfn(array[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn array;\n\t},\n\n\t/**\n\t * Function: remove\n\t * \n\t * Removes all occurrences of the given object in the given array or\n\t * object. If there are multiple occurrences of the object, be they\n\t * associative or as an array entry, all occurrences are removed from\n\t * the array or deleted from the object. By removing the object from\n\t * the array, all elements following the removed element are shifted\n\t * by one step towards the beginning of the array.\n\t * \n\t * The length of arrays is not modified inside this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to find in the given array.\n\t * array - Array to check for the given obj.\n\t */\n\tremove: function(obj, array)\n\t{\n\t\tvar result = null;\n\t\t\n\t\tif (typeof(array) == 'object')\n\t\t{\n\t\t\tvar index = mxUtils.indexOf(array, obj);\n\t\t\t\n\t\t\twhile (index >= 0)\n\t\t\t{\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\tresult = obj;\n\t\t\t\tindex = mxUtils.indexOf(array, obj);\n\t\t\t}\n\t\t}\n\n\t\tfor (var key in array)\n\t\t{\n\t\t\tif (array[key] == obj)\n\t\t\t{\n\t\t\t\tdelete array[key];\n\t\t\t\tresult = obj;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNode\n\t * \n\t * Returns true if the given value is an XML node with the node name\n\t * and if the optional attribute has the specified value.\n\t * \n\t * This implementation assumes that the given value is a DOM node if the\n\t * nodeType property is numeric, that is, if isNaN returns false for\n\t * value.nodeType.\n\t * \n\t * Parameters:\n\t * \n\t * value - Object that should be examined as a node.\n\t * nodeName - String that specifies the node name.\n\t * attributeName - Optional attribute name to check.\n\t * attributeValue - Optional attribute value to check.\n\t */\n\t isNode: function(value, nodeName, attributeName, attributeValue)\n\t {\n\t \tif (value != null && !isNaN(value.nodeType) && (nodeName == null ||\n\t \t\tvalue.nodeName.toLowerCase() == nodeName.toLowerCase()))\n \t\t{\n \t\t\treturn attributeName == null ||\n \t\t\t\tvalue.getAttribute(attributeName) == attributeValue;\n \t\t}\n\t \t\n\t \treturn false;\n\t },\n\t\n\t/**\n\t * Function: isAncestorNode\n\t * \n\t * Returns true if the given ancestor is an ancestor of the\n\t * given DOM node in the DOM. This also returns true if the\n\t * child is the ancestor.\n\t * \n\t * Parameters:\n\t * \n\t * ancestor - DOM node that represents the ancestor.\n\t * child - DOM node that represents the child.\n\t */\n\t isAncestorNode: function(ancestor, child)\n\t {\n\t \tvar parent = child;\n\t \t\n\t \twhile (parent != null)\n\t \t{\n\t \t\tif (parent == ancestor)\n\t \t\t{\n\t \t\t\treturn true;\n\t \t\t}\n\n\t \t\tparent = parent.parentNode;\n\t \t}\n\t \t\n\t \treturn false;\n\t },\n\n\t/**\n\t * Function: getChildNodes\n\t * \n\t * Returns an array of child nodes that are of the given node type.\n\t * \n\t * Parameters:\n\t * \n\t * node - Parent DOM node to return the children from.\n\t * nodeType - Optional node type to return. Default is\n\t * <mxConstants.NODETYPE_ELEMENT>.\n\t */\n\tgetChildNodes: function(node, nodeType)\n\t{\n\t\tnodeType = nodeType || mxConstants.NODETYPE_ELEMENT;\n\t\t\n\t\tvar children = [];\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == nodeType)\n\t\t\t{\n\t\t\t\tchildren.push(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t\t\n\t\treturn children;\n\t},\n\n\t/**\n\t * Function: importNode\n\t * \n\t * Cross browser implementation for document.importNode. Uses document.importNode\n\t * in all browsers but IE, where the node is cloned by creating a new node and\n\t * copying all attributes and children into it using importNode, recursively.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNode: function(doc, node, allChildren)\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 10))\n\t\t{\n\t\t\treturn mxUtils.importNodeImplementation(doc, node, allChildren);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn doc.importNode(node, allChildren);\n\t\t}\n\t},\n\n\t/**\n\t * Function: importNodeImplementation\n\t * \n\t * Full DOM API implementation for importNode without using importNode API call.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNodeImplementation: function(doc, node, allChildren)\n\t{\n\t\tswitch (node.nodeType)\n\t\t{\n\t\t\tcase 1: /* element */\n\t\t\t{\n\t\t\t\tvar newNode = doc.createElement(node.nodeName);\n\t\t\t\t\n\t\t\t\tif (node.attributes && node.attributes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < node.attributes.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewNode.setAttribute(node.attributes[i].nodeName,\n\t\t\t\t\t\t\tnode.getAttribute(node.attributes[i].nodeName));\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (allChildren && node.childNodes && node.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < node.childNodes.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewNode.appendChild(mxUtils.importNodeImplementation(doc, node.childNodes[i], allChildren));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn newNode;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3: /* text */\n\t\t    case 4: /* cdata-section */\n\t\t    case 8: /* comment */\n\t\t    {\n\t\t    \treturn doc.createTextNode((node.nodeValue != null) ? node.nodeValue : node.value);\n\t\t    \tbreak;\n\t\t    }\n\t\t};\n\t},\n\n\t/**\n\t * Function: createXmlDocument\n\t * \n\t * Returns a new, empty XML document.\n\t */\n\tcreateXmlDocument: function()\n\t{\n\t\tvar doc = null;\n\t\t\n\t\tif (document.implementation && document.implementation.createDocument)\n\t\t{\n\t\t\tdoc = document.implementation.createDocument('', '', null);\n\t\t}\n\t\telse if (\"ActiveXObject\" in window)\n\t\t{\n\t\t\tdoc = mxUtils.createMsXmlDocument();\n\t \t}\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: createMsXmlDocument\n\t * \n\t * Returns a new, empty Microsoft.XMLDOM document using ActiveXObject.\n\t */\n\tcreateMsXmlDocument: function()\n\t{\n\t\tvar doc = new ActiveXObject('Microsoft.XMLDOM');\n\t\tdoc.async = false;\n\n\t\t// Workaround for parsing errors with SVG DTD\n\t\tdoc.validateOnParse = false;\n\t\tdoc.resolveExternals = false;\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: parseXml\n\t * \n\t * Parses the specified XML string into a new XML document and returns the\n\t * new document.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var doc = mxUtils.parseXml(\n\t *   '<mxGraphModel><root><MyDiagram id=\"0\"><mxCell/></MyDiagram>'+\n\t *   '<MyLayer id=\"1\"><mxCell parent=\"0\" /></MyLayer><MyObject id=\"2\">'+\n\t *   '<mxCell style=\"strokeColor=blue;fillColor=red\" parent=\"1\" vertex=\"1\">'+\n\t *   '<mxGeometry x=\"10\" y=\"10\" width=\"80\" height=\"30\" as=\"geometry\"/>'+\n\t *   '</mxCell></MyObject></root></mxGraphModel>');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * xml - String that contains the XML data.\n\t */\n\tparseXml: function()\n\t{\n\t\tif (window.DOMParser)\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\n\t\t\t\treturn parser.parseFromString(xml, 'text/xml');\n\t\t\t};\n\t\t}\n\t\telse // IE<=9\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar doc = mxUtils.createMsXmlDocument();\n\t\t\t\tdoc.loadXML(xml);\n\t\t\t\t\n\t\t\t\treturn doc;\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: clearSelection\n\t * \n\t * Clears the current selection in the page.\n\t */\n\tclearSelection: function()\n\t{\n\t\tif (document.selection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tdocument.selection.empty();\n\t\t\t};\n\t\t}\n\t\telse if (window.getSelection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tif (window.getSelection().empty)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().empty();\n\t\t\t\t}\n\t\t\t\telse if (window.getSelection().removeAllRanges)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function() { };\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeWhitespace\n\t * \n\t * Removes the sibling text nodes for the given node that only consists\n\t * of tabs, newlines and spaces.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose siblings should be removed.\n\t * before - Optional boolean that specifies the direction of the traversal.\n\t */\n\tremoveWhitespace: function(node, before)\n\t{\n\t\tvar tmp = (before) ? node.previousSibling : node.nextSibling;\n\t\t\n\t\twhile (tmp != null && tmp.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tvar next = (before) ? tmp.previousSibling : tmp.nextSibling;\n\t\t\tvar text = mxUtils.getTextContent(tmp);\n\t\t\t\n\t\t\tif (mxUtils.trim(text).length == 0)\n\t\t\t{\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = next;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: htmlEntities\n\t * \n\t * Replaces characters (less than, greater than, newlines and quotes) with\n\t * their HTML entities in the given string and returns the result.\n\t * \n\t * Parameters:\n\t * \n\t * s - String that contains the characters to be converted.\n\t * newline - If newlines should be replaced. Default is true.\n\t */\n\thtmlEntities: function(s, newline)\n\t{\n\t\ts = String(s || '');\n\t\t\n\t\ts = s.replace(/&/g,'&amp;'); // 38 26\n\t\ts = s.replace(/\"/g,'&quot;'); // 34 22\n\t\ts = s.replace(/\\'/g,'&#39;'); // 39 27\n\t\ts = s.replace(/</g,'&lt;'); // 60 3C\n\t\ts = s.replace(/>/g,'&gt;'); // 62 3E\n\n\t\tif (newline == null || newline)\n\t\t{\n\t\t\ts = s.replace(/\\n/g, '&#xa;');\n\t\t}\n\t\t\n\t\treturn s;\n\t},\n\t\n\t/**\n\t * Function: isVml\n\t * \n\t * Returns true if the given node is in the VML namespace.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose tag urn should be checked.\n\t */\n\tisVml: function(node)\n\t{\n\t\treturn node != null && node.tagUrn == 'urn:schemas-microsoft-com:vml';\n\t},\n\n\t/**\n\t * Function: getXml\n\t * \n\t * Returns the XML content of the specified node. For Internet Explorer,\n\t * all \\r\\n\\t[\\t]* are removed from the XML string and the remaining \\r\\n\n\t * are replaced by \\n. All \\n are then replaced with linefeed, or &#xa; if\n\t * no linefeed is defined.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * linefeed - Optional string that linefeeds are converted into. Default is\n\t * &#xa;\n\t */\n\tgetXml: function(node, linefeed)\n\t{\n\t\tvar xml = '';\n\t\t\n\t\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t\t{\n\t\t\txml = mxUtils.getPrettyXml(node, '', '', '');\n\t\t}\n\t\telse if (window.XMLSerializer != null)\n\t\t{\n\t\t\tvar xmlSerializer = new XMLSerializer();\n\t\t\txml = xmlSerializer.serializeToString(node);     \n\t\t}\n\t\telse if (node.xml != null)\n\t\t{\n\t\t\txml = node.xml.replace(/\\r\\n\\t[\\t]*/g, '').\n\t\t\t\treplace(/>\\r\\n/g, '>').\n\t\t\t\treplace(/\\r\\n/g, '\\n');\n\t\t}\n\n\t\t// Replaces linefeeds with HTML Entities.\n\t\tlinefeed = linefeed || '&#xa;';\n\t\txml = xml.replace(/\\n/g, linefeed);\n\t\t  \n\t\treturn xml;\n\t},\n\t\n\t/**\n\t * Function: getPrettyXML\n\t * \n\t * Returns a pretty printed string that represents the XML tree for the\n\t * given node. This method should only be used to print XML for reading,\n\t * use <getXml> instead to obtain a string for processing.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * tab - Optional string that specifies the indentation for one level.\n\t * Default is two spaces.\n\t * indent - Optional string that represents the current indentation.\n\t * Default is an empty string.\n\t * newline - Option string that represents a linefeed. Default is '\\n'.\n\t */\n\tgetPrettyXml: function(node, tab, indent, newline, ns)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (node != null)\n\t\t{\n\t\t\ttab = (tab != null) ? tab : '  ';\n\t\t\tindent = (indent != null) ? indent : '';\n\t\t\tnewline = (newline != null) ? newline : '\\n';\n\t\t\t\n\t\t\tif (node.namespaceURI != null && node.namespaceURI != ns)\n\t\t\t{\n\t\t\t\tns = node.namespaceURI;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('xmlns') == null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('xmlns', node.namespaceURI);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (node.nodeType == mxConstants.NODETYPE_DOCUMENT)\n\t\t\t{\n\t\t\t\tresult.push(mxUtils.getPrettyXml(node.documentElement, tab, indent, newline, ns));\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_DOCUMENT_FRAGMENT)\n\t\t\t{\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent, newline, ns));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_COMMENT)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.getTextContent(node);\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + '<!--' + value + '-->' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.getTextContent(node);\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + mxUtils.htmlEntities(mxUtils.trim(value), false) + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(indent + '<' + node.nodeName);\n\t\t\t\t\n\t\t\t\t// Creates the string with the node attributes\n\t\t\t\t// and converts all HTML entities in the values\n\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\n\t\t\t\tif (attrs != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar val = mxUtils.htmlEntities(attrs[i].value);\n\t\t\t\t\t\tresult.push(' ' + attrs[i].nodeName + '=\"' + val + '\"');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Recursively creates the XML string for each child\n\t\t\t\t// node and appends it here with an indentation\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tresult.push('>' + newline);\n\t\t\t\t\t\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent + tab, newline, ns));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tresult.push(indent + '</'+ node.nodeName + '>' + newline);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult.push(' />' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\t\n\t/**\n\t * Function: extractTextWithWhitespace\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * elems - DOM nodes to return the text for.\n\t */\n\textractTextWithWhitespace: function(elems)\n\t{\n\t    // Known block elements for handling linefeeds (list is not complete)\n\t\tvar blocks = ['BLOCKQUOTE', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'OL', 'P', 'PRE', 'TABLE', 'UL'];\n\t\tvar ret = [];\n\t\t\n\t\tfunction doExtract(elts)\n\t\t{\n\t\t\t// Single break should be ignored\n\t\t\tif (elts.length == 1 && (elts[0].nodeName == 'BR' ||\n\t\t\t\telts[0].innerHTML == '\\n'))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t    for (var i = 0; i < elts.length; i++)\n\t\t    {\n\t\t        var elem = elts[i];\n\n\t\t\t\t// DIV with a br or linefeed forces a linefeed\n\t\t\t\tif (elem.nodeName == 'BR' || elem.innerHTML == '\\n' ||\n\t\t\t\t\t((elts.length == 1 || i == 0) && (elem.nodeName == 'DIV' &&\n\t\t\t\t\telem.innerHTML.toLowerCase() == '<br>')))\n\t\t    \t{\n\t    \t\t\tret.push('\\n');\n\t\t    \t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t        if (elem.nodeType === 3 || elem.nodeType === 4)\n\t\t\t        {\n\t\t\t        \tif (elem.nodeValue.length > 0)\n\t\t\t        \t{\n\t\t\t        \t\tret.push(elem.nodeValue);\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        else if (elem.nodeType !== 8 && elem.childNodes.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdoExtract(elem.childNodes);\n\t\t\t\t\t}\n\t\t\t        \n\t        \t\tif (i < elts.length - 1 && mxUtils.indexOf(blocks, elts[i + 1].nodeName) >= 0)\n\t        \t\t{\n\t        \t\t\tret.push('\\n');\t\t\n\t        \t\t}\n\t\t\t\t}\n\t\t    }\n\t\t};\n\t\t\n\t\tdoExtract(elems);\n\t    \n\t    return ret.join('');\n\t},\n\n\t/**\n\t * Function: replaceTrailingNewlines\n\t * \n\t * Replaces each trailing newline with the given pattern.\n\t */\n\treplaceTrailingNewlines: function(str, pattern)\n\t{\n\t\t// LATER: Check is this can be done with a regular expression\n\t\tvar postfix = '';\n\t\t\n\t\twhile (str.length > 0 && str.charAt(str.length - 1) == '\\n')\n\t\t{\n\t\t\tstr = str.substring(0, str.length - 1);\n\t\t\tpostfix += pattern;\n\t\t}\n\t\t\n\t\treturn str + postfix;\n\t},\n\n\t/**\n\t * Function: getTextContent\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the text content for.\n\t */\n\tgetTextContent: function(node)\n\t{\n\t\t// Only IE10-\n\t\tif (mxClient.IS_IE && node.innerText !== undefined)\n\t\t{\n\t\t\treturn node.innerText;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (node != null) ? node[(node.textContent === undefined) ? 'text' : 'textContent'] : '';\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setTextContent\n\t * \n\t * Sets the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the text content for.\n\t * text - String that represents the text content.\n\t */\n\tsetTextContent: function(node, text)\n\t{\n\t\tif (node.innerText !== undefined)\n\t\t{\n\t\t\tnode.innerText = text;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode[(node.textContent === undefined) ? 'text' : 'textContent'] = text;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getInnerHtml\n\t * \n\t * Returns the inner HTML for the given node as a string or an empty string\n\t * if no node was specified. The inner HTML is the text representing all\n\t * children of the node, but not the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the inner HTML for.\n\t */\n\tgetInnerHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\treturn node.innerHTML;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: getOuterHtml\n\t * \n\t * Returns the outer HTML for the given node as a string or an empty\n\t * string if no node was specified. The outer HTML is the text representing\n\t * all children of the node including the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the outer HTML for.\n\t */\n\tgetOuterHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tif (node.outerHTML != null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn node.outerHTML;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = [];\n\t\t\t\t\t\ttmp.push('<'+node.nodeName);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (attrs != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar value = attrs[i].value;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (value != null && value.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.push(' ');\n\t\t\t\t\t\t\t\t\ttmp.push(attrs[i].nodeName);\n\t\t\t\t\t\t\t\t\ttmp.push('=\"');\n\t\t\t\t\t\t\t\t\ttmp.push(value);\n\t\t\t\t\t\t\t\t\ttmp.push('\"');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (node.innerHTML.length == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('/>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('>');\n\t\t\t\t\t\t\ttmp.push(node.innerHTML);\n\t\t\t\t\t\t\ttmp.push('</'+node.nodeName+'>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn tmp.join('');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: write\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twrite: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent with an additional linefeed. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twriteln: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t\tparent.appendChild(document.createElement('br'));\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: br\n\t * \n\t * Appends a linebreak to the given parent and returns the linebreak.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the linebreak to.\n\t */\n\tbr: function(parent, count)\n\t{\n\t\tcount = count || 1;\n\t\tvar br = null;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tif (parent != null)\n\t\t\t{\n\t\t\t\tbr = parent.ownerDocument.createElement('br');\n\t\t\t\tparent.appendChild(br);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn br;\n\t},\n\t\t\n\t/**\n\t * Function: button\n\t * \n\t * Returns a new button with the given level and function as an onclick\n\t * event handler.\n\t * \n\t * (code)\n\t * document.body.appendChild(mxUtils.button('Test', function(evt)\n\t * {\n\t *   alert('Hello, World!');\n\t * }));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * label - String that represents the label of the button.\n\t * funct - Function to be called if the button is pressed.\n\t * doc - Optional document to be used for creating the button. Default is the\n\t * current document.\n\t */\n\tbutton: function(label, funct, doc)\n\t{\n\t\tdoc = (doc != null) ? doc : document;\n\t\t\n\t\tvar button = doc.createElement('button');\n\t\tmxUtils.write(button, label);\n\n\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t{\n\t\t\tfunct(evt);\n\t\t});\n\t\t\n\t\treturn button;\n\t},\n\t\n\t/**\n\t * Function: para\n\t * \n\t * Appends a new paragraph with the given text to the specified parent and\n\t * returns the paragraph.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text for the new paragraph.\n\t */\n\tpara: function(parent, text)\n\t{\n\t\tvar p = document.createElement('p');\n\t\tmxUtils.write(p, text);\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(p);\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: addTransparentBackgroundFilter\n\t * \n\t * Adds a transparent background to the filter of the given node. This\n\t * background can be used in IE8 standards mode (native IE8 only) to pass\n\t * events through the node.\n\t */\n\taddTransparentBackgroundFilter: function(node)\n\t{\n\t\tnode.style.filter += 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\\'' +\n\t\t\tmxClient.imageBasePath + '/transparent.gif\\', sizingMethod=\\'scale\\')';\n\t},\n\n\t/**\n\t * Function: linkAction\n\t * \n\t * Adds a hyperlink to the specified parent that invokes action on the\n\t * specified editor.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> that will execute the action.\n\t * action - String that defines the name of the action to be executed.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkAction: function(parent, text, editor, action, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor.execute(action);\n\t\t}, pad);\n\t},\n\n\t/**\n\t * Function: linkInvoke\n\t * \n\t * Adds a hyperlink to the specified parent that invokes the specified\n\t * function on the editor passing along the specified argument. The\n\t * function name is the name of a function of the editor instance,\n\t * not an action name.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> instance to execute the function on.\n\t * functName - String that represents the name of the function.\n\t * arg - Object that represents the argument to the function.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkInvoke: function(parent, text, editor, functName, arg, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor[functName](arg);\n\t\t}, pad);\n\t},\n\t\n\t/**\n\t * Function: link\n\t * \n\t * Adds a hyperlink to the specified parent and invokes the given function\n\t * when the link is clicked.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * funct - Function to execute when the link is clicked.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlink: function(parent, text, funct, pad)\n\t{\n\t\tvar a = document.createElement('span');\n\t\t\n\t\ta.style.color = 'blue';\n\t\ta.style.textDecoration = 'underline';\n\t\ta.style.cursor = 'pointer';\n\t\t\n\t\tif (pad != null)\n\t\t{\n\t\t\ta.style.paddingLeft = pad+'px';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(a, 'click', funct);\n\t\tmxUtils.write(a, text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(a);\n\t\t}\n\t\t\n\t\treturn a;\n\t},\n\n\t/**\n\t * Function: getDocumentSize\n\t * \n\t * Returns the client size for the current document as an <mxRectangle>.\n\t */\n\tgetDocumentSize: function()\n\t{\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\ttry\n\t\t{\n\t\t\treturn new mxRectangle(0, 0, b.clientWidth || d.clientWidth, Math.max(b.clientHeight || 0, d.clientHeight));\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\treturn new mxRectangle();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: fit\n\t * \n\t * Makes sure the given node is inside the visible area of the window. This\n\t * is done by setting the left and top in the style. \n\t */\n\tfit: function(node)\n\t{\n\t\tvar ds = mxUtils.getDocumentSize();\n\t\tvar left = parseInt(node.offsetLeft);\n\t\tvar width = parseInt(node.offsetWidth);\n\t\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(node.ownerDocument);\n\t\tvar sl = offset.x;\n\t\tvar st = offset.y;\n\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\tvar right = (sl) + ds.width;\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\tnode.style.left = Math.max(sl, right - width) + 'px';\n\t\t}\n\t\t\n\t\tvar top = parseInt(node.offsetTop);\n\t\tvar height = parseInt(node.offsetHeight);\n\t\t\n\t\tvar bottom = st + ds.height;\n\t\t\n\t\tif (top + height > bottom)\n\t\t{\n\t\t\tnode.style.top = Math.max(st, bottom - height) + 'px';\n\t\t}\n\t},\n\n\t/**\n\t * Function: load\n\t * \n\t * Loads the specified URL *synchronously* and returns the <mxXmlRequest>.\n\t * Throws an exception if the file cannot be loaded. See <mxUtils.get> for\n\t * an asynchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * try\n\t * {\n\t *   var req = mxUtils.load(filename);\n\t *   var root = req.getDocumentElement();\n\t *   // Process XML DOM...\n\t * }\n\t * catch (ex)\n\t * {\n\t *   mxUtils.alert('Cannot load '+filename+': '+ex);\n\t * }\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t */\n\tload: function(url)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET', false);\n\t\treq.send();\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Loads the specified URL *asynchronously* and invokes the given functions\n\t * depending on the request status. Returns the <mxXmlRequest> in use. Both\n\t * functions take the <mxXmlRequest> as the only parameter. See\n\t * <mxUtils.load> for a synchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *    var node = req.getDocumentElement();\n\t *    // Process XML DOM...\n\t * });\n\t * (end)\n\t * \n\t * So for example, to load a diagram into an existing graph model, the\n\t * following code is used.\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *   var node = req.getDocumentElement();\n\t *   var dec = new mxCodec(node.ownerDocument);\n\t *   dec.decode(node, graph.getModel());\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t * binary - Optional boolean parameter that specifies if the request is\n\t * binary.\n\t * timeout - Optional timeout in ms before calling ontimeout.\n\t * ontimeout - Optional function to execute on timeout.\n\t * headers - Optional with headers, eg. {'Authorization': 'token xyz'}\n\t */\n\tget: function(url, onload, onerror, binary, timeout, ontimeout, headers)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET');\n\t\tvar setRequestHeaders = req.setRequestHeaders;\n\t\t\n\t\tif (headers)\n\t\t{\n\t\t\treq.setRequestHeaders = function(request, params)\n\t\t\t{\n\t\t\t\tsetRequestHeaders.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tfor (var key in headers)\n\t\t\t\t{\n\t\t\t\t\trequest.setRequestHeader(key, headers[key]);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (binary != null)\n\t\t{\n\t\t\treq.setBinary(binary);\n\t\t}\n\t\t\n\t\treq.send(onload, onerror, timeout, ontimeout);\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: getAll\n\t * \n\t * Loads the URLs in the given array *asynchronously* and invokes the given function\n\t * if all requests returned with a valid 2xx status. The error handler is invoked\n\t * once on the first error or invalid response.\n\t *\n\t * Parameters:\n\t * \n\t * urls - Array of URLs to be loaded.\n\t * onload - Callback with array of <mxXmlRequests>.\n\t * onerror - Optional function to execute on error.\n\t */\n\tgetAll: function(urls, onload, onerror)\n\t{\n\t\tvar remain = urls.length;\n\t\tvar result = [];\n\t\tvar errors = 0;\n\t\tvar err = function()\n\t\t{\n\t\t\tif (errors == 0 && onerror != null)\n\t\t\t{\n\t\t\t\tonerror();\n\t\t\t}\n\n\t\t\terrors++;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < urls.length; i++)\n\t\t{\n\t\t\t(function(url, index)\n\t\t\t{\n\t\t\t\tmxUtils.get(url, function(req)\n\t\t\t\t{\n\t\t\t\t\tvar status = req.getStatus();\n\t\t\t\t\t\n\t\t\t\t\tif (status < 200 || status > 299)\n\t\t\t\t\t{\n\t\t\t\t\t\terr();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult[index] = req;\n\t\t\t\t\t\tremain--;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (remain == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonload(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, err);\n\t\t\t})(urls[i], i);\n\t\t}\n\t\t\n\t\tif (remain == 0)\n\t\t{\n\t\t\tonload(result);\t\t\t\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: post\n\t * \n\t * Posts the specified params to the given URL *asynchronously* and invokes\n\t * the given functions depending on the request status. Returns the\n\t * <mxXmlRequest> in use. Both functions take the <mxXmlRequest> as the\n\t * only parameter. Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.post(url, 'key=value', function(req)\n\t * {\n\t * \tmxUtils.alert('Ready: '+req.isReady()+' Status: '+req.getStatus());\n\t *  // Process req.getDocumentElement() using DOM API if OK...\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the post request.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t */\n\tpost: function(url, params, onload, onerror)\n\t{\n\t\treturn new mxXmlRequest(url, params).send(onload, onerror);\n\t},\n\t\n\t/**\n\t * Function: submit\n\t * \n\t * Submits the given parameters to the specified URL using\n\t * <mxXmlRequest.simulate> and returns the <mxXmlRequest>.\n\t * Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the form.\n\t * doc - Document to create the form in.\n\t * target - Target to send the form result to.\n\t */\n\tsubmit: function(url, params, doc, target)\n\t{\n\t\treturn new mxXmlRequest(url, params).simulate(doc, target);\n\t},\n\t\n\t/**\n\t * Function: loadInto\n\t * \n\t * Loads the specified URL *asynchronously* into the specified document,\n\t * invoking onload after the document has been loaded. This implementation\n\t * does not use <mxXmlRequest>, but the document.load method.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * doc - The document to load the URL into.\n\t * onload - Function to execute when the URL has been loaded.\n\t */\n\tloadInto: function(url, doc, onload)\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tdoc.onreadystatechange = function ()\n\t\t\t{\n\t\t\t\tif (doc.readyState == 4)\n\t\t\t\t{\n\t\t\t\t\tonload();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.addEventListener('load', onload, false);\n\t\t}\n\t\t\n\t\tdoc.load(url);\n\t},\n\t\n\t/**\n\t * Function: getValue\n\t * \n\t * Returns the value for the given key in the given associative array or\n\t * the given default value if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null.\n\t */\n\tgetValue: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\t\t\t\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: getNumber\n\t * \n\t * Returns the numeric value for the given key in the given associative\n\t * array or the given default value (or 0) if the value is null. The value\n\t * is converted to a numeric value using the Number function.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is 0.\n\t */\n\tgetNumber: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue || 0;\t\t\t\n\t\t}\n\t\t\n\t\treturn Number(value);\n\t},\n\t\n\t/**\n\t * Function: getColor\n\t * \n\t * Returns the color value for the given key in the given associative\n\t * array or the given default value if the value is null. If the value\n\t * is <mxConstants.NONE> then null is returned.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is null.\n\t */\n\tgetColor: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\telse if (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: clone\n\t * \n\t * Recursively clones the specified object ignoring all fieldnames in the\n\t * given array of transient fields. <mxObjectIdentity.FIELD_NAME> is always\n\t * ignored by this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to be cloned.\n\t * transients - Optional array of strings representing the fieldname to be\n\t * ignored.\n\t * shallow - Optional boolean argument to specify if a shallow clone should\n\t * be created, that is, one where all object references are not cloned or,\n\t * in other words, one where only atomic (strings, numbers) values are\n\t * cloned. Default is false.\n\t */\n\tclone: function(obj, transients, shallow)\n\t{\n\t\tshallow = (shallow != null) ? shallow : false;\n\t\tvar clone = null;\n\t\t\n\t\tif (obj != null && typeof(obj.constructor) == 'function')\n\t\t{\n\t\t\tclone = new obj.constructor();\n\t\t\t\n\t\t    for (var i in obj)\n\t\t    {\n\t\t    \tif (i != mxObjectIdentity.FIELD_NAME && (transients == null ||\n\t\t    \t\tmxUtils.indexOf(transients, i) < 0))\n\t\t    \t{\n\t\t\t    \tif (!shallow && typeof(obj[i]) == 'object')\n\t\t\t    \t{\n\t\t\t            clone[i] = mxUtils.clone(obj[i]);\n\t\t\t        }\n\t\t\t        else\n\t\t\t        {\n\t\t\t            clone[i] = obj[i];\n\t\t\t        }\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t    return clone;\n\t},\n\n\t/**\n\t * Function: equalPoints\n\t * \n\t * Compares all mxPoints in the given lists.\n\t * \n\t * Parameters:\n\t * \n\t * a - Array of <mxPoints> to be compared.\n\t * b - Array of <mxPoints> to be compared.\n\t */\n\tequalPoints: function(a, b)\n\t{\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var i = 0; i < a.length; i++)\n\t\t\t{\n\t\t\t\tif ((a[i] != null && b[i] == null) ||\n\t\t\t\t\t(a[i] == null && b[i] != null) ||\n\t\t\t\t\t(a[i] != null && b[i] != null &&\n\t\t\t\t\t(a[i].x != b[i].x || a[i].y != b[i].y)))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: equalEntries\n\t * \n\t * Returns true if all properties of the given objects are equal. Values\n\t * with NaN are equal to NaN and unequal to any other value.\n\t * \n\t * Parameters:\n\t * \n\t * a - First object to be compared.\n\t * b - Second object to be compared.\n\t */\n\tequalEntries: function(a, b)\n\t{\n\t\t// Counts keys in b to check if all values have been compared\n\t\tvar count = 0;\n\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var key in b)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tfor (var key in a)\n\t\t\t{\n\t\t\t\tcount--\n\t\t\t\t\n\t\t\t\tif ((!mxUtils.isNaN(a[key]) || !mxUtils.isNaN(b[key])) && a[key] != b[key])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn count == 0;\n\t},\n\t\n\t/**\n\t * Function: removeDuplicates\n\t * \n\t * Removes all duplicates from the given array.\n\t */\n\tremoveDuplicates: function(arr)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tif (!dict.get(arr[i]))\n\t\t\t{\n\t\t\t\tresult.push(arr[i]);\n\t\t\t\tdict.put(arr[i], true);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNaN\n\t *\n\t * Returns true if the given value is of type number and isNaN returns true.\n\t */\n\tisNaN: function(value)\n\t{\n\t\treturn typeof(value) == 'number' && isNaN(value);\n\t},\n\t\n\t/**\n\t * Function: extend\n\t *\n\t * Assigns a copy of the superclass prototype to the subclass prototype.\n\t * Note that this does not call the constructor of the superclass at this\n\t * point, the superclass constructor should be called explicitely in the\n\t * subclass constructor. Below is an example.\n\t * \n\t * (code)\n\t * MyGraph = function(container, model, renderHint, stylesheet)\n\t * {\n\t *   mxGraph.call(this, container, model, renderHint, stylesheet);\n\t * }\n\t * \n\t * mxUtils.extend(MyGraph, mxGraph);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * ctor - Constructor of the subclass.\n\t * superCtor - Constructor of the superclass.\n\t */\n\textend: function(ctor, superCtor)\n\t{\n\t\tvar f = function() {};\n\t\tf.prototype = superCtor.prototype;\n\t\t\n\t\tctor.prototype = new f();\n\t\tctor.prototype.constructor = ctor;\n\t},\n\n\t/**\n\t * Function: toString\n\t * \n\t * Returns a textual representation of the specified object.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to return the string representation for.\n\t */\n\ttoString: function(obj)\n\t{\n\t    var output = '';\n\t    \n\t    for (var i in obj)\n\t    {\n\t    \ttry\n\t    \t{\n\t\t\t    if (obj[i] == null)\n\t\t\t    {\n\t\t            output += i + ' = [null]\\n';\n\t\t\t    }\n\t\t\t    else if (typeof(obj[i]) == 'function')\n\t\t\t    {\n\t\t            output += i + ' => [Function]\\n';\n\t\t        }\n\t\t        else if (typeof(obj[i]) == 'object')\n\t\t        {\n\t\t        \tvar ctor = mxUtils.getFunctionName(obj[i].constructor); \n\t\t            output += i + ' => [' + ctor + ']\\n';\n\t\t        }\n\t\t        else\n\t\t        {\n\t\t            output += i + ' = ' + obj[i] + '\\n';\n\t\t        }\n\t    \t}\n\t    \tcatch (e)\n\t    \t{\n\t    \t\toutput += i + '=' + e.message;\n\t    \t}\n\t    }\n\t    \n\t    return output;\n\t},\n\n\t/**\n\t * Function: toRadians\n\t * \n\t * Converts the given degree to radians.\n\t */\n\ttoRadians: function(deg)\n\t{\n\t\treturn Math.PI * deg / 180;\n\t},\n\n\t/**\n\t * Function: toDegree\n\t * \n\t * Converts the given radians to degree.\n\t */\n\ttoDegree: function(rad)\n\t{\n\t\treturn rad * 180 / Math.PI;\n\t},\n\t\n\t/**\n\t * Function: arcToCurves\n\t * \n\t * Converts the given arc to a series of curves.\n\t */\n\tarcToCurves: function(x0, y0, r1, r2, angle, largeArcFlag, sweepFlag, x, y)\n\t{\n\t\tx -= x0;\n\t\ty -= y0;\n\t\t\n        if (r1 === 0 || r2 === 0) \n        {\n        \treturn result;\n        }\n        \n        var fS = sweepFlag;\n        var psai = angle;\n        r1 = Math.abs(r1);\n        r2 = Math.abs(r2);\n        var ctx = -x / 2;\n        var cty = -y / 2;\n        var cpsi = Math.cos(psai * Math.PI / 180);\n        var spsi = Math.sin(psai * Math.PI / 180);\n        var rxd = cpsi * ctx + spsi * cty;\n        var ryd = -1 * spsi * ctx + cpsi * cty;\n        var rxdd = rxd * rxd;\n        var rydd = ryd * ryd;\n        var r1x = r1 * r1;\n        var r2y = r2 * r2;\n        var lamda = rxdd / r1x + rydd / r2y;\n        var sds;\n        \n        if (lamda > 1) \n        {\n        \tr1 = Math.sqrt(lamda) * r1;\n        \tr2 = Math.sqrt(lamda) * r2;\n        \tsds = 0;\n        }  \n        else\n        {\n        \tvar seif = 1;\n            \n        \tif (largeArcFlag === fS) \n        \t{\n        \t\tseif = -1;\n        \t}\n            \n        \tsds = seif * Math.sqrt((r1x * r2y - r1x * rydd - r2y * rxdd) / (r1x * rydd + r2y * rxdd));\n        }\n        \n        var txd = sds * r1 * ryd / r2;\n        var tyd = -1 * sds * r2 * rxd / r1;\n        var tx = cpsi * txd - spsi * tyd + x / 2;\n        var ty = spsi * txd + cpsi * tyd + y / 2;\n        var rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1);\n        var s1 = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        rad = Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) - Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1);\n        var dr = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        \n        if (fS == 0 && dr > 0) \n        {\n        \tdr -= 2 * Math.PI;\n        }\n        else if (fS != 0 && dr < 0) \n        {\n        \tdr += 2 * Math.PI;\n        }\n        \n        var sse = dr * 2 / Math.PI;\n        var seg = Math.ceil(sse < 0 ? -1 * sse : sse);\n        var segr = dr / seg;\n        var t = 8/3 * Math.sin(segr / 4) * Math.sin(segr / 4) / Math.sin(segr / 2);\n        var cpsir1 = cpsi * r1;\n        var cpsir2 = cpsi * r2;\n        var spsir1 = spsi * r1;\n        var spsir2 = spsi * r2;\n        var mc = Math.cos(s1);\n        var ms = Math.sin(s1);\n        var x2 = -t * (cpsir1 * ms + spsir2 * mc);\n        var y2 = -t * (spsir1 * ms - cpsir2 * mc);\n        var x3 = 0;\n        var y3 = 0;\n\n\t\tvar result = [];\n        \n        for (var n = 0; n < seg; ++n) \n        {\n            s1 += segr;\n            mc = Math.cos(s1);\n            ms = Math.sin(s1);\n            \n            x3 = cpsir1 * mc - spsir2 * ms + tx;\n            y3 = spsir1 * mc + cpsir2 * ms + ty;\n            var dx = -t * (cpsir1 * ms + spsir2 * mc);\n            var dy = -t * (spsir1 * ms - cpsir2 * mc);\n            \n            // CurveTo updates x0, y0 so need to restore it\n            var index = n * 6;\n            result[index] = Number(x2 + x0);\n            result[index + 1] = Number(y2 + y0);\n            result[index + 2] = Number(x3 - dx + x0);\n            result[index + 3] = Number(y3 - dy + y0);\n            result[index + 4] = Number(x3 + x0);\n            result[index + 5] = Number(y3 + y0);\n            \n\t\t\tx2 = x3 + dx;\n            y2 = y3 + dy;\n        }\n        \n        return result;\n\t},\n\n\t/**\n\t * Function: getBoundingBox\n\t * \n\t * Returns the bounding box for the rotated rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * rect - <mxRectangle> to be rotated.\n\t * angle - Number that represents the angle (in degrees).\n\t * cx - Optional <mxPoint> that represents the rotation center. If no\n\t * rotation center is given then the center of rect is used.\n\t */\n\tgetBoundingBox: function(rect, rotation, cx)\n\t{\n        var result = null;\n\n        if (rect != null && rotation != null && rotation != 0)\n        {\n            var rad = mxUtils.toRadians(rotation);\n            var cos = Math.cos(rad);\n            var sin = Math.sin(rad);\n\n            cx = (cx != null) ? cx : new mxPoint(rect.x + rect.width / 2, rect.y + rect.height / 2);\n\n            var p1 = new mxPoint(rect.x, rect.y);\n            var p2 = new mxPoint(rect.x + rect.width, rect.y);\n            var p3 = new mxPoint(p2.x, rect.y + rect.height);\n            var p4 = new mxPoint(rect.x, p3.y);\n\n            p1 = mxUtils.getRotatedPoint(p1, cos, sin, cx);\n            p2 = mxUtils.getRotatedPoint(p2, cos, sin, cx);\n            p3 = mxUtils.getRotatedPoint(p3, cos, sin, cx);\n            p4 = mxUtils.getRotatedPoint(p4, cos, sin, cx);\n\n            result = new mxRectangle(p1.x, p1.y, 0, 0);\n            result.add(new mxRectangle(p2.x, p2.y, 0, 0));\n            result.add(new mxRectangle(p3.x, p3.y, 0, 0));\n            result.add(new mxRectangle(p4.x, p4.y, 0, 0));\n        }\n\n        return result;\n\t},\n\n\t/**\n\t * Function: getRotatedPoint\n\t * \n\t * Rotates the given point by the given cos and sin.\n\t */\n\tgetRotatedPoint: function(pt, cos, sin, c)\n\t{\n\t\tc = (c != null) ? c : new mxPoint();\n\t\tvar x = pt.x - c.x;\n\t\tvar y = pt.y - c.y;\n\n\t\tvar x1 = x * cos - y * sin;\n\t\tvar y1 = y * cos + x * sin;\n\n\t\treturn new mxPoint(x1 + c.x, y1 + c.y);\n\t},\n\t\n\t/**\n\t * Returns an integer mask of the port constraints of the given map\n\t * @param dict the style map to determine the port constraints for\n\t * @param defaultValue Default value to return if the key is undefined.\n\t * @return the mask of port constraint directions\n\t * \n\t * Parameters:\n\t * \n\t * terminal - <mxCelState> that represents the terminal.\n\t * edge - <mxCellState> that represents the edge.\n\t * source - Boolean that specifies if the terminal is the source terminal.\n\t * defaultValue - Default value to be returned.\n\t */\n\tgetPortConstraints: function(terminal, edge, source, defaultValue)\n\t{\n\t\tvar value = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT,\n\t\t\tmxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_SOURCE_PORT_CONSTRAINT :\n\t\t\t\tmxConstants.STYLE_TARGET_PORT_CONSTRAINT, null));\n\t\t\n\t\tif (value == null)\n\t\t{\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar directions = value.toString();\n\t\t\tvar returnValue = mxConstants.DIRECTION_MASK_NONE;\n\t\t\tvar constraintRotationEnabled = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT_ROTATION, 0);\n\t\t\tvar rotation = 0;\n\t\t\t\n\t\t\tif (constraintRotationEnabled == 1)\n\t\t\t{\n\t\t\t\trotation = mxUtils.getValue(terminal.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tvar quad = 0;\n\n\t\t\tif (rotation > 45)\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t\t\n\t\t\t\tif (rotation >= 135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (rotation < -45)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\tif (rotation <= -135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_NORTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_WEST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_SOUTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_EAST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: reversePortConstraints\n\t * \n\t * Reverse the port constraint bitmask. For example, north | east\n\t * becomes south | west\n\t */\n\treversePortConstraints: function(constraint)\n\t{\n\t\tvar result = 0;\n\t\t\n\t\tresult = (constraint & mxConstants.DIRECTION_MASK_WEST) << 3;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_NORTH) << 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_SOUTH) >> 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_EAST) >> 3;\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNearestSegment\n\t * \n\t * Finds the index of the nearest segment on the given cell state for\n\t * the specified coordinate pair.\n\t */\n\tfindNearestSegment: function(state, x, y)\n\t{\n\t\tvar index = -1;\n\t\t\n\t\tif (state.absolutePoints.length > 0)\n\t\t{\n\t\t\tvar last = state.absolutePoints[0];\n\t\t\tvar min = null;\n\t\t\t\n\t\t\tfor (var i = 1; i < state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tvar current = state.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(last.x, last.y,\n\t\t\t\t\tcurrent.x, current.y, x, y);\n\t\t\t\t\n\t\t\t\tif (min == null || dist < min)\n\t\t\t\t{\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t}\n\n\t\t\t\tlast = current;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn index;\n\t},\n\n\t/**\n\t * Function: getDirectedBounds\n\t * \n\t * Adds the given margins to the given rectangle and rotates and flips the\n\t * rectangle according to the respective styles in style.\n\t */\n\tgetDirectedBounds: function (rect, m, style, flipH, flipV)\n\t{\n\t\tvar d = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\tflipH = (flipH != null) ? flipH : mxUtils.getValue(style, mxConstants.STYLE_FLIPH, false);\n\t\tflipV = (flipV != null) ? flipV : mxUtils.getValue(style, mxConstants.STYLE_FLIPV, false);\n\n\t\tm.x = Math.round(Math.max(0, Math.min(rect.width, m.x)));\n\t\tm.y = Math.round(Math.max(0, Math.min(rect.height, m.y)));\n\t\tm.width = Math.round(Math.max(0, Math.min(rect.width, m.width)));\n\t\tm.height = Math.round(Math.max(0, Math.min(rect.height, m.height)));\n\t\t\n\t\tif ((flipV && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipH && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.width;\n\t\t\tm.width = tmp;\n\t\t}\n\t\t\t\n\t\tif ((flipH && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipV && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.y;\n\t\t\tm.y = m.height;\n\t\t\tm.height = tmp;\n\t\t}\n\t\t\n\t\tvar m2 = mxRectangle.fromRectangle(m);\n\t\t\n\t\tif (d == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tm2.y = m.x;\n\t\t\tm2.x = m.height;\n\t\t\tm2.width = m.y;\n\t\t\tm2.height = m.width;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tm2.y = m.height;\n\t\t\tm2.x = m.width;\n\t\t\tm2.width = m.x;\n\t\t\tm2.height = m.y;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tm2.y = m.width;\n\t\t\tm2.x = m.y;\n\t\t\tm2.width = m.height;\n\t\t\tm2.height = m.x;\n\t\t}\n\t\t\n\t\treturn new mxRectangle(rect.x + m2.x, rect.y + m2.y, rect.width - m2.width - m2.x, rect.height - m2.height - m2.y);\n\t},\n\n\t/**\n\t * Function: getPerimeterPoint\n\t * \n\t * Returns the intersection between the polygon defined by the array of\n\t * points and the line between center and point.\n\t */\n\tgetPerimeterPoint: function (pts, center, point)\n\t{\n\t\tvar min = null;\n\t\t\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tvar pt = mxUtils.intersection(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y,\n\t\t\t\tcenter.x, center.y, point.x, point.y);\n\t\t\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar dx = point.x - pt.x;\n\t\t\t\tvar dy = point.y - pt.y;\n\t\t\t\tvar ip = {p: pt, distSq: dy * dy + dx * dx};\n\t\t\t\t\n\t\t\t\tif (ip != null && (min == null || min.distSq > ip.distSq))\n\t\t\t\t{\n\t\t\t\t\tmin = ip;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (min != null) ? min.p : null;\n\t},\n\n\t/**\n\t * Function: rectangleIntersectsSegment\n\t * \n\t * Returns true if the given rectangle intersects the given segment.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the rectangle.\n\t * p1 - <mxPoint> that represents the first point of the segment.\n\t * p2 - <mxPoint> that represents the second point of the segment.\n\t */\n\trectangleIntersectsSegment: function(bounds, p1, p2)\n\t{\n\t\tvar top = bounds.y;\n\t\tvar left = bounds.x;\n\t\tvar bottom = top + bounds.height;\n\t\tvar right = left + bounds.width;\n\t\t\t\n\t\t// Find min and max X for the segment\n\t\tvar minX = p1.x;\n\t\tvar maxX = p2.x;\n\t\t\n\t\tif (p1.x > p2.x)\n\t\t{\n\t\t  minX = p2.x;\n\t\t  maxX = p1.x;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's x-projections\n\t\tif (maxX > right)\n\t\t{\n\t\t  maxX = right;\n\t\t}\n\t\t\n\t\tif (minX < left)\n\t\t{\n\t\t  minX = left;\n\t\t}\n\t\t\n\t\tif (minX > maxX) // If their projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\t// Find corresponding min and max Y for min and max X we found before\n\t\tvar minY = p1.y;\n\t\tvar maxY = p2.y;\n\t\tvar dx = p2.x - p1.x;\n\t\t\n\t\tif (Math.abs(dx) > 0.0000001)\n\t\t{\n\t\t  var a = (p2.y - p1.y) / dx;\n\t\t  var b = p1.y - a * p1.x;\n\t\t  minY = a * minX + b;\n\t\t  maxY = a * maxX + b;\n\t\t}\n\t\t\n\t\tif (minY > maxY)\n\t\t{\n\t\t  var tmp = maxY;\n\t\t  maxY = minY;\n\t\t  minY = tmp;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's y-projections\n\t\tif (maxY > bottom)\n\t\t{\n\t\t  maxY = bottom;\n\t\t}\n\t\t\n\t\tif (minY < top)\n\t\t{\n\t\t  minY = top;\n\t\t}\n\t\t\n\t\tif (minY > maxY) // If Y-projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\t\n\t/**\n\t * Function: contains\n\t * \n\t * Returns true if the specified point (x, y) is contained in the given rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the area.\n\t * x - X-coordinate of the point.\n\t * y - Y-coordinate of the point.\n\t */\n\tcontains: function(bounds, x, y)\n\t{\n\t\treturn (bounds.x <= x && bounds.x + bounds.width >= x &&\n\t\t\t\tbounds.y <= y && bounds.y + bounds.height >= y);\n\t},\n\n\t/**\n\t * Function: intersects\n\t * \n\t * Returns true if the two rectangles intersect.\n\t * \n\t * Parameters:\n\t * \n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersects: function(a, b)\n\t{\n\t\tvar tw = a.width;\n\t\tvar th = a.height;\n\t\tvar rw = b.width;\n\t\tvar rh = b.height;\n\t\t\n\t\tif (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0)\n\t\t{\n\t\t    return false;\n\t\t}\n\t\t\n\t\tvar tx = a.x;\n\t\tvar ty = a.y;\n\t\tvar rx = b.x;\n\t\tvar ry = b.y;\n\t\t\n\t\trw += rx;\n\t\trh += ry;\n\t\ttw += tx;\n\t\tth += ty;\n\n\t\treturn ((rw < rx || rw > tx) &&\n\t\t\t(rh < ry || rh > ty) &&\n\t\t\t(tw < tx || tw > rx) &&\n\t\t\t(th < ty || th > ry));\n\t},\n\n\t/**\n\t * Function: intersects\n\t * \n\t * Returns true if the two rectangles intersect.\n\t * \n\t * Parameters:\n\t * \n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersectsHotspot: function(state, x, y, hotspot, min, max)\n\t{\n\t\thotspot = (hotspot != null) ? hotspot : 1;\n\t\tmin = (min != null) ? min : 0;\n\t\tmax = (max != null) ? max : 0;\n\t\t\n\t\tif (hotspot > 0)\n\t\t{\n\t\t\tvar cx = state.getCenterX();\n\t\t\tvar cy = state.getCenterY();\n\t\t\tvar w = state.width;\n\t\t\tvar h = state.height;\n\t\t\t\n\t\t\tvar start = mxUtils.getValue(state.style, mxConstants.STYLE_STARTSIZE) * state.view.scale;\n\n\t\t\tif (start > 0)\n\t\t\t{\n\t\t\t\tif (mxUtils.getValue(state.style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tcy = state.y + start / 2;\n\t\t\t\t\th = start;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcx = state.x + start / 2;\n\t\t\t\t\tw = start;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw = Math.max(min, w * hotspot);\n\t\t\th = Math.max(min, h * hotspot);\n\t\t\t\n\t\t\tif (max > 0)\n\t\t\t{\n\t\t\t\tw = Math.min(w, max);\n\t\t\t\th = Math.min(h, max);\n\t\t\t}\n\t\t\t\n\t\t\tvar rect = new mxRectangle(cx - w / 2, cy - h / 2, w, h);\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\treturn mxUtils.contains(rect, x, y);\t\t\t\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getOffset\n\t * \n\t * Returns the offset for the specified container as an <mxPoint>. The\n\t * offset is the distance from the top left corner of the container to the\n\t * top left corner of the document.\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to return the offset for.\n\t * scollOffset - Optional boolean to add the scroll offset of the document.\n\t * Default is false.\n\t */\n\tgetOffset: function(container, scrollOffset)\n\t{\n\t\tvar offsetLeft = 0;\n\t\tvar offsetTop = 0;\n\t\t\n\t\t// Ignores document scroll origin for fixed elements\n\t\tvar fixed = false;\n\t\tvar node = container;\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\n\t\twhile (node != null && node != b && node != d && !fixed)\n\t\t{\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tif (!scrollOffset && !fixed)\n\t\t{\n\t\t\tvar offset = mxUtils.getDocumentScrollOrigin(container.ownerDocument);\n\t\t\toffsetLeft += offset.x;\n\t\t\toffsetTop += offset.y;\n\t\t}\n\t\t\n\t\tvar r = container.getBoundingClientRect();\n\t\t\n\t\tif (r != null)\n\t\t{\n\t\t\toffsetLeft += r.left;\n\t\t\toffsetTop += r.top;\n\t\t}\n\t\t\n\t\treturn new mxPoint(offsetLeft, offsetTop);\n\t},\n\n\t/**\n\t * Function: getDocumentScrollOrigin\n\t * \n\t * Returns the scroll origin of the given document or the current document\n\t * if no document is given.\n\t */\n\tgetDocumentScrollOrigin: function(doc)\n\t{\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\treturn new mxPoint(doc.body.scrollLeft, doc.body.scrollTop);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar wnd = doc.defaultView || doc.parentWindow;\n\t\t\t\n\t\t\tvar x = (wnd != null && window.pageXOffset !== undefined) ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;\n\t\t\tvar y = (wnd != null && window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getScrollOrigin\n\t * \n\t * Returns the top, left corner of the viewrect as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose scroll origin should be returned.\n\t * includeAncestors - Whether the scroll origin of the ancestors should be\n\t * included. Default is false.\n\t * includeDocument - Whether the scroll origin of the document should be\n\t * included. Default is true.\n\t */\n\tgetScrollOrigin: function(node, includeAncestors, includeDocument)\n\t{\n\t\tincludeAncestors = (includeAncestors != null) ? includeAncestors : false;\n\t\tincludeDocument = (includeDocument != null) ? includeDocument : true;\n\t\t\n\t\tvar doc = (node != null) ? node.ownerDocument : document;\n\t\tvar b = doc.body;\n\t\tvar d = doc.documentElement;\n\t\tvar result = new mxPoint();\n\t\tvar fixed = false;\n\n\t\twhile (node != null && node != b && node != d)\n\t\t{\n\t\t\tif (!isNaN(node.scrollLeft) && !isNaN(node.scrollTop))\n\t\t\t{\n\t\t\t\tresult.x += node.scrollLeft;\n\t\t\t\tresult.y += node.scrollTop;\n\t\t\t}\n\t\t\t\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\n\t\t\tnode = (includeAncestors) ? node.parentNode : null;\n\t\t}\n\n\t\tif (!fixed && includeDocument)\n\t\t{\n\t\t\tvar origin = mxUtils.getDocumentScrollOrigin(doc);\n\n\t\t\tresult.x += origin.x;\n\t\t\tresult.y += origin.y;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: convertPoint\n\t * \n\t * Converts the specified point (x, y) using the offset of the specified\n\t * container and returns a new <mxPoint> with the result.\n\t * \n\t * (code)\n\t * var pt = mxUtils.convertPoint(graph.container,\n\t *   mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to use for the offset.\n\t * x - X-coordinate of the point to be converted.\n\t * y - Y-coordinate of the point to be converted.\n\t */\n\tconvertPoint: function(container, x, y)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(container, false);\n\t\tvar offset = mxUtils.getOffset(container);\n\n\t\toffset.x -= origin.x;\n\t\toffset.y -= origin.y;\n\t\t\n\t\treturn new mxPoint(x - offset.x, y - offset.y);\n\t},\n\t\n\t/**\n\t * Function: ltrim\n\t * \n\t * Strips all whitespaces from the beginning of the string. Without the\n\t * second parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\tltrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"^[\" + chars + \"]+\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: rtrim\n\t * \n\t * Strips all whitespaces from the end of the string. Without the second\n\t * parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\trtrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"[\" + chars + \"]+$\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: trim\n\t * \n\t * Strips all whitespaces from both end of the string.\n\t * Without the second parameter, Javascript function will trim these\n\t * characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\ttrim: function(str, chars)\n\t{\n\t\treturn mxUtils.ltrim(mxUtils.rtrim(str, chars), chars);\n\t},\n\t\n\t/**\n\t * Function: isNumeric\n\t * \n\t * Returns true if the specified value is numeric, that is, if it is not\n\t * null, not an empty string, not a HEX number and isNaN returns false.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisNumeric: function(n)\n\t{\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n) && (typeof(n) != 'string' || n.toLowerCase().indexOf('0x') < 0);\n\t},\n\n\t/**\n\t * Function: isInteger\n\t * \n\t * Returns true if the given value is an valid integer number.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisInteger: function(n)\n\t{\n\t\treturn String(parseInt(n)) === String(n);\n\t},\n\n\t/**\n\t * Function: mod\n\t * \n\t * Returns the remainder of division of n by m. You should use this instead\n\t * of the built-in operation as the built-in operation does not properly\n\t * handle negative numbers.\n\t */\n\tmod: function(n, m)\n\t{\n\t\treturn ((n % m) + m) % m;\n\t},\n\n\t/**\n\t * Function: intersection\n\t * \n\t * Returns the intersection of two lines as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * x0 - X-coordinate of the first line's startpoint.\n\t * y0 - X-coordinate of the first line's startpoint.\n\t * x1 - X-coordinate of the first line's endpoint.\n\t * y1 - Y-coordinate of the first line's endpoint.\n\t * x2 - X-coordinate of the second line's startpoint.\n\t * y2 - Y-coordinate of the second line's startpoint.\n\t * x3 - X-coordinate of the second line's endpoint.\n\t * y3 - Y-coordinate of the second line's endpoint.\n\t */\n\tintersection: function (x0, y0, x1, y1, x2, y2, x3, y3)\n\t{\n\t\tvar denom = ((y3 - y2) * (x1 - x0)) - ((x3 - x2) * (y1 - y0));\n\t\tvar nume_a = ((x3 - x2) * (y0 - y2)) - ((y3 - y2) * (x0 - x2));\n\t\tvar nume_b = ((x1 - x0) * (y0 - y2)) - ((y1 - y0) * (x0 - x2));\n\n\t\tvar ua = nume_a / denom;\n\t\tvar ub = nume_b / denom;\n\t\t\n\t\tif(ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0)\n\t\t{\n\t\t\t// Get the intersection point\n\t\t\tvar x = x0 + ua * (x1 - x0);\n\t\t\tvar y = y0 + ua * (y1 - y0);\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t\t\n\t\t// No intersection\n\t\treturn null;\n\t},\n\t\n\t/**\n\t * Function: ptSegDistSq\n\t * \n\t * Returns the square distance between a segment and a point. To get the\n\t * distance between a point and a line (with infinite length) use\n\t * <mxUtils.ptLineDist>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\tptSegDistSq: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\n\t\tpx -= x1;\n\t\tpy -= y1;\n\n\t\tvar dotprod = px * x2 + py * y2;\n\t\tvar projlenSq;\n\n\t\tif (dotprod <= 0.0)\n\t\t{\n\t\t    projlenSq = 0.0;\n\t\t}\n\t\telse\n\t\t{\n\t\t    px = x2 - px;\n\t\t    py = y2 - py;\n\t\t    dotprod = px * x2 + py * y2;\n\n\t\t    if (dotprod <= 0.0)\n\t\t    {\n\t\t\t\tprojlenSq = 0.0;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\t\tprojlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);\n\t\t    }\n\t\t}\n\n\t\tvar lenSq = px * px + py * py - projlenSq;\n\t\t\n\t\tif (lenSq < 0)\n\t\t{\n\t\t    lenSq = 0;\n\t\t}\n\t\t\n\t\treturn lenSq;\n    },\n\t\n\t/**\n\t * Function: ptLineDist\n\t * \n\t * Returns the distance between a line defined by two points and a point.\n\t * To get the distance between a point and a segment (with a specific\n\t * length) use <mxUtils.ptSeqDistSq>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of point 1 of the line.\n\t * y1 - Y-coordinate of point 1 of the line.\n\t * x2 - X-coordinate of point 1 of the line.\n\t * y2 - Y-coordinate of point 1 of the line.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n    ptLineDist: function(x1, y1, x2, y2, px, py)\n    {\n\t\treturn Math.abs((y2 - y1) * px - (x2 - x1) * py + x2 * y1 - y2 * x1) /\n\t\t\tMath.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n    },\n    \t\n\t/**\n\t * Function: relativeCcw\n\t * \n\t * Returns 1 if the given point on the right side of the segment, 0 if its\n\t * on the segment, and -1 if the point is on the left side of the segment.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\trelativeCcw: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\t\tpx -= x1;\n\t\tpy -= y1;\n\t\tvar ccw = px * y2 - py * x2;\n\t\t\n\t\tif (ccw == 0.0)\n\t\t{\n\t\t    ccw = px * x2 + py * y2;\n\t\t    \n\t\t    if (ccw > 0.0)\n\t\t    {\n\t\t\t\tpx -= x2;\n\t\t\t\tpy -= y2;\n\t\t\t\tccw = px * x2 + py * y2;\n\t\t\t\t\n\t\t\t\tif (ccw < 0.0)\n\t\t\t\t{\n\t\t\t\t    ccw = 0.0;\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t\treturn (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0);\n    },\n    \n\t/**\n\t * Function: animateChanges\n\t * \n\t * See <mxEffects.animateChanges>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tanimateChanges: function(graph, changes)\n\t{\n\t\t// LATER: Deprecated, remove this function\n    \tmxEffects.animateChanges.apply(this, arguments);\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * See <mxEffects.cascadeOpacity>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\tmxEffects.cascadeOpacity.apply(this, arguments);\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * See <mxEffects.fadeOut>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tmxEffects.fadeOut.apply(this, arguments);\n\t},\n\t\n\t/**\n\t * Function: setOpacity\n\t * \n\t * Sets the opacity of the specified DOM node to the given value in %.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the opacity for.\n\t * value - Opacity in %. Possible values are between 0 and 100.\n\t */\n\tsetOpacity: function(node, value)\n\t{\n\t\tif (mxUtils.isVml(node))\n\t\t{\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\t// TODO: Why is the division by 5 needed in VML?\n\t\t\t    node.style.filter = 'alpha(opacity=' + (value/5) + ')';\n\t    \t}\n\t\t}\n\t\telse if (mxClient.IS_IE && (typeof(document.documentMode) === 'undefined' || document.documentMode < 9))\n\t    {\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t\t\t    node.style.filter = 'alpha(opacity=' + value + ')';\n\t    \t}\n\t\t}\n\t\telse\n\t\t{\n\t\t    node.style.opacity = (value / 100);\n\t\t}\n\t},\n\n\t/**\n\t * Function: createImage\n\t * \n\t * Creates and returns an image (IMG node) or VML image (v:image) in IE6 in\n\t * quirks mode.\n\t * \n\t * Parameters:\n\t * \n\t * src - URL that points to the image to be displayed.\n\t */\n\tcreateImage: function(src)\n\t{\n        var imageNode = null;\n        \n\t\tif (mxClient.IS_IE6 && document.compatMode != 'CSS1Compat')\n\t\t{\n        \timageNode = document.createElement(mxClient.VML_PREFIX + ':image');\n        \timageNode.setAttribute('src', src);\n        \timageNode.style.borderStyle = 'none';\n        }\n\t\telse\n\t\t{\n\t\t\timageNode = document.createElement('img');\n\t\t\timageNode.setAttribute('src', src);\n\t\t\timageNode.setAttribute('border', '0');\n\t\t}\n\t\t\n\t\treturn imageNode;\n\t},\n\n\t/**\n\t * Function: sortCells\n\t * \n\t * Sorts the given cells according to the order in the cell hierarchy.\n\t * Ascending is optional and defaults to true.\n\t */\n\tsortCells: function(cells, ascending)\n\t{\n\t\tascending = (ascending != null) ? ascending : true;\n\t\tvar lookup = new mxDictionary();\n\t\tcells.sort(function(o1, o2)\n\t\t{\n\t\t\tvar p1 = lookup.get(o1);\n\t\t\t\n\t\t\tif (p1 == null)\n\t\t\t{\n\t\t\t\tp1 = mxCellPath.create(o1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o1, p1);\n\t\t\t}\n\t\t\t\n\t\t\tvar p2 = lookup.get(o2);\n\t\t\t\n\t\t\tif (p2 == null)\n\t\t\t{\n\t\t\t\tp2 = mxCellPath.create(o2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o2, p2);\n\t\t\t}\n\t\t\t\n\t\t\tvar comp = mxCellPath.compare(p1, p2);\n\t\t\t\n\t\t\treturn (comp == 0) ? 0 : (((comp > 0) == ascending) ? 1 : -1);\n\t\t});\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: getStylename\n\t * \n\t * Returns the stylename in a style of the form [(stylename|key=value);] or\n\t * an empty string if the given style does not contain a stylename.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylename: function(style)\n\t{\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\tvar stylename = pairs[0];\n\t\t\t\n\t\t\tif (stylename.indexOf('=') < 0)\n\t\t\t{\n\t\t\t\treturn stylename;\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn '';\n\t},\n\n\t/**\n\t * Function: getStylenames\n\t * \n\t * Returns the stylenames in a style of the form [(stylename|key=value);]\n\t * or an empty array if the given style does not contain any stylenames.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < pairs.length; i++)\n\t\t\t{\n\t\t\t\tif (pairs[i].indexOf('=') < 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(pairs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: indexOfStylename\n\t * \n\t * Returns the index of the given stylename in the given style. This\n\t * returns -1 if the given stylename does not occur (as a stylename) in the\n\t * given style, otherwise it returns the index of the first character.\n\t */\n\tindexOfStylename: function(style, stylename)\n\t{\n\t\tif (style != null && stylename != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\tvar pos = 0;\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] == stylename)\n\t\t\t\t{\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpos += tokens[i].length + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\t\n\t/**\n\t * Function: addStylename\n\t * \n\t * Adds the specified stylename to the given style if it does not already\n\t * contain the stylename.\n\t */\n\taddStylename: function(style, stylename)\n\t{\n\t\tif (mxUtils.indexOfStylename(style, stylename) < 0)\n\t\t{\n\t\t\tif (style == null)\n\t\t\t{\n\t\t\t\tstyle = '';\n\t\t\t}\n\t\t\telse if (style.length > 0 && style.charAt(style.length - 1) != ';')\n\t\t\t{\n\t\t\t\tstyle += ';';\n\t\t\t}\n\t\t\t\n\t\t\tstyle += stylename;\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: removeStylename\n\t * \n\t * Removes all occurrences of the specified stylename in the given style\n\t * and returns the updated style. Trailing semicolons are not preserved.\n\t */\n\tremoveStylename: function(style, stylename)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] != stylename)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\t\n\t/**\n\t * Function: removeAllStylenames\n\t * \n\t * Removes all stylenames from the given style and returns the updated\n\t * style.\n\t */\n\tremoveAllStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\t// Keeps the key, value assignments\n\t\t\t\tif (tokens[i].indexOf('=') >= 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\n\t/**\n\t * Function: setCellStyles\n\t * \n\t * Assigns the value for the given key in the styles of the given cells, or\n\t * removes the key from the styles if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> to execute the transaction in.\n\t * cells - Array of <mxCells> to be updated.\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetCellStyles: function(model, cells, key, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyle(model.getStyle(cells[i]), key, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyle\n\t * \n\t * Adds or removes the given key, value pair to the style and returns the\n\t * new style. If value is null or zero length then the key is removed from\n\t * the style. This is for cell styles, not for CSS styles.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetStyle: function(style, key, value)\n\t{\n\t\tvar isValue = value != null && (typeof(value.length) == 'undefined' || value.length > 0);\n\t\t\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (isValue)\n\t\t\t{\n\t\t\t\tstyle = key + '=' + value + ';';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (style.substring(0, key.length + 1) == key + '=')\n\t\t\t{\n\t\t\t\tvar next = style.indexOf(';');\n\t\t\t\t\n\t\t\t\tif (isValue)\n\t\t\t\t{\n\t\t\t\t\tstyle = key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = (next < 0 || next == style.length - 1) ? '' : style.substring(next + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar index = style.indexOf(';' + key + '=');\n\t\t\t\t\n\t\t\t\tif (index < 0)\n\t\t\t\t{\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sep = (style.charAt(style.length - 1) == ';') ? '' : ';';\n\t\t\t\t\t\tstyle = style + sep + key + '=' + value + ';';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar next = style.indexOf(';', index + 1);\n\t\t\t\t\t\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index + 1) + key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index) + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\n\t/**\n\t * Function: setCellStyleFlags\n\t * \n\t * Sets or toggles the flag bit for the given key in the cell's styles.\n\t * If value is null then the flag is toggled.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var cells = graph.getSelectionCells();\n\t * mxUtils.setCellStyleFlags(graph.model,\n\t * \t\t\tcells,\n\t * \t\t\tmxConstants.STYLE_FONTSTYLE,\n\t * \t\t\tmxConstants.FONT_BOLD);\n\t * (end)\n\t * \n\t * Toggles the bold font style.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> that contains the cells.\n\t * cells - Array of <mxCells> to change the style for.\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the flag.\n\t */\n\tsetCellStyleFlags: function(model, cells, key, flag, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyleFlag(\n\t\t\t\t\t\t\tmodel.getStyle(cells[i]),\n\t\t\t\t\t\t\tkey, flag, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyleFlag\n\t * \n\t * Sets or removes the given key from the specified style and returns the\n\t * new style. If value is null then the flag is toggled.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the given flag.\n\t */\n\tsetStyleFlag: function(style, key, flag, value)\n\t{\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (value || value == null)\n\t\t\t{\n\t\t\t\tstyle = key+'='+flag;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstyle = key+'=0';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar index = style.indexOf(key+'=');\n\t\t\t\n\t\t\tif (index < 0)\n\t\t\t{\n\t\t\t\tvar sep = (style.charAt(style.length-1) == ';') ? '' : ';';\n\n\t\t\t\tif (value || value == null)\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=' + flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=0';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar cont = style.indexOf(';', index);\n\t\t\t\tvar tmp = '';\n\t\t\t\t\n\t\t\t\tif (cont < 0)\n\t\t\t\t{\n\t\t\t\t\ttmp  = style.substring(index+key.length+1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = style.substring(index+key.length+1, cont);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value == null)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) ^ flag;\n\t\t\t\t}\n\t\t\t\telse if (value)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) | flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) & ~flag;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstyle = style.substring(0, index) + key + '=' + tmp +\n\t\t\t\t\t((cont >= 0) ? style.substring(cont) : '');\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: getAlignmentAsPoint\n\t * \n\t * Returns an <mxPoint> that represents the horizontal and vertical alignment\n\t * for numeric computations. X is -0.5 for center, -1 for right and 0 for\n\t * left alignment. Y is -0.5 for middle, -1 for bottom and 0 for top\n\t * alignment. Default values for missing arguments is top, left.\n\t */\n\tgetAlignmentAsPoint: function(align, valign)\n\t{\n\t\tvar dx = -0.5;\n\t\tvar dy = -0.5;\n\t\t\n\t\t// Horizontal alignment\n\t\tif (align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tdx = -1;\n\t\t}\n\n\t\t// Vertical alignment\n\t\tif (valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy = -1;\n\t\t}\n\t\t\n\t\treturn new mxPoint(dx, dy);\n\t},\n\t\n\t/**\n\t * Function: getSizeForString\n\t * \n\t * Returns an <mxRectangle> with the size (width and height in pixels) of\n\t * the given string. The string may contain HTML markup. Newlines should be\n\t * converted to <br> before calling this method. The caller is responsible\n\t * for sanitizing the HTML markup.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var label = graph.getLabel(cell).replace(/\\n/g, \"<br>\");\n\t * var size = graph.getSizeForString(label);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * text - String whose size should be returned.\n\t * fontSize - Integer that specifies the font size in pixels. Default is\n\t * <mxConstants.DEFAULT_FONTSIZE>.\n\t * fontFamily - String that specifies the name of the font family. Default\n\t * is <mxConstants.DEFAULT_FONTFAMILY>.\n\t * textWidth - Optional width for text wrapping.\n\t * fontStyle - Optional font style.\n\t */\n\tgetSizeForString: function(text, fontSize, fontFamily, textWidth, fontStyle)\n\t{\n\t\tfontSize = (fontSize != null) ? fontSize : mxConstants.DEFAULT_FONTSIZE;\n\t\tfontFamily = (fontFamily != null) ? fontFamily : mxConstants.DEFAULT_FONTFAMILY;\n\t\tvar div = document.createElement('div');\n\t\t\n\t\t// Sets the font size and family\n\t\tdiv.style.fontFamily = fontFamily;\n\t\tdiv.style.fontSize = Math.round(fontSize) + 'px';\n\t\tdiv.style.lineHeight = Math.round(fontSize * mxConstants.LINE_HEIGHT) + 'px';\n\t\t\n\t\t// Sets the font style\n\t\tif (fontStyle != null)\n\t\t{\n\t\t\tif ((fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tvar txtDecor = [];\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t\t{\n\t\t\t\ttxtDecor.push('underline');\n\t\t\t}\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t\t{\n\t\t\t\ttxtDecor.push('line-through');\n\t\t\t}\n\t\t\t\n\t\t\tif (txtDecor.length > 0)\n\t\t\t{\n\t\t\t\tdiv.style.textDecoration = txtDecor.join(' ');\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Disables block layout and outside wrapping and hides the div\n\t\tdiv.style.position = 'absolute';\n\t\tdiv.style.visibility = 'hidden';\n\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tdiv.style.zoom = '1';\n\t\t\n\t\tif (textWidth != null)\n\t\t{\n\t\t\tdiv.style.width = textWidth + 'px';\n\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\t// Adds the text and inserts into DOM for updating of size\n\t\tdiv.innerHTML = text;\n\t\tdocument.body.appendChild(div);\n\t\t\n\t\t// Gets the size and removes from DOM\n\t\tvar size = new mxRectangle(0, 0, div.offsetWidth, div.offsetHeight);\n\t\tdocument.body.removeChild(div);\n\t\t\n\t\treturn size;\n\t},\n\t\n\t/**\n\t * Function: getViewXml\n\t */\n\tgetViewXml: function(graph, scale, cells, x0, y0)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\tscale = (scale != null) ? scale : 1;\n\n\t\tif (cells == null)\n\t\t{\n\t\t\tvar model = graph.getModel();\n\t\t\tcells = [model.getRoot()];\n\t\t}\n\t\t\n\t\tvar view = graph.getView();\n\t\tvar result = null;\n\n\t\t// Disables events on the view\n\t\tvar eventsEnabled = view.isEventsEnabled();\n\t\tview.setEventsEnabled(false);\n\n\t\t// Workaround for label bounds not taken into account for image export.\n\t\t// Creates a temporary draw pane which is used for rendering the text.\n\t\t// Text rendering is required for finding the bounds of the labels.\n\t\tvar drawPane = view.drawPane;\n\t\tvar overlayPane = view.overlayPane;\n\n\t\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tview.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.drawPane);\n\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tview.drawPane = view.drawPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.drawPane);\n\t\t\t\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = view.overlayPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\n\t\t// Resets the translation\n\t\tvar translate = view.getTranslate();\n\t\tview.translate = new mxPoint(x0, y0);\n\n\t\t// Creates the temporary cell states in the view\n\t\tvar temp = new mxTemporaryCellStates(graph.getView(), scale, cells);\n\n\t\ttry\n\t\t{\n\t\t\tvar enc = new mxCodec();\n\t\t\tresult = enc.encode(graph.getView());\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttemp.destroy();\n\t\t\tview.translate = translate;\n\t\t\tview.canvas.removeChild(view.drawPane);\n\t\t\tview.canvas.removeChild(view.overlayPane);\n\t\t\tview.drawPane = drawPane;\n\t\t\tview.overlayPane = overlayPane;\n\t\t\tview.setEventsEnabled(eventsEnabled);\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getScaleForPageCount\n\t * \n\t * Returns the scale to be used for printing the graph with the given\n\t * bounds across the specifies number of pages with the given format. The\n\t * scale is always computed such that it given the given amount or fewer\n\t * pages in the print output. See <mxPrintPreview> for an example.\n\t * \n\t * Parameters:\n\t * \n\t * pageCount - Specifies the number of pages in the print output.\n\t * graph - <mxGraph> that should be printed.\n\t * pageFormat - Optional <mxRectangle> that specifies the page format.\n\t * Default is <mxConstants.PAGE_FORMAT_A4_PORTRAIT>.\n\t * border - The border along each side of every page.\n\t */\n\tgetScaleForPageCount: function(pageCount, graph, pageFormat, border)\n\t{\n\t\tif (pageCount < 1)\n\t\t{\n\t\t\t// We can't work with less than 1 page, return no scale\n\t\t\t// change\n\t\t\treturn 1;\n\t\t}\n\t\t\n\t\tpageFormat = (pageFormat != null) ? pageFormat : mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\t\tborder = (border != null) ? border : 0;\n\t\t\n\t\tvar availablePageWidth = pageFormat.width - (border * 2);\n\t\tvar availablePageHeight = pageFormat.height - (border * 2);\n\n\t\t// Work out the number of pages required if the\n\t\t// graph is not scaled.\n\t\tvar graphBounds = graph.getGraphBounds().clone();\n\t\tvar sc = graph.getView().getScale();\n\t\tgraphBounds.width /= sc;\n\t\tgraphBounds.height /= sc;\n\t\tvar graphWidth = graphBounds.width;\n\t\tvar graphHeight = graphBounds.height;\n\n\t\tvar scale = 1;\n\t\t\n\t\t// The ratio of the width/height for each printer page\n\t\tvar pageFormatAspectRatio = availablePageWidth / availablePageHeight;\n\t\t// The ratio of the width/height for the graph to be printer\n\t\tvar graphAspectRatio = graphWidth / graphHeight;\n\t\t\n\t\t// The ratio of horizontal pages / vertical pages for this \n\t\t// graph to maintain its aspect ratio on this page format\n\t\tvar pagesAspectRatio = graphAspectRatio / pageFormatAspectRatio;\n\t\t\n\t\t// Factor the square root of the page count up and down \n\t\t// by the pages aspect ratio to obtain a horizontal and \n\t\t// vertical page count that adds up to the page count\n\t\t// and has the correct aspect ratio\n\t\tvar pageRoot = Math.sqrt(pageCount);\n\t\tvar pagesAspectRatioSqrt = Math.sqrt(pagesAspectRatio);\n\t\tvar numRowPages = pageRoot * pagesAspectRatioSqrt;\n\t\tvar numColumnPages = pageRoot / pagesAspectRatioSqrt;\n\n\t\t// These value are rarely more than 2 rounding downs away from\n\t\t// a total that meets the page count. In cases of one being less \n\t\t// than 1 page, the other value can be too high and take more iterations \n\t\t// In this case, just change that value to be the page count, since \n\t\t// we know the other value is 1\n\t\tif (numRowPages < 1 && numColumnPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numColumnPages / pageCount;\n\t\t\tnumColumnPages = pageCount;\n\t\t\tnumRowPages /= scaleChange;\n\t\t}\n\t\t\n\t\tif (numColumnPages < 1 && numRowPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numRowPages / pageCount;\n\t\t\tnumRowPages = pageCount;\n\t\t\tnumColumnPages /= scaleChange;\n\t\t}\t\t\n\n\t\tvar currentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\n\t\tvar numLoops = 0;\n\t\t\n\t\t// Iterate through while the rounded up number of pages comes to\n\t\t// a total greater than the required number\n\t\twhile (currentTotalPages > pageCount)\n\t\t{\n\t\t\t// Round down the page count (rows or columns) that is\n\t\t\t// closest to its next integer down in percentage terms.\n\t\t\t// i.e. Reduce the page total by reducing the total\n\t\t\t// page area by the least possible amount\n\n\t\t\tvar roundRowDownProportion = Math.floor(numRowPages) / numRowPages;\n\t\t\tvar roundColumnDownProportion = Math.floor(numColumnPages) / numColumnPages;\n\t\t\t\n\t\t\t// If the round down proportion is, work out the proportion to\n\t\t\t// round down to 1 page less\n\t\t\tif (roundRowDownProportion == 1)\n\t\t\t{\n\t\t\t\troundRowDownProportion = Math.floor(numRowPages-1) / numRowPages;\n\t\t\t}\n\t\t\tif (roundColumnDownProportion == 1)\n\t\t\t{\n\t\t\t\troundColumnDownProportion = Math.floor(numColumnPages-1) / numColumnPages;\n\t\t\t}\n\t\t\t\n\t\t\t// Check which rounding down is smaller, but in the case of very small roundings\n\t\t\t// try the other dimension instead\n\t\t\tvar scaleChange = 1;\n\t\t\t\n\t\t\t// Use the higher of the two values\n\t\t\tif (roundRowDownProportion > roundColumnDownProportion)\n\t\t\t{\n\t\t\t\tscaleChange = roundRowDownProportion;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tscaleChange = roundColumnDownProportion;\n\t\t\t}\n\n\t\t\tnumRowPages = numRowPages * scaleChange;\n\t\t\tnumColumnPages = numColumnPages * scaleChange;\n\t\t\tcurrentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\t\t\t\n\t\t\tnumLoops++;\n\t\t\t\n\t\t\tif (numLoops > 10)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Work out the scale from the number of row pages required\n\t\t// The column pages will give the same value\n\t\tvar posterWidth = availablePageWidth * numRowPages;\n\t\tscale = posterWidth / graphWidth;\n\t\t\n\t\t// Allow for rounding errors\n\t\treturn scale * 0.99999;\n\t},\n\t\n\t/**\n\t * Function: show\n\t * \n\t * Copies the styles and the markup from the graph's container into the\n\t * given document and removes all cursor styles. The document is returned.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * If you experience problems with missing stylesheets in IE then try adding\n\t * the domain to the trusted sites.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be copied.\n\t * doc - Document where the new graph is created.\n\t * x0 - X-coordinate of the graph view origin. Default is 0.\n\t * y0 - Y-coordinate of the graph view origin. Default is 0.\n\t * w - Optional width of the graph view.\n\t * h - Optional height of the graph view.\n\t */\n\tshow: function(graph, doc, x0, y0, w, h)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\t\n\t\tif (doc == null)\n\t\t{\n\t\t\tvar wnd = window.open();\n\t\t\tdoc = wnd.document;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.open();\n\t\t}\n\n\t\t// Workaround for missing print output in IE9 standards\n\t\tif (document.documentMode == 9)\n\t\t{\n\t\t\tdoc.writeln('<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"><![endif]-->');\n\t\t}\n\t\t\n\t\tvar bounds = graph.getGraphBounds();\n\t\tvar dx = Math.ceil(x0 - bounds.x);\n\t\tvar dy = Math.ceil(y0 - bounds.y);\n\t\t\n\t\tif (w == null)\n\t\t{\n\t\t\tw = Math.ceil(bounds.width + x0) + Math.ceil(Math.ceil(bounds.x) - bounds.x);\n\t\t}\n\t\t\n\t\tif (h == null)\n\t\t{\n\t\t\th = Math.ceil(bounds.height + y0) + Math.ceil(Math.ceil(bounds.y) - bounds.y);\n\t\t}\n\t\t\n\t\t// Needs a special way of creating the page so that no click is required\n\t\t// to refresh the contents after the external CSS styles have been loaded.\n\t\t// To avoid a click or programmatic refresh, the styleSheets[].cssText\n\t\t// property is copied over from the original document.\n\t\tif (mxClient.IS_IE || document.documentMode == 11)\n\t\t{\n\t\t\tvar html = '<html><head>';\n\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\thtml += base[i].outerHTML;\n\t\t\t}\n\n\t\t\thtml += '<style>';\n\n\t\t\t// Copies the stylesheets without having to load them again\n\t\t\tfor (var i = 0; i < document.styleSheets.length; i++)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\thtml += document.styleSheets[i].cssText;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore security exception\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thtml += '</style></head><body style=\"margin:0px;\">';\n\t\t\t\n\t\t\t// Copies the contents of the graph container\n\t\t\thtml += '<div style=\"position:absolute;overflow:hidden;width:' + w + 'px;height:' + h + 'px;\"><div style=\"position:relative;left:' + dx + 'px;top:' + dy + 'px;\">';\n\t\t\thtml += graph.container.innerHTML;\n\t\t\thtml += '</div></div></body><html>';\n\n\t\t\tdoc.writeln(html);\n\t\t\tdoc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.writeln('<html><head>');\n\t\t\t\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(base[i]));\n\t\t\t}\n\t\t\t\n\t\t\tvar links = document.getElementsByTagName('link');\n\t\t\t\n\t\t\tfor (var i = 0; i < links.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(links[i]));\n\t\t\t}\n\t\n\t\t\tvar styles = document.getElementsByTagName('style');\n\t\t\t\n\t\t\tfor (var i = 0; i < styles.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(styles[i]));\n\t\t\t}\n\n\t\t\tdoc.writeln('</head><body style=\"margin:0px;\"></body></html>');\n\t\t\tdoc.close();\n\n\t\t\tvar outer = doc.createElement('div');\n\t\t\touter.position = 'absolute';\n\t\t\touter.overflow = 'hidden';\n\t\t\touter.style.width = w + 'px';\n\t\t\touter.style.height = h + 'px';\n\n\t\t\t// Required for HTML labels if foreignObjects are disabled\n\t\t\tvar div = doc.createElement('div');\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.left = dx + 'px';\n\t\t\tdiv.style.top = dy + 'px';\n\n\t\t\tvar node = graph.container.firstChild;\n\t\t\tvar svg = null;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tvar clone = node.cloneNode(true);\n\t\t\t\t\n\t\t\t\tif (node == graph.view.drawPane.ownerSVGElement)\n\t\t\t\t{\n\t\t\t\t\touter.appendChild(clone);\n\t\t\t\t\tsvg = clone;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdiv.appendChild(clone);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\n\t\t\tdoc.body.appendChild(outer);\n\t\t\t\n\t\t\tif (div.firstChild != null)\n\t\t\t{\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tif (svg != null)\n\t\t\t{\n\t\t\t\tsvg.style.minWidth = '';\n\t\t\t\tsvg.style.minHeight = '';\n\t\t\t\tsvg.firstChild.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t}\n\t\t}\n\t\t\n\t\tmxUtils.removeCursors(doc.body);\n\t\n\t\treturn doc;\n\t},\n\t\n\t/**\n\t * Function: printScreen\n\t * \n\t * Prints the specified graph using a new window and the built-in print\n\t * dialog.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be printed.\n\t */\n\tprintScreen: function(graph)\n\t{\n\t\tvar wnd = window.open();\n\t\tvar bounds = graph.getGraphBounds();\n\t\tmxUtils.show(graph, wnd.document);\n\t\t\n\t\tvar print = function()\n\t\t{\n\t\t\twnd.focus();\n\t\t\twnd.print();\n\t\t\twnd.close();\n\t\t};\n\t\t\n\t\t// Workaround for Google Chrome which needs a bit of a\n\t\t// delay in order to render the SVG contents\n\t\tif (mxClient.IS_GC)\n\t\t{\n\t\t\twnd.setTimeout(print, 500);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprint();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: popup\n\t * \n\t * Shows the specified text content in a new <mxWindow> or a new browser\n\t * window if isInternalWindow is false.\n\t * \n\t * Parameters:\n\t * \n\t * content - String that specifies the text to be displayed.\n\t * isInternalWindow - Optional boolean indicating if an mxWindow should be\n\t * used instead of a new browser window. Default is false.\n\t */\n\tpopup: function(content, isInternalWindow)\n\t{\n\t   \tif (isInternalWindow)\n\t   \t{\n\t\t\tvar div = document.createElement('div');\n\t\t\t\n\t\t\tdiv.style.overflow = 'scroll';\n\t\t\tdiv.style.width = '636px';\n\t\t\tdiv.style.height = '460px';\n\t\t\t\n\t\t\tvar pre = document.createElement('pre');\n\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t\n\t\t\tdiv.appendChild(pre);\n\t\t\t\n\t\t\tvar w = document.body.clientWidth;\n\t\t\tvar h = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight)\n\t\t\tvar wnd = new mxWindow('Popup Window', div,\n\t\t\t\tw/2-320, h/2-240, 640, 480, false, true);\n\n\t\t\twnd.setClosable(true);\n\t\t\twnd.setVisible(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Wraps up the XML content in a textarea\n\t\t\tif (mxClient.IS_NS)\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t\twnd.document.writeln('<pre>'+mxUtils.htmlEntities(content)+'</pre');\n\t\t\t   \twnd.document.close();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t    var pre = wnd.document.createElement('pre');\n\t\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t   \twnd.document.body.appendChild(pre);\n\t\t\t}\n\t   \t}\n\t},\n\t\n\t/**\n\t * Function: alert\n\t * \n\t * Displayss the given alert in a new dialog. This implementation uses the\n\t * built-in alert function. This is used to display validation errors when\n\t * connections cannot be changed or created.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\talert: function(message)\n\t{\n\t\talert(message);\n\t},\n\t\n\t/**\n\t * Function: prompt\n\t * \n\t * Displays the given message in a prompt dialog. This implementation uses\n\t * the built-in prompt function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * defaultValue - Optional string specifying the default value.\n\t */\n\tprompt: function(message, defaultValue)\n\t{\n\t\treturn prompt(message, (defaultValue != null) ? defaultValue : '');\n\t},\n\t\n\t/**\n\t * Function: confirm\n\t * \n\t * Displays the given message in a confirm dialog. This implementation uses\n\t * the built-in confirm function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\tconfirm: function(message)\n\t{\n\t\treturn confirm(message);\n\t},\n\n\t/**\n\t * Function: error\n\t * \n\t * Displays the given error message in a new <mxWindow> of the given width.\n\t * If close is true then an additional close button is added to the window.\n\t * The optional icon specifies the icon to be used for the window. Default\n\t * is <mxUtils.errorImage>.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * width - Integer specifying the width of the window.\n\t * close - Optional boolean indicating whether to add a close button.\n\t * icon - Optional icon for the window decoration.\n\t */\n\terror: function(message, width, close, icon)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '20px';\n\n\t\tvar img = document.createElement('img');\n\t\timg.setAttribute('src', icon || mxUtils.errorImage);\n\t\timg.setAttribute('valign', 'bottom');\n\t\timg.style.verticalAlign = 'middle';\n\t\tdiv.appendChild(img);\n\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tmxUtils.write(div, message);\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\t\tvar warn = new mxWindow(mxResources.get(mxUtils.errorResource) ||\n\t\t\tmxUtils.errorResource, div, (w-width)/2, h/4, width, null,\n\t\t\tfalse, true);\n\n\t\tif (close)\n\t\t{\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\tvar tmp = document.createElement('p');\n\t\t\tvar button = document.createElement('button');\n\n\t\t\tif (mxClient.IS_IE)\n\t\t\t{\n\t\t\t\tbutton.style.cssText = 'float:right';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbutton.setAttribute('style', 'float:right');\n\t\t\t}\n\n\t\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t\t{\n\t\t\t\twarn.destroy();\n\t\t\t});\n\n\t\t\tmxUtils.write(button, mxResources.get(mxUtils.closeResource) ||\n\t\t\t\tmxUtils.closeResource);\n\t\t\t\n\t\t\ttmp.appendChild(button);\n\t\t\tdiv.appendChild(tmp);\n\t\t\t\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\twarn.setClosable(true);\n\t\t}\n\t\t\n\t\twarn.setVisible(true);\n\t\t\n\t\treturn warn;\n\t},\n\n\t/**\n\t * Function: makeDraggable\n\t * \n\t * Configures the given DOM element to act as a drag source for the\n\t * specified graph. Returns a a new <mxDragSource>. If\n\t * <mxDragSource.guideEnabled> is enabled then the x and y arguments must\n\t * be used in funct to match the preview location.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var funct = function(graph, evt, cell, x, y)\n\t * {\n\t *   if (graph.canImportCell(cell))\n\t *   {\n\t *     var parent = graph.getDefaultParent();\n\t *     var vertex = null;\n\t *     \n\t *     graph.getModel().beginUpdate();\n\t *     try\n\t *     {\n\t * \t     vertex = graph.insertVertex(parent, null, 'Hello', x, y, 80, 30);\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.getModel().endUpdate();\n\t *     }\n\t *\n\t *     graph.setSelectionCell(vertex);\n\t *   }\n\t * }\n\t * \n\t * var img = document.createElement('img');\n\t * img.setAttribute('src', 'editors/images/rectangle.gif');\n\t * img.style.position = 'absolute';\n\t * img.style.left = '0px';\n\t * img.style.top = '0px';\n\t * img.style.width = '16px';\n\t * img.style.height = '16px';\n\t * \n\t * var dragImage = img.cloneNode(true);\n\t * dragImage.style.width = '32px';\n\t * dragImage.style.height = '32px';\n\t * mxUtils.makeDraggable(img, graph, funct, dragImage);\n\t * document.body.appendChild(img);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM element to make draggable.\n\t * graphF - <mxGraph> that acts as the drop target or a function that takes a\n\t * mouse event and returns the current <mxGraph>.\n\t * funct - Function to execute on a successful drop.\n\t * dragElement - Optional DOM node to be used for the drag preview.\n\t * dx - Optional horizontal offset between the cursor and the drag\n\t * preview.\n\t * dy - Optional vertical offset between the cursor and the drag\n\t * preview.\n\t * autoscroll - Optional boolean that specifies if autoscroll should be\n\t * used. Default is mxGraph.autoscroll.\n\t * scalePreview - Optional boolean that specifies if the preview element\n\t * should be scaled according to the graph scale. If this is true, then\n\t * the offsets will also be scaled. Default is false.\n\t * highlightDropTargets - Optional boolean that specifies if dropTargets\n\t * should be highlighted. Default is true.\n\t * getDropTarget - Optional function to return the drop target for a given\n\t * location (x, y). Default is mxGraph.getCellAt.\n\t */\n\tmakeDraggable: function(element, graphF, funct, dragElement, dx, dy, autoscroll,\n\t\t\tscalePreview, highlightDropTargets, getDropTarget)\n\t{\n\t\tvar dragSource = new mxDragSource(element, funct);\n\t\tdragSource.dragOffset = new mxPoint((dx != null) ? dx : 0,\n\t\t\t(dy != null) ? dy : mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\t\tdragSource.autoscroll = autoscroll;\n\t\t\n\t\t// Cannot enable this by default. This needs to be enabled in the caller\n\t\t// if the funct argument uses the new x- and y-arguments.\n\t\tdragSource.setGuidesEnabled(false);\n\t\t\n\t\tif (highlightDropTargets != null)\n\t\t{\n\t\t\tdragSource.highlightDropTargets = highlightDropTargets;\n\t\t}\n\t\t\n\t\t// Overrides function to find drop target cell\n\t\tif (getDropTarget != null)\n\t\t{\n\t\t\tdragSource.getDropTarget = getDropTarget;\n\t\t}\n\t\t\n\t\t// Overrides function to get current graph\n\t\tdragSource.getGraphForEvent = function(evt)\n\t\t{\n\t\t\treturn (typeof(graphF) == 'function') ? graphF(evt) : graphF;\n\t\t};\n\t\t\n\t\t// Translates switches into dragSource customizations\n\t\tif (dragElement != null)\n\t\t{\n\t\t\tdragSource.createDragElement = function()\n\t\t\t{\n\t\t\t\treturn dragElement.cloneNode(true);\n\t\t\t};\n\t\t\t\n\t\t\tif (scalePreview)\n\t\t\t{\n\t\t\t\tdragSource.createPreviewElement = function(graph)\n\t\t\t\t{\n\t\t\t\t\tvar elt = dragElement.cloneNode(true);\n\n\t\t\t\t\tvar w = parseInt(elt.style.width);\n\t\t\t\t\tvar h = parseInt(elt.style.height);\n\t\t\t\t\telt.style.width = Math.round(w * graph.view.scale) + 'px';\n\t\t\t\t\telt.style.height = Math.round(h * graph.view.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\treturn elt;\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn dragSource;\n\t}\n\n};\n\n__mxOutput.mxUtils = typeof mxUtils !== 'undefined' ? mxUtils : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n var mxConstants =\n {\n\t/**\n\t * Class: mxConstants\n\t * \n\t * Defines various global constants.\n\t * \n\t * Variable: DEFAULT_HOTSPOT\n\t * \n\t * Defines the portion of the cell which is to be used as a connectable\n\t * region. Default is 0.3. Possible values are 0 < x <= 1. \n\t */\n\tDEFAULT_HOTSPOT: 0.3,\n\n\t/**\n\t * Variable: MIN_HOTSPOT_SIZE\n\t * \n\t * Defines the minimum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Default is 8.\n\t */\n\tMIN_HOTSPOT_SIZE: 8,\n\n\t/**\n\t * Variable: MAX_HOTSPOT_SIZE\n\t * \n\t * Defines the maximum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Use 0 for no maximum. Default is 0.\n\t */\n\tMAX_HOTSPOT_SIZE: 0,\n\n\t/**\n\t * Variable: RENDERING_HINT_EXACT\n\t * \n\t * Defines the exact rendering hint.\n\t */\n\tRENDERING_HINT_EXACT: 'exact',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTER\n\t * \n\t * Defines the faster rendering hint.\n\t */\n\tRENDERING_HINT_FASTER: 'faster',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTEST\n\t * \n\t * Defines the fastest rendering hint.\n\t */\n\tRENDERING_HINT_FASTEST: 'fastest',\n\n\t/**\n\t * Variable: DIALECT_SVG\n\t * \n\t * Defines the SVG display dialect name.\n\t */\n\tDIALECT_SVG: 'svg',\n\n\t/**\n\t * Variable: DIALECT_VML\n\t * \n\t * Defines the VML display dialect name.\n\t */\n\tDIALECT_VML: 'vml',\n\n\t/**\n\t * Variable: DIALECT_MIXEDHTML\n\t * \n\t * Defines the mixed HTML display dialect name.\n\t */\n\tDIALECT_MIXEDHTML: 'mixedHtml',\n\n\t/**\n\t * Variable: DIALECT_PREFERHTML\n\t * \n\t * Defines the preferred HTML display dialect name.\n\t */\n\tDIALECT_PREFERHTML: 'preferHtml',\n\n\t/**\n\t * Variable: DIALECT_STRICTHTML\n\t * \n\t * Defines the strict HTML display dialect.\n\t */\n\tDIALECT_STRICTHTML: 'strictHtml',\n\n\t/**\n\t * Variable: NS_SVG\n\t * \n\t * Defines the SVG namespace.\n\t */\n\tNS_SVG: 'http://www.w3.org/2000/svg',\n\n\t/**\n\t * Variable: NS_XHTML\n\t * \n\t * Defines the XHTML namespace.\n\t */\n\tNS_XHTML: 'http://www.w3.org/1999/xhtml',\n\n\t/**\n\t * Variable: NS_XLINK\n\t * \n\t * Defines the XLink namespace.\n\t */\n\tNS_XLINK: 'http://www.w3.org/1999/xlink',\n\n\t/**\n\t * Variable: SHADOWCOLOR\n\t * \n\t * Defines the color to be used to draw shadows in shapes and windows.\n\t * Default is gray.\n\t */\n\tSHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: VML_SHADOWCOLOR\n\t * \n\t * Used for shadow color in filters where transparency is not supported\n\t * (Microsoft Internet Explorer). Default is gray.\n\t */\n\tVML_SHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: SHADOW_OFFSET_X\n\t * \n\t * Specifies the x-offset of the shadow. Default is 2.\n\t */\n\tSHADOW_OFFSET_X: 2,\n\n\t/**\n\t * Variable: SHADOW_OFFSET_Y\n\t * \n\t * Specifies the y-offset of the shadow. Default is 3.\n\t */\n\tSHADOW_OFFSET_Y: 3,\n\t\n\t/**\n\t * Variable: SHADOW_OPACITY\n\t * \n\t * Defines the opacity for shadows. Default is 1.\n\t */\n\tSHADOW_OPACITY: 1,\n \n\t/**\n\t * Variable: NODETYPE_ELEMENT\n\t * \n\t * DOM node of type ELEMENT.\n\t */\n\tNODETYPE_ELEMENT: 1,\n\n\t/**\n\t * Variable: NODETYPE_ATTRIBUTE\n\t * \n\t * DOM node of type ATTRIBUTE.\n\t */\n\tNODETYPE_ATTRIBUTE: 2,\n\n\t/**\n\t * Variable: NODETYPE_TEXT\n\t * \n\t * DOM node of type TEXT.\n\t */\n\tNODETYPE_TEXT: 3,\n\n\t/**\n\t * Variable: NODETYPE_CDATA\n\t * \n\t * DOM node of type CDATA.\n\t */\n\tNODETYPE_CDATA: 4,\n\t\n\t/**\n\t * Variable: NODETYPE_ENTITY_REFERENCE\n\t * \n\t * DOM node of type ENTITY_REFERENCE.\n\t */\n\tNODETYPE_ENTITY_REFERENCE: 5,\n\n\t/**\n\t * Variable: NODETYPE_ENTITY\n\t * \n\t * DOM node of type ENTITY.\n\t */\n\tNODETYPE_ENTITY: 6,\n\n\t/**\n\t * Variable: NODETYPE_PROCESSING_INSTRUCTION\n\t * \n\t * DOM node of type PROCESSING_INSTRUCTION.\n\t */\n\tNODETYPE_PROCESSING_INSTRUCTION: 7,\n\n\t/**\n\t * Variable: NODETYPE_COMMENT\n\t * \n\t * DOM node of type COMMENT.\n\t */\n\tNODETYPE_COMMENT: 8,\n\t\t\n\t/**\n\t * Variable: NODETYPE_DOCUMENT\n\t * \n\t * DOM node of type DOCUMENT.\n\t */\n\tNODETYPE_DOCUMENT: 9,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENTTYPE\n\t * \n\t * DOM node of type DOCUMENTTYPE.\n\t */\n\tNODETYPE_DOCUMENTTYPE: 10,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENT_FRAGMENT\n\t * \n\t * DOM node of type DOCUMENT_FRAGMENT.\n\t */\n\tNODETYPE_DOCUMENT_FRAGMENT: 11,\n\n\t/**\n\t * Variable: NODETYPE_NOTATION\n\t * \n\t * DOM node of type NOTATION.\n\t */\n\tNODETYPE_NOTATION: 12,\n\t\n\t/**\n\t * Variable: TOOLTIP_VERTICAL_OFFSET\n\t * \n\t * Defines the vertical offset for the tooltip.\n\t * Default is 16.\n\t */\n\tTOOLTIP_VERTICAL_OFFSET: 16,\n\n\t/**\n\t * Variable: DEFAULT_VALID_COLOR\n\t * \n\t * Specifies the default valid color. Default is #0000FF.\n\t */\n\tDEFAULT_VALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: DEFAULT_INVALID_COLOR\n\t * \n\t * Specifies the default invalid color. Default is #FF0000.\n\t */\n\tDEFAULT_INVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Specifies the default highlight color for shape outlines.\n\t * Default is #0000FF. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Defines the strokewidth to be used for shape outlines.\n\t * Default is 5. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_STROKEWIDTH: 5,\n\n\t/**\n\t * Variable: HIGHLIGHT_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the highlights.\n\t * Default is 3.\n\t */\n\tHIGHLIGHT_STROKEWIDTH: 3,\n\n\t/**\n\t * Variable: CONSTRAINT_HIGHLIGHT_SIZE\n\t * \n\t * Size of the constraint highlight (in px). Default is 2.\n\t */\n\tHIGHLIGHT_SIZE: 2,\n\t\n\t/**\n\t * Variable: HIGHLIGHT_OPACITY\n\t * \n\t * Opacity (in %) used for the highlights (including outline).\n\t * Default is 100.\n\t */\n\tHIGHLIGHT_OPACITY: 100,\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_VERTEX\n\t * \n\t * Defines the cursor for a movable vertex. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_VERTEX: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_EDGE\n\t * \n\t * Defines the cursor for a movable edge. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_EDGE: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_LABEL_HANDLE\n\t * \n\t * Defines the cursor for a movable label. Default is 'default'.\n\t */\n\tCURSOR_LABEL_HANDLE: 'default',\n\t\n\t/**\n\t * Variable: CURSOR_TERMINAL_HANDLE\n\t * \n\t * Defines the cursor for a terminal handle. Default is 'pointer'.\n\t */\n\tCURSOR_TERMINAL_HANDLE: 'pointer',\n\t\n\t/**\n\t * Variable: CURSOR_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_BEND_HANDLE: 'crosshair',\n\n\t/**\n\t * Variable: CURSOR_VIRTUAL_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_VIRTUAL_BEND_HANDLE: 'crosshair',\n\t\n\t/**\n\t * Variable: CURSOR_CONNECT\n\t * \n\t * Defines the cursor for a connectable state. Default is 'pointer'.\n\t */\n\tCURSOR_CONNECT: 'pointer',\n\n\t/**\n\t * Variable: HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for the cell highlighting.\n\t * Use 'none' for no color. Default is #00FF00.\n\t */\n\tHIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: TARGET_HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for highlighting a target cell for a new\n\t * or changed connection. Note that this may be either a source or\n\t * target terminal in the graph. Use 'none' for no color.\n\t * Default is #0000FF.\n\t */\n\tCONNECT_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: INVALID_CONNECT_TARGET_COLOR\n\t * \n\t * Defines the color to be used for highlighting a invalid target cells\n\t * for a new or changed connections. Note that this may be either a source\n\t * or target terminal in the graph. Use 'none' for no color. Default is\n\t * #FF0000.\n\t */\n\tINVALID_CONNECT_TARGET_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: DROP_TARGET_COLOR\n\t * \n\t * Defines the color to be used for the highlighting target parent cells\n\t * (for drag and drop). Use 'none' for no color. Default is #0000FF.\n\t */\n\tDROP_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: VALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring valid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tVALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: INVALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring invalid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tINVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: EDGE_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of edges. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tEDGE_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of vertices. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tVERTEX_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for vertex selections.\n\t * Default is 1.\n\t */\n\tVERTEX_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: EDGE_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for edge selections.\n\t * Default is 1.\n\t */\n\tEDGE_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the vertex selection\n\t * border. Default is true.\n\t */\n\tVERTEX_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the edge selection\n\t * border. Default is true.\n\t */\n\tEDGE_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: GUIDE_COLOR\n\t * \n\t * Defines the color to be used for the guidelines in mxGraphHandler.\n\t * Default is #FF0000.\n\t */\n\tGUIDE_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: GUIDE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the guidelines in mxGraphHandler.\n\t * Default is 1.\n\t */\n\tGUIDE_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: OUTLINE_COLOR\n\t * \n\t * Defines the color to be used for the outline rectangle\n\t * border.  Use 'none' for no color. Default is #0099FF.\n\t */\n\tOUTLINE_COLOR: '#0099FF',\n\n\t/**\n\t * Variable: OUTLINE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the outline rectangle\n\t * stroke width. Default is 3.\n\t */\n\tOUTLINE_STROKEWIDTH: (mxClient.IS_IE) ? 2 : 3,\n\n\t/**\n\t * Variable: HANDLE_SIZE\n\t * \n\t * Defines the default size for handles. Default is 6.\n\t */\n\tHANDLE_SIZE: 6,\n\n\t/**\n\t * Variable: LABEL_HANDLE_SIZE\n\t * \n\t * Defines the default size for label handles. Default is 4.\n\t */\n\tLABEL_HANDLE_SIZE: 4,\n\n\t/**\n\t * Variable: HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the handle fill color. Use 'none' for\n\t * no color. Default is #00FF00 (green).\n\t */\n\tHANDLE_FILLCOLOR: '#00FF00',\n\n\t/**\n\t * Variable: HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the handle stroke color. Use 'none' for\n\t * no color. Default is black.\n\t */\n\tHANDLE_STROKECOLOR: 'black',\n\n\t/**\n\t * Variable: LABEL_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the label handle fill color. Use 'none'\n\t * for no color. Default is yellow.\n\t */\n\tLABEL_HANDLE_FILLCOLOR: 'yellow',\n\n\t/**\n\t * Variable: CONNECT_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the connect handle fill color. Use\n\t * 'none' for no color. Default is #0000FF (blue).\n\t */\n\tCONNECT_HANDLE_FILLCOLOR: '#0000FF',\n\n\t/**\n\t * Variable: LOCKED_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the locked handle fill color. Use\n\t * 'none' for no color. Default is #FF0000 (red).\n\t */\n\tLOCKED_HANDLE_FILLCOLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the outline sizer fill color. Use\n\t * 'none' for no color. Default is #00FFFF.\n\t */\n\tOUTLINE_HANDLE_FILLCOLOR: '#00FFFF',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the outline sizer stroke color. Use\n\t * 'none' for no color. Default is #0033FF.\n\t */\n\tOUTLINE_HANDLE_STROKECOLOR: '#0033FF',\n\n\t/**\n\t * Variable: DEFAULT_FONTFAMILY\n\t * \n\t * Defines the default family for all fonts. Default is Arial,Helvetica.\n\t */\n\tDEFAULT_FONTFAMILY: 'Arial,Helvetica',\n\n\t/**\n\t * Variable: DEFAULT_FONTSIZE\n\t * \n\t * Defines the default size (in px). Default is 11.\n\t */\n\tDEFAULT_FONTSIZE: 11,\n\n\t/**\n\t * Variable: DEFAULT_TEXT_DIRECTION\n\t * \n\t * Defines the default value for the <STYLE_TEXT_DIRECTION> if no value is\n\t * defined for it in the style. Default value is an empty string which means\n\t * the default system setting is used and no direction is set.\n\t */\n\tDEFAULT_TEXT_DIRECTION: '',\n\n\t/**\n\t * Variable: LINE_HEIGHT\n\t * \n\t * Defines the default line height for text labels. Default is 1.2.\n\t */\n\tLINE_HEIGHT: 1.2,\n\n\t/**\n\t * Variable: WORD_WRAP\n\t * \n\t * Defines the CSS value for the word-wrap property. Default is \"normal\".\n\t * Change this to \"break-word\" to allow long words to be able to be broken\n\t * and wrap onto the next line.\n\t */\n\tWORD_WRAP: 'normal',\n\n\t/**\n\t * Variable: ABSOLUTE_LINE_HEIGHT\n\t * \n\t * Specifies if absolute line heights should be used (px) in CSS. Default\n\t * is false. Set this to true for backwards compatibility.\n\t */\n\tABSOLUTE_LINE_HEIGHT: false,\n\n\t/**\n\t * Variable: DEFAULT_FONTSTYLE\n\t * \n\t * Defines the default style for all fonts. Default is 0. This can be set\n\t * to any combination of font styles as follows.\n\t * \n\t * (code)\n\t * mxConstants.DEFAULT_FONTSTYLE = mxConstants.FONT_BOLD | mxConstants.FONT_ITALIC;\n\t * (end)\n\t */\n\tDEFAULT_FONTSTYLE: 0,\n\n\t/**\n\t * Variable: DEFAULT_STARTSIZE\n\t * \n\t * Defines the default start size for swimlanes. Default is 40.\n\t */\n\tDEFAULT_STARTSIZE: 40,\n\n\t/**\n\t * Variable: DEFAULT_MARKERSIZE\n\t * \n\t * Defines the default size for all markers. Default is 6.\n\t */\n\tDEFAULT_MARKERSIZE: 6,\n\n\t/**\n\t * Variable: DEFAULT_IMAGESIZE\n\t * \n\t * Defines the default width and height for images used in the\n\t * label shape. Default is 24.\n\t */\n\tDEFAULT_IMAGESIZE: 24,\n\n\t/**\n\t * Variable: ENTITY_SEGMENT\n\t * \n\t * Defines the length of the horizontal segment of an Entity Relation.\n\t * This can be overridden using <mxConstants.STYLE_SEGMENT> style.\n\t * Default is 30.\n\t */\n\tENTITY_SEGMENT: 30,\n\n\t/**\n\t * Variable: RECTANGLE_ROUNDING_FACTOR\n\t * \n\t * Defines the rounding factor for rounded rectangles in percent between\n\t * 0 and 1. Values should be smaller than 0.5. Default is 0.15.\n\t */\n\tRECTANGLE_ROUNDING_FACTOR: 0.15,\n\n\t/**\n\t * Variable: LINE_ARCSIZE\n\t * \n\t * Defines the size of the arcs for rounded edges. Default is 20.\n\t */\n\tLINE_ARCSIZE: 20,\n\n\t/**\n\t * Variable: ARROW_SPACING\n\t * \n\t * Defines the spacing between the arrow shape and its terminals. Default is 0.\n\t */\n\tARROW_SPACING: 0,\n\n\t/**\n\t * Variable: ARROW_WIDTH\n\t * \n\t * Defines the width of the arrow shape. Default is 30.\n\t */\n\tARROW_WIDTH: 30,\n\n\t/**\n\t * Variable: ARROW_SIZE\n\t * \n\t * Defines the size of the arrowhead in the arrow shape. Default is 30.\n\t */\n\tARROW_SIZE: 30,\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_PORTRAIT: new mxRectangle(0, 0, 827, 1169),\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_LANDSCAPE: new mxRectangle(0, 0, 1169, 827),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The\n\t * dimensions of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_PORTRAIT: new mxRectangle(0, 0, 850, 1100),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The dimensions\n\t * of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_LANDSCAPE: new mxRectangle(0, 0, 1100, 850),\n\n\t/**\n\t * Variable: NONE\n\t * \n\t * Defines the value for none. Default is \"none\".\n\t */\n\tNONE: 'none',\n\n\t/**\n\t * Variable: STYLE_PERIMETER\n\t * \n\t * Defines the key for the perimeter style. This is a function that defines\n\t * the perimeter around a particular shape. Possible values are the\n\t * functions defined in <mxPerimeter>. Alternatively, the constants in this\n\t * class that start with \"PERIMETER_\" may be used to access\n\t * perimeter styles in <mxStyleRegistry>. Value is \"perimeter\".\n\t */\n\tSTYLE_PERIMETER: 'perimeter',\n\t\n\t/**\n\t * Variable: STYLE_SOURCE_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the source for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"sourcePort\".\n\t */\n\tSTYLE_SOURCE_PORT: 'sourcePort',\n\t\n\t/**\n\t * Variable: STYLE_TARGET_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the target for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"targetPort\".\n\t */\n\tSTYLE_TARGET_PORT: 'targetPort',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to cells in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, \n\t * DIRECTION_EAST\" and \"DIRECTION_WEST\". Value is\n\t * \"portConstraint\".\n\t */\n\tSTYLE_PORT_CONSTRAINT: 'portConstraint',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT_ROTATION\n\t * \n\t * Define whether port constraint directions are rotated with vertex\n\t * rotation. 0 (default) causes port constraints to remain absolute, \n\t * relative to the graph, 1 causes the constraints to rotate with\n\t * the vertex. Value is \"portConstraintRotation\".\n\t */\n\tSTYLE_PORT_CONSTRAINT_ROTATION: 'portConstraintRotation',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to sources in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"sourcePortConstraint\".\n\t */\n\tSTYLE_SOURCE_PORT_CONSTRAINT: 'sourcePortConstraint',\n\n\t/**\n\t * Variable: STYLE_TARGET_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to targets in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"targetPortConstraint\".\n\t */\n\tSTYLE_TARGET_PORT_CONSTRAINT: 'targetPortConstraint',\n\n\t/**\n\t * Variable: STYLE_OPACITY\n\t * \n\t * Defines the key for the opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"opacity\".\n\t */\n\tSTYLE_OPACITY: 'opacity',\n\n\t/**\n\t * Variable: STYLE_FILL_OPACITY\n\t * \n\t * Defines the key for the fill opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"fillOpacity\".\n\t */\n\tSTYLE_FILL_OPACITY: 'fillOpacity',\n\n\t/**\n\t * Variable: STYLE_STROKE_OPACITY\n\t * \n\t * Defines the key for the stroke opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"strokeOpacity\".\n\t */\n\tSTYLE_STROKE_OPACITY: 'strokeOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_OPACITY\n\t * \n\t * Defines the key for the text opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"textOpacity\".\n\t */\n\tSTYLE_TEXT_OPACITY: 'textOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_DIRECTION\n\t * \n\t * Defines the key for the text direction style. Possible values are\n\t * \"TEXT_DIRECTION_DEFAULT, TEXT_DIRECTION_AUTO, TEXT_DIRECTION_LTR\"\n\t * and \"TEXT_DIRECTION_RTL\". Value is \"textDirection\".\n\t * The default value for the style is defined in <DEFAULT_TEXT_DIRECTION>.\n\t * It is used is no value is defined for this key in a given style. This is\n\t * an experimental style that is currently ignored in the backends.\n\t */\n\tSTYLE_TEXT_DIRECTION: 'textDirection',\n\n\t/**\n\t * Variable: STYLE_OVERFLOW\n\t * \n\t * Defines the key for the overflow style. Possible values are 'visible',\n\t * 'hidden', 'fill' and 'width'. The default value is 'visible'. This value\n\t * specifies how overlapping vertex labels are handled. A value of\n\t * 'visible' will show the complete label. A value of 'hidden' will clip\n\t * the label so that it does not overlap the vertex bounds. A value of\n\t * 'fill' will use the vertex bounds and a value of 'width' will use the\n\t * the vertex width for the label. See <mxGraph.isLabelClipped>. Note that\n\t * the vertical alignment is ignored for overflow fill and for horizontal\n\t * alignment, left should be used to avoid pixel offsets in Internet Explorer\n\t * 11 and earlier or if foreignObjects are disabled. Value is \"overflow\".\n\t */\n\tSTYLE_OVERFLOW: 'overflow',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL\n\t * \n\t * Defines if the connection points on either end of the edge should be\n\t * computed so that the edge is vertical or horizontal if possible and\n\t * if the point is not at a fixed location. Default is false. This is\n\t * used in <mxGraph.isOrthogonal>, which also returns true if the edgeStyle\n\t * of the edge is an elbow or entity. Value is \"orthogonal\".\n\t */\n\tSTYLE_ORTHOGONAL: 'orthogonal',\n\n\t/**\n\t * Variable: STYLE_EXIT_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitX\".\n\t */\n\tSTYLE_EXIT_X: 'exitX',\n\n\t/**\n\t * Variable: STYLE_EXIT_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitY\".\n\t */\n\tSTYLE_EXIT_Y: 'exitY',\n\n\t\n\t/**\n\t* Variable: STYLE_EXIT_DX\n\t* \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDx\".\n\t*/\n\tSTYLE_EXIT_DX: 'exitDx',\n\n\t/**\n\t* Variable: STYLE_EXIT_DY\n\t* \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDy\".\n\t*/\n\tSTYLE_EXIT_DY: 'exitDy',\n\t\n\t/**\n\t * Variable: STYLE_EXIT_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the source. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"exitPerimeter\".\n\t */\n\tSTYLE_EXIT_PERIMETER: 'exitPerimeter',\n\n\t/**\n\t * Variable: STYLE_ENTRY_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryX\".\n\t */\n\tSTYLE_ENTRY_X: 'entryX',\n\n\t/**\n\t * Variable: STYLE_ENTRY_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryY\".\n\t */\n\tSTYLE_ENTRY_Y: 'entryY',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DX\n\t * \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDx\".\n\t*/\n\tSTYLE_ENTRY_DX: 'entryDx',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DY\n\t * \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDy\".\n\t*/\n\tSTYLE_ENTRY_DY: 'entryDy',\n\n\t/**\n\t * Variable: STYLE_ENTRY_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the target. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"entryPerimeter\".\n\t */\n\tSTYLE_ENTRY_PERIMETER: 'entryPerimeter',\n\n\t/**\n\t * Variable: STYLE_WHITE_SPACE\n\t * \n\t * Defines the key for the white-space style. Possible values are 'nowrap'\n\t * and 'wrap'. The default value is 'nowrap'. This value specifies how\n\t * white-space inside a HTML vertex label should be handled. A value of\n\t * 'nowrap' means the text will never wrap to the next line until a\n\t * linefeed is encountered. A value of 'wrap' means text will wrap when\n\t * necessary. This style is only used for HTML labels.\n\t * See <mxGraph.isWrapping>. Value is \"whiteSpace\".\n\t */\n\tSTYLE_WHITE_SPACE: 'whiteSpace',\n\n\t/**\n\t * Variable: STYLE_ROTATION\n\t * \n\t * Defines the key for the rotation style. The type of the value is \n\t * numeric and the possible range is 0-360. Value is \"rotation\".\n\t */\n\tSTYLE_ROTATION: 'rotation',\n\n\t/**\n\t * Variable: STYLE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. Value is \"fillColor\".\n\t */\n\tSTYLE_FILLCOLOR: 'fillColor',\n\n\t/**\n\t * Variable: STYLE_POINTER_EVENTS\n\t * \n\t * Specifies if pointer events should be fired on transparent backgrounds.\n\t * This style is currently only supported in <mxRectangleShape>. Default\n\t * is true. Value is \"pointerEvents\". This is typically set to\n\t * false in groups where the transparent part should allow any underlying\n\t * cells to be clickable.\n\t */\n\tSTYLE_POINTER_EVENTS: 'pointerEvents',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color of the swimlane background. Possible\n\t * values are all HTML color names or HEX codes. Default is no background.\n\t * Value is \"swimlaneFillColor\".\n\t */\n\tSTYLE_SWIMLANE_FILLCOLOR: 'swimlaneFillColor',\n\n\t/**\n\t * Variable: STYLE_MARGIN\n\t * \n\t * Defines the key for the margin between the ellipses in the double ellipse shape.\n\t * Possible values are all positive numbers. Value is \"margin\".\n\t */\n\tSTYLE_MARGIN: 'margin',\n\n\t/**\n\t * Variable: STYLE_GRADIENTCOLOR\n\t * \n\t * Defines the key for the gradient color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. This is ignored if no fill color is defined. Value is\n\t * \"gradientColor\".\n\t */\n\tSTYLE_GRADIENTCOLOR: 'gradientColor',\n\n\t/**\n\t * Variable: STYLE_GRADIENT_DIRECTION\n\t * \n\t * Defines the key for the gradient direction. Possible values are\n\t * <DIRECTION_EAST>, <DIRECTION_WEST>, <DIRECTION_NORTH> and\n\t * <DIRECTION_SOUTH>. Default is <DIRECTION_SOUTH>. Generally, and by\n\t * default in mxGraph, gradient painting is done from the value of\n\t * <STYLE_FILLCOLOR> to the value of <STYLE_GRADIENTCOLOR>. Taking the\n\t * example of <DIRECTION_NORTH>, this means <STYLE_FILLCOLOR> color at the \n\t * bottom of paint pattern and <STYLE_GRADIENTCOLOR> at top, with a\n\t * gradient in-between. Value is \"gradientDirection\".\n\t */\n\tSTYLE_GRADIENT_DIRECTION: 'gradientDirection',\n\n\t/**\n\t * Variable: STYLE_STROKECOLOR\n\t * \n\t * Defines the key for the strokeColor style. Possible values are all HTML\n\t * color names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit', 'indicated' to use the color code of a related cell or the\n\t * indicator shape or 'none' for no color. Value is \"strokeColor\".\n\t */\n\tSTYLE_STROKECOLOR: 'strokeColor',\n\n\t/**\n\t * Variable: STYLE_SEPARATORCOLOR\n\t * \n\t * Defines the key for the separatorColor style. Possible values are all\n\t * HTML color names or HEX codes. This style is only used for\n\t * <SHAPE_SWIMLANE> shapes. Value is \"separatorColor\".\n\t */\n\tSTYLE_SEPARATORCOLOR: 'separatorColor',\n\n\t/**\n\t * Variable: STYLE_STROKEWIDTH\n\t * \n\t * Defines the key for the strokeWidth style. The type of the value is \n\t * numeric and the possible range is any non-negative value larger or equal\n\t * to 1. The value defines the stroke width in pixels. Note: To hide a\n\t * stroke use strokeColor none. Value is \"strokeWidth\".\n\t */\n\tSTYLE_STROKEWIDTH: 'strokeWidth',\n\n\t/**\n\t * Variable: STYLE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. This value defines how the lines of\n\t * the label are horizontally aligned. <ALIGN_LEFT> mean label text lines\n\t * are aligned to left of the label bounds, <ALIGN_RIGHT> to the right of\n\t * the label bounds and <ALIGN_CENTER> means the center of the text lines\n\t * are aligned in the center of the label bounds. Note this value doesn't\n\t * affect the positioning of the overall label bounds relative to the\n\t * vertex, to move the label bounds horizontally, use\n\t * <STYLE_LABEL_POSITION>. Value is \"align\".\n\t */\n\tSTYLE_ALIGN: 'align',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. This value defines how\n\t * the lines of the label are vertically aligned. <ALIGN_TOP> means the\n\t * topmost label text line is aligned against the top of the label bounds,\n\t * <ALIGN_BOTTOM> means the bottom-most label text line is aligned against\n\t * the bottom of the label bounds and <ALIGN_MIDDLE> means there is equal\n\t * spacing between the topmost text label line and the top of the label\n\t * bounds and the bottom-most text label line and the bottom of the label\n\t * bounds. Note this value doesn't affect the positioning of the overall\n\t * label bounds relative to the vertex, to move the label bounds\n\t * vertically, use <STYLE_VERTICAL_LABEL_POSITION>. Value is \"verticalAlign\".\n\t */\n\tSTYLE_VERTICAL_ALIGN: 'verticalAlign',\n\n\t/**\n\t * Variable: STYLE_LABEL_WIDTH\n\t * \n\t * Defines the key for the width of the label if the label position is not\n\t * center. Value is \"labelWidth\".\n\t */\n\tSTYLE_LABEL_WIDTH: 'labelWidth',\n\n\t/**\n\t * Variable: STYLE_LABEL_POSITION\n\t * \n\t * Defines the key for the horizontal label position of vertices. Possible\n\t * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>. Default is\n\t * <ALIGN_CENTER>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_LEFT> means the entire label bounds is\n\t * placed completely just to the left of the vertex, <ALIGN_RIGHT> means\n\t * adjust to the right and <ALIGN_CENTER> means the label bounds are\n\t * vertically aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label horizontally within the label bounds, use <STYLE_ALIGN>.\n\t * Value is \"labelPosition\".\n\t */\n\tSTYLE_LABEL_POSITION: 'labelPosition',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_LABEL_POSITION\n\t * \n\t * Defines the key for the vertical label position of vertices. Possible\n\t * values are <ALIGN_TOP>, <ALIGN_BOTTOM> and <ALIGN_MIDDLE>. Default is\n\t * <ALIGN_MIDDLE>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_TOP> means the entire label bounds is\n\t * placed completely just on the top of the vertex, <ALIGN_BOTTOM> means\n\t * adjust on the bottom and <ALIGN_MIDDLE> means the label bounds are\n\t * horizontally aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label vertically within the label bounds, use\n\t * <STYLE_VERTICAL_ALIGN>. Value is \"verticalLabelPosition\".\n\t */\n\tSTYLE_VERTICAL_LABEL_POSITION: 'verticalLabelPosition',\n\t\n\t/**\n\t * Variable: STYLE_IMAGE_ASPECT\n\t * \n\t * Defines the key for the image aspect style. Possible values are 0 (do\n\t * not preserve aspect) or 1 (keep aspect). This is only used in\n\t * <mxImageShape>. Default is 1. Value is \"imageAspect\".\n\t */\n\tSTYLE_IMAGE_ASPECT: 'imageAspect',\n\n\t/**\n\t * Variable: STYLE_IMAGE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. The value defines how any image in the\n\t * vertex label is aligned horizontally within the label bounds of a\n\t * <SHAPE_LABEL> shape. Value is \"imageAlign\".\n\t */\n\tSTYLE_IMAGE_ALIGN: 'imageAlign',\n\n\t/**\n\t * Variable: STYLE_IMAGE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. The value defines how\n\t * any image in the vertex label is aligned vertically within the label\n\t * bounds of a <SHAPE_LABEL> shape. Value is \"imageVerticalAlign\".\n\t */\n\tSTYLE_IMAGE_VERTICAL_ALIGN: 'imageVerticalAlign',\n\n\t/**\n\t * Variable: STYLE_GLASS\n\t * \n\t * Defines the key for the glass style. Possible values are 0 (disabled) and\n\t * 1(enabled). The default value is 0. This is used in <mxLabel>. Value is\n\t * \"glass\".\n\t */\n\tSTYLE_GLASS: 'glass',\n\n\t/**\n\t * Variable: STYLE_IMAGE\n\t * \n\t * Defines the key for the image style. Possible values are any image URL,\n\t * the type of the value is String. This is the path to the image that is\n\t * to be displayed within the label of a vertex. Data URLs should use the\n\t * following format: data:image/png,xyz where xyz is the base64 encoded\n\t * data (without the \"base64\"-prefix). Note that Data URLs are only\n\t * supported in modern browsers. Value is \"image\".\n\t */\n\tSTYLE_IMAGE: 'image',\n\n\t/**\n\t * Variable: STYLE_IMAGE_WIDTH\n\t * \n\t * Defines the key for the imageWidth style. The type of this value is\n\t * int, the value is the image width in pixels and must be greater than 0.\n\t * Value is \"imageWidth\".\n\t */\n\tSTYLE_IMAGE_WIDTH: 'imageWidth',\n\n\t/**\n\t * Variable: STYLE_IMAGE_HEIGHT\n\t * \n\t * Defines the key for the imageHeight style. The type of this value is\n\t * int, the value is the image height in pixels and must be greater than 0.\n\t * Value is \"imageHeight\".\n\t */\n\tSTYLE_IMAGE_HEIGHT: 'imageHeight',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BACKGROUND\n\t * \n\t * Defines the key for the image background color. This style is only used\n\t * in <mxImageShape>. Possible values are all HTML color names or HEX\n\t * codes. Value is \"imageBackground\".\n\t */\n\tSTYLE_IMAGE_BACKGROUND: 'imageBackground',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BORDER\n\t * \n\t * Defines the key for the image border color. This style is only used in\n\t * <mxImageShape>. Possible values are all HTML color names or HEX codes.\n\t * Value is \"imageBorder\".\n\t */\n\tSTYLE_IMAGE_BORDER: 'imageBorder',\n\n\t/**\n\t * Variable: STYLE_FLIPH\n\t * \n\t * Defines the key for the horizontal image flip. This style is only used\n\t * in <mxImageShape>. Possible values are 0 and 1. Default is 0. Value is\n\t * \"flipH\".\n\t */\n\tSTYLE_FLIPH: 'flipH',\n\n\t/**\n\t * Variable: STYLE_FLIPV\n\t * \n\t * Defines the key for the vertical flip. Possible values are 0 and 1.\n\t * Default is 0. Value is \"flipV\".\n\t */\n\tSTYLE_FLIPV: 'flipV',\n\n\t/**\n\t * Variable: STYLE_NOLABEL\n\t * \n\t * Defines the key for the noLabel style. If this is true then no label is\n\t * visible for a given cell. Possible values are true or false (1 or 0).\n\t * Default is false. Value is \"noLabel\".\n\t */\n\tSTYLE_NOLABEL: 'noLabel',\n\n\t/**\n\t * Variable: STYLE_NOEDGESTYLE\n\t * \n\t * Defines the key for the noEdgeStyle style. If this is true then no edge\n\t * style is applied for a given edge. Possible values are true or false\n\t * (1 or 0). Default is false. Value is \"noEdgeStyle\".\n\t */\n\tSTYLE_NOEDGESTYLE: 'noEdgeStyle',\n\n\t/**\n\t * Variable: STYLE_LABEL_BACKGROUNDCOLOR\n\t * \n\t * Defines the key for the label background color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBackgroundColor\".\n\t */\n\tSTYLE_LABEL_BACKGROUNDCOLOR: 'labelBackgroundColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_BORDERCOLOR\n\t * \n\t * Defines the key for the label border color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBorderColor\".\n\t */\n\tSTYLE_LABEL_BORDERCOLOR: 'labelBorderColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_PADDING\n\t * \n\t * Defines the key for the label padding, ie. the space between the label\n\t * border and the label. Value is \"labelPadding\".\n\t */\n\tSTYLE_LABEL_PADDING: 'labelPadding',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SHAPE\n\t * \n\t * Defines the key for the indicator shape used within an <mxLabel>.\n\t * Possible values are all SHAPE_* constants or the names of any new\n\t * shapes. The indicatorShape has precedence over the indicatorImage.\n\t * Value is \"indicatorShape\".\n\t */\n\tSTYLE_INDICATOR_SHAPE: 'indicatorShape',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_IMAGE\n\t * \n\t * Defines the key for the indicator image used within an <mxLabel>.\n\t * Possible values are all image URLs. The indicatorShape has\n\t * precedence over the indicatorImage. Value is \"indicatorImage\".\n\t */\n\tSTYLE_INDICATOR_IMAGE: 'indicatorImage',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_COLOR\n\t * \n\t * Defines the key for the indicatorColor style. Possible values are all\n\t * HTML color names or HEX codes, as well as the special 'swimlane' keyword\n\t * to refer to the color of the parent swimlane if one exists. Value is\n\t * \"indicatorColor\".\n\t */\n\tSTYLE_INDICATOR_COLOR: 'indicatorColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_STROKECOLOR\n\t * \n\t * Defines the key for the indicator stroke color in <mxLabel>.\n\t * Possible values are all color codes. Value is \"indicatorStrokeColor\".\n\t */\n\tSTYLE_INDICATOR_STROKECOLOR: 'indicatorStrokeColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_GRADIENTCOLOR\n\t * \n\t * Defines the key for the indicatorGradientColor style. Possible values\n\t * are all HTML color names or HEX codes. This style is only supported in\n\t * <SHAPE_LABEL> shapes. Value is \"indicatorGradientColor\".\n\t */\n\tSTYLE_INDICATOR_GRADIENTCOLOR: 'indicatorGradientColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SPACING\n\t * \n\t * The defines the key for the spacing between the label and the\n\t * indicator in <mxLabel>. Possible values are in pixels. Value is\n\t * \"indicatorSpacing\".\n\t */\n\tSTYLE_INDICATOR_SPACING: 'indicatorSpacing',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_WIDTH\n\t * \n\t * Defines the key for the indicator width. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorWidth\".\n\t */\n\tSTYLE_INDICATOR_WIDTH: 'indicatorWidth',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_HEIGHT\n\t * \n\t * Defines the key for the indicator height. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorHeight\".\n\t */\n\tSTYLE_INDICATOR_HEIGHT: 'indicatorHeight',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_DIRECTION\n\t * \n\t * Defines the key for the indicatorDirection style. The direction style is\n\t * used to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"indicatorDirection\".\n\t */\n\tSTYLE_INDICATOR_DIRECTION: 'indicatorDirection',\n\n\t/**\n\t * Variable: STYLE_SHADOW\n\t * \n\t * Defines the key for the shadow style. The type of the value is Boolean.\n\t * Value is \"shadow\".\n\t */\n\tSTYLE_SHADOW: 'shadow',\n\t\n\t/**\n\t * Variable: STYLE_SEGMENT\n\t * \n\t * Defines the key for the segment style. The type of this value is float\n\t * and the value represents the size of the horizontal segment of the\n\t * entity relation style. Default is ENTITY_SEGMENT. Value is \"segment\".\n\t */\n\tSTYLE_SEGMENT: 'segment',\n\t\n\t/**\n\t * Variable: STYLE_ENDARROW\n\t *\n\t * Defines the key for the end arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * Value is \"endArrow\".\n\t *\n\t * Example:\n\t * (code)\n\t * style[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\t * (end)\n\t */\n\tSTYLE_ENDARROW: 'endArrow',\n\n\t/**\n\t * Variable: STYLE_STARTARROW\n\t * \n\t * Defines the key for the start arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * See <STYLE_ENDARROW>. Value is \"startArrow\".\n\t */\n\tSTYLE_STARTARROW: 'startArrow',\n\n\t/**\n\t * Variable: STYLE_ENDSIZE\n\t * \n\t * Defines the key for the endSize style. The type of this value is numeric\n\t * and the value represents the size of the end marker in pixels. Value is\n\t * \"endSize\".\n\t */\n\tSTYLE_ENDSIZE: 'endSize',\n\n\t/**\n\t * Variable: STYLE_STARTSIZE\n\t * \n\t * Defines the key for the startSize style. The type of this value is\n\t * numeric and the value represents the size of the start marker or the\n\t * size of the swimlane title region depending on the shape it is used for.\n\t * Value is \"startSize\".\n\t */\n\tSTYLE_STARTSIZE: 'startSize',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_LINE\n\t * \n\t * Defines the key for the swimlaneLine style. This style specifies whether\n\t * the line between the title regio of a swimlane should be visible. Use 0\n\t * for hidden or 1 (default) for visible. Value is \"swimlaneLine\".\n\t */\n\tSTYLE_SWIMLANE_LINE: 'swimlaneLine',\n\n\t/**\n\t * Variable: STYLE_ENDFILL\n\t * \n\t * Defines the key for the endFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"endFill\".\n\t */\n\tSTYLE_ENDFILL: 'endFill',\n\n\t/**\n\t * Variable: STYLE_STARTFILL\n\t * \n\t * Defines the key for the startFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"startFill\".\n\t */\n\tSTYLE_STARTFILL: 'startFill',\n\n\t/**\n\t * Variable: STYLE_DASHED\n\t * \n\t * Defines the key for the dashed style. Use 0 (default) for non-dashed or 1\n\t * for dashed. Value is \"dashed\".\n\t */\n\tSTYLE_DASHED: 'dashed',\n\n\t/**\n\t * Defines the key for the dashed pattern style in SVG and image exports.\n\t * The type of this value is a space separated list of numbers that specify\n\t * a custom-defined dash pattern. Dash styles are defined in terms of the\n\t * length of the dash (the drawn part of the stroke) and the length of the\n\t * space between the dashes. The lengths are relative to the line width: a\n\t * length of \"1\" is equal to the line width. VML ignores this style and\n\t * uses dashStyle instead as defined in the VML specification. This style\n\t * is only used in the <mxConnector> shape. Value is \"dashPattern\".\n\t */\n\tSTYLE_DASH_PATTERN: 'dashPattern',\n\n\t/**\n\t * Variable: STYLE_FIX_DASH\n\t * \n\t * Defines the key for the fixDash style. Use 0 (default) for dash patterns\n\t * that depend on the linewidth and 1 for dash patterns that ignore the\n\t * line width. Value is \"fixDash\".\n\t */\n\tSTYLE_FIX_DASH: 'fixDash',\n\n\t/**\n\t * Variable: STYLE_ROUNDED\n\t * \n\t * Defines the key for the rounded style. The type of this value is\n\t * Boolean. For edges this determines whether or not joins between edges\n\t * segments are smoothed to a rounded finish. For vertices that have the\n\t * rectangle shape, this determines whether or not the rectangle is\n\t * rounded. Use 0 (default) for non-rounded or 1 for rounded. Value is\n\t * \"rounded\".\n\t */\n\tSTYLE_ROUNDED: 'rounded',\n\n\t/**\n\t * Variable: STYLE_CURVED\n\t * \n\t * Defines the key for the curved style. The type of this value is\n\t * Boolean. It is only applicable for connector shapes. Use 0 (default)\n\t * for non-curved or 1 for curved. Value is \"curved\".\n\t */\n\tSTYLE_CURVED: 'curved',\n\n\t/**\n\t * Variable: STYLE_ARCSIZE\n\t * \n\t * Defines the rounding factor for a rounded rectangle in percent (without\n\t * the percent sign). Possible values are between 0 and 100. If this value\n\t * is not specified then RECTANGLE_ROUNDING_FACTOR * 100 is used. For\n\t * edges, this defines the absolute size of rounded corners in pixels. If\n\t * this values is not specified then LINE_ARCSIZE is used.\n\t * (This style is only exported via <mxImageExport>.) Value is \"arcSize\".\n\t */\n\tSTYLE_ARCSIZE: 'arcSize',\n\n\t/**\n\t * Variable: STYLE_ABSOLUTE_ARCSIZE\n\t * \n\t * Defines the key for the absolute arc size style. This specifies if\n\t * arcSize for rectangles is abolute or relative. Possible values are 1\n\t * and 0 (default). Value is \"absoluteArcSize\".\n\t */\n\tSTYLE_ABSOLUTE_ARCSIZE: 'absoluteArcSize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the source perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the source connection point of\n\t * an edge and the perimeter of the source vertex in pixels. This style\n\t * only applies to edges. Value is \"sourcePerimeterSpacing\".\n\t */\n\tSTYLE_SOURCE_PERIMETER_SPACING: 'sourcePerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_TARGET_PERIMETER_SPACING\n\t * \n\t * Defines the key for the target perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the target connection point of\n\t * an edge and the perimeter of the target vertex in pixels. This style\n\t * only applies to edges. Value is \"targetPerimeterSpacing\".\n\t */\n\tSTYLE_TARGET_PERIMETER_SPACING: 'targetPerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the perimeter spacing. This is the distance between\n\t * the connection point and the perimeter in pixels. When used in a vertex\n\t * style, this applies to all incoming edges to floating ports (edges that\n\t * terminate on the perimeter of the vertex). When used in an edge style,\n\t * this spacing applies to the source and target separately, if they\n\t * terminate in floating ports (on the perimeter of the vertex). Value is\n\t * \"perimeterSpacing\".\n\t */\n\tSTYLE_PERIMETER_SPACING: 'perimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_SPACING\n\t * \n\t * Defines the key for the spacing. The value represents the spacing, in\n\t * pixels, added to each side of a label in a vertex (style applies to\n\t * vertices only). Value is \"spacing\".\n\t */\n\tSTYLE_SPACING: 'spacing',\n\n\t/**\n\t * Variable: STYLE_SPACING_TOP\n\t * \n\t * Defines the key for the spacingTop style. The value represents the\n\t * spacing, in pixels, added to the top side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingTop\".\n\t */\n\tSTYLE_SPACING_TOP: 'spacingTop',\n\n\t/**\n\t * Variable: STYLE_SPACING_LEFT\n\t * \n\t * Defines the key for the spacingLeft style. The value represents the\n\t * spacing, in pixels, added to the left side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingLeft\".\n\t */\n\tSTYLE_SPACING_LEFT: 'spacingLeft',\n\n\t/**\n\t * Variable: STYLE_SPACING_BOTTOM\n\t * \n\t * Defines the key for the spacingBottom style The value represents the\n\t * spacing, in pixels, added to the bottom side of a label in a vertex\n\t * (style applies to vertices only). Value is \"spacingBottom\".\n\t */\n\tSTYLE_SPACING_BOTTOM: 'spacingBottom',\n\n\t/**\n\t * Variable: STYLE_SPACING_RIGHT\n\t * \n\t * Defines the key for the spacingRight style The value represents the\n\t * spacing, in pixels, added to the right side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingRight\".\n\t */\n\tSTYLE_SPACING_RIGHT: 'spacingRight',\n\n\t/**\n\t * Variable: STYLE_HORIZONTAL\n\t * \n\t * Defines the key for the horizontal style. Possible values are\n\t * true or false. This value only applies to vertices. If the <STYLE_SHAPE>\n\t * is \"SHAPE_SWIMLANE\" a value of false indicates that the\n\t * swimlane should be drawn vertically, true indicates to draw it\n\t * horizontally. If the shape style does not indicate that this vertex is a\n\t * swimlane, this value affects only whether the label is drawn\n\t * horizontally or vertically. Value is \"horizontal\".\n\t */\n\tSTYLE_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: STYLE_DIRECTION\n\t * \n\t * Defines the key for the direction style. The direction style is used\n\t * to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"direction\".\n\t */\n\tSTYLE_DIRECTION: 'direction',\n\n\t/**\n\t * Variable: STYLE_ANCHOR_POINT_DIRECTION\n\t * \n\t * Defines the key for the anchorPointDirection style. The defines if the\n\t * direction style should be taken into account when computing the fixed\n\t * point location for connected edges. Default is 1 (yes). Set this to 0\n\t * to ignore the direction style for fixed connection points. Value is\n\t * \"anchorPointDirection\".\n\t */\n\tSTYLE_ANCHOR_POINT_DIRECTION: 'anchorPointDirection',\n\n\t/**\n\t * Variable: STYLE_ELBOW\n\t * \n\t * Defines the key for the elbow style. Possible values are\n\t * <ELBOW_HORIZONTAL> and <ELBOW_VERTICAL>. Default is <ELBOW_HORIZONTAL>.\n\t * This defines how the three segment orthogonal edge style leaves its\n\t * terminal vertices. The vertical style leaves the terminal vertices at\n\t * the top and bottom sides. Value is \"elbow\".\n\t */\n\tSTYLE_ELBOW: 'elbow',\n\n\t/**\n\t * Variable: STYLE_FONTCOLOR\n\t * \n\t * Defines the key for the fontColor style. Possible values are all HTML\n\t * color names or HEX codes. Value is \"fontColor\".\n\t */\n\tSTYLE_FONTCOLOR: 'fontColor',\n\n\t/**\n\t * Variable: STYLE_FONTFAMILY\n\t * \n\t * Defines the key for the fontFamily style. Possible values are names such\n\t * as Arial; Dialog; Verdana; Times New Roman. The value is of type String.\n\t * Value is fontFamily.\n\t */\n\tSTYLE_FONTFAMILY: 'fontFamily',\n\n\t/**\n\t * Variable: STYLE_FONTSIZE\n\t * \n\t * Defines the key for the fontSize style (in px). The type of the value\n\t * is int. Value is \"fontSize\".\n\t */\n\tSTYLE_FONTSIZE: 'fontSize',\n\n\t/**\n\t * Variable: STYLE_FONTSTYLE\n\t * \n\t * Defines the key for the fontStyle style. Values may be any logical AND\n\t * (sum) of <FONT_BOLD>, <FONT_ITALIC> and <FONT_UNDERLINE>.\n\t * The type of the value is int. Value is \"fontStyle\".\n\t */\n\tSTYLE_FONTSTYLE: 'fontStyle',\n\t\n\t/**\n\t * Variable: STYLE_ASPECT\n\t * \n\t * Defines the key for the aspect style. Possible values are empty or fixed.\n\t * If fixed is used then the aspect ratio of the cell will be maintained\n\t * when resizing. Default is empty. Value is \"aspect\".\n\t */\n\tSTYLE_ASPECT: 'aspect',\n\n\t/**\n\t * Variable: STYLE_AUTOSIZE\n\t * \n\t * Defines the key for the autosize style. This specifies if a cell should be\n\t * resized automatically if the value has changed. Possible values are 0 or 1.\n\t * Default is 0. See <mxGraph.isAutoSizeCell>. This is normally combined with\n\t * <STYLE_RESIZABLE> to disable manual sizing. Value is \"autosize\".\n\t */\n\tSTYLE_AUTOSIZE: 'autosize',\n\n\t/**\n\t * Variable: STYLE_FOLDABLE\n\t * \n\t * Defines the key for the foldable style. This specifies if a cell is foldable\n\t * using a folding icon. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellFoldable>. Value is \"foldable\".\n\t */\n\tSTYLE_FOLDABLE: 'foldable',\n\n\t/**\n\t * Variable: STYLE_EDITABLE\n\t * \n\t * Defines the key for the editable style. This specifies if the value of\n\t * a cell can be edited using the in-place editor. Possible values are 0 or\n\t * 1. Default is 1. See <mxGraph.isCellEditable>. Value is \"editable\".\n\t */\n\tSTYLE_EDITABLE: 'editable',\n\n\t/**\n\t * Variable: STYLE_BACKGROUND_OUTLINE\n\t * \n\t * Defines the key for the backgroundOutline style. This specifies if a\n\t * only the background of a cell should be painted when it is highlighted.\n\t * Possible values are 0 or 1. Default is 0. Value is \"backgroundOutline\".\n\t */\n\tSTYLE_BACKGROUND_OUTLINE: 'backgroundOutline',\n\n\t/**\n\t * Variable: STYLE_BENDABLE\n\t * \n\t * Defines the key for the bendable style. This specifies if the control\n\t * points of an edge can be moved. Possible values are 0 or 1. Default is\n\t * 1. See <mxGraph.isCellBendable>. Value is \"bendable\".\n\t */\n\tSTYLE_BENDABLE: 'bendable',\n\n\t/**\n\t * Variable: STYLE_MOVABLE\n\t * \n\t * Defines the key for the movable style. This specifies if a cell can\n\t * be moved. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellMovable>. Value is \"movable\".\n\t */\n\tSTYLE_MOVABLE: 'movable',\n\n\t/**\n\t * Variable: STYLE_RESIZABLE\n\t * \n\t * Defines the key for the resizable style. This specifies if a cell can\n\t * be resized. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellResizable>. Value is \"resizable\".\n\t */\n\tSTYLE_RESIZABLE: 'resizable',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeWidth style. This specifies if a cell's\n\t * width is resized if the parent is resized. If this is 1 then the width\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's width will not be resized. Default is not defined. Value\n\t * is \"resizeWidth\".\n\t */\n\tSTYLE_RESIZE_WIDTH: 'resizeWidth',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeHeight style. This specifies if a cell's\n\t * height if resize if the parent is resized. If this is 1 then the height\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's height will not be resized. Default is not defined. Value\n\t * is \"resizeHeight\".\n\t */\n\tSTYLE_RESIZE_HEIGHT: 'resizeHeight',\n\n\t/**\n\t * Variable: STYLE_ROTATABLE\n\t * \n\t * Defines the key for the rotatable style. This specifies if a cell can\n\t * be rotated. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellRotatable>. Value is \"rotatable\".\n\t */\n\tSTYLE_ROTATABLE: 'rotatable',\n\n\t/**\n\t * Variable: STYLE_CLONEABLE\n\t * \n\t * Defines the key for the cloneable style. This specifies if a cell can\n\t * be cloned. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellCloneable>. Value is \"cloneable\".\n\t */\n\tSTYLE_CLONEABLE: 'cloneable',\n\n\t/**\n\t * Variable: STYLE_DELETABLE\n\t * \n\t * Defines the key for the deletable style. This specifies if a cell can be\n\t * deleted. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellDeletable>. Value is \"deletable\".\n\t */\n\tSTYLE_DELETABLE: 'deletable',\n\n\t/**\n\t * Variable: STYLE_SHAPE\n\t * \n\t * Defines the key for the shape. Possible values are all constants with\n\t * a SHAPE-prefix or any newly defined shape names. Value is \"shape\".\n\t */\n\tSTYLE_SHAPE: 'shape',\n\n\t/**\n\t * Variable: STYLE_EDGE\n\t * \n\t * Defines the key for the edge style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"edgeStyle\".\n\t */\n\tSTYLE_EDGE: 'edgeStyle',\n\n\t/**\n\t * Variable: STYLE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are all numeric values or \"auto\".\n\t * Jetty size is the minimum length of the orthogonal segment before\n\t * it attaches to a shape.\n\t * Value is \"jettySize\".\n\t */\n\tSTYLE_JETTY_SIZE: 'jettySize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"sourceJettySize\".\n\t */\n\tSTYLE_SOURCE_JETTY_SIZE: 'sourceJettySize',\n\n\t/**\n\t * Variable: targetJettySize\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"targetJettySize\".\n\t */\n\tSTYLE_TARGET_JETTY_SIZE: 'targetJettySize',\n\n\t/**\n\t * Variable: STYLE_LOOP\n\t * \n\t * Defines the key for the loop style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"loopStyle\". Default is\n\t * <mxGraph.defaultLoopStylean>.\n\t */\n\tSTYLE_LOOP: 'loopStyle',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL_LOOP\n\t * \n\t * Defines the key for the orthogonal loop style. Possible values are 0 and\n\t * 1. Default is 0. Value is \"orthogonalLoop\". Use this style to specify\n\t * if loops with no waypoints and defined anchor points should be routed\n\t * using <STYLE_LOOP> or not routed.\n\t */\n\tSTYLE_ORTHOGONAL_LOOP: 'orthogonalLoop',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_X\n\t * \n\t * Defines the key for the horizontal routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterX\".\n\t */\n\tSTYLE_ROUTING_CENTER_X: 'routingCenterX',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_Y\n\t * \n\t * Defines the key for the vertical routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterY\".\n\t */\n\tSTYLE_ROUTING_CENTER_Y: 'routingCenterY',\n\n\t/**\n\t * Variable: FONT_BOLD\n\t * \n\t * Constant for bold fonts. Default is 1.\n\t */\n\tFONT_BOLD: 1,\n\n\t/**\n\t * Variable: FONT_ITALIC\n\t * \n\t * Constant for italic fonts. Default is 2.\n\t */\n\tFONT_ITALIC: 2,\n\n\t/**\n\t * Variable: FONT_UNDERLINE\n\t * \n\t * Constant for underlined fonts. Default is 4.\n\t */\n\tFONT_UNDERLINE: 4,\n\n\t/**\n\t * Variable: FONT_STRIKETHROUGH\n\t * \n\t * Constant for strikthrough fonts. Default is 8.\n\t */\n\tFONT_STRIKETHROUGH: 8,\n\t\n\t/**\n\t * Variable: SHAPE_RECTANGLE\n\t * \n\t * Name under which <mxRectangleShape> is registered in <mxCellRenderer>.\n\t * Default is rectangle.\n\t */\n\tSHAPE_RECTANGLE: 'rectangle',\n\n\t/**\n\t * Variable: SHAPE_ELLIPSE\n\t * \n\t * Name under which <mxEllipse> is registered in <mxCellRenderer>.\n\t * Default is ellipse.\n\t */\n\tSHAPE_ELLIPSE: 'ellipse',\n\n\t/**\n\t * Variable: SHAPE_DOUBLE_ELLIPSE\n\t * \n\t * Name under which <mxDoubleEllipse> is registered in <mxCellRenderer>.\n\t * Default is doubleEllipse.\n\t */\n\tSHAPE_DOUBLE_ELLIPSE: 'doubleEllipse',\n\n\t/**\n\t * Variable: SHAPE_RHOMBUS\n\t * \n\t * Name under which <mxRhombus> is registered in <mxCellRenderer>.\n\t * Default is rhombus.\n\t */\n\tSHAPE_RHOMBUS: 'rhombus',\n\n\t/**\n\t * Variable: SHAPE_LINE\n\t * \n\t * Name under which <mxLine> is registered in <mxCellRenderer>.\n\t * Default is line.\n\t */\n\tSHAPE_LINE: 'line',\n\n\t/**\n\t * Variable: SHAPE_IMAGE\n\t * \n\t * Name under which <mxImageShape> is registered in <mxCellRenderer>.\n\t * Default is image.\n\t */\n\tSHAPE_IMAGE: 'image',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW\n\t * \n\t * Name under which <mxArrow> is registered in <mxCellRenderer>.\n\t * Default is arrow.\n\t */\n\tSHAPE_ARROW: 'arrow',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW_CONNECTOR\n\t * \n\t * Name under which <mxArrowConnector> is registered in <mxCellRenderer>.\n\t * Default is arrowConnector.\n\t */\n\tSHAPE_ARROW_CONNECTOR: 'arrowConnector',\n\t\n\t/**\n\t * Variable: SHAPE_LABEL\n\t * \n\t * Name under which <mxLabel> is registered in <mxCellRenderer>.\n\t * Default is label.\n\t */\n\tSHAPE_LABEL: 'label',\n\t\n\t/**\n\t * Variable: SHAPE_CYLINDER\n\t * \n\t * Name under which <mxCylinder> is registered in <mxCellRenderer>.\n\t * Default is cylinder.\n\t */\n\tSHAPE_CYLINDER: 'cylinder',\n\t\n\t/**\n\t * Variable: SHAPE_SWIMLANE\n\t * \n\t * Name under which <mxSwimlane> is registered in <mxCellRenderer>.\n\t * Default is swimlane.\n\t */\n\tSHAPE_SWIMLANE: 'swimlane',\n\t\t\n\t/**\n\t * Variable: SHAPE_CONNECTOR\n\t * \n\t * Name under which <mxConnector> is registered in <mxCellRenderer>.\n\t * Default is connector.\n\t */\n\tSHAPE_CONNECTOR: 'connector',\n\n\t/**\n\t * Variable: SHAPE_ACTOR\n\t * \n\t * Name under which <mxActor> is registered in <mxCellRenderer>.\n\t * Default is actor.\n\t */\n\tSHAPE_ACTOR: 'actor',\n\t\t\n\t/**\n\t * Variable: SHAPE_CLOUD\n\t * \n\t * Name under which <mxCloud> is registered in <mxCellRenderer>.\n\t * Default is cloud.\n\t */\n\tSHAPE_CLOUD: 'cloud',\n\t\t\n\t/**\n\t * Variable: SHAPE_TRIANGLE\n\t * \n\t * Name under which <mxTriangle> is registered in <mxCellRenderer>.\n\t * Default is triangle.\n\t */\n\tSHAPE_TRIANGLE: 'triangle',\n\t\t\n\t/**\n\t * Variable: SHAPE_HEXAGON\n\t * \n\t * Name under which <mxHexagon> is registered in <mxCellRenderer>.\n\t * Default is hexagon.\n\t */\n\tSHAPE_HEXAGON: 'hexagon',\n\n\t/**\n\t * Variable: ARROW_CLASSIC\n\t * \n\t * Constant for classic arrow markers.\n\t */\n\tARROW_CLASSIC: 'classic',\n\n\t/**\n\t * Variable: ARROW_CLASSIC_THIN\n\t * \n\t * Constant for thin classic arrow markers.\n\t */\n\tARROW_CLASSIC_THIN: 'classicThin',\n\n\t/**\n\t * Variable: ARROW_BLOCK\n\t * \n\t * Constant for block arrow markers.\n\t */\n\tARROW_BLOCK: 'block',\n\n\t/**\n\t * Variable: ARROW_BLOCK_THIN\n\t * \n\t * Constant for thin block arrow markers.\n\t */\n\tARROW_BLOCK_THIN: 'blockThin',\n\n\t/**\n\t * Variable: ARROW_OPEN\n\t * \n\t * Constant for open arrow markers.\n\t */\n\tARROW_OPEN: 'open',\n\n\t/**\n\t * Variable: ARROW_OPEN_THIN\n\t * \n\t * Constant for thin open arrow markers.\n\t */\n\tARROW_OPEN_THIN: 'openThin',\n\n\t/**\n\t * Variable: ARROW_OVAL\n\t * \n\t * Constant for oval arrow markers.\n\t */\n\tARROW_OVAL: 'oval',\n\n\t/**\n\t * Variable: ARROW_DIAMOND\n\t * \n\t * Constant for diamond arrow markers.\n\t */\n\tARROW_DIAMOND: 'diamond',\n\n\t/**\n\t * Variable: ARROW_DIAMOND_THIN\n\t * \n\t * Constant for thin diamond arrow markers.\n\t */\n\tARROW_DIAMOND_THIN: 'diamondThin',\n\n\t/**\n\t * Variable: ALIGN_LEFT\n\t * \n\t * Constant for left horizontal alignment. Default is left.\n\t */\n\tALIGN_LEFT: 'left',\n\n\t/**\n\t * Variable: ALIGN_CENTER\n\t * \n\t * Constant for center horizontal alignment. Default is center.\n\t */\n\tALIGN_CENTER: 'center',\n\n\t/**\n\t * Variable: ALIGN_RIGHT\n\t * \n\t * Constant for right horizontal alignment. Default is right.\n\t */\n\tALIGN_RIGHT: 'right',\n\n\t/**\n\t * Variable: ALIGN_TOP\n\t * \n\t * Constant for top vertical alignment. Default is top.\n\t */\n\tALIGN_TOP: 'top',\n\n\t/**\n\t * Variable: ALIGN_MIDDLE\n\t * \n\t * Constant for middle vertical alignment. Default is middle.\n\t */\n\tALIGN_MIDDLE: 'middle',\n\n\t/**\n\t * Variable: ALIGN_BOTTOM\n\t * \n\t * Constant for bottom vertical alignment. Default is bottom.\n\t */\n\tALIGN_BOTTOM: 'bottom',\n\n\t/**\n\t * Variable: DIRECTION_NORTH\n\t * \n\t * Constant for direction north. Default is north.\n\t */\n\tDIRECTION_NORTH: 'north',\n\n\t/**\n\t * Variable: DIRECTION_SOUTH\n\t * \n\t * Constant for direction south. Default is south.\n\t */\n\tDIRECTION_SOUTH: 'south',\n\n\t/**\n\t * Variable: DIRECTION_EAST\n\t * \n\t * Constant for direction east. Default is east.\n\t */\n\tDIRECTION_EAST: 'east',\n\n\t/**\n\t * Variable: DIRECTION_WEST\n\t * \n\t * Constant for direction west. Default is west.\n\t */\n\tDIRECTION_WEST: 'west',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_DEFAULT\n\t * \n\t * Constant for text direction default. Default is an empty string. Use\n\t * this value to use the default text direction of the operating system. \n\t */\n\tTEXT_DIRECTION_DEFAULT: '',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_AUTO\n\t * \n\t * Constant for text direction automatic. Default is auto. Use this value\n\t * to find the direction for a given text with <mxText.getAutoDirection>. \n\t */\n\tTEXT_DIRECTION_AUTO: 'auto',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_LTR\n\t * \n\t * Constant for text direction left to right. Default is ltr. Use this\n\t * value for left to right text direction.\n\t */\n\tTEXT_DIRECTION_LTR: 'ltr',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_RTL\n\t * \n\t * Constant for text direction right to left. Default is rtl. Use this\n\t * value for right to left text direction.\n\t */\n\tTEXT_DIRECTION_RTL: 'rtl',\n\n\t/**\n\t * Variable: DIRECTION_MASK_NONE\n\t * \n\t * Constant for no direction.\n\t */\n\tDIRECTION_MASK_NONE: 0,\n\n\t/**\n\t * Variable: DIRECTION_MASK_WEST\n\t * \n\t * Bitwise mask for west direction.\n\t */\n\tDIRECTION_MASK_WEST: 1,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_NORTH\n\t * \n\t * Bitwise mask for north direction.\n\t */\n\tDIRECTION_MASK_NORTH: 2,\n\n\t/**\n\t * Variable: DIRECTION_MASK_SOUTH\n\t * \n\t * Bitwise mask for south direction.\n\t */\n\tDIRECTION_MASK_SOUTH: 4,\n\n\t/**\n\t * Variable: DIRECTION_MASK_EAST\n\t * \n\t * Bitwise mask for east direction.\n\t */\n\tDIRECTION_MASK_EAST: 8,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_ALL\n\t * \n\t * Bitwise mask for all directions.\n\t */\n\tDIRECTION_MASK_ALL: 15,\n\n\t/**\n\t * Variable: ELBOW_VERTICAL\n\t * \n\t * Constant for elbow vertical. Default is horizontal.\n\t */\n\tELBOW_VERTICAL: 'vertical',\n\n\t/**\n\t * Variable: ELBOW_HORIZONTAL\n\t * \n\t * Constant for elbow horizontal. Default is horizontal.\n\t */\n\tELBOW_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: EDGESTYLE_ELBOW\n\t * \n\t * Name of the elbow edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ELBOW: 'elbowEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ENTITY_RELATION\n\t * \n\t * Name of the entity relation edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ENTITY_RELATION: 'entityRelationEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_LOOP\n\t * \n\t * Name of the loop edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_LOOP: 'loopEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SIDETOSIDE\n\t * \n\t * Name of the side to side edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SIDETOSIDE: 'sideToSideEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_TOPTOBOTTOM\n\t * \n\t * Name of the top to bottom edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_TOPTOBOTTOM: 'topToBottomEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ORTHOGONAL\n\t * \n\t * Name of the generic orthogonal edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ORTHOGONAL: 'orthogonalEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SEGMENT\n\t * \n\t * Name of the generic segment edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SEGMENT: 'segmentEdgeStyle',\n \n\t/**\n\t * Variable: PERIMETER_ELLIPSE\n\t * \n\t * Name of the ellipse perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_ELLIPSE: 'ellipsePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RECTANGLE\n\t *\n\t * Name of the rectangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RECTANGLE: 'rectanglePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RHOMBUS\n\t * \n\t * Name of the rhombus perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RHOMBUS: 'rhombusPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_HEXAGON\n\t * \n\t * Name of the hexagon perimeter. Can be used as a string value \n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_HEXAGON: 'hexagonPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_TRIANGLE\n\t * \n\t * Name of the triangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_TRIANGLE: 'trianglePerimeter'\n};\n\n__mxOutput.mxConstants = typeof mxConstants !== 'undefined' ? mxConstants : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventObject\n * \n * The mxEventObject is a wrapper for all properties of a single event.\n * Additionally, it also offers functions to consume the event and check if it\n * was consumed as follows:\n * \n * (code)\n * evt.consume();\n * INV: evt.isConsumed() == true\n * (end)\n * \n * Constructor: mxEventObject\n *\n * Constructs a new event object with the specified name. An optional\n * sequence of key, value pairs can be appended to define properties.\n * \n * Example:\n *\n * (code)\n * new mxEventObject(\"eventName\", key1, val1, .., keyN, valN)\n * (end)\n */\nfunction mxEventObject(name)\n{\n\tthis.name = name;\n\tthis.properties = [];\n\t\n\tfor (var i = 1; i < arguments.length; i += 2)\n\t{\n\t\tif (arguments[i + 1] != null)\n\t\t{\n\t\t\tthis.properties[arguments[i]] = arguments[i + 1];\n\t\t}\n\t}\n};\n\n/**\n * Variable: name\n *\n * Holds the name.\n */\nmxEventObject.prototype.name = null;\n\n/**\n * Variable: properties\n *\n * Holds the properties as an associative array.\n */\nmxEventObject.prototype.properties = null;\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state. Default is false.\n */\nmxEventObject.prototype.consumed = false;\n\n/**\n * Function: getName\n * \n * Returns <name>.\n */\nmxEventObject.prototype.getName = function()\n{\n\treturn this.name;\n};\n\n/**\n * Function: getProperties\n * \n * Returns <properties>.\n */\nmxEventObject.prototype.getProperties = function()\n{\n\treturn this.properties;\n};\n\n/**\n * Function: getProperty\n * \n * Returns the property for the given key.\n */\nmxEventObject.prototype.getProperty = function(key)\n{\n\treturn this.properties[key];\n};\n\n/**\n * Function: isConsumed\n *\n * Returns true if the event has been consumed.\n */\nmxEventObject.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Consumes the event.\n */\nmxEventObject.prototype.consume = function()\n{\n\tthis.consumed = true;\n};\n\n__mxOutput.mxEventObject = typeof mxEventObject !== 'undefined' ? mxEventObject : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMouseEvent\n * \n * Base class for all mouse events in mxGraph. A listener for this event should\n * implement the following methods:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   mouseDown: function(sender, evt)\n *   {\n *     mxLog.debug('mouseDown');\n *   },\n *   mouseMove: function(sender, evt)\n *   {\n *     mxLog.debug('mouseMove');\n *   },\n *   mouseUp: function(sender, evt)\n *   {\n *     mxLog.debug('mouseUp');\n *   }\n * });\n * (end)\n * \n * Constructor: mxMouseEvent\n *\n * Constructs a new event object for the given arguments.\n * \n * Parameters:\n * \n * evt - Native mouse event.\n * state - Optional <mxCellState> under the mouse.\n * \n */\nfunction mxMouseEvent(evt, state)\n{\n\tthis.evt = evt;\n\tthis.state = state;\n\tthis.sourceState = state;\n};\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state of this event.\n */\nmxMouseEvent.prototype.consumed = false;\n\n/**\n * Variable: evt\n *\n * Holds the inner event object.\n */\nmxMouseEvent.prototype.evt = null;\n\n/**\n * Variable: graphX\n *\n * Holds the x-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphX = null;\n\n/**\n * Variable: graphY\n *\n * Holds the y-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphY = null;\n\n/**\n * Variable: state\n *\n * Holds the optional <mxCellState> associated with this event.\n */\nmxMouseEvent.prototype.state = null;\n\n/**\n * Variable: sourceState\n * \n * Holds the <mxCellState> that was passed to the constructor. This can be\n * different from <state> depending on the result of <mxGraph.getEventState>.\n */\nmxMouseEvent.prototype.sourceState = null;\n\n/**\n * Function: getEvent\n * \n * Returns <evt>.\n */\nmxMouseEvent.prototype.getEvent = function()\n{\n\treturn this.evt;\n};\n\n/**\n * Function: getSource\n * \n * Returns the target DOM element using <mxEvent.getSource> for <evt>.\n */\nmxMouseEvent.prototype.getSource = function()\n{\n\treturn mxEvent.getSource(this.evt);\n};\n\n/**\n * Function: isSource\n * \n * Returns true if the given <mxShape> is the source of <evt>.\n */\nmxMouseEvent.prototype.isSource = function(shape)\n{\n\tif (shape != null)\n\t{\n\t\treturn mxUtils.isAncestorNode(shape.node, this.getSource());\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getX\n * \n * Returns <evt.clientX>.\n */\nmxMouseEvent.prototype.getX = function()\n{\n\treturn mxEvent.getClientX(this.getEvent());\n};\n\n/**\n * Function: getY\n * \n * Returns <evt.clientY>.\n */\nmxMouseEvent.prototype.getY = function()\n{\n\treturn mxEvent.getClientY(this.getEvent());\n};\n\n/**\n * Function: getGraphX\n * \n * Returns <graphX>.\n */\nmxMouseEvent.prototype.getGraphX = function()\n{\n\treturn this.graphX;\n};\n\n/**\n * Function: getGraphY\n * \n * Returns <graphY>.\n */\nmxMouseEvent.prototype.getGraphY = function()\n{\n\treturn this.graphY;\n};\n\n/**\n * Function: getState\n * \n * Returns <state>.\n */\nmxMouseEvent.prototype.getState = function()\n{\n\treturn this.state;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> in <state> is not null.\n */\nmxMouseEvent.prototype.getCell = function()\n{\n\tvar state = this.getState();\n\t\n\tif (state != null)\n\t{\n\t\treturn state.cell;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isPopupTrigger\n *\n * Returns true if the event is a popup trigger.\n */\nmxMouseEvent.prototype.isPopupTrigger = function()\n{\n\treturn mxEvent.isPopupTrigger(this.getEvent());\n};\n\n/**\n * Function: isConsumed\n *\n * Returns <consumed>.\n */\nmxMouseEvent.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Sets <consumed> to true and invokes preventDefault on the native event\n * if such a method is defined. This is used mainly to avoid the cursor from\n * being changed to a text cursor in Webkit. You can use the preventDefault\n * flag to disable this functionality.\n * \n * Parameters:\n * \n * preventDefault - Specifies if the native event should be canceled. Default\n * is true.\n */\nmxMouseEvent.prototype.consume = function(preventDefault)\n{\n\tpreventDefault = (preventDefault != null) ? preventDefault :\n\t\t(this.evt.touches != null || mxEvent.isMouseEvent(this.evt));\n\t\n\tif (preventDefault && this.evt.preventDefault)\n\t{\n\t\tthis.evt.preventDefault();\n\t}\n\n\t// Workaround for images being dragged in IE\n\t// Does not change returnValue in Opera\n\tif (mxClient.IS_IE)\n\t{\n\t\tthis.evt.returnValue = true;\n\t}\n\n\t// Sets local consumed state\n\tthis.consumed = true;\n};\n\n__mxOutput.mxMouseEvent = typeof mxMouseEvent !== 'undefined' ? mxMouseEvent : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventSource\n *\n * Base class for objects that dispatch named events. To create a subclass that\n * inherits from mxEventSource, the following code is used.\n *\n * (code)\n * function MyClass() { };\n *\n * MyClass.prototype = new mxEventSource();\n * MyClass.prototype.constructor = MyClass;\n * (end)\n *\n * Known Subclasses:\n *\n * <mxGraphModel>, <mxGraph>, <mxGraphView>, <mxEditor>, <mxCellOverlay>,\n * <mxToolbar>, <mxWindow>\n * \n * Constructor: mxEventSource\n *\n * Constructs a new event source.\n */\nfunction mxEventSource(eventSource)\n{\n\tthis.setEventSource(eventSource);\n};\n\n/**\n * Variable: eventListeners\n *\n * Holds the event names and associated listeners in an array. The array\n * contains the event name followed by the respective listener for each\n * registered listener.\n */\nmxEventSource.prototype.eventListeners = null;\n\n/**\n * Variable: eventsEnabled\n *\n * Specifies if events can be fired. Default is true.\n */\nmxEventSource.prototype.eventsEnabled = true;\n\n/**\n * Variable: eventSource\n *\n * Optional source for events. Default is null.\n */\nmxEventSource.prototype.eventSource = null;\n\n/**\n * Function: isEventsEnabled\n * \n * Returns <eventsEnabled>.\n */\nmxEventSource.prototype.isEventsEnabled = function()\n{\n\treturn this.eventsEnabled;\n};\n\n/**\n * Function: setEventsEnabled\n * \n * Sets <eventsEnabled>.\n */\nmxEventSource.prototype.setEventsEnabled = function(value)\n{\n\tthis.eventsEnabled = value;\n};\n\n/**\n * Function: getEventSource\n * \n * Returns <eventSource>.\n */\nmxEventSource.prototype.getEventSource = function()\n{\n\treturn this.eventSource;\n};\n\n/**\n * Function: setEventSource\n * \n * Sets <eventSource>.\n */\nmxEventSource.prototype.setEventSource = function(value)\n{\n\tthis.eventSource = value;\n};\n\n/**\n * Function: addListener\n *\n * Binds the specified function to the given event name. If no event name\n * is given, then the listener is registered for all events.\n * \n * The parameters of the listener are the sender and an <mxEventObject>.\n */\nmxEventSource.prototype.addListener = function(name, funct)\n{\n\tif (this.eventListeners == null)\n\t{\n\t\tthis.eventListeners = [];\n\t}\n\t\n\tthis.eventListeners.push(name);\n\tthis.eventListeners.push(funct);\n};\n\n/**\n * Function: removeListener\n *\n * Removes all occurrences of the given listener from <eventListeners>.\n */\nmxEventSource.prototype.removeListener = function(funct)\n{\n\tif (this.eventListeners != null)\n\t{\n\t\tvar i = 0;\n\t\t\n\t\twhile (i < this.eventListeners.length)\n\t\t{\n\t\t\tif (this.eventListeners[i+1] == funct)\n\t\t\t{\n\t\t\t\tthis.eventListeners.splice(i, 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fireEvent\n *\n * Dispatches the given event to the listeners which are registered for\n * the event. The sender argument is optional. The current execution scope\n * (\"this\") is used for the listener invocation (see <mxUtils.bind>).\n *\n * Example:\n *\n * (code)\n * fireEvent(new mxEventObject(\"eventName\", key1, val1, .., keyN, valN))\n * (end)\n * \n * Parameters:\n *\n * evt - <mxEventObject> that represents the event.\n * sender - Optional sender to be passed to the listener. Default value is\n * the return value of <getEventSource>.\n */\nmxEventSource.prototype.fireEvent = function(evt, sender)\n{\n\tif (this.eventListeners != null && this.isEventsEnabled())\n\t{\n\t\tif (evt == null)\n\t\t{\n\t\t\tevt = new mxEventObject();\n\t\t}\n\t\t\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this.getEventSource();\n\t\t}\n\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this;\n\t\t}\n\n\t\tvar args = [sender, evt];\n\t\t\n\t\tfor (var i = 0; i < this.eventListeners.length; i += 2)\n\t\t{\n\t\t\tvar listen = this.eventListeners[i];\n\t\t\t\n\t\t\tif (listen == null || listen == evt.getName())\n\t\t\t{\n\t\t\t\tthis.eventListeners[i+1].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEventSource = typeof mxEventSource !== 'undefined' ? mxEventSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEvent =\n{\n\n\t/**\n\t * Class: mxEvent\n\t * \n\t * Cross-browser DOM event support. For internal event handling,\n\t * <mxEventSource> and the graph event dispatch loop in <mxGraph> are used.\n\t * \n\t * Memory Leaks:\n\t * \n\t * Use this class for adding and removing listeners to/from DOM nodes. The\n\t * <removeAllListeners> function is provided to remove all listeners that\n\t * have been added using <addListener>. The function should be invoked when\n\t * the last reference is removed in the JavaScript code, typically when the\n\t * referenced DOM node is removed from the DOM.\n\t *\n\t * Function: addListener\n\t * \n\t * Binds the function to the specified event on the given element. Use\n\t * <mxUtils.bind> in order to bind the \"this\" keyword inside the function\n\t * to a given execution scope.\n\t */\n\taddListener: function()\n\t{\n\t\tvar updateListenerList = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList == null)\n\t\t\t{\n\t\t\t\telement.mxListenerList = [];\n\t\t\t}\n\t\t\t\n\t\t\tvar entry = {name: eventName, f: funct};\n\t\t\telement.mxListenerList.push(entry);\n\t\t};\n\t\t\n\t\tif (window.addEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.addEventListener(eventName, funct, false);\n\t\t\t\tupdateListenerList(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.attachEvent('on' + eventName, funct);\n\t\t\t\tupdateListenerList(element, eventName, funct);\t\t\t\t\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeListener\n\t *\n\t * Removes the specified listener from the given element.\n\t */\n\tremoveListener: function()\n\t{\n\t\tvar updateListener = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList != null)\n\t\t\t{\n\t\t\t\tvar listenerCount = element.mxListenerList.length;\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < listenerCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar entry = element.mxListenerList[i];\n\t\t\t\t\t\n\t\t\t\t\tif (entry.f == funct)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.mxListenerList.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (element.mxListenerList.length == 0)\n\t\t\t\t{\n\t\t\t\t\telement.mxListenerList = null;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tif (window.removeEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.removeEventListener(eventName, funct, false);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.detachEvent('on' + eventName, funct);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeAllListeners\n\t * \n\t * Removes all listeners from the given element.\n\t */\n\tremoveAllListeners: function(element)\n\t{\n\t\tvar list = element.mxListenerList;\n\n\t\tif (list != null)\n\t\t{\n\t\t\twhile (list.length > 0)\n\t\t\t{\n\t\t\t\tvar entry = list[0];\n\t\t\t\tmxEvent.removeListener(element, entry.name, entry.f);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: addGestureListeners\n\t * \n\t * Adds the given listeners for touch, mouse and/or pointer events. If\n\t * <mxClient.IS_POINTER> is true then pointer events will be registered,\n\t * else the respective mouse events will be registered. If <mxClient.IS_POINTER>\n\t * is false and <mxClient.IS_TOUCH> is true then the respective touch events\n\t * will be registered as well as the mouse events.\n\t */\n\taddGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: removeGestureListeners\n\t * \n\t * Removes the given listeners from mousedown, mousemove, mouseup and the\n\t * respective touch events if <mxClient.IS_TOUCH> is true.\n\t */\n\tremoveGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: redirectMouseEvents\n\t *\n\t * Redirects the mouse events from the given DOM node to the graph dispatch\n\t * loop using the event and given state as event arguments. State can\n\t * either be an instance of <mxCellState> or a function that returns an\n\t * <mxCellState>. The down, move, up and dblClick arguments are optional\n\t * functions that take the trigger event as arguments and replace the\n\t * default behaviour.\n\t */\n\tredirectMouseEvents: function(node, graph, state, down, move, up, dblClick)\n\t{\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\treturn (typeof(state) == 'function') ? state(evt) : state;\n\t\t};\n\t\t\n\t\tmxEvent.addGestureListeners(node, function (evt)\n\t\t{\n\t\t\tif (down != null)\n\t\t\t{\n\t\t\t\tdown(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (move != null)\n\t\t\t{\n\t\t\t\tmove(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (up != null)\n\t\t\t{\n\t\t\t\tup(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.addListener(node, 'dblclick', function (evt)\n\t\t{\n\t\t\tif (dblClick != null)\n\t\t\t{\n\t\t\t\tdblClick(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tvar tmp = getState(evt);\n\t\t\t\tgraph.dblClick(evt, (tmp != null) ? tmp.cell : null);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Function: release\n\t * \n\t * Removes the known listeners from the given DOM node and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the listeners from.\n\t */\n\trelease: function(element)\n\t{\n\t\ttry\n\t\t{\n\t\t\tif (element != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeAllListeners(element);\n\t\t\t\t\n\t\t\t\tvar children = element.childNodes;\n\t\t\t\t\n\t\t\t\tif (children != null)\n\t\t\t\t{\n\t\t\t        var childCount = children.length;\n\t\t\t        \n\t\t\t        for (var i = 0; i < childCount; i += 1)\n\t\t\t        {\n\t\t\t        \tmxEvent.release(children[i]);\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignores errors as this is typically called in cleanup code\n\t\t}\n\t},\n\n\t/**\n\t * Function: addMouseWheelListener\n\t * \n\t * Installs the given function as a handler for mouse wheel events. The\n\t * function has two arguments: the mouse event and a boolean that specifies\n\t * if the wheel was moved up or down.\n\t * \n\t * This has been tested with IE 6 and 7, Firefox (all versions), Opera and\n\t * Safari. It does currently not work on Safari for Mac.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * mxEvent.addMouseWheelListener(function (evt, up)\n\t * {\n\t *   mxLog.show();\n\t *   mxLog.debug('mouseWheel: up='+up);\n\t * });\n\t *(end)\n\t * \n\t * Parameters:\n\t * \n\t * funct - Handler function that takes the event argument and a boolean up\n\t * argument for the mousewheel direction.\n\t * target - Target for installing the listener in Google Chrome. See \n\t * https://www.chromestatus.com/features/6662647093133312.\n\t */\n\taddMouseWheelListener: function(funct, target)\n\t{\n\t\tif (funct != null)\n\t\t{\n\t\t\tvar wheelHandler = function(evt)\n\t\t\t{\n\t\t\t\t// IE does not give an event object but the\n\t\t\t\t// global event object is the mousewheel event\n\t\t\t\t// at this point in time.\n\t\t\t\tif (evt == null)\n\t\t\t\t{\n\t\t\t\t\tevt = window.event;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t//To prevent window zoom on trackpad pinch\n\t\t\t\tif (evt.ctrlKey) \n\t\t\t\t{\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tvar delta = -evt.deltaY;\n\t\t\t\t\n\t\t\t\t// Handles the event using the given function\n\t\t\t\tif (Math.abs(evt.deltaX) > 0.5 || Math.abs(evt.deltaY) > 0.5)\n\t\t\t\t{\n\t\t\t\t\tfunct(evt, (evt.deltaY == 0) ?  -evt.deltaX > 0 : -evt.deltaY > 0);\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\ttarget = target != null ? target : window;\n\t\t\t\t\t\n\t\t\tif (mxClient.IS_SF && !mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar scale = 1;\n\t\t\t\t\n\t\t\t\tmxEvent.addListener(target, 'gesturestart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\tscale = 1;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tmxEvent.addListener(target, 'gesturechange', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\tvar diff = scale - evt.scale;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(diff) > 0.2)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt, diff < 0, true);\n\t\t\t\t\t\tscale = evt.scale;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmxEvent.addListener(target, 'gestureend', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.addListener(target, 'wheel', wheelHandler);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: disableContextMenu\n\t *\n\t * Disables the context menu for the given element.\n\t */\n\tdisableContextMenu: function(element)\n\t{\n\t\tmxEvent.addListener(element, 'contextmenu', function(evt)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t},\n\t\n\t/**\n\t * Function: getSource\n\t * \n\t * Returns the event's target or srcElement depending on the browser.\n\t */\n\tgetSource: function(evt)\n\t{\n\t\treturn (evt.srcElement != null) ? evt.srcElement : evt.target;\n\t},\n\n\t/**\n\t * Function: isConsumed\n\t * \n\t * Returns true if the event has been consumed using <consume>.\n\t */\n\tisConsumed: function(evt)\n\t{\n\t\treturn evt.isConsumed != null && evt.isConsumed;\n\t},\n\n\t/**\n\t * Function: isTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisTouchEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'touch' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_TOUCH) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 5 : evt.type.indexOf('touch') == 0);\n\t},\n\n\t/**\n\t * Function: isPenEvent\n\t * \n\t * Returns true if the event was generated using a pen (not a touch device or mouse).\n\t */\n\tisPenEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'pen' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_PEN) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 2 : evt.type.indexOf('pen') == 0);\n\t},\n\n\t/**\n\t * Function: isMultiTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisMultiTouchEvent: function(evt)\n\t{\n\t\treturn (evt.type != null && evt.type.indexOf('touch') == 0 && evt.touches != null && evt.touches.length > 1);\n\t},\n\n\t/**\n\t * Function: isMouseEvent\n\t * \n\t * Returns true if the event was generated using a mouse (not a pen or touch device).\n\t */\n\tisMouseEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'mouse' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_MOUSE) : ((evt.mozInputSource != null) ?\n\t\t\t\tevt.mozInputSource == 1 : evt.type.indexOf('mouse') == 0);\n\t},\n\t\n\t/**\n\t * Function: isLeftMouseButton\n\t * \n\t * Returns true if the left mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property. Note that this returns true in Firefox\n\t * for control+left-click on the Mac.\n\t */\n\tisLeftMouseButton: function(evt)\n\t{\n\t\t// Special case for mousemove and mousedown we check the buttons\n\t\t// if it exists because which is 0 even if no button is pressed\n\t\tif ('buttons' in evt && (evt.type == 'mousedown' || evt.type == 'mousemove'))\n\t\t{\n\t\t\treturn evt.buttons == 1;\n\t\t}\n\t\telse if ('which' in evt)\n\t\t{\n\t        return evt.which === 1;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 1;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isMiddleMouseButton\n\t * \n\t * Returns true if the middle mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property.\n\t */\n\tisMiddleMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 2;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 4;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isRightMouseButton\n\t * \n\t * Returns true if the right mouse button was pressed. Note that this\n\t * button might not be available on some systems. For handling a popup\n\t * trigger <isPopupTrigger> should be used.\n\t */\n\tisRightMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 3;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 2;\n\t    }\n\t},\n\n\t/**\n\t * Function: isPopupTrigger\n\t * \n\t * Returns true if the event is a popup trigger. This implementation\n\t * returns true if the right button or the left button and control was\n\t * pressed on a Mac.\n\t */\n\tisPopupTrigger: function(evt)\n\t{\n\t\treturn mxEvent.isRightMouseButton(evt) || (mxClient.IS_MAC && mxEvent.isControlDown(evt) &&\n\t\t\t!mxEvent.isShiftDown(evt) && !mxEvent.isMetaDown(evt) && !mxEvent.isAltDown(evt));\n\t},\n\n\t/**\n\t * Function: isShiftDown\n\t * \n\t * Returns true if the shift key is pressed for the given event.\n\t */\n\tisShiftDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.shiftKey : false;\n\t},\n\n\t/**\n\t * Function: isAltDown\n\t * \n\t * Returns true if the alt key is pressed for the given event.\n\t */\n\tisAltDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.altKey : false;\n\t},\n\n\t/**\n\t * Function: isControlDown\n\t * \n\t * Returns true if the control key is pressed for the given event.\n\t */\n\tisControlDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.ctrlKey : false;\n\t},\n\n\t/**\n\t * Function: isMetaDown\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tisMetaDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.metaKey : false;\n\t},\n\n\t/**\n\t * Function: getMainEvent\n\t * \n\t * Returns the touch or mouse event that contains the mouse coordinates.\n\t */\n\tgetMainEvent: function(e)\n\t{\n\t\tif ((e.type == 'touchstart' || e.type == 'touchmove') && e.touches != null && e.touches[0] != null)\n\t\t{\n\t\t\te = e.touches[0];\n\t\t}\n\t\telse if (e.type == 'touchend' && e.changedTouches != null && e.changedTouches[0] != null)\n\t\t{\n\t\t\te = e.changedTouches[0];\n\t\t}\n\t\t\n\t\treturn e;\n\t},\n\t\n\t/**\n\t * Function: getClientX\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientX: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientX;\n\t},\n\n\t/**\n\t * Function: getClientY\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientY: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientY;\n\t},\n\n\t/**\n\t * Function: consume\n\t * \n\t * Consumes the given event.\n\t * \n\t * Parameters:\n\t * \n\t * evt - Native event to be consumed.\n\t * preventDefault - Optional boolean to prevent the default for the event.\n\t * Default is true.\n\t * stopPropagation - Option boolean to stop event propagation. Default is\n\t * true.\n\t */\n\tconsume: function(evt, preventDefault, stopPropagation)\n\t{\n\t\tpreventDefault = (preventDefault != null) ? preventDefault : true;\n\t\tstopPropagation = (stopPropagation != null) ? stopPropagation : true;\n\t\t\n\t\tif (preventDefault)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tif (stopPropagation)\n\t\t\t\t{\n\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\telse if (stopPropagation)\n\t\t\t{\n\t\t\t\tevt.cancelBubble = true;\n\t\t\t}\n\t\t}\n\n\t\t// Opera\n\t\tevt.isConsumed = true;\n\n\t\t// Other browsers\n\t\tif (!evt.preventDefault)\n\t\t{\n\t\t\tevt.returnValue = false;\n\t\t}\n\t},\n\t\n\t//\n\t// Special handles in mouse events\n\t//\n\t\n\t/**\n\t * Variable: LABEL_HANDLE\n\t * \n\t * Index for the label handle in an mxMouseEvent. This should be a negative\n\t * value that does not interfere with any possible handle indices. Default\n\t * is -1.\n\t */\n\tLABEL_HANDLE: -1,\n\t\n\t/**\n\t * Variable: ROTATION_HANDLE\n\t * \n\t * Index for the rotation handle in an mxMouseEvent. This should be a\n\t * negative value that does not interfere with any possible handle indices.\n\t * Default is -2.\n\t */\n\tROTATION_HANDLE: -2,\n\t\n\t/**\n\t * Variable: CUSTOM_HANDLE\n\t * \n\t * Start index for the custom handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * custom handle. Default is -100.\n\t */\n\tCUSTOM_HANDLE: -100,\n\t\n\t/**\n\t * Variable: VIRTUAL_HANDLE\n\t * \n\t * Start index for the virtual handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * virtual handle. Default is -100000. This assumes that there are no more\n\t * than VIRTUAL_HANDLE - CUSTOM_HANDLE custom handles.\n\t * \n\t */\n\tVIRTUAL_HANDLE: -100000,\n\t\n\t//\n\t// Event names\n\t//\n\t\n\t/**\n\t * Variable: MOUSE_DOWN\n\t *\n\t * Specifies the event name for mouseDown.\n\t */\n\tMOUSE_DOWN: 'mouseDown',\n\t\n\t/**\n\t * Variable: MOUSE_MOVE\n\t *\n\t * Specifies the event name for mouseMove. \n\t */\n\tMOUSE_MOVE: 'mouseMove',\n\t\n\t/**\n\t * Variable: MOUSE_UP\n\t *\n\t * Specifies the event name for mouseUp. \n\t */\n\tMOUSE_UP: 'mouseUp',\n\n\t/**\n\t * Variable: ACTIVATE\n\t *\n\t * Specifies the event name for activate.\n\t */\n\tACTIVATE: 'activate',\n\n\t/**\n\t * Variable: RESIZE_START\n\t *\n\t * Specifies the event name for resizeStart.\n\t */\n\tRESIZE_START: 'resizeStart',\n\n\t/**\n\t * Variable: RESIZE\n\t *\n\t * Specifies the event name for resize.\n\t */\n\tRESIZE: 'resize',\n\n\t/**\n\t * Variable: RESIZE_END\n\t *\n\t * Specifies the event name for resizeEnd.\n\t */\n\tRESIZE_END: 'resizeEnd',\n\n\t/**\n\t * Variable: MOVE_START\n\t *\n\t * Specifies the event name for moveStart.\n\t */\n\tMOVE_START: 'moveStart',\n\n\t/**\n\t * Variable: MOVE\n\t *\n\t * Specifies the event name for move.\n\t */\n\tMOVE: 'move',\n\n\t/**\n\t * Variable: MOVE_END\n\t *\n\t * Specifies the event name for moveEnd.\n\t */\n\tMOVE_END: 'moveEnd',\n\n\t/**\n\t * Variable: PAN_START\n\t *\n\t * Specifies the event name for panStart.\n\t */\n\tPAN_START: 'panStart',\n\n\t/**\n\t * Variable: PAN\n\t *\n\t * Specifies the event name for pan.\n\t */\n\tPAN: 'pan',\n\n\t/**\n\t * Variable: PAN_END\n\t *\n\t * Specifies the event name for panEnd.\n\t */\n\tPAN_END: 'panEnd',\n\n\t/**\n\t * Variable: MINIMIZE\n\t *\n\t * Specifies the event name for minimize.\n\t */\n\tMINIMIZE: 'minimize',\n\n\t/**\n\t * Variable: NORMALIZE\n\t *\n\t * Specifies the event name for normalize.\n\t */\n\tNORMALIZE: 'normalize',\n\n\t/**\n\t * Variable: MAXIMIZE\n\t *\n\t * Specifies the event name for maximize.\n\t */\n\tMAXIMIZE: 'maximize',\n\n\t/**\n\t * Variable: HIDE\n\t *\n\t * Specifies the event name for hide.\n\t */\n\tHIDE: 'hide',\n\n\t/**\n\t * Variable: SHOW\n\t *\n\t * Specifies the event name for show.\n\t */\n\tSHOW: 'show',\n\n\t/**\n\t * Variable: CLOSE\n\t *\n\t * Specifies the event name for close.\n\t */\n\tCLOSE: 'close',\n\n\t/**\n\t * Variable: DESTROY\n\t *\n\t * Specifies the event name for destroy.\n\t */\n\tDESTROY: 'destroy',\n\n\t/**\n\t * Variable: REFRESH\n\t *\n\t * Specifies the event name for refresh.\n\t */\n\tREFRESH: 'refresh',\n\n\t/**\n\t * Variable: SIZE\n\t *\n\t * Specifies the event name for size.\n\t */\n\tSIZE: 'size',\n\t\n\t/**\n\t * Variable: SELECT\n\t *\n\t * Specifies the event name for select.\n\t */\n\tSELECT: 'select',\n\n\t/**\n\t * Variable: FIRED\n\t *\n\t * Specifies the event name for fired.\n\t */\n\tFIRED: 'fired',\n\n\t/**\n\t * Variable: FIRE_MOUSE_EVENT\n\t *\n\t * Specifies the event name for fireMouseEvent.\n\t */\n\tFIRE_MOUSE_EVENT: 'fireMouseEvent',\n\n\t/**\n\t * Variable: GESTURE\n\t *\n\t * Specifies the event name for gesture.\n\t */\n\tGESTURE: 'gesture',\n\n\t/**\n\t * Variable: TAP_AND_HOLD\n\t *\n\t * Specifies the event name for tapAndHold.\n\t */\n\tTAP_AND_HOLD: 'tapAndHold',\n\n\t/**\n\t * Variable: GET\n\t *\n\t * Specifies the event name for get.\n\t */\n\tGET: 'get',\n\n\t/**\n\t * Variable: RECEIVE\n\t *\n\t * Specifies the event name for receive.\n\t */\n\tRECEIVE: 'receive',\n\n\t/**\n\t * Variable: CONNECT\n\t *\n\t * Specifies the event name for connect.\n\t */\n\tCONNECT: 'connect',\n\n\t/**\n\t * Variable: DISCONNECT\n\t *\n\t * Specifies the event name for disconnect.\n\t */\n\tDISCONNECT: 'disconnect',\n\n\t/**\n\t * Variable: SUSPEND\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tSUSPEND: 'suspend',\n\n\t/**\n\t * Variable: RESUME\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tRESUME: 'resume',\n\n\t/**\n\t * Variable: MARK\n\t *\n\t * Specifies the event name for mark.\n\t */\n\tMARK: 'mark',\n\n\t/**\n\t * Variable: ROOT\n\t *\n\t * Specifies the event name for root.\n\t */\n\tROOT: 'root',\n\n\t/**\n\t * Variable: POST\n\t *\n\t * Specifies the event name for post.\n\t */\n\tPOST: 'post',\n\n\t/**\n\t * Variable: OPEN\n\t *\n\t * Specifies the event name for open.\n\t */\n\tOPEN: 'open',\n\n\t/**\n\t * Variable: SAVE\n\t *\n\t * Specifies the event name for open.\n\t */\n\tSAVE: 'save',\n\n\t/**\n\t * Variable: BEFORE_ADD_VERTEX\n\t *\n\t * Specifies the event name for beforeAddVertex.\n\t */\n\tBEFORE_ADD_VERTEX: 'beforeAddVertex',\n\n\t/**\n\t * Variable: ADD_VERTEX\n\t *\n\t * Specifies the event name for addVertex.\n\t */\n\tADD_VERTEX: 'addVertex',\n\n\t/**\n\t * Variable: AFTER_ADD_VERTEX\n\t *\n\t * Specifies the event name for afterAddVertex.\n\t */\n\tAFTER_ADD_VERTEX: 'afterAddVertex',\n\n\t/**\n\t * Variable: DONE\n\t *\n\t * Specifies the event name for done.\n\t */\n\tDONE: 'done',\n\n\t/**\n\t * Variable: EXECUTE\n\t *\n\t * Specifies the event name for execute.\n\t */\n\tEXECUTE: 'execute',\n\n\t/**\n\t * Variable: EXECUTED\n\t *\n\t * Specifies the event name for executed.\n\t */\n\tEXECUTED: 'executed',\n\n\t/**\n\t * Variable: BEGIN_UPDATE\n\t *\n\t * Specifies the event name for beginUpdate.\n\t */\n\tBEGIN_UPDATE: 'beginUpdate',\n\n\t/**\n\t * Variable: START_EDIT\n\t *\n\t * Specifies the event name for startEdit.\n\t */\n\tSTART_EDIT: 'startEdit',\n\n\t/**\n\t * Variable: END_UPDATE\n\t *\n\t * Specifies the event name for endUpdate.\n\t */\n\tEND_UPDATE: 'endUpdate',\n\n\t/**\n\t * Variable: END_EDIT\n\t *\n\t * Specifies the event name for endEdit.\n\t */\n\tEND_EDIT: 'endEdit',\n\n\t/**\n\t * Variable: BEFORE_UNDO\n\t *\n\t * Specifies the event name for beforeUndo.\n\t */\n\tBEFORE_UNDO: 'beforeUndo',\n\n\t/**\n\t * Variable: UNDO\n\t *\n\t * Specifies the event name for undo.\n\t */\n\tUNDO: 'undo',\n\n\t/**\n\t * Variable: REDO\n\t *\n\t * Specifies the event name for redo.\n\t */\n\tREDO: 'redo',\n\n\t/**\n\t * Variable: CHANGE\n\t *\n\t * Specifies the event name for change.\n\t */\n\tCHANGE: 'change',\n\n\t/**\n\t * Variable: NOTIFY\n\t *\n\t * Specifies the event name for notify.\n\t */\n\tNOTIFY: 'notify',\n\n\t/**\n\t * Variable: LAYOUT_CELLS\n\t *\n\t * Specifies the event name for layoutCells.\n\t */\n\tLAYOUT_CELLS: 'layoutCells',\n\n\t/**\n\t * Variable: CLICK\n\t *\n\t * Specifies the event name for click.\n\t */\n\tCLICK: 'click',\n\n\t/**\n\t * Variable: SCALE\n\t *\n\t * Specifies the event name for scale.\n\t */\n\tSCALE: 'scale',\n\n\t/**\n\t * Variable: TRANSLATE\n\t *\n\t * Specifies the event name for translate.\n\t */\n\tTRANSLATE: 'translate',\n\n\t/**\n\t * Variable: SCALE_AND_TRANSLATE\n\t *\n\t * Specifies the event name for scaleAndTranslate.\n\t */\n\tSCALE_AND_TRANSLATE: 'scaleAndTranslate',\n\n\t/**\n\t * Variable: UP\n\t *\n\t * Specifies the event name for up.\n\t */\n\tUP: 'up',\n\n\t/**\n\t * Variable: DOWN\n\t *\n\t * Specifies the event name for down.\n\t */\n\tDOWN: 'down',\n\n\t/**\n\t * Variable: ADD\n\t *\n\t * Specifies the event name for add.\n\t */\n\tADD: 'add',\n\n\t/**\n\t * Variable: REMOVE\n\t *\n\t * Specifies the event name for remove.\n\t */\n\tREMOVE: 'remove',\n\t\n\t/**\n\t * Variable: CLEAR\n\t *\n\t * Specifies the event name for clear.\n\t */\n\tCLEAR: 'clear',\n\n\t/**\n\t * Variable: ADD_CELLS\n\t *\n\t * Specifies the event name for addCells.\n\t */\n\tADD_CELLS: 'addCells',\n\n\t/**\n\t * Variable: CELLS_ADDED\n\t *\n\t * Specifies the event name for cellsAdded.\n\t */\n\tCELLS_ADDED: 'cellsAdded',\n\n\t/**\n\t * Variable: MOVE_CELLS\n\t *\n\t * Specifies the event name for moveCells.\n\t */\n\tMOVE_CELLS: 'moveCells',\n\n\t/**\n\t * Variable: CELLS_MOVED\n\t *\n\t * Specifies the event name for cellsMoved.\n\t */\n\tCELLS_MOVED: 'cellsMoved',\n\n\t/**\n\t * Variable: RESIZE_CELLS\n\t *\n\t * Specifies the event name for resizeCells.\n\t */\n\tRESIZE_CELLS: 'resizeCells',\n\n\t/**\n\t * Variable: CELLS_RESIZED\n\t *\n\t * Specifies the event name for cellsResized.\n\t */\n\tCELLS_RESIZED: 'cellsResized',\n\n\t/**\n\t * Variable: TOGGLE_CELLS\n\t *\n\t * Specifies the event name for toggleCells.\n\t */\n\tTOGGLE_CELLS: 'toggleCells',\n\n\t/**\n\t * Variable: CELLS_TOGGLED\n\t *\n\t * Specifies the event name for cellsToggled.\n\t */\n\tCELLS_TOGGLED: 'cellsToggled',\n\n\t/**\n\t * Variable: ORDER_CELLS\n\t *\n\t * Specifies the event name for orderCells.\n\t */\n\tORDER_CELLS: 'orderCells',\n\n\t/**\n\t * Variable: CELLS_ORDERED\n\t *\n\t * Specifies the event name for cellsOrdered.\n\t */\n\tCELLS_ORDERED: 'cellsOrdered',\n\n\t/**\n\t * Variable: REMOVE_CELLS\n\t *\n\t * Specifies the event name for removeCells.\n\t */\n\tREMOVE_CELLS: 'removeCells',\n\n\t/**\n\t * Variable: CELLS_REMOVED\n\t *\n\t * Specifies the event name for cellsRemoved.\n\t */\n\tCELLS_REMOVED: 'cellsRemoved',\n\n\t/**\n\t * Variable: GROUP_CELLS\n\t *\n\t * Specifies the event name for groupCells.\n\t */\n\tGROUP_CELLS: 'groupCells',\n\n\t/**\n\t * Variable: UNGROUP_CELLS\n\t *\n\t * Specifies the event name for ungroupCells.\n\t */\n\tUNGROUP_CELLS: 'ungroupCells',\n\n\t/**\n\t * Variable: REMOVE_CELLS_FROM_PARENT\n\t *\n\t * Specifies the event name for removeCellsFromParent.\n\t */\n\tREMOVE_CELLS_FROM_PARENT: 'removeCellsFromParent',\n\n\t/**\n\t * Variable: FOLD_CELLS\n\t *\n\t * Specifies the event name for foldCells.\n\t */\n\tFOLD_CELLS: 'foldCells',\n\n\t/**\n\t * Variable: CELLS_FOLDED\n\t *\n\t * Specifies the event name for cellsFolded.\n\t */\n\tCELLS_FOLDED: 'cellsFolded',\n\n\t/**\n\t * Variable: ALIGN_CELLS\n\t *\n\t * Specifies the event name for alignCells.\n\t */\n\tALIGN_CELLS: 'alignCells',\n\n\t/**\n\t * Variable: LABEL_CHANGED\n\t *\n\t * Specifies the event name for labelChanged.\n\t */\n\tLABEL_CHANGED: 'labelChanged',\n\n\t/**\n\t * Variable: CONNECT_CELL\n\t *\n\t * Specifies the event name for connectCell.\n\t */\n\tCONNECT_CELL: 'connectCell',\n\n\t/**\n\t * Variable: CELL_CONNECTED\n\t *\n\t * Specifies the event name for cellConnected.\n\t */\n\tCELL_CONNECTED: 'cellConnected',\n\n\t/**\n\t * Variable: SPLIT_EDGE\n\t *\n\t * Specifies the event name for splitEdge.\n\t */\n\tSPLIT_EDGE: 'splitEdge',\n\n\t/**\n\t * Variable: FLIP_EDGE\n\t *\n\t * Specifies the event name for flipEdge.\n\t */\n\tFLIP_EDGE: 'flipEdge',\n\n\t/**\n\t * Variable: START_EDITING\n\t *\n\t * Specifies the event name for startEditing.\n\t */\n\tSTART_EDITING: 'startEditing',\n\n\t/**\n\t * Variable: EDITING_STARTED\n\t *\n\t * Specifies the event name for editingStarted.\n\t */\n\tEDITING_STARTED: 'editingStarted',\n\n\t/**\n\t * Variable: EDITING_STOPPED\n\t *\n\t * Specifies the event name for editingStopped.\n\t */\n\tEDITING_STOPPED: 'editingStopped',\n\n\t/**\n\t * Variable: ADD_OVERLAY\n\t *\n\t * Specifies the event name for addOverlay.\n\t */\n\tADD_OVERLAY: 'addOverlay',\n\n\t/**\n\t * Variable: REMOVE_OVERLAY\n\t *\n\t * Specifies the event name for removeOverlay.\n\t */\n\tREMOVE_OVERLAY: 'removeOverlay',\n\n\t/**\n\t * Variable: UPDATE_CELL_SIZE\n\t *\n\t * Specifies the event name for updateCellSize.\n\t */\n\tUPDATE_CELL_SIZE: 'updateCellSize',\n\n\t/**\n\t * Variable: ESCAPE\n\t *\n\t * Specifies the event name for escape.\n\t */\n\tESCAPE: 'escape',\n\n\t/**\n\t * Variable: DOUBLE_CLICK\n\t *\n\t * Specifies the event name for doubleClick.\n\t */\n\tDOUBLE_CLICK: 'doubleClick',\n\n\t/**\n\t * Variable: START\n\t *\n\t * Specifies the event name for start.\n\t */\n\tSTART: 'start',\n\n\t/**\n\t * Variable: RESET\n\t *\n\t * Specifies the event name for reset.\n\t */\n\tRESET: 'reset'\n\n};\n\n__mxOutput.mxEvent = typeof mxEvent !== 'undefined' ? mxEvent : undefined;\n\n/**\n * Copyright (c) 2006-2020, JGraph Ltd\n * Copyright (c) 2006-2020, draw.io AG\n */\n/**\n * Class: mxXmlRequest\n * \n * XML HTTP request wrapper. See also: <mxUtils.get>, <mxUtils.post> and\n * <mxUtils.load>. This class provides a cross-browser abstraction for Ajax\n * requests.\n * \n * Encoding:\n * \n * For encoding parameter values, the built-in encodeURIComponent JavaScript\n * method must be used. For automatic encoding of post data in <mxEditor> the\n * <mxEditor.escapePostData> switch can be set to true (default). The encoding\n * will be carried out using the conte type of the page. That is, the page\n * containting the editor should contain a meta tag in the header, eg.\n * <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n * \n * Example:\n * \n * (code)\n * var onload = function(req)\n * {\n *   mxUtils.alert(req.getDocumentElement());\n * }\n * \n * var onerror = function(req)\n * {\n *   mxUtils.alert('Error');\n * }\n * new mxXmlRequest(url, 'key=value').send(onload, onerror);\n * (end)\n * \n * Sends an asynchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var req = new mxXmlRequest(url, 'key=value', 'POST', false);\n * req.send();\n * mxUtils.alert(req.getDocumentElement());\n * (end)\n * \n * Sends a synchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = encodeURIComponent(mxUtils.getXml(result));\n * new mxXmlRequest(url, 'xml='+xml).send();\n * (end)\n * \n * Sends an encoded graph model to the specified URL using xml as the\n * parameter name. The parameter can then be retrieved in C# as follows:\n * \n * (code)\n * string xml = HttpUtility.UrlDecode(context.Request.Params[\"xml\"]);\n * (end)\n * \n * Or in Java as follows:\n * \n * (code)\n * String xml = URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\");\n * (end)\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image.\n * \n * Constructor: mxXmlRequest\n * \n * Constructs an XML HTTP request.\n * \n * Parameters:\n * \n * url - Target URL of the request.\n * params - Form encoded parameters to send with a POST request.\n * method - String that specifies the request method. Possible values are\n * POST and GET. Default is POST.\n * async - Boolean specifying if an asynchronous request should be used.\n * Default is true.\n * username - String specifying the username to be used for the request.\n * password - String specifying the password to be used for the request.\n */\nfunction mxXmlRequest(url, params, method, async, username, password)\n{\n\tthis.url = url;\n\tthis.params = params;\n\tthis.method = method || 'POST';\n\tthis.async = (async != null) ? async : true;\n\tthis.username = username;\n\tthis.password = password;\n};\n\n/**\n * Variable: url\n * \n * Holds the target URL of the request.\n */\nmxXmlRequest.prototype.url = null;\n\n/**\n * Variable: params\n * \n * Holds the form encoded data for the POST request.\n */\nmxXmlRequest.prototype.params = null;\n\n/**\n * Variable: method\n * \n * Specifies the request method. Possible values are POST and GET. Default\n * is POST.\n */\nmxXmlRequest.prototype.method = null;\n\n/**\n * Variable: async\n * \n * Boolean indicating if the request is asynchronous.\n */\nmxXmlRequest.prototype.async = null;\n\n/**\n * Variable: binary\n * \n * Boolean indicating if the request is binary. This option is ignored in IE.\n * In all other browsers the requested mime type is set to\n * text/plain; charset=x-user-defined. Default is false.\n */\nmxXmlRequest.prototype.binary = false;\n\n/**\n * Variable: withCredentials\n * \n * Specifies if withCredentials should be used in HTML5-compliant browsers. Default is\n * false.\n */\nmxXmlRequest.prototype.withCredentials = false;\n\n/**\n * Variable: username\n * \n * Specifies the username to be used for authentication.\n */\nmxXmlRequest.prototype.username = null;\n\n/**\n * Variable: password\n * \n * Specifies the password to be used for authentication.\n */\nmxXmlRequest.prototype.password = null;\n\n/**\n * Variable: request\n * \n * Holds the inner, browser-specific request object.\n */\nmxXmlRequest.prototype.request = null;\n\n/**\n * Variable: decodeSimulateValues\n * \n * Specifies if request values should be decoded as URIs before setting the\n * textarea value in <simulate>. Defaults to false for backwards compatibility,\n * to avoid another decode on the server this should be set to true.\n */\nmxXmlRequest.prototype.decodeSimulateValues = false;\n\n/**\n * Function: isBinary\n * \n * Returns <binary>.\n */\nmxXmlRequest.prototype.isBinary = function()\n{\n\treturn this.binary;\n};\n\n/**\n * Function: setBinary\n * \n * Sets <binary>.\n */\nmxXmlRequest.prototype.setBinary = function(value)\n{\n\tthis.binary = value;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: isReady\n * \n * Returns true if the response is ready.\n */\nmxXmlRequest.prototype.isReady = function()\n{\n\treturn this.request.readyState == 4;\n};\n\n/**\n * Function: getDocumentElement\n * \n * Returns the document element of the response XML document.\n */\nmxXmlRequest.prototype.getDocumentElement = function()\n{\n\tvar doc = this.getXml();\n\t\n\tif (doc != null)\n\t{\n\t\treturn doc.documentElement;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getXml\n * \n * Returns the response as an XML document. Use <getDocumentElement> to get\n * the document element of the XML document.\n */\nmxXmlRequest.prototype.getXml = function()\n{\n\tvar xml = this.request.responseXML;\n\t\n\t// Handles missing response headers in IE, the first condition handles\n\t// the case where responseXML is there, but using its nodes leads to\n\t// type errors in the mxCellCodec when putting the nodes into a new\n\t// document. This happens in IE9 standards mode and with XML user\n\t// objects only, as they are used directly as values in cells.\n\tif (document.documentMode >= 9 || xml == null || xml.documentElement == null)\n\t{\n\t\txml = mxUtils.parseXml(this.request.responseText);\n\t}\n\t\n\treturn xml;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: getStatus\n * \n * Returns the status as a number, eg. 404 for \"Not found\" or 200 for \"OK\".\n * Note: The NS_ERROR_NOT_AVAILABLE for invalid responses cannot be cought.\n */\nmxXmlRequest.prototype.getStatus = function()\n{\n\treturn (this.request != null) ? this.request.status : null;\n};\n\n/**\n * Function: create\n * \n * Creates and returns the inner <request> object.\n */\nmxXmlRequest.prototype.create = function()\n{\n\tif (window.XMLHttpRequest)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\tvar req = new XMLHttpRequest();\n\t\t\t\n\t\t\t// TODO: Check for overrideMimeType required here?\n\t\t\tif (this.isBinary() && req.overrideMimeType)\n\t\t\t{\n\t\t\t\treq.overrideMimeType('text/plain; charset=x-user-defined');\n\t\t\t}\n\n\t\t\treturn req;\n\t\t};\n\t}\n\telse if (typeof(ActiveXObject) != 'undefined')\n\t{\n\t\treturn function()\n\t\t{\n\t\t\t// TODO: Implement binary option\n\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\n\t\t};\n\t}\n}();\n\n/**\n * Function: send\n * \n * Send the <request> to the target URL using the specified functions to\n * process the response asychronously.\n * \n * Note: Due to technical limitations, onerror is currently ignored.\n * \n * Parameters:\n * \n * onload - Function to be invoked if a successful response was received.\n * onerror - Function to be called on any error.\n * timeout - Optional timeout in ms before calling ontimeout.\n * ontimeout - Optional function to execute on timeout.\n */\nmxXmlRequest.prototype.send = function(onload, onerror, timeout, ontimeout)\n{\n\tthis.request = this.create();\n\t\n\tif (this.request != null)\n\t{\n\t\tif (onload != null)\n\t\t{\n\t\t\tthis.request.onreadystatechange = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (this.isReady())\n\t\t\t\t{\n\t\t\t\t\tonload(this);\n\t\t\t\t\tthis.request.onreadystatechange = null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.request.open(this.method, this.url, this.async,\n\t\t\tthis.username, this.password);\n\t\tthis.setRequestHeaders(this.request, this.params);\n\t\t\n\t\tif (window.XMLHttpRequest && this.withCredentials)\n\t\t{\n\t\t\tthis.request.withCredentials = 'true';\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_QUIRKS && (document.documentMode == null || document.documentMode > 9) &&\n\t\t\twindow.XMLHttpRequest && timeout != null && ontimeout != null)\n\t\t{\n\t\t\tthis.request.timeout = timeout;\n\t\t\tthis.request.ontimeout = ontimeout;\n\t\t}\n\t\t\t\t\n\t\tthis.request.send(this.params);\n\t}\n};\n\n/**\n * Function: setRequestHeaders\n * \n * Sets the headers for the given request and parameters. This sets the\n * content-type to application/x-www-form-urlencoded if any params exist.\n * \n * Example:\n * \n * (code)\n * request.setRequestHeaders = function(request, params)\n * {\n *   if (params != null)\n *   {\n *     request.setRequestHeader('Content-Type',\n *             'multipart/form-data');\n *     request.setRequestHeader('Content-Length',\n *             params.length);\n *   }\n * };\n * (end)\n * \n * Use the code above before calling <send> if you require a\n * multipart/form-data request.   \n */\nmxXmlRequest.prototype.setRequestHeaders = function(request, params)\n{\n\tif (params != null)\n\t{\n\t\trequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t}\n};\n\n/**\n * Function: simulate\n * \n * Creates and posts a request to the given target URL using a dynamically\n * created form inside the given document.\n * \n * Parameters:\n * \n * docs - Document that contains the form element.\n * target - Target to send the form result to.\n */\nmxXmlRequest.prototype.simulate = function(doc, target)\n{\n\tdoc = doc || document;\n\tvar old = null;\n\n\tif (doc == document)\n\t{\n\t\told = window.onbeforeunload;\t\t\n\t\twindow.onbeforeunload = null;\n\t}\n\t\t\t\n\tvar form = doc.createElement('form');\n\tform.setAttribute('method', this.method);\n\tform.setAttribute('action', this.url);\n\n\tif (target != null)\n\t{\n\t\tform.setAttribute('target', target);\n\t}\n\n\tform.style.display = 'none';\n\tform.style.visibility = 'hidden';\n\t\n\tvar pars = (this.params.indexOf('&') > 0) ?\n\t\tthis.params.split('&') :\n\t\tthis.params.split();\n\n\t// Adds the parameters as textareas to the form\n\tfor (var i=0; i<pars.length; i++)\n\t{\n\t\tvar pos = pars[i].indexOf('=');\n\t\t\n\t\tif (pos > 0)\n\t\t{\n\t\t\tvar name = pars[i].substring(0, pos);\n\t\t\tvar value = pars[i].substring(pos+1);\n\t\t\t\n\t\t\tif (this.decodeSimulateValues)\n\t\t\t{\n\t\t\t\tvalue = decodeURIComponent(value);\n\t\t\t}\n\t\t\t\n\t\t\tvar textarea = doc.createElement('textarea');\n\t\t\ttextarea.setAttribute('wrap', 'off');\n\t\t\ttextarea.setAttribute('name', name);\n\t\t\tmxUtils.write(textarea, value);\n\t\t\tform.appendChild(textarea);\n\t\t}\n\t}\n\t\n\tdoc.body.appendChild(form);\n\tform.submit();\n\t\n\tif (form.parentNode != null)\n\t{\n\t\tform.parentNode.removeChild(form);\n\t}\n\n\tif (old != null)\n\t{\t\t\n\t\twindow.onbeforeunload = old;\n\t}\n};\n\n__mxOutput.mxXmlRequest = typeof mxXmlRequest !== 'undefined' ? mxXmlRequest : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxClipboard =\n{\n\t/**\n\t * Class: mxClipboard\n\t * \n\t * Singleton that implements a clipboard for graph cells.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxClipboard.copy(graph);\n\t * mxClipboard.paste(graph2);\n\t * (end)\n\t *\n\t * This copies the selection cells from the graph to the clipboard and\n\t * pastes them into graph2.\n\t * \n\t * For fine-grained control of the clipboard data the <mxGraph.canExportCell>\n\t * and <mxGraph.canImportCell> functions can be overridden.\n\t * \n\t * To restore previous parents for pasted cells, the implementation for\n\t * <copy> and <paste> can be changed as follows.\n\t * \n\t * (code)\n\t * mxClipboard.copy = function(graph, cells)\n\t * {\n\t *   cells = cells || graph.getSelectionCells();\n\t *   var result = graph.getExportableCells(cells);\n\t *   \n\t *   mxClipboard.parents = new Object();\n\t *   \n\t *   for (var i = 0; i < result.length; i++)\n\t *   {\n\t *     mxClipboard.parents[i] = graph.model.getParent(cells[i]);\n\t *   }\n\t *   \n\t *   mxClipboard.insertCount = 1;\n\t *   mxClipboard.setCells(graph.cloneCells(result));\n\t *   \n\t *   return result;\n\t * };\n\t * \n\t * mxClipboard.paste = function(graph)\n\t * {\n\t *   if (!mxClipboard.isEmpty())\n\t *   {\n\t *     var cells = graph.getImportableCells(mxClipboard.getCells());\n\t *     var delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t *     var parent = graph.getDefaultParent();\n\t *     \n\t *     graph.model.beginUpdate();\n\t *     try\n\t *     {\n\t *       for (var i = 0; i < cells.length; i++)\n\t *       {\n\t *         var tmp = (mxClipboard.parents != null && graph.model.contains(mxClipboard.parents[i])) ?\n\t *              mxClipboard.parents[i] : parent;\n\t *         cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\n\t *       }\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.model.endUpdate();\n\t *     }\n\t *     \n\t *     // Increments the counter and selects the inserted cells\n\t *     mxClipboard.insertCount++;\n\t *     graph.setSelectionCells(cells);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * Variable: STEPSIZE\n\t * \n\t * Defines the step size to offset the cells after each paste operation.\n\t * Default is 10.\n\t */\n\tSTEPSIZE: 10,\n\n\t/**\n\t * Variable: insertCount\n\t * \n\t * Counts the number of times the clipboard data has been inserted.\n\t */\n\tinsertCount: 1,\n\n\t/**\n\t * Variable: cells\n\t * \n\t * Holds the array of <mxCells> currently in the clipboard.\n\t */\n\tcells: null,\n\n\t/**\n\t * Function: setCells\n\t * \n\t * Sets the cells in the clipboard. Fires a <mxEvent.CHANGE> event.\n\t */\n\tsetCells: function(cells)\n\t{\n\t\tmxClipboard.cells = cells;\n\t},\n\n\t/**\n\t * Function: getCells\n\t * \n\t * Returns  the cells in the clipboard.\n\t */\n\tgetCells: function()\n\t{\n\t\treturn mxClipboard.cells;\n\t},\n\t\n\t/**\n\t * Function: isEmpty\n\t * \n\t * Returns true if the clipboard currently has not data stored.\n\t */\n\tisEmpty: function()\n\t{\n\t\treturn mxClipboard.getCells() == null;\n\t},\n\t\n\t/**\n\t * Function: cut\n\t * \n\t * Cuts the given array of <mxCells> from the specified graph.\n\t * If cells is null then the selection cells of the graph will\n\t * be used. Returns the cells that have been cut from the graph.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Optional array of <mxCells> to be cut.\n\t */\n\tcut: function(graph, cells)\n\t{\n\t\tcells = mxClipboard.copy(graph, cells);\n\t\tmxClipboard.insertCount = 0;\n\t\tmxClipboard.removeCells(graph, cells);\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: removeCells\n\t * \n\t * Hook to remove the given cells from the given graph after\n\t * a cut operation.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Array of <mxCells> to be cut.\n\t */\n\tremoveCells: function(graph, cells)\n\t{\n\t\tgraph.removeCells(cells);\n\t},\n\n\t/**\n\t * Function: copy\n\t * \n\t * Copies the given array of <mxCells> from the specified\n\t * graph to <cells>. Returns the original array of cells that has\n\t * been cloned. Descendants of cells in the array are ignored.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be copied.\n\t * cells - Optional array of <mxCells> to be copied.\n\t */\n\tcopy: function(graph, cells)\n\t{\n\t\tcells = cells || graph.getSelectionCells();\n\t\tvar result = graph.getExportableCells(graph.model.getTopmostCells(cells));\n\t\tmxClipboard.insertCount = 1;\n\t\tmxClipboard.setCells(graph.cloneCells(result));\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: paste\n\t * \n\t * Pastes the <cells> into the specified graph restoring\n\t * the relation to <parents>, if possible. If the parents\n\t * are no longer in the graph or invisible then the\n\t * cells are added to the graph's default or into the\n\t * swimlane under the cell's new location if one exists.\n\t * The cells are added to the graph using <mxGraph.importCells>\n\t * and returned.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to paste the <cells> into.\n\t */\n\tpaste: function(graph)\n\t{\n\t\tvar cells = null;\n\t\t\n\t\tif (!mxClipboard.isEmpty())\n\t\t{\n\t\t\tcells = graph.getImportableCells(mxClipboard.getCells());\n\t\t\tvar delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t\t\tvar parent = graph.getDefaultParent();\n\t\t\tcells = graph.importCells(cells, delta, delta, parent);\n\t\t\t\n\t\t\t// Increments the counter and selects the inserted cells\n\t\t\tmxClipboard.insertCount++;\n\t\t\tgraph.setSelectionCells(cells);\n\t\t}\n\t\t\n\t\treturn cells;\n\t}\n\n};\n\n__mxOutput.mxClipboard = typeof mxClipboard !== 'undefined' ? mxClipboard : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxWindow\n * \n * Basic window inside a document.\n * \n * Examples:\n * \n * Creating a simple window.\n *\n * (code)\n * var tb = document.createElement('div');\n * var wnd = new mxWindow('Title', tb, 100, 100, 200, 200, true, true);\n * wnd.setVisible(true); \n * (end)\n *\n * Creating a window that contains an iframe. \n * \n * (code)\n * var frame = document.createElement('iframe');\n * frame.setAttribute('width', '192px');\n * frame.setAttribute('height', '172px');\n * frame.setAttribute('src', 'http://www.example.com/');\n * frame.style.backgroundColor = 'white';\n * \n * var w = document.body.clientWidth;\n * var h = (document.body.clientHeight || document.documentElement.clientHeight);\n * var wnd = new mxWindow('Title', frame, (w-200)/2, (h-200)/3, 200, 200);\n * wnd.setVisible(true);\n * (end)\n * \n * To limit the movement of a window, eg. to keep it from being moved beyond\n * the top, left corner the following method can be overridden (recommended):\n * \n * (code)\n * wnd.setLocation = function(x, y)\n * {\n *   x = Math.max(0, x);\n *   y = Math.max(0, y);\n *   mxWindow.prototype.setLocation.apply(this, arguments);\n * };\n * (end)\n * \n * Or the following event handler can be used:\n * \n * (code)\n * wnd.addListener(mxEvent.MOVE, function(e)\n * {\n *   wnd.setLocation(Math.max(0, wnd.getX()), Math.max(0, wnd.getY()));\n * });\n * (end)\n * \n * To keep a window inside the current window:\n * \n * (code)\n * mxEvent.addListener(window, 'resize', mxUtils.bind(this, function()\n * {\n *   var iw = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n *   var ih = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n *   \n *   var x = this.window.getX();\n *   var y = this.window.getY();\n *   \n *   if (x + this.window.table.clientWidth > iw)\n *   {\n *     x = Math.max(0, iw - this.window.table.clientWidth);\n *   }\n *   \n *   if (y + this.window.table.clientHeight > ih)\n *   {\n *     y = Math.max(0, ih - this.window.table.clientHeight);\n *   }\n *   \n *   if (this.window.getX() != x || this.window.getY() != y)\n *   {\n *     this.window.setLocation(x, y);\n *   }\n * }));\n * (end)\n *\n * Event: mxEvent.MOVE_START\n *\n * Fires before the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MOVE\n *\n * Fires while the window is being moved. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.MOVE_END\n *\n * Fires after the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_START\n *\n * Fires before the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE\n *\n * Fires while the window is being resized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_END\n *\n * Fires after the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MAXIMIZE\n * \n * Fires after the window is maximized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.MINIMIZE\n * \n * Fires after the window is minimized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.NORMALIZE\n * \n * Fires after the window is normalized, that is, it returned from\n * maximized or minimized state. The <code>event</code> property contains the\n * corresponding mouse event.\n *  \n * Event: mxEvent.ACTIVATE\n * \n * Fires after a window is activated. The <code>previousWindow</code> property\n * contains the previous window. The event sender is the active window.\n * \n * Event: mxEvent.SHOW\n * \n * Fires after the window is shown. This event has no properties.\n * \n * Event: mxEvent.HIDE\n * \n * Fires after the window is hidden. This event has no properties.\n * \n * Event: mxEvent.CLOSE\n * \n * Fires before the window is closed. The <code>event</code> property contains\n * the corresponding mouse event.\n * \n * Event: mxEvent.DESTROY\n * \n * Fires before the window is destroyed. This event has no properties.\n * \n * Constructor: mxWindow\n * \n * Constructs a new window with the given dimension and title to display\n * the specified content. The window elements use the given style as a\n * prefix for the classnames of the respective window elements, namely,\n * the window title and window pane. The respective postfixes are appended\n * to the given stylename as follows:\n * \n *   style - Base style for the window.\n *   style+Title - Style for the window title.\n *   style+Pane - Style for the window pane.\n * \n * The default value for style is mxWindow, resulting in the following\n * classnames for the window elements: mxWindow, mxWindowTitle and\n * mxWindowPane.\n * \n * If replaceNode is given then the window replaces the given DOM node in\n * the document.\n * \n * Parameters:\n * \n * title - String that represents the title of the new window.\n * content - DOM node that is used as the window content.\n * x - X-coordinate of the window location.\n * y - Y-coordinate of the window location.\n * width - Width of the window.\n * height - Optional height of the window. Default is to match the height\n * of the content at the specified width.\n * minimizable - Optional boolean indicating if the window is minimizable.\n * Default is true.\n * movable - Optional boolean indicating if the window is movable. Default\n * is true.\n * replaceNode - Optional DOM node that the window should replace.\n * style - Optional base classname for the window elements. Default is\n * mxWindow.\n */\nfunction mxWindow(title, content, x, y, width, height, minimizable, movable, replaceNode, style)\n{\n\tif (content != null)\n\t{\n\t\tminimizable = (minimizable != null) ? minimizable : true;\n\t\tthis.content = content;\n\t\tthis.init(x, y, width, height, style);\n\t\t\n\t\tthis.installMaximizeHandler();\n\t\tthis.installMinimizeHandler();\n\t\tthis.installCloseHandler();\n\t\tthis.setMinimizable(minimizable);\n\t\tthis.setTitle(title);\n\t\t\n\t\tif (movable == null || movable)\n\t\t{\n\t\t\tthis.installMoveHandler();\n\t\t}\n\n\t\tif (replaceNode != null && replaceNode.parentNode != null)\n\t\t{\n\t\t\treplaceNode.parentNode.replaceChild(this.div, replaceNode);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.body.appendChild(this.div);\n\t\t}\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxWindow.prototype = new mxEventSource();\nmxWindow.prototype.constructor = mxWindow;\n\n/**\n * Variable: closeImage\n * \n * URL of the image to be used for the close icon in the titlebar.\n */\nmxWindow.prototype.closeImage = mxClient.imageBasePath + '/close.gif';\n\n/**\n * Variable: minimizeImage\n * \n * URL of the image to be used for the minimize icon in the titlebar.\n */\nmxWindow.prototype.minimizeImage = mxClient.imageBasePath + '/minimize.gif';\n\t\n/**\n * Variable: normalizeImage\n * \n * URL of the image to be used for the normalize icon in the titlebar.\n */\nmxWindow.prototype.normalizeImage = mxClient.imageBasePath + '/normalize.gif';\n\t\n/**\n * Variable: maximizeImage\n * \n * URL of the image to be used for the maximize icon in the titlebar.\n */\nmxWindow.prototype.maximizeImage = mxClient.imageBasePath + '/maximize.gif';\n\n/**\n * Variable: normalizeImage\n * \n * URL of the image to be used for the resize icon.\n */\nmxWindow.prototype.resizeImage = mxClient.imageBasePath + '/resize.gif';\n\n/**\n * Variable: visible\n * \n * Boolean flag that represents the visible state of the window.\n */\nmxWindow.prototype.visible = false;\n\n/**\n * Variable: minimumSize\n * \n * <mxRectangle> that specifies the minimum width and height of the window.\n * Default is (50, 40).\n */\nmxWindow.prototype.minimumSize = new mxRectangle(0, 0, 50, 40);\n\n/**\n * Variable: destroyOnClose\n * \n * Specifies if the window should be destroyed when it is closed. If this\n * is false then the window is hidden using <setVisible>. Default is true.\n */\nmxWindow.prototype.destroyOnClose = true;\n\n/**\n * Variable: contentHeightCorrection\n * \n * Defines the correction factor for computing the height of the contentWrapper.\n * Default is 6 for IE 7/8 standards mode and 2 for all other browsers and modes.\n */\nmxWindow.prototype.contentHeightCorrection = (document.documentMode == 8 || document.documentMode == 7) ? 6 : 2;\n\n/**\n * Variable: title\n * \n * Reference to the DOM node (TD) that contains the title.\n */\nmxWindow.prototype.title = null;\n\n/**\n * Variable: content\n * \n * Reference to the DOM node that represents the window content.\n */\nmxWindow.prototype.content = null;\n\n/**\n * Function: init\n * \n * Initializes the DOM tree that represents the window.\n */\nmxWindow.prototype.init = function(x, y, width, height, style)\n{\n\tstyle = (style != null) ? style : 'mxWindow';\n\t\n\tthis.div = document.createElement('div');\n\tthis.div.className = style;\n\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n\tthis.table = document.createElement('table');\n\tthis.table.className = style;\n\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.div.style.touchAction = 'none';\n\t}\n\t\n\t// Workaround for table size problems in FF\n\tif (width != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.width = width + 'px'; \n\t\t}\n\t\t\n\t\tthis.table.style.width = width + 'px';\n\t} \n\t\n\tif (height != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.height = height + 'px';\n\t\t}\n\t\t\n\t\tthis.table.style.height = height + 'px';\n\t}\t\t\n\t\n\t// Creates title row\n\tvar tbody = document.createElement('tbody');\n\tvar tr = document.createElement('tr');\n\t\n\tthis.title = document.createElement('td');\n\tthis.title.className = style + 'Title';\n\t\n\tthis.buttons = document.createElement('div');\n\tthis.buttons.style.position = 'absolute';\n\tthis.buttons.style.display = 'inline-block';\n\tthis.buttons.style.right = '4px';\n\tthis.buttons.style.top = '5px';\n\tthis.title.appendChild(this.buttons);\n\t\n\ttr.appendChild(this.title);\n\ttbody.appendChild(tr);\n\t\n\t// Creates content row and table cell\n\ttr = document.createElement('tr');\n\tthis.td = document.createElement('td');\n\tthis.td.className = style + 'Pane';\n\t\n\tif (document.documentMode == 7)\n\t{\n\t\tthis.td.style.height = '100%';\n\t}\n\n\tthis.contentWrapper = document.createElement('div');\n\tthis.contentWrapper.className = style + 'Pane';\n\tthis.contentWrapper.style.width = '100%';\n\tthis.contentWrapper.appendChild(this.content);\n\n\t// Workaround for div around div restricts height\n\t// of inner div if outerdiv has hidden overflow\n\tif (mxClient.IS_QUIRKS || this.content.nodeName.toUpperCase() != 'DIV')\n\t{\n\t\tthis.contentWrapper.style.height = '100%';\n\t}\n\n\t// Puts all content into the DOM\n\tthis.td.appendChild(this.contentWrapper);\n\ttr.appendChild(this.td);\n\ttbody.appendChild(tr);\n\tthis.table.appendChild(tbody);\n\tthis.div.appendChild(this.table);\n\t\n\t// Puts the window on top of other windows when clicked\n\tvar activator = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t});\n\t\n\tmxEvent.addGestureListeners(this.title, activator);\n\tmxEvent.addGestureListeners(this.table, activator);\n\n\tthis.hide();\n};\n\n/**\n * Function: setTitle\n * \n * Sets the window title to the given string. HTML markup inside the title\n * will be escaped.\n */\nmxWindow.prototype.setTitle = function(title)\n{\n\t// Removes all text content nodes (normally just one)\n\tvar child = this.title.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar next = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tchild.parentNode.removeChild(child);\n\t\t}\n\t\t\n\t\tchild = next;\n\t}\n\t\n\tmxUtils.write(this.title, title || '');\n\tthis.title.appendChild(this.buttons);\n};\n\n/**\n * Function: setScrollable\n * \n * Sets if the window contents should be scrollable.\n */\nmxWindow.prototype.setScrollable = function(scrollable)\n{\n\t// Workaround for hang in Presto 2.5.22 (Opera 10.5)\n\tif (navigator.userAgent == null ||\n\t\tnavigator.userAgent.indexOf('Presto/2.5') < 0)\n\t{\n\t\tif (scrollable)\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'auto';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: activate\n * \n * Puts the window on top of all other windows.\n */\nmxWindow.prototype.activate = function()\n{\n\tif (mxWindow.activeWindow != this)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(this.getElement());\n\t\tvar index = (style != null) ? style.zIndex : 3;\n\n\t\tif (mxWindow.activeWindow)\n\t\t{\n\t\t\tvar elt = mxWindow.activeWindow.getElement();\n\t\t\t\n\t\t\tif (elt != null && elt.style != null)\n\t\t\t{\n\t\t\t\telt.style.zIndex = index;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar previousWindow = mxWindow.activeWindow;\n\t\tthis.getElement().style.zIndex = parseInt(index) + 1;\n\t\tmxWindow.activeWindow = this;\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ACTIVATE, 'previousWindow', previousWindow));\n\t}\n};\n\n/**\n * Function: getElement\n * \n * Returuns the outermost DOM node that makes up the window.\n */\nmxWindow.prototype.getElement = function()\n{\n\treturn this.div;\n};\n\n/**\n * Function: fit\n * \n * Makes sure the window is inside the client area of the window.\n */\nmxWindow.prototype.fit = function()\n{\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: isResizable\n * \n * Returns true if the window is resizable.\n */\nmxWindow.prototype.isResizable = function()\n{\n\tif (this.resize != null)\n\t{\n\t\treturn this.resize.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setResizable\n * \n * Sets if the window should be resizable. To avoid interference with some\n * built-in features of IE10 and later, the use of the following code is\n * recommended if there are resizable <mxWindow>s in the page:\n * \n * (code)\n * if (mxClient.IS_POINTER)\n * {\n *   document.body.style.msTouchAction = 'none';\n * }\n * (end)\n */\nmxWindow.prototype.setResizable = function(resizable)\n{\n\tif (resizable)\n\t{\n\t\tif (this.resize == null)\n\t\t{\n\t\t\tthis.resize = document.createElement('img');\n\t\t\tthis.resize.style.position = 'absolute';\n\t\t\tthis.resize.style.bottom = '2px';\n\t\t\tthis.resize.style.right = '2px';\n\n\t\t\tthis.resize.setAttribute('src', this.resizeImage);\n\t\t\tthis.resize.style.cursor = 'nw-resize';\n\t\t\t\n\t\t\tvar startX = null;\n\t\t\tvar startY = null;\n\t\t\tvar width = null;\n\t\t\tvar height = null;\n\t\t\t\n\t\t\tvar start = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// LATER: pointerdown starting on border of resize does start\n\t\t\t\t// the drag operation but does not fire consecutive events via\n\t\t\t\t// one of the listeners below (does pan instead).\n\t\t\t\t// Workaround: document.body.style.msTouchAction = 'none'\n\t\t\t\tthis.activate();\n\t\t\t\tstartX = mxEvent.getClientX(evt);\n\t\t\t\tstartY = mxEvent.getClientY(evt);\n\t\t\t\twidth = this.div.offsetWidth;\n\t\t\t\theight = this.div.offsetHeight;\n\t\t\t\t\n\t\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_START, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\n\t\t\t\t\tthis.setSize(width + dx, height + dy);\n\t\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tstartX = null;\n\t\t\t\t\tstartY = null;\n\t\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_END, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(this.resize, start, dragHandler, dropHandler);\n\t\t\tthis.div.appendChild(this.resize);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tthis.resize.style.display = 'inline';\n\t\t}\n\t}\n\telse if (this.resize != null)\n\t{\n\t\tthis.resize.style.display = 'none';\n\t}\n};\n\t\n/**\n * Function: setSize\n * \n * Sets the size of the window.\n */\nmxWindow.prototype.setSize = function(width, height)\n{\n\twidth = Math.max(this.minimumSize.width, width);\n\theight = Math.max(this.minimumSize.height, height);\n\n\t// Workaround for table size problems in FF\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.div.style.width =  width + 'px';\n\t\tthis.div.style.height = height + 'px';\n\t}\n\t\n\tthis.table.style.width =  width + 'px';\n\tthis.table.style.height = height + 'px';\n\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n};\n\t\n/**\n * Function: setMinimizable\n * \n * Sets if the window is minimizable.\n */\nmxWindow.prototype.setMinimizable = function(minimizable)\n{\n\tthis.minimize.style.display = (minimizable) ? '' : 'none';\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns an <mxRectangle> that specifies the size for the minimized window.\n * A width or height of 0 means keep the existing width or height. This\n * implementation returns the height of the window title and keeps the width.\n */\nmxWindow.prototype.getMinimumSize = function()\n{\n\treturn new mxRectangle(0, 0, 0, this.title.offsetHeight);\n};\n\n/**\n * Function: installMinimizeHandler\n * \n * Installs the event listeners required for minimizing the window.\n */\nmxWindow.prototype.installMinimizeHandler = function()\n{\n\tthis.minimize = document.createElement('img');\n\t\n\tthis.minimize.setAttribute('src', this.minimizeImage);\n\tthis.minimize.setAttribute('title', 'Minimize');\n\tthis.minimize.style.cursor = 'pointer';\n\tthis.minimize.style.marginLeft = '2px';\n\tthis.minimize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.minimize);\n\t\n\tvar minimized = false;\n\tvar maxDisplay = null;\n\tvar height = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (!minimized)\n\t\t{\n\t\t\tminimized = true;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.normalizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Normalize');\n\t\t\tthis.contentWrapper.style.display = 'none';\n\t\t\tmaxDisplay = this.maximize.style.display;\n\t\t\t\n\t\t\tthis.maximize.style.display = 'none';\n\t\t\theight = this.table.style.height;\n\t\t\t\n\t\t\tvar minSize = this.getMinimumSize();\n\t\t\t\n\t\t\tif (minSize.height > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = minSize.height + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = minSize.height + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (minSize.width > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = minSize.width + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.width = minSize.width + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MINIMIZE, 'event', evt));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tminimized = false;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.minimizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Minimize');\n\t\t\tthis.contentWrapper.style.display = ''; // default\n\t\t\tthis.maximize.style.display = maxDisplay;\n\t\t\t\n\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.div.style.height = height;\n\t\t\t}\n\t\t\t\n\t\t\tthis.table.style.height = height;\n\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t}\n\t\t\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tmxEvent.addGestureListeners(this.minimize, funct);\n};\n\t\n/**\n * Function: setMaximizable\n * \n * Sets if the window is maximizable.\n */\nmxWindow.prototype.setMaximizable = function(maximizable)\n{\n\tthis.maximize.style.display = (maximizable) ? '' : 'none';\n};\n\n/**\n * Function: installMaximizeHandler\n * \n * Installs the event listeners required for maximizing the window.\n */\nmxWindow.prototype.installMaximizeHandler = function()\n{\n\tthis.maximize = document.createElement('img');\n\t\n\tthis.maximize.setAttribute('src', this.maximizeImage);\n\tthis.maximize.setAttribute('title', 'Maximize');\n\tthis.maximize.style.cursor = 'default';\n\tthis.maximize.style.marginLeft = '2px';\n\tthis.maximize.style.cursor = 'pointer';\n\tthis.maximize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.maximize);\n\t\n\tvar maximized = false;\n\tvar x = null;\n\tvar y = null;\n\tvar height = null;\n\tvar width = null;\n\tvar minDisplay = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (this.maximize.style.display != 'none')\n\t\t{\n\t\t\tif (!maximized)\n\t\t\t{\n\t\t\t\tmaximized = true;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.normalizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Normalize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tminDisplay = this.minimize.style.display;\n\t\t\t\tthis.minimize.style.display = 'none';\n\t\t\t\t\n\t\t\t\t// Saves window state\n\t\t\t\tx = parseInt(this.div.style.left);\n\t\t\t\ty = parseInt(this.div.style.top);\n\t\t\t\theight = this.table.style.height;\n\t\t\t\twidth = this.table.style.width;\n\n\t\t\t\tthis.div.style.left = '0px';\n\t\t\t\tthis.div.style.top = '0px';\n\t\t\t\tvar docHeight = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight || 0);\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\t\tthis.div.style.height = (docHeight - 2) + 'px';\n\t\t\t\t}\n\n\t\t\t\tthis.table.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\tthis.table.style.height = (docHeight - 2) + 'px';\n\t\t\t\t\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t\t}\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MAXIMIZE, 'event', evt));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmaximized = false;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.maximizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Maximize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tthis.minimize.style.display = minDisplay;\n\n\t\t\t\t// Restores window state\n\t\t\t\tthis.div.style.left = x+'px';\n\t\t\t\tthis.div.style.top = y+'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = height;\n\t\t\t\t\tthis.div.style.width = width;\n\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = height;\n\t\t\t\tthis.table.style.width = width;\n\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n\t\n\tmxEvent.addGestureListeners(this.maximize, funct);\n\tmxEvent.addListener(this.title, 'dblclick', funct);\n};\n\t\n/**\n * Function: installMoveHandler\n * \n * Installs the event listeners required for moving the window.\n */\nmxWindow.prototype.installMoveHandler = function()\n{\n\tthis.title.style.cursor = 'move';\n\t\n\tmxEvent.addGestureListeners(this.title,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar startX = mxEvent.getClientX(evt);\n\t\t\tvar startY = mxEvent.getClientY(evt);\n\t\t\tvar x = this.getX();\n\t\t\tvar y = this.getY();\n\t\t\t\t\t\t\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\t\t\tthis.setLocation(x + dx, y + dy);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_END, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_START, 'event', evt));\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.title.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: setLocation\n * \n * Sets the upper, left corner of the window.\n */\n mxWindow.prototype.setLocation = function(x, y)\n {\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n };\n\n/**\n * Function: getX\n *\n * Returns the current position on the x-axis.\n */\nmxWindow.prototype.getX = function()\n{\n\treturn parseInt(this.div.style.left);\n};\n\n/**\n * Function: getY\n *\n * Returns the current position on the y-axis.\n */\nmxWindow.prototype.getY = function()\n{\n\treturn parseInt(this.div.style.top);\n};\n\n/**\n * Function: installCloseHandler\n *\n * Adds the <closeImage> as a new image node in <closeImg> and installs the\n * <close> event.\n */\nmxWindow.prototype.installCloseHandler = function()\n{\n\tthis.closeImg = document.createElement('img');\n\t\n\tthis.closeImg.setAttribute('src', this.closeImage);\n\tthis.closeImg.setAttribute('title', 'Close');\n\tthis.closeImg.style.marginLeft = '2px';\n\tthis.closeImg.style.cursor = 'pointer';\n\tthis.closeImg.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.closeImg);\n\n\tmxEvent.addGestureListeners(this.closeImg,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CLOSE, 'event', evt));\n\t\t\t\n\t\t\tif (this.destroyOnClose)\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.setVisible(false);\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n};\n\n/**\n * Function: setImage\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * image - URL of the image to be used.\n */\nmxWindow.prototype.setImage = function(image)\n{\n\tthis.image = document.createElement('img');\n\tthis.image.setAttribute('src', image);\n\tthis.image.setAttribute('align', 'left');\n\tthis.image.style.marginRight = '4px';\n\tthis.image.style.marginLeft = '0px';\n\tthis.image.style.marginTop = '-2px';\n\t\n\tthis.title.insertBefore(this.image, this.title.firstChild);\n};\n\n/**\n * Function: setClosable\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * closable - Boolean specifying if the window should be closable.\n */\nmxWindow.prototype.setClosable = function(closable)\n{\n\tthis.closeImg.style.display = (closable) ? '' : 'none';\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the window is visible.\n */\nmxWindow.prototype.isVisible = function()\n{\n\tif (this.div != null)\n\t{\n\t\treturn this.div.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setVisible\n *\n * Shows or hides the window depending on the given flag.\n * \n * Parameters:\n * \n * visible - Boolean indicating if the window should be made visible.\n */\nmxWindow.prototype.setVisible = function(visible)\n{\n\tif (this.div != null && this.isVisible() != visible)\n\t{\n\t\tif (visible)\n\t\t{\n\t\t\tthis.show();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.hide();\n\t\t}\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the window.\n */\nmxWindow.prototype.show = function()\n{\n\tthis.div.style.display = '';\n\tthis.activate();\n\t\n\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\n\tif (!mxClient.IS_QUIRKS && (style.overflow == 'auto' || this.resize != null) &&\n\t\tthis.contentWrapper.style.display != 'none')\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n};\n\n/**\n * Function: hide\n *\n * Hides the window.\n */\nmxWindow.prototype.hide = function()\n{\n\tthis.div.style.display = 'none';\n\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n};\n\n/**\n * Function: destroy\n *\n * Destroys the window and removes all associated resources. Fires a\n * <destroy> event prior to destroying the window.\n */\nmxWindow.prototype.destroy = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.DESTROY));\n\t\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\tthis.div.parentNode.removeChild(this.div);\n\t\tthis.div = null;\n\t}\n\t\n\tthis.title = null;\n\tthis.content = null;\n\tthis.contentWrapper = null;\n};\n\n__mxOutput.mxWindow = typeof mxWindow !== 'undefined' ? mxWindow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxForm\n * \n * A simple class for creating HTML forms.\n * \n * Constructor: mxForm\n * \n * Creates a HTML table using the specified classname.\n */\nfunction mxForm(className)\n{\n\tthis.table = document.createElement('table');\n\tthis.table.className = className;\n\tthis.body = document.createElement('tbody');\n\t\n\tthis.table.appendChild(this.body);\n};\n\n/**\n * Variable: table\n * \n * Holds the DOM node that represents the table.\n */\nmxForm.prototype.table = null;\n\n/**\n * Variable: body\n * \n * Holds the DOM node that represents the tbody (table body). New rows\n * can be added to this object using DOM API.\n */\nmxForm.prototype.body = false;\n\n/**\n * Function: getTable\n * \n * Returns the table that contains this form.\n */\nmxForm.prototype.getTable = function()\n{\n\treturn this.table;\n};\n\n/**\n * Function: addButtons\n * \n * Helper method to add an OK and Cancel button using the respective\n * functions.\n */\nmxForm.prototype.addButtons = function(okFunct, cancelFunct)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\ttr.appendChild(td);\n\ttd = document.createElement('td');\n\n\t// Adds the ok button\n\tvar button = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('ok') || 'OK');\n\ttd.appendChild(button);\n\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tokFunct();\n\t});\n\t\n\t// Adds the cancel button\n\tbutton = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('cancel') || 'Cancel');\n\ttd.appendChild(button);\n\t\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tcancelFunct();\n\t});\n\t\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n};\n\n/**\n * Function: addText\n * \n * Adds an input for the given name, type and value and returns it.\n */\nmxForm.prototype.addText = function(name, value, type)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', type || 'text');\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCheckbox\n * \n * Adds a checkbox for the given name and value and returns the textfield.\n */\nmxForm.prototype.addCheckbox = function(name, value)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', 'checkbox');\n\tthis.addField(name, input);\n\n\t// IE can only change the checked value if the input is inside the DOM\n\tif (value)\n\t{\n\t\tinput.checked = true;\n\t}\n\n\treturn input;\n};\n\n/**\n * Function: addTextarea\n * \n * Adds a textarea for the given name and value and returns the textarea.\n */\nmxForm.prototype.addTextarea = function(name, value, rows)\n{\n\tvar input = document.createElement('textarea');\n\t\n\tif (mxClient.IS_NS)\n\t{\n\t\trows--;\n\t}\n\t\n\tinput.setAttribute('rows', rows || 2);\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCombo\n * \n * Adds a combo for the given name and returns the combo.\n */\nmxForm.prototype.addCombo = function(name, isMultiSelect, size)\n{\n\tvar select = document.createElement('select');\n\t\n\tif (size != null)\n\t{\n\t\tselect.setAttribute('size', size);\n\t}\n\t\n\tif (isMultiSelect)\n\t{\n\t\tselect.setAttribute('multiple', 'true');\n\t}\n\t\n\treturn this.addField(name, select);\n};\n\n/**\n * Function: addOption\n * \n * Adds an option for the given label to the specified combo.\n */\nmxForm.prototype.addOption = function(combo, label, value, isSelected)\n{\n\tvar option = document.createElement('option');\n\t\n\tmxUtils.writeln(option, label);\n\toption.setAttribute('value', value);\n\t\n\tif (isSelected)\n\t{\n\t\toption.setAttribute('selected', isSelected);\n\t}\n\t\n\tcombo.appendChild(option);\n};\n\n/**\n * Function: addField\n * \n * Adds a new row with the name and the input field in two columns and\n * returns the given input.\n */\nmxForm.prototype.addField = function(name, input)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\tmxUtils.write(td, name);\n\ttr.appendChild(td);\n\t\n\ttd = document.createElement('td');\n\ttd.appendChild(input);\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n\t\n\treturn input;\n};\n\n__mxOutput.mxForm = typeof mxForm !== 'undefined' ? mxForm : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImage\n *\n * Encapsulates the URL, width and height of an image.\n * \n * Constructor: mxImage\n * \n * Constructs a new image.\n */\nfunction mxImage(src, width, height)\n{\n\tthis.src = src;\n\tthis.width = width;\n\tthis.height = height;\n};\n\n/**\n * Variable: src\n *\n * String that specifies the URL of the image.\n */\nmxImage.prototype.src = null;\n\n/**\n * Variable: width\n *\n * Integer that specifies the width of the image.\n */\nmxImage.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Integer that specifies the height of the image.\n */\nmxImage.prototype.height = null;\n\n__mxOutput.mxImage = typeof mxImage !== 'undefined' ? mxImage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDivResizer\n * \n * Maintains the size of a div element in Internet Explorer. This is a\n * workaround for the right and bottom style being ignored in IE.\n * \n * If you need a div to cover the scrollwidth and -height of a document,\n * then you can use this class as follows:\n * \n * (code)\n * var resizer = new mxDivResizer(background);\n * resizer.getDocumentHeight = function()\n * {\n *   return document.body.scrollHeight;\n * }\n * resizer.getDocumentWidth = function()\n * {\n *   return document.body.scrollWidth;\n * }\n * resizer.resize();\n * (end)\n * \n * Constructor: mxDivResizer\n * \n * Constructs an object that maintains the size of a div\n * element when the window is being resized. This is only\n * required for Internet Explorer as it ignores the respective\n * stylesheet information for DIV elements.\n * \n * Parameters:\n * \n * div - Reference to the DOM node whose size should be maintained.\n * container - Optional Container that contains the div. Default is the\n * window.\n */\nfunction mxDivResizer(div, container)\n{\n\tif (div.nodeName.toLowerCase() == 'div')\n\t{\n\t\tif (container == null)\n\t\t{\n\t\t\tcontainer = window;\n\t\t}\n\n\t\tthis.div = div;\n\t\tvar style = mxUtils.getCurrentStyle(div);\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tthis.resizeWidth = style.width == 'auto';\n\t\t\tthis.resizeHeight = style.height == 'auto';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(container, 'resize',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (!this.handlingResize)\n\t\t\t\t{\n\t\t\t\t\tthis.handlingResize = true;\n\t\t\t\t\tthis.resize();\n\t\t\t\t\tthis.handlingResize = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tthis.resize();\n\t}\n};\n\n/**\n * Function: resizeWidth\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.resizeWidth = true;\n\n/**\n * Function: resizeHeight\n * \n * Boolean specifying if the height should be updated.\n */\nmxDivResizer.prototype.resizeHeight = true;\n\n/**\n * Function: handlingResize\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.handlingResize = false;\n\n/**\n * Function: resize\n * \n * Updates the style of the DIV after the window has been resized.\n */\nmxDivResizer.prototype.resize = function()\n{\n\tvar w = this.getDocumentWidth();\n\tvar h = this.getDocumentHeight();\n\n\tvar l = parseInt(this.div.style.left);\n\tvar r = parseInt(this.div.style.right);\n\tvar t = parseInt(this.div.style.top);\n\tvar b = parseInt(this.div.style.bottom);\n\t\n\tif (this.resizeWidth &&\n\t\t!isNaN(l) &&\n\t\t!isNaN(r) &&\n\t\tl >= 0 &&\n\t\tr >= 0 &&\n\t\tw - r - l > 0)\n\t{\n\t\tthis.div.style.width = (w - r - l)+'px';\n\t}\n\t\n\tif (this.resizeHeight &&\n\t\t!isNaN(t) &&\n\t\t!isNaN(b) &&\n\t\tt >= 0 &&\n\t\tb >= 0 &&\n\t\th - t - b > 0)\n\t{\n\t\tthis.div.style.height = (h - t - b)+'px';\n\t}\n};\n\n/**\n * Function: getDocumentWidth\n * \n * Hook for subclassers to return the width of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentWidth = function()\n{\n\treturn document.body.clientWidth;\n};\n\n/**\n * Function: getDocumentHeight\n * \n * Hook for subclassers to return the height of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentHeight = function()\n{\n\treturn document.body.clientHeight;\n};\n\n__mxOutput.mxDivResizer = typeof mxDivResizer !== 'undefined' ? mxDivResizer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDragSource\n * \n * Wrapper to create a drag source from a DOM element so that the element can\n * be dragged over a graph and dropped into the graph as a new cell.\n * \n * Problem is that in the dropHandler the current preview location is not\n * available, so the preview and the dropHandler must match.\n * \n * Constructor: mxDragSource\n * \n * Constructs a new drag source for the given element.\n */\nfunction mxDragSource(element, dropHandler)\n{\n\tthis.element = element;\n\tthis.dropHandler = dropHandler;\n\t\n\t// Handles a drag gesture on the element\n\tmxEvent.addGestureListeners(element, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseDown(evt);\n\t}));\n\t\n\t// Prevents native drag and drop\n\tmxEvent.addListener(element, 'dragstart', function(evt)\n\t{\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tthis.eventConsumer = function(sender, evt)\n\t{\n\t\tvar evtName = evt.getProperty('eventName');\n\t\tvar me = evt.getProperty('event');\n\t\t\n\t\tif (evtName != mxEvent.MOUSE_DOWN)\n\t\t{\n\t\t\tme.consume();\n\t\t}\n\t};\n};\n\n/**\n * Variable: element\n *\n * Reference to the DOM node which was made draggable.\n */\nmxDragSource.prototype.element = null;\n\n/**\n * Variable: dropHandler\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dropHandler = null;\n\n/**\n * Variable: dragOffset\n *\n * <mxPoint> that specifies the offset of the <dragElement>. Default is null.\n */\nmxDragSource.prototype.dragOffset = null;\n\n/**\n * Variable: dragElement\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dragElement = null;\n\n/**\n * Variable: previewElement\n *\n * Optional <mxRectangle> that specifies the unscaled size of the preview.\n */\nmxDragSource.prototype.previewElement = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if this drag source is enabled. Default is true.\n */\nmxDragSource.prototype.enabled = true;\n\n/**\n * Variable: currentGraph\n *\n * Reference to the <mxGraph> that is the current drop target.\n */\nmxDragSource.prototype.currentGraph = null;\n\n/**\n * Variable: currentDropTarget\n *\n * Holds the current drop target under the mouse.\n */\nmxDragSource.prototype.currentDropTarget = null;\n\n/**\n * Variable: currentPoint\n *\n * Holds the current drop location.\n */\nmxDragSource.prototype.currentPoint = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentGuide = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentHighlight = null;\n\n/**\n * Variable: autoscroll\n *\n * Specifies if the graph should scroll automatically. Default is true.\n */\nmxDragSource.prototype.autoscroll = true;\n\n/**\n * Variable: guidesEnabled\n *\n * Specifies if <mxGuide> should be enabled. Default is true.\n */\nmxDragSource.prototype.guidesEnabled = true;\n\n/**\n * Variable: gridEnabled\n *\n * Specifies if the grid should be allowed. Default is true.\n */\nmxDragSource.prototype.gridEnabled = true;\n\n/**\n * Variable: highlightDropTargets\n *\n * Specifies if drop targets should be highlighted. Default is true.\n */\nmxDragSource.prototype.highlightDropTargets = true;\n\n/**\n * Variable: dragElementZIndex\n * \n * ZIndex for the drag element. Default is 100.\n */\nmxDragSource.prototype.dragElementZIndex = 100;\n\n/**\n * Variable: dragElementOpacity\n * \n * Opacity of the drag element in %. Default is 70.\n */\nmxDragSource.prototype.dragElementOpacity = 70;\n\n/**\n * Variable: checkEventSource\n * \n * Whether the event source should be checked in <graphContainerEvent>. Default\n * is true.\n */\nmxDragSource.prototype.checkEventSource = true;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxDragSource.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxDragSource.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isGuidesEnabled\n * \n * Returns <guidesEnabled>.\n */\nmxDragSource.prototype.isGuidesEnabled = function()\n{\n\treturn this.guidesEnabled;\n};\n\n/**\n * Function: setGuidesEnabled\n * \n * Sets <guidesEnabled>.\n */\nmxDragSource.prototype.setGuidesEnabled = function(value)\n{\n\tthis.guidesEnabled = value;\n};\n\n/**\n * Function: isGridEnabled\n * \n * Returns <gridEnabled>.\n */\nmxDragSource.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Sets <gridEnabled>.\n */\nmxDragSource.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: getGraphForEvent\n * \n * Returns the graph for the given mouse event. This implementation returns\n * null.\n */\nmxDragSource.prototype.getGraphForEvent = function(evt)\n{\n\treturn null;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.getDropTarget = function(graph, x, y, evt)\n{\n\treturn graph.getCellAt(x, y);\n};\n\n/**\n * Function: createDragElement\n * \n * Creates and returns a clone of the <dragElementPrototype> or the <element>\n * if the former is not defined.\n */\nmxDragSource.prototype.createDragElement = function(evt)\n{\n\treturn this.element.cloneNode(true);\n};\n\n/**\n * Function: createPreviewElement\n * \n * Creates and returns an element which can be used as a preview in the given\n * graph.\n */\nmxDragSource.prototype.createPreviewElement = function(graph)\n{\n\treturn null;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this drag source is active.\n */\nmxDragSource.prototype.isActive = function()\n{\n\treturn this.mouseMoveHandler != null;\n};\n\n/**\n * Function: reset\n * \n * Stops and removes everything and restores the state of the object.\n */\nmxDragSource.prototype.reset = function()\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\t\n\tthis.removeDragElement();\n\tthis.removeListeners();\n\tthis.stopDrag();\n};\n\n/**\n * Function: mouseDown\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n * \n * To ignore popup menu events for a drag source, this function can be\n * overridden as follows.\n * \n * (code)\n * var mouseDown = dragSource.mouseDown;\n * \n * dragSource.mouseDown = function(evt)\n * {\n *   if (!mxEvent.isPopupTrigger(evt))\n *   {\n *     mouseDown.apply(this, arguments);\n *   }\n * };\n * (end)\n */\nmxDragSource.prototype.mouseDown = function(evt)\n{\n\tif (this.enabled && !mxEvent.isConsumed(evt) && this.mouseMoveHandler == null)\n\t{\n\t\tthis.startDrag(evt);\n\t\tthis.mouseMoveHandler = mxUtils.bind(this, this.mouseMove);\n\t\tthis.mouseUpHandler = mxUtils.bind(this, this.mouseUp);\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t\n\t\tif (mxClient.IS_TOUCH && !mxEvent.isMouseEvent(evt))\n\t\t{\n\t\t\tthis.eventSource = mxEvent.getSource(evt);\n\t\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t}\n\t}\n};\n\n/**\n * Function: startDrag\n * \n * Creates the <dragElement> using <createDragElement>.\n */\nmxDragSource.prototype.startDrag = function(evt)\n{\n\tthis.dragElement = this.createDragElement(evt);\n\tthis.dragElement.style.position = 'absolute';\n\tthis.dragElement.style.zIndex = this.dragElementZIndex;\n\tmxUtils.setOpacity(this.dragElement, this.dragElementOpacity);\n\n\tif (this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.dragElement.style.pointerEvents = 'none';\n\t}\n};\n\n/**\n * Function: stopDrag\n * \n * Invokes <removeDragElement>.\n */\nmxDragSource.prototype.stopDrag = function()\n{\n\t// LATER: This used to have a mouse event. If that is still needed we need to add another\n\t// final call to the DnD protocol to add a cleanup step in the case of escape press, which\n\t// is not associated with a mouse event and which currently calles this method.\n\tthis.removeDragElement();\n};\n\n/**\n * Function: removeDragElement\n * \n * Removes and destroys the <dragElement>.\n */\nmxDragSource.prototype.removeDragElement = function()\n{\n\tif (this.dragElement != null)\n\t{\n\t\tif (this.dragElement.parentNode != null)\n\t\t{\n\t\t\tthis.dragElement.parentNode.removeChild(this.dragElement);\n\t\t}\n\t\t\n\t\tthis.dragElement = null;\n\t}\n};\n\n/**\n * Function: getElementForEvent\n * \n * Returns the topmost element under the given event.\n */\nmxDragSource.prototype.getElementForEvent = function(evt)\n{\n\treturn ((mxEvent.isTouchEvent(evt) || mxEvent.isPenEvent(evt)) ?\n\t\t\tdocument.elementFromPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt)) :\n\t\t\t\tmxEvent.getSource(evt));\n};\n\n/**\n * Function: graphContainsEvent\n * \n * Returns true if the given graph contains the given event.\n */\nmxDragSource.prototype.graphContainsEvent = function(graph, evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin();\n\tvar elt = this.getElementForEvent(evt);\n\t\n\tif (this.checkEventSource)\n\t{\n\t\twhile (elt != null && elt != graph.container)\n\t\t{\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\n\t// Checks if event is inside the bounds of the graph container\n\treturn elt != null && x >= offset.x - origin.x && y >= offset.y - origin.y &&\n\t\tx <= offset.x - origin.x + graph.container.offsetWidth &&\n\t\ty <= offset.y - origin.y + graph.container.offsetHeight;\n};\n\n/**\n * Function: mouseMove\n * \n * Gets the graph for the given event using <getGraphForEvent>, updates the\n * <currentGraph>, calling <dragEnter> and <dragExit> on the new and old graph,\n * respectively, and invokes <dragOver> if <currentGraph> is not null.\n */\nmxDragSource.prototype.mouseMove = function(evt)\n{\n\tvar graph = this.getGraphForEvent(evt);\n\t\n\t// Checks if event is inside the bounds of the graph container\n\tif (graph != null && !this.graphContainsEvent(graph, evt))\n\t{\n\t\tgraph = null;\n\t}\n\n\tif (graph != this.currentGraph)\n\t{\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragExit(this.currentGraph, evt);\n\t\t}\n\t\t\n\t\tthis.currentGraph = graph;\n\t\t\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragEnter(this.currentGraph, evt);\n\t\t}\n\t}\n\t\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragOver(this.currentGraph, evt);\n\t}\n\n\tif (this.dragElement != null && (this.previewElement == null || this.previewElement.style.visibility != 'visible'))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\t\n\t\tif (this.dragElement.parentNode == null)\n\t\t{\n\t\t\tdocument.body.appendChild(this.dragElement);\n\t\t}\n\n\t\tthis.dragElement.style.visibility = 'visible';\n\t\t\n\t\tif (this.dragOffset != null)\n\t\t{\n\t\t\tx += this.dragOffset.x;\n\t\t\ty += this.dragOffset.y;\n\t\t}\n\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tthis.dragElement.style.left = (x + offset.x) + 'px';\n\t\tthis.dragElement.style.top = (y + offset.y) + 'px';\n\t}\n\telse if (this.dragElement != null)\n\t{\n\t\tthis.dragElement.style.visibility = 'hidden';\n\t}\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: mouseUp\n * \n * Processes the mouse up event and invokes <drop>, <dragExit> and <stopDrag>\n * as required.\n */\nmxDragSource.prototype.mouseUp = function(evt)\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tif (this.currentPoint != null && (this.previewElement == null ||\n\t\t\tthis.previewElement.style.visibility != 'hidden'))\n\t\t{\n\t\t\tvar scale = this.currentGraph.view.scale;\n\t\t\tvar tr = this.currentGraph.view.translate;\n\t\t\tvar x = this.currentPoint.x / scale - tr.x;\n\t\t\tvar y = this.currentPoint.y / scale - tr.y;\n\t\t\t\n\t\t\tthis.drop(this.currentGraph, evt, this.currentDropTarget, x, y);\n\t\t}\n\t\t\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\n\tthis.stopDrag();\n\tthis.removeListeners();\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: removeListeners\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.removeListeners = function()\n{\n\tif (this.eventSource != null)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\tthis.eventSource = null;\n\t}\n\t\n\tmxEvent.removeGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\tthis.mouseMoveHandler = null;\n\tthis.mouseUpHandler = null;\n};\n\n/**\n * Function: dragEnter\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.dragEnter = function(graph, evt)\n{\n\tgraph.isMouseDown = true;\n\tgraph.isMouseTrigger = mxEvent.isMouseEvent(evt);\n\tthis.previewElement = this.createPreviewElement(graph);\n\t\n\tif (this.previewElement != null && this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.previewElement.style.pointerEvents = 'none';\n\t}\n\t\n\t// Guide is only needed if preview element is used\n\tif (this.isGuidesEnabled() && this.previewElement != null)\n\t{\n\t\tthis.currentGuide = new mxGuide(graph, graph.graphHandler.getGuideStates());\n\t}\n\t\n\tif (this.highlightDropTargets)\n\t{\n\t\tthis.currentHighlight = new mxCellHighlight(graph, mxConstants.DROP_TARGET_COLOR);\n\t}\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.eventConsumer);\n};\n\n/**\n * Function: dragExit\n * \n * Deactivates the given graph as a drop target.\n */\nmxDragSource.prototype.dragExit = function(graph, evt)\n{\n\tthis.currentDropTarget = null;\n\tthis.currentPoint = null;\n\tgraph.isMouseDown = false;\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.removeListener(this.eventConsumer);\n\t\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode != null)\n\t\t{\n\t\t\tthis.previewElement.parentNode.removeChild(this.previewElement);\n\t\t}\n\t\t\n\t\tthis.previewElement = null;\n\t}\n\t\n\tif (this.currentGuide != null)\n\t{\n\t\tthis.currentGuide.destroy();\n\t\tthis.currentGuide = null;\n\t}\n\t\n\tif (this.currentHighlight != null)\n\t{\n\t\tthis.currentHighlight.destroy();\n\t\tthis.currentHighlight = null;\n\t}\n};\n\n/**\n * Function: dragOver\n * \n * Implements autoscroll, updates the <currentPoint>, highlights any drop\n * targets and updates the preview.\n */\nmxDragSource.prototype.dragOver = function(graph, evt)\n{\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin(graph.container);\n\tvar x = mxEvent.getClientX(evt) - offset.x + origin.x - graph.panDx;\n\tvar y = mxEvent.getClientY(evt) - offset.y + origin.y - graph.panDy;\n\n\tif (graph.autoScroll && (this.autoscroll == null || this.autoscroll))\n\t{\n\t\tgraph.scrollPointToVisible(x, y, graph.autoExtend);\n\t}\n\n\t// Highlights the drop target under the mouse\n\tif (this.currentHighlight != null && graph.isDropEnabled())\n\t{\n\t\tthis.currentDropTarget = this.getDropTarget(graph, x, y, evt);\n\t\tvar state = graph.getView().getState(this.currentDropTarget);\n\t\tthis.currentHighlight.highlight(state);\n\t}\n\n\t// Updates the location of the preview\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode == null)\n\t\t{\n\t\t\tgraph.container.appendChild(this.previewElement);\n\t\t\t\n\t\t\tthis.previewElement.style.zIndex = '3';\n\t\t\tthis.previewElement.style.position = 'absolute';\n\t\t}\n\t\t\n\t\tvar gridEnabled = this.isGridEnabled() && graph.isGridEnabledEvent(evt);\n\t\tvar hideGuide = true;\n\n\t\t// Grid and guides\n\t\tif (this.currentGuide != null && this.currentGuide.isEnabledForEvent(evt))\n\t\t{\n\t\t\t// LATER: HTML preview appears smaller than SVG preview\n\t\t\tvar w = parseInt(this.previewElement.style.width);\n\t\t\tvar h = parseInt(this.previewElement.style.height);\n\t\t\tvar bounds = new mxRectangle(0, 0, w, h);\n\t\t\tvar delta = new mxPoint(x, y);\n\t\t\tdelta = this.currentGuide.move(bounds, delta, gridEnabled, true);\n\t\t\thideGuide = false;\n\t\t\tx = delta.x;\n\t\t\ty = delta.y;\n\t\t}\n\t\telse if (gridEnabled)\n\t\t{\n\t\t\tvar scale = graph.view.scale;\n\t\t\tvar tr = graph.view.translate;\n\t\t\tvar off = graph.gridSize / 2;\n\t\t\tx = (graph.snap(x / scale - tr.x - off) + tr.x) * scale;\n\t\t\ty = (graph.snap(y / scale - tr.y - off) + tr.y) * scale;\n\t\t}\n\t\t\n\t\tif (this.currentGuide != null && hideGuide)\n\t\t{\n\t\t\tthis.currentGuide.hide();\n\t\t}\n\t\t\n\t\tif (this.previewOffset != null)\n\t\t{\n\t\t\tx += this.previewOffset.x;\n\t\t\ty += this.previewOffset.y;\n\t\t}\n\n\t\tthis.previewElement.style.left = Math.round(x) + 'px';\n\t\tthis.previewElement.style.top = Math.round(y) + 'px';\n\t\tthis.previewElement.style.visibility = 'visible';\n\t}\n\t\n\tthis.currentPoint = new mxPoint(x, y);\n};\n\n/**\n * Function: drop\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.drop = function(graph, evt, dropTarget, x, y)\n{\n\tthis.dropHandler.apply(this, arguments);\n\t\n\t// Had to move this to after the insert because it will\n\t// affect the scrollbars of the window in IE to try and\n\t// make the complete container visible.\n\t// LATER: Should be made optional.\n\tif (graph.container.style.visibility != 'hidden')\n\t{\n\t\tgraph.container.focus();\n\t}\n};\n\n__mxOutput.mxDragSource = typeof mxDragSource !== 'undefined' ? mxDragSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxToolbar\n * \n * Creates a toolbar inside a given DOM node. The toolbar may contain icons,\n * buttons and combo boxes.\n * \n * Event: mxEvent.SELECT\n * \n * Fires when an item was selected in the toolbar. The <code>function</code>\n * property contains the function that was selected in <selectMode>.\n * \n * Constructor: mxToolbar\n * \n * Constructs a toolbar in the specified container.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nfunction mxToolbar(container)\n{\n\tthis.container = container;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxToolbar.prototype = new mxEventSource();\nmxToolbar.prototype.constructor = mxToolbar;\n\n/**\n * Variable: container\n * \n * Reference to the DOM nodes that contains the toolbar.\n */\nmxToolbar.prototype.container = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxToolbar.prototype.enabled = true;\n\n/**\n * Variable: noReset\n * \n * Specifies if <resetMode> requires a forced flag of true for resetting\n * the current mode in the toolbar. Default is false. This is set to true\n * if the toolbar item is double clicked to avoid a reset after a single\n * use of the item.\n */\nmxToolbar.prototype.noReset = false;\n\n/**\n * Variable: updateDefaultMode\n * \n * Boolean indicating if the default mode should be the last selected\n * switch mode or the first inserted switch mode. Default is true, that\n * is the last selected switch mode is the default mode. The default mode\n * is the mode to be selected after a reset of the toolbar. If this is\n * false, then the default mode is the first inserted mode item regardless\n * of what was last selected. Otherwise, the selected item after a reset is\n * the previously selected item.\n */\nmxToolbar.prototype.updateDefaultMode = true;\n\n/**\n * Function: addItem\n * \n * Adds the given function as an image with the specified title and icon\n * and returns the new image node.\n * \n * Parameters:\n * \n * title - Optional string that is used as the tooltip.\n * icon - Optional URL of the image to be used. If no URL is given, then a\n * button is created.\n * funct - Function to execute on a mouse click.\n * pressedIcon - Optional URL of the pressed image. Default is a gray\n * background.\n * style - Optional style classname. Default is mxToolbarItem.\n * factoryMethod - Optional factory method for popup menu, eg.\n * function(menu, evt, cell) { menu.addItem('Hello, World!'); }\n */\nmxToolbar.prototype.addItem = function(title, icon, funct, pressedIcon, style, factoryMethod)\n{\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\tvar initialClassName = style || ((factoryMethod != null) ?\n\t\t\t'mxToolbarMode' : 'mxToolbarItem');\n\timg.className = initialClassName;\n\timg.setAttribute('src', icon);\n\t\n\tif (title != null)\n\t{\n\t\tif (icon != null)\n\t\t{\n\t\t\timg.setAttribute('title', title);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.write(img, title);\n\t\t}\n\t}\n\t\n\tthis.container.appendChild(img);\n\n\t// Invokes the function on a click on the toolbar item\n\tif (funct != null)\n\t{\n\t\tmxEvent.addListener(img, 'click', funct);\n\t\t\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(img, 'touchend', funct);\n\t\t}\n\t}\n\n\tvar mouseHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', icon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = '';\n\t\t}\n\t});\n\n\t// Highlights the toolbar item with a gray background\n\t// while it is being clicked with the mouse\n\tmxEvent.addGestureListeners(img, mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', pressedIcon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = 'gray';\n\t\t}\n\t\t\n\t\t// Popup Menu\n\t\tif (factoryMethod != null)\n\t\t{\n\t\t\tif (this.menu == null)\n\t\t\t{\n\t\t\t\tthis.menu = new mxPopupMenu();\n\t\t\t\tthis.menu.init();\n\t\t\t}\n\t\t\t\n\t\t\tvar last = this.currentImg;\n\t\t\t\n\t\t\tif (this.menu.isMenuShowing())\n\t\t\t{\n\t\t\t\tthis.menu.hideMenu();\n\t\t\t}\n\t\t\t\n\t\t\tif (last != img)\n\t\t\t{\n\t\t\t\t// Redirects factory method to local factory method\n\t\t\t\tthis.currentImg = img;\n\t\t\t\tthis.menu.factoryMethod = factoryMethod;\n\t\t\t\t\n\t\t\t\tvar point = new mxPoint(\n\t\t\t\t\timg.offsetLeft,\n\t\t\t\t\timg.offsetTop + img.offsetHeight);\n\t\t\t\tthis.menu.popup(point.x, point.y, null, evt);\n\n\t\t\t\t// Sets and overrides to restore classname\n\t\t\t\tif (this.menu.isMenuShowing())\n\t\t\t\t{\n\t\t\t\t\timg.className = initialClassName + 'Selected';\n\t\t\t\t\t\n\t\t\t\t\tthis.menu.hideMenu = function()\n\t\t\t\t\t{\n\t\t\t\t\t\tmxPopupMenu.prototype.hideMenu.apply(this);\n\t\t\t\t\t\timg.className = initialClassName;\n\t\t\t\t\t\tthis.currentImg = null;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}), null, mouseHandler);\n\n\tmxEvent.addListener(img, 'mouseout', mouseHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: addCombo\n * \n * Adds and returns a new SELECT element using the given style. The element\n * is placed inside a DIV with the mxToolbarComboContainer style classname.\n * \n * Parameters:\n * \n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addCombo = function(style)\n{\n\tvar div = document.createElement('div');\n\tdiv.style.display = 'inline';\n\tdiv.className = 'mxToolbarComboContainer';\n\t\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tdiv.appendChild(select);\n\t\n\tthis.container.appendChild(div);\n\t\n\treturn select;\n};\n\n/**\n * Function: addCombo\n * \n * Adds and returns a new SELECT element using the given title as the\n * default element. The selection is reset to this element after each\n * change.\n * \n * Parameters:\n * \n * title - String that specifies the title of the default element.\n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addActionCombo = function(title, style)\n{\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tthis.addOption(select, title, null);\n\t\n\tmxEvent.addListener(select, 'change', function(evt)\n\t{\n\t\tvar value = select.options[select.selectedIndex];\n\t\tselect.selectedIndex = 0;\n\t\t\n\t\tif (value.funct != null)\n\t\t{\n\t\t\tvalue.funct(evt);\n\t\t}\n\t});\n\t\n\tthis.container.appendChild(select);\n\t\n\treturn select;\n};\n\n/**\n * Function: addOption\n * \n * Adds and returns a new OPTION element inside the given SELECT element.\n * If the given value is a function then it is stored in the option's funct\n * field.\n * \n * Parameters:\n * \n * combo - SELECT element that will contain the new entry.\n * title - String that specifies the title of the option.\n * value - Specifies the value associated with this option.\n */\nmxToolbar.prototype.addOption = function(combo, title, value)\n{\n\tvar option = document.createElement('option');\n\tmxUtils.writeln(option, title);\n\t\n\tif (typeof(value) == 'function')\n\t{\n\t\toption.funct = value;\n\t}\n\telse\n\t{\n\t\toption.setAttribute('value', value);\n\t}\n\t\n\tcombo.appendChild(option);\n\t\n\treturn option;\n};\n\n/**\n * Function: addSwitchMode\n * \n * Adds a new selectable item to the toolbar. Only one switch mode item may\n * be selected at a time. The currently selected item is the default item\n * after a reset of the toolbar.\n */\nmxToolbar.prototype.addSwitchMode = function(title, icon, funct, pressedIcon, style)\n{\n\tvar img = document.createElement('img');\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\t\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t{\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t}\n\t\t\n\t\tif (this.updateDefaultMode)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t}\n\t\t\n\t\tthis.selectedMode = img;\n\t\t\n\t\tvar tmp = img.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\timg.altIcon = img.getAttribute('src');\n\t\t\timg.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.className = img.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT));\n\t\tfunct();\n\t}));\n\t\n\tthis.container.appendChild(img);\n\t\n\tif (this.defaultMode == null)\n\t{\n\t\tthis.defaultMode = img;\n\t\t\n\t\t// Function should fire only once so\n\t\t// do not pass it with the select event\n\t\tthis.selectMode(img);\n\t\tfunct();\n\t}\n\t\n\treturn img;\n};\n\n/**\n * Function: addMode\n * \n * Adds a new item to the toolbar. The selection is typically reset after\n * the item has been consumed, for example by adding a new vertex to the\n * graph. The reset is not carried out if the item is double clicked.\n * \n * The function argument uses the following signature: funct(evt, cell) where\n * evt is the native mouse event and cell is the cell under the mouse.\n */\nmxToolbar.prototype.addMode = function(title, icon, funct, pressedIcon, style, toggle)\n{\n\ttoggle = (toggle != null) ? toggle : true;\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\t\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tif (this.enabled && toggle)\n\t{\n\t\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = false;\n\t\t}));\n\t\t\n\t\tmxEvent.addListener(img, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = true;\n\t\t}));\n\t\t\n\t\tif (this.defaultMode == null)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t\tthis.defaultFunction = funct;\n\t\t\tthis.selectMode(img, funct);\n\t\t}\n\t}\n\n\tthis.container.appendChild(img);\t\t\t\t\t\n\n\treturn img;\n};\n\n/**\n * Function: selectMode\n * \n * Resets the state of the previously selected mode and displays the given\n * DOM node as selected. This function fires a select event with the given\n * function as a parameter.\n */\nmxToolbar.prototype.selectMode = function(domNode, funct)\n{\n\tif (this.selectedMode != domNode)\n\t{\n\t\tif (this.selectedMode != null)\n\t\t{\n\t\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.selectedMode = domNode;\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT, \"function\", funct));\n\t}\n};\n\n/**\n * Function: resetMode\n * \n * Selects the default mode and resets the state of the previously selected\n * mode.\n */\nmxToolbar.prototype.resetMode = function(forced)\n{\n\tif ((forced || !this.noReset) && this.selectedMode != this.defaultMode)\n\t{\n\t\t// The last selected switch mode will be activated\n\t\t// so the function was already executed and is\n\t\t// no longer required here\n\t\tthis.selectMode(this.defaultMode, this.defaultFunction);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds the specifies image as a separator.\n * \n * Parameters:\n * \n * icon - URL of the separator icon.\n */\nmxToolbar.prototype.addSeparator = function(icon)\n{\n\treturn this.addItem(null, icon, null);\n};\n\n/**\n * Function: addBreak\n * \n * Adds a break to the container.\n */\nmxToolbar.prototype.addBreak = function()\n{\n\tmxUtils.br(this.container);\n};\n\n/**\n * Function: addLine\n * \n * Adds a horizontal line to the container.\n */\nmxToolbar.prototype.addLine = function()\n{\n\tvar hr = document.createElement('hr');\n\t\n\thr.style.marginRight = '6px';\n\thr.setAttribute('size', '1');\n\t\n\tthis.container.appendChild(hr);\n};\n\n/**\n * Function: destroy\n * \n * Removes the toolbar and all its associated resources.\n */\nmxToolbar.prototype.destroy = function ()\n{\n\tmxEvent.release(this.container);\n\tthis.container = null;\n\tthis.defaultMode = null;\n\tthis.defaultFunction = null;\n\tthis.selectedMode = null;\n\t\n\tif (this.menu != null)\n\t{\n\t\tthis.menu.destroy();\n\t}\n};\n\n__mxOutput.mxToolbar = typeof mxToolbar !== 'undefined' ? mxToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoableEdit\n * \n * Implements a composite undoable edit. Here is an example for a custom change\n * which gets executed via the model:\n * \n * (code)\n * function CustomChange(model, name)\n * {\n *   this.model = model;\n *   this.name = name;\n *   this.previous = name;\n * };\n * \n * CustomChange.prototype.execute = function()\n * {\n *   var tmp = this.model.name;\n *   this.model.name = this.previous;\n *   this.previous = tmp;\n * };\n * \n * var name = prompt('Enter name');\n * graph.model.execute(new CustomChange(graph.model, name));\n * (end)\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n * \n * Event: mxEvent.START_EDIT\n * \n * Fires before a set of changes will be executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after a set of changeswas executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Constructor: mxUndoableEdit\n * \n * Constructs a new undoable edit for the given source.\n */\nfunction mxUndoableEdit(source, significant)\n{\n\tthis.source = source;\n\tthis.changes = [];\n\tthis.significant = (significant != null) ? significant : true;\n};\n\n/**\n * Variable: source\n * \n * Specifies the source of the edit.\n */\nmxUndoableEdit.prototype.source = null;\n\n/**\n * Variable: changes\n * \n * Array that contains the changes that make up this edit. The changes are\n * expected to either have an undo and redo function, or an execute\n * function. Default is an empty array.\n */\nmxUndoableEdit.prototype.changes = null;\n\n/**\n * Variable: significant\n * \n * Specifies if the undoable change is significant.\n * Default is true.\n */\nmxUndoableEdit.prototype.significant = null;\n\n/**\n * Variable: undone\n * \n * Specifies if this edit has been undone. Default is false.\n */\nmxUndoableEdit.prototype.undone = false;\n\n/**\n * Variable: redone\n * \n * Specifies if this edit has been redone. Default is false.\n */\nmxUndoableEdit.prototype.redone = false;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the this edit contains no changes.\n */\nmxUndoableEdit.prototype.isEmpty = function()\n{\n\treturn this.changes.length == 0;\n};\n\n/**\n * Function: isSignificant\n * \n * Returns <significant>.\n */\nmxUndoableEdit.prototype.isSignificant = function()\n{\n\treturn this.significant;\n};\n\n/**\n * Function: add\n * \n * Adds the specified change to this edit. The change is an object that is\n * expected to either have an undo and redo, or an execute function.\n */\nmxUndoableEdit.prototype.add = function(change)\n{\n\tthis.changes.push(change);\n};\n\n/**\n * Function: notify\n * \n * Hook to notify any listeners of the changes after an <undo> or <redo>\n * has been carried out. This implementation is empty.\n */\nmxUndoableEdit.prototype.notify = function() { };\n\n/**\n * Function: die\n * \n * Hook to free resources after the edit has been removed from the command\n * history. This implementation is empty.\n */\nmxUndoableEdit.prototype.die = function() { };\n\n/**\n * Function: undo\n * \n * Undoes all changes in this edit.\n */\nmxUndoableEdit.prototype.undo = function()\n{\n\tif (!this.undone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = count - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.undo != null)\n\t\t\t{\n\t\t\t\tchange.undo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = true;\n\t\tthis.redone = false;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n/**\n * Function: redo\n * \n * Redoes all changes in this edit.\n */\nmxUndoableEdit.prototype.redo = function()\n{\n\tif (!this.redone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.redo != null)\n\t\t\t{\n\t\t\t\tchange.redo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = false;\n\t\tthis.redone = true;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n__mxOutput.mxUndoableEdit = typeof mxUndoableEdit !== 'undefined' ? mxUndoableEdit : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoManager\n *\n * Implements a command history. When changing the graph model, an\n * <mxUndoableChange> object is created at the start of the transaction (when\n * model.beginUpdate is called). All atomic changes are then added to this\n * object until the last model.endUpdate call, at which point the\n * <mxUndoableEdit> is dispatched in an event, and added to the history inside\n * <mxUndoManager>. This is done by an event listener in\n * <mxEditor.installUndoHandler>.\n * \n * Each atomic change of the model is represented by an object (eg.\n * <mxRootChange>, <mxChildChange>, <mxTerminalChange> etc) which contains the\n * complete undo information. The <mxUndoManager> also listens to the\n * <mxGraphView> and stores it's changes to the current root as insignificant\n * undoable changes, so that drilling (step into, step up) is undone.\n * \n * This means when you execute an atomic change on the model, then change the\n * current root on the view and click undo, the change of the root will be\n * undone together with the change of the model so that the display represents\n * the state at which the model was changed. However, these changes are not\n * transmitted for sharing as they do not represent a state change.\n *\n * Example:\n * \n * When adding an undo manager to a graph, make sure to add it\n * to the model and the view as well to maintain a consistent\n * display across multiple undo/redo steps.\n *\n * (code)\n * var undoManager = new mxUndoManager();\n * var listener = function(sender, evt)\n * {\n *   undoManager.undoableEditHappened(evt.getProperty('edit'));\n * };\n * graph.getModel().addListener(mxEvent.UNDO, listener);\n * graph.getView().addListener(mxEvent.UNDO, listener);\n * (end)\n * \n * The code creates a function that informs the undoManager\n * of an undoable edit and binds it to the undo event of\n * <mxGraphModel> and <mxGraphView> using\n * <mxEventSource.addListener>.\n * \n * Event: mxEvent.CLEAR\n * \n * Fires after <clear> was invoked. This event has no properties.\n * \n * Event: mxEvent.UNDO\n * \n * Fires afer a significant edit was undone in <undo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was undone.\n * \n * Event: mxEvent.REDO\n * \n * Fires afer a significant edit was redone in <redo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was redone.\n * \n * Event: mxEvent.ADD\n * \n * Fires after an undoable edit was added to the history. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was added.\n * \n * Constructor: mxUndoManager\n *\n * Constructs a new undo manager with the given history size. If no history\n * size is given, then a default size of 100 steps is used.\n */\nfunction mxUndoManager(size)\n{\n\tthis.size = (size != null) ? size : 100;\n\tthis.clear();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUndoManager.prototype = new mxEventSource();\nmxUndoManager.prototype.constructor = mxUndoManager;\n\n/**\n * Variable: size\n * \n * Maximum command history size. 0 means unlimited history. Default is\n * 100.\n */\nmxUndoManager.prototype.size = null;\n\n/**\n * Variable: history\n * \n * Array that contains the steps of the command history.\n */\nmxUndoManager.prototype.history = null;\n\n/**\n * Variable: indexOfNextAdd\n * \n * Index of the element to be added next.\n */\nmxUndoManager.prototype.indexOfNextAdd = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the history is empty.\n */\nmxUndoManager.prototype.isEmpty = function()\n{\n\treturn this.history.length == 0;\n};\n\n/**\n * Function: clear\n * \n * Clears the command history.\n */\nmxUndoManager.prototype.clear = function()\n{\n\tthis.history = [];\n\tthis.indexOfNextAdd = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.CLEAR));\n};\n\n/**\n * Function: canUndo\n * \n * Returns true if an undo is possible.\n */\nmxUndoManager.prototype.canUndo = function()\n{\n\treturn this.indexOfNextAdd > 0;\n};\n\n/**\n * Function: undo\n * \n * Undoes the last change.\n */\nmxUndoManager.prototype.undo = function()\n{\n    while (this.indexOfNextAdd > 0)\n    {\n        var edit = this.history[--this.indexOfNextAdd];\n        edit.undo();\n\n\t\tif (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: canRedo\n * \n * Returns true if a redo is possible.\n */\nmxUndoManager.prototype.canRedo = function()\n{\n\treturn this.indexOfNextAdd < this.history.length;\n};\n\n/**\n * Function: redo\n * \n * Redoes the last change.\n */\nmxUndoManager.prototype.redo = function()\n{\n    var n = this.history.length;\n    \n    while (this.indexOfNextAdd < n)\n    {\n        var edit =  this.history[this.indexOfNextAdd++];\n        edit.redo();\n        \n        if (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.REDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: undoableEditHappened\n * \n * Method to be called to add new undoable edits to the <history>.\n */\nmxUndoManager.prototype.undoableEditHappened = function(undoableEdit)\n{\n\tthis.trim();\n\t\n\tif (this.size > 0 &&\n\t\tthis.size == this.history.length)\n\t{\n\t\tthis.history.shift();\n\t}\n\t\n\tthis.history.push(undoableEdit);\n\tthis.indexOfNextAdd = this.history.length;\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'edit', undoableEdit));\n};\n\n/**\n * Function: trim\n * \n * Removes all pending steps after <indexOfNextAdd> from the history,\n * invoking die on each edit. This is called from <undoableEditHappened>.\n */\nmxUndoManager.prototype.trim = function()\n{\n\tif (this.history.length > this.indexOfNextAdd)\n\t{\n\t\tvar edits = this.history.splice(this.indexOfNextAdd,\n\t\t\tthis.history.length - this.indexOfNextAdd);\n\t\t\t\n\t\tfor (var i = 0; i < edits.length; i++)\n\t\t{\n\t\t\tedits[i].die();\n\t\t}\n\t}\n};\n\n__mxOutput.mxUndoManager = typeof mxUndoManager !== 'undefined' ? mxUndoManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxUrlConverter\n * \n * Converts relative and absolute URLs to absolute URLs with protocol and domain.\n */\nvar mxUrlConverter = function()\n{\n\t// Empty constructor\n};\n\n/**\n * Variable: enabled\n * \n * Specifies if the converter is enabled. Default is true.\n */\nmxUrlConverter.prototype.enabled = true;\n\n/**\n * Variable: baseUrl\n * \n * Specifies the base URL to be used as a prefix for relative URLs.\n */\nmxUrlConverter.prototype.baseUrl = null;\n\n/**\n * Variable: baseDomain\n * \n * Specifies the base domain to be used as a prefix for absolute URLs.\n */\nmxUrlConverter.prototype.baseDomain = null;\n\n/**\n * Function: updateBaseUrl\n * \n * Private helper function to update the base URL.\n */\nmxUrlConverter.prototype.updateBaseUrl = function()\n{\n\tthis.baseDomain = location.protocol + '//' + location.host;\n\tthis.baseUrl = this.baseDomain + location.pathname;\n\tvar tmp = this.baseUrl.lastIndexOf('/');\n\t\n\t// Strips filename etc\n\tif (tmp > 0)\n\t{\n\t\tthis.baseUrl = this.baseUrl.substring(0, tmp + 1);\n\t}\n};\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxUrlConverter.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxUrlConverter.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns <baseUrl>.\n */\nmxUrlConverter.prototype.getBaseUrl = function()\n{\n\treturn this.baseUrl;\n};\n\n/**\n * Function: setBaseUrl\n * \n * Sets <baseUrl>.\n */\nmxUrlConverter.prototype.setBaseUrl = function(value)\n{\n\tthis.baseUrl = value;\n};\n\n/**\n * Function: getBaseDomain\n * \n * Returns <baseDomain>.\n */\nmxUrlConverter.prototype.getBaseDomain = function()\n{\n\treturn this.baseDomain;\n},\n\n/**\n * Function: setBaseDomain\n * \n * Sets <baseDomain>.\n */\nmxUrlConverter.prototype.setBaseDomain = function(value)\n{\n\tthis.baseDomain = value;\n},\n\n/**\n * Function: isRelativeUrl\n * \n * Returns true if the given URL is relative.\n */\nmxUrlConverter.prototype.isRelativeUrl = function(url)\n{\n\treturn url != null && url.substring(0, 2) != '//' && url.substring(0, 7) != 'http://' &&\n\t\turl.substring(0, 8) != 'https://' && url.substring(0, 10) != 'data:image' &&\n\t\turl.substring(0, 7) != 'file://';\n};\n\n/**\n * Function: convert\n * \n * Converts the given URL to an absolute URL with protol and domain.\n * Relative URLs are first converted to absolute URLs.\n */\nmxUrlConverter.prototype.convert = function(url)\n{\n\tif (this.isEnabled() && this.isRelativeUrl(url))\n\t{\n\t\tif (this.getBaseUrl() == null)\n\t\t{\n\t\t\tthis.updateBaseUrl();\n\t\t}\n\t\t\n\t\tif (url.charAt(0) == '/')\n\t\t{\n\t\t\turl = this.getBaseDomain() + url;\n\t\t}\n\t\telse\n\t\t{\n\t\t\turl = this.getBaseUrl() + url;\n\t\t}\n\t}\n\t\n\treturn url;\n};\n\n__mxOutput.mxUrlConverter = typeof mxUrlConverter !== 'undefined' ? mxUrlConverter : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningManager\n *\n * Implements a handler for panning.\n */\nfunction mxPanningManager(graph)\n{\n\tthis.thread = null;\n\tthis.active = false;\n\tthis.tdx = 0;\n\tthis.tdy = 0;\n\tthis.t0x = 0;\n\tthis.t0y = 0;\n\tthis.dx = 0;\n\tthis.dy = 0;\n\tthis.scrollbars = false;\n\tthis.scrollLeft = 0;\n\tthis.scrollTop = 0;\n\t\n\tthis.mouseListener =\n\t{\n\t    mouseDown: function(sender, me) { },\n\t    mouseMove: function(sender, me) { },\n\t    mouseUp: mxUtils.bind(this, function(sender, me)\n\t    {\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t    })\n\t};\n\t\n\tgraph.addMouseListener(this.mouseListener);\n\t\n\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t});\n\t\n\t// Stops scrolling on every mouseup anywhere in the document\n\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t\n\tvar createThread = mxUtils.bind(this, function()\n\t{\n\t    \tthis.scrollbars = mxUtils.hasScrollbars(graph.container);\n\t    \tthis.scrollLeft = graph.container.scrollLeft;\n\t    \tthis.scrollTop = graph.container.scrollTop;\n\t\n\t    \treturn window.setInterval(mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.tdx -= this.dx;\n\t\t\tthis.tdy -= this.dy;\n\n\t\t\tif (this.scrollbars)\n\t\t\t{\n\t\t\t\tvar left = -graph.container.scrollLeft - Math.ceil(this.dx);\n\t\t\t\tvar top = -graph.container.scrollTop - Math.ceil(this.dy);\n\t\t\t\tgraph.panGraph(left, top);\n\t\t\t\tgraph.panDx = this.scrollLeft - graph.container.scrollLeft;\n\t\t\t\tgraph.panDy = this.scrollTop - graph.container.scrollTop;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t\t// TODO: Implement graph.autoExtend\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panGraph(this.getDx(), this.getDy());\n\t\t\t}\n\t\t}), this.delay);\n\t});\n\t\n\tthis.isActive = function()\n\t{\n\t\treturn active;\n\t};\n\t\n\tthis.getDx = function()\n\t{\n\t\treturn Math.round(this.tdx);\n\t};\n\t\n\tthis.getDy = function()\n\t{\n\t\treturn Math.round(this.tdy);\n\t};\n\t\n\tthis.start = function()\n\t{\n\t\tthis.t0x = graph.view.translate.x;\n\t\tthis.t0y = graph.view.translate.y;\n\t\tthis.active = true;\n\t};\n\t\n\tthis.panTo = function(x, y, w, h)\n\t{\n\t\tif (!this.active)\n\t\t{\n\t\t\tthis.start();\n\t\t}\n\t\t\n    \tthis.scrollLeft = graph.container.scrollLeft;\n    \tthis.scrollTop = graph.container.scrollTop;\n\t\t\n\t\tw = (w != null) ? w : 0;\n\t\th = (h != null) ? h : 0;\n\t\t\n\t\tvar c = graph.container;\n\t\tthis.dx = x + w - c.scrollLeft - c.clientWidth;\n\t\t\n\t\tif (this.dx < 0 && Math.abs(this.dx) < this.border)\n\t\t{\n\t\t\tthis.dx = this.border + this.dx;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dx = Math.max(this.dx, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx = 0;\n\t\t}\n\t\t\n\t\tif (this.dx == 0)\n\t\t{\n\t\t\tthis.dx = x - c.scrollLeft;\n\t\t\t\n\t\t\tif (this.dx > 0 && this.dx < this.border)\n\t\t\t{\n\t\t\t\tthis.dx = this.dx - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dx = Math.min(0, this.dx);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dx = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.dy = y + h - c.scrollTop - c.clientHeight;\n\n\t\tif (this.dy < 0 && Math.abs(this.dy) < this.border)\n\t\t{\n\t\t\tthis.dy = this.border + this.dy;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dy = Math.max(this.dy, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dy = 0;\n\t\t}\n\t\t\n\t\tif (this.dy == 0)\n\t\t{\n\t\t\tthis.dy = y - c.scrollTop;\n\t\t\t\n\t\t\tif (this.dy > 0 && this.dy < this.border)\n\t\t\t{\n\t\t\t\tthis.dy = this.dy - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dy = Math.min(0, this.dy);\n\t\t\t} \n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dy = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.dx != 0 || this.dy != 0)\n\t\t{\n\t\t\tthis.dx *= this.damper;\n\t\t\tthis.dy *= this.damper;\n\t\t\t\n\t\t\tif (this.thread == null)\n\t\t\t{\n\t\t\t\tthis.thread = createThread();\n\t\t\t}\n\t\t}\n\t\telse if (this.thread != null)\n\t\t{\n\t\t\twindow.clearInterval(this.thread);\n\t\t\tthis.thread = null;\n\t\t}\n\t};\n\t\n\tthis.stop = function()\n\t{\n\t\tif (this.active)\n\t\t{\n\t\t\tthis.active = false;\n\t\t\n\t\t\tif (this.thread != null)\n\t    \t{\n\t\t\t\twindow.clearInterval(this.thread);\n\t\t\t\tthis.thread = null;\n\t    \t}\n\t\t\t\n\t\t\tthis.tdx = 0;\n\t\t\tthis.tdy = 0;\n\t\t\t\n\t\t\tif (!this.scrollbars)\n\t\t\t{\n\t\t\t\tvar px = graph.panDx;\n\t\t\t\tvar py = graph.panDy;\n\t\t    \t\n\t\t    \tif (px != 0 || py != 0)\n\t\t    \t{\n\t\t    \t\tgraph.panGraph(0, 0);\n\t\t\t    \tgraph.view.setTranslate(this.t0x + px / graph.view.scale, this.t0y + py / graph.view.scale);\n\t\t    \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panDx = 0;\n\t\t\t\tgraph.panDy = 0;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t}\n\t\t}\n\t};\n\t\n\tthis.destroy = function()\n\t{\n\t\tgraph.removeMouseListener(this.mouseListener);\n\t\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n\t};\n};\n\n/**\n * Variable: damper\n * \n * Damper value for the panning. Default is 1/6.\n */\nmxPanningManager.prototype.damper = 1/6;\n\n/**\n * Variable: delay\n * \n * Delay in milliseconds for the panning. Default is 10.\n */\nmxPanningManager.prototype.delay = 10;\n\n/**\n * Variable: handleMouseOut\n * \n * Specifies if mouse events outside of the component should be handled. Default is true. \n */\nmxPanningManager.prototype.handleMouseOut = true;\n\n/**\n * Variable: border\n * \n * Border to handle automatic panning inside the component. Default is 0 (disabled).\n */\nmxPanningManager.prototype.border = 0;\n\n__mxOutput.mxPanningManager = typeof mxPanningManager !== 'undefined' ? mxPanningManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenu\n * \n * Basic popup menu. To add a vertical scrollbar to a given submenu, the\n * following code can be used.\n * \n * (code)\n * var mxPopupMenuShowMenu = mxPopupMenu.prototype.showMenu;\n * mxPopupMenu.prototype.showMenu = function()\n * {\n *   mxPopupMenuShowMenu.apply(this, arguments);\n *   \n *   this.div.style.overflowY = 'auto';\n *   this.div.style.overflowX = 'hidden';\n *   this.div.style.maxHeight = '160px';\n * };\n * (end)\n * \n * Constructor: mxPopupMenu\n * \n * Constructs a popupmenu.\n * \n * Event: mxEvent.SHOW\n *\n * Fires after the menu has been shown in <popup>.\n */\nfunction mxPopupMenu(factoryMethod)\n{\n\tthis.factoryMethod = factoryMethod;\n\t\n\tif (factoryMethod != null)\n\t{\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPopupMenu.prototype = new mxEventSource();\nmxPopupMenu.prototype.constructor = mxPopupMenu;\n\n/**\n * Variable: submenuImage\n * \n * URL of the image to be used for the submenu icon.\n */\nmxPopupMenu.prototype.submenuImage = mxClient.imageBasePath + '/submenu.gif';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the popupmenu and its shadow. Default is 10006.\n */\nmxPopupMenu.prototype.zIndex = 10006;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used to create the popup menu. The function takes the\n * current panning handler, the <mxCell> under the mouse and the mouse\n * event that triggered the call as arguments.\n */\nmxPopupMenu.prototype.factoryMethod = null;\n\n/**\n * Variable: useLeftButtonForPopup\n * \n * Specifies if popupmenus should be activated by clicking the left mouse\n * button. Default is false.\n */\nmxPopupMenu.prototype.useLeftButtonForPopup = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxPopupMenu.prototype.enabled = true;\n\n/**\n * Variable: itemCount\n * \n * Contains the number of times <addItem> has been called for a new menu.\n */\nmxPopupMenu.prototype.itemCount = 0;\n\n/**\n * Variable: autoExpand\n * \n * Specifies if submenus should be expanded on mouseover. Default is false.\n */\nmxPopupMenu.prototype.autoExpand = false;\n\n/**\n * Variable: smartSeparators\n * \n * Specifies if separators should only be added if a menu item follows them.\n * Default is false.\n */\nmxPopupMenu.prototype.smartSeparators = false;\n\n/**\n * Variable: labels\n * \n * Specifies if any labels should be visible. Default is true.\n */\nmxPopupMenu.prototype.labels = true;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenu.prototype.init = function()\n{\n\t// Adds the inner table\n\tthis.table = document.createElement('table');\n\tthis.table.className = 'mxPopupMenu';\n\t\n\tthis.tbody = document.createElement('tbody');\n\tthis.table.appendChild(this.tbody);\n\n\t// Adds the outer div\n\tthis.div = document.createElement('div');\n\tthis.div.className = 'mxPopupMenu';\n\tthis.div.style.display = 'inline';\n\tthis.div.style.zIndex = this.zIndex;\n\tthis.div.appendChild(this.table);\n\n\t// Disables the context menu on the outer div\n\tmxEvent.disableContextMenu(this.div);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxPopupMenu.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxPopupMenu.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isPopupTrigger\n * \n * Returns true if the given event is a popupmenu trigger for the optional\n * given cell.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the mouse event.\n */\nmxPopupMenu.prototype.isPopupTrigger = function(me)\n{\n\treturn me.isPopupTrigger() || (this.useLeftButtonForPopup && mxEvent.isLeftMouseButton(me.getEvent()));\n};\n\n/**\n * Function: addItem\n * \n * Adds the given item to the given parent item. If no parent item is specified\n * then the item is added to the top-level menu. The return value may be used\n * as the parent argument, ie. as a submenu item. The return value is the table\n * row that represents the item.\n * \n * Paramters:\n * \n * title - String that represents the title of the menu item.\n * image - Optional URL for the image icon.\n * funct - Function associated that takes a mouseup or touchend event.\n * parent - Optional item returned by <addItem>.\n * iconCls - Optional string that represents the CSS class for the image icon.\n * IconsCls is ignored if image is given.\n * enabled - Optional boolean indicating if the item is enabled. Default is true.\n * active - Optional boolean indicating if the menu should implement any event handling.\n * Default is true.\n */\nmxPopupMenu.prototype.addItem = function(title, image, funct, parent, iconCls, enabled, active)\n{\n\tparent = parent || this;\n\tthis.itemCount++;\n\t\n\t// Smart separators only added if element contains items\n\tif (parent.willAddSeparator)\n\t{\n\t\tif (parent.containsItems)\n\t\t{\n\t\t\tthis.addSeparator(parent, true);\n\t\t}\n\n\t\tparent.willAddSeparator = false;\n\t}\n\n\tparent.containsItems = true;\n\tvar tr = document.createElement('tr');\n\ttr.className = 'mxPopupMenuItem';\n\tvar col1 = document.createElement('td');\n\tcol1.className = 'mxPopupMenuIcon';\n\n\t// Adds the given image into the first column\n\tif (image != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.src = image;\n\t\tcol1.appendChild(img);\n\t}\n\telse if (iconCls != null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.className = iconCls;\n\t\tcol1.appendChild(div);\n\t}\n\t\n\ttr.appendChild(col1);\n\t\n\tif (this.labels)\n\t{\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\t\n\t\tmxUtils.write(col2, title);\n\t\tcol2.align = 'left';\n\t\ttr.appendChild(col2);\n\t\n\t\tvar col3 = document.createElement('td');\n\t\tcol3.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\tcol3.style.paddingRight = '6px';\n\t\tcol3.style.textAlign = 'right';\n\t\t\n\t\ttr.appendChild(col3);\n\t\t\n\t\tif (parent.div == null)\n\t\t{\n\t\t\tthis.createSubmenu(parent);\n\t\t}\n\t}\n\t\n\tparent.tbody.appendChild(tr);\n\n\tif (active != false && enabled != false)\n\t{\n\t\tvar currentSelection = null;\n\t\t\n\t\tmxEvent.addGestureListeners(tr,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tthis.eventReceiver = tr;\n\t\t\t\t\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\tif (document.selection != null && (mxClient.IS_QUIRKS || document.documentMode == 8))\n\t\t\t\t{\n\t\t\t\t\tcurrentSelection = document.selection.createRange();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoExpand && tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// Sets hover style because TR in IE doesn't have hover\n\t\t\t\ttr.className = 'mxPopupMenuItemHover';\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// EventReceiver avoids clicks on a submenu item\n\t\t\t\t// which has just been shown in the mousedown\n\t\t\t\tif (this.eventReceiver == tr)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != tr)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideMenu();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\t\tif (currentSelection != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Workaround for \"unspecified error\" in IE8 standards\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentSelection.select();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentSelection = null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (funct != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.eventReceiver = null;\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t})\n\t\t);\n\t\n\t\t// Resets hover style because TR in IE doesn't have hover\n\t\tmxEvent.addListener(tr, 'mouseout',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\ttr.className = 'mxPopupMenuItem';\n\t\t\t})\n\t\t);\n\t}\n\t\n\treturn tr;\n};\n\n/**\n * Adds a checkmark to the given menuitem.\n */\nmxPopupMenu.prototype.addCheckmark = function(item, img)\n{\n\tvar td = item.firstChild.nextSibling;\n\ttd.style.backgroundImage = 'url(\\'' + img + '\\')';\n\ttd.style.backgroundRepeat = 'no-repeat';\n\ttd.style.backgroundPosition = '2px 50%';\n};\n\n/**\n * Function: createSubmenu\n * \n * Creates the nodes required to add submenu items inside the given parent\n * item. This is called in <addItem> if a parent item is used for the first\n * time. This adds various DOM nodes and a <submenuImage> to the parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.createSubmenu = function(parent)\n{\n\tparent.table = document.createElement('table');\n\tparent.table.className = 'mxPopupMenu';\n\n\tparent.tbody = document.createElement('tbody');\n\tparent.table.appendChild(parent.tbody);\n\n\tparent.div = document.createElement('div');\n\tparent.div.className = 'mxPopupMenu';\n\n\tparent.div.style.position = 'absolute';\n\tparent.div.style.display = 'inline';\n\tparent.div.style.zIndex = this.zIndex;\n\t\n\tparent.div.appendChild(parent.table);\n\t\n\tvar img = document.createElement('img');\n\timg.setAttribute('src', this.submenuImage);\n\t\n\t// Last column of the submenu item in the parent menu\n\ttd = parent.firstChild.nextSibling.nextSibling;\n\ttd.appendChild(img);\n};\n\n/**\n * Function: showSubmenu\n * \n * Shows the submenu inside the given parent row.\n */\nmxPopupMenu.prototype.showSubmenu = function(parent, row)\n{\n\tif (row.div != null)\n\t{\n\t\trow.div.style.left = (parent.div.offsetLeft +\n\t\t\trow.offsetLeft+row.offsetWidth - 1) + 'px';\n\t\trow.div.style.top = (parent.div.offsetTop+row.offsetTop) + 'px';\n\t\tdocument.body.appendChild(row.div);\n\t\t\n\t\t// Moves the submenu to the left side if there is no space\n\t\tvar left = parseInt(row.div.offsetLeft);\n\t\tvar width = parseInt(row.div.offsetWidth);\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\tvar right = offset.x + (b.clientWidth || d.clientWidth);\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\trow.div.style.left = Math.max(0, (parent.div.offsetLeft - width + ((mxClient.IS_IE) ? 6 : -6))) + 'px';\n\t\t}\n\t\t\n\t\tmxUtils.fit(row.div);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds a horizontal separator in the given parent item or the top-level menu\n * if no parent is specified.\n * \n * Parameters:\n * \n * parent - Optional item returned by <addItem>.\n * force - Optional boolean to ignore <smartSeparators>. Default is false.\n */\nmxPopupMenu.prototype.addSeparator = function(parent, force)\n{\n\tparent = parent || this;\n\t\n\tif (this.smartSeparators && !force)\n\t{\n\t\tparent.willAddSeparator = true;\n\t}\n\telse if (parent.tbody != null)\n\t{\n\t\tparent.willAddSeparator = false;\n\t\tvar tr = document.createElement('tr');\n\t\t\n\t\tvar col1 = document.createElement('td');\n\t\tcol1.className = 'mxPopupMenuIcon';\n\t\tcol1.style.padding = '0 0 0 0px';\n\t\t\n\t\ttr.appendChild(col1);\n\t\t\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.style.padding = '0 0 0 0px';\n\t\tcol2.setAttribute('colSpan', '2');\n\t\n\t\tvar hr = document.createElement('hr');\n\t\thr.setAttribute('size', '1');\n\t\tcol2.appendChild(hr);\n\t\t\n\t\ttr.appendChild(col2);\n\t\t\n\t\tparent.tbody.appendChild(tr);\n\t}\n};\n\n/**\n * Function: popup\n * \n * Shows the popup menu for the given event and cell.\n * \n * Example:\n * \n * (code)\n * graph.panningHandler.popup = function(x, y, cell, evt)\n * {\n *   mxUtils.alert('Hello, World!');\n * }\n * (end)\n */\nmxPopupMenu.prototype.popup = function(x, y, cell, evt)\n{\n\tif (this.div != null && this.tbody != null && this.factoryMethod != null)\n\t{\n\t\tthis.div.style.left = x + 'px';\n\t\tthis.div.style.top = y + 'px';\n\t\t\n\t\t// Removes all child nodes from the existing menu\n\t\twhile (this.tbody.firstChild != null)\n\t\t{\n\t\t\tmxEvent.release(this.tbody.firstChild);\n\t\t\tthis.tbody.removeChild(this.tbody.firstChild);\n\t\t}\n\t\t\n\t\tthis.itemCount = 0;\n\t\tthis.factoryMethod(this, cell, evt);\n\t\t\n\t\tif (this.itemCount > 0)\n\t\t{\n\t\t\tthis.showMenu();\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n\t\t}\n\t}\n};\n\n/**\n * Function: isMenuShowing\n * \n * Returns true if the menu is showing.\n */\nmxPopupMenu.prototype.isMenuShowing = function()\n{\n\treturn this.div != null && this.div.parentNode == document.body;\n};\n\n/**\n * Function: showMenu\n * \n * Shows the menu.\n */\nmxPopupMenu.prototype.showMenu = function()\n{\n\t// Disables filter-based shadow in IE9 standards mode\n\tif (document.documentMode >= 9)\n\t{\n\t\tthis.div.style.filter = 'none';\n\t}\n\t\n\t// Fits the div inside the viewport\n\tdocument.body.appendChild(this.div);\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: hideMenu\n * \n * Removes the menu and all submenus.\n */\nmxPopupMenu.prototype.hideMenu = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.hideSubmenu(this);\n\t\tthis.containsItems = false;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n\t}\n};\n\n/**\n * Function: hideSubmenu\n * \n * Removes all submenus inside the given parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.hideSubmenu = function(parent)\n{\n\tif (parent.activeRow != null)\n\t{\n\t\tthis.hideSubmenu(parent.activeRow);\n\t\t\n\t\tif (parent.activeRow.div.parentNode != null)\n\t\t{\n\t\t\tparent.activeRow.div.parentNode.removeChild(parent.activeRow.div);\n\t\t}\n\t\t\n\t\tparent.activeRow = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenu.prototype.destroy = function()\n{\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxPopupMenu = typeof mxPopupMenu !== 'undefined' ? mxPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAutoSaveManager\n * \n * Manager for automatically saving diagrams. The <save> hook must be\n * implemented.\n * \n * Example:\n * \n * (code)\n * var mgr = new mxAutoSaveManager(editor.graph);\n * mgr.save = function()\n * {\n *   mxLog.show();\n *   mxLog.debug('save');\n * };\n * (end)\n * \n * Constructor: mxAutoSaveManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxAutoSaveManager(graph)\n{\n\t// Notifies the manager of a change\n\tthis.changeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t\t}\n\t});\n\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAutoSaveManager.prototype = new mxEventSource();\nmxAutoSaveManager.prototype.constructor = mxAutoSaveManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxAutoSaveManager.prototype.graph = null;\n\n/**\n * Variable: autoSaveDelay\n * \n * Minimum amount of seconds between two consecutive autosaves. Eg. a\n * value of 1 (s) means the graph is not stored more than once per second.\n * Default is 10.\n */\nmxAutoSaveManager.prototype.autoSaveDelay = 10;\n\n/**\n * Variable: autoSaveThrottle\n * \n * Minimum amount of seconds between two consecutive autosaves triggered by\n * more than <autoSaveThreshhold> changes within a timespan of less than\n * <autoSaveDelay> seconds. Eg. a value of 1 (s) means the graph is not\n * stored more than once per second even if there are more than\n * <autoSaveThreshold> changes within that timespan. Default is 2.\n */\nmxAutoSaveManager.prototype.autoSaveThrottle = 2;\n\n/**\n * Variable: autoSaveThreshold\n * \n * Minimum amount of ignored changes before an autosave. Eg. a value of 2\n * means after 2 change of the graph model the autosave will trigger if the\n * condition below is true. Default is 5.\n */\nmxAutoSaveManager.prototype.autoSaveThreshold = 5;\n\n/**\n * Variable: ignoredChanges\n * \n * Counter for ignored changes in autosave.\n */\nmxAutoSaveManager.prototype.ignoredChanges = 0;\n\n/**\n * Variable: lastSnapshot\n * \n * Used for autosaving. See <autosave>.\n */\nmxAutoSaveManager.prototype.lastSnapshot = 0;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxAutoSaveManager.prototype.enabled = true;\n\n/**\n * Variable: changeHandler\n * \n * Holds the function that handles graph model changes.\n */\nmxAutoSaveManager.prototype.changeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxAutoSaveManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxAutoSaveManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxAutoSaveManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\t}\n};\n\n/**\n * Function: save\n * \n * Empty hook that is called if the graph should be saved.\n */\nmxAutoSaveManager.prototype.save = function()\n{\n\t// empty\n};\n\n/**\n * Function: graphModelChanged\n * \n * Invoked when the graph model has changed.\n */\nmxAutoSaveManager.prototype.graphModelChanged = function(changes)\n{\n\tvar now = new Date().getTime();\n\tvar dt = (now - this.lastSnapshot) / 1000;\n\t\n\tif (dt > this.autoSaveDelay ||\n\t\t(this.ignoredChanges >= this.autoSaveThreshold &&\n\t\t dt > this.autoSaveThrottle))\n\t{\n\t\tthis.save();\n\t\tthis.reset();\n\t}\n\telse\n\t{\n\t\t// Increments the number of ignored changes\n\t\tthis.ignoredChanges++;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets all counters.\n */\nmxAutoSaveManager.prototype.reset = function()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.ignoredChanges = 0;\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxAutoSaveManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxAutoSaveManager = typeof mxAutoSaveManager !== 'undefined' ? mxAutoSaveManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxAnimation\n * \n * Implements a basic animation in JavaScript.\n * \n * Constructor: mxAnimation\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxAnimation(delay)\n{\n\tthis.delay = (delay != null) ? delay : 20;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAnimation.prototype = new mxEventSource();\nmxAnimation.prototype.constructor = mxAnimation;\n\n/**\n * Variable: delay\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxAnimation.prototype.delay = null;\n\n/**\n * Variable: thread\n * \n * Reference to the thread while the animation is running.\n */\nmxAnimation.prototype.thread = null;\n\n/**\n * Function: isRunning\n * \n * Returns true if the animation is running.\n */\nmxAnimation.prototype.isRunning = function()\n{\n\treturn this.thread != null;\n};\n\n/**\n * Function: startAnimation\n *\n * Starts the animation by repeatedly invoking updateAnimation.\n */\nmxAnimation.prototype.startAnimation = function()\n{\n\tif (this.thread == null)\n\t{\n\t\tthis.thread = window.setInterval(mxUtils.bind(this, this.updateAnimation), this.delay);\n\t}\n};\n\n/**\n * Function: updateAnimation\n *\n * Hook for subclassers to implement the animation. Invoke stopAnimation\n * when finished, startAnimation to resume. This is called whenever the\n * timer fires and fires an mxEvent.EXECUTE event with no properties.\n */\nmxAnimation.prototype.updateAnimation = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE));\n};\n\n/**\n * Function: stopAnimation\n *\n * Stops the animation by deleting the timer and fires an <mxEvent.DONE>.\n */\nmxAnimation.prototype.stopAnimation = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearInterval(this.thread);\n\t\tthis.thread = null;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.DONE));\n\t}\n};\n\n__mxOutput.mxAnimation = typeof mxAnimation !== 'undefined' ? mxAnimation : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxMorphing\n * \n * Implements animation for morphing cells. Here is an example of\n * using this class for animating the result of a layout algorithm:\n * \n * (code)\n * graph.getModel().beginUpdate();\n * try\n * {\n *   var circleLayout = new mxCircleLayout(graph);\n *   circleLayout.execute(graph.getDefaultParent());\n * }\n * finally\n * {\n *   var morph = new mxMorphing(graph);\n *   morph.addListener(mxEvent.DONE, function()\n *   {\n *     graph.getModel().endUpdate();\n *   });\n *   \n *   morph.startAnimation();\n * }\n * (end)\n * \n * Constructor: mxMorphing\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * steps - Optional number of steps in the morphing animation. Default is 6.\n * ease - Optional easing constant for the animation. Default is 1.5.\n * delay - Optional delay between the animation steps. Passed to <mxAnimation>.\n */\nfunction mxMorphing(graph, steps, ease, delay)\n{\n\tmxAnimation.call(this, delay);\n\tthis.graph = graph;\n\tthis.steps = (steps != null) ? steps : 6;\n\tthis.ease = (ease != null) ? ease : 1.5;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxMorphing.prototype = new mxAnimation();\nmxMorphing.prototype.constructor = mxMorphing;\n\n/**\n * Variable: graph\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxMorphing.prototype.graph = null;\n\n/**\n * Variable: steps\n * \n * Specifies the maximum number of steps for the morphing.\n */\nmxMorphing.prototype.steps = null;\n\n/**\n * Variable: step\n * \n * Contains the current step.\n */\nmxMorphing.prototype.step = 0;\n\n/**\n * Variable: ease\n * \n * Ease-off for movement towards the given vector. Larger values are\n * slower and smoother. Default is 4.\n */\nmxMorphing.prototype.ease = null;\n\n/**\n * Variable: cells\n * \n * Optional array of cells to be animated. If this is not specified\n * then all cells are checked and animated if they have been moved\n * in the current transaction.\n */\nmxMorphing.prototype.cells = null;\n\n/**\n * Function: updateAnimation\n *\n * Animation step.\n */\nmxMorphing.prototype.updateAnimation = function()\n{\n\tmxAnimation.prototype.updateAnimation.apply(this, arguments);\n\tvar move = new mxCellStatePreview(this.graph);\n\n\tif (this.cells != null)\n\t{\n\t\t// Animates the given cells individually without recursion\n\t\tfor (var i = 0; i < this.cells.length; i++)\n\t\t{\n\t\t\tthis.animateCell(this.cells[i], move, false);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Animates all changed cells by using recursion to find\n\t\t// the changed cells but not for the animation itself\n\t\tthis.animateCell(this.graph.getModel().getRoot(), move, true);\n\t}\n\t\n\tthis.show(move);\n\t\n\tif (move.isEmpty() || this.step++ >= this.steps)\n\t{\n\t\tthis.stopAnimation();\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the changes in the given <mxCellStatePreview>.\n */\nmxMorphing.prototype.show = function(move)\n{\n\tmove.show();\n};\n\n/**\n * Function: animateCell\n *\n * Animates the given cell state using <mxCellStatePreview.moveState>.\n */\nmxMorphing.prototype.animateCell = function(cell, move, recurse)\n{\n\tvar state = this.graph.getView().getState(cell);\n\tvar delta = null;\n\n\tif (state != null)\n\t{\n\t\t// Moves the animated state from where it will be after the model\n\t\t// change by subtracting the given delta vector from that location\n\t\tdelta = this.getDelta(state);\n\n\t\tif (this.graph.getModel().isVertex(cell) && (delta.x != 0 || delta.y != 0))\n\t\t{\n\t\t\tvar translate = this.graph.view.getTranslate();\n\t\t\tvar scale = this.graph.view.getScale();\n\t\t\t\n\t\t\tdelta.x += translate.x * scale;\n\t\t\tdelta.y += translate.y * scale;\n\t\t\t\n\t\t\tmove.moveState(state, -delta.x / this.ease, -delta.y / this.ease);\n\t\t}\n\t}\n\t\n\tif (recurse && !this.stopRecursion(state, delta))\n\t{\n\t\tvar childCount = this.graph.getModel().getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.animateCell(this.graph.getModel().getChildAt(cell, i), move, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: stopRecursion\n *\n * Returns true if the animation should not recursively find more\n * deltas for children if the given parent state has been animated.\n */\nmxMorphing.prototype.stopRecursion = function(state, delta)\n{\n\treturn delta != null && (delta.x != 0 || delta.y != 0);\n};\n\n/**\n * Function: getDelta\n *\n * Returns the vector between the current rendered state and the future\n * location of the state after the display will be updated.\n */\nmxMorphing.prototype.getDelta = function(state)\n{\n\tvar origin = this.getOriginForCell(state.cell);\n\tvar translate = this.graph.getView().getTranslate();\n\tvar scale = this.graph.getView().getScale();\n\tvar x = state.x / scale - translate.x;\n\tvar y = state.y / scale - translate.y;\n\n\treturn new mxPoint((origin.x - x) * scale, (origin.y - y) * scale);\n};\n\n/**\n * Function: getOriginForCell\n *\n * Returns the top, left corner of the given cell. TODO: Improve performance\n * by using caching inside this method as the result per cell never changes\n * during the lifecycle of this object.\n */\nmxMorphing.prototype.getOriginForCell = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\tresult = this.getOriginForCell(parent);\n\t\t\n\t\t// TODO: Handle offsets\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (geo.relative)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null)\n\t\t\t\t{\n\t\t\t\t\tresult.x += geo.x * pgeo.width;\n\t\t\t\t\tresult.y += geo.y * pgeo.height;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (result == null)\n\t{\n\t\tvar t = this.graph.view.getTranslate();\n\t\tresult = new mxPoint(-t.x, -t.y);\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxMorphing = typeof mxMorphing !== 'undefined' ? mxMorphing : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageBundle\n *\n * Maps from keys to base64 encoded images or file locations. All values must\n * be URLs or use the format data:image/format followed by a comma and the base64\n * encoded image data, eg. \"data:image/gif,XYZ\", where XYZ is the base64 encoded\n * image data.\n * \n * To add a new image bundle to an existing graph, the following code is used:\n * \n * (code)\n * var bundle = new mxImageBundle(alt);\n * bundle.putImage('myImage', 'data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP' +\n *   '//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA' +\n *   'EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi' +\n *   'laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=', fallback);\n * bundle.putImage('mySvgImage', 'data:image/svg+xml,' + encodeURIComponent(\n *   '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">' +\n *   '<linearGradient id=\"gradient\"><stop offset=\"10%\" stop-color=\"#F00\"/>' +\n *   '<stop offset=\"90%\" stop-color=\"#fcc\"/></linearGradient>' +\n *   '<rect fill=\"url(#gradient)\" width=\"100%\" height=\"100%\"/></svg>'), fallback);\n * graph.addImageBundle(bundle);\n * (end);\n * \n * Alt is an optional boolean (default is false) that specifies if the value\n * or the fallback should be returned in <getImage>.\n * \n * The image can then be referenced in any cell style using image=myImage.\n * If you are using mxOutline, you should use the same image bundles in the\n * graph that renders the outline.\n * \n * The keys for images are resolved in <mxGraph.postProcessCellStyle> and\n * turned into a data URI if the returned value has a short data URI format\n * as specified above.\n * \n * A typical value for the fallback is a MTHML link as defined in RFC 2557.\n * Note that this format requires a file to be dynamically created on the\n * server-side, or the page that contains the graph to be modified to contain\n * the resources, this can be done by adding a comment that contains the\n * resource in the HEAD section of the page after the title tag.\n * \n * This type of fallback mechanism should be used in IE6 and IE7. IE8 does\n * support data URIs, but the maximum size is limited to 32 KB, which means\n * all data URIs should be limited to 32 KB.\n */\nfunction mxImageBundle(alt)\n{\n\tthis.images = [];\n\tthis.alt = (alt != null) ? alt : false;\n};\n\n/**\n * Variable: images\n * \n * Maps from keys to images.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Variable: alt\n * \n * Specifies if the fallback representation should be returned.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Function: putImage\n * \n * Adds the specified entry to the map. The entry is an object with a value and\n * fallback property as specified in the arguments.\n */\nmxImageBundle.prototype.putImage = function(key, value, fallback)\n{\n\tthis.images[key] = {value: value, fallback: fallback};\n};\n\n/**\n * Function: getImage\n * \n * Returns the value for the given key. This returns the value\n * or fallback, depending on <alt>. The fallback is returned if\n * <alt> is true, the value is returned otherwise.\n */\nmxImageBundle.prototype.getImage = function(key)\n{\n\tvar result = null;\n\t\n\tif (key != null)\n\t{\n\t\tvar img = this.images[key];\n\t\t\n\t\tif (img != null)\n\t\t{\n\t\t\tresult = (this.alt) ? img.fallback : img.value;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxImageBundle = typeof mxImageBundle !== 'undefined' ? mxImageBundle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageExport\n * \n * Creates a new image export instance to be used with an export canvas. Here\n * is an example that uses this class to create an image via a backend using\n * <mxXmlExportCanvas>.\n * \n * (code)\n * var xmlDoc = mxUtils.createXmlDocument();\n * var root = xmlDoc.createElement('output');\n * xmlDoc.appendChild(root);\n * \n * var xmlCanvas = new mxXmlCanvas2D(root);\n * var imgExport = new mxImageExport();\n * imgExport.drawState(graph.getView().getState(graph.model.root), xmlCanvas);\n * \n * var bounds = graph.getGraphBounds();\n * var w = Math.ceil(bounds.x + bounds.width);\n * var h = Math.ceil(bounds.y + bounds.height);\n * \n * var xml = mxUtils.getXml(root);\n * new mxXmlRequest('export', 'format=png&w=' + w +\n * \t\t'&h=' + h + '&bg=#F9F7ED&xml=' + encodeURIComponent(xml))\n * \t\t.simulate(document, '_blank');\n * (end)\n * \n * Constructor: mxImageExport\n * \n * Constructs a new image export.\n */\nfunction mxImageExport() { };\n\n/**\n * Variable: includeOverlays\n * \n * Specifies if overlays should be included in the export. Default is false.\n */\nmxImageExport.prototype.includeOverlays = false;\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.drawState = function(state, canvas)\n{\n\tif (state != null)\n\t{\n\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.drawCellState.apply(this, arguments);\n\t\t}));\n\t\t\t\t\n\t\t// Paints the overlays\n\t\tif (this.includeOverlays)\n\t\t{\n\t\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.drawOverlays.apply(this, arguments);\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.visitStatesRecursive = function(state, canvas, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvisitor(state, canvas);\n\t\t\n\t\tvar graph = state.view.graph;\n\t\tvar childCount = graph.model.getChildCount(state.cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar childState = graph.view.getState(graph.model.getChildAt(state.cell, i));\n\t\t\tthis.visitStatesRecursive(childState, canvas, visitor);\n\t\t}\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state and canvas. This returns null.\n */\nmxImageExport.prototype.getLinkForCellState = function(state, canvas)\n{\n\treturn null;\n};\n\n/**\n * Function: drawCellState\n * \n * Draws the given state to the given canvas.\n */\nmxImageExport.prototype.drawCellState = function(state, canvas)\n{\n\t// Experimental feature\n\tvar link = this.getLinkForCellState(state, canvas);\n\t\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(link);\n\t}\n\t\n\t// Paints the shape and text\n\tthis.drawShape(state, canvas);\n\tthis.drawText(state, canvas);\n\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(null);\n\t}\n};\n\n/**\n * Function: drawShape\n * \n * Draws the shape of the given state.\n */\nmxImageExport.prototype.drawShape = function(state, canvas)\n{\n\tif (state.shape instanceof mxShape && state.shape.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\tstate.shape.paint(canvas);\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawText\n * \n * Draws the text of the given state.\n */\nmxImageExport.prototype.drawText = function(state, canvas)\n{\n\tif (state.text != null && state.text.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\tstate.text.paint(canvas);\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawOverlays\n * \n * Draws the overlays for the given state. This is called if <includeOverlays>\n * is true.\n */\nmxImageExport.prototype.drawOverlays = function(state, canvas)\n{\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tif (shape instanceof mxShape)\n\t\t\t{\n\t\t\t\tshape.paint(canvas);\n\t\t\t}\n\t\t});\n\t}\n};\n\n\n__mxOutput.mxImageExport = typeof mxImageExport !== 'undefined' ? mxImageExport : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAbstractCanvas2D\n *\n * Base class for all canvases. A description of the public API is available in <mxXmlCanvas2D>.\n * All color values of <mxConstants.NONE> will be converted to null in the state.\n * \n * Constructor: mxAbstractCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxAbstractCanvas2D()\n{\n\t/**\n\t * Variable: converter\n\t * \n\t * Holds the <mxUrlConverter> to convert image URLs.\n\t */\n\tthis.converter = this.createUrlConverter();\n\t\n\tthis.reset();\n};\n\n/**\n * Variable: state\n * \n * Holds the current state.\n */\nmxAbstractCanvas2D.prototype.state = null;\n\n/**\n * Variable: states\n * \n * Stack of states.\n */\nmxAbstractCanvas2D.prototype.states = null;\n\n/**\n * Variable: path\n * \n * Holds the current path as an array.\n */\nmxAbstractCanvas2D.prototype.path = null;\n\n/**\n * Variable: rotateHtml\n * \n * Switch for rotation of HTML. Default is false.\n */\nmxAbstractCanvas2D.prototype.rotateHtml = true;\n\n/**\n * Variable: lastX\n * \n * Holds the last x coordinate.\n */\nmxAbstractCanvas2D.prototype.lastX = 0;\n\n/**\n * Variable: lastY\n * \n * Holds the last y coordinate.\n */\nmxAbstractCanvas2D.prototype.lastY = 0;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'M'.\n */\nmxAbstractCanvas2D.prototype.moveOp = 'M';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'L'.\n */\nmxAbstractCanvas2D.prototype.lineOp = 'L';\n\n/**\n * Variable: quadOp\n * \n * Contains the string used for quadratic paths. Default is 'Q'.\n */\nmxAbstractCanvas2D.prototype.quadOp = 'Q';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'C'.\n */\nmxAbstractCanvas2D.prototype.curveOp = 'C';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'Z'.\n */\nmxAbstractCanvas2D.prototype.closeOp = 'Z';\n\n/**\n * Variable: pointerEvents\n * \n * Boolean value that specifies if events should be handled. Default is false.\n */\nmxAbstractCanvas2D.prototype.pointerEvents = false;\n\n/**\n * Function: createUrlConverter\n * \n * Create a new <mxUrlConverter> and returns it.\n */\nmxAbstractCanvas2D.prototype.createUrlConverter = function()\n{\n\treturn new mxUrlConverter();\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this canvas.\n */\nmxAbstractCanvas2D.prototype.reset = function()\n{\n\tthis.state = this.createState();\n\tthis.states = [];\n};\n\n/**\n * Function: createState\n * \n * Creates the state of the this canvas.\n */\nmxAbstractCanvas2D.prototype.createState = function()\n{\n\treturn {\n\t\tdx: 0,\n\t\tdy: 0,\n\t\tscale: 1,\n\t\talpha: 1,\n\t\tfillAlpha: 1,\n\t\tstrokeAlpha: 1,\n\t\tfillColor: null,\n\t\tgradientFillAlpha: 1,\n\t\tgradientColor: null,\n\t\tgradientAlpha: 1,\n\t\tgradientDirection: null,\n\t\tstrokeColor: null,\n\t\tstrokeWidth: 1,\n\t\tdashed: false,\n\t\tdashPattern: '3 3',\n\t\tfixDash: false,\n\t\tlineCap: 'flat',\n\t\tlineJoin: 'miter',\n\t\tmiterLimit: 10,\n\t\tfontColor: '#000000',\n\t\tfontBackgroundColor: null,\n\t\tfontBorderColor: null,\n\t\tfontSize: mxConstants.DEFAULT_FONTSIZE,\n\t\tfontFamily: mxConstants.DEFAULT_FONTFAMILY,\n\t\tfontStyle: 0,\n\t\tshadow: false,\n\t\tshadowColor: mxConstants.SHADOWCOLOR,\n\t\tshadowAlpha: mxConstants.SHADOW_OPACITY,\n\t\tshadowDx: mxConstants.SHADOW_OFFSET_X,\n\t\tshadowDy: mxConstants.SHADOW_OFFSET_Y,\n\t\trotation: 0,\n\t\trotationCx: 0,\n\t\trotationCy: 0\n\t};\n};\n\n/**\n * Function: format\n * \n * Rounds all numbers to integers.\n */\nmxAbstractCanvas2D.prototype.format = function(value)\n{\n\treturn Math.round(parseFloat(value));\n};\n\n/**\n * Function: addOp\n * \n * Adds the given operation to the path.\n */\nmxAbstractCanvas2D.prototype.addOp = function()\n{\n\tif (this.path != null)\n\t{\n\t\tthis.path.push(arguments[0]);\n\t\t\n\t\tif (arguments.length > 2)\n\t\t{\n\t\t\tvar s = this.state;\n\n\t\t\tfor (var i = 2; i < arguments.length; i += 2)\n\t\t\t{\n\t\t\t\tthis.lastX = arguments[i - 1];\n\t\t\t\tthis.lastY = arguments[i];\n\t\t\t\t\n\t\t\t\tthis.path.push(this.format((this.lastX + s.dx) * s.scale));\n\t\t\t\tthis.path.push(this.format((this.lastY + s.dy) * s.scale));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the given point and returns the result as an <mxPoint>.\n */\nmxAbstractCanvas2D.prototype.rotatePoint = function(x, y, theta, cx, cy)\n{\n\tvar rad = theta * (Math.PI / 180);\n\t\n\treturn mxUtils.getRotatedPoint(new mxPoint(x, y), Math.cos(rad),\n\t\tMath.sin(rad), new mxPoint(cx, cy));\n};\n\n/**\n * Function: save\n * \n * Saves the current state.\n */\nmxAbstractCanvas2D.prototype.save = function()\n{\n\tthis.states.push(this.state);\n\tthis.state = mxUtils.clone(this.state);\n};\n\n/**\n * Function: restore\n * \n * Restores the current state.\n */\nmxAbstractCanvas2D.prototype.restore = function()\n{\n\tif (this.states.length > 0)\n\t{\n\t\tthis.state = this.states.pop();\n\t}\n};\n\n/**\n * Function: setLink\n * \n * Sets the current link. Hook for subclassers.\n */\nmxAbstractCanvas2D.prototype.setLink = function(link)\n{\n\t// nop\n};\n\n/**\n * Function: scale\n * \n * Scales the current state.\n */\nmxAbstractCanvas2D.prototype.scale = function(value)\n{\n\tthis.state.scale *= value;\n\tthis.state.strokeWidth *= value;\n};\n\n/**\n * Function: translate\n * \n * Translates the current state.\n */\nmxAbstractCanvas2D.prototype.translate = function(dx, dy)\n{\n\tthis.state.dx += dx;\n\tthis.state.dy += dy;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the current state.\n */\nmxAbstractCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\t// nop\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n */\nmxAbstractCanvas2D.prototype.setAlpha = function(value)\n{\n\tthis.state.alpha = value;\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current solid fill alpha.\n */\nmxAbstractCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tthis.state.fillAlpha = value;\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n */\nmxAbstractCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tthis.state.strokeAlpha = value;\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n */\nmxAbstractCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fillColor = value;\n\tthis.state.gradientColor = null;\n};\n\n/**\n * Function: setGradient\n * \n * Sets the current gradient.\n */\nmxAbstractCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tvar s = this.state;\n\ts.fillColor = color1;\n\ts.gradientFillAlpha = (alpha1 != null) ? alpha1 : 1;\n\ts.gradientColor = color2;\n\ts.gradientAlpha = (alpha2 != null) ? alpha2 : 1;\n\ts.gradientDirection = direction;\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n */\nmxAbstractCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.strokeColor = value;\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n */\nmxAbstractCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tthis.state.strokeWidth = value;\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n */\nmxAbstractCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tthis.state.dashed = value;\n\tthis.state.fixDash = fixDash;\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern.\n */\nmxAbstractCanvas2D.prototype.setDashPattern = function(value)\n{\n\tthis.state.dashPattern = value;\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the current line cap.\n */\nmxAbstractCanvas2D.prototype.setLineCap = function(value)\n{\n\tthis.state.lineCap = value;\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the current line join.\n */\nmxAbstractCanvas2D.prototype.setLineJoin = function(value)\n{\n\tthis.state.lineJoin = value;\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the current miter limit.\n */\nmxAbstractCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tthis.state.miterLimit = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontColor = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBackgroundColor = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBorderColor = value;\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size.\n */\nmxAbstractCanvas2D.prototype.setFontSize = function(value)\n{\n\tthis.state.fontSize = parseFloat(value);\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family.\n */\nmxAbstractCanvas2D.prototype.setFontFamily = function(value)\n{\n\tthis.state.fontFamily = value;\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n */\nmxAbstractCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (value == null)\n\t{\n\t\tvalue = 0;\n\t}\n\t\n\tthis.state.fontStyle = value;\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadow = function(enabled)\n{\n\tthis.state.shadow = enabled;\n};\n\n/**\n * Function: setShadowColor\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.shadowColor = value;\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tthis.state.shadowAlpha = value;\n};\n\n/**\n * Function: setShadowOffset\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tthis.state.shadowDx = dx;\n\tthis.state.shadowDy = dy;\n};\n\n/**\n * Function: begin\n * \n * Starts a new path.\n */\nmxAbstractCanvas2D.prototype.begin = function()\n{\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n\tthis.path = [];\n};\n\n/**\n * Function: moveTo\n * \n *  Moves the current path the given coordinates.\n */\nmxAbstractCanvas2D.prototype.moveTo = function(x, y)\n{\n\tthis.addOp(this.moveOp, x, y);\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates. Uses moveTo with the op argument.\n */\nmxAbstractCanvas2D.prototype.lineTo = function(x, y)\n{\n\tthis.addOp(this.lineOp, x, y);\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n */\nmxAbstractCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tthis.addOp(this.quadOp, x1, y1, x2, y2);\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n */\nmxAbstractCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.curveOp, x1, y1, x2, y2, x3, y3);\n};\n\n/**\n * Function: arcTo\n * \n * Adds the given arc to the current path. This is a synthetic operation that\n * is broken down into curves.\n */\nmxAbstractCanvas2D.prototype.arcTo = function(rx, ry, angle, largeArcFlag, sweepFlag, x, y)\n{\n\tvar curves = mxUtils.arcToCurves(this.lastX, this.lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y);\n\t\n\tif (curves != null)\n\t{\n\t\tfor (var i = 0; i < curves.length; i += 6) \n\t\t{\n\t\t\tthis.curveTo(curves[i], curves[i + 1], curves[i + 2],\n\t\t\t\tcurves[i + 3], curves[i + 4], curves[i + 5]);\n\t\t}\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxAbstractCanvas2D.prototype.close = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.closeOp);\n};\n\n/**\n * Function: end\n * \n * Empty implementation for backwards compatibility. This will be removed.\n */\nmxAbstractCanvas2D.prototype.end = function() { };\n\n__mxOutput.mxAbstractCanvas2D = typeof mxAbstractCanvas2D !== 'undefined' ? mxAbstractCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlCanvas2D\n *\n * Base class for all canvases. The following methods make up the public\n * interface of the canvas 2D for all painting in mxGraph:\n * \n * - <save>, <restore>\n * - <scale>, <translate>, <rotate>\n * - <setAlpha>, <setFillAlpha>, <setStrokeAlpha>, <setFillColor>, <setGradient>,\n *   <setStrokeColor>, <setStrokeWidth>, <setDashed>, <setDashPattern>, <setLineCap>, \n *   <setLineJoin>, <setMiterLimit>\n * - <setFontColor>, <setFontBackgroundColor>, <setFontBorderColor>, <setFontSize>,\n *   <setFontFamily>, <setFontStyle>\n * - <setShadow>, <setShadowColor>, <setShadowAlpha>, <setShadowOffset>\n * - <rect>, <roundrect>, <ellipse>, <image>, <text>\n * - <begin>, <moveTo>, <lineTo>, <quadTo>, <curveTo>\n * - <stroke>, <fill>, <fillAndStroke>\n * \n * <mxAbstractCanvas2D.arcTo> is an additional method for drawing paths. This is\n * a synthetic method, meaning that it is turned into a sequence of curves by\n * default. Subclassers may add native support for arcs.\n * \n * Constructor: mxXmlCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxXmlCanvas2D(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t// Writes default settings;\n\tthis.writeDefaults();\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxXmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxXmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: compressed\n * \n * Specifies if the output should be compressed by removing redundant calls.\n * Default is true.\n */\nmxXmlCanvas2D.prototype.compressed = true;\n\n/**\n * Function: writeDefaults\n * \n * Writes the rendering defaults to <root>:\n */\nmxXmlCanvas2D.prototype.writeDefaults = function()\n{\n\tvar elem;\n\t\n\t// Writes font defaults\n\telem = this.createElement('fontfamily');\n\telem.setAttribute('family', mxConstants.DEFAULT_FONTFAMILY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('fontsize');\n\telem.setAttribute('size', mxConstants.DEFAULT_FONTSIZE);\n\tthis.root.appendChild(elem);\n\t\n\t// Writes shadow defaults\n\telem = this.createElement('shadowcolor');\n\telem.setAttribute('color', mxConstants.SHADOWCOLOR);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', mxConstants.SHADOW_OPACITY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', mxConstants.SHADOW_OFFSET_X);\n\telem.setAttribute('dy', mxConstants.SHADOW_OFFSET_Y);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: format\n * \n * Returns a formatted number with 2 decimal places.\n */\nmxXmlCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: createElement\n * \n * Creates the given element using the owner document of <root>.\n */\nmxXmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn this.root.ownerDocument.createElement(name);\n};\n\n/**\n * Function: save\n * \n * Saves the drawing state.\n */\nmxXmlCanvas2D.prototype.save = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.save.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('save'));\n};\n\n/**\n * Function: restore\n * \n * Restores the drawing state.\n */\nmxXmlCanvas2D.prototype.restore = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.restore.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('restore'));\n};\n\n/**\n * Function: scale\n * \n * Scales the output.\n * \n * Parameters:\n * \n * scale - Number that represents the scale where 1 is equal to 100%.\n */\nmxXmlCanvas2D.prototype.scale = function(value)\n{\n        var elem = this.createElement('scale');\n        elem.setAttribute('scale', value);\n        this.root.appendChild(elem);\n};\n\n/**\n * Function: translate\n * \n * Translates the output.\n * \n * Parameters:\n * \n * dx - Number that specifies the horizontal translation.\n * dy - Number that specifies the vertical translation.\n */\nmxXmlCanvas2D.prototype.translate = function(dx, dy)\n{\n\tvar elem = this.createElement('translate');\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: rotate\n * \n * Rotates and/or flips the output around a given center. (Note: Due to\n * limitations in VML, the rotation cannot be concatenated.)\n * \n * Parameters:\n * \n * theta - Number that represents the angle of the rotation (in degrees).\n * flipH - Boolean indicating if the output should be flipped horizontally.\n * flipV - Boolean indicating if the output should be flipped vertically.\n * cx - Number that represents the x-coordinate of the rotation center.\n * cy - Number that represents the y-coordinate of the rotation center.\n */\nmxXmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tvar elem = this.createElement('rotate');\n\t\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\telem.setAttribute('theta', this.format(theta));\n\t\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\t\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\t\telem.setAttribute('cx', this.format(cx));\n\t\telem.setAttribute('cy', this.format(cy));\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.alpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('alpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current fill alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new fill alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillalpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new stroke alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokealpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setGradient\n * \n * Sets the gradient. Note that the coordinates may be ignored by some implementations.\n * \n * Parameters:\n * \n * color1 - Hexadecimal representation of the start color.\n * color2 - Hexadecimal representation of the end color.\n * x - X-coordinate of the gradient region.\n * y - y-coordinate of the gradient region.\n * w - Width of the gradient region.\n * h - Height of the gradient region.\n * direction - One of <mxConstants.DIRECTION_NORTH>, <mxConstants.DIRECTION_EAST>,\n * <mxConstants.DIRECTION_SOUTH> or <mxConstants.DIRECTION_WEST>.\n * alpha1 - Optional alpha of the start color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n * alpha2 - Optional alpha of the end color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tif (color1 != null && color2 != null)\n\t{\n\t\tmxAbstractCanvas2D.prototype.setGradient.apply(this, arguments);\n\t\t\n\t\tvar elem = this.createElement('gradient');\n\t\telem.setAttribute('c1', color1);\n\t\telem.setAttribute('c2', color2);\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\t\n\t\t// Default direction is south\n\t\tif (direction != null)\n\t\t{\n\t\t\telem.setAttribute('direction', direction);\n\t\t}\n\t\t\n\t\tif (alpha1 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha1', alpha1);\n\t\t}\n\t\t\n\t\tif (alpha2 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha2', alpha2);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokecolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n * \n * Parameters:\n * \n * value - Numeric representation of the stroke width.\n */\nmxXmlCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeWidth == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeWidth.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokewidth');\n\telem.setAttribute('width', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n * \n * Parameters:\n * \n * value - Boolean that specifies if dashed lines should be enabled.\n * value - Boolean that specifies if the stroke width should be ignored\n * for the dash pattern. Default is false.\n */\nmxXmlCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashed == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashed.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashed');\n\telem.setAttribute('dashed', (value) ? '1' : '0');\n\t\n\tif (fixDash != null)\n\t{\n\t\telem.setAttribute('fixDash', (fixDash) ? '1' : '0');\n\t}\n\t\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern. Default is '3 3'.\n * \n * Parameters:\n * \n * value - String that represents the dash pattern, which is a sequence of\n * numbers defining the length of the dashes and the length of the spaces\n * between the dashes. The lengths are relative to the line width - a length\n * of 1 is equals to the line width.\n */\nmxXmlCanvas2D.prototype.setDashPattern = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashPattern == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashPattern.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashpattern');\n\telem.setAttribute('pattern', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the line cap. Default is 'flat' which corresponds to 'butt' in SVG.\n * \n * Parameters:\n * \n * value - String that represents the line cap. Possible values are flat, round\n * and square.\n */\nmxXmlCanvas2D.prototype.setLineCap = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineCap == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineCap.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linecap');\n\telem.setAttribute('cap', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the line join. Default is 'miter'.\n * \n * Parameters:\n * \n * value - String that represents the line join. Possible values are miter,\n * round and bevel.\n */\nmxXmlCanvas2D.prototype.setLineJoin = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineJoin == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineJoin.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linejoin');\n\telem.setAttribute('join', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the miter limit. Default is 10.\n * \n * Parameters:\n * \n * value - Number that represents the miter limit.\n */\nmxXmlCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.miterLimit == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setMiterLimit.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('miterlimit');\n\telem.setAttribute('limit', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color. Default is '#000000'.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBackgroundColor\n * \n * Sets the current font background color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBackgroundColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBackgroundColor.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontbackgroundcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBorderColor\n * \n * Sets the current font border color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBorderColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBorderColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontbordercolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size. Default is <mxConstants.DEFAULT_FONTSIZE>.\n * \n * Parameters:\n * \n * value - Numeric representation of the font size.\n */\nmxXmlCanvas2D.prototype.setFontSize = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontSize == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontSize.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontsize');\n\t\telem.setAttribute('size', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family. Default is <mxConstants.DEFAULT_FONTFAMILY>.\n * \n * Parameters:\n * \n * value - String representation of the font family. This handles the same\n * values as the CSS font-family property.\n */\nmxXmlCanvas2D.prototype.setFontFamily = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontFamily == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontFamily.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontfamily');\n\t\telem.setAttribute('family', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n * \n * Parameters:\n * \n * value - Numeric representation of the font family. This is the sum of the\n * font styles from <mxConstants>.\n */\nmxXmlCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontStyle == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontStyle.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontstyle');\n\t\telem.setAttribute('style', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables shadows.\n * \n * Parameters:\n * \n * value - Boolean that specifies if shadows should be enabled.\n */\nmxXmlCanvas2D.prototype.setShadow = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadow == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadow.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadow');\n\telem.setAttribute('enabled', (value) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowColor\n * \n * Sets the current shadow color. Default is <mxConstants.SHADOWCOLOR>.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.state.shadowColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Sets the current shadows alpha. Default is <mxConstants.SHADOW_OPACITY>.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', value);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: setShadowOffset\n * \n * Sets the current shadow offset.\n * \n * Parameters:\n * \n * dx - Number that represents the horizontal offset of the shadow.\n * dy - Number that represents the vertical offset of the shadow.\n */\nmxXmlCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowDx == dx && this.state.shadowDy == dy)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowOffset.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', dx);\n\telem.setAttribute('dy', dy);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: rect\n * \n * Puts a rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n */\nmxXmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar elem = this.createElement('rect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: roundrect\n * \n * Puts a rounded rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n * dx - Number that represents the horizontal rounding.\n * dy - Number that represents the vertical rounding.\n */\nmxXmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tvar elem = this.createElement('roundrect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: ellipse\n * \n * Puts an ellipse into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the ellipse.\n * y - Number that represents the y-coordinate of the ellipse.\n * w - Number that represents the width of the ellipse.\n * h - Number that represents the height of the ellipse.\n */\nmxXmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar elem = this.createElement('ellipse');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the image.\n * y - Number that represents the y-coordinate of the image.\n * w - Number that represents the width of the image.\n * h - Number that represents the height of the image.\n * src - String that specifies the URL of the image.\n * aspect - Boolean indicating if the aspect of the image should be preserved.\n * flipH - Boolean indicating if the image should be flipped horizontally.\n * flipV - Boolean indicating if the image should be flipped vertically.\n */\nmxXmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\tvar elem = this.createElement('image');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('src', src);\n\telem.setAttribute('aspect', (aspect) ? '1' : '0');\n\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: begin\n * \n * Starts a new path and puts it into the drawing buffer.\n */\nmxXmlCanvas2D.prototype.begin = function()\n{\n\tthis.root.appendChild(this.createElement('begin'));\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n};\n\n/**\n * Function: moveTo\n * \n * Moves the current path the given point.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the point.\n * y - Number that represents the y-coordinate of the point.\n */\nmxXmlCanvas2D.prototype.moveTo = function(x, y)\n{\n\tvar elem = this.createElement('move');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the endpoint.\n * y - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.lineTo = function(x, y)\n{\n\tvar elem = this.createElement('line');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the control point.\n * y1 - Number that represents the y-coordinate of the control point.\n * x2 - Number that represents the x-coordinate of the endpoint.\n * y2 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar elem = this.createElement('quad');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x2;\n\tthis.lastY = y2;\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the first control point.\n * y1 - Number that represents the y-coordinate of the first control point.\n * x2 - Number that represents the x-coordinate of the second control point.\n * y2 - Number that represents the y-coordinate of the second control point.\n * x3 - Number that represents the x-coordinate of the endpoint.\n * y3 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tvar elem = this.createElement('curve');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\telem.setAttribute('x3', this.format(x3));\n\telem.setAttribute('y3', this.format(y3));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x3;\n\tthis.lastY = y3;\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxXmlCanvas2D.prototype.close = function()\n{\n\tthis.root.appendChild(this.createElement('close'));\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup. Background and border color as well\n * as clipping is not available in plain text labels for VML. HTML labels\n * are not available as part of shapes with no foreignObject support in SVG\n * (eg. IE9, IE10).\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the text.\n * y - Number that represents the y-coordinate of the text.\n * w - Number that represents the available width for the text or 0 for automatic width.\n * h - Number that represents the available height for the text or 0 for automatic height.\n * str - String that specifies the text to be painted.\n * align - String that represents the horizontal alignment.\n * valign - String that represents the vertical alignment.\n * wrap - Boolean that specifies if word-wrapping is enabled. Requires w > 0.\n * format - Empty string for plain text or 'html' for HTML markup.\n * overflow - Specifies the overflow behaviour of the label. Requires w > 0 and/or h > 0.\n * clip - Boolean that specifies if the label should be clipped. Requires w > 0 and/or h > 0.\n * rotation - Number that specifies the angle of the rotation around the anchor point of the text.\n * dir - Optional string that specifies the text direction. Possible values are rtl and lrt.\n */\nmxXmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tif (mxUtils.isNode(str))\n\t\t{\n\t\t\tstr = mxUtils.getOuterHtml(str);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('text');\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\telem.setAttribute('str', str);\n\t\t\n\t\tif (align != null)\n\t\t{\n\t\t\telem.setAttribute('align', align);\n\t\t}\n\t\t\n\t\tif (valign != null)\n\t\t{\n\t\t\telem.setAttribute('valign', valign);\n\t\t}\n\t\t\n\t\telem.setAttribute('wrap', (wrap) ? '1' : '0');\n\t\t\n\t\tif (format == null)\n\t\t{\n\t\t\tformat = '';\n\t\t}\n\t\t\n\t\telem.setAttribute('format', format);\n\t\t\n\t\tif (overflow != null)\n\t\t{\n\t\t\telem.setAttribute('overflow', overflow);\n\t\t}\n\t\t\n\t\tif (clip != null)\n\t\t{\n\t\t\telem.setAttribute('clip', (clip) ? '1' : '0');\n\t\t}\n\t\t\n\t\tif (rotation != null)\n\t\t{\n\t\t\telem.setAttribute('rotation', rotation);\n\t\t}\n\t\t\n\t\tif (dir != null)\n\t\t{\n\t\t\telem.setAttribute('dir', dir);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.stroke = function()\n{\n\tthis.root.appendChild(this.createElement('stroke'));\n};\n\n/**\n * Function: fill\n * \n * Fills the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.fill = function()\n{\n\tthis.root.appendChild(this.createElement('fill'));\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills the current drawing buffer and its outline.\n */\nmxXmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.root.appendChild(this.createElement('fillstroke'));\n};\n\n__mxOutput.mxXmlCanvas2D = typeof mxXmlCanvas2D !== 'undefined' ? mxXmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSvgCanvas2D\n *\n * Extends <mxAbstractCanvas2D> to implement a canvas for SVG. This canvas writes all\n * calls as SVG output to the given SVG root node.\n * \n * (code)\n * var svgDoc = mxUtils.createXmlDocument();\n * var root = (svgDoc.createElementNS != null) ?\n * \t\tsvgDoc.createElementNS(mxConstants.NS_SVG, 'svg') : svgDoc.createElement('svg');\n * \n * if (svgDoc.createElementNS == null)\n * {\n *   root.setAttribute('xmlns', mxConstants.NS_SVG);\n *   root.setAttribute('xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * else\n * {\n *   root.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * \n * var bounds = graph.getGraphBounds();\n * root.setAttribute('width', (bounds.x + bounds.width + 4) + 'px');\n * root.setAttribute('height', (bounds.y + bounds.height + 4) + 'px');\n * root.setAttribute('version', '1.1');\n * \n * svgDoc.appendChild(root);\n * \n * var svgCanvas = new mxSvgCanvas2D(root);\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>.\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * graph.view.canvas.ownerSVGElement.setAttribute('shape-rendering', 'crispEdges');\n * (end)\n * \n * Or set the respective attribute in the SVG element directly.\n * \n * Constructor: mxSvgCanvas2D\n *\n * Constructs a new SVG canvas.\n * \n * Parameters:\n * \n * root - SVG container for the output.\n * styleEnabled - Optional boolean that specifies if a style section should be\n * added. The style section sets the default font-size, font-family and\n * stroke-miterlimit globally. Default is false.\n */\nfunction mxSvgCanvas2D(root, styleEnabled)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t/**\n\t * Variable: gradients\n\t * \n\t * Local cache of gradients for quick lookups.\n\t */\n\tthis.gradients = [];\n\n\t/**\n\t * Variable: defs\n\t * \n\t * Reference to the defs section of the SVG document. Only for export.\n\t */\n\tthis.defs = null;\n\t\n\t/**\n\t * Variable: styleEnabled\n\t * \n\t * Stores the value of styleEnabled passed to the constructor.\n\t */\n\tthis.styleEnabled = (styleEnabled != null) ? styleEnabled : false;\n\t\n\tvar svg = null;\n\t\n\t// Adds optional defs section for export\n\tif (root.ownerDocument != document)\n\t{\n\t\tvar node = root;\n\n\t\t// Finds owner SVG element in XML DOM\n\t\twhile (node != null && node.nodeName != 'svg')\n\t\t{\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tsvg = node;\n\t}\n\n\tif (svg != null)\n\t{\n\t\t// Tries to get existing defs section\n\t\tvar tmp = svg.getElementsByTagName('defs');\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tthis.defs = svg.getElementsByTagName('defs')[0];\n\t\t}\n\t\t\n\t\t// Adds defs section if none exists\n\t\tif (this.defs == null)\n\t\t{\n\t\t\tthis.defs = this.createElement('defs');\n\t\t\t\n\t\t\tif (svg.firstChild != null)\n\t\t\t{\n\t\t\t\tsvg.insertBefore(this.defs, svg.firstChild);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(this.defs);\n\t\t\t}\n\t\t}\n\n\t\t// Adds stylesheet\n\t\tif (this.styleEnabled)\n\t\t{\n\t\t\tthis.defs.appendChild(this.createStyle());\n\t\t}\n\t}\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxSvgCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Capability check for DOM parser.\n */\n(function()\n{\n\tmxSvgCanvas2D.prototype.useDomParser = !mxClient.IS_IE && typeof DOMParser === 'function' && typeof XMLSerializer === 'function';\n\t\n\tif (mxSvgCanvas2D.prototype.useDomParser)\n\t{\n\t\t// Checks using a generic test text if the parsing actually works. This is a workaround\n\t\t// for older browsers where the capability check returns true but the parsing fails.\n\t\ttry\n\t\t{\n\t\t\tvar doc = new DOMParser().parseFromString('test text', 'text/html');\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = doc != null;\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = false;\n\t\t}\n\t}\n})();\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxSvgCanvas2D.prototype.node = null;\n\n/**\n * Variable: matchHtmlAlignment\n * \n * Specifies if plain text output should match the vertical HTML alignment.\n * Defaul is true.\n */\nmxSvgCanvas2D.prototype.matchHtmlAlignment = true;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxSvgCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: foEnabled\n * \n * Specifies if use of foreignObject for HTML markup is allowed. Default is true.\n */\nmxSvgCanvas2D.prototype.foEnabled = true;\n\n/**\n * Variable: foAltText\n * \n * Specifies the fallback text for unsupported foreignObjects in exported\n * documents. Default is '[Object]'. If this is set to null then no fallback\n * text is added to the exported document.\n */\nmxSvgCanvas2D.prototype.foAltText = '[Object]';\n\n/**\n * Variable: foOffset\n * \n * Offset to be used for foreignObjects.\n */\nmxSvgCanvas2D.prototype.foOffset = 0;\n\n/**\n * Variable: textOffset\n * \n * Offset to be used for text elements.\n */\nmxSvgCanvas2D.prototype.textOffset = 0;\n\n/**\n * Variable: imageOffset\n * \n * Offset to be used for image elements.\n */\nmxSvgCanvas2D.prototype.imageOffset = 0;\n\n/**\n * Variable: strokeTolerance\n * \n * Adds transparent paths for strokes.\n */\nmxSvgCanvas2D.prototype.strokeTolerance = 0;\n\n/**\n * Variable: minStrokeWidth\n * \n * Minimum stroke width for output.\n */\nmxSvgCanvas2D.prototype.minStrokeWidth = 1;\n\n/**\n * Variable: refCount\n * \n * Local counter for references in SVG export.\n */\nmxSvgCanvas2D.prototype.refCount = 0;\n\n/**\n * Variable: lineHeightCorrection\n * \n * Correction factor for <mxConstants.LINE_HEIGHT> in HTML output. Default is 1.\n */\nmxSvgCanvas2D.prototype.lineHeightCorrection = 1;\n\n/**\n * Variable: pointerEventsValue\n * \n * Default value for active pointer events. Default is all.\n */\nmxSvgCanvas2D.prototype.pointerEventsValue = 'all';\n\n/**\n * Variable: fontMetricsPadding\n * \n * Padding to be added for text that is not wrapped to account for differences\n * in font metrics on different platforms in pixels. Default is 10.\n */\nmxSvgCanvas2D.prototype.fontMetricsPadding = 10;\n\n/**\n * Variable: cacheOffsetSize\n * \n * Specifies if offsetWidth and offsetHeight should be cached. Default is true.\n * This is used to speed up repaint of text in <updateText>.\n */\nmxSvgCanvas2D.prototype.cacheOffsetSize = true;\n\n/**\n * Function: format\n * \n * Rounds all numbers to 2 decimal points.\n */\nmxSvgCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns the URL of the page without the hash part. This needs to use href to\n * include any search part with no params (ie question mark alone). This is a\n * workaround for the fact that window.location.search is empty if there is\n * no search string behind the question mark.\n */\nmxSvgCanvas2D.prototype.getBaseUrl = function()\n{\n\tvar href = window.location.href;\n\tvar hash = href.lastIndexOf('#');\n\t\n\tif (hash > 0)\n\t{\n\t\thref = href.substring(0, hash);\n\t}\n\t\n\treturn href;\n};\n\n/**\n * Function: reset\n * \n * Returns any offsets for rendering pixels.\n */\nmxSvgCanvas2D.prototype.reset = function()\n{\n\tmxAbstractCanvas2D.prototype.reset.apply(this, arguments);\n\tthis.gradients = [];\n};\n\n/**\n * Function: createStyle\n * \n * Creates the optional style section.\n */\nmxSvgCanvas2D.prototype.createStyle = function(x)\n{\n\tvar style = this.createElement('style');\n\tstyle.setAttribute('type', 'text/css');\n\tmxUtils.write(style, 'svg{font-family:' + mxConstants.DEFAULT_FONTFAMILY +\n\t\t\t';font-size:' + mxConstants.DEFAULT_FONTSIZE +\n\t\t\t';fill:none;stroke-miterlimit:10}');\n\t\n\treturn style;\n};\n\n/**\n * Function: createElement\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createElement = function(tagName, namespace)\n{\n\tif (this.root.ownerDocument.createElementNS != null)\n\t{\n\t\treturn this.root.ownerDocument.createElementNS(namespace || mxConstants.NS_SVG, tagName);\n\t}\n\telse\n\t{\n\t\tvar elt = this.root.ownerDocument.createElement(tagName);\n\t\t\n\t\tif (namespace != null)\n\t\t{\n\t\t\telt.setAttribute('xmlns', namespace);\n\t\t}\n\t\t\n\t\treturn elt;\n\t}\n};\n\n/**\n * Function: getAlternateText\n * \n * Returns the alternate text string for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.getAlternateText = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\treturn (str != null) ? this.foAltText : null;\n};\n\n/**\n * Function: getAlternateContent\n * \n * Returns the alternate content for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.createAlternateContent = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\tvar text = this.getAlternateText(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\tvar s = this.state;\n\n\tif (text != null && s.fontSize > 0)\n\t{\n\t\tvar dy = (valign == mxConstants.ALIGN_TOP) ? 1 :\n\t\t\t(valign == mxConstants.ALIGN_BOTTOM) ? 0 : 0.3;\n\t\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t(align == mxConstants.ALIGN_LEFT) ? 'start' :\n\t\t\t'middle';\n\t\n\t\tvar alt = this.createElement('text');\n\t\talt.setAttribute('x', Math.round(x + s.dx));\n\t\talt.setAttribute('y', Math.round(y + s.dy + dy * s.fontSize));\n\t\talt.setAttribute('fill', s.fontColor || 'black');\n\t\talt.setAttribute('font-family', s.fontFamily);\n\t\talt.setAttribute('font-size', Math.round(s.fontSize) + 'px');\n\n\t\t// Text-anchor start is default in SVG\n\t\tif (anchor != 'start')\n\t\t{\n\t\t\talt.setAttribute('text-anchor', anchor);\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t{\n\t\t\talt.setAttribute('font-weight', 'bold');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t{\n\t\t\talt.setAttribute('font-style', 'italic');\n\t\t}\n\t\t\n\t\tvar txtDecor = [];\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\ttxtDecor.push('underline');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t{\n\t\t\ttxtDecor.push('line-through');\n\t\t}\n\t\t\n\t\tif (txtDecor.length > 0)\n\t\t{\n\t\t\talt.setAttribute('text-decoration', txtDecor.join(' '));\n\t\t}\n\t\t\n\t\tmxUtils.write(alt, text);\n\t\t\n\t\treturn alt;\n\t}\n\telse\n\t{\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: createGradientId\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createGradientId = function(start, end, alpha1, alpha2, direction)\n{\n\t// Removes illegal characters from gradient ID\n\tif (start.charAt(0) == '#')\n\t{\n\t\tstart = start.substring(1);\n\t}\n\t\n\tif (end.charAt(0) == '#')\n\t{\n\t\tend = end.substring(1);\n\t}\n\t\n\t// Workaround for gradient IDs not working in Safari 5 / Chrome 6\n\t// if they contain uppercase characters\n\tstart = start.toLowerCase() + '-' + alpha1;\n\tend = end.toLowerCase() + '-' + alpha2;\n\n\t// Wrong gradient directions possible?\n\tvar dir = null;\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tdir = 's';\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tdir = 'e';\n\t}\n\telse\n\t{\n\t\tvar tmp = start;\n\t\tstart = end;\n\t\tend = tmp;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tdir = 's';\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tdir = 'e';\n\t\t}\n\t}\n\t\n\treturn 'mx-gradient-' + start + '-' + end + '-' + dir;\n};\n\n/**\n * Function: getSvgGradient\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar id = this.createGradientId(start, end, alpha1, alpha2, direction);\n\tvar gradient = this.gradients[id];\n\t\n\tif (gradient == null)\n\t{\n\t\tvar svg = this.root.ownerSVGElement;\n\n\t\tvar counter = 0;\n\t\tvar tmpId = id + '-' + counter;\n\n\t\tif (svg != null)\n\t\t{\n\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t\n\t\t\twhile (gradient != null && gradient.ownerSVGElement != svg)\n\t\t\t{\n\t\t\t\ttmpId = id + '-' + counter++;\n\t\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses shorter IDs for export\n\t\t\ttmpId = 'id' + (++this.refCount);\n\t\t}\n\t\t\n\t\tif (gradient == null)\n\t\t{\n\t\t\tgradient = this.createSvgGradient(start, end, alpha1, alpha2, direction);\n\t\t\tgradient.setAttribute('id', tmpId);\n\t\t\t\n\t\t\tif (this.defs != null)\n\t\t\t{\n\t\t\t\tthis.defs.appendChild(gradient);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(gradient);\n\t\t\t}\n\t\t}\n\n\t\tthis.gradients[id] = gradient;\n\t}\n\n\treturn gradient.getAttribute('id');\n};\n\n/**\n * Function: createSvgGradient\n * \n * Creates the given SVG gradient.\n */\nmxSvgCanvas2D.prototype.createSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar gradient = this.createElement('linearGradient');\n\tgradient.setAttribute('x1', '0%');\n\tgradient.setAttribute('y1', '0%');\n\tgradient.setAttribute('x2', '0%');\n\tgradient.setAttribute('y2', '0%');\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tgradient.setAttribute('y2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tgradient.setAttribute('x2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_NORTH)\n\t{\n\t\tgradient.setAttribute('y1', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_WEST)\n\t{\n\t\tgradient.setAttribute('x1', '100%');\n\t}\n\t\n\tvar op = (alpha1 < 1) ? ';stop-opacity:' + alpha1 : '';\n\t\n\tvar stop = this.createElement('stop');\n\tstop.setAttribute('offset', '0%');\n\tstop.setAttribute('style', 'stop-color:' + start + op);\n\tgradient.appendChild(stop);\n\t\n\top = (alpha2 < 1) ? ';stop-opacity:' + alpha2 : '';\n\t\n\tstop = this.createElement('stop');\n\tstop.setAttribute('offset', '100%');\n\tstop.setAttribute('style', 'stop-color:' + end + op);\n\tgradient.appendChild(stop);\n\t\n\treturn gradient;\n};\n\n/**\n * Function: addNode\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'path')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.setAttribute('d', this.path.join(' '));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tthis.updateFill();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\t// Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=814952\n\t\t\tif (node.nodeName == 'ellipse' && mxClient.IS_FF)\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'transparent');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'none');\n\t\t\t}\n\t\t\t\n\t\t\t// Sets the actual filled state for stroke tolerance\n\t\t\tfilled = false;\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tthis.updateStroke();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\tnode.setAttribute('stroke', 'none');\n\t\t}\n\t\t\n\t\tif (s.transform != null && s.transform.length > 0)\n\t\t{\n\t\t\tnode.setAttribute('transform', s.transform);\n\t\t}\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node));\n\t\t}\n\t\n\t\t// Adds stroke tolerance\n\t\tif (this.strokeTolerance > 0 && !filled)\n\t\t{\n\t\t\tthis.root.appendChild(this.createTolerance(node));\n\t\t}\n\n\t\t// Adds pointer events\n\t\tif (this.pointerEvents)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', this.pointerEventsValue);\n\t\t}\n\t\t// Enables clicks for nodes inside a link element\n\t\telse if (!this.pointerEvents && this.originalRoot == null)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', 'none');\n\t\t}\n\t\t\n\t\t// Removes invisible nodes from output if they don't handle events\n\t\tif ((node.nodeName != 'rect' && node.nodeName != 'path' && node.nodeName != 'ellipse') ||\n\t\t\t(node.getAttribute('fill') != 'none' && node.getAttribute('fill') != 'transparent') ||\n\t\t\tnode.getAttribute('stroke') != 'none' || node.getAttribute('pointer-events') != 'none')\n\t\t{\n\t\t\t// LATER: Update existing DOM for performance\t\t\n\t\t\tthis.root.appendChild(node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n};\n\n/**\n * Function: updateFill\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateFill = function()\n{\n\tvar s = this.state;\n\t\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('fill-opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tif (s.fillColor != null)\n\t{\n\t\tif (s.gradientColor != null)\n\t\t{\n\t\t\tvar id = this.getSvgGradient(String(s.fillColor), String(s.gradientColor),\n\t\t\t\ts.gradientFillAlpha, s.gradientAlpha, s.gradientDirection);\n\t\t\t\n\t\t\tif (!mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t\t{\n\t\t\t\t// Workaround for potential base tag and brackets must be escaped\n\t\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\t\tthis.node.setAttribute('fill', 'url(' + base + '#' + id + ')');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.node.setAttribute('fill', 'url(#' + id + ')');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.node.setAttribute('fill', String(s.fillColor).toLowerCase());\n\t\t}\n\t}\n};\n\n/**\n * Function: getCurrentStrokeWidth\n * \n * Returns the current stroke width (>= 1), ie. max(1, this.format(this.state.strokeWidth * this.state.scale)).\n */\nmxSvgCanvas2D.prototype.getCurrentStrokeWidth = function()\n{\n\treturn Math.max(this.minStrokeWidth, Math.max(0.01, this.format(this.state.strokeWidth * this.state.scale)));\n};\n\n/**\n * Function: updateStroke\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStroke = function()\n{\n\tvar s = this.state;\n\n\tthis.node.setAttribute('stroke', String(s.strokeColor).toLowerCase());\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('stroke-opacity', s.alpha * s.strokeAlpha);\n\t}\n\t\n\tvar sw = this.getCurrentStrokeWidth();\n\t\n\tif (sw != 1)\n\t{\n\t\tthis.node.setAttribute('stroke-width', sw);\n\t}\n\t\n\tif (this.node.nodeName == 'path')\n\t{\n\t\tthis.updateStrokeAttributes();\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tthis.node.setAttribute('stroke-dasharray', this.createDashPattern(\n\t\t\t((s.fixDash) ? 1 : s.strokeWidth) * s.scale));\n\t}\n};\n\n/**\n * Function: updateStrokeAttributes\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStrokeAttributes = function()\n{\n\tvar s = this.state;\n\t\n\t// Linejoin miter is default in SVG\n\tif (s.lineJoin != null && s.lineJoin != 'miter')\n\t{\n\t\tthis.node.setAttribute('stroke-linejoin', s.lineJoin);\n\t}\n\t\n\tif (s.lineCap != null)\n\t{\n\t\t// flat is called butt in SVG\n\t\tvar value = s.lineCap;\n\t\t\n\t\tif (value == 'flat')\n\t\t{\n\t\t\tvalue = 'butt';\n\t\t}\n\t\t\n\t\t// Linecap butt is default in SVG\n\t\tif (value != 'butt')\n\t\t{\n\t\t\tthis.node.setAttribute('stroke-linecap', value);\n\t\t}\n\t}\n\t\n\t// Miterlimit 10 is default in our document\n\tif (s.miterLimit != null && (!this.styleEnabled || s.miterLimit != 10))\n\t{\n\t\tthis.node.setAttribute('stroke-miterlimit', s.miterLimit);\n\t}\n};\n\n/**\n * Function: createDashPattern\n * \n * Creates the SVG dash pattern for the given state.\n */\nmxSvgCanvas2D.prototype.createDashPattern = function(scale)\n{\n\tvar pat = [];\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar dash = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (dash.length > 0)\n\t\t{\n\t\t\tfor (var i = 0; i < dash.length; i++)\n\t\t\t{\n\t\t\t\tpat[i] = Number(dash[i]) * scale;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn pat.join(' ');\n};\n\n/**\n * Function: createTolerance\n * \n * Creates a hit detection tolerance shape for the given node.\n */\nmxSvgCanvas2D.prototype.createTolerance = function(node)\n{\n\tvar tol = node.cloneNode(true);\n\tvar sw = parseFloat(tol.getAttribute('stroke-width') || 1) + this.strokeTolerance;\n\ttol.setAttribute('pointer-events', 'stroke');\n\ttol.setAttribute('visibility', 'hidden');\n\ttol.removeAttribute('stroke-dasharray');\n\ttol.setAttribute('stroke-width', sw);\n\ttol.setAttribute('fill', 'none');\n\t\n\t// Workaround for Opera ignoring the visiblity attribute above while\n\t// other browsers need a stroke color to perform the hit-detection but\n\t// do not ignore the visibility attribute. Side-effect is that Opera's\n\t// hit detection for horizontal/vertical edges seems to ignore the tol.\n\ttol.setAttribute('stroke', (mxClient.IS_OT) ? 'none' : 'white');\n\t\n\treturn tol;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxSvgCanvas2D.prototype.createShadow = function(node)\n{\n\tvar shadow = node.cloneNode(true);\n\tvar s = this.state;\n\n\t// Firefox uses transparent for no fill in ellipses\n\tif (shadow.getAttribute('fill') != 'none' && (!mxClient.IS_FF || shadow.getAttribute('fill') != 'transparent'))\n\t{\n\t\tshadow.setAttribute('fill', s.shadowColor);\n\t}\n\t\n\tif (shadow.getAttribute('stroke') != 'none')\n\t{\n\t\tshadow.setAttribute('stroke', s.shadowColor);\n\t}\n\n\tshadow.setAttribute('transform', 'translate(' + this.format(s.shadowDx * s.scale) +\n\t\t',' + this.format(s.shadowDy * s.scale) + ')' + (s.transform || ''));\n\tshadow.setAttribute('opacity', s.shadowAlpha);\n\t\n\treturn shadow;\n};\n\n/**\n * Function: setLink\n * \n * Experimental implementation for hyperlinks.\n */\nmxSvgCanvas2D.prototype.setLink = function(link)\n{\n\tif (link == null)\n\t{\n\t\tthis.root = this.originalRoot;\n\t}\n\telse\n\t{\n\t\tthis.originalRoot = this.root;\n\t\t\n\t\tvar node = this.createElement('a');\n\t\t\n\t\t// Workaround for implicit namespace handling in HTML5 export, IE adds NS1 namespace so use code below\n\t\t// in all IE versions except quirks mode. KNOWN: Adds xlink namespace to each image tag in output.\n\t\tif (node.setAttributeNS == null || (this.root.ownerDocument != document && document.documentMode == null))\n\t\t{\n\t\t\tnode.setAttribute('xlink:href', link);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', link);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(node);\n\t\tthis.root = node;\n\t}\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxSvgCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\tvar s = this.state;\n\t\tcx += s.dx;\n\t\tcy += s.dy;\n\t\n\t\tcx *= s.scale;\n\t\tcy *= s.scale;\n\n\t\ts.transform = s.transform || '';\n\t\t\n\t\t// This implementation uses custom scale/translate and built-in rotation\n\t\t// Rotation state is part of the AffineTransform in state.transform\n\t\tif (flipH && flipV)\n\t\t{\n\t\t\ttheta += 180;\n\t\t}\n\t\telse if (flipH != flipV)\n\t\t{\n\t\t\tvar tx = (flipH) ? cx : 0;\n\t\t\tvar sx = (flipH) ? -1 : 1;\n\t\n\t\t\tvar ty = (flipV) ? cy : 0;\n\t\t\tvar sy = (flipV) ? -1 : 1;\n\n\t\t\ts.transform += 'translate(' + this.format(tx) + ',' + this.format(ty) + ')' +\n\t\t\t\t'scale(' + this.format(sx) + ',' + this.format(sy) + ')' +\n\t\t\t\t'translate(' + this.format(-tx) + ',' + this.format(-ty) + ')';\n\t\t}\n\t\t\n\t\tif (flipH ? !flipV : flipV)\n\t\t{\n\t\t\ttheta *= -1;\n\t\t}\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\ts.transform += 'rotate(' + this.format(theta) + ',' + this.format(cx) + ',' + this.format(cy) + ')';\n\t\t}\n\t\t\n\t\ts.rotation = s.rotation + theta;\n\t\ts.rotationCx = cx;\n\t\ts.rotationCy = cy;\n\t}\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxSvgCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createElement('path');\n};\n\n/**\n * Function: rect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('rect');\n\tn.setAttribute('x', this.format((x + s.dx) * s.scale));\n\tn.setAttribute('y', this.format((y + s.dy) * s.scale));\n\tn.setAttribute('width', this.format(w * s.scale));\n\tn.setAttribute('height', this.format(h * s.scale));\n\t\n\tthis.node = n;\n};\n\n/**\n * Function: roundrect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.rect(x, y, w, h);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.node.setAttribute('rx', this.format(dx * this.state.scale));\n\t}\n\t\n\tif (dy > 0)\n\t{\n\t\tthis.node.setAttribute('ry', this.format(dy * this.state.scale));\n\t}\n};\n\n/**\n * Function: ellipse\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('ellipse');\n\t// No rounding for consistent output with 1.x\n\tn.setAttribute('cx', this.format((x + w / 2 + s.dx) * s.scale));\n\tn.setAttribute('cy', this.format((y + h / 2 + s.dy) * s.scale));\n\tn.setAttribute('rx', w / 2 * s.scale);\n\tn.setAttribute('ry', h / 2 * s.scale);\n\tthis.node = n;\n};\n\n/**\n * Function: image\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\taspect = (aspect != null) ? aspect : true;\n\tflipH = (flipH != null) ? flipH : false;\n\tflipV = (flipV != null) ? flipV : false;\n\t\n\tvar s = this.state;\n\tx += s.dx;\n\ty += s.dy;\n\t\n\tvar node = this.createElement('image');\n\tnode.setAttribute('x', this.format(x * s.scale) + this.imageOffset);\n\tnode.setAttribute('y', this.format(y * s.scale) + this.imageOffset);\n\tnode.setAttribute('width', this.format(w * s.scale));\n\tnode.setAttribute('height', this.format(h * s.scale));\n\t\n\t// Workaround for missing namespace support\n\tif (node.setAttributeNS == null)\n\t{\n\t\tnode.setAttribute('xlink:href', src);\n\t}\n\telse\n\t{\n\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', src);\n\t}\n\t\n\tif (!aspect)\n\t{\n\t\tnode.setAttribute('preserveAspectRatio', 'none');\n\t}\n\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tvar tr = this.state.transform || '';\n\t\n\tif (flipH || flipV)\n\t{\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\tif (flipH)\n\t\t{\n\t\t\tsx = -1;\n\t\t\tdx = -w - 2 * x;\n\t\t}\n\t\t\n\t\tif (flipV)\n\t\t{\n\t\t\tsy = -1;\n\t\t\tdy = -h - 2 * y;\n\t\t}\n\t\t\n\t\t// Adds image tansformation to existing transform\n\t\ttr += 'scale(' + sx + ',' + sy + ')translate(' + (dx * s.scale) + ',' + (dy * s.scale) + ')';\n\t}\n\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (!this.pointerEvents)\n\t{\n\t\tnode.setAttribute('pointer-events', 'none');\n\t}\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: convertHtml\n * \n * Converts the given HTML string to XHTML.\n */\nmxSvgCanvas2D.prototype.convertHtml = function(val)\n{\n\tif (this.useDomParser)\n\t{\n\t\tvar doc = new DOMParser().parseFromString(val, 'text/html');\n\n\t\tif (doc != null)\n\t\t{\n\t\t\tval = new XMLSerializer().serializeToString(doc.body);\n\t\t\t\n\t\t\t// Extracts body content from DOM\n\t\t\tif (val.substring(0, 5) == '<body')\n\t\t\t{\n\t\t\t\tval = val.substring(val.indexOf('>', 5) + 1);\n\t\t\t}\n\t\t\t\n\t\t\tif (val.substring(val.length - 7, val.length) == '</body>')\n\t\t\t{\n\t\t\t\tval = val.substring(0, val.length - 7);\n\t\t\t}\n\t\t}\n\t}\n\telse if (document.implementation != null && document.implementation.createDocument != null)\n\t{\n\t\tvar xd = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', null);\n\t\tvar xb = xd.createElement('body');\n\t\txd.documentElement.appendChild(xb);\n\t\t\n\t\tvar div = document.createElement('div');\n\t\tdiv.innerHTML = val;\n\t\tvar child = div.firstChild;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar next = child.nextSibling;\n\t\t\txb.appendChild(xd.adoptNode(child));\n\t\t\tchild = next;\n\t\t}\n\t\t\n\t\treturn xb.innerHTML;\n\t}\n\telse\n\t{\n\t\tvar ta = document.createElement('textarea');\n\t\t\n\t\t// Handles special HTML entities < and > and double escaping\n\t\t// and converts unclosed br, hr and img tags to XHTML\n\t\t// LATER: Convert all unclosed tags\n\t\tta.innerHTML = val.replace(/&amp;/g, '&amp;amp;').\n\t\t\treplace(/&#60;/g, '&amp;lt;').replace(/&#62;/g, '&amp;gt;').\n\t\t\treplace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;').\n\t\t\treplace(/</g, '&lt;').replace(/>/g, '&gt;');\n\t\tval = ta.value.replace(/&/g, '&amp;').replace(/&amp;lt;/g, '&lt;').\n\t\t\treplace(/&amp;gt;/g, '&gt;').replace(/&amp;amp;/g, '&amp;').\n\t\t\treplace(/<br>/g, '<br />').replace(/<hr>/g, '<hr />').\n\t\t\treplace(/(<img[^>]+)>/gm, \"$1 />\");\n\t}\n\t\n\treturn val;\n};\n\n/**\n * Function: createDiv\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createDiv = function(str)\n{\n\tvar val = str;\n\t\n\tif (!mxUtils.isNode(val))\n\t{\n\t\tval = '<div><div>' + this.convertHtml(val) + '</div></div>';\n\t}\n\n\t// IE uses this code for export as it cannot render foreignObjects\n\tif (!mxClient.IS_IE && !mxClient.IS_IE11 && document.createElementNS)\n\t{\n\t\tvar div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n\t\t\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\tvar div2 = document.createElement('div');\n\t\t\tvar div3 = div2.cloneNode(false);\n\t\t\t\n\t\t\t// Creates a copy for export\n\t\t\tif (this.root.ownerDocument != document)\n\t\t\t{\n\t\t\t\tdiv2.appendChild(val.cloneNode(true));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv2.appendChild(val);\n\t\t\t}\n\t\t\t\n\t\t\tdiv3.appendChild(div2);\n\t\t\tdiv.appendChild(div3);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.innerHTML = val;\n\t\t}\n\t\t\n\t\treturn div;\n\t}\n\telse\n\t{\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\tval = '<div><div>' + mxUtils.getXml(val) + '</div></div>';\n\t\t}\n\t\t\n\t\tval = '<div xmlns=\"http://www.w3.org/1999/xhtml\">' + val + '</div>';\n\n\t\t// NOTE: FF 3.6 crashes if content CSS contains \"height:100%\"\n\t\treturn  mxUtils.parseXml(val).documentElement;\n\t}\n};\n\n/**\n * Updates existing DOM nodes for text rendering. LATER: Merge common parts with text function below.\n */\nmxSvgCanvas2D.prototype.updateText = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node)\n{\n\tif (node != null && node.firstChild != null && node.firstChild.firstChild != null)\n\t{\n\t\tthis.updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node.firstChild);\n\t}\n};\n\n/**\n * Function: addForeignObject\n * \n * Creates a foreignObject for the given string and adds it to the given root.\n */\nmxSvgCanvas2D.prototype.addForeignObject = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir, div, root)\n{\n\tvar group = this.createElement('g');\n\tvar fo = this.createElement('foreignObject');\n\t\n\t// Workarounds for print clipping and static position in Safari\n\tfo.setAttribute('style', 'overflow: visible; text-align: left;');\n\tfo.setAttribute('pointer-events', 'none');\n\t\n\t// Import needed for older versions of IE\n\tif (div.ownerDocument != document)\n\t{\n\t\tdiv = mxUtils.importNodeImplementation(fo.ownerDocument, div, true);\n\t}\n\n\tfo.appendChild(div);\n\tgroup.appendChild(fo);\n\n\tthis.updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, group);\n\t\n\t// Alternate content if foreignObject not supported\n\tif (this.root.ownerDocument != document)\n\t{\n\t\tvar alt = this.createAlternateContent(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\t\t\n\t\tif (alt != null)\n\t\t{\n\t\t\tfo.setAttribute('requiredFeatures', 'http://www.w3.org/TR/SVG11/feature#Extensibility');\n\t\t\tvar sw = this.createElement('switch');\n\t\t\tsw.appendChild(fo);\n\t\t\tsw.appendChild(alt);\n\t\t\tgroup.appendChild(sw);\n\t\t}\n\t}\n\t\n\troot.appendChild(group);\n};\n\n/**\n * Updates existing DOM nodes for text rendering.\n */\nmxSvgCanvas2D.prototype.updateTextNodes = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, g)\n{\n\tvar s = this.state.scale;\n\n\tmxSvgCanvas2D.createCss(w + 2, h, align, valign, wrap, overflow, clip,\n\t\t(this.state.fontBackgroundColor != null) ? this.state.fontBackgroundColor : null,\n\t\t(this.state.fontBorderColor != null) ? this.state.fontBorderColor : null,\n\t\t'display: flex; align-items: unsafe ' +\n\t\t((valign == mxConstants.ALIGN_TOP) ? 'flex-start' :\n\t\t((valign == mxConstants.ALIGN_BOTTOM) ? 'flex-end' : 'center'))  + '; ' +\n\t\t'justify-content: unsafe ' + ((align == mxConstants.ALIGN_LEFT) ? 'flex-start' :\n\t\t((align == mxConstants.ALIGN_RIGHT) ? 'flex-end' : 'center'))  + '; ',\n\t\tthis.getTextCss(), s, mxUtils.bind(this, function(dx, dy, flex, item, block)\n\t{\n\t\tx += this.state.dx;\n\t\ty += this.state.dy;\n\n\t\tvar fo = g.firstChild;\n\t\tvar div = fo.firstChild;\n\t\tvar box = div.firstChild;\n\t\tvar text = box.firstChild;\n\t\tvar r = ((this.rotateHtml) ? this.state.rotation : 0) + ((rotation != null) ? rotation : 0);\n\t\tvar t = ((this.foOffset != 0) ? 'translate(' + this.foOffset + ' ' + this.foOffset + ')' : '') +\n\t\t\t((s != 1) ? 'scale(' + s + ')' : '');\n\t\t\n\t\ttext.setAttribute('style', block);\n\t\tbox.setAttribute('style', item);\n\t\t\n\t\t// Workaround for clipping in Webkit with scrolling and zoom\n\t\tfo.setAttribute('width', Math.ceil(1 / Math.min(1, s) * 100) + '%');\n\t\tfo.setAttribute('height', Math.ceil(1 / Math.min(1, s) * 100) + '%');\n\t\tvar yp = Math.round(y + dy);\n\t\t\n\t\t// Allows for negative values which are causing problems with\n\t\t// transformed content where the top edge of the foreignObject\n\t\t// limits the text box being moved further up in the diagram.\n\t\t// KNOWN: Possible clipping problems with zoom and scrolling\n\t\t// but this is normally not used with scrollbars as the\n\t\t// coordinates are always positive with scrollbars.\n\t\t// Margin-top is ignored in Safari and no negative values allowed\n\t\t// for padding.\n\t\tif (yp < 0)\n\t\t{\n\t\t\tfo.setAttribute('y', yp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfo.removeAttribute('y');\n\t\t\tflex += 'padding-top: ' + yp + 'px; ';\n\t\t}\n\t\t\n\t\tdiv.setAttribute('style', flex + 'margin-left: ' + Math.round(x + dx) + 'px;');\n\t\tt += ((r != 0) ? ('rotate(' + r + ' ' + x + ' ' + y + ')') : '');\n\n\t\t// Output allows for reflow but Safari cannot use absolute position,\n\t\t// transforms or opacity. https://bugs.webkit.org/show_bug.cgi?id=23113\n\t\tif (t != '')\n\t\t{\t\n\t\t\tg.setAttribute('transform', t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tg.removeAttribute('transform');\n\t\t}\n\t\t\n\t\tif (this.state.alpha != 1)\n\t\t{\n\t\t\tg.setAttribute('opacity', this.state.alpha);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tg.removeAttribute('opacity');\n\t\t}\n\t}));\n};\n\n/**\n * Updates existing DOM nodes for text rendering.\n */\nmxSvgCanvas2D.createCss = function(w, h, align, valign, wrap, overflow, clip, bg, border, flex, block, s, callback)\n{\n\tvar item = 'box-sizing: border-box; font-size: 0; text-align: ' + ((align == mxConstants.ALIGN_LEFT) ? 'left' :\n\t\t((align == mxConstants.ALIGN_RIGHT) ? 'right' : 'center')) + '; ';\n\tvar pt = mxUtils.getAlignmentAsPoint(align, valign);\n\tvar ofl = 'overflow: hidden; ';\n\tvar fw = 'width: 1px; ';\n\tvar fh = 'height: 1px; ';\n\tvar dx = pt.x * w;\n\tvar dy = pt.y * h;\n\t\n\tif (clip)\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\titem += 'max-height: ' + Math.round(h) + 'px; ';\n\t\tdy = 0;\n\t}\n\telse if (overflow == 'fill')\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\tfh = 'height: ' + Math.round(h) + 'px; ';\n\t\tblock += 'width: 100%; height: 100%; ';\n\t\titem += fw + fh;\n\t}\n\telse if (overflow == 'width')\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\tblock += 'width: 100%; ';\n\t\titem += fw;\n\t\tdy = 0;\n\t\t\n\t\tif (h > 0)\n\t\t{\n\t\t\titem += 'max-height: ' + Math.round(h) + 'px; ';\n\t\t}\n\t}\n\telse\n\t{\n\t\tofl = '';\n\t\tdy = 0;\n\t}\n\t\n\tvar bgc = '';\n\t\n\tif (bg != null)\n\t{\n\t\tbgc += 'background-color: ' + bg + '; ';\n\t}\n\t\n\tif (border != null)\n\t{\n\t\tbgc += 'border: 1px solid ' + border + '; ';\n\t}\n\t\n\tif (ofl == '' || clip)\n\t{\n\t\tblock += bgc;\n\t}\n\telse\n\t{\n\t\titem += bgc;\n\t}\n\n\tif (wrap && w > 0)\n\t{\n\t\tblock += 'white-space: normal; word-wrap: ' + mxConstants.WORD_WRAP + '; ';\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\t\n\t\tif (ofl != '' && overflow != 'fill')\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\tblock += 'white-space: nowrap; ';\n\t\t\n\t\tif (ofl == '')\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t}\n\t\n\tcallback(dx, dy, flex + fw + fh, item + ofl, block, ofl);\n};\n\n/**\n * Function: getTextCss\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getTextCss = function()\n{\n\tvar s = this.state;\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t(mxConstants.LINE_HEIGHT * this.lineHeightCorrection);\n\tvar css = 'display: inline-block; font-size: ' + s.fontSize + 'px; ' +\n\t\t'font-family: ' + s.fontFamily + '; color: ' + s.fontColor + '; line-height: ' + lh +\n\t\t'; pointer-events: ' + ((this.pointerEvents) ? this.pointerEventsValue : 'none') + '; ';\n\t\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tcss += 'font-weight: bold; ';\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tcss += 'font-style: italic; ';\n\t}\n\n\tvar deco = [];\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tdeco.push('underline');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\tdeco.push('line-through');\n\t}\n\t\n\tif (deco.length > 0)\n\t{\n\t\tcss += 'text-decoration: ' + deco.join(' ') + '; ';\n\t}\n\n\treturn css;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Note that HTML markup is only supported if\n * foreignObject is supported and <foEnabled> is true. (This means IE9 and later\n * does currently not support HTML text as part of shapes.)\n */\nmxSvgCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\trotation = (rotation != null) ? rotation : 0;\n\n\t\tif (this.foEnabled && format == 'html')\n\t\t{\n\t\t\tvar div = this.createDiv(str);\n\t\t\t\n\t\t\t// Ignores invalid XHTML labels\n\t\t\tif (div != null)\n\t\t\t{\n\t\t\t\tif (dir != null)\n\t\t\t\t{\n\t\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.addForeignObject(x, y, w, h, str, align, valign, wrap,\n\t\t\t\t\tformat, overflow, clip, rotation, dir, div, this.root);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x + this.state.dx, y + this.state.dy, w, h, str,\n\t\t\t\talign, valign, wrap, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: createClip\n * \n * Creates a clip for the given coordinates.\n */\nmxSvgCanvas2D.prototype.createClip = function(x, y, w, h)\n{\n\tx = Math.round(x);\n\ty = Math.round(y);\n\tw = Math.round(w);\n\th = Math.round(h);\n\t\n\tvar id = 'mx-clip-' + x + '-' + y + '-' + w + '-' + h;\n\n\tvar counter = 0;\n\tvar tmp = id + '-' + counter;\n\t\n\t// Resolves ID conflicts\n\twhile (document.getElementById(tmp) != null)\n\t{\n\t\ttmp = id + '-' + (++counter);\n\t}\n\t\n\tclip = this.createElement('clipPath');\n\tclip.setAttribute('id', tmp);\n\t\n\tvar rect = this.createElement('rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\t\t\n\tclip.appendChild(rect);\n\t\n\treturn clip;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup.\n */\nmxSvgCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation, dir)\n{\n\trotation = (rotation != null) ? rotation : 0;\n\tvar s = this.state;\n\tvar size = s.fontSize;\n\tvar node = this.createElement('g');\n\tvar tr = s.transform || '';\n\tthis.updateFont(node);\n\t\n\t// Non-rotated text\n\tif (rotation != 0)\n\t{\n\t\ttr += 'rotate(' + rotation  + ',' + this.format(x * s.scale) + ',' + this.format(y * s.scale) + ')';\n\t}\n\t\n\tif (dir != null)\n\t{\n\t\tnode.setAttribute('direction', dir);\n\t}\n\n\tif (clip && w > 0 && h > 0)\n\t{\n\t\tvar cx = x;\n\t\tvar cy = y;\n\t\t\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tcx -= w / 2;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tcx -= w;\n\t\t}\n\t\t\n\t\tif (overflow != 'fill')\n\t\t{\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\tcy -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tcy -= h;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// LATER: Remove spacing from clip rectangle\n\t\tvar c = this.createClip(cx * s.scale - 2, cy * s.scale - 2, w * s.scale + 4, h * s.scale + 4);\n\t\t\n\t\tif (this.defs != null)\n\t\t{\n\t\t\tthis.defs.appendChild(c);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Makes sure clip is removed with referencing node\n\t\t\tthis.root.appendChild(c);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Workaround for potential base tag\n\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\tnode.setAttribute('clip-path', 'url(' + base + '#' + c.getAttribute('id') + ')');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttribute('clip-path', 'url(#' + c.getAttribute('id') + ')');\n\t\t}\n\t}\n\n\t// Default is left\n\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t\t\t(align == mxConstants.ALIGN_CENTER) ? 'middle' :\n\t\t\t\t\t'start';\n\n\t// Text-anchor start is default in SVG\n\tif (anchor != 'start')\n\t{\n\t\tnode.setAttribute('text-anchor', anchor);\n\t}\n\t\n\tif (!this.styleEnabled || size != mxConstants.DEFAULT_FONTSIZE)\n\t{\n\t\tnode.setAttribute('font-size', (size * s.scale) + 'px');\n\t}\n\t\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (s.alpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha);\n\t}\n\t\n\tvar lines = str.split('\\n');\n\tvar lh = Math.round(size * mxConstants.LINE_HEIGHT);\n\tvar textHeight = size + (lines.length - 1) * lh;\n\n\tvar cy = y + size - 1;\n\n\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = ((this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight) / 2;\n\t\t\tcy -= dy;\n\t\t}\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = (this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight;\n\t\t\tcy -= dy + 1;\n\t\t}\n\t}\n\n\tfor (var i = 0; i < lines.length; i++)\n\t{\n\t\t// Workaround for bounding box of empty lines and spaces\n\t\tif (lines[i].length > 0 && mxUtils.trim(lines[i]).length > 0)\n\t\t{\n\t\t\tvar text = this.createElement('text');\n\t\t\t// LATER: Match horizontal HTML alignment\n\t\t\ttext.setAttribute('x', this.format(x * s.scale) + this.textOffset);\n\t\t\ttext.setAttribute('y', this.format(cy * s.scale) + this.textOffset);\n\t\t\t\n\t\t\tmxUtils.write(text, lines[i]);\n\t\t\tnode.appendChild(text);\n\t\t}\n\n\t\tcy += lh;\n\t}\n\n\tthis.root.appendChild(node);\n\tthis.addTextBackground(node, str, x, y, w, (overflow == 'fill') ? h : textHeight, align, valign, overflow);\n};\n\n/**\n * Function: updateFont\n * \n * Updates the text properties for the given node. (NOTE: For this to work in\n * IE, the given node must be a text or tspan element.)\n */\nmxSvgCanvas2D.prototype.updateFont = function(node)\n{\n\tvar s = this.state;\n\n\tnode.setAttribute('fill', s.fontColor);\n\t\n\tif (!this.styleEnabled || s.fontFamily != mxConstants.DEFAULT_FONTFAMILY)\n\t{\n\t\tnode.setAttribute('font-family', s.fontFamily);\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tnode.setAttribute('font-weight', 'bold');\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tnode.setAttribute('font-style', 'italic');\n\t}\n\t\n\tvar txtDecor = [];\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttxtDecor.push('underline');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\ttxtDecor.push('line-through');\n\t}\n\t\n\tif (txtDecor.length > 0)\n\t{\n\t\tnode.setAttribute('text-decoration', txtDecor.join(' '));\n\t}\n};\n\n/**\n * Function: addTextBackground\n * \n * Background color and border\n */\nmxSvgCanvas2D.prototype.addTextBackground = function(node, str, x, y, w, h, align, valign, overflow)\n{\n\tvar s = this.state;\n\n\tif (s.fontBackgroundColor != null || s.fontBorderColor != null)\n\t{\n\t\tvar bbox = null;\n\t\t\n\t\tif (overflow == 'fill' || overflow == 'width')\n\t\t{\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, y * s.scale, (w - 2) * s.scale, (h + 2) * s.scale);\n\t\t}\n\t\telse if (node.getBBox != null && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Uses getBBox only if inside document for correct size\n\t\t\ttry\n\t\t\t{\n\t\t\t\tbbox = node.getBBox();\n\t\t\t\tvar ie = mxClient.IS_IE && mxClient.IS_SVG;\n\t\t\t\tbbox = new mxRectangle(bbox.x, bbox.y + ((ie) ? 0 : 1), bbox.width, bbox.height + ((ie) ? 1 : 0));\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Computes size if not in document or no getBBox available\n\t\t\tvar div = document.createElement('div');\n\n\t\t\t// Wrapping and clipping can be ignored here\n\t\t\tdiv.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\t\tdiv.style.fontSize = s.fontSize + 'px';\n\t\t\tdiv.style.fontFamily = s.fontFamily;\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.visibility = 'hidden';\n\t\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv.style.zoom = '1';\n\t\t\t\n\t\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\n\t\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tstr = mxUtils.htmlEntities(str, false);\n\t\t\tdiv.innerHTML = str.replace(/\\n/g, '<br/>');\n\t\t\t\n\t\t\tdocument.body.appendChild(div);\n\t\t\tvar w = div.offsetWidth;\n\t\t\tvar h = div.offsetHeight;\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, (y + 2) * s.scale, w * s.scale, (h + 1) * s.scale);\n\t\t}\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tvar n = this.createElement('rect');\n\t\t\tn.setAttribute('fill', s.fontBackgroundColor || 'none');\n\t\t\tn.setAttribute('stroke', s.fontBorderColor || 'none');\n\t\t\tn.setAttribute('x', Math.floor(bbox.x - 1));\n\t\t\tn.setAttribute('y', Math.floor(bbox.y - 1));\n\t\t\tn.setAttribute('width', Math.ceil(bbox.width + 2));\n\t\t\tn.setAttribute('height', Math.ceil(bbox.height));\n\n\t\t\tvar sw = (s.fontBorderColor != null) ? Math.max(1, this.format(s.scale)) : 0;\n\t\t\tn.setAttribute('stroke-width', sw);\n\t\t\t\n\t\t\t// Workaround for crisp rendering - only required if not exporting\n\t\t\tif (this.root.ownerDocument == document && mxUtils.mod(sw, 2) == 1)\n\t\t\t{\n\t\t\t\tn.setAttribute('transform', 'translate(0.5, 0.5)');\n\t\t\t}\n\t\t\t\n\t\t\tnode.insertBefore(n, node.firstChild);\n\t\t}\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxSvgCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxSvgCanvas2D = typeof mxSvgCanvas2D !== 'undefined' ? mxSvgCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxVmlCanvas2D\n * \n * Implements a canvas to be used for rendering VML. Here is an example of implementing a\n * fallback for SVG images which are not supported in VML-based browsers.\n * \n * (code)\n * var mxVmlCanvas2DImage = mxVmlCanvas2D.prototype.image;\n * mxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n * {\n *   if (src.substring(src.length - 4, src.length) == '.svg')\n *   {\n *     src = 'http://www.jgraph.com/images/mxgraph.gif';\n *   }\n *   \n *   mxVmlCanvas2DImage.apply(this, arguments);\n * };\n * (end)\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * document.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{antialias:false;)}';\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>. Note that\n * there is a known issue in VML where gradients are painted using the outer\n * bounding box of rotated shapes, not the actual bounds of the shape. See\n * also <text> for plain text label restrictions in shapes for VML.\n */\nvar mxVmlCanvas2D = function(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxVmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxVmlCanvas2D.prototype.node = null;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabledetB. Default is true.\n */\nmxVmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'm'.\n */\nmxVmlCanvas2D.prototype.moveOp = 'm';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'l'.\n */\nmxVmlCanvas2D.prototype.lineOp = 'l';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'c'.\n */\nmxVmlCanvas2D.prototype.curveOp = 'c';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'x e'.\n */\nmxVmlCanvas2D.prototype.closeOp = 'x';\n\n/**\n * Variable: rotatedHtmlBackground\n * \n * Background color for rotated HTML. Default is ''. This can be set to eg.\n * white to improve rendering of rotated text in VML for IE9.\n */\nmxVmlCanvas2D.prototype.rotatedHtmlBackground = '';\n\n/**\n * Variable: vmlScale\n * \n * Specifies the scale used to draw VML shapes.\n */\nmxVmlCanvas2D.prototype.vmlScale = 1;\n\n/**\n * Function: createElement\n * \n * Creates the given element using the document.\n */\nmxVmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn document.createElement(name);\n};\n\n/**\n * Function: createVmlElement\n * \n * Creates a new element using <createElement> and prefixes the given name with\n * <mxClient.VML_PREFIX>.\n */\nmxVmlCanvas2D.prototype.createVmlElement = function(name)\n{\n\treturn this.createElement(mxClient.VML_PREFIX + ':' + name);\n};\n\n/**\n * Function: addNode\n * \n * Adds the current node to the <root>.\n */\nmxVmlCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\t\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.path = this.path.join(' ') + ' e';\n\t\t\t\tnode.style.width = this.root.style.width;\n\t\t\t\tnode.style.height = this.root.style.height;\n\t\t\t\tnode.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tnode.strokeweight = this.format(Math.max(1, s.strokeWidth * s.scale / this.vmlScale)) + 'px';\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node,\n\t\t\t\tfilled && s.fillColor != null,\n\t\t\t\tstroked && s.strokeColor != null));\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tnode.stroked = 'true';\n\t\t\tnode.strokecolor = s.strokeColor;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.stroked = 'false';\n\t\t}\n\n\t\tnode.appendChild(this.createStroke());\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tnode.appendChild(this.createFill());\n\t\t}\n\t\telse if (this.pointerEvents && (node.nodeName != 'shape' ||\n\t\t\tthis.path[this.path.length - 1] == this.closeOp))\n\t\t{\n\t\t\tnode.appendChild(this.createTransparentFill());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.filled = 'false';\n\t\t}\n\n\t\t// LATER: Update existing DOM for performance\n\t\tthis.root.appendChild(node);\n\t}\n};\n\n/**\n * Function: createTransparentFill\n * \n * Creates a transparent fill.\n */\nmxVmlCanvas2D.prototype.createTransparentFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.src = mxClient.imageBasePath + '/transparent.gif';\n\tfill.type = 'tile';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createFill\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createFill = function()\n{\n\tvar s = this.state;\n\t\n\t// Gradients in foregrounds not supported because special gradients\n\t// with bounds must be created for each element in graphics-canvases\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fillColor;\n\n\tif (s.gradientColor != null)\n\t{\n\t\tfill.type = 'gradient';\n\t\tfill.method = 'none';\n\t\tfill.color2 = s.gradientColor;\n\t\tvar angle = 180 - s.rotation;\n\t\t\n\t\tif (s.gradientDirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tangle -= 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_EAST)\n\t\t{\n\t\t\tangle += 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tangle -= 180 + ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t angle += ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\t\n\t\tif (this.root.style.flip == 'x' || this.root.style.flip == 'y')\n\t\t{\n\t\t\tangle *= -1;\n\t\t}\n\n\t\t// LATER: Fix outer bounding box for rotated shapes used in VML.\n\t\tfill.angle = mxUtils.mod(angle, 360);\n\t\tfill.opacity = (s.alpha * s.gradientFillAlpha * 100) + '%';\n\t\tfill.setAttribute(mxClient.OFFICE_PREFIX + ':opacity2', (s.alpha * s.gradientAlpha * 100) + '%');\n\t}\n\telse if (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tfill.opacity = (s.alpha * s.fillAlpha * 100) + '%';\t\t\t\n\t}\n\t\n\treturn fill;\n};\n/**\n * Function: createStroke\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createStroke = function()\n{\n\tvar s = this.state;\n\tvar stroke = this.createVmlElement('stroke');\n\tstroke.endcap = s.lineCap || 'flat';\n\tstroke.joinstyle = s.lineJoin || 'miter';\n\tstroke.miterlimit = s.miterLimit || '10';\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tstroke.opacity = (s.alpha * s.strokeAlpha * 100) + '%';\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tstroke.dashstyle = this.getVmlDashStyle();\n\t}\n\t\n\treturn stroke;\n};\n\n/**\n * Function: getVmlDashPattern\n * \n * Returns a VML dash pattern for the current dashPattern.\n * See http://msdn.microsoft.com/en-us/library/bb264085(v=vs.85).aspx\n */\nmxVmlCanvas2D.prototype.getVmlDashStyle = function()\n{\n\tvar result = 'dash';\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar tok = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (tok.length > 0 && tok[0] == 1)\n\t\t{\n\t\t\tresult = '0 2';\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxVmlCanvas2D.prototype.createShadow = function(node, filled, stroked)\n{\n\tvar s = this.state;\n\tvar rad = -s.rotation * (Math.PI / 180);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\n\tvar dx = s.shadowDx * s.scale;\n\tvar dy = s.shadowDy * s.scale;\n\n\tif (this.root.style.flip == 'x')\n\t{\n\t\tdx *= -1;\n\t}\n\telse if (this.root.style.flip == 'y')\n\t{\n\t\tdy *= -1;\n\t}\n\t\n\tvar shadow = node.cloneNode(true);\n\tshadow.style.marginLeft = Math.round(dx * cos - dy * sin) + 'px';\n\tshadow.style.marginTop = Math.round(dx * sin + dy * cos) + 'px';\n\n\t// Workaround for wrong cloning in IE8 standards mode\n\tif (document.documentMode == 8)\n\t{\n\t\tshadow.strokeweight = node.strokeweight;\n\t\t\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\tshadow.path = this.path.join(' ') + ' e';\n\t\t\tshadow.style.width = this.root.style.width;\n\t\t\tshadow.style.height = this.root.style.height;\n\t\t\tshadow.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t}\n\t}\n\t\n\tif (stroked)\n\t{\n\t\tshadow.strokecolor = s.shadowColor;\n\t\tshadow.appendChild(this.createShadowStroke());\n\t}\n\telse\n\t{\n\t\tshadow.stroked = 'false';\n\t}\n\t\n\tif (filled)\n\t{\n\t\tshadow.appendChild(this.createShadowFill());\n\t}\n\telse\n\t{\n\t\tshadow.filled = 'false';\n\t}\n\t\n\treturn shadow;\n};\n\n/**\n * Function: createShadowFill\n * \n * Creates the fill for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = this.state.shadowColor;\n\tfill.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createShadowStroke\n * \n * Creates the stroke for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowStroke = function()\n{\n\tvar stroke = this.createStroke();\n\tstroke.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn stroke;\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxVmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (flipH && flipV)\n\t{\n\t\ttheta += 180;\n\t}\n\telse if (flipH)\n\t{\n\t\tthis.root.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tthis.root.style.flip = 'y';\n\t}\n\n\tif (flipH ? !flipV : flipV)\n\t{\n\t\ttheta *= -1;\n\t}\n\n\tthis.root.style.rotation = theta;\n\tthis.state.rotation = this.state.rotation + theta;\n\tthis.state.rotationCx = cx;\n\tthis.state.rotationCy = cy;\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxVmlCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createVmlElement('shape');\n\tthis.node.style.position = 'absolute';\n};\n\n/**\n * Function: quadTo\n * \n * Replaces quadratic curve with bezier curve in VML.\n */\nmxVmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar s = this.state;\n\n\tvar cpx0 = (this.lastX + s.dx) * s.scale;\n\tvar cpy0 = (this.lastY + s.dy) * s.scale;\n\tvar qpx1 = (x1 + s.dx) * s.scale;\n\tvar qpy1 = (y1 + s.dy) * s.scale;\n\tvar cpx3 = (x2 + s.dx) * s.scale;\n\tvar cpy3 = (y2 + s.dy) * s.scale;\n\t\n\tvar cpx1 = cpx0 + 2/3 * (qpx1 - cpx0);\n\tvar cpy1 = cpy0 + 2/3 * (qpy1 - cpy0);\n\t\n\tvar cpx2 = cpx3 + 2/3 * (qpx1 - cpx3);\n\tvar cpy2 = cpy3 + 2/3 * (qpy1 - cpy3);\n\t\n\tthis.path.push('c ' + this.format(cpx1) + ' ' + this.format(cpy1) +\n\t\t\t' ' + this.format(cpx2) + ' ' + this.format(cpy2) +\n\t\t\t' ' + this.format(cpx3) + ' ' + this.format(cpy3));\n\tthis.lastX = (cpx3 / s.scale) - s.dx;\n\tthis.lastY = (cpy3 / s.scale) - s.dy;\n\t\n};\n\n/**\n * Function: createRect\n * \n * Sets the glass gradient.\n */\nmxVmlCanvas2D.prototype.createRect = function(nodeName, x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createVmlElement(nodeName);\n\tn.style.position = 'absolute';\n\tn.style.left = this.format((x + s.dx) * s.scale) + 'px';\n\tn.style.top = this.format((y + s.dy) * s.scale) + 'px';\n\tn.style.width = this.format(w * s.scale) + 'px';\n\tn.style.height = this.format(h * s.scale) + 'px';\n\t\n\treturn n;\n};\n\n/**\n * Function: rect\n * \n * Sets the current path to a rectangle.\n */\nmxVmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tthis.node = this.createRect('rect', x, y, w, h);\n};\n\n/**\n * Function: roundrect\n * \n * Sets the current path to a rounded rectangle.\n */\nmxVmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.node = this.createRect('roundrect', x, y, w, h);\n\t// SetAttribute needed here for IE8\n\tthis.node.setAttribute('arcsize', Math.max(dx * 100 / w, dy * 100 / h) + '%');\n};\n\n/**\n * Function: ellipse\n * \n * Sets the current path to an ellipse.\n */\nmxVmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tthis.node = this.createRect('oval', x, y, w, h);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n */\nmxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tvar node = null;\n\t\n\tif (!aspect)\n\t{\n\t\tnode = this.createRect('image', x, y, w, h);\n\t\tnode.src = src;\n\t}\n\telse\n\t{\n\t\t// Uses fill with aspect to avoid asynchronous update of size\n\t\tnode = this.createRect('rect', x, y, w, h);\n\t\tnode.stroked = 'false';\n\t\t\n\t\t// Handles image aspect via fill\n\t\tvar fill = this.createVmlElement('fill');\n\t\tfill.aspect = (aspect) ? 'atmost' : 'ignore';\n\t\tfill.rotate = 'true';\n\t\tfill.type = 'frame';\n\t\tfill.src = src;\n\n\t\tnode.appendChild(fill);\n\t}\n\t\n\tif (flipH && flipV)\n\t{\n\t\tnode.style.rotation = '180';\n\t}\n\telse if (flipH)\n\t{\n\t\tnode.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tnode.style.flip = 'y';\n\t}\n\t\n\tif (this.state.alpha < 1 || this.state.fillAlpha < 1)\n\t{\n\t\t// KNOWN: Borders around transparent images in IE<9. Using fill.opacity\n\t\t// fixes this problem by adding a white background in all IE versions.\n\t\tnode.style.filter += 'alpha(opacity=' + (this.state.alpha * this.state.fillAlpha * 100) + ')';\n\t}\n\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: createText\n * \n * Creates the innermost element that contains the HTML text.\n */\nmxVmlCanvas2D.prototype.createDiv = function(str, align, valign, overflow)\n{\n\tvar div = this.createElement('div');\n\tvar state = this.state;\n\n\tvar css = '';\n\t\n\tif (state.fontBackgroundColor != null)\n\t{\n\t\tcss += 'background-color:' + mxUtils.htmlEntities(state.fontBackgroundColor) + ';';\n\t}\n\t\n\tif (state.fontBorderColor != null)\n\t{\n\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(state.fontBorderColor) + ';';\n\t}\n\t\n\tif (mxUtils.isNode(str))\n\t{\n\t\tdiv.appendChild(str);\n\t}\n\telse\n\t{\n\t\tif (overflow != 'fill' && overflow != 'width')\n\t\t{\n\t\t\tvar div2 = this.createElement('div');\n\t\t\tdiv2.style.cssText = css;\n\t\t\tdiv2.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv2.style.zoom = '1';\n\t\t\tdiv2.style.textDecoration = 'inherit';\n\t\t\tdiv2.innerHTML = str;\n\t\t\tdiv.appendChild(div2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.cssText = css;\n\t\t\tdiv.innerHTML = str;\n\t\t}\n\t}\n\t\n\tvar style = div.style;\n\n\tstyle.fontSize = (state.fontSize / this.vmlScale) + 'px';\n\tstyle.fontFamily = state.fontFamily;\n\tstyle.color = state.fontColor;\n\tstyle.verticalAlign = 'top';\n\tstyle.textAlign = align || 'left';\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (state.fontSize * mxConstants.LINE_HEIGHT / this.vmlScale) + 'px' : mxConstants.LINE_HEIGHT;\n\n\tif ((state.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\n\tif ((state.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\t\n\tif ((state.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle.textDecoration = 'underline';\n\t}\n\t\n\treturn div;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Clipping, text background and border are not\n * supported for plain text in VML.\n */\nmxVmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tvar s = this.state;\n\t\t\n\t\tif (format == 'html')\n\t\t{\n\t\t\tif (s.rotation != null)\n\t\t\t{\n\t\t\t\tvar pt = this.rotatePoint(x, y, s.rotation, s.rotationCx, s.rotationCy);\n\t\t\t\t\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tx += s.dx;\n\t\t\t\ty += s.dy;\n\t\t\t\t\n\t\t\t\t// Workaround for rendering offsets\n\t\t\t\tif (overflow != 'fill' && valign == mxConstants.ALIGN_TOP)\n\t\t\t\t{\n\t\t\t\t\ty -= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx *= s.scale;\n\t\t\t\ty *= s.scale;\n\t\t\t}\n\n\t\t\t// Adds event transparency in IE8 standards without the transparent background\n\t\t\t// filter which cannot be used due to bugs in the zoomed bounding box (too slow)\n\t\t\t// FIXME: No event transparency if inside v:rect (ie part of shape)\n\t\t\t// KNOWN: Offset wrong for rotated text with word that are longer than the wrapping\n\t\t\t// width in IE8 because real width of text cannot be determined here.\n\t\t\t// This should be fixed in mxText.updateBoundingBox by calling before this and\n\t\t\t// passing the real width to this method if not clipped and wrapped.\n\t\t\tvar abs = (document.documentMode == 8 && !mxClient.IS_EM) ? this.createVmlElement('group') : this.createElement('div');\n\t\t\tabs.style.position = 'absolute';\n\t\t\tabs.style.display = 'inline';\n\t\t\tabs.style.left = this.format(x) + 'px';\n\t\t\tabs.style.top = this.format(y) + 'px';\n\t\t\tabs.style.zoom = s.scale;\n\n\t\t\tvar box = this.createElement('div');\n\t\t\tbox.style.position = 'relative';\n\t\t\tbox.style.display = 'inline';\n\t\t\t\n\t\t\tvar margin = mxUtils.getAlignmentAsPoint(align, valign);\n\t\t\tvar dx = margin.x;\n\t\t\tvar dy = margin.y;\n\n\t\t\tvar div = this.createDiv(str, align, valign, overflow);\n\t\t\tvar inner = this.createElement('div');\n\t\t\t\n\t\t\tif (dir != null)\n\t\t\t{\n\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t}\n\n\t\t\tif (wrap && w > 0)\n\t\t\t{\n\t\t\t\tif (!clip)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\t// LATER: Check if other cases need to be handled\n\t\t\t\tif (div.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tvar tmp = div;\n\t\t\t\t\t\n\t\t\t\t\tif (tmp.firstChild != null && tmp.firstChild.nodeName == 'DIV')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp.firstChild.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\t}\n\t\t\t\n\t\t\tvar rot = s.rotation + (rotation || 0);\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tinner.style.display = 'inline';\n\t\t\t\tinner.style.zoom = '1';\n\t\t\t\tinner.appendChild(div);\n\n\t\t\t\t// Box not needed for rendering in IE8 standards\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM && this.root.nodeName != 'DIV')\n\t\t\t\t{\n\t\t\t\t\tbox.appendChild(inner);\n\t\t\t\t\tabs.appendChild(box);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tabs.appendChild(inner);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tbox.appendChild(div);\n\t\t\t\tabs.appendChild(box);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.display = 'inline';\n\t\t\t\tabs.appendChild(div);\n\t\t\t}\n\t\t\t\n\t\t\t// Inserts the node into the DOM\n\t\t\tif (this.root.nodeName != 'DIV')\n\t\t\t{\n\t\t\t\t// Rectangle to fix position in group\n\t\t\t\tvar rect = this.createVmlElement('rect');\n\t\t\t\trect.stroked = 'false';\n\t\t\t\trect.filled = 'false';\n\n\t\t\t\trect.appendChild(abs);\n\t\t\t\tthis.root.appendChild(rect);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.root.appendChild(abs);\n\t\t\t}\n\t\t\t\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (overflow == 'fill')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.height = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\telse if (overflow == 'width')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.maxHeight = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tvar rad = rot * (Math.PI / 180);\n\t\t\t\t\n\t\t\t\t// Precalculate cos and sin for the rotation\n\t\t\t\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\t\t\t\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\t\t\t\trad %= 2 * Math.PI;\n\t\t\t\tif (rad < 0) rad += 2 * Math.PI;\n\t\t\t\trad %= Math.PI;\n\t\t\t\tif (rad > Math.PI / 2) rad = Math.PI - rad;\n\t\t\t\t\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.display = 'inline-block';\n\t\t\t\t\tinner.style.display = 'inline-block';\n\t\t\t\t\tbox.style.display = 'inline-block';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdiv.style.position = 'absolute';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tvar sizeDiv = div;\n\t\t\t\t\n\t\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar tmp = sizeDiv.offsetWidth + 3;\n\t\t\t\tvar oh = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tif (clip)\n\t\t\t\t{\n\t\t\t\t\tw = Math.min(w, tmp);\n\t\t\t\t\toh = Math.min(oh, h);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tw = tmp;\n\t\t\t\t}\n\n\t\t\t\t// Handles words that are longer than the given wrapping width\n\t\t\t\tif (wrap)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = w + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && (clip || overflow == 'width') && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\n\t\t\t\tvar top_fix = (h - h * cos + w * -sin) / 2 - real_sin * w * (dx + 0.5) + real_cos * h * (dy + 0.5);\n\t\t\t\tvar left_fix = (w - w * cos + h * -sin) / 2 + real_cos * w * (dx + 0.5) + real_sin * h * (dy + 0.5);\n\n\t\t\t\tif (abs.nodeName == 'group' && this.root.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\t// Workaround for bug where group gets moved away if left and top are non-zero in IE8 standards\n\t\t\t\t\tvar pos = this.createElement('div');\n\t\t\t\t\tpos.style.display = 'inline-block';\n\t\t\t\t\tpos.style.position = 'absolute';\n\t\t\t\t\tpos.style.left = this.format(x + (left_fix - w / 2) * s.scale) + 'px';\n\t\t\t\t\tpos.style.top = this.format(y + (top_fix - h / 2) * s.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\tabs.parentNode.appendChild(pos);\n\t\t\t\t\tpos.appendChild(abs);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar sc = (document.documentMode == 8 && !mxClient.IS_EM) ? 1 : s.scale;\n\t\t\t\t\t\n\t\t\t\t\tabs.style.left = this.format(x + (left_fix - w / 2) * sc) + 'px';\n\t\t\t\t\tabs.style.top = this.format(y + (top_fix - h / 2) * sc) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// KNOWN: Rotated text rendering quality is bad for IE9 quirks\n\t\t\t\tinner.style.filter = \"progid:DXImageTransform.Microsoft.Matrix(M11=\"+real_cos+\", M12=\"+\n\t\t\t\t\treal_sin+\", M21=\"+(-real_sin)+\", M22=\"+real_cos+\", sizingMethod='auto expand')\";\n\t\t\t\tinner.style.backgroundColor = this.rotatedHtmlBackground;\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tinner.style.filter += 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\n\t\t\t\t// Restore parent node for DIV\n\t\t\t\tinner.appendChild(div);\n\t\t\t\tdiv.style.position = '';\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t}\n\t\t\telse if (document.documentMode != 8 || mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tdiv.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tabs.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tvar divParent = div.parentNode;\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tw = div.offsetWidth;\n\t\t\t\tvar oh = div.offsetHeight;\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && clip && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t\tdivParent.appendChild(div);\n\t\t\t\t\n\t\t\t\tabs.style.left = this.format(x + w * dx * this.state.scale) + 'px';\n\t\t\t\tabs.style.top = this.format(y + h * dy * this.state.scale) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Faster rendering in IE8 without offsetWidth/Height\n\t\t\t\tbox.style.left = (dx * 100) + '%';\n\t\t\t\tbox.style.top = (dy * 100) + '%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x, y, w, h, mxUtils.htmlEntities(str, false), align, valign, wrap, format, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: plainText\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\t// TextDirection is ignored since this code is not used (format is always HTML in the text function)\n\tvar s = this.state;\n\tx = (x + s.dx) * s.scale;\n\ty = (y + s.dy) * s.scale;\n\t\n\tvar node = this.createVmlElement('shape');\n\tnode.style.width = '1px';\n\tnode.style.height = '1px';\n\tnode.stroked = 'false';\n\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fontColor;\n\tfill.opacity = (s.alpha * 100) + '%';\n\tnode.appendChild(fill);\n\t\n\tvar path = this.createVmlElement('path');\n\tpath.textpathok = 'true';\n\tpath.v = 'm ' + this.format(0) + ' ' + this.format(0) + ' l ' + this.format(1) + ' ' + this.format(0);\n\t\n\tnode.appendChild(path);\n\t\n\t// KNOWN: Font family and text decoration ignored\n\tvar tp = this.createVmlElement('textpath');\n\ttp.style.cssText = 'v-text-align:' + align;\n\ttp.style.align = align;\n\ttp.style.fontFamily = s.fontFamily;\n\ttp.string = str;\n\ttp.on = 'true';\n\t\n\t// Scale via fontsize instead of node.style.zoom for correct offsets in IE8\n\tvar size = s.fontSize * s.scale / this.vmlScale;\n\ttp.style.fontSize = size + 'px';\n\t\n\t// Bold\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\ttp.style.fontWeight = 'bold';\n\t}\n\t\n\t// Italic\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\ttp.style.fontStyle = 'italic';\n\t}\n\n\t// Underline\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttp.style.textDecoration = 'underline';\n\t}\n\n\tvar lines = str.split('\\n');\n\tvar textHeight = size + (lines.length - 1) * size * mxConstants.LINE_HEIGHT;\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = - textHeight / 2;\n\t}\n\telse if (valign != mxConstants.ALIGN_MIDDLE) // top\n\t{\n\t\tdy = textHeight / 2;\n\t}\n\n\tif (rotation != null)\n\t{\n\t\tnode.style.rotation = rotation;\n\t\tvar rad = rotation * (Math.PI / 180);\n\t\tdx = Math.sin(rad) * dy;\n\t\tdy = Math.cos(rad) * dy;\n\t}\n\n\t// FIXME: Clipping is relative to bounding box\n\t/*if (clip)\n\t{\n\t\tnode.style.clip = 'rect(0px ' + this.format(w) + 'px ' + this.format(h) + 'px 0px)';\n\t}*/\n\t\n\tnode.appendChild(tp);\n\tnode.style.left = this.format(x - dx) + 'px';\n\tnode.style.top = this.format(y + dy) + 'px';\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxVmlCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxVmlCanvas2D = typeof mxVmlCanvas2D !== 'undefined' ? mxVmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGuide\n *\n * Implements the alignment of selection cells to other cells in the graph.\n * \n * Constructor: mxGuide\n * \n * Constructs a new guide object.\n */\nfunction mxGuide(graph, states)\n{\n\tthis.graph = graph;\n\tthis.setStates(states);\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph> instance.\n */\nmxGuide.prototype.graph = null;\n\n/**\n * Variable: states\n * \n * Contains the <mxCellStates> that are used for alignment.\n */\nmxGuide.prototype.states = null;\n\n/**\n * Variable: horizontal\n *\n * Specifies if horizontal guides are enabled. Default is true.\n */\nmxGuide.prototype.horizontal = true;\n\n/**\n * Variable: vertical\n *\n * Specifies if vertical guides are enabled. Default is true.\n */\nmxGuide.prototype.vertical = true;\n\n/**\n * Variable: vertical\n *\n * Holds the <mxShape> for the horizontal guide.\n */\nmxGuide.prototype.guideX = null;\n\n/**\n * Variable: vertical\n *\n * Holds the <mxShape> for the vertical guide.\n */\nmxGuide.prototype.guideY = null;\n\n/**\n * Variable: rounded\n *\n * Specifies if rounded coordinates should be used. Default is false.\n */\nmxGuide.prototype.rounded = false;\n\n/**\n * Variable: tolerance\n * \n * Default tolerance in px if grid is disabled. Default is 2.\n */\nmxGuide.prototype.tolerance = 2;\n\n/**\n * Function: setStates\n * \n * Sets the <mxCellStates> that should be used for alignment.\n */\nmxGuide.prototype.setStates = function(states)\n{\n\tthis.states = states;\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the guide should be enabled for the given native event. This\n * implementation always returns true.\n */\nmxGuide.prototype.isEnabledForEvent = function(evt)\n{\n\treturn true;\n};\n\n/**\n * Function: getGuideTolerance\n * \n * Returns the tolerance for the guides. Default value is gridSize / 2.\n */\nmxGuide.prototype.getGuideTolerance = function(gridEnabled)\n{\n\treturn (gridEnabled && this.graph.gridEnabled) ? this.graph.gridSize / 2 : this.tolerance;\n};\n\n/**\n * Function: createGuideShape\n * \n * Returns the mxShape to be used for painting the respective guide. This\n * implementation returns a new, dashed and crisp <mxPolyline> using\n * <mxConstants.GUIDE_COLOR> and <mxConstants.GUIDE_STROKEWIDTH> as the format.\n * \n * Parameters:\n * \n * horizontal - Boolean that specifies which guide should be created.\n */\nmxGuide.prototype.createGuideShape = function(horizontal)\n{\n\tvar guide = new mxPolyline([], mxConstants.GUIDE_COLOR, mxConstants.GUIDE_STROKEWIDTH);\n\tguide.isDashed = true;\n\t\n\treturn guide;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored.\n */\nmxGuide.prototype.isStateIgnored = function(state)\n{\n\treturn false;\n};\n\n/**\n * Function: move\n * \n * Moves the <bounds> by the given <mxPoint> and returnt the snapped point.\n */\nmxGuide.prototype.move = function(bounds, delta, gridEnabled, clone)\n{\n\tif (this.states != null && (this.horizontal || this.vertical) && bounds != null && delta != null)\n\t{\n\t\tvar trx = this.graph.getView().translate;\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar tt = this.getGuideTolerance(gridEnabled) * scale;\n\t\tvar b = bounds.clone();\n\t\tb.x += delta.x;\n\t\tb.y += delta.y;\n\t\tvar overrideX = false;\n\t\tvar stateX = null;\n\t\tvar valueX = null;\n\t\tvar overrideY = false;\n\t\tvar stateY = null;\n\t\tvar valueY = null;\n\t\tvar ttX = tt;\n\t\tvar ttY = tt;\n\t\tvar left = b.x;\n\t\tvar right = b.x + b.width;\n\t\tvar center = b.getCenterX();\n\t\tvar top = b.y;\n\t\tvar bottom = b.y + b.height;\n\t\tvar middle = b.getCenterY();\n\t\n\t\t// Snaps the left, center and right to the given x-coordinate\n\t\tfunction snapX(x, state, centerAlign)\n\t\t{\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (centerAlign && Math.abs(x - center) < ttX)\n\t\t\t{\n\t\t\t\tdelta.x = x - bounds.getCenterX();\n\t\t\t\tttX = Math.abs(x - center);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (!centerAlign)\n\t\t\t{\n\t\t\t\tif (Math.abs(x - left) < ttX)\n\t\t\t\t{\n\t\t\t\t\tdelta.x = x - bounds.x;\n\t\t\t\t\tttX = Math.abs(x - left);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(x - right) < ttX)\n\t\t\t\t{\n\t\t\t\t\tdelta.x = x - bounds.x - bounds.width;\n\t\t\t\t\tttX = Math.abs(x - right);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateX = state;\n\t\t\t\tvalueX = x;\n\t\t\t\t\n\t\t\t\tif (this.guideX == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideX = this.createGuideShape(true);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideX.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideX.pointerEvents = false;\n\t\t\t\t\tthis.guideX.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideX = overrideX || override;\n\t\t};\n\t\t\n\t\t// Snaps the top, middle or bottom to the given y-coordinate\n\t\tfunction snapY(y, state, centerAlign)\n\t\t{\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (centerAlign && Math.abs(y - middle) < ttY)\n\t\t\t{\n\t\t\t\tdelta.y = y - bounds.getCenterY();\n\t\t\t\tttY = Math.abs(y -  middle);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (!centerAlign)\n\t\t\t{\n\t\t\t\tif (Math.abs(y - top) < ttY)\n\t\t\t\t{\n\t\t\t\t\tdelta.y = y - bounds.y;\n\t\t\t\t\tttY = Math.abs(y - top);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(y - bottom) < ttY)\n\t\t\t\t{\n\t\t\t\t\tdelta.y = y - bounds.y - bounds.height;\n\t\t\t\t\tttY = Math.abs(y - bottom);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateY = state;\n\t\t\t\tvalueY = y;\n\t\t\t\t\n\t\t\t\tif (this.guideY == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideY = this.createGuideShape(false);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideY.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideY.pointerEvents = false;\n\t\t\t\t\tthis.guideY.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideY = overrideY || override;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < this.states.length; i++)\n\t\t{\n\t\t\tvar state =  this.states[i];\n\t\t\t\n\t\t\tif (state != null && !this.isStateIgnored(state))\n\t\t\t{\n\t\t\t\t// Align x\n\t\t\t\tif (this.horizontal)\n\t\t\t\t{\n\t\t\t\t\tsnapX.call(this, state.getCenterX(), state, true);\n\t\t\t\t\tsnapX.call(this, state.x, state, false);\n\t\t\t\t\tsnapX.call(this, state.x + state.width, state, false);\n\t\t\t\t\t\n\t\t\t\t\t// Aligns left and right of shape to center of page\n\t\t\t\t\tif (state.cell == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tsnapX.call(this, state.getCenterX(), state, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Align y\n\t\t\t\tif (this.vertical)\n\t\t\t\t{\n\t\t\t\t\tsnapY.call(this, state.getCenterY(), state, true);\n\t\t\t\t\tsnapY.call(this, state.y, state, false);\n\t\t\t\t\tsnapY.call(this, state.y + state.height, state, false);\n\t\t\t\t\t\n\t\t\t\t\t// Aligns left and right of shape to center of page\n\t\t\t\t\tif (state.cell == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tsnapY.call(this, state.getCenterY(), state, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Moves cells to the raster if not aligned\n\t\tthis.graph.snapDelta(delta, bounds, !gridEnabled, overrideX, overrideY);\n\t\tdelta = this.getDelta(bounds, stateX, delta.x, stateY, delta.y)\n\t\t\n\t\t// Redraws the guides\n\t\tvar c = this.graph.container;\n\t\t\n\t\tif (!overrideX && this.guideX != null)\n\t\t{\n\t\t\tthis.guideX.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideX != null)\n\t\t{\n\t\t\tvar minY = null;\n        \tvar maxY = null;\n        \t\n\t\t\tif (stateX != null && bounds != null)\n\t\t\t{\n\t\t\t\tminY = Math.min(bounds.y + delta.y - this.graph.panDy, stateX.y);\n\t\t\t\tmaxY = Math.max(bounds.y + bounds.height + delta.y - this.graph.panDy, stateX.y + stateX.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (minY != null && maxY != null)\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, minY), new mxPoint(valueX, maxY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, -this.graph.panDy),\n\t\t\t\t\tnew mxPoint(valueX, c.scrollHeight - 3 - this.graph.panDy)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideX.stroke = this.getGuideColor(stateX, true);\n\t\t\tthis.guideX.node.style.visibility = 'visible';\n\t\t\tthis.guideX.redraw();\n\t\t}\n\t\t\n\t\tif (!overrideY && this.guideY != null)\n\t\t{\n\t\t\tthis.guideY.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideY != null)\n\t\t{\n\t\t\tvar minX = null;\n        \tvar maxX = null;\n        \t\n\t\t\tif (stateY != null && bounds != null)\n\t\t\t{\n\t\t\t\tminX = Math.min(bounds.x + delta.x - this.graph.panDx, stateY.x);\n\t\t\t\tmaxX = Math.max(bounds.x + bounds.width + delta.x - this.graph.panDx, stateY.x + stateY.width);\n\t\t\t}\n\t\t\t\n\t\t\tif (minX != null && maxX != null)\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(minX, valueY), new mxPoint(maxX, valueY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(-this.graph.panDx, valueY),\n\t\t\t\t\tnew mxPoint(c.scrollWidth - 3 - this.graph.panDx, valueY)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideY.stroke = this.getGuideColor(stateY, false);\n\t\t\tthis.guideY.node.style.visibility = 'visible';\n\t\t\tthis.guideY.redraw();\n\t\t}\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: getDelta\n * \n * Rounds to pixels for virtual states (eg. page guides)\n */\nmxGuide.prototype.getDelta = function(bounds, stateX, dx, stateY, dy)\n{\n\tvar s = this.graph.view.scale;\n\t\n\tif (this.rounded || (stateX != null && stateX.cell == null))\n\t{\n\t\tdx = Math.round((bounds.x + dx) / s) * s - bounds.x;\n\t}\n\n\tif (this.rounded || (stateY != null && stateY.cell == null))\n\t{\n\t\tdy = Math.round((bounds.y + dy) / s) * s - bounds.y;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n/**\n * Function: getGuideColor\n * \n * Returns the color for the given state.\n */\nmxGuide.prototype.getGuideColor = function(state, horizontal)\n{\n\treturn mxConstants.GUIDE_COLOR;\n};\n\n/**\n * Function: hide\n * \n * Hides all current guides.\n */\nmxGuide.prototype.hide = function()\n{\n\tthis.setVisible(false);\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides the current guides.\n */\nmxGuide.prototype.setVisible = function(visible)\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys all resources that this object uses.\n */\nmxGuide.prototype.destroy = function()\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.destroy();\n\t\tthis.guideX = null;\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.destroy();\n\t\tthis.guideY = null;\n\t}\n};\n\n__mxOutput.mxGuide = typeof mxGuide !== 'undefined' ? mxGuide : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxShape\n *\n * Base class for all shapes. A shape in mxGraph is a\n * separate implementation for SVG, VML and HTML. Which\n * implementation to use is controlled by the <dialect>\n * property which is assigned from within the <mxCellRenderer>\n * when the shape is created. The dialect must be assigned\n * for a shape, and it does normally depend on the browser and\n * the confiuration of the graph (see <mxGraph> rendering hint).\n *\n * For each supported shape in SVG and VML, a corresponding\n * shape exists in mxGraph, namely for text, image, rectangle,\n * rhombus, ellipse and polyline. The other shapes are a\n * combination of these shapes (eg. label and swimlane)\n * or they consist of one or more (filled) path objects\n * (eg. actor and cylinder). The HTML implementation is\n * optional but may be required for a HTML-only view of\n * the graph.\n *\n * Custom Shapes:\n *\n * To extend from this class, the basic code looks as follows.\n * In the special case where the custom shape consists only of\n * one filled region or one filled region and an additional stroke\n * the <mxActor> and <mxCylinder> should be subclassed,\n * respectively.\n *\n * (code)\n * function CustomShape() { }\n * \n * CustomShape.prototype = new mxShape();\n * CustomShape.prototype.constructor = CustomShape; \n * (end)\n *\n * To register a custom shape in an existing graph instance,\n * one must register the shape under a new name in the graph's\n * cell renderer as follows:\n *\n * (code)\n * mxCellRenderer.registerShape('customShape', CustomShape);\n * (end)\n *\n * The second argument is the name of the constructor.\n *\n * In order to use the shape you can refer to the given name above\n * in a stylesheet. For example, to change the shape for the default\n * vertex style, the following code is used:\n *\n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'customShape';\n * (end)\n * \n * Constructor: mxShape\n *\n * Constructs a new shape.\n */\nfunction mxShape(stencil)\n{\n\tthis.stencil = stencil;\n\tthis.initStyles();\n};\n\n/**\n * Variable: dialect\n *\n * Holds the dialect in which the shape is to be painted.\n * This can be one of the DIALECT constants in <mxConstants>.\n */\nmxShape.prototype.dialect = null;\n\n/**\n * Variable: scale\n *\n * Holds the scale in which the shape is being painted.\n */\nmxShape.prototype.scale = 1;\n\n/**\n * Variable: antiAlias\n * \n * Rendering hint for configuring the canvas.\n */\nmxShape.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxShape.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: bounds\n *\n * Holds the <mxRectangle> that specifies the bounds of this shape.\n */\nmxShape.prototype.bounds = null;\n\n/**\n * Variable: points\n *\n * Holds the array of <mxPoints> that specify the points of this shape.\n */\nmxShape.prototype.points = null;\n\n/**\n * Variable: node\n *\n * Holds the outermost DOM node that represents this shape.\n */\nmxShape.prototype.node = null;\n \n/**\n * Variable: state\n * \n * Optional reference to the corresponding <mxCellState>.\n */\nmxShape.prototype.state = null;\n\n/**\n * Variable: style\n *\n * Optional reference to the style of the corresponding <mxCellState>.\n */\nmxShape.prototype.style = null;\n\n/**\n * Variable: boundingBox\n *\n * Contains the bounding box of the shape, that is, the smallest rectangle\n * that includes all pixels of the shape.\n */\nmxShape.prototype.boundingBox = null;\n\n/**\n * Variable: stencil\n *\n * Holds the <mxStencil> that defines the shape.\n */\nmxShape.prototype.stencil = null;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Event-tolerance for SVG strokes (in px). Default is 8. This is only passed\n * to the canvas in <createSvgCanvas> if <pointerEvents> is true.\n */\nmxShape.prototype.svgStrokeTolerance = 8;\n\n/**\n * Variable: pointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.pointerEvents = true;\n\n/**\n * Variable: svgPointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.svgPointerEvents = 'all';\n\n/**\n * Variable: shapePointerEvents\n * \n * Specifies if pointer events outside of shape should be handled. Default\n * is false.\n */\nmxShape.prototype.shapePointerEvents = false;\n\n/**\n * Variable: stencilPointerEvents\n * \n * Specifies if pointer events outside of stencils should be handled. Default\n * is false. Set this to true for backwards compatibility with the 1.x branch.\n */\nmxShape.prototype.stencilPointerEvents = false;\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 1.\n */\nmxShape.prototype.vmlScale = 1;\n\n/**\n * Variable: outline\n * \n * Specifies if the shape should be drawn as an outline. This disables all\n * fill colors and can be used to disable other drawing states that should\n * not be painted for outlines. Default is false. This should be set before\n * calling <apply>.\n */\nmxShape.prototype.outline = false;\n\n/**\n * Variable: visible\n * \n * Specifies if the shape is visible. Default is true.\n */\nmxShape.prototype.visible = true;\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxShape.prototype.useSvgBoundingBox = false;\n\n/**\n * Function: init\n *\n * Initializes the shape by creaing the DOM node using <create>\n * and adding it into the given container.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.init = function(container)\n{\n\tif (this.node == null)\n\t{\n\t\tthis.node = this.create(container);\n\t\t\n\t\tif (container != null)\n\t\t{\n\t\t\tcontainer.appendChild(this.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: initStyles\n *\n * Sets the styles to their default values.\n */\nmxShape.prototype.initStyles = function(container)\n{\n\tthis.strokewidth = 1;\n\tthis.rotation = 0;\n\tthis.opacity = 100;\n\tthis.fillOpacity = 100;\n\tthis.strokeOpacity = 100;\n\tthis.flipH = false;\n\tthis.flipV = false;\n};\n\n/**\n * Function: isParseVml\n * \n * Specifies if any VML should be added via insertAdjacentHtml to the DOM. This\n * is only needed in IE8 and only if the shape contains VML markup. This method\n * returns true.\n */\nmxShape.prototype.isParseVml = function()\n{\n\treturn true;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxShape.prototype.isHtmlAllowed = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Returns 0, or 0.5 if <strokewidth> % 2 == 1.\n */\nmxShape.prototype.getSvgScreenOffset = function()\n{\n\tvar sw = this.stencil && this.stencil.strokewidth != 'inherit' ? Number(this.stencil.strokewidth) : this.strokewidth;\n\t\n\treturn (mxUtils.mod(Math.max(1, Math.round(sw * this.scale)), 2) == 1) ? 0.5 : 0;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM node(s) for the shape in\n * the given container. This implementation invokes\n * <createSvg>, <createHtml> or <createVml> depending\n * on the <dialect> and style settings.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.create = function(container)\n{\n\tvar node = null;\n\t\n\tif (container != null && container.ownerSVGElement != null)\n\t{\n\t\tnode = this.createSvg(container);\n\t}\n\telse if (document.documentMode == 8 || !mxClient.IS_VML ||\n\t\t(this.dialect != mxConstants.DIALECT_VML && this.isHtmlAllowed()))\n\t{\n\t\tnode = this.createHtml(container);\n\t}\n\telse\n\t{\n\t\tnode = this.createVml(container);\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: createSvg\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.createSvg = function()\n{\n\treturn document.createElementNS(mxConstants.NS_SVG, 'g');\n};\n\n/**\n * Function: createVml\n *\n * Creates and returns the VML node to represent this shape.\n */\nmxShape.prototype.createVml = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: reconfigure\n *\n * Reconfigures this shape. This will update the colors etc in\n * addition to the bounds or points.\n */\nmxShape.prototype.reconfigure = function()\n{\n\tthis.redraw();\n};\n\n/**\n * Function: redraw\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.redraw = function()\n{\n\tthis.updateBoundsFromPoints();\n\t\n\tif (this.visible && this.checkBounds())\n\t{\n\t\tthis.node.style.visibility = 'visible';\n\t\tthis.clear();\n\t\t\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tthis.redrawHtmlShape();\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tthis.redrawShape();\n\t\t}\n\n\t\tthis.updateBoundingBox();\n\t}\n\telse\n\t{\n\t\tthis.node.style.visibility = 'hidden';\n\t\tthis.boundingBox = null;\n\t}\n};\n\n/**\n * Function: clear\n * \n * Removes all child nodes and resets all CSS.\n */\nmxShape.prototype.clear = function()\n{\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\twhile (this.node.lastChild != null)\n\t\t{\n\t\t\tthis.node.removeChild(this.node.lastChild);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.node.style.cssText = 'position:absolute;' + ((this.cursor != null) ?\n\t\t\t('cursor:' + this.cursor + ';') : '');\n\t\tthis.node.innerHTML = '';\n\t}\n};\n\n/**\n * Function: updateBoundsFromPoints\n * \n * Updates the bounds based on the points.\n */\nmxShape.prototype.updateBoundsFromPoints = function()\n{\n\tvar pts = this.points;\n\t\n\tif (pts != null && pts.length > 0 && pts[0] != null)\n\t{\n\t\tthis.bounds = new mxRectangle(Number(pts[0].x), Number(pts[0].y), 1, 1);\n\t\t\n\t\tfor (var i = 1; i < this.points.length; i++)\n\t\t{\n\t\t\tif (pts[i] != null)\n\t\t\t{\n\t\t\t\tthis.bounds.add(new mxRectangle(Number(pts[i].x), Number(pts[i].y), 1, 1));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the <mxRectangle> for the label bounds of this shape, based on the\n * given scaled and translated bounds of the shape. This method should not\n * change the rectangle in-place. This implementation returns the given rect.\n */\nmxShape.prototype.getLabelBounds = function(rect)\n{\n\tvar d = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\tvar bounds = rect;\n\t\n\t// Normalizes argument for getLabelMargins hook\n\tif (d != mxConstants.DIRECTION_SOUTH && d != mxConstants.DIRECTION_NORTH &&\n\t\tthis.state != null && this.state.text != null &&\n\t\tthis.state.text.isPaintBoundsInverted())\n\t{\n\t\tbounds = bounds.clone();\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\t\n\tvar m = this.getLabelMargins(bounds);\n\t\n\tif (m != null)\n\t{\n\t\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, false) == '1';\n\t\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, false) == '1';\n\t\t\n\t\t// Handles special case for vertical labels\n\t\tif (this.state != null && this.state.text != null &&\n\t\t\tthis.state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.height;\n\t\t\tm.height = m.width;\n\t\t\tm.width = m.y;\n\t\t\tm.y = tmp;\n\n\t\t\ttmp = flipH;\n\t\t\tflipH = flipV;\n\t\t\tflipV = tmp;\n\t\t}\n\t\t\n\t\treturn mxUtils.getDirectedBounds(rect, m, this.style, flipH, flipV);\n\t}\n\t\n\treturn rect;\n};\n\n/**\n * Function: getLabelMargins\n * \n * Returns the scaled top, left, bottom and right margin to be used for\n * computing the label bounds as an <mxRectangle>, where the bottom and right\n * margin are defined in the width and height of the rectangle, respectively.\n */\nmxShape.prototype.getLabelMargins= function(rect)\n{\n\treturn null;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxShape.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height) &&\n\t\t\tthis.bounds.width > 0 && this.bounds.height > 0);\n};\n\n/**\n * Function: createVmlGroup\n *\n * Returns the temporary element used for rendering in IE8 standards mode.\n */\nmxShape.prototype.createVmlGroup = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\tnode.style.width = this.node.style.width;\n\tnode.style.height = this.node.style.height;\n\t\n\treturn node;\n};\n\n/**\n * Function: redrawShape\n *\n * Updates the SVG or VML shape.\n */\nmxShape.prototype.redrawShape = function()\n{\n\tvar canvas = this.createCanvas();\n\t\n\tif (canvas != null)\n\t{\n\t\t// Specifies if events should be handled\n\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\tthis.paint(canvas);\n\t\n\t\tif (this.node != canvas.root)\n\t\t{\n\t\t\t// Forces parsing in IE8 standards mode - slow! avoid\n\t\t\tthis.node.insertAdjacentHTML('beforeend', canvas.root.outerHTML);\n\t\t}\n\t\n\t\tif (this.node.nodeName == 'DIV' && document.documentMode == 8)\n\t\t{\n\t\t\t// Makes DIV transparent to events for IE8 in IE8 standards\n\t\t\t// mode (Note: Does not work for IE9 in IE8 standards mode\n\t\t\t// and not for IE11 in enterprise mode)\n\t\t\tthis.node.style.filter = '';\n\t\t\t\n\t\t\t// Adds event transparency in IE8 standards\n\t\t\tmxUtils.addTransparentBackgroundFilter(this.node);\n\t\t}\n\t\t\n\t\tthis.destroyCanvas(canvas);\n\t}\n};\n\n/**\n * Function: createCanvas\n * \n * Creates a new canvas for drawing this shape. May return null.\n */\nmxShape.prototype.createCanvas = function()\n{\n\tvar canvas = null;\n\t\n\t// LATER: Check if reusing existing DOM nodes improves performance\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\tcanvas = this.createSvgCanvas();\n\t}\n\telse if (mxClient.IS_VML)\n\t{\n\t\tthis.updateVmlContainer();\n\t\tcanvas = this.createVmlCanvas();\n\t}\n\t\n\tif (canvas != null && this.outline)\n\t{\n\t\tcanvas.setStrokeWidth(this.strokewidth);\n\t\tcanvas.setStrokeColor(this.stroke);\n\t\t\n\t\tif (this.isDashed != null)\n\t\t{\n\t\t\tcanvas.setDashed(this.isDashed);\n\t\t}\n\t\t\n\t\tcanvas.setStrokeWidth = function() {};\n\t\tcanvas.setStrokeColor = function() {};\n\t\tcanvas.setFillColor = function() {};\n\t\tcanvas.setGradient = function() {};\n\t\tcanvas.setDashed = function() {};\n\t\tcanvas.text = function() {};\n\t}\n\n\treturn canvas;\n};\n\n/**\n * Function: createSvgCanvas\n * \n * Creates and returns an <mxSvgCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createSvgCanvas = function()\n{\n\tvar canvas = new mxSvgCanvas2D(this.node, false);\n\tcanvas.strokeTolerance = (this.pointerEvents) ? this.svgStrokeTolerance : 0;\n\tcanvas.pointerEventsValue = this.svgPointerEvents;\n\tvar off = this.getSvgScreenOffset();\n\n\tif (off != 0)\n\t{\n\t\tthis.node.setAttribute('transform', 'translate(' + off + ',' + off + ')');\n\t}\n\telse\n\t{\n\t\tthis.node.removeAttribute('transform');\n\t}\n\n\tcanvas.minStrokeWidth = this.minSvgStrokeWidth;\n\t\n\tif (!this.antiAlias)\n\t{\n\t\t// Rounds all numbers in the SVG output to integers\n\t\tcanvas.format = function(value)\n\t\t{\n\t\t\treturn Math.round(parseFloat(value));\n\t\t};\n\t}\n\t\n\treturn canvas;\n};\n\n/**\n * Function: createVmlCanvas\n * \n * Creates and returns an <mxVmlCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createVmlCanvas = function()\n{\n\t// Workaround for VML rendering bug in IE8 standards mode\n\tvar node = (document.documentMode == 8 && this.isParseVml()) ? this.createVmlGroup() : this.node;\n\tvar canvas = new mxVmlCanvas2D(node, false);\n\t\n\tif (node.tagUrn != '')\n\t{\n\t\tvar w = Math.max(1, Math.round(this.bounds.width));\n\t\tvar h = Math.max(1, Math.round(this.bounds.height));\n\t\tnode.coordsize = (w * this.vmlScale) + ',' + (h * this.vmlScale);\n\t\tcanvas.scale(this.vmlScale);\n\t\tcanvas.vmlScale = this.vmlScale;\n\t}\n\n\t// Painting relative to top, left shape corner\n\tvar s = this.scale;\n\tcanvas.translate(-Math.round(this.bounds.x / s), -Math.round(this.bounds.y / s));\n\t\n\treturn canvas;\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Updates the bounds of the VML container.\n */\nmxShape.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tvar w = Math.max(1, Math.round(this.bounds.width));\n\tvar h = Math.max(1, Math.round(this.bounds.height));\n\tthis.node.style.width = w + 'px';\n\tthis.node.style.height = h + 'px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: redrawHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.redrawHtmlShape = function()\n{\n\t// LATER: Refactor methods\n\tthis.updateHtmlBounds(this.node);\n\tthis.updateHtmlFilters(this.node);\n\tthis.updateHtmlColors(this.node);\n};\n\n/**\n * Function: updateHtmlFilters\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlFilters = function(node)\n{\n\tvar f = '';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tf += 'alpha(opacity=' + (this.opacity) + ')';\n\t}\n\t\n\tif (this.isShadow)\n\t{\n\t\t// FIXME: Cannot implement shadow transparency with filter\n\t\tf += 'progid:DXImageTransform.Microsoft.dropShadow (' +\n\t\t\t'OffX=\\'' + Math.round(mxConstants.SHADOW_OFFSET_X * this.scale) + '\\', ' +\n\t\t\t'OffY=\\'' + Math.round(mxConstants.SHADOW_OFFSET_Y * this.scale) + '\\', ' +\n\t\t\t'Color=\\'' + mxConstants.VML_SHADOWCOLOR + '\\')';\n\t}\n\t\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar start = this.fill;\n\t\tvar end = this.gradient;\n\t\tvar type = '0';\n\t\t\n\t\tvar lookup = {east:0,south:1,west:2,north:3};\n\t\tvar dir = (this.direction != null) ? lookup[this.direction] : 0;\n\t\t\n\t\tif (this.gradientDirection != null)\n\t\t{\n\t\t\tdir = mxUtils.mod(dir + lookup[this.gradientDirection] - 1, 4);\n\t\t}\n\n\t\tif (dir == 1)\n\t\t{\n\t\t\ttype = '1';\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 2)\n\t\t{\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 3)\n\t\t{\n\t\t\ttype = '1';\n\t\t}\n\t\t\n\t\tf += 'progid:DXImageTransform.Microsoft.gradient(' +\n\t\t\t'startColorStr=\\'' + start + '\\', endColorStr=\\'' + end +\n\t\t\t'\\', gradientType=\\'' + type + '\\')';\n\t}\n\n\tnode.style.filter = f;\n};\n\n/**\n * Function: mixedModeHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlColors = function(node)\n{\n\tvar color = this.stroke;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.borderColor = color;\n\n\t\tif (this.isDashed)\n\t\t{\n\t\t\tnode.style.borderStyle = 'dashed';\n\t\t}\n\t\telse if (this.strokewidth > 0)\n\t\t{\n\t\t\tnode.style.borderStyle = 'solid';\n\t\t}\n\n\t\tnode.style.borderWidth = Math.max(1, Math.ceil(this.strokewidth * this.scale)) + 'px';\n\t}\n\telse\n\t{\n\t\tnode.style.borderWidth = '0px';\n\t}\n\n\tcolor = (this.outline) ? null : this.fill;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.backgroundColor = color;\n\t\tnode.style.backgroundImage = 'none';\n\t}\n\telse if (this.pointerEvents)\n\t{\n\t\t node.style.backgroundColor = 'transparent';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tmxUtils.addTransparentBackgroundFilter(node);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(node);\n\t}\n};\n\n/**\n * Function: mixedModeHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlBounds = function(node)\n{\n\tvar sw = (document.documentMode >= 9) ? 0 : Math.ceil(this.strokewidth * this.scale);\n\tnode.style.borderWidth = Math.max(1, sw) + 'px';\n\tnode.style.overflow = 'hidden';\n\t\n\tnode.style.left = Math.round(this.bounds.x - sw / 2) + 'px';\n\tnode.style.top = Math.round(this.bounds.y - sw / 2) + 'px';\n\n\tif (document.compatMode == 'CSS1Compat')\n\t{\n\t\tsw = -sw;\n\t}\n\t\n\tnode.style.width = Math.round(Math.max(0, this.bounds.width + sw)) + 'px';\n\tnode.style.height = Math.round(Math.max(0, this.bounds.height + sw)) + 'px';\n};\n\n/**\n * Function: destroyCanvas\n * \n * Destroys the given canvas which was used for drawing. This implementation\n * increments the reference counts on all shared gradients used in the canvas.\n */\nmxShape.prototype.destroyCanvas = function(canvas)\n{\n\t// Manages reference counts\n\tif (canvas instanceof mxSvgCanvas2D)\n\t{\n\t\t// Increments ref counts\n\t\tfor (var key in canvas.gradients)\n\t\t{\n\t\t\tvar gradient = canvas.gradients[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.releaseSvgGradients(this.oldGradients);\n\t\tthis.oldGradients = canvas.gradients;\n\t}\n};\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxShape.prototype.paint = function(c)\n{\n\tvar strokeDrawn = false;\n\t\n\tif (c != null && this.outline)\n\t{\n\t\tvar stroke = c.stroke;\n\t\t\n\t\tc.stroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tstroke.apply(this, arguments);\n\t\t};\n\n\t\tvar fillAndStroke = c.fillAndStroke;\n\t\t\n\t\tc.fillAndStroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tfillAndStroke.apply(this, arguments);\n\t\t};\n\t}\n\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\tif (this.isPaintBoundsInverted())\n\t{\n\t\tvar t = (w - h) / 2;\n\t\tx += t;\n\t\ty -= t;\n\t\tvar tmp = w;\n\t\tw = h;\n\t\th = tmp;\n\t}\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\n\t// Adds background rectangle to capture events\n\tvar bg = null;\n\t\n\tif ((this.stencil == null && this.points == null && this.shapePointerEvents) ||\n\t\t(this.stencil != null && this.stencilPointerEvents))\n\t{\n\t\tvar bb = this.createBoundingBox();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tbg = this.createTransparentSvgRectangle(bb.x, bb.y, bb.width, bb.height);\n\t\t\tthis.node.appendChild(bg);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar rect = c.createRect('rect', bb.x / s, bb.y / s, bb.width / s, bb.height / s);\n\t\t\trect.appendChild(c.createTransparentFill());\n\t\t\trect.stroked = 'false';\n\t\t\tc.root.appendChild(rect);\n\t\t}\n\t}\n\n\tif (this.stencil != null)\n\t{\n\t\tthis.stencil.drawShape(c, this, x, y, w, h);\n\t}\n\telse\n\t{\n\t\t// Stencils have separate strokewidth\n\t\tc.setStrokeWidth(this.strokewidth);\n\t\t\n\t\tif (this.points != null)\n\t\t{\n\t\t\t// Paints edge shape\n\t\t\tvar pts = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t\t{\n\t\t\t\tif (this.points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tpts.push(new mxPoint(this.points[i].x / s, this.points[i].y / s));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.paintEdgeShape(c, pts);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Paints vertex shape\n\t\t\tthis.paintVertexShape(c, x, y, w, h);\n\t\t}\n\t}\n\t\n\tif (bg != null && c.state != null && c.state.transform != null)\n\t{\n\t\tbg.setAttribute('transform', c.state.transform);\n\t}\n\t\n\t// Draws highlight rectangle if no stroke was used\n\tif (c != null && this.outline && !strokeDrawn)\n\t{\n\t\tc.rect(x, y, w, h);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxShape.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tvar dash = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tdash = this.style['dashPattern'];\t\t\n\t}\n\n\tc.setAlpha(this.opacity / 100);\n\tc.setFillAlpha(this.fillOpacity / 100);\n\tc.setStrokeAlpha(this.strokeOpacity / 100);\n\n\t// Sets alpha, colors and gradients\n\tif (this.isShadow != null)\n\t{\n\t\tc.setShadow(this.isShadow);\n\t}\n\t\n\t// Dash pattern\n\tif (this.isDashed != null)\n\t{\n\t\tc.setDashed(this.isDashed, (this.style != null) ?\n\t\t\tmxUtils.getValue(this.style, mxConstants.STYLE_FIX_DASH, false) == 1 : false);\n\t}\n\n\tif (dash != null)\n\t{\n\t\tc.setDashPattern(dash);\n\t}\n\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar b = this.getGradientBounds(c, x, y, w, h);\n\t\tc.setGradient(this.fill, this.gradient, b.x, b.y, b.width, b.height, this.gradientDirection);\n\t}\n\telse\n\t{\n\t\tc.setFillColor(this.fill);\n\t}\n\n\tc.setStrokeColor(this.stroke);\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxShape.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\treturn new mxRectangle(x, y, w, h);\n};\n\n/**\n * Function: updateTransform\n * \n * Sets the scale and rotation on the given canvas.\n */\nmxShape.prototype.updateTransform = function(c, x, y, w, h)\n{\n\t// NOTE: Currently, scale is implemented in state and canvas. This will\n\t// move to canvas in a later version, so that the states are unscaled\n\t// and untranslated and do not need an update after zooming or panning.\n\tc.scale(this.scale);\n\tc.rotate(this.getShapeRotation(), this.flipH, this.flipV, x + w / 2, y + h / 2);\n};\n\n/**\n * Function: paintVertexShape\n * \n * Paints the vertex shape.\n */\nmxShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tthis.paintBackground(c, x, y, w, h);\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintForeground(c, x, y, w, h);\n\t}\n};\n\n/**\n * Function: paintBackground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintBackground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintForeground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintForeground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintEdgeShape\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintEdgeShape = function(c, pts) { };\n\n/**\n * Function: getArcSize\n * \n * Returns the arc size for the given dimension.\n */\nmxShape.prototype.getArcSize = function(w, h)\n{\n\tvar r = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t{\n\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t}\n\telse\n\t{\n\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\tr = Math.min(w * f, h * f);\n\t}\n\t\n\treturn r;\n};\n\n/**\n * Function: paintGlassEffect\n * \n * Paints the glass gradient effect.\n */\nmxShape.prototype.paintGlassEffect = function(c, x, y, w, h, arc)\n{\n\tvar sw = Math.ceil(this.strokewidth / 2);\n\tvar size = 0.4;\n\t\n\tc.setGradient('#ffffff', '#ffffff', x, y, w, h * 0.6, 'south', 0.9, 0.1);\n\tc.begin();\n\tarc += 2 * sw;\n\t\t\n\tif (this.isRounded)\n\t{\n\t\tc.moveTo(x - sw + arc, y - sw);\n\t\tc.quadTo(x - sw, y - sw, x - sw, y - sw + arc);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw + arc);\n\t\tc.quadTo(x + w + sw, y - sw, x + w + sw - arc, y - sw);\n\t}\n\telse\n\t{\n\t\tc.moveTo(x - sw, y - sw);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw);\n\t}\n\t\n\tc.close();\n\tc.fill();\n};\n\n/**\n * Function: addPoints\n * \n * Paints the given points with rounded corners.\n */\nmxShape.prototype.addPoints = function(c, pts, rounded, arcSize, close, exclude, initialMove)\n{\n\tif (pts != null && pts.length > 0)\n\t{\n\t\tinitialMove = (initialMove != null) ? initialMove : true;\n\t\tvar pe = pts[pts.length - 1];\n\t\t\n\t\t// Adds virtual waypoint in the center between start and end point\n\t\tif (close && rounded)\n\t\t{\n\t\t\tpts = pts.slice();\n\t\t\tvar p0 = pts[0];\n\t\t\tvar wp = new mxPoint(pe.x + (p0.x - pe.x) / 2, pe.y + (p0.y - pe.y) / 2);\n\t\t\tpts.splice(0, 0, wp);\n\t\t}\n\t\n\t\tvar pt = pts[0];\n\t\tvar i = 1;\n\t\n\t\t// Draws the line segments\n\t\tif (initialMove)\n\t\t{\n\t\t\tc.moveTo(pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pt.x, pt.y);\n\t\t}\n\t\t\n\t\twhile (i < ((close) ? pts.length : pts.length - 1))\n\t\t{\n\t\t\tvar tmp = pts[mxUtils.mod(i, pts.length)];\n\t\t\tvar dx = pt.x - tmp.x;\n\t\t\tvar dy = pt.y - tmp.y;\n\t\n\t\t\tif (rounded && (dx != 0 || dy != 0) && (exclude == null || mxUtils.indexOf(exclude, i - 1) < 0))\n\t\t\t{\n\t\t\t\t// Draws a line from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the last point\n\t\t\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tvar nx1 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny1 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x1 = tmp.x + nx1;\n\t\t\t\tvar y1 = tmp.y + ny1;\n\t\t\t\tc.lineTo(x1, y1);\n\t\n\t\t\t\t// Draws a curve from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the next point\n\t\t\t\tvar next = pts[mxUtils.mod(i + 1, pts.length)];\n\t\t\t\t\n\t\t\t\t// Uses next non-overlapping point\n\t\t\t\twhile (i < pts.length - 2 && Math.round(next.x - tmp.x) == 0 && Math.round(next.y - tmp.y) == 0)\n\t\t\t\t{\n\t\t\t\t\tnext = pts[mxUtils.mod(i + 2, pts.length)];\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdx = next.x - tmp.x;\n\t\t\t\tdy = next.y - tmp.y;\n\t\n\t\t\t\tdist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\t\tvar nx2 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny2 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x2 = tmp.x + nx2;\n\t\t\t\tvar y2 = tmp.y + ny2;\n\t\n\t\t\t\tc.quadTo(tmp.x, tmp.y, x2, y2);\n\t\t\t\ttmp = new mxPoint(x2, y2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.lineTo(tmp.x, tmp.y);\n\t\t\t}\n\t\n\t\t\tpt = tmp;\n\t\t\ti++;\n\t\t}\n\t\n\t\tif (close)\n\t\t{\n\t\t\tc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pe.x, pe.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxShape.prototype.resetStyles = function()\n{\n\tthis.initStyles();\n\n\tthis.spacing = 0;\n\t\n\tdelete this.fill;\n\tdelete this.gradient;\n\tdelete this.gradientDirection;\n\tdelete this.stroke;\n\tdelete this.startSize;\n\tdelete this.endSize;\n\tdelete this.startArrow;\n\tdelete this.endArrow;\n\tdelete this.direction;\n\tdelete this.isShadow;\n\tdelete this.isDashed;\n\tdelete this.isRounded;\n\tdelete this.glass;\n};\n\n/**\n * Function: apply\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_FILLCOLOR> => fill\n * - <mxConstants.STYLE_GRADIENTCOLOR> => gradient\n * - <mxConstants.STYLE_GRADIENT_DIRECTION> => gradientDirection\n * - <mxConstants.STYLE_OPACITY> => opacity\n * - <mxConstants.STYLE_FILL_OPACITY> => fillOpacity\n * - <mxConstants.STYLE_STROKE_OPACITY> => strokeOpacity\n * - <mxConstants.STYLE_STROKECOLOR> => stroke\n * - <mxConstants.STYLE_STROKEWIDTH> => strokewidth\n * - <mxConstants.STYLE_SHADOW> => isShadow\n * - <mxConstants.STYLE_DASHED> => isDashed\n * - <mxConstants.STYLE_SPACING> => spacing\n * - <mxConstants.STYLE_STARTSIZE> => startSize\n * - <mxConstants.STYLE_ENDSIZE> => endSize\n * - <mxConstants.STYLE_ROUNDED> => isRounded\n * - <mxConstants.STYLE_STARTARROW> => startArrow\n * - <mxConstants.STYLE_ENDARROW> => endArrow\n * - <mxConstants.STYLE_ROTATION> => rotation\n * - <mxConstants.STYLE_DIRECTION> => direction\n * - <mxConstants.STYLE_GLASS> => glass\n *\n * This keeps a reference to the <style>. If you need to keep a reference to\n * the cell, you can override this method and store a local reference to\n * state.cell or the <mxCellState> itself. If <outline> should be true, make\n * sure to set it before calling this method.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxShape.prototype.apply = function(state)\n{\n\tthis.state = state;\n\tthis.style = state.style;\n\n\tif (this.style != null)\n\t{\n\t\tthis.fill = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, this.fill);\n\t\tthis.gradient = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENTCOLOR, this.gradient);\n\t\tthis.gradientDirection = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENT_DIRECTION, this.gradientDirection);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_OPACITY, this.opacity);\n\t\tthis.fillOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_FILL_OPACITY, this.fillOpacity);\n\t\tthis.strokeOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_STROKE_OPACITY, this.strokeOpacity);\n\t\tthis.stroke = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, this.stroke);\n\t\tthis.strokewidth = mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth);\n\t\tthis.spacing = mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing);\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, this.startSize);\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, this.endSize);\n\t\tthis.startArrow = mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, this.startArrow);\n\t\tthis.endArrow = mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, this.endArrow);\n\t\tthis.rotation = mxUtils.getValue(this.style, mxConstants.STYLE_ROTATION, this.rotation);\n\t\tthis.direction = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, this.direction);\n\t\tthis.flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\tthis.flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\t\n\t\t// Legacy support for stencilFlipH/V\n\t\tif (this.stencil != null)\n\t\t{\n\t\t\tthis.flipH = mxUtils.getValue(this.style, 'stencilFlipH', 0) == 1 || this.flipH;\n\t\t\tthis.flipV = mxUtils.getValue(this.style, 'stencilFlipV', 0) == 1 || this.flipV;\n\t\t}\n\t\t\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH || this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tvar tmp = this.flipH;\n\t\t\tthis.flipH = this.flipV;\n\t\t\tthis.flipV = tmp;\n\t\t}\n\n\t\tthis.isShadow = mxUtils.getValue(this.style, mxConstants.STYLE_SHADOW, this.isShadow) == 1;\n\t\tthis.isDashed = mxUtils.getValue(this.style, mxConstants.STYLE_DASHED, this.isDashed) == 1;\n\t\tthis.isRounded = mxUtils.getValue(this.style, mxConstants.STYLE_ROUNDED, this.isRounded) == 1;\n\t\tthis.glass = mxUtils.getValue(this.style, mxConstants.STYLE_GLASS, this.glass) == 1;\n\t\t\n\t\tif (this.fill == mxConstants.NONE)\n\t\t{\n\t\t\tthis.fill = null;\n\t\t}\n\n\t\tif (this.gradient == mxConstants.NONE)\n\t\t{\n\t\t\tthis.gradient = null;\n\t\t}\n\n\t\tif (this.stroke == mxConstants.NONE)\n\t\t{\n\t\t\tthis.stroke = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the cursor on the given shape.\n *\n * Parameters:\n *\n * cursor - The cursor to be used.\n */\nmxShape.prototype.setCursor = function(cursor)\n{\n\tif (cursor == null)\n\t{\n\t\tcursor = '';\n\t}\n\t\n\tthis.cursor = cursor;\n\n\tif (this.node != null)\n\t{\n\t\tthis.node.style.cursor = cursor;\n\t}\n};\n\n/**\n * Function: getCursor\n * \n * Returns the current cursor.\n */\nmxShape.prototype.getCursor = function()\n{\n\treturn this.cursor;\n};\n\n/**\n * Function: isRoundable\n * \n * Hook for subclassers.\n */\nmxShape.prototype.isRoundable = function()\n{\n\treturn false;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxShape.prototype.updateBoundingBox = function()\n{\n\t// Tries to get bounding box from SVG subsystem\n\t// LATER: Use getBoundingClientRect for fallback in VML\n\tif (this.useSvgBoundingBox && this.node != null && this.node.ownerSVGElement != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar b = this.node.getBBox();\n\t\n\t\t\tif (b.width > 0 && b.height > 0)\n\t\t\t{\n\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\n\t\t\t\t// Adds strokeWidth\n\t\t\t\tthis.boundingBox.grow(this.strokewidth * this.scale / 2);\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tcatch(e)\n\t\t{\n\t\t\t// fallback to code below\n\t\t}\n\t}\n\n\tif (this.bounds != null)\n\t{\n\t\tvar bbox = this.createBoundingBox();\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tthis.augmentBoundingBox(bbox);\n\t\t\tvar rot = this.getShapeRotation();\n\t\t\t\n\t\t\tif (rot != 0)\n\t\t\t{\n\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, rot);\n\t\t\t}\n\t\t}\n\n\t\tthis.boundingBox = bbox;\n\t}\n};\n\n/**\n * Function: createBoundingBox\n *\n * Returns a new rectangle that represents the bounding box of the bare shape\n * with no shadows or strokewidths.\n */\nmxShape.prototype.createBoundingBox = function()\n{\n\tvar bb = this.bounds.clone();\n\n\tif ((this.stencil != null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\tthis.direction == mxConstants.DIRECTION_SOUTH)) || this.isPaintBoundsInverted())\n\t{\n\t\tbb.rotate90();\n\t}\n\t\n\treturn bb;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxShape.prototype.augmentBoundingBox = function(bbox)\n{\n\tif (this.isShadow)\n\t{\n\t\tbbox.width += Math.ceil(mxConstants.SHADOW_OFFSET_X * this.scale);\n\t\tbbox.height += Math.ceil(mxConstants.SHADOW_OFFSET_Y * this.scale);\n\t}\n\t\n\t// Adds strokeWidth\n\tbbox.grow(this.strokewidth * this.scale / 2);\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns true if the bounds should be inverted.\n */\nmxShape.prototype.isPaintBoundsInverted = function()\n{\n\t// Stencil implements inversion via aspect\n\treturn this.stencil == null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation from the style.\n */\nmxShape.prototype.getRotation = function()\n{\n\treturn (this.rotation != null) ? this.rotation : 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label.\n */\nmxShape.prototype.getTextRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) != 1)\n\t{\n\t\trot += mxText.prototype.verticalTextRotation;\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns the actual rotation of the shape.\n */\nmxShape.prototype.getShapeRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (this.direction != null)\n\t{\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\trot += 270;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\trot += 180;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\trot += 90;\n\t\t}\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: createTransparentSvgRectangle\n * \n * Adds a transparent rectangle that catches all events.\n */\nmxShape.prototype.createTransparentSvgRectangle = function(x, y, w, h)\n{\n\tvar rect = document.createElementNS(mxConstants.NS_SVG, 'rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\trect.setAttribute('fill', 'none');\n\trect.setAttribute('stroke', 'none');\n\trect.setAttribute('pointer-events', 'all');\n\t\n\treturn rect;\n};\n\n/**\n * Function: setTransparentBackgroundImage\n * \n * Sets a transparent background CSS style to catch all events.\n * \n * Paints the line shape.\n */\nmxShape.prototype.setTransparentBackgroundImage = function(node)\n{\n\tnode.style.backgroundImage = 'url(\\'' + mxClient.imageBasePath + '/transparent.gif\\')';\n};\n\n/**\n * Function: releaseSvgGradients\n * \n * Paints the line shape.\n */\nmxShape.prototype.releaseSvgGradients = function(grads)\n{\n\tif (grads != null)\n\t{\n\t\tfor (var key in grads)\n\t\t{\n\t\t\tvar gradient = grads[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) - 1;\n\t\t\t\t\n\t\t\t\tif (gradient.mxRefCount == 0 && gradient.parentNode != null)\n\t\t\t\t{\n\t\t\t\t\tgradient.parentNode.removeChild(gradient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the shape by removing it from the DOM and releasing the DOM\n * node associated with the shape using <mxEvent.release>.\n */\nmxShape.prototype.destroy = function()\n{\n\tif (this.node != null)\n\t{\n\t\tmxEvent.release(this.node);\n\t\t\n\t\tif (this.node.parentNode != null)\n\t\t{\n\t\t\tthis.node.parentNode.removeChild(this.node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n\t\n\t// Decrements refCount and removes unused\n\tthis.releaseSvgGradients(this.oldGradients);\n\tthis.oldGradients = null;\n};\n\n__mxOutput.mxShape = typeof mxShape !== 'undefined' ? mxShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStencil\n *\n * Implements a generic shape which is based on a XML node as a description.\n * \n * shape:\n * \n * The outer element is *shape*, that has attributes:\n * \n * - \"name\", string, required. The stencil name that uniquely identifies the shape.\n * - \"w\" and \"h\" are optional decimal view bounds. This defines your co-ordinate\n * system for the graphics operations in the shape. The default is 100,100.\n * - \"aspect\", optional string. Either \"variable\", the default, or \"fixed\". Fixed\n * means always render the shape with the aspect ratio defined by the ratio w/h.\n * Variable causes the ratio to match that of the geometry of the current vertex.\n * - \"strokewidth\", optional string. Either an integer or the string \"inherit\".\n * \"inherit\" indicates that the strokeWidth of the cell is only changed on scaling,\n * not on resizing. Default is \"1\".\n * If numeric values are used, the strokeWidth of the cell is changed on both\n * scaling and resizing and the value defines the multiple that is applied to\n * the width.\n * \n * connections:\n * \n * If you want to define specific fixed connection points on the shape use the\n * *connections* element. Each *constraint* element within connections defines\n * a fixed connection point on the shape. Constraints have attributes:\n * \n * - \"perimeter\", required. 1 or 0. 0 sets the connection point where specified\n * by x,y. 1 Causes the position of the connection point to be extrapolated from\n * the center of the shape, through x,y to the point of intersection with the\n * perimeter of the shape.\n * - \"x\" and \"y\" are the position of the fixed point relative to the bounds of\n * the shape. They can be automatically adjusted if perimeter=1. So, (0,0) is top\n * left, (0.5,0.5) the center, (1,0.5) the center of the right hand edge of the\n * bounds, etc. Values may be less than 0 or greater than 1 to be positioned\n * outside of the shape.\n * - \"name\", optional string. A unique identifier for the port on the shape.\n * \n * background and foreground:\n * \n * The path of the graphics drawing is split into two elements, *foreground* and\n * *background*. The split is to define which part any shadow applied to the shape\n * is derived from (the background). This, generally, means the background is the\n * line tracing of the outside of the shape, but not always.\n * \n * Any stroke, fill or fillstroke of a background must be the first element of the\n * foreground element, they must not be used within *background*. If the background\n * is empty, this is not required.\n * \n * Because the background cannot have any fill or stroke, it can contain only one\n * *path*, *rect*, *roundrect* or *ellipse* element (or none). It can also not\n * include *image*, *text* or *include-shape*.\n * \n * Note that the state, styling and drawing in mxGraph stencils is very close in\n * design to that of HTML 5 canvas. Tutorials on this subject, if you're not\n * familiar with the topic, will give a good high-level introduction to the\n * concepts used.\n * \n * State:\n * \n * Rendering within the foreground and background elements has the concept of\n * state. There are two types of operations other than state save/load, styling\n * and drawing. The styling operations change the current state, so you can save\n * the current state with <save/> and pull the last saved state from the state\n * stack using <restore/>.\n * \n * Styling:\n * \n * The elements that change colors within the current state all take a hash\n * prefixed hex color code (\"#FFEA80\").\n * \n * - *strokecolor*, this sets the color that drawing paths will be rendered in\n * when a stroke or fillstroke command is issued.\n * - *fillcolor*, this sets the color that the inside of closed paths will be\n * rendered in when a fill or fillstroke command is issued.\n * - *fontcolor*, this sets the color that fonts are rendered in when text is drawn.\n * \n * *alpha* defines the degree of transparency used between 1.0 for fully opaque\n * and 0.0 for fully transparent.\n * \n * *fillalpha* defines the degree of fill transparency used between 1.0 for fully\n * opaque and 0.0 for fully transparent.\n * \n * *strokealpha* defines the degree of stroke transparency used between 1.0 for\n * fully opaque and 0.0 for fully transparent.\n * \n * *strokewidth* defines the integer thickness of drawing elements rendered by\n * stroking. Use fixed=\"1\" to apply the value as-is, without scaling.\n * \n * *dashed* is \"1\" for dashing enabled and \"0\" for disabled.\n * \n * When *dashed* is enabled the current dash pattern, defined by *dashpattern*,\n * is used on strokes. dashpattern is a sequence of space separated \"on, off\"\n * lengths that define what distance to paint the stroke for, then what distance\n * to paint nothing for, repeat... The default is \"3 3\". You could define a more\n * complex pattern with \"5 3 2 6\", for example. Generally, it makes sense to have\n * an even number of elements in the dashpattern, but that's not required.\n * \n * *linejoin*, *linecap* and *miterlimit* are best explained by the Mozilla page\n * on Canvas styling (about halfway down). The values are all the same except we\n * use \"flat\" for linecap, instead of Canvas' \"butt\".\n * \n * For font styling there are.\n * \n * - *fontsize*, an integer,\n * - *fontstyle*, an ORed bit pattern of bold (1), italic (2) and underline (4),\n * i.e bold underline is \"5\".\n * - *fontfamily*, is a string defining the typeface to be used.\n * \n * Drawing:\n * \n * Most drawing is contained within a *path* element. Again, the graphic\n * primitives are very similar to that of HTML 5 canvas.\n * \n * - *move* to attributes required decimals (x,y).\n * - *line* to attributes required decimals (x,y).\n * - *quad* to required decimals (x2,y2) via control point required decimals\n * (x1,y1).\n * - *curve* to required decimals (x3,y3), via control points required decimals\n * (x1,y1) and (x2,y2).\n * - *arc*, this doesn't follow the HTML Canvas signatures, instead it's a copy\n * of the SVG arc command. The SVG specification documentation gives the best\n * description of its behaviors. The attributes are named identically, they are\n * decimals and all required.\n * - *close* ends the current subpath and causes an automatic straight line to\n * be drawn from the current point to the initial point of the current subpath.\n * \n * Complex drawing:\n * \n * In addition to the graphics primitive operations there are non-primitive\n * operations. These provide an easy method to draw some basic shapes.\n * \n * - *rect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals\n * - *roundrect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals. Also\n * \"arcsize\" an optional decimal attribute defining how large, the corner curves\n * are.\n * - *ellipse*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals.\n * \n * Note that these 3 shapes and all paths must be followed by either a fill,\n * stroke, or fillstroke.\n * \n * Text:\n * \n * *text* elements have the following attributes.\n * \n * - \"str\", the text string to display, required.\n * - \"x\" and \"y\", the decimal location (x,y) of the text element, required.\n * - \"align\", the horizontal alignment of the text element, either \"left\",\n * \"center\" or \"right\". Optional, default is \"left\".\n * - \"valign\", the vertical alignment of the text element, either \"top\", \"middle\"\n * or \"bottom\". Optional, default is \"top\".\n * - \"localized\", 0 or 1, if 1 then the \"str\" actually contains a key to use to\n * fetch the value out of mxResources. Optional, default is\n * <mxStencil.defaultLocalized>.\n * - \"vertical\", 0 or 1, if 1 the label is rendered vertically (rotated by 90\n * degrees). Optional, default is 0.\n * - \"rotation\", angle in degrees (0 to 360). The angle to rotate the text by.\n * Optional, default is 0.\n * - \"align-shape\", 0 or 1, if 0 ignore the rotation of the shape when setting\n * the text rotation. Optional, default is 1.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the text element (ignored if the str attribute is not null).\n * \n * Images:\n * \n * *image* elements can either be external URLs, or data URIs, where supported\n * (not in IE 7-). Attributes are:\n * \n * - \"src\", required string. Either a data URI or URL.\n * - \"x\", \"y\", required decimals. The (x,y) position of the image.\n * - \"w\", \"h\", required decimals. The width and height of the image.\n * - \"flipH\" and \"flipV\", optional 0 or 1. Whether to flip the image along the\n * horizontal/vertical axis. Default is 0 for both.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the image source (ignored if the src attribute is not null).\n * \n * Sub-shapes:\n * \n * *include-shape* allow stencils to be rendered within the current stencil by\n * referencing the sub-stencil by name. Attributes are:\n * \n * - \"name\", required string. The unique shape name of the stencil.\n * - \"x\", \"y\", \"w\", \"h\", required decimals. The (x,y) position of the sub-shape\n * and its width and height.\n * \n * Constructor: mxStencil\n * \n * Constructs a new generic shape by setting <desc> to the given XML node and\n * invoking <parseDescription> and <parseConstraints>.\n * \n * Parameters:\n * \n * desc - XML node that contains the stencil description.\n */\nfunction mxStencil(desc)\n{\n\tthis.desc = desc;\n\tthis.parseDescription();\n\tthis.parseConstraints();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxStencil, mxShape);\n\n/**\n * Variable: defaultLocalized\n * \n * Static global variable that specifies the default value for the localized\n * attribute of the text element. Default is false.\n */\nmxStencil.defaultLocalized = false;\n\n/**\n * Function: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content and images. Default is false. Set this to true\n * if stencils can not contain user input.\n */\nmxStencil.allowEval = false;\n\n/**\n * Variable: desc\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.desc = null;\n\n/**\n * Variable: constraints\n * \n * Holds an array of <mxConnectionConstraints> as defined in the shape.\n */\nmxStencil.prototype.constraints = null;\n\n/**\n * Variable: aspect\n *\n * Holds the aspect of the shape. Default is 'auto'.\n */\nmxStencil.prototype.aspect = null;\n\n/**\n * Variable: w0\n *\n * Holds the width of the shape. Default is 100.\n */\nmxStencil.prototype.w0 = null;\n\n/**\n * Variable: h0\n *\n * Holds the height of the shape. Default is 100.\n */\nmxStencil.prototype.h0 = null;\n\n/**\n * Variable: bgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.bgNode = null;\n\n/**\n * Variable: fgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.fgNode = null;\n\n/**\n * Variable: strokewidth\n *\n * Holds the strokewidth direction from the description.\n */\nmxStencil.prototype.strokewidth = null;\n\n/**\n * Function: parseDescription\n *\n * Reads <w0>, <h0>, <aspect>, <bgNodes> and <fgNodes> from <desc>.\n */\nmxStencil.prototype.parseDescription = function()\n{\n\t// LATER: Preprocess nodes for faster painting\n\tthis.fgNode = this.desc.getElementsByTagName('foreground')[0];\n\tthis.bgNode = this.desc.getElementsByTagName('background')[0];\n\tthis.w0 = Number(this.desc.getAttribute('w') || 100);\n\tthis.h0 = Number(this.desc.getAttribute('h') || 100);\n\t\n\t// Possible values for aspect are: variable and fixed where\n\t// variable means fill the available space and fixed means\n\t// use w0 and h0 to compute the aspect.\n\tvar aspect = this.desc.getAttribute('aspect');\n\tthis.aspect = (aspect != null) ? aspect : 'variable';\n\t\n\t// Possible values for strokewidth are all numbers and \"inherit\"\n\t// where the inherit means take the value from the style (ie. the\n\t// user-defined stroke-width). Note that the strokewidth is scaled\n\t// by the minimum scaling that is used to draw the shape (sx, sy).\n\tvar sw = this.desc.getAttribute('strokewidth');\n\tthis.strokewidth = (sw != null) ? sw : '1';\n};\n\n/**\n * Function: parseConstraints\n *\n * Reads the constraints from <desc> into <constraints> using\n * <parseConstraint>.\n */\nmxStencil.prototype.parseConstraints = function()\n{\n\tvar conns = this.desc.getElementsByTagName('connections')[0];\n\t\n\tif (conns != null)\n\t{\n\t\tvar tmp = mxUtils.getChildNodes(conns);\n\t\t\n\t\tif (tmp != null && tmp.length > 0)\n\t\t{\n\t\t\tthis.constraints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t{\n\t\t\t\tthis.constraints.push(this.parseConstraint(tmp[i]));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: parseConstraint\n *\n * Parses the given XML node and returns its <mxConnectionConstraint>.\n */\nmxStencil.prototype.parseConstraint = function(node)\n{\n\tvar x = Number(node.getAttribute('x'));\n\tvar y = Number(node.getAttribute('y'));\n\tvar perimeter = node.getAttribute('perimeter') == '1';\n\tvar name = node.getAttribute('name');\n\t\n\treturn new mxConnectionConstraint(new mxPoint(x, y), perimeter, name);\n};\n\n/**\n * Function: evaluateTextAttribute\n * \n * Gets the given attribute as a text. The return value from <evaluateAttribute>\n * is used as a key to <mxResources.get> if the localized attribute in the text\n * node is 1 or if <defaultLocalized> is true.\n */\nmxStencil.prototype.evaluateTextAttribute = function(node, attribute, shape)\n{\n\tvar result = this.evaluateAttribute(node, attribute, shape);\n\tvar loc = node.getAttribute('localized');\n\t\n\tif ((mxStencil.defaultLocalized && loc == null) || loc == '1')\n\t{\n\t\tresult = mxResources.get(result);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: evaluateAttribute\n *\n * Gets the attribute for the given name from the given node. If the attribute\n * does not exist then the text content of the node is evaluated and if it is\n * a function it is invoked with <shape> as the only argument and the return\n * value is used as the attribute value to be returned.\n */\nmxStencil.prototype.evaluateAttribute = function(node, attribute, shape)\n{\n\tvar result = node.getAttribute(attribute);\n\t\n\tif (result == null)\n\t{\n\t\tvar text = mxUtils.getTextContent(node);\n\t\t\n\t\tif (text != null && mxStencil.allowEval)\n\t\t{\n\t\t\tvar funct = mxUtils.eval(text);\n\t\t\t\n\t\t\tif (typeof(funct) == 'function')\n\t\t\t{\n\t\t\t\tresult = funct(shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: drawShape\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawShape = function(canvas, shape, x, y, w, h)\n{\n\tvar stack = canvas.states.slice();\n\t\n\t// TODO: Internal structure (array of special structs?), relative and absolute\n\t// coordinates (eg. note shape, process vs star, actor etc.), text rendering\n\t// and non-proportional scaling, how to implement pluggable edge shapes\n\t// (start, segment, end blocks), pluggable markers, how to implement\n\t// swimlanes (title area) with this API, add icon, horizontal/vertical\n\t// label, indicator for all shapes, rotation\n\tvar direction = mxUtils.getValue(shape.style, mxConstants.STYLE_DIRECTION, null);\n\tvar aspect = this.computeAspect(shape.style, x, y, w, h, direction);\n\tvar minScale = Math.min(aspect.width, aspect.height);\n\tvar sw = (this.strokewidth == 'inherit') ?\n\t\t\tNumber(mxUtils.getNumber(shape.style, mxConstants.STYLE_STROKEWIDTH, 1)) :\n\t\t\tNumber(this.strokewidth) * minScale;\n\tcanvas.setStrokeWidth(sw);\n\n\t// Draws a transparent rectangle for catching events\n\tif (shape.style != null && mxUtils.getValue(shape.style, mxConstants.STYLE_POINTER_EVENTS, '0') == '1')\n\t{\n\t\tcanvas.setStrokeColor(mxConstants.NONE);\n\t\tcanvas.rect(x, y, w, h);\n\t\tcanvas.stroke();\n\t\tcanvas.setStrokeColor(shape.stroke);\n\t}\n\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.bgNode, aspect, false, true);\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.fgNode, aspect, true,\n\t\t!shape.outline || shape.style == null || mxUtils.getValue(\n\t\tshape.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0);\n\t\n\t// Restores stack for unequal count of save/restore calls\n\tif (canvas.states.length != stack.length)\n\t{\n\t\tcanvas.states = stack;\n\t}\n};\n\n/**\n * Function: drawChildren\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawChildren = function(canvas, shape, x, y, w, h, node, aspect, disableShadow, paint)\n{\n\tif (node != null && w > 0 && h > 0)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t{\n\t\t\t\tthis.drawNode(canvas, shape, tmp, aspect, disableShadow, paint);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t}\n};\n\n/**\n * Function: computeAspect\n *\n * Returns a rectangle that contains the offset in x and y and the horizontal\n * and vertical scale in width and height used to draw this shape inside the\n * given <mxRectangle>.\n * \n * Parameters:\n * \n * shape - <mxShape> to be drawn.\n * bounds - <mxRectangle> that should contain the stencil.\n * direction - Optional direction of the shape to be darwn.\n */\nmxStencil.prototype.computeAspect = function(shape, x, y, w, h, direction)\n{\n\tvar x0 = x;\n\tvar y0 = y;\n\tvar sx = w / this.w0;\n\tvar sy = h / this.h0;\n\t\n\tvar inverse = (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH);\n\n\tif (inverse)\n\t{\n\t\tsy = w / this.h0;\n\t\tsx = h / this.w0;\n\t\t\n\t\tvar delta = (w - h) / 2;\n\n\t\tx0 += delta;\n\t\ty0 -= delta;\n\t}\n\n\tif (this.aspect == 'fixed')\n\t{\n\t\tsy = Math.min(sx, sy);\n\t\tsx = sy;\n\t\t\n\t\t// Centers the shape inside the available space\n\t\tif (inverse)\n\t\t{\n\t\t\tx0 += (h - this.w0 * sx) / 2;\n\t\t\ty0 += (w - this.h0 * sy) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx0 += (w - this.w0 * sx) / 2;\n\t\t\ty0 += (h - this.h0 * sy) / 2;\n\t\t}\n\t}\n\n\treturn new mxRectangle(x0, y0, sx, sy);\n};\n\n/**\n * Function: drawNode\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawNode = function(canvas, shape, node, aspect, disableShadow, paint)\n{\n\tvar name = node.nodeName;\n\tvar x0 = aspect.x;\n\tvar y0 = aspect.y;\n\tvar sx = aspect.width;\n\tvar sy = aspect.height;\n\tvar minScale = Math.min(sx, sy);\n\t\n\tif (name == 'save')\n\t{\n\t\tcanvas.save();\n\t}\n\telse if (name == 'restore')\n\t{\n\t\tcanvas.restore();\n\t}\n\telse if (paint)\n\t{\n\t\tif (name == 'path')\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\t\n\t\t\tvar parseRegularly = true;\n\t\t\t\n\t\t\tif (node.getAttribute('rounded') == '1')\n\t\t\t{\n\t\t\t\tparseRegularly = false;\n\t\t\t\t\n\t\t\t\tvar arcSize = Number(node.getAttribute('arcSize'));\n\t\t\t\tvar pointCount = 0;\n\t\t\t\tvar segs = [];\n\t\t\t\t\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childName = childNode.nodeName;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (childName == 'move' || childName == 'line')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (childName == 'move' || segs.length == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsegs.push([]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsegs[segs.length - 1].push(new mxPoint(x0 + Number(childNode.getAttribute('x')) * sx,\n\t\t\t\t\t\t\t\ty0 + Number(childNode.getAttribute('y')) * sy));\n\t\t\t\t\t\t\tpointCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//We only support move and line for rounded corners\n\t\t\t\t\t\t\tparseRegularly = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\n\t\t\t\tif (!parseRegularly && pointCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < segs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar close = false, ps = segs[i][0], pe = segs[i][segs[i].length - 1];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (ps.x == pe.x && ps.y == pe.y) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsegs[i].pop();\n\t\t\t\t\t\t\tclose = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.addPoints(canvas, segs[i], true, arcSize, close);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparseRegularly = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (parseRegularly)\n\t\t\t{\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.drawNode(canvas, shape, childNode, aspect, disableShadow, paint);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (name == 'close')\n\t\t{\n\t\t\tcanvas.close();\n\t\t}\n\t\telse if (name == 'move')\n\t\t{\n\t\t\tcanvas.moveTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'line')\n\t\t{\n\t\t\tcanvas.lineTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'quad')\n\t\t{\n\t\t\tcanvas.quadTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy);\n\t\t}\n\t\telse if (name == 'curve')\n\t\t{\n\t\t\tcanvas.curveTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x3')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y3')) * sy);\n\t\t}\n\t\telse if (name == 'arc')\n\t\t{\n\t\t\tcanvas.arcTo(Number(node.getAttribute('rx')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('ry')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('x-axis-rotation')),\n\t\t\t\t\tNumber(node.getAttribute('large-arc-flag')),\n\t\t\t\t\tNumber(node.getAttribute('sweep-flag')),\n\t\t\t\t\tx0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'rect')\n\t\t{\n\t\t\tcanvas.rect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'roundrect')\n\t\t{\n\t\t\tvar arcsize = Number(node.getAttribute('arcsize'));\n\t\n\t\t\tif (arcsize == 0)\n\t\t\t{\n\t\t\t\tarcsize = mxConstants.RECTANGLE_ROUNDING_FACTOR * 100;\n\t\t\t}\n\t\t\t\n\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\tvar factor = Number(arcsize) / 100;\n\t\t\tvar r = Math.min(w * factor, h * factor);\n\t\t\t\n\t\t\tcanvas.roundrect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tw, h, r, r);\n\t\t}\n\t\telse if (name == 'ellipse')\n\t\t{\n\t\t\tcanvas.ellipse(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'image')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar src = this.evaluateAttribute(node, 'src', shape);\n\t\t\t\t\n\t\t\t\tcanvas.image(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy,\n\t\t\t\t\tsrc, false, node.getAttribute('flipH') == '1',\n\t\t\t\t\tnode.getAttribute('flipV') == '1');\n\t\t\t}\n\t\t}\n\t\telse if (name == 'text')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar str = this.evaluateTextAttribute(node, 'str', shape);\n\t\t\t\tvar rotation = node.getAttribute('vertical') == '1' ? -90 : 0;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('align-shape') == '0')\n\t\t\t\t{\n\t\t\t\t\tvar dr = shape.rotation;\n\t\t\n\t\t\t\t\t// Depends on flipping\n\t\t\t\t\tvar flipH = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (flipH && flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t\telse if (flipH || flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation += dr;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\trotation -= node.getAttribute('rotation');\n\t\t\n\t\t\t\tcanvas.text(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\t\t0, 0, str, node.getAttribute('align') || 'left',\n\t\t\t\t\t\tnode.getAttribute('valign') || 'top', false, '',\n\t\t\t\t\t\tnull, false, rotation);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'include-shape')\n\t\t{\n\t\t\tvar stencil = mxStencilRegistry.getStencil(node.getAttribute('name'));\n\t\t\t\n\t\t\tif (stencil != null)\n\t\t\t{\n\t\t\t\tvar x = x0 + Number(node.getAttribute('x')) * sx;\n\t\t\t\tvar y = y0 + Number(node.getAttribute('y')) * sy;\n\t\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\t\t\n\t\t\t\tstencil.drawShape(canvas, shape, x, y, w, h);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'fillstroke')\n\t\t{\n\t\t\tcanvas.fillAndStroke();\n\t\t}\n\t\telse if (name == 'fill')\n\t\t{\n\t\t\tcanvas.fill();\n\t\t}\n\t\telse if (name == 'stroke')\n\t\t{\n\t\t\tcanvas.stroke();\n\t\t}\n\t\telse if (name == 'strokewidth')\n\t\t{\n\t\t\tvar s = (node.getAttribute('fixed') == '1') ? 1 : minScale;\n\t\t\tcanvas.setStrokeWidth(Number(node.getAttribute('width')) * s);\n\t\t}\n\t\telse if (name == 'dashed')\n\t\t{\n\t\t\tcanvas.setDashed(node.getAttribute('dashed') == '1');\n\t\t}\n\t\telse if (name == 'dashpattern')\n\t\t{\n\t\t\tvar value = node.getAttribute('pattern');\n\t\t\t\n\t\t\tif (value != null)\n\t\t\t{\n\t\t\t\tvar tmp = value.split(' ');\n\t\t\t\tvar pat = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (tmp[i].length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tpat.push(Number(tmp[i]) * minScale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = pat.join(' ');\n\t\t\t\tcanvas.setDashPattern(value);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'strokecolor')\n\t\t{\n\t\t\tcanvas.setStrokeColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'linecap')\n\t\t{\n\t\t\tcanvas.setLineCap(node.getAttribute('cap'));\n\t\t}\n\t\telse if (name == 'linejoin')\n\t\t{\n\t\t\tcanvas.setLineJoin(node.getAttribute('join'));\n\t\t}\n\t\telse if (name == 'miterlimit')\n\t\t{\n\t\t\tcanvas.setMiterLimit(Number(node.getAttribute('limit')));\n\t\t}\n\t\telse if (name == 'fillcolor')\n\t\t{\n\t\t\tcanvas.setFillColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'alpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fillalpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'strokealpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fontcolor')\n\t\t{\n\t\t\tcanvas.setFontColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'fontstyle')\n\t\t{\n\t\t\tcanvas.setFontStyle(node.getAttribute('style'));\n\t\t}\n\t\telse if (name == 'fontfamily')\n\t\t{\n\t\t\tcanvas.setFontFamily(node.getAttribute('family'));\n\t\t}\n\t\telse if (name == 'fontsize')\n\t\t{\n\t\t\tcanvas.setFontSize(Number(node.getAttribute('size')) * minScale);\n\t\t}\n\t\t\n\t\tif (disableShadow && (name == 'fillstroke' || name == 'fill' || name == 'stroke'))\n\t\t{\n\t\t\tdisableShadow = false;\n\t\t\tcanvas.setShadow(false);\n\t\t}\n\t}\n};\n\n__mxOutput.mxStencil = typeof mxStencil !== 'undefined' ? mxStencil : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n * \n * Code to add stencils.\n * \n * (code)\n * var req = mxUtils.load('test/stencils.xml');\n * var root = req.getDocumentElement();\n * var shape = root.firstChild;\n * \n * while (shape != null)\n * {\n * \t if (shape.nodeType == mxConstants.NODETYPE_ELEMENT)\n *   {\n *     mxStencilRegistry.addStencil(shape.getAttribute('name'), new mxStencil(shape));\n *   }\n *   \n *   shape = shape.nextSibling;\n * }\n * (end)\n */\nvar mxStencilRegistry =\n{\n\t/**\n\t * Class: mxStencilRegistry\n\t * \n\t * A singleton class that provides a registry for stencils and the methods\n\t * for painting those stencils onto a canvas or into a DOM.\n\t */\n\tstencils: {},\n\t\n\t/**\n\t * Function: addStencil\n\t * \n\t * Adds the given <mxStencil>.\n\t */\n\taddStencil: function(name, stencil)\n\t{\n\t\tmxStencilRegistry.stencils[name] = stencil;\n\t},\n\t\n\t/**\n\t * Function: getStencil\n\t * \n\t * Returns the <mxStencil> for the given name.\n\t */\n\tgetStencil: function(name)\n\t{\n\t\treturn mxStencilRegistry.stencils[name];\n\t}\n\n};\n\n__mxOutput.mxStencilRegistry = typeof mxStencilRegistry !== 'undefined' ? mxStencilRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxMarker =\n{\n\t/**\n\t * Class: mxMarker\n\t * \n\t * A static class that implements all markers for VML and SVG using a\n\t * registry. NOTE: The signatures in this class will change.\n\t * \n\t * Variable: markers\n\t * \n\t * Maps from markers names to functions to paint the markers.\n\t */\n\tmarkers: [],\n\t\n\t/**\n\t * Function: addMarker\n\t * \n\t * Adds a factory method that updates a given endpoint and returns a\n\t * function to paint the marker onto the given canvas.\n\t */\n\taddMarker: function(type, funct)\n\t{\n\t\tmxMarker.markers[type] = funct;\n\t},\n\t\n\t/**\n\t * Function: createMarker\n\t * \n\t * Returns a function to paint the given marker.\n\t */\n\tcreateMarker: function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar funct = mxMarker.markers[type];\n\t\t\n\t\treturn (funct != null) ? funct(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) : null;\n\t}\n\n};\n\n/**\n * Adds the classic and block marker factory method.\n */\n(function()\n{\n\tfunction createArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tvar f = (type != mxConstants.ARROW_CLASSIC && type != mxConstants.ARROW_CLASSIC_THIN) ? 1 : 3 / 4;\n\t\t\tpe.x += -unitX * f - endOffsetX;\n\t\t\tpe.y += -unitY * f - endOffsetY;\n\t\t\t\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\n\t\t\t\tif (type == mxConstants.ARROW_CLASSIC || type == mxConstants.ARROW_CLASSIC_THIN)\n\t\t\t\t{\n\t\t\t\t\tcanvas.lineTo(pt.x - unitX * 3 / 4, pt.y - unitY * 3 / 4);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.close();\n\t\n\t\t\t\tif (filled)\n\t\t\t\t{\n\t\t\t\t\tcanvas.fillAndStroke();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.stroke();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('classic', createArrow(2));\n\tmxMarker.addMarker('classicThin', createArrow(3));\n\tmxMarker.addMarker('block', createArrow(2));\n\tmxMarker.addMarker('blockThin', createArrow(3));\n\t\n\tfunction createOpenArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\t\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tpe.x += -endOffsetX * 2;\n\t\t\tpe.y += -endOffsetY * 2;\n\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\tcanvas.lineTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.stroke();\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('open', createOpenArrow(2));\n\tmxMarker.addMarker('openThin', createOpenArrow(3));\n\t\n\tmxMarker.addMarker('oval', function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar a = size / 2;\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpe.x -= unitX * a;\n\t\tpe.y -= unitY * a;\n\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.ellipse(pt.x - a, pt.y - a, size, size);\n\t\t\t\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction diamond(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t// 45 degrees, 1/sin(45) = 1.4142 / 2 = 0.7071 ( / 2 allows for\n\t\t// only half the strokewidth is processed ). Or 0.9862 for thin diamond.\n\t\t// Note these values and the tk variable below are dependent, update\n\t\t// both together (saves trig hard coding it).\n\t\tvar swFactor = (type == mxConstants.ARROW_DIAMOND) ?  0.7071 : 0.9862;\n\t\tvar endOffsetX = unitX * sw * swFactor;\n\t\tvar endOffsetY = unitY * sw * swFactor;\n\t\t\n\t\tunitX = unitX * (size + sw);\n\t\tunitY = unitY * (size + sw);\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpt.x -= endOffsetX;\n\t\tpt.y -= endOffsetY;\n\t\t\n\t\tpe.x += -unitX - endOffsetX;\n\t\tpe.y += -unitY - endOffsetY;\n\t\t\n\t\t// thickness factor for diamond\n\t\tvar tk = ((type == mxConstants.ARROW_DIAMOND) ?  2 : 3.4);\n\t\t\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);\n\t\t\tcanvas.lineTo(pt.x - unitX, pt.y - unitY);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);\n\t\t\tcanvas.close();\n\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t};\n\n\tmxMarker.addMarker('diamond', diamond);\n\tmxMarker.addMarker('diamondThin', diamond);\n})();\n\n__mxOutput.mxMarker = typeof mxMarker !== 'undefined' ? mxMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxActor\n *\n * Extends <mxShape> to implement an actor shape. If a custom shape with one\n * filled area is needed, then this shape's <redrawPath> should be overridden.\n * \n * Example:\n * \n * (code)\n * function SampleShape() { }\n * \n * SampleShape.prototype = new mxActor();\n * SampleShape.prototype.constructor = vsAseShape;\n * \n * mxCellRenderer.registerShape('sample', SampleShape);\n * SampleShape.prototype.redrawPath = function(path, x, y, w, h)\n * {\n *   path.moveTo(0, 0);\n *   path.lineTo(w, h);\n *   // ...\n *   path.close();\n * }\n * (end)\n * \n * This shape is registered under <mxConstants.SHAPE_ACTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxActor\n *\n * Constructs a new actor shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxActor(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxActor, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxActor.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxActor.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar width = w/3;\n\tc.moveTo(0, h);\n\tc.curveTo(0, 3 * h / 5, 0, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w / 2 - width, 2 * h / 5, w / 2 - width, 0, w / 2, 0);\n\tc.curveTo(w / 2 + width, 0, w / 2 + width, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w, 2 * h / 5, w, 3 * h / 5, w, h);\n\tc.close();\n};\n\n__mxOutput.mxActor = typeof mxActor !== 'undefined' ? mxActor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCloud\n *\n * Extends <mxActor> to implement a cloud shape.\n * \n * This shape is registered under <mxConstants.SHAPE_CLOUD> in\n * <mxCellRenderer>.\n * \n * Constructor: mxCloud\n *\n * Constructs a new cloud shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCloud(bounds, fill, stroke, strokewidth)\n{\n\tmxActor.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxCloud, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCloud.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tc.moveTo(0.25 * w, 0.25 * h);\n\tc.curveTo(0.05 * w, 0.25 * h, 0, 0.5 * h, 0.16 * w, 0.55 * h);\n\tc.curveTo(0, 0.66 * h, 0.18 * w, 0.9 * h, 0.31 * w, 0.8 * h);\n\tc.curveTo(0.4 * w, h, 0.7 * w, h, 0.8 * w, 0.8 * h);\n\tc.curveTo(w, 0.8 * h, w, 0.6 * h, 0.875 * w, 0.5 * h);\n\tc.curveTo(w, 0.3 * h, 0.8 * w, 0.1 * h, 0.625 * w, 0.2 * h);\n\tc.curveTo(0.5 * w, 0.05 * h, 0.3 * w, 0.05 * h, 0.25 * w, 0.25 * h);\n\tc.close();\n};\n\n__mxOutput.mxCloud = typeof mxCloud !== 'undefined' ? mxCloud : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangleShape\n *\n * Extends <mxShape> to implement a rectangle shape.\n * This shape is registered under <mxConstants.SHAPE_RECTANGLE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRectangleShape\n *\n * Constructs a new rectangle shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRectangleShape(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRectangleShape, mxShape);\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient.\n */\nmxRectangleShape.prototype.isHtmlAllowed = function()\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\t\t\n\t}\n\t\n\treturn !this.isRounded && !this.glass && this.rotation == 0 && (events ||\n\t\t(this.fill != null && this.fill != mxConstants.NONE));\n};\n\n/**\n * Function: paintBackground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (events || (this.fill != null && this.fill != mxConstants.NONE) ||\n\t\t(this.stroke != null && this.stroke != mxConstants.NONE))\n\t{\n\t\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t\t{\n\t\t\tc.pointerEvents = false;\n\t\t}\n\t\t\n\t\tif (this.isRounded)\n\t\t{\n\t\t\tvar r = 0;\n\t\t\t\n\t\t\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t\t\t{\n\t\t\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\t\t\tr = Math.min(w * f, h * f);\n\t\t\t}\n\t\t\t\n\t\t\tc.roundrect(x, y, w, h, r, r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.rect(x, y, w, h);\n\t\t}\n\t\t\t\n\t\tc.fillAndStroke();\n\t}\n};\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRectangleShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (this.glass && !this.outline && this.fill != null && this.fill != mxConstants.NONE)\n\t{\n\t\tthis.paintGlassEffect(c, x, y, w, h, this.getArcSize(w + this.strokewidth, h + this.strokewidth));\n\t}\n};\n\n__mxOutput.mxRectangleShape = typeof mxRectangleShape !== 'undefined' ? mxRectangleShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEllipse\n *\n * Extends <mxShape> to implement an ellipse shape.\n * This shape is registered under <mxConstants.SHAPE_ELLIPSE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxEllipse\n *\n * Constructs a new ellipse shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxEllipse, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Paints the ellipse shape.\n */\nmxEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxEllipse = typeof mxEllipse !== 'undefined' ? mxEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDoubleEllipse\n *\n * Extends <mxShape> to implement a double ellipse shape. This shape is\n * registered under <mxConstants.SHAPE_DOUBLE_ELLIPSE> in <mxCellRenderer>.\n * Use the following override to only fill the inner ellipse in this shape:\n * \n * (code)\n * mxDoubleEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n * {\n *   c.ellipse(x, y, w, h);\n *   c.stroke();\n *   \n *   var inset = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n *   x += inset;\n *   y += inset;\n *   w -= 2 * inset;\n *   h -= 2 * inset;\n *   \n *   if (w > 0 && h > 0)\n *   {\n *     c.ellipse(x, y, w, h);\n *   }\n *   \n *   c.fillAndStroke();\n * };\n * (end)\n * \n * Constructor: mxDoubleEllipse\n *\n * Constructs a new ellipse shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxDoubleEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxDoubleEllipse, mxShape);\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 10.\n */\nmxDoubleEllipse.prototype.vmlScale = 10;\n\n/**\n * Function: paintBackground\n * \n * Paints the background.\n */\nmxDoubleEllipse.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: paintForeground\n * \n * Paints the foreground.\n */\nmxDoubleEllipse.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (!this.outline)\n\t{\n\t\tvar margin = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n\t\tx += margin;\n\t\ty += margin;\n\t\tw -= 2 * margin;\n\t\th -= 2 * margin;\n\t\t\n\t\t// FIXME: Rounding issues in IE8 standards mode (not in 1.x)\n\t\tif (w > 0 && h > 0)\n\t\t{\n\t\t\tc.ellipse(x, y, w, h);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds for the label.\n */\nmxDoubleEllipse.prototype.getLabelBounds = function(rect)\n{\n\tvar margin = (mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth,\n\t\t\tMath.min(rect.width / 5 / this.scale, rect.height / 5 / this.scale)))) * this.scale;\n\n\treturn new mxRectangle(rect.x + margin, rect.y + margin, rect.width - 2 * margin, rect.height - 2 * margin);\n};\n\n__mxOutput.mxDoubleEllipse = typeof mxDoubleEllipse !== 'undefined' ? mxDoubleEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRhombus\n *\n * Extends <mxShape> to implement a rhombus (aka diamond) shape.\n * This shape is registered under <mxConstants.SHAPE_RHOMBUS>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRhombus\n *\n * Constructs a new rhombus shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRhombus(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRhombus, mxShape);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRhombus.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic painting implementation.\n */\nmxRhombus.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar hw = w / 2;\n\tvar hh = h / 2;\n\t\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, [new mxPoint(x + hw, y), new mxPoint(x + w, y + hh), new mxPoint(x + hw, y + h),\n\t     new mxPoint(x, y + hh)], this.isRounded, arcSize, true);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxRhombus = typeof mxRhombus !== 'undefined' ? mxRhombus : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPolyline\n *\n * Extends <mxShape> to implement a polyline (a line with multiple points).\n * This shape is registered under <mxConstants.SHAPE_POLYLINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxPolyline\n *\n * Constructs a new polyline shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxPolyline(points, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxPolyline, mxShape);\n\n/**\n * Function: getRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns false.\n */\nmxPolyline.prototype.isPaintBoundsInverted = function()\n{\n\treturn false;\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintEdgeShape = function(c, pts)\n{\n\tvar prev = c.pointerEventsValue;\n\tc.pointerEventsValue = 'stroke';\n\t\n\tif (this.style == null || this.style[mxConstants.STYLE_CURVED] != 1)\n\t{\n\t\tthis.paintLine(c, pts, this.isRounded);\n\t}\n\telse\n\t{\n\t\tthis.paintCurvedLine(c, pts);\n\t}\n\t\n\tc.pointerEventsValue = prev;\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintLine = function(c, pts, rounded)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, pts, rounded, arcSize, false);\n\tc.stroke();\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintCurvedLine = function(c, pts)\n{\n\tc.begin();\n\t\n\tvar pt = pts[0];\n\tvar n = pts.length;\n\t\n\tc.moveTo(pt.x, pt.y);\n\t\n\tfor (var i = 1; i < n - 2; i++)\n\t{\n\t\tvar p0 = pts[i];\n\t\tvar p1 = pts[i + 1];\n\t\tvar ix = (p0.x + p1.x) / 2;\n\t\tvar iy = (p0.y + p1.y) / 2;\n\t\t\n\t\tc.quadTo(p0.x, p0.y, ix, iy);\n\t}\n\t\n\tvar p0 = pts[n - 2];\n\tvar p1 = pts[n - 1];\n\t\n\tc.quadTo(p0.x, p0.y, p1.x, p1.y);\n\tc.stroke();\n};\n\n__mxOutput.mxPolyline = typeof mxPolyline !== 'undefined' ? mxPolyline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrow\n *\n * Extends <mxShape> to implement an arrow shape. (The shape\n * is used to represent edges, not vertices.)\n * This shape is registered under <mxConstants.SHAPE_ARROW>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrow\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrow(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.spacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.endSize = (endSize != null) ? endSize : mxConstants.ARROW_SIZE;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrow, mxShape);\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrow.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = Math.max(this.arrowWidth, this.endSize);\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrow.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar spacing =  mxConstants.ARROW_SPACING;\n\tvar width = mxConstants.ARROW_WIDTH;\n\tvar arrow = mxConstants.ARROW_SIZE;\n\n\t// Base vector (between end points)\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\tvar dx = pe.x - p0.x;\n\tvar dy = pe.y - p0.y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\tvar length = dist - 2 * spacing - arrow;\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar ny = dy / dist;\n\tvar basex = length * nx;\n\tvar basey = length * ny;\n\tvar floorx = width * ny/3;\n\tvar floory = -width * nx/3;\n\t\n\t// Computes points\n\tvar p0x = p0.x - floorx / 2 + spacing * nx;\n\tvar p0y = p0.y - floory / 2 + spacing * ny;\n\tvar p1x = p0x + floorx;\n\tvar p1y = p0y + floory;\n\tvar p2x = p1x + basex;\n\tvar p2y = p1y + basey;\n\tvar p3x = p2x + floorx;\n\tvar p3y = p2y + floory;\n\t// p4 not necessary\n\tvar p5x = p3x - 3 * floorx;\n\tvar p5y = p3y - 3 * floory;\n\t\n\tc.begin();\n\tc.moveTo(p0x, p0y);\n\tc.lineTo(p1x, p1y);\n\tc.lineTo(p2x, p2y);\n\tc.lineTo(p3x, p3y);\n\tc.lineTo(pe.x - spacing * nx, pe.y - spacing * ny);\n\tc.lineTo(p5x, p5y);\n\tc.lineTo(p5x + floorx, p5y + floory);\n\tc.close();\n\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxArrow = typeof mxArrow !== 'undefined' ? mxArrow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrowConnector\n *\n * Extends <mxShape> to implement an new rounded arrow shape with support for\n * waypoints and double arrows. (The shape is used to represent edges, not\n * vertices.) This shape is registered under <mxConstants.SHAPE_ARROW_CONNECTOR>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrowConnector\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrowConnector(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.arrowSpacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.startSize = mxConstants.ARROW_SIZE / 5;\n\tthis.endSize = mxConstants.ARROW_SIZE / 5;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrowConnector, mxShape);\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxArrowConnector.prototype.useSvgBoundingBox = true;\n\n/**\n * Variable: resetStyles\n * \n * Overrides mxShape to reset spacing.\n */\nmxArrowConnector.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.arrowSpacing = mxConstants.ARROW_SPACING;\n};\n\n/**\n * Overrides apply to get smooth transition from default start- and endsize.\n */\nmxArrowConnector.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\n\tif (this.style != null)\n\t{\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t}\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrowConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = this.getEdgeWidth();\n\t\n\tif (this.isMarkerStart())\n\t{\n\t\tw = Math.max(w, this.getStartArrowWidth());\n\t}\n\t\n\tif (this.isMarkerEnd())\n\t{\n\t\tw = Math.max(w, this.getEndArrowWidth());\n\t}\n\t\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar strokeWidth = this.strokewidth;\n\t\n\tif (this.outline)\n\t{\n\t\tstrokeWidth = Math.max(1, mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth));\n\t}\n\t\n\tvar startWidth = this.getStartArrowWidth() + strokeWidth;\n\tvar endWidth = this.getEndArrowWidth() + strokeWidth;\n\tvar edgeWidth = this.outline ? this.getEdgeWidth() + strokeWidth : this.getEdgeWidth();\n\tvar openEnded = this.isOpenEnded();\n\tvar markerStart = this.isMarkerStart();\n\tvar markerEnd = this.isMarkerEnd();\n\tvar spacing = (openEnded) ? 0 : this.arrowSpacing + strokeWidth / 2;\n\tvar startSize = this.startSize + strokeWidth;\n\tvar endSize = this.endSize + strokeWidth;\n\tvar isRounded = this.isArrowRounded();\n\t\n\t// Base vector (between first points)\n\tvar pe = pts[pts.length - 1];\n\n\t// Finds first non-overlapping point\n\tvar i0 = 1;\n\t\n\twhile (i0 < pts.length - 1 && pts[i0].x == pts[0].x && pts[i0].y == pts[0].y)\n\t{\n\t\ti0++;\n\t}\n\t\n\tvar dx = pts[i0].x - pts[0].x;\n\tvar dy = pts[i0].y - pts[0].y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\n\tif (dist == 0)\n\t{\n\t\treturn;\n\t}\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar nx2, nx1 = nx;\n\tvar ny = dy / dist;\n\tvar ny2, ny1 = ny;\n\tvar orthx = edgeWidth * ny;\n\tvar orthy = -edgeWidth * nx;\n\t\n\t// Stores the inbound function calls in reverse order in fns\n\tvar fns = [];\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('round');\n\t}\n\telse if (pts.length > 2)\n\t{\n\t\t// Only mitre if there are waypoints\n\t\tc.setMiterLimit(1.42);\n\t}\n\n\tc.begin();\n\n\tvar startNx = nx;\n\tvar startNy = ny;\n\n\tif (markerStart && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pts[0].x, pts[0].y, nx, ny, startSize, startWidth, edgeWidth, spacing, true);\n\t}\n\telse\n\t{\n\t\tvar outStartX = pts[0].x + orthx / 2 + spacing * nx;\n\t\tvar outStartY = pts[0].y + orthy / 2 + spacing * ny;\n\t\tvar inEndX = pts[0].x - orthx / 2 + spacing * nx;\n\t\tvar inEndY = pts[0].y - orthy / 2 + spacing * ny;\n\t\t\n\t\tif (openEnded)\n\t\t{\n\t\t\tc.moveTo(outStartX, outStartY);\n\t\t\t\n\t\t\tfns.push(function()\n\t\t\t{\n\t\t\t\tc.lineTo(inEndX, inEndY);\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inEndX, inEndY);\n\t\t\tc.lineTo(outStartX, outStartY);\n\t\t}\n\t}\n\t\n\tvar dx1 = 0;\n\tvar dy1 = 0;\n\tvar dist1 = 0;\n\n\tfor (var i = 0; i < pts.length - 2; i++)\n\t{\n\t\t// Work out in which direction the line is bending\n\t\tvar pos = mxUtils.relativeCcw(pts[i].x, pts[i].y, pts[i+1].x, pts[i+1].y, pts[i+2].x, pts[i+2].y);\n\n\t\tdx1 = pts[i+2].x - pts[i+1].x;\n\t\tdy1 = pts[i+2].y - pts[i+1].y;\n\n\t\tdist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n\t\t\n\t\tif (dist1 != 0)\n\t\t{\n\t\t\tnx1 = dx1 / dist1;\n\t\t\tny1 = dy1 / dist1;\n\t\t\t\n\t\t\tvar tmp1 = nx * nx1 + ny * ny1;\n\t\t\tvar tmp = Math.max(Math.sqrt((tmp1 + 1) / 2), 0.04);\n\t\t\t\n\t\t\t// Work out the normal orthogonal to the line through the control point and the edge sides intersection\n\t\t\tnx2 = (nx + nx1);\n\t\t\tny2 = (ny + ny1);\n\t\n\t\t\tvar dist2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n\t\t\t\n\t\t\tif (dist2 != 0)\n\t\t\t{\n\t\t\t\tnx2 = nx2 / dist2;\n\t\t\t\tny2 = ny2 / dist2;\n\t\t\t\t\n\t\t\t\t// Higher strokewidths require a larger minimum bend, 0.35 covers all but the most extreme cases\n\t\t\t\tvar strokeWidthFactor = Math.max(tmp, Math.min(this.strokewidth / 200 + 0.04, 0.35));\n\t\t\t\tvar angleFactor = (pos != 0 && isRounded) ? Math.max(0.1, strokeWidthFactor) : Math.max(tmp, 0.06);\n\n\t\t\t\tvar outX = pts[i+1].x + ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar outY = pts[i+1].y - nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inX = pts[i+1].x - ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inY = pts[i+1].y + nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\t\n\t\t\t\tif (pos == 0 || !isRounded)\n\t\t\t\t{\n\t\t\t\t\t// If the two segments are aligned, or if we're not drawing curved sections between segments\n\t\t\t\t\t// just draw straight to the intersection point\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse if (pos == -1)\n\t\t\t\t{\n\t\t\t\t\tvar c1x = inX + ny * edgeWidth;\n\t\t\t\t\tvar c1y = inY - nx * edgeWidth;\n\t\t\t\t\tvar c2x = inX + ny1 * edgeWidth;\n\t\t\t\t\tvar c2y = inY - nx1 * edgeWidth;\n\t\t\t\t\tc.lineTo(c1x, c1y);\n\t\t\t\t\tc.quadTo(outX, outY, c2x, c2y);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c1x = outX - ny * edgeWidth;\n\t\t\t\t\t\tvar c1y = outY + nx * edgeWidth;\n\t\t\t\t\t\tvar c2x = outX - ny1 * edgeWidth;\n\t\t\t\t\t\tvar c2y = outY + nx1 * edgeWidth;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.quadTo(x, y, c1x, c1y);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(c2x, c2y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnx = nx1;\n\t\t\t\tny = ny1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\torthx = edgeWidth * ny1;\n\torthy = - edgeWidth * nx1;\n\n\tif (markerEnd && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, false);\n\t}\n\telse\n\t{\n\t\tc.lineTo(pe.x - spacing * nx1 + orthx / 2, pe.y - spacing * ny1 + orthy / 2);\n\t\t\n\t\tvar inStartX = pe.x - spacing * nx1 - orthx / 2;\n\t\tvar inStartY = pe.y - spacing * ny1 - orthy / 2;\n\n\t\tif (!openEnded)\n\t\t{\n\t\t\tc.lineTo(inStartX, inStartY);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t\n\t\t\tfns.splice(0, 0, function()\n\t\t\t{\n\t\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t});\n\t\t}\n\t}\n\t\n\tfor (var i = fns.length - 1; i >= 0; i--)\n\t{\n\t\tfns[i]();\n\t}\n\n\tif (openEnded)\n\t{\n\t\tc.end();\n\t\tc.stroke();\n\t}\n\telse\n\t{\n\t\tc.close();\n\t\tc.fillAndStroke();\n\t}\n\t\n\t// Workaround for shadow on top of base arrow\n\tc.setShadow(false);\n\t\n\t// Need to redraw the markers without the low miter limit\n\tc.setMiterLimit(4);\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('flat');\n\t}\n\n\tif (pts.length > 2)\n\t{\n\t\t// Only to repaint markers if no waypoints\n\t\t// Need to redraw the markers without the low miter limit\n\t\tc.setMiterLimit(4);\n\t\tif (markerStart && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pts[0].x, pts[0].y, startNx, startNy, startSize, startWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t\t\n\t\tif (markerEnd && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t}\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintMarker = function(c, ptX, ptY, nx, ny, size, arrowWidth, edgeWidth, spacing, initialMove)\n{\n\tvar widthArrowRatio = edgeWidth / arrowWidth;\n\tvar orthx = edgeWidth * ny / 2;\n\tvar orthy = -edgeWidth * nx / 2;\n\n\tvar spaceX = (spacing + size) * nx;\n\tvar spaceY = (spacing + size) * ny;\n\n\tif (initialMove)\n\t{\n\t\tc.moveTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\telse\n\t{\n\t\tc.lineTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\n\tc.lineTo(ptX - orthx / widthArrowRatio + spaceX, ptY - orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + spacing * nx, ptY + spacing * ny);\n\tc.lineTo(ptX + orthx / widthArrowRatio + spaceX, ptY + orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + orthx + spaceX, ptY + orthy + spaceY);\n}\n\n/**\n * Function: isArrowRounded\n * \n * Returns wether the arrow is rounded\n */\nmxArrowConnector.prototype.isArrowRounded = function()\n{\n\treturn this.isRounded;\n};\n\n/**\n * Function: getStartArrowWidth\n * \n * Returns the width of the start arrow\n */\nmxArrowConnector.prototype.getStartArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEndArrowWidth\n * \n * Returns the width of the end arrow\n */\nmxArrowConnector.prototype.getEndArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEdgeWidth\n * \n * Returns the width of the body of the edge\n */\nmxArrowConnector.prototype.getEdgeWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH / 3;\n};\n\n/**\n * Function: isOpenEnded\n * \n * Returns whether the ends of the shape are drawn\n */\nmxArrowConnector.prototype.isOpenEnded = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isMarkerStart\n * \n * Returns whether the start marker is drawn\n */\nmxArrowConnector.prototype.isMarkerStart = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n\n/**\n * Function: isMarkerEnd\n * \n * Returns whether the end marker is drawn\n */\nmxArrowConnector.prototype.isMarkerEnd = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n__mxOutput.mxArrowConnector = typeof mxArrowConnector !== 'undefined' ? mxArrowConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxText\n *\n * Extends <mxShape> to implement a text shape. To change vertical text from\n * bottom to top to top to bottom, the following code can be used:\n * \n * (code)\n * mxText.prototype.verticalTextRotation = 90;\n * (end)\n * \n * Constructor: mxText\n *\n * Constructs a new text shape.\n * \n * Parameters:\n * \n * value - String that represents the text to be displayed. This is stored in\n * <value>.\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * align - Specifies the horizontal alignment. Default is ''. This is stored in\n * <align>.\n * valign - Specifies the vertical alignment. Default is ''. This is stored in\n * <valign>.\n * color - String that specifies the text color. Default is 'black'. This is\n * stored in <color>.\n * family - String that specifies the font family. Default is\n * <mxConstants.DEFAULT_FONTFAMILY>. This is stored in <family>.\n * size - Integer that specifies the font size. Default is\n * <mxConstants.DEFAULT_FONTSIZE>. This is stored in <size>.\n * fontStyle - Specifies the font style. Default is 0. This is stored in\n * <fontStyle>.\n * spacing - Integer that specifies the global spacing. Default is 2. This is\n * stored in <spacing>.\n * spacingTop - Integer that specifies the top spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingTop>.\n * spacingRight - Integer that specifies the right spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingRight>.\n * spacingBottom - Integer that specifies the bottom spacing. Default is 0.The\n * sum of the spacing and this is stored in <spacingBottom>.\n * spacingLeft - Integer that specifies the left spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingLeft>.\n * horizontal - Boolean that specifies if the label is horizontal. Default is\n * true. This is stored in <horizontal>.\n * background - String that specifies the background color. Default is null.\n * This is stored in <background>.\n * border - String that specifies the label border color. Default is null.\n * This is stored in <border>.\n * wrap - Specifies if word-wrapping should be enabled. Default is false.\n * This is stored in <wrap>.\n * clipped - Specifies if the label should be clipped. Default is false.\n * This is stored in <clipped>.\n * overflow - Value of the overflow style. Default is 'visible'.\n */\nfunction mxText(value, bounds, align, valign, color,\n\tfamily,\tsize, fontStyle, spacing, spacingTop, spacingRight,\n\tspacingBottom, spacingLeft, horizontal, background, border,\n\twrap, clipped, overflow, labelPadding, textDirection)\n{\n\tmxShape.call(this);\n\tthis.value = value;\n\tthis.bounds = bounds;\n\tthis.color = (color != null) ? color : 'black';\n\tthis.align = (align != null) ? align : mxConstants.ALIGN_CENTER;\n\tthis.valign = (valign != null) ? valign : mxConstants.ALIGN_MIDDLE;\n\tthis.family = (family != null) ? family : mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = (size != null) ? size : mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = (fontStyle != null) ? fontStyle : mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = parseInt(spacing || 2);\n\tthis.spacingTop = this.spacing + parseInt(spacingTop || 0);\n\tthis.spacingRight = this.spacing + parseInt(spacingRight || 0);\n\tthis.spacingBottom = this.spacing + parseInt(spacingBottom || 0);\n\tthis.spacingLeft = this.spacing + parseInt(spacingLeft || 0);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.background = background;\n\tthis.border = border;\n\tthis.wrap = (wrap != null) ? wrap : false;\n\tthis.clipped = (clipped != null) ? clipped : false;\n\tthis.overflow = (overflow != null) ? overflow : 'visible';\n\tthis.labelPadding = (labelPadding != null) ? labelPadding : 0;\n\tthis.textDirection = textDirection;\n\tthis.rotation = 0;\n\tthis.updateMargin();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxText, mxShape);\n\n/**\n * Variable: baseSpacingTop\n * \n * Specifies the spacing to be added to the top spacing. Default is 0. Use the\n * value 5 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingTop = 0;\n\n/**\n * Variable: baseSpacingBottom\n * \n * Specifies the spacing to be added to the bottom spacing. Default is 0. Use the\n * value 1 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingBottom = 0;\n\n/**\n * Variable: baseSpacingLeft\n * \n * Specifies the spacing to be added to the left spacing. Default is 0.\n */\nmxText.prototype.baseSpacingLeft = 0;\n\n/**\n * Variable: baseSpacingRight\n * \n * Specifies the spacing to be added to the right spacing. Default is 0.\n */\nmxText.prototype.baseSpacingRight = 0;\n\n/**\n * Variable: replaceLinefeeds\n * \n * Specifies if linefeeds in HTML labels should be replaced with BR tags.\n * Default is true.\n */\nmxText.prototype.replaceLinefeeds = true;\n\n/**\n * Variable: verticalTextRotation\n * \n * Rotation for vertical text. Default is -90 (bottom to top).\n */\nmxText.prototype.verticalTextRotation = -90;\n\n/**\n * Variable: ignoreClippedStringSize\n * \n * Specifies if the string size should be measured in <updateBoundingBox> if\n * the label is clipped and the label position is center and middle. If this is\n * true, then the bounding box will be set to <bounds>. Default is true.\n * <ignoreStringSize> has precedence over this switch.\n */\nmxText.prototype.ignoreClippedStringSize = true;\n\n/**\n * Variable: ignoreStringSize\n * \n * Specifies if the actual string size should be measured. If disabled the\n * boundingBox will not ignore the actual size of the string, otherwise\n * <bounds> will be used instead. Default is false.\n */\nmxText.prototype.ignoreStringSize = false;\n\n/**\n * Variable: textWidthPadding\n * \n * Specifies the padding to be added to the text width for the bounding box.\n * This is needed to make sure no clipping is applied to borders. Default is 4\n * for IE 8 standards mode and 3 for all others.\n */\nmxText.prototype.textWidthPadding = (document.documentMode == 8 && !mxClient.IS_EM) ? 4 : 3;\n\n/**\n * Variable: lastValue\n * \n * Contains the last rendered text value. Used for caching.\n */\nmxText.prototype.lastValue = null;\n\n/**\n * Variable: cacheEnabled\n * \n * Specifies if caching for HTML labels should be enabled. Default is true.\n */\nmxText.prototype.cacheEnabled = true;\n\n/**\n * Function: isParseVml\n * \n * Text shapes do not contain VML markup and do not need to be parsed. This\n * method returns false to speed up rendering in IE8.\n */\nmxText.prototype.isParseVml = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation returns\n * true if the browser is not in IE8 standards mode.\n */\nmxText.prototype.isHtmlAllowed = function()\n{\n\treturn document.documentMode != 8 || mxClient.IS_EM;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxText.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxText.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height));\n};\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxText.prototype.paint = function(c, update)\n{\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\t\n\tif (update)\n\t{\n\t\tc.updateText(x, y, w, h, this.align, this.valign, this.wrap, this.overflow,\n\t\t\t\tthis.clipped, this.getTextRotation(), this.node);\n\t}\n\telse\n\t{\n\t\t// Checks if text contains HTML markup\n\t\tvar realHtml = mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML;\n\t\t\n\t\t// Always renders labels as HTML in VML\n\t\tvar fmt = (realHtml || c instanceof mxVmlCanvas2D) ? 'html' : '';\n\t\tvar val = this.value;\n\t\t\n\t\tif (!realHtml && fmt == 'html')\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\tif (fmt == 'html' && !mxUtils.isNode(this.value))\n\t\t{\n\t\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\t\t\t\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = (!mxUtils.isNode(this.value) && this.replaceLinefeeds && fmt == 'html') ?\n\t\t\tval.replace(/\\n/g, '<br/>') : val;\n\t\t\t\n\t\tvar dir = this.textDirection;\n\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && !realHtml)\n\t\t{\n\t\t\tdir = this.getAutoDirection();\n\t\t}\n\t\t\n\t\tif (dir != mxConstants.TEXT_DIRECTION_LTR && dir != mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tdir = null;\n\t\t}\n\t\t\n\t\tc.text(x, y, w, h, val, this.align, this.valign, this.wrap, fmt,\n\t\t\tthis.overflow, this.clipped, this.getTextRotation(), dir);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Renders the text using the given DOM nodes.\n */\nmxText.prototype.redraw = function()\n{\n\tif (this.visible && this.checkBounds() && this.cacheEnabled && this.lastValue == this.value &&\n\t\t(mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML))\n\t{\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tif (mxClient.IS_SVG)\n\t\t\t{\n\t\t\t\tthis.redrawHtmlShapeWithCss3();\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\n\t\t\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t\t\t{\n\t\t\t\t\tthis.updateHtmlFilter();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.updateHtmlTransform();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.updateBoundingBox();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar canvas = this.createCanvas();\n\n\t\t\tif (canvas != null && canvas.updateText != null)\n\t\t\t{\n\t\t\t\t// Specifies if events should be handled\n\t\t\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\t\t\tthis.paint(canvas, true);\n\t\t\t\tthis.destroyCanvas(canvas);\n\t\t\t\tthis.updateBoundingBox();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Fallback if canvas does not support updateText (VML)\n\t\t\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\n\t\tif (mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tthis.lastValue = this.value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.lastValue = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxText.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.color = 'black';\n\tthis.align = mxConstants.ALIGN_CENTER;\n\tthis.valign = mxConstants.ALIGN_MIDDLE;\n\tthis.family = mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = 2;\n\tthis.spacingTop = 2;\n\tthis.spacingRight = 2;\n\tthis.spacingBottom = 2;\n\tthis.spacingLeft = 2;\n\tthis.horizontal = true;\n\tdelete this.background;\n\tdelete this.border;\n\tthis.textDirection = mxConstants.DEFAULT_TEXT_DIRECTION;\n\tdelete this.margin;\n};\n\n/**\n * Function: apply\n * \n * Extends mxShape to update the text styles.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxText.prototype.apply = function(state)\n{\n\tvar old = this.spacing;\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.fontStyle = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSTYLE, this.fontStyle);\n\t\tthis.family = mxUtils.getValue(this.style, mxConstants.STYLE_FONTFAMILY, this.family);\n\t\tthis.size = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSIZE, this.size);\n\t\tthis.color = mxUtils.getValue(this.style, mxConstants.STYLE_FONTCOLOR, this.color);\n\t\tthis.align = mxUtils.getValue(this.style, mxConstants.STYLE_ALIGN, this.align);\n\t\tthis.valign = mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_ALIGN, this.valign);\n\t\tthis.spacing = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing));\n\t\tthis.spacingTop = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_TOP, this.spacingTop - old)) + this.spacing;\n\t\tthis.spacingRight = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_RIGHT, this.spacingRight - old)) + this.spacing;\n\t\tthis.spacingBottom = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_BOTTOM, this.spacingBottom - old)) + this.spacing;\n\t\tthis.spacingLeft = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_LEFT, this.spacingLeft - old)) + this.spacing;\n\t\tthis.horizontal = mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, this.horizontal);\n\t\tthis.background = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BACKGROUNDCOLOR, this.background);\n\t\tthis.border = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BORDERCOLOR, this.border);\n\t\tthis.textDirection = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tthis.updateMargin();\n\t}\n\t\n\tthis.flipV = null;\n\tthis.flipH = null;\n};\n\n/**\n * Function: getAutoDirection\n * \n * Used to determine the automatic text direction. Returns\n * <mxConstants.TEXT_DIRECTION_LTR> or <mxConstants.TEXT_DIRECTION_RTL>\n * depending on the contents of <value>. This is not invoked for HTML, wrapped\n * content or if <value> is a DOM node.\n */\nmxText.prototype.getAutoDirection = function()\n{\n\t// Looks for strong (directional) characters\n\tvar tmp = /[A-Za-z\\u05d0-\\u065f\\u066a-\\u06ef\\u06fa-\\u07ff\\ufb1d-\\ufdff\\ufe70-\\ufefc]/.exec(this.value);\n\t\n\t// Returns the direction defined by the character\n\treturn (tmp != null && tmp.length > 0 && tmp[0] > 'z') ?\n\t\tmxConstants.TEXT_DIRECTION_RTL : mxConstants.TEXT_DIRECTION_LTR;\n};\n\n/**\n * Function: getContentNode\n * \n * Returns the node that contains the rendered input.\n */\nmxText.prototype.getContentNode = function()\n{\n\tvar result = this.node;\n\t\n\tif (result != null)\n\t{\n\t\t// Rendered with no foreignObject\n\t\tif (result.ownerSVGElement == null)\n\t\t{\n\t\t\tresult = this.node.firstChild.firstChild;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Innermost DIV that contains the actual content\n\t\t\tresult = result.firstChild.firstChild.firstChild.firstChild.firstChild;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using the given node and position.\n */\nmxText.prototype.updateBoundingBox = function()\n{\n\tvar node = this.node;\n\tthis.boundingBox = this.bounds.clone();\n\tvar rot = this.getTextRotation();\n\t\n\tvar h = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER) : null;\n\tvar v = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE) : null;\n\n\tif (!this.ignoreStringSize && node != null && this.overflow != 'fill' && (!this.clipped ||\n\t\t!this.ignoreClippedStringSize || h != mxConstants.ALIGN_CENTER || v != mxConstants.ALIGN_MIDDLE))\n\t{\n\t\tvar ow = null;\n\t\tvar oh = null;\n\t\t\n\t\tif (node.ownerSVGElement != null)\n\t\t{\n\t\t\tif (node.firstChild != null && node.firstChild.firstChild != null &&\n\t\t\t\tnode.firstChild.firstChild.nodeName == 'foreignObject')\n\t\t\t{\n\t\t\t\t// Uses second inner DIV for font metrics\n\t\t\t\tnode = node.firstChild.firstChild.firstChild.firstChild;\n\t\t\t\toh = node.offsetHeight * this.scale;\n\t\t\t\t\n\t\t\t\tif (this.overflow == 'width')\n\t\t\t\t{\n\t\t\t\t\tow = this.boundingBox.width;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tow = node.offsetWidth * this.scale;\t\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar b = node.getBBox();\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for bounding box of empty string\n\t\t\t\t\tif (typeof(this.value) == 'string' && mxUtils.trim(this.value) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (b.width == 0 && b.height == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\n\t\t\t// Use cached offset size\n\t\t\tif (this.offsetWidth != null && this.offsetHeight != null)\n\t\t\t{\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Cannot get node size while container hidden so a\n\t\t\t\t// shared temporary DIV is used for text measuring\n\t\t\t\tif (td != null)\n\t\t\t\t{\n\t\t\t\t\tthis.updateFont(td);\n\t\t\t\t\tthis.updateSize(td, false);\n\t\t\t\t\tthis.updateInnerHtml(td);\n\n\t\t\t\t\tnode = td;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar sizeDiv = node;\n\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tvar w = Math.round(this.bounds.width / this.scale);\n\t\n\t\t\t\t\tif (this.wrap && w > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\t\t\tnode.style.whiteSpace = 'normal';\n\n\t\t\t\t\t\tif (node.style.wordWrap != 'break-word')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Innermost DIV is used for measuring text\n\t\t\t\t\t\t\tvar divs = sizeDiv.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (divs.length > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsizeDiv = divs[divs.length - 1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tow = sizeDiv.offsetWidth + 2;\n\t\t\t\t\t\t\tdivs = this.node.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.clipped)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tow = Math.min(w, ow);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Second last DIV width must be updated in DOM tree\n\t\t\t\t\t\t\tif (divs.length > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdivs[divs.length - 2].style.width = ow + 'px';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.whiteSpace = 'nowrap';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\n\t\t\t\tthis.offsetWidth = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\t\tthis.offsetHeight = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t}\n\n\t\tif (ow != null && oh != null)\n\t\t{\t\n\t\t\tthis.boundingBox = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y, ow, oh);\n\t\t}\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tif (rot != 0)\n\t\t{\n\t\t\t// Accounts for pre-rotated x and y\n\t\t\tvar bbox = mxUtils.getBoundingBox(new mxRectangle(\n\t\t\t\tthis.margin.x * this.boundingBox.width,\n\t\t\t\tthis.margin.y * this.boundingBox.height,\n\t\t\t\tthis.boundingBox.width, this.boundingBox.height),\n\t\t\t\trot, new mxPoint(0, 0));\n\t\t\t\n\t\t\tthis.unrotatedBoundingBox = mxRectangle.fromRectangle(this.boundingBox);\n\t\t\tthis.unrotatedBoundingBox.x += this.margin.x * this.unrotatedBoundingBox.width;\n\t\t\tthis.unrotatedBoundingBox.y += this.margin.y * this.unrotatedBoundingBox.height;\n\t\t\t\n\t\t\tthis.boundingBox.x += bbox.x;\n\t\t\tthis.boundingBox.y += bbox.y;\n\t\t\tthis.boundingBox.width = bbox.width;\n\t\t\tthis.boundingBox.height = bbox.height;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.boundingBox.x += this.margin.x * this.boundingBox.width;\n\t\t\tthis.boundingBox.y += this.margin.y * this.boundingBox.height;\n\t\t\tthis.unrotatedBoundingBox = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0 to avoid using rotation in the canvas via updateTransform.\n */\nmxText.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label of the corresponding shape.\n */\nmxText.prototype.getTextRotation = function()\n{\n\treturn (this.state != null && this.state.shape != null) ? this.state.shape.getTextRotation() : 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Inverts the bounds if <mxShape.isBoundsInverted> returns true or if the\n * horizontal style is false.\n */\nmxText.prototype.isPaintBoundsInverted = function()\n{\n\treturn !this.horizontal && this.state != null && this.state.view.graph.model.isVertex(this.state.cell);\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxText.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tmxShape.prototype.configureCanvas.apply(this, arguments);\n\t\n\tc.setFontColor(this.color);\n\tc.setFontBackgroundColor(this.background);\n\tc.setFontBorderColor(this.border);\n\tc.setFontFamily(this.family);\n\tc.setFontSize(this.size);\n\tc.setFontStyle(this.fontStyle);\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Sets the width and height of the container to 1px.\n */\nmxText.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = '1px';\n\tthis.node.style.height = '1px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: getHtmlValue\n * \n * Private helper function to create SVG elements\n */\nmxText.prototype.getHtmlValue = function()\n{\n\tvar val = this.value;\n\t\n\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t{\n\t\tval = mxUtils.htmlEntities(val, false);\n\t}\n\t\n\t// Handles trailing newlines to make sure they are visible in rendering output\n\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\n\treturn val;\n};\n\n/**\n * Function: getTextCss\n * \n * Private helper function to create SVG elements\n */\nmxText.prototype.getTextCss = function()\n{\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\tmxConstants.LINE_HEIGHT;\n\n\tvar css = 'display: inline-block; font-size: ' + this.size + 'px; ' +\n\t\t'font-family: ' + this.family + '; color: ' + this.color + '; line-height: ' + lh +\n\t\t'; pointer-events: ' + ((this.pointerEvents) ? 'all' : 'none') + '; ';\n\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tcss += 'font-weight: bold; ';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tcss += 'font-style: italic; ';\n\t}\n\t\n\tvar deco = [];\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tdeco.push('underline');\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\tdeco.push('line-through');\n\t}\n\t\n\tif (deco.length > 0)\n\t{\n\t\tcss += 'text-decoration: ' + deco.join(' ') + '; ';\n\t}\n\n\treturn css;\n};\n\n/**\n * Function: redrawHtmlShape\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShape = function()\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.redrawHtmlShapeWithCss3();\t\n\t}\n\telse\n\t{\n\t\tvar style = this.node.style;\n\t\n\t\t// Resets CSS styles\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.overflow = '';\n\t\tstyle.width = '';\n\t\tstyle.height = '';\n\t\t\n\t\tthis.updateValue();\n\t\tthis.updateFont(this.node);\n\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\t\n\t\tthis.offsetWidth = null;\n\t\tthis.offsetHeight = null;\n\t\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t{\n\t\t\tthis.updateHtmlFilter();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateHtmlTransform();\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHtmlShapeWithCss3\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShapeWithCss3 = function()\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar flex = 'position: absolute; left: ' + Math.round(this.bounds.x) + 'px; ' +\n\t\t'top: ' + Math.round(this.bounds.y) + 'px; pointer-events: none; ';\n\tvar block = this.getTextCss();\n\t\n\tmxSvgCanvas2D.createCss(w + 2, h, this.align, this.valign, this.wrap, this.overflow, this.clipped,\n\t\t(this.background != null) ? mxUtils.htmlEntities(this.background) : null,\n\t\t(this.border != null) ? mxUtils.htmlEntities(this.border) : null,\n\t\tflex, block, this.scale, mxUtils.bind(this, function(dx, dy, flex, item, block, ofl)\n\t{\n\t\tvar r = this.getTextRotation();\n\t\tvar tr = ((this.scale != 1) ? 'scale(' + this.scale + ') ' : '') +\n\t\t\t((r != 0) ? 'rotate(' + r + 'deg) ' : '') +\n\t\t\t((this.margin.x != 0 || this.margin.y != 0) ?\n\t\t\t\t'translate(' + (this.margin.x * 100) + '%,' +\n\t\t\t\t\t(this.margin.y * 100) + '%)' : '');\n\t\t\n\t\tif (tr != '')\n\t\t{\n\t\t\ttr = 'transform-origin: 0 0; transform: ' + tr + '; ';\n\t\t}\n\n\t\tif (ofl == '')\n\t\t{\n\t\t\tflex += item;\n\t\t\titem = 'display:inline-block; min-width: 100%; ' + tr;\n\t\t}\n\t\telse\n\t\t{\n\t\t\titem += tr;\n\t\t}\n\n\t\tif (this.opacity < 100)\n\t\t{\n\t\t\tblock += 'opacity: ' + (this.opacity / 100) + '; ';\n\t\t}\n\t\t\n\t\tthis.node.setAttribute('style', flex);\n\t\t\n\t\tvar html = (mxUtils.isNode(this.value)) ? this.value.outerHTML : this.getHtmlValue();\n\t\t\n\t\tif (this.node.firstChild == null)\n\t\t{\n\t\t\tthis.node.innerHTML = '<div><div>' + html +'</div></div>';\n\t\t}\n\n\t\tthis.node.firstChild.firstChild.setAttribute('style', block);\n\t\tthis.node.firstChild.setAttribute('style', item);\n\t}));\n};\n\n/**\n * Function: updateHtmlTransform\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateHtmlTransform = function()\n{\n\tvar theta = this.getTextRotation();\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\t\n\tif (theta != 0)\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', (-dx * 100) + '%' + ' ' + (-dy * 100) + '%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%) ' +\n\t\t\t'scale(' + this.scale + ') rotate(' + theta + 'deg)');\n\t}\n\telse\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', '0% 0%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'scale(' + this.scale + ') ' +\n\t\t\t'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%)');\n\t}\n\n\tstyle.left = Math.round(this.bounds.x - Math.ceil(dx * ((this.overflow != 'fill' &&\n\t\tthis.overflow != 'width') ? 3 : 1))) + 'px';\n\tstyle.top = Math.round(this.bounds.y - dy * ((this.overflow != 'fill') ? 3 : 1)) + 'px';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tstyle.opacity = this.opacity / 100;\n\t}\n\telse\n\t{\n\t\tstyle.opacity = '';\n\t}\n};\n\n/**\n * Function: updateInnerHtml\n * \n * Sets the inner HTML of the given element to the <value>.\n */\nmxText.prototype.updateInnerHtml = function(elt)\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\telt.innerHTML = this.value.outerHTML;\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\t// LATER: Can be cached in updateValue\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div>&nbsp;</div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tval = '<div style=\"display:inline-block;_display:inline;\">' + val + '</div>';\n\t\t\n\t\telt.innerHTML = val;\n\t}\n};\n\n/**\n * Function: updateHtmlFilter\n *\n * Rotated text rendering quality is bad for IE9 quirks/IE8 standards\n */\nmxText.prototype.updateHtmlFilter = function()\n{\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\tvar s = this.scale;\n\t\n\t// Resets filter before getting offsetWidth\n\tmxUtils.setOpacity(this.node, this.opacity);\n\t\n\t// Adds 1 to match table height in 1.x\n\tvar ow = 0;\n\tvar oh = 0;\n\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\tvar sizeDiv = this.node;\n\t\n\t// Fallback for hidden text rendering in IE quirks mode\n\tif (td != null)\n\t{\n\t\ttd.style.overflow = '';\n\t\ttd.style.height = '';\n\t\ttd.style.width = '';\n\t\t\n\t\tthis.updateFont(td);\n\t\tthis.updateSize(td, false);\n\t\tthis.updateInnerHtml(td);\n\t\t\n\t\tvar w = Math.round(this.bounds.width / this.scale);\n\n\t\tif (this.wrap && w > 0)\n\t\t{\n\t\t\ttd.style.whiteSpace = 'normal';\n\t\t\ttd.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\tow = w;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\tow = Math.min(ow, this.bounds.width);\n\t\t\t}\n\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttd.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\tsizeDiv = td;\n\t\t\n\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t{\n\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\n\t\t\tif (this.wrap && td.style.wordWrap == 'break-word')\n\t\t\t{\n\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t}\n\t\t}\n\n\t\t// Required to update the height of the text box after wrapping width is known \n\t\tif (!this.clipped && this.wrap && w > 0)\n\t\t{\n\t\t\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\t\n\t\toh = sizeDiv.offsetHeight + 2;\n\t\t\n\t\tif (mxClient.IS_QUIRKS && this.border != null && this.border != mxConstants.NONE)\n\t\t{\n\t\t\toh += 3;\n\t\t}\n\t}\n\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t{\n\t\tsizeDiv = sizeDiv.firstChild;\n\t\toh = sizeDiv.offsetHeight;\n\t}\n\n\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\n\tif (this.clipped)\n\t{\n\t\toh = Math.min(oh, this.bounds.height);\n\t}\n\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\t// Handles special case for live preview with no wrapper DIV and no textDiv\n\tif (this.overflow == 'fill')\n\t{\n\t\toh = h;\n\t\tow = w;\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\toh = sizeDiv.scrollHeight;\n\t\tow = w;\n\t}\n\t\n\t// Stores for later use\n\tthis.offsetWidth = ow;\n\tthis.offsetHeight = oh;\n\t\n\t// Simulates max-height CSS in quirks mode\n\tif (mxClient.IS_QUIRKS && (this.clipped || (this.overflow == 'width' && h > 0)))\n\t{\n\t\th = Math.min(h, oh);\n\t\tstyle.height = Math.round(h) + 'px';\n\t}\n\telse\n\t{\n\t\th = oh;\n\t}\n\n\tif (this.overflow != 'fill' && this.overflow != 'width')\n\t{\n\t\tif (this.clipped)\n\t\t{\n\t\t\tow = Math.min(w, ow);\n\t\t}\n\t\t\n\t\tw = ow;\n\n\t\t// Simulates max-width CSS in quirks mode\n\t\tif ((mxClient.IS_QUIRKS && this.clipped) || this.wrap)\n\t\t{\n\t\t\tstyle.width = Math.round(w) + 'px';\n\t\t}\n\t}\n\n\th *= s;\n\tw *= s;\n\t\n\t// Rotation case is handled via VML canvas\n\tvar rad = this.getTextRotation() * (Math.PI / 180);\n\t\n\t// Precalculate cos and sin for the rotation\n\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\trad %= 2 * Math.PI;\n\t\n\tif (rad < 0)\n\t{\n\t\trad += 2 * Math.PI;\n\t}\n\t\n\trad %= Math.PI;\n\t\n\tif (rad > Math.PI / 2)\n\t{\n\t\trad = Math.PI - rad;\n\t}\n\t\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(-rad);\n\n\tvar tx = w * -(dx + 0.5);\n\tvar ty = h * -(dy + 0.5);\n\n\tvar top_fix = (h - h * cos + w * sin) / 2 + real_sin * tx - real_cos * ty;\n\tvar left_fix = (w - w * cos + h * sin) / 2 - real_cos * tx - real_sin * ty;\n\t\n\tif (rad != 0)\n\t{\n\t\tvar f = 'progid:DXImageTransform.Microsoft.Matrix(M11=' + real_cos + ', M12='+\n\t\t\treal_sin + ', M21=' + (-real_sin) + ', M22=' + real_cos + ', sizingMethod=\\'auto expand\\')';\n\t\t\n\t\tif (style.filter != null && style.filter.length > 0)\n\t\t{\n\t\t\tstyle.filter += ' ' + f;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.filter = f;\n\t\t}\n\t}\n\t\n\t// Workaround for rendering offsets\n\tvar dy = 0;\n\t\n\tif (this.overflow != 'fill' && mxClient.IS_QUIRKS)\n\t{\n\t\tif (this.valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy -= 1;\n\t\t}\n\t\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdy += 1;\n\t\t}\n\t}\n\n\tstyle.zoom = s;\n\tstyle.left = Math.round(this.bounds.x + left_fix - w / 2) + 'px';\n\tstyle.top = Math.round(this.bounds.y + top_fix - h / 2 + dy) + 'px';\n};\n\n/**\n * Function: updateValue\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateValue = function()\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\tthis.node.innerHTML = '';\n\t\tthis.node.appendChild(this.value);\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tvar bg = (this.background != null && this.background != mxConstants.NONE) ? this.background : null;\n\t\tvar bd = (this.border != null && this.border != mxConstants.NONE) ? this.border : null;\n\n\t\tif (this.overflow == 'fill' || this.overflow == 'width')\n\t\t{\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tthis.node.style.backgroundColor = bg;\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tthis.node.style.border = '1px solid ' + bd;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar css = '';\n\t\t\t\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tcss += 'background-color:' + mxUtils.htmlEntities(bg) + ';';\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(bd) + ';';\n\t\t\t}\n\t\t\t\n\t\t\t// Wrapper DIV for background, zoom needed for inline in quirks\n\t\t\t// and to measure wrapped font sizes in all browsers\n\t\t\t// FIXME: Background size in quirks mode for wrapped text\n\t\t\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t\t\tmxConstants.LINE_HEIGHT;\n\t\t\tval = '<div style=\"zoom:1;' + css + 'display:inline-block;_display:inline;text-decoration:inherit;' +\n\t\t\t\t'padding-bottom:1px;padding-right:1px;line-height:' + lh + '\">' + val + '</div>';\n\t\t}\n\n\t\tthis.node.innerHTML = val;\n\t\t\n\t\t// Sets text direction\n\t\tvar divs = this.node.getElementsByTagName('div');\n\t\t\n\t\tif (divs.length > 0)\n\t\t{\n\t\t\tvar dir = this.textDirection;\n\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t\t{\n\t\t\t\tdir = this.getAutoDirection();\n\t\t\t}\n\t\t\t\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].setAttribute('dir', dir);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].removeAttribute('dir');\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateFont\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateFont = function(node)\n{\n\tvar style = node.style;\n\t\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\tstyle.fontSize = this.size + 'px';\n\tstyle.fontFamily = this.family;\n\tstyle.verticalAlign = 'top';\n\tstyle.color = this.color;\n\t\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\telse\n\t{\n\t\tstyle.fontWeight = '';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\telse\n\t{\n\t\tstyle.fontStyle = '';\n\t}\n\t\n\tvar txtDecor = [];\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttxtDecor.push('underline');\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\ttxtDecor.push('line-through');\n\t}\n\t\n\tstyle.textDecoration = txtDecor.join(' ');\n\t\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tstyle.textAlign = 'center';\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstyle.textAlign = 'right';\n\t}\n\telse\n\t{\n\t\tstyle.textAlign = 'left';\n\t}\n};\n\n/**\n * Function: updateSize\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateSize = function(node, enableWrap)\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar style = node.style;\n\t\n\t// NOTE: Do not use maxWidth here because wrapping will\n\t// go wrong if the cell is outside of the viewable area\n\tif (this.clipped)\n\t{\n\t\tstyle.overflow = 'hidden';\n\t\t\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tstyle.maxHeight = h + 'px';\n\t\t\tstyle.maxWidth = w + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.width = w + 'px';\n\t\t}\n\t}\n\telse if (this.overflow == 'fill')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.height = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.maxHeight = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\t\n\tif (this.wrap && w > 0)\n\t{\n\t\tstyle.wordWrap = mxConstants.WORD_WRAP;\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.width = w + 'px';\n\n\t\tif (enableWrap && this.overflow != 'fill' && this.overflow != 'width')\n\t\t{\n\t\t\tvar sizeDiv = node;\n\t\t\t\n\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t{\n\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t\n\t\t\t\tif (node.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar tmp = sizeDiv.offsetWidth;\n\t\t\t\n\t\t\t// Workaround for text measuring in hidden containers\n\t\t\tif (tmp == 0)\n\t\t\t{\n\t\t\t\tvar prev = node.parentNode;\n\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(node);\n\t\t\t\ttmp = sizeDiv.offsetWidth;\n\t\t\t\tnode.style.visibility = '';\n\t\t\t\tprev.appendChild(node);\n\t\t\t}\n\n\t\t\ttmp += 3;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\ttmp = Math.min(tmp, w);\n\t\t\t}\n\t\t\t\n\t\t\tstyle.width = tmp + 'px';\n\t\t}\n\t}\n\telse\n\t{\n\t\tstyle.whiteSpace = 'nowrap';\n\t}\n};\n\n/**\n * Function: getMargin\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateMargin = function()\n{\n\tthis.margin = mxUtils.getAlignmentAsPoint(this.align, this.valign);\n};\n\n/**\n * Function: getSpacing\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.getSpacing = function()\n{\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tdx = (this.spacingLeft - this.spacingRight) / 2;\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tdx = -this.spacingRight - this.baseSpacingRight;\n\t}\n\telse\n\t{\n\t\tdx = this.spacingLeft + this.baseSpacingLeft;\n\t}\n\n\tif (this.valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tdy = (this.spacingTop - this.spacingBottom) / 2;\n\t}\n\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = -this.spacingBottom - this.baseSpacingBottom;;\n\t}\n\telse\n\t{\n\t\tdy = this.spacingTop + this.baseSpacingTop;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n__mxOutput.mxText = typeof mxText !== 'undefined' ? mxText : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTriangle\n * \n * Implementation of the triangle shape.\n * \n * Constructor: mxTriangle\n *\n * Constructs a new triangle shape.\n */\nfunction mxTriangle()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxTriangle, mxActor);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxTriangle.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxTriangle.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0, 0), new mxPoint(w, 0.5 * h), new mxPoint(0, h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxTriangle = typeof mxTriangle !== 'undefined' ? mxTriangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHexagon\n * \n * Implementation of the hexagon shape.\n * \n * Constructor: mxHexagon\n *\n * Constructs a new hexagon shape.\n */\nfunction mxHexagon()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxHexagon, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxHexagon.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0.25 * w, 0), new mxPoint(0.75 * w, 0), new mxPoint(w, 0.5 * h), new mxPoint(0.75 * w, h),\n\t                   new mxPoint(0.25 * w, h), new mxPoint(0, 0.5 * h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxHexagon = typeof mxHexagon !== 'undefined' ? mxHexagon : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLine\n *\n * Extends <mxShape> to implement a horizontal line shape.\n * This shape is registered under <mxConstants.SHAPE_LINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLine\n *\n * Constructs a new line shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLine(bounds, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLine, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxLine.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar mid = y + h / 2;\n\n\tc.begin();\n\tc.moveTo(x, mid);\n\tc.lineTo(x + w, mid);\n\tc.stroke();\n};\n\n__mxOutput.mxLine = typeof mxLine !== 'undefined' ? mxLine : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageShape\n *\n * Extends <mxShape> to implement an image shape. This shape is registered\n * under <mxConstants.SHAPE_IMAGE> in <mxCellRenderer>.\n * \n * Constructor: mxImageShape\n * \n * Constructs a new image shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * image - String that specifies the URL of the image. This is stored in\n * <image>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 0. This is stored in <strokewidth>.\n */\nfunction mxImageShape(bounds, image, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.image = image;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.shadow = false;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxImageShape, mxRectangleShape);\n\n/**\n * Variable: preserveImageAspect\n *\n * Switch to preserve image aspect. Default is true.\n */\nmxImageShape.prototype.preserveImageAspect = true;\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxImageShape.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: apply\n * \n * Overrides <mxShape.apply> to replace the fill and stroke colors with the\n * respective values from <mxConstants.STYLE_IMAGE_BACKGROUND> and\n * <mxConstants.STYLE_IMAGE_BORDER>.\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_IMAGE_BACKGROUND> => fill\n * - <mxConstants.STYLE_IMAGE_BORDER> => stroke\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxImageShape.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tthis.fill = null;\n\tthis.stroke = null;\n\tthis.gradient = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.preserveImageAspect = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_ASPECT, 1) == 1;\n\t\t\n\t\t// Legacy support for imageFlipH/V\n\t\tthis.flipH = this.flipH || mxUtils.getValue(this.style, 'imageFlipH', 0) == 1;\n\t\tthis.flipV = this.flipV || mxUtils.getValue(this.style, 'imageFlipV', 0) == 1;\n\t}\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxImageShape.prototype.isHtmlAllowed = function()\n{\n\treturn !this.preserveImageAspect;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxImageShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\n\treturn node;\n};\n\n/**\n * Function: isRoundable\n * \n * Disables inherited roundable support.\n */\nmxImageShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn false;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic background painting implementation.\n */\nmxImageShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, null);\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (fill != null)\n\t\t{\n\t\t\t// Stroke rendering required for shadow\n\t\t\tc.setFillColor(fill);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.fillAndStroke();\n\t\t}\n\n\t\t// FlipH/V are implicit via mxShape.updateTransform\n\t\tc.image(x, y, w, h, this.image, this.preserveImageAspect, false, false);\n\t\t\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (stroke != null)\n\t\t{\n\t\t\tc.setShadow(false);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.stroke();\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxRectangleShape.prototype.paintBackground.apply(this, arguments);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Overrides <mxShape.redraw> to preserve the aspect ratio of images.\n */\nmxImageShape.prototype.redrawHtmlShape = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = Math.max(0, Math.round(this.bounds.width)) + 'px';\n\tthis.node.style.height = Math.max(0, Math.round(this.bounds.height)) + 'px';\n\tthis.node.innerHTML = '';\n\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, '');\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, '');\n\t\tthis.node.style.backgroundColor = fill;\n\t\tthis.node.style.borderColor = stroke;\n\t\t\n\t\t// VML image supports PNG in IE6\n\t\tvar useVml = mxClient.IS_IE6 || ((document.documentMode == null || document.documentMode <= 8) && this.rotation != 0);\n\t\tvar img = document.createElement((useVml) ? mxClient.VML_PREFIX + ':image' : 'img');\n\t\timg.setAttribute('border', '0');\n\t\timg.style.position = 'absolute';\n\t\timg.src = this.image;\n\n\t\tvar filter = (this.opacity < 100) ? 'alpha(opacity=' + this.opacity + ')' : '';\n\t\tthis.node.style.filter = filter;\n\t\t\n\t\tif (this.flipH && this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2)';\n\t\t}\n\t\telse if (this.flipH)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(mirror=1)';\n\t\t}\n\t\telse if (this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)';\n\t\t}\n\n\t\tif (img.style.filter != filter)\n\t\t{\n\t\t\timg.style.filter = filter;\n\t\t}\n\n\t\tif (img.nodeName == 'image')\n\t\t{\n\t\t\timg.style.rotation = this.rotation;\n\t\t}\n\t\telse if (this.rotation != 0)\n\t\t{\n\t\t\t// LATER: Add flipV/H support\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', 'rotate(' + this.rotation + 'deg)');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', '');\n\t\t}\n\n\t\t// Known problem: IE clips top line of image for certain angles\n\t\timg.style.width = this.node.style.width;\n\t\timg.style.height = this.node.style.height;\n\t\t\n\t\tthis.node.style.backgroundImage = '';\n\t\tthis.node.appendChild(img);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(this.node);\n\t}\n};\n\n__mxOutput.mxImageShape = typeof mxImageShape !== 'undefined' ? mxImageShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLabel\n *\n * Extends <mxShape> to implement an image shape with a label.\n * This shape is registered under <mxConstants.SHAPE_LABEL> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLabel\n *\n * Constructs a new label shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLabel(bounds, fill, stroke, strokewidth)\n{\n\tmxRectangleShape.call(this, bounds, fill, stroke, strokewidth);\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLabel, mxRectangleShape);\n\n/**\n * Variable: imageSize\n *\n * Default width and height for the image. Default is\n * <mxConstants.DEFAULT_IMAGESIZE>.\n */\nmxLabel.prototype.imageSize = mxConstants.DEFAULT_IMAGESIZE;\n\n/**\n * Variable: spacing\n *\n * Default value for image spacing. Default is 2.\n */\nmxLabel.prototype.spacing = 2;\n\n/**\n * Variable: indicatorSize\n *\n * Default width and height for the indicicator. Default is 10.\n */\nmxLabel.prototype.indicatorSize = 10;\n\n/**\n * Variable: indicatorSpacing\n *\n * Default spacing between image and indicator. Default is 2.\n */\nmxLabel.prototype.indicatorSpacing = 2;\n\n/**\n * Function: init\n *\n * Initializes the shape and the <indicator>.\n */\nmxLabel.prototype.init = function(container)\n{\n\tmxShape.prototype.init.apply(this, arguments);\n\n\tif (this.indicatorShape != null)\n\t{\n\t\tthis.indicator = new this.indicatorShape();\n\t\tthis.indicator.dialect = this.dialect;\n\t\tthis.indicator.init(this.node);\n\t}\n};\n\n/**\n * Function: redraw\n *\n * Reconfigures this shape. This will update the colors of the indicator\n * and reconfigure it if required.\n */\nmxLabel.prototype.redraw = function()\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.fill = this.indicatorColor;\n\t\tthis.indicator.stroke = this.indicatorStrokeColor;\n\t\tthis.indicator.gradient = this.indicatorGradientColor;\n\t\tthis.indicator.direction = this.indicatorDirection;\n\t\tthis.indicator.redraw();\n\t}\n\t\n\tmxShape.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient and\n * no indicator shape.\n */\nmxLabel.prototype.isHtmlAllowed = function()\n{\n\treturn mxRectangleShape.prototype.isHtmlAllowed.apply(this, arguments) &&\n\t\tthis.indicatorColor == null && this.indicatorShape == null;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tthis.paintImage(c, x, y, w, h);\n\tthis.paintIndicator(c, x, y, w, h);\n\t\n\tmxRectangleShape.prototype.paintForeground.apply(this, arguments);\n};\n\n/**\n * Function: paintImage\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintImage = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.image, false, false, false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getImageBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_WIDTH, mxConstants.DEFAULT_IMAGESIZE);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_HEIGHT, mxConstants.DEFAULT_IMAGESIZE);\n\tvar spacing = mxUtils.getNumber(this.style, mxConstants.STYLE_SPACING, this.spacing) + 5;\n\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\n\tif (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n\n/**\n * Function: paintIndicator\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintIndicator = function(c, x, y, w, h)\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tthis.indicator.paint(c);\n\t}\n\telse if (this.indicatorImage != null)\n\t{\n\t\tvar bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImage, false, false, false);\n\t}\n};\n\n/**\n * Function: getIndicatorBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getIndicatorBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_WIDTH, this.indicatorSize);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_HEIGHT, this.indicatorSize);\n\tvar spacing = this.spacing + 5;\t\t\n\t\n\tif (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse if (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\t\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n/**\n * Function: redrawHtmlShape\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.redrawHtmlShape = function()\n{\n\tmxRectangleShape.prototype.redrawHtmlShape.apply(this, arguments);\n\t\n\t// Removes all children\n\twhile(this.node.hasChildNodes())\n\t{\n\t\tthis.node.removeChild(this.node.lastChild);\n\t}\n\t\n\tif (this.image != null)\n\t{\n\t\tvar node = document.createElement('img');\n\t\tnode.style.position = 'relative';\n\t\tnode.setAttribute('border', '0');\n\t\t\n\t\tvar bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t\tbounds.x -= this.bounds.x;\n\t\tbounds.y -= this.bounds.y;\n\n\t\tnode.style.left = Math.round(bounds.x) + 'px';\n\t\tnode.style.top = Math.round(bounds.y) + 'px';\n\t\tnode.style.width = Math.round(bounds.width) + 'px';\n\t\tnode.style.height = Math.round(bounds.height) + 'px';\n\t\t\n\t\tnode.src = this.image;\n\t\t\n\t\tthis.node.appendChild(node);\n\t}\n};\n\n__mxOutput.mxLabel = typeof mxLabel !== 'undefined' ? mxLabel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCylinder\n *\n * Extends <mxShape> to implement an cylinder shape. If a\n * custom shape with one filled area and an overlay path is\n * needed, then this shape's <redrawPath> should be overridden.\n * This shape is registered under <mxConstants.SHAPE_CYLINDER>\n * in <mxCellRenderer>.\n * \n * Constructor: mxCylinder\n *\n * Constructs a new cylinder shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCylinder(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxCylinder, mxShape);\n\n/**\n * Variable: maxHeight\n *\n * Defines the maximum height of the top and bottom part\n * of the cylinder shape.\n */\nmxCylinder.prototype.maxHeight = 40;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Sets stroke tolerance to 0 for SVG.\n */\nmxCylinder.prototype.svgStrokeTolerance = 0;\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxCylinder.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h, false);\n\tc.fillAndStroke();\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tc.begin();\n\t\tthis.redrawPath(c, x, y, w, h, true);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.getCylinderSize = function(x, y, w, h)\n{\n\treturn Math.min(this.maxHeight, Math.round(h / 5));\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.redrawPath = function(c, x, y, w, h, isForeground)\n{\n\tvar dy = this.getCylinderSize(x, y, w, h);\n\t\n\tif ((isForeground && this.fill != null) || (!isForeground && this.fill == null))\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, 2 * dy, w, 2 * dy, w, dy);\n\t\t\n\t\t// Needs separate shapes for correct hit-detection\n\t\tif (!isForeground)\n\t\t{\n\t\t\tc.stroke();\n\t\t\tc.begin();\n\t\t}\n\t}\n\t\n\tif (!isForeground)\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, -dy / 3, w, -dy / 3, w, dy);\n\t\tc.lineTo(w, h - dy);\n\t\tc.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);\n\t\tc.close();\n\t}\n};\n\n__mxOutput.mxCylinder = typeof mxCylinder !== 'undefined' ? mxCylinder : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnector\n * \n * Extends <mxShape> to implement a connector shape. The connector\n * shape allows for arrow heads on either side.\n * \n * This shape is registered under <mxConstants.SHAPE_CONNECTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxConnector\n * \n * Constructs a new connector shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * Default is 'black'.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxConnector(points, stroke, strokewidth)\n{\n\tmxPolyline.call(this, points, stroke, strokewidth);\n};\n\n/**\n * Extends mxPolyline.\n */\nmxUtils.extend(mxConnector, mxPolyline);\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxConnector.prototype.updateBoundingBox = function()\n{\n\tthis.useSvgBoundingBox = this.style != null && this.style[mxConstants.STYLE_CURVED] == 1;\n\tmxShape.prototype.updateBoundingBox.apply(this, arguments);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// The indirection via functions for markers is needed in\n\t// order to apply the offsets before painting the line and\n\t// paint the markers after painting the line.\n\tvar sourceMarker = this.createMarker(c, pts, true);\n\tvar targetMarker = this.createMarker(c, pts, false);\n\n\tmxPolyline.prototype.paintEdgeShape.apply(this, arguments);\n\t\n\t// Disables shadows, dashed styles and fixes fill color for markers\n\tc.setFillColor(this.stroke);\n\tc.setShadow(false);\n\tc.setDashed(false);\n\t\n\tif (sourceMarker != null)\n\t{\n\t\tsourceMarker();\n\t}\n\t\n\tif (targetMarker != null)\n\t{\n\t\ttargetMarker();\n\t}\n};\n\n/**\n * Function: createMarker\n * \n * Prepares the marker by adding offsets in pts and returning a function to\n * paint the marker.\n */\nmxConnector.prototype.createMarker = function(c, pts, source)\n{\n\tvar result = null;\n\tvar n = pts.length;\n\tvar type = mxUtils.getValue(this.style, (source) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW);\n\tvar p0 = (source) ? pts[1] : pts[n - 2];\n\tvar pe = (source) ? pts[0] : pts[n - 1];\n\t\n\tif (type != null && p0 != null && pe != null)\n\t{\n\t\tvar count = 1;\n\t\t\n\t\t// Uses next non-overlapping point\n\t\twhile (count < n - 1 && Math.round(p0.x - pe.x) == 0 && Math.round(p0.y - pe.y) == 0)\n\t\t{\n\t\t\tp0 = (source) ? pts[1 + count] : pts[n - 2 - count];\n\t\t\tcount++;\n\t\t}\n\t\n\t\t// Computes the norm and the inverse norm\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\n\t\tvar dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\n\t\tvar unitX = dx / dist;\n\t\tvar unitY = dy / dist;\n\t\n\t\tvar size = mxUtils.getNumber(this.style, (source) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\n\t\t// Allow for stroke width in the end point used and the \n\t\t// orthogonal vectors describing the direction of the marker\n\t\tvar filled = this.style[(source) ? mxConstants.STYLE_STARTFILL : mxConstants.STYLE_ENDFILL] != 0;\n\t\t\n\t\tresult = mxMarker.createMarker(c, this, type, pe, unitX, unitY, size, source, this.strokewidth, filled);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\t// Adds marker sizes\n\tvar size = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_MARKERSIZE) + 1;\n\t}\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = Math.max(size, mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE)) + 1;\n\t}\n\t\n\tbbox.grow(size * this.scale);\n};\n\n__mxOutput.mxConnector = typeof mxConnector !== 'undefined' ? mxConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlane\n *\n * Extends <mxShape> to implement a swimlane shape. This shape is registered\n * under <mxConstants.SHAPE_SWIMLANE> in <mxCellRenderer>. Use the\n * <mxConstants.STYLE_STYLE_STARTSIZE> to define the size of the title\n * region, <mxConstants.STYLE_SWIMLANE_FILLCOLOR> for the content area fill,\n * <mxConstants.STYLE_SEPARATORCOLOR> to draw an additional vertical separator\n * and <mxConstants.STYLE_SWIMLANE_LINE> to hide the line between the title\n * region and the content area. The <mxConstants.STYLE_HORIZONTAL> affects\n * the orientation of this shape, not only its label.\n * \n * Constructor: mxSwimlane\n *\n * Constructs a new swimlane shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxSwimlane(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxSwimlane, mxShape);\n\n/**\n * Variable: imageSize\n *\n * Default imagewidth and imageheight if an image but no imagewidth\n * and imageheight are defined in the style. Value is 16.\n */\nmxSwimlane.prototype.imageSize = 16;\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxSwimlane.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getTitleSize = function()\n{\n\treturn Math.max(0, mxUtils.getValue(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getLabelBounds = function(rect)\n{\n\tvar start = this.getTitleSize();\n\tvar bounds = new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n\tvar horizontal = this.isHorizontal();\n\t\n\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t// East is default\n\tvar shapeVertical = (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n\tvar realHorizontal = horizontal == !shapeVertical;\n\t\n\tvar realFlipH = !realHorizontal && flipH != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\tvar realFlipV = realHorizontal && flipV != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\n\t// Shape is horizontal\n\tif (!shapeVertical)\n\t{\n\t\tvar tmp = Math.min(bounds.height, start * this.scale);\n\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.y += bounds.height - tmp;\n\t\t}\n\n\t\tbounds.height = tmp;\n\t}\n\telse\n\t{\n\t\tvar tmp = Math.min(bounds.width, start * this.scale);\n\t\t\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.x += bounds.width - tmp;\t\n\t\t}\n\n\t\tbounds.width = tmp;\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t\treturn new mxRectangle(x, y, w, start);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t\treturn new mxRectangle(x, y, start, h);\n\t}\n};\n\n/**\n * Function: getArcSize\n * \n * Returns the arcsize for the swimlane.\n */\nmxSwimlane.prototype.getArcSize = function(w, h, start)\n{\n\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\n\treturn start * f * 3; \n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.isHorizontal = function()\n{\n\treturn mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_FILLCOLOR, mxConstants.NONE);\n\tvar swimlaneLine = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_LINE, 1) == 1;\n\tvar r = 0;\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t}\n\t\n\tc.translate(x, y);\n\t\n\tif (!this.isRounded)\n\t{\n\t\tthis.paintSwimlane(c, x, y, w, h, start, fill, swimlaneLine);\n\t}\n\telse\n\t{\n\t\tr = this.getArcSize(w, h, start);\n\t\tr = Math.min(((this.isHorizontal()) ? h : w) - start, Math.min(start, r));\n\t\tthis.paintRoundedSwimlane(c, x, y, w, h, start, r, fill, swimlaneLine);\n\t}\n\t\n\tvar sep = mxUtils.getValue(this.style, mxConstants.STYLE_SEPARATORCOLOR, mxConstants.NONE);\n\tthis.paintSeparator(c, x, y, w, h, start, sep);\n\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x - x, bounds.y - y, bounds.width, bounds.height,\n\t\t\t\tthis.image, false, false, false);\n\t}\n\t\n\tif (this.glass)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintGlassEffect(c, 0, 0, w, start, r);\n\t}\n};\n\n/**\n * Function: paintSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintSwimlane = function(c, x, y, w, h, start, fill, swimlaneLine)\n{\n\tc.begin();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(w, 0);\n\t\tc.lineTo(w, start);\n\t\tc.fillAndStroke();\n\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(0, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(start, h);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintRoundedSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintRoundedSwimlane = function(c, x, y, w, h, start, r, fill, swimlaneLine)\n{\n\tc.begin();\n\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(w, start);\n\t\tc.lineTo(w, r);\n\t\tc.quadTo(w, 0, w - Math.min(w / 2, r), 0);\n\t\tc.lineTo(Math.min(w / 2, r), 0);\n\t\tc.quadTo(0, 0, 0, r);\n\t\tc.lineTo(0, start);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h - r);\n\t\t\tc.quadTo(0, h, Math.min(w / 2, r), h);\n\t\t\tc.lineTo(w - Math.min(w / 2, r), h);\n\t\t\tc.quadTo(w, h, w, h - r);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(r, 0);\n\t\tc.quadTo(0, 0, 0, Math.min(h / 2, r));\n\t\tc.lineTo(0, h - Math.min(h / 2, r));\n\t\tc.quadTo(0, h, r, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, h);\n\t\t\tc.lineTo(w - r, h);\n\t\t\tc.quadTo(w, h, w, h - Math.min(h / 2, r));\n\t\t\tc.lineTo(w, Math.min(h / 2, r));\n\t\t\tc.quadTo(w, 0, w - r, 0);\n\t\t\tc.lineTo(start, 0);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintDivider\n *\n * Paints the divider between swimlane title and content area.\n */\nmxSwimlane.prototype.paintDivider = function(c, x, y, w, h, start, shadow)\n{\n\tif (!shadow)\n\t{\n\t\tc.setShadow(false);\n\t}\n\n\tc.begin();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(w, start);\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(start, h);\n\t}\n\n\tc.stroke();\n};\n\n/**\n * Function: paintSeparator\n *\n * Paints the vertical or horizontal separator line between swimlanes.\n */\nmxSwimlane.prototype.paintSeparator = function(c, x, y, w, h, start, color)\n{\n\tif (color != mxConstants.NONE)\n\t{\n\t\tc.setStrokeColor(color);\n\t\tc.setDashed(true);\n\t\tc.begin();\n\t\t\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tc.moveTo(w, start);\n\t\t\tc.lineTo(w, h);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t\tc.setDashed(false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.getImageBounds = function(x, y, w, h)\n{\n\tif (this.isHorizontal())\n\t{\n\t\treturn new mxRectangle(x + w - this.imageSize, y, this.imageSize, this.imageSize);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangle(x, y, this.imageSize, this.imageSize);\n\t}\n};\n\n__mxOutput.mxSwimlane = typeof mxSwimlane !== 'undefined' ? mxSwimlane : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphLayout\n * \n * Base class for all layout algorithms in mxGraph. Main public functions are\n * <moveCell> for handling a moved cell within a layouted parent, and <execute> for\n * running the layout on a given parent cell.\n *\n * Known Subclasses:\n *\n * <mxCircleLayout>, <mxCompactTreeLayout>, <mxCompositeLayout>,\n * <mxFastOrganicLayout>, <mxParallelEdgeLayout>, <mxPartitionLayout>,\n * <mxStackLayout>\n * \n * Constructor: mxGraphLayout\n *\n * Constructs a new layout using the given layouts.\n *\n * Arguments:\n * \n * graph - Enclosing \n */\nfunction mxGraphLayout(graph)\n{\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphLayout.prototype.graph = null;\n\n/**\n * Variable: useBoundingBox\n *\n * Boolean indicating if the bounding box of the label should be used if\n * its available. Default is true.\n */\nmxGraphLayout.prototype.useBoundingBox = true;\n\n/**\n * Variable: parent\n *\n * The parent cell of the layout, if any\n */\nmxGraphLayout.prototype.parent = null;\n\n/**\n * Function: moveCell\n * \n * Notified when a cell is being moved in a parent that has automatic\n * layout to update the cell state (eg. index) so that the outcome of the\n * layout will position the vertex as close to the point (x, y) as\n * possible.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * x - X-coordinate of the new cell location.\n * y - Y-coordinate of the new cell location.\n */\nmxGraphLayout.prototype.moveCell = function(cell, x, y) { };\n\n/**\n * Function: resizeCell\n * \n * Notified when a cell is being resized in a parent that has automatic\n * layout to update the other cells in the layout.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * bounds - <mxRectangle> that represents the new cell bounds.\n */\nmxGraphLayout.prototype.resizeCell = function(cell, bounds) { };\n\n/**\n * Function: execute\n * \n * Executes the layout algorithm for the children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be layed out.\n */\nmxGraphLayout.prototype.execute = function(parent) { };\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxGraphLayout.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: getConstraint\n * \n * Returns the constraint for the given key and cell. The optional edge and\n * source arguments are used to return inbound and outgoing routing-\n * constraints for the given edge and vertex. This implementation always\n * returns the value for the given key in the style of the given cell.\n * \n * Parameters:\n * \n * key - Key of the constraint to be returned.\n * cell - <mxCell> whose constraint should be returned.\n * edge - Optional <mxCell> that represents the connection whose constraint\n * should be returned. Default is null.\n * source - Optional boolean that specifies if the connection is incoming\n * or outgoing. Default is null.\n */\nmxGraphLayout.prototype.getConstraint = function(key, cell, edge, source)\n{\n\treturn this.graph.getCurrentCellStyle(cell)[key]\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> of cell paths for the visited cells.\n */\nmxGraphLayout.traverse = function(vertex, directed, func, edge, visited)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.graph.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.graph.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.graph.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || isSource)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.graph.view.getVisibleTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n * traverseAncestors - boolean whether to \n */\nmxGraphLayout.prototype.isAncestor = function(parent, child, traverseAncestors)\n{\n\tif (!traverseAncestors)\n\t{\n\t\treturn (this.graph.model.getParent(child) == parent);\n\t}\t\n\t\n\tif (child == parent)\n\t{\n\t\treturn false;\n\t}\n\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.graph.model.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: isVertexMovable\n * \n * Returns a boolean indicating if the given <mxCell> is movable or\n * bendable by the algorithm. This implementation returns true if the given\n * cell is movable in the graph.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraphLayout.prototype.isVertexMovable = function(cell)\n{\n\treturn this.graph.isCellMovable(cell);\n};\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn !this.graph.getModel().isVertex(vertex) ||\n\t\t!this.graph.isCellVisible(vertex);\n};\n\n/**\n * Function: isEdgeIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * cell - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isEdgeIgnored = function(edge)\n{\n\tvar model = this.graph.getModel();\n\t\n\treturn !model.isEdge(edge) ||\n\t\t!this.graph.isCellVisible(edge) ||\n\t\tmodel.getTerminal(edge, true) == null ||\n\t\tmodel.getTerminal(edge, false) == null;\n};\n\n/**\n * Function: setEdgeStyleEnabled\n * \n * Disables or enables the edge style of the given edge.\n */\nmxGraphLayout.prototype.setEdgeStyleEnabled = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_NOEDGESTYLE,\n\t\t\t(value) ? '0' : '1', [edge]);\n};\n\n/**\n * Function: setOrthogonalEdge\n * \n * Disables or enables orthogonal end segments of the given edge.\n */\nmxGraphLayout.prototype.setOrthogonalEdge = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_ORTHOGONAL,\n\t\t\t(value) ? '1' : '0', [edge]);\n};\n\n/**\n * Function: getParentOffset\n * \n * Determines the offset of the given parent to the parent\n * of the layout\n */\nmxGraphLayout.prototype.getParentOffset = function(parent)\n{\n\tvar result = new mxPoint();\n\n\tif (parent != null && parent != this.parent)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isAncestor(this.parent, parent))\n\t\t{\n\t\t\tvar parentGeo = model.getGeometry(parent);\n\n\t\t\twhile (parent != this.parent)\n\t\t\t{\n\t\t\t\tresult.x = result.x + parentGeo.x;\n\t\t\t\tresult.y = result.y + parentGeo.y;\n\n\t\t\t\tparent = model.getParent(parent);;\n\t\t\t\tparentGeo = model.getGeometry(parent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: setEdgePoints\n * \n * Replaces the array of mxPoints in the geometry of the given edge\n * with the given array of mxPoints.\n */\nmxGraphLayout.prototype.setEdgePoints = function(edge, points)\n{\n\tif (edge != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar geometry = model.getGeometry(edge);\n\n\t\tif (geometry == null)\n\t\t{\n\t\t\tgeometry = new mxGeometry();\n\t\t\tgeometry.setRelative(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t}\n\n\t\tif (this.parent != null && points != null)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tpoints[i].x = points[i].x - parentOffset.x;\n\t\t\t\tpoints[i].y = points[i].y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tgeometry.points = points;\n\t\tmodel.setGeometry(edge, geometry);\n\t}\n};\n\n/**\n * Function: setVertexLocation\n * \n * Sets the new position of the given cell taking into account the size of\n * the bounding box if <useBoundingBox> is true. The change is only carried\n * out if the new location is not equal to the existing location, otherwise\n * the geometry is not replaced with an updated instance. The new or old\n * bounds are returned (including overlapping labels).\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry is to be set.\n * x - Integer that defines the x-coordinate of the new location.\n * y - Integer that defines the y-coordinate of the new location.\n */\nmxGraphLayout.prototype.setVertexLocation = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(cell);\n\tvar result = null;\n\t\n\tif (geometry != null)\n\t{\n\t\tresult = new mxRectangle(x, y, geometry.width, geometry.height);\n\t\t\n\t\t// Checks for oversize labels and shifts the result\n\t\t// TODO: Use mxUtils.getStringSize for label bounds\n\t\tif (this.useBoundingBox)\n\t\t{\n\t\t\tvar state = this.graph.getView().getState(cell);\n\t\t\t\n\t\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar box = state.text.boundingBox;\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.x < state.x)\n\t\t\t\t{\n\t\t\t\t\tx += (state.x - box.x) / scale;\n\t\t\t\t\tresult.width = box.width;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y < state.y)\n\t\t\t\t{\n\t\t\t\t\ty += (state.y - box.y) / scale;\n\t\t\t\t\tresult.height = box.height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.parent != null)\n\t\t{\n\t\t\tvar parent = model.getParent(cell);\n\n\t\t\tif (parent != null && parent != this.parent)\n\t\t\t{\n\t\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\t\tx = x - parentOffset.x;\n\t\t\t\ty = y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tif (geometry.x != x || geometry.y != y)\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t\tgeometry.x = x;\n\t\t\tgeometry.y = y;\n\t\t\t\n\t\t\tmodel.setGeometry(cell, geometry);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVertexBounds\n * \n * Returns an <mxRectangle> that defines the bounds of the given cell or\n * the bounding box if <useBoundingBox> is true.\n */\nmxGraphLayout.prototype.getVertexBounds = function(cell)\n{\n\tvar geo = this.graph.getModel().getGeometry(cell);\n\n\t// Checks for oversize label bounding box and corrects\n\t// the return value accordingly\n\t// TODO: Use mxUtils.getStringSize for label bounds\n\tif (this.useBoundingBox)\n\t{\n\t\tvar state = this.graph.getView().getState(cell);\n\n\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tvar scale = this.graph.getView().scale;\n\t\t\tvar tmp = state.text.boundingBox;\n\n\t\t\tvar dx0 = Math.max(state.x - tmp.x, 0) / scale;\n\t\t\tvar dy0 = Math.max(state.y - tmp.y, 0) / scale;\n\t\t\tvar dx1 = Math.max((tmp.x + tmp.width) - (state.x + state.width), 0) / scale;\n  \t\t\tvar dy1 = Math.max((tmp.y + tmp.height) - (state.y + state.height), 0) / scale;\n\n\t\t\tgeo = new mxRectangle(geo.x - dx0, geo.y - dy0, geo.width + dx0 + dx1, geo.height + dy0 + dy1);\n\t\t}\n\t}\n\n\tif (this.parent != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tgeo = geo.clone();\n\n\t\tif (parent != null && parent != this.parent)\n\t\t{\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\t\t\tgeo.x = geo.x + parentOffset.x;\n\t\t\tgeo.y = geo.y + parentOffset.y;\n\t\t}\n\t}\n\n\treturn new mxRectangle(geo.x, geo.y, geo.width, geo.height);\n};\n\n/**\n * Function: arrangeGroups\n * \n * Shortcut to <mxGraph.updateGroupBounds> with moveGroup set to true.\n */\nmxGraphLayout.prototype.arrangeGroups = function(cells, border, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\treturn this.graph.updateGroupBounds(cells, border, true, topBorder, rightBorder, bottomBorder, leftBorder);\n};\n\n/**\n * Class: WeightedCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the weighted\n * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==\n * (x.equals(y))\n *\n * Constructor: WeightedCellSorter\n * \n * Constructs a new weighted cell sorted for the given cell and weight.\n */\nfunction WeightedCellSorter(cell, weightedValue)\n{\n\tthis.cell = cell;\n\tthis.weightedValue = weightedValue;\n};\n\n/**\n * Variable: weightedValue\n * \n * The weighted value of the cell stored.\n */\nWeightedCellSorter.prototype.weightedValue = 0;\n\n/**\n * Variable: nudge\n * \n * Whether or not to flip equal weight values.\n */\nWeightedCellSorter.prototype.nudge = false;\n\n/**\n * Variable: visited\n * \n * Whether or not this cell has been visited in the current assignment.\n */\nWeightedCellSorter.prototype.visited = false;\n\n/**\n * Variable: rankIndex\n * \n * The index this cell is in the model rank.\n */\nWeightedCellSorter.prototype.rankIndex = null;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated.\n */\nWeightedCellSorter.prototype.cell = null;\n\n/**\n * Function: compare\n * \n * Compares two WeightedCellSorters.\n */\nWeightedCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.weightedValue > a.weightedValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.weightedValue < a.weightedValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (b.nudge)\n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxGraphLayout = typeof mxGraphLayout !== 'undefined' ? mxGraphLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStackLayout\n * \n * Extends <mxGraphLayout> to create a horizontal or vertical stack of the\n * child vertices. The children do not need to be connected for this layout\n * to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxStackLayout(graph, true);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxStackLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxStackLayout(graph, horizontal, spacing, x0, y0, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = (spacing != null) ? spacing : 0;\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.border = (border != null) ? border : 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxStackLayout.prototype = new mxGraphLayout();\nmxStackLayout.prototype.constructor = mxStackLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxStackLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n *\n * Specifies the spacing between the cells. Default is 0.\n */\nmxStackLayout.prototype.spacing = null;\n\n/**\n * Variable: x0\n *\n * Specifies the horizontal origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.x0 = null;\n\n/**\n * Variable: y0\n *\n * Specifies the vertical origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.y0 = null;\n\n/**\n * Variable: border\n *\n * Border to be added if fill is true. Default is 0.\n */\nmxStackLayout.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginTop = 0;\n\n/**\n * Variable: marginLeft\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginLeft = 0;\n\n/**\n * Variable: marginRight\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginRight = 0;\n\n/**\n * Variable: marginBottom\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginBottom = 0;\n\n/**\n * Variable: keepFirstLocation\n * \n * Boolean indicating if the location of the first cell should be\n * kept, that is, it will not be moved to x0 or y0. Default is false.\n */\nmxStackLayout.prototype.keepFirstLocation = false;\n\n/**\n * Variable: fill\n * \n * Boolean indicating if dimension should be changed to fill out the parent\n * cell. Default is false.\n */\nmxStackLayout.prototype.fill = false;\n\t\n/**\n * Variable: resizeParent\n * \n * If the parent should be resized to match the width/height of the\n * stack. Default is false.\n */\nmxStackLayout.prototype.resizeParent = false;\n\n/**\n * Variable: resizeParentMax\n * \n * Use maximum of existing value and new value for resize of parent.\n * Default is false.\n */\nmxStackLayout.prototype.resizeParentMax = false;\n\n/**\n * Variable: resizeLast\n * \n * If the last element should be resized to fill out the parent. Default is\n * false. If <resizeParent> is true then this is ignored.\n */\nmxStackLayout.prototype.resizeLast = false;\n\n/**\n * Variable: wrap\n * \n * Value at which a new column or row should be created. Default is null.\n */\nmxStackLayout.prototype.wrap = null;\n\n/**\n * Variable: borderCollapse\n * \n * If the strokeWidth should be ignored. Default is true.\n */\nmxStackLayout.prototype.borderCollapse = true;\n\n/**\n * Variable: allowGaps\n * \n * If gaps should be allowed in the stack. Default is false.\n */\nmxStackLayout.prototype.allowGaps = false;\n\n/**\n * Variable: gridSize\n * \n * Grid size for alignment of position and size. Default is 0.\n */\nmxStackLayout.prototype.gridSize = 0;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxStackLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxStackLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\tvar horizontal = this.isHorizontal();\n\t\n\tif (cell != null && parent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar value = (horizontal) ? x : y;\n\t\tvar pstate = this.graph.getView().getState(parent);\n\n\t\tif (pstate != null)\n\t\t{\n\t\t\tvalue -= (horizontal) ? pstate.x : pstate.y;\n\t\t}\n\t\t\n\t\tvalue /= this.graph.view.scale;\n\t\t\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != cell)\n\t\t\t{\n\t\t\t\tvar bounds = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = (horizontal) ?\n\t\t\t\t\t\tbounds.x + bounds.width / 2 :\n\t\t\t\t\t\tbounds.y + bounds.height / 2;\n\t\t\t\t\t\n\t\t\t\t\tif (last <= value && tmp > value)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlast = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: getParentSize\n * \n * Returns the size for the parent container or the size of the graph\n * container if the parent is a layer or the root of the model.\n */\nmxStackLayout.prototype.getParentSize = function(parent)\n{\n\tvar model = this.graph.getModel();\t\t\t\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null && ((pgeo == null &&\n\t\tmodel.isLayer(parent)) || parent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\t\n\treturn pgeo;\n};\n\n/**\n * Function: getLayoutCells\n * \n * Returns the cells to be layouted.\n */\nmxStackLayout.prototype.getLayoutCells = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(parent);\n\tvar cells = [];\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (!this.isVertexIgnored(child) && this.isVertexMovable(child))\n\t\t{\n\t\t\tcells.push(child);\n\t\t}\n\t}\n\t\n\tif (this.allowGaps)\n\t{\n\t\tcells.sort(mxUtils.bind(this, function(c1, c2)\n\t\t{\n\t\t\tvar geo1 = this.graph.getCellGeometry(c1);\n\t\t\tvar geo2 = this.graph.getCellGeometry(c2);\n\t\t\t\n\t\t\treturn (geo1.y == geo2.y) ? 0 : ((geo1.y > geo2.y > 0) ? 1 : -1);\n\t\t}));\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: snap\n * \n * Snaps the given value to the grid size.\n */\nmxStackLayout.prototype.snap = function(value)\n{\n\tif (this.gridSize != null && this.gridSize > 0)\n\t{\n\t\tvalue = Math.max(value, this.gridSize);\n\t\t\n\t\tif (value / this.gridSize > 1)\n\t\t{\n\t\t\tvar mod = value % this.gridSize;\n\t\t\tvalue += mod > this.gridSize / 2 ? (this.gridSize - mod) : -mod;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.execute = function(parent)\n{\n\tif (parent != null)\n\t{\n\t\tvar pgeo = this.getParentSize(parent);\n\t\tvar horizontal = this.isHorizontal();\n\t\tvar model = this.graph.getModel();\t\n\t\tvar fillValue = null;\n\t\t\n\t\tif (pgeo != null)\n\t\t{\n\t\t\tfillValue = (horizontal) ? pgeo.height - this.marginTop - this.marginBottom :\n\t\t\t\tpgeo.width - this.marginLeft - this.marginRight;\n\t\t}\n\t\t\n\t\tfillValue -= 2 * this.border;\n\t\tvar x0 = this.x0 + this.border + this.marginLeft;\n\t\tvar y0 = this.y0 + this.border + this.marginTop;\n\t\t\n\t\t// Handles swimlane start size\n\t\tif (this.graph.isSwimlane(parent))\n\t\t{\n\t\t\t// Uses computed style to get latest \n\t\t\tvar style = this.graph.getCellStyle(parent);\n\t\t\tvar start = mxUtils.getNumber(style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE);\n\t\t\tvar horz = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true) == 1;\n\n\t\t\tif (pgeo != null)\n\t\t\t{\n\t\t\t\tif (horz)\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.height);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.width);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal == horz)\n\t\t\t{\n\t\t\t\tfillValue -= start;\n\t\t\t}\n\n\t\t\tif (horz)\n\t\t\t{\n\t\t\t\ty0 += start;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx0 += start;\n\t\t\t}\n\t\t}\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar tmp = 0;\n\t\t\tvar last = null;\n\t\t\tvar lastValue = 0;\n\t\t\tvar lastChild = null;\n\t\t\tvar cells = this.getLayoutCells(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar child = cells[i];\n\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (this.wrap != null && last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((horizontal && last.x + last.width +\n\t\t\t\t\t\t\tgeo.width + 2 * this.spacing > this.wrap) ||\n\t\t\t\t\t\t\t(!horizontal && last.y + last.height +\n\t\t\t\t\t\t\tgeo.height + 2 * this.spacing > this.wrap))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlast = null;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ty0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tx0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = 0;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttmp = Math.max(tmp, (horizontal) ? geo.height : geo.width);\n\t\t\t\t\tvar sw = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (!this.borderCollapse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childStyle = this.graph.getCellStyle(child);\n\t\t\t\t\t\tsw = mxUtils.getNumber(childStyle, mxConstants.STYLE_STROKEWIDTH, 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar temp = lastValue + this.spacing + Math.floor(sw / 2);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = this.snap(((this.allowGaps) ? Math.max(temp, geo.x) :\n\t\t\t\t\t\t\t\ttemp) - this.marginLeft) + this.marginLeft;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = this.snap(((this.allowGaps) ? Math.max(temp, geo.y) :\n\t\t\t\t\t\t\t\ttemp) - this.marginTop) + this.marginTop;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!this.keepFirstLocation)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = (this.allowGaps && geo.x > x0) ? Math.max(this.snap(geo.x -\n\t\t\t\t\t\t\t\tthis.marginLeft) + this.marginLeft, x0) : x0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = (this.allowGaps && geo.y > y0) ? Math.max(this.snap(geo.y -\n\t\t\t\t\t\t\t\tthis.marginTop) + this.marginTop, y0) : y0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y = y0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.fill && fillValue != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = fillValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = fillValue;\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = this.snap(geo.width);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = this.snap(geo.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.setChildGeometry(child, geo);\n\t\t\t\t\tlastChild = child;\n\t\t\t\t\tlast = geo;\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.x + last.width + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.y + last.height + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resizeParent && pgeo != null && last != null && !this.graph.isCellCollapsed(parent))\n\t\t\t{\n\t\t\t\tthis.updateParentGeometry(parent, pgeo, last);\n\t\t\t}\n\t\t\telse if (this.resizeLast && pgeo != null && last != null && lastChild != null)\n\t\t\t{\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tlast.width = pgeo.width - last.x - this.spacing - this.marginRight - this.marginLeft;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlast.height = pgeo.height - last.y - this.spacing - this.marginBottom;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.setChildGeometry(lastChild, last);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.setChildGeometry = function(child, geo)\n{\n\tvar geo2 = this.graph.getCellGeometry(child);\n\t\n\tif (geo2 == null || geo.x != geo2.x || geo.y != geo2.y ||\n\t\tgeo.width != geo2.width || geo.height != geo2.height)\n\t{\n\t\tthis.graph.getModel().setGeometry(child, geo);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.updateParentGeometry = function(parent, pgeo, last)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\t\n\n\tvar pgeo2 = pgeo.clone();\n\t\n\tif (horizontal)\n\t{\n\t\tvar tmp = last.x + last.width + this.marginRight + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.width = Math.max(pgeo2.width, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.width = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tmp = last.y + last.height + this.marginBottom + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.height = Math.max(pgeo2.height, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.height = tmp;\n\t\t}\n\t}\n\t\n\tif (pgeo.x != pgeo2.x || pgeo.y != pgeo2.y ||\n\t\tpgeo.width != pgeo2.width || pgeo.height != pgeo2.height)\n\t{\n\t\tmodel.setGeometry(parent, pgeo2);\n\t}\n};\n\n__mxOutput.mxStackLayout = typeof mxStackLayout !== 'undefined' ? mxStackLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPartitionLayout\n * \n * Extends <mxGraphLayout> for partitioning the parent cell vertically or\n * horizontally by filling the complete area with the child cells. A horizontal\n * layout partitions the height of the given parent whereas a a non-horizontal\n * layout partitions the width. If the parent is a layer (that is, a child of\n * the root node), then the current graph size is partitioned. The children do\n * not need to be connected for this layout to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxPartitionLayout(graph, true, 10, 20);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxPartitionLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxPartitionLayout(graph, horizontal, spacing, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = spacing || 0;\n\tthis.border = border || 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxPartitionLayout.prototype = new mxGraphLayout();\nmxPartitionLayout.prototype.constructor = mxPartitionLayout;\n\n/**\n * Variable: horizontal\n * \n * Boolean indicating the direction in which the space is partitioned.\n * Default is true.\n */\nmxPartitionLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n * \n * Integer that specifies the absolute spacing in pixels between the\n * children. Default is 0.\n */\nmxPartitionLayout.prototype.spacing = null;\n\n/**\n * Variable: border\n * \n * Integer that specifies the absolute inset in pixels for the parent that\n * contains the children. Default is 0.\n */\nmxPartitionLayout.prototype.border = null;\n\n/**\n * Variable: resizeVertices\n * \n * Boolean that specifies if vertices should be resized. Default is true.\n */\nmxPartitionLayout.prototype.resizeVertices = true;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxPartitionLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxPartitionLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\t\n\tif (cell != null &&\n\t\tparent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\t// Finds index of the closest swimlane\n\t\t// TODO: Take into account the orientation\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\tvar bounds = this.getVertexBounds(child);\n\t\t\t\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tvar tmp = bounds.x + bounds.width / 2;\n\t\t\t\t\n\t\t\t\tif (last < x && tmp > x)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlast = tmp;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\t\t\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. All children where <isVertexIgnored>\n * returns false and <isVertexMovable> returns true are modified.\n */\nmxPartitionLayout.prototype.execute = function(parent)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null &&\n\t\t((pgeo == null &&\n\t\tmodel.isLayer(parent)) ||\n\t\tparent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\n\tif (pgeo != null)\n\t{\n\t\tvar children = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(child) &&\n\t\t\t\tthis.isVertexMovable(child))\n\t\t\t{\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar n = children.length;\n\n\t\tif (n > 0)\n\t\t{\n\t\t\tvar x0 = this.border;\n\t\t\tvar y0 = this.border;\n\t\t\tvar other = (horizontal) ? pgeo.height : pgeo.width;\n\t\t\tother -= 2 * this.border;\n\n\t\t\tvar size = (this.graph.isSwimlane(parent)) ?\n\t\t\t\tthis.graph.getStartSize(parent) :\n\t\t\t\tnew mxRectangle();\n\n\t\t\tother -= (horizontal) ? size.height : size.width;\n\t\t\tx0 = x0 + size.width;\n\t\t\ty0 = y0 + size.height;\n\n\t\t\tvar tmp = this.border + (n - 1) * this.spacing;\n\t\t\tvar value = (horizontal) ?\n\t\t\t\t((pgeo.width - x0 - tmp) / n) :\n\t\t\t\t((pgeo.height - y0 - tmp) / n);\n\t\t\t\n\t\t\t// Avoids negative values, that is values where the sum of the\n\t\t\t// spacing plus the border is larger then the available space\n\t\t\tif (value > 0)\n\t\t\t{\n\t\t\t\tmodel.beginUpdate();\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < n; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t\tgeo.y = y0;\n\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.width = value;\n\t\t\t\t\t\t\t\t\tgeo.height = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tx0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.height = value;\n\t\t\t\t\t\t\t\t\tgeo.width = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ty0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodel.setGeometry(child, geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxPartitionLayout = typeof mxPartitionLayout !== 'undefined' ? mxPartitionLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCompactTreeLayout\n * \n * Extends <mxGraphLayout> to implement a compact tree (Moen) algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCompactTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new compact tree layout for the specified graph\n * and orientation.\n */\nfunction mxCompactTreeLayout(graph, horizontal, invert)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.invert = (invert != null) ? invert : false;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompactTreeLayout.prototype = new mxGraphLayout();\nmxCompactTreeLayout.prototype.constructor = mxCompactTreeLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxCompactTreeLayout.prototype.horizontal = null;\t \n\n/**\n * Variable: invert\n *\n * Specifies if edge directions should be inverted. Default is false.\n */\nmxCompactTreeLayout.prototype.invert = null;\t \n\n/**\n * Variable: resizeParent\n * \n * If the parents should be resized to match the width/height of the\n * children. Default is true.\n */\nmxCompactTreeLayout.prototype.resizeParent = true;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxCompactTreeLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents. Default is 10.\n */\nmxCompactTreeLayout.prototype.groupPadding = 10;\n\n/**\n * Variable: groupPaddingTop\n * \n * Top padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingTop = 0;\n\n/**\n * Variable: groupPaddingRight\n * \n * Right padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingRight = 0;\n\n/**\n * Variable: groupPaddingBottom\n * \n * Bottom padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingBottom = 0;\n\n/**\n * Variable: groupPaddingLeft\n * \n * Left padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingLeft = 0;\n\n/**\n * Variable: parentsChanged\n *\n * A set of the parents that need updating based on children\n * process as part of the layout.\n */\nmxCompactTreeLayout.prototype.parentsChanged = null;\n\n/**\n * Variable: moveTree\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.moveTree = false;\n\n/**\n * Variable: visited\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.visited = null;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 10.\n */\nmxCompactTreeLayout.prototype.levelDistance = 10;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 20.\n */\nmxCompactTreeLayout.prototype.nodeDistance = 20;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCompactTreeLayout.prototype.resetEdges = true;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefVertEdgeOff = 4;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex.\n */\nmxCompactTreeLayout.prototype.minEdgeJetty = 8;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed.\n */\nmxCompactTreeLayout.prototype.channelBuffer = 4;\n\n/**\n * Variable: edgeRouting\n * \n * Whether or not to apply the internal tree edge routing.\n */\nmxCompactTreeLayout.prototype.edgeRouting = true;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxCompactTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: alignRanks\n * \n * Whether or not the tops of cells in each rank should be aligned\n * across the rank\n */\nmxCompactTreeLayout.prototype.alignRanks = false;\n\n/**\n * Variable: maxRankHeight\n * \n * An array of the maximum height of cells (relative to the layout direction)\n * per rank\n */\nmxCompactTreeLayout.prototype.maxRankHeight = null;\n\n/**\n * Variable: root\n * \n * The cell to use as the root of the tree\n */\nmxCompactTreeLayout.prototype.root = null;\n\n/**\n * Variable: node\n * \n * The internal node representation of the root cell. Do not set directly\n * , this value is only exposed to assist with post-processing functionality\n */\nmxCompactTreeLayout.prototype.node = null;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxCompactTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxCompactTreeLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n * Overrides <root> if specified.\n */\nmxCompactTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.getModel();\n\n\tif (root == null)\n\t{\n\t\t// Takes the parent as the root if it has outgoing edges\n\t\tif (this.graph.getEdges(parent, model.getParent(parent),\n\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t{\n\t\t\tthis.root = parent;\n\t\t}\n\t\t\n\t\t// Tries to find a suitable root in the parent's\n\t\t// children\n\t\telse\n\t\t{\n\t\t\tvar roots = this.graph.findTreeRoots(parent, true, this.invert);\n\t\t\t\n\t\t\tif (roots.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < roots.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (!this.isVertexIgnored(roots[i]) &&\n\t\t\t\t\t\tthis.graph.getEdges(roots[i], null,\n\t\t\t\t\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.root = roots[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.root = root;\n\t}\n\t\n\tif (this.root != null)\n\t{\n\t\tif (this.resizeParent)\n\t\t{\n\t\t\tthis.parentsChanged = new Object();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.parentsChanged = null;\n\t\t}\n\n\t\t//  Maintaining parent location\n\t\tthis.parentX = null;\n\t\tthis.parentY = null;\n\t\t\n\t\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tthis.parentX = geo.x;\n\t\t\t\tthis.parentY = geo.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmodel.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tthis.visited = new Object();\n\t\t\tthis.node = this.dfs(this.root, parent);\n\t\t\t\n\t\t\tif (this.alignRanks)\n\t\t\t{\n\t\t\t\tthis.maxRankHeight = [];\n\t\t\t\tthis.findRankHeights(this.node, 0);\n\t\t\t\tthis.setCellHeights(this.node, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.node != null)\n\t\t\t{\n\t\t\t\tthis.layout(this.node);\n\t\t\t\tvar x0 = this.graph.gridSize;\n\t\t\t\tvar y0 = x0;\n\t\t\t\t\n\t\t\t\tif (!this.moveTree)\n\t\t\t\t{\n\t\t\t\t\tvar g = this.getVertexBounds(this.root);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx0 = g.x;\n\t\t\t\t\t\ty0 = g.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bounds = null;\n\t\t\t\t\n\t\t\t\tif (this.isHorizontal())\n\t\t\t\t{\n\t\t\t\t\tbounds = this.horizontalLayout(this.node, x0, y0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbounds = this.verticalLayout(this.node, null, x0, y0);\n\t\t\t\t}\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\tvar dy = 0;\n\n\t\t\t\t\tif (bounds.x < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = Math.abs(x0 - bounds.x);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bounds.y < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = Math.abs(y0 - bounds.y);\t\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.moveNode(this.node, dx, dy);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.resizeParent)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.adjustParents();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.edgeRouting)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Iterate through all edges setting their positions\n\t\t\t\t\t\tthis.localEdgeProcessing(this.node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Maintaining parent location\n\t\t\t\tif (this.parentX != null && this.parentY != null)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\tgeo.x = this.parentX;\n\t\t\t\t\t\tgeo.y = this.parentY;\n\t\t\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: moveNode\n * \n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.moveNode = function(node, dx, dy)\n{\n\tnode.x += dx;\n\tnode.y += dy;\n\tthis.apply(node);\n\t\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.moveNode(child, dx, dy);\n\t\tchild = child.next;\n\t}\n};\n\n\n/**\n * Function: sortOutgoingEdges\n * \n * Called if <sortEdges> is true to sort the array of outgoing edges in place.\n */\nmxCompactTreeLayout.prototype.sortOutgoingEdges = function(source, edges)\n{\n\tvar lookup = new mxDictionary();\n\t\n\tedges.sort(function(e1, e2)\n\t{\n\t\tvar end1 = e1.getTerminal(e1.getTerminal(false) == source);\n\t\tvar p1 = lookup.get(end1);\n\t\t\n\t\tif (p1 == null)\n\t\t{\n\t\t\tp1 = mxCellPath.create(end1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end1, p1);\n\t\t}\n\n\t\tvar end2 = e2.getTerminal(e2.getTerminal(false) == source);\n\t\tvar p2 = lookup.get(end2);\n\t\t\n\t\tif (p2 == null)\n\t\t{\n\t\t\tp2 = mxCellPath.create(end2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end2, p2);\n\t\t}\n\n\t\treturn mxCellPath.compare(p1, p2);\n\t});\n};\n\n/**\n * Function: findRankHeights\n * \n * Stores the maximum height (relative to the layout\n * direction) of cells in each rank\n */\nmxCompactTreeLayout.prototype.findRankHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] == null || this.maxRankHeight[rank] < node.height)\n\t{\n\t\tthis.maxRankHeight[rank] = node.height;\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.findRankHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: setCellHeights\n * \n * Set the cells heights (relative to the layout\n * direction) when the tops of each rank are to be aligned\n */\nmxCompactTreeLayout.prototype.setCellHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] != null && this.maxRankHeight[rank] > node.height)\n\t{\n\t\tnode.height = this.maxRankHeight[rank];\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.setCellHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: dfs\n * \n * Does a depth first search starting at the specified cell.\n * Makes sure the specified parent is never left by the\n * algorithm.\n */\nmxCompactTreeLayout.prototype.dfs = function(cell, parent)\n{\n\tvar id = mxCellPath.create(cell);\n\tvar node = null;\n\t\n\tif (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell))\n\t{\n\t\tthis.visited[id] = cell;\n\t\tnode = this.createNode(cell);\n\n\t\tvar model = this.graph.getModel();\n\t\tvar prev = null;\n\t\tvar out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);\n\t\tvar view = this.graph.getView();\n\t\t\n\t\tif (this.sortEdges)\n\t\t{\n\t\t\tthis.sortOutgoingEdges(cell, out);\n\t\t}\n\n\t\tfor (var i = 0; i < out.length; i++)\n\t\t{\n\t\t\tvar edge = out[i];\n\t\t\t\n\t\t\tif (!this.isEdgeIgnored(edge))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.edgeRouting)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Checks if terminal in same swimlane\n\t\t\t\tvar state = view.getState(edge);\n\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);\n\t\t\t\tvar tmp = this.dfs(target, parent);\n\t\t\t\t\n\t\t\t\tif (tmp != null && model.getGeometry(target) != null)\n\t\t\t\t{\n\t\t\t\t\tif (prev == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.child = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprev.next = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tprev = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: layout\n * \n * Starts the actual compact tree layout algorithm\n * at the given node.\n */\nmxCompactTreeLayout.prototype.layout = function(node)\n{\n\tif (node != null)\n\t{\n\t\tvar child = node.child;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tthis.layout(child);\n\t\t\tchild = child.next;\n\t\t}\n\t\t\n\t\tif (node.child != null)\n\t\t{\n\t\t\tthis.attachParent(node, this.join(node));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.layoutLeaf(node);\n\t\t}\n\t}\n};\n\n/**\n * Function: horizontalLayout\n */\nmxCompactTreeLayout.prototype.horizontalLayout = function(node, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetX;\n\tnode.y += y0 + node.offsetY;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.horizontalLayout(child, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.y + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\t\n/**\n * Function: verticalLayout\n */\nmxCompactTreeLayout.prototype.verticalLayout = function(node, parent, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetY;\n\tnode.y += y0 + node.offsetX;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.verticalLayout(child, node, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.x + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: attachParent\n */\nmxCompactTreeLayout.prototype.attachParent = function(node, height)\n{\n\tvar x = this.nodeDistance + this.levelDistance;\n\tvar y2 = (height - node.width) / 2 - this.nodeDistance;\n\tvar y1 = y2 + node.width + 2 * this.nodeDistance - height;\n\t\n\tnode.child.offsetX = x + node.height;\n\tnode.child.offsetY = y1;\n\t\n\tnode.contour.upperHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y1, node.contour.upperHead));\n\tnode.contour.lowerHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y2, node.contour.lowerHead));\n};\n\n/**\n * Function: layoutLeaf\n */\nmxCompactTreeLayout.prototype.layoutLeaf = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tnode.contour.upperTail = this.createLine(\n\t\tnode.height + dist, 0);\n\tnode.contour.upperHead = node.contour.upperTail;\n\tnode.contour.lowerTail = this.createLine(\n\t\t0, -node.width - dist);\n\tnode.contour.lowerHead = this.createLine(\n\t\tnode.height + dist, 0, node.contour.lowerTail);\n};\n\n/**\n * Function: join\n */\nmxCompactTreeLayout.prototype.join = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tvar child = node.child;\n\tnode.contour = child.contour;\n\tvar h = child.width + dist;\n\tvar sum = h;\n\tchild = child.next;\n\t\n\twhile (child != null)\n\t{\n\t\tvar d = this.merge(node.contour, child.contour);\n\t\tchild.offsetY = d + h;\n\t\tchild.offsetX = 0;\n\t\th = child.width + dist;\n\t\tsum += d + h;\n\t\tchild = child.next;\n\t}\n\t\n\treturn sum;\n};\n\n/**\n * Function: merge\n */\nmxCompactTreeLayout.prototype.merge = function(p1, p2)\n{\n\tvar x = 0;\n\tvar y = 0;\n\tvar total = 0;\n\t\n\tvar upper = p1.lowerHead;\n\tvar lower = p2.upperHead;\n\t\n\twhile (lower != null && upper != null)\n\t{\n\t\tvar d = this.offset(x, y, lower.dx, lower.dy,\n\t\t\tupper.dx, upper.dy);\n\t\ty += d;\n\t\ttotal += d;\n\t\t\n\t\tif (x + lower.dx <= upper.dx)\n\t\t{\n\t\t\tx += lower.dx;\n\t\t\ty += lower.dy;\n\t\t\tlower = lower.next;\n\t\t}\n\t\telse\n\t\t{\t\t\t\t\n\t\t\tx -= upper.dx;\n\t\t\ty -= upper.dy;\n\t\t\tupper = upper.next;\n\t\t}\n\t}\n\t\n\tif (lower != null)\n\t{\n\t\tvar b = this.bridge(p1.upperTail, 0, 0, lower, x, y);\n\t\tp1.upperTail = (b.next != null) ? p2.upperTail : b;\n\t\tp1.lowerTail = p2.lowerTail;\n\t}\n\telse\n\t{\n\t\tvar b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);\n\t\t\n\t\tif (b.next == null)\n\t\t{\n\t\t\tp1.lowerTail = b;\n\t\t}\n\t}\n\t\n\tp1.lowerHead = p2.lowerHead;\n\t\n\treturn total;\n};\n\n/**\n * Function: offset\n */\nmxCompactTreeLayout.prototype.offset = function(p1, p2, a1, a2, b1, b2)\n{\n\tvar d = 0;\n\t\n\tif (b1 <= p1 || p1 + a1 <= 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar t = b1 * a2 - a1 * b2;\n\t\n\tif (t > 0)\n\t{\n\t\tif (p1 < 0)\n\t\t{\n\t\t\tvar s = p1 * a2;\n\t\t\td = s / a1 - p2;\n\t\t}\n\t\telse if (p1 > 0)\n\t\t{\n\t\t\tvar s = p1 * b2;\n\t\t\td = s / b1 - p2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\td = -p2;\n\t\t}\n\t}\n\telse if (b1 < p1 + a1)\n\t{\n\t\tvar s = (b1 - p1) * a2;\n\t\td = b2 - (p2 + s / a1);\n\t}\n\telse if (b1 > p1 + a1)\n\t{\n\t\tvar s = (a1 + p1) * b2;\n\t\td = s / b1 - (p2 + a2);\n\t}\n\telse\n\t{\n\t\td = b2 - (p2 + a2);\n\t}\n\n\tif (d > 0)\n\t{\n\t\treturn d;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n/**\n * Function: bridge\n */\nmxCompactTreeLayout.prototype.bridge = function(line1, x1, y1, line2, x2, y2)\n{\n\tvar dx = x2 + line2.dx - x1;\n\tvar dy = 0;\n\tvar s = 0;\n\t\n\tif (line2.dx == 0)\n\t{\n\t\tdy = line2.dy;\n\t}\n\telse\n\t{\n\t\ts = dx * line2.dy;\n\t\tdy = s / line2.dx;\n\t}\n\t\n\tvar r = this.createLine(dx, dy, line2.next);\n\tline1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);\n\t\n\treturn r;\n};\n\n/**\n * Function: createNode\n */\nmxCompactTreeLayout.prototype.createNode = function(cell)\n{\n\tvar node = new Object();\n\tnode.cell = cell;\n\tnode.x = 0;\n\tnode.y = 0;\n\tnode.width = 0;\n\tnode.height = 0;\n\t\n\tvar geo = this.getVertexBounds(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tnode.width = geo.height;\n\t\t\tnode.height = geo.width;\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.width = geo.width;\n\t\t\tnode.height = geo.height;\n\t\t}\n\t}\n\t\n\tnode.offsetX = 0;\n\tnode.offsetY = 0;\n\tnode.contour = new Object();\n\t\n\treturn node;\n};\n\n/**\n * Function: apply\n */\nmxCompactTreeLayout.prototype.apply = function(node, bounds)\n{\n\tvar model = this.graph.getModel();\n\tvar cell = node.cell;\n\tvar g = model.getGeometry(cell);\n\n\tif (cell != null && g != null)\n\t{\n\t\tif (this.isVertexMovable(cell))\n\t\t{\n\t\t\tg = this.setVertexLocation(cell, node.x, node.y);\n\t\t\t\n\t\t\tif (this.resizeParent)\n\t\t\t{\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\tvar id = mxCellPath.create(parent);\n\t\t\t\t\n\t\t\t\t// Implements set semantic\n\t\t\t\tif (this.parentsChanged[id] == null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentsChanged[id] = parent;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (bounds == null)\n\t\t{\n\t\t\tbounds = new mxRectangle(g.x, g.y, g.width, g.height);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds = new mxRectangle(Math.min(bounds.x, g.x),\n\t\t\t\tMath.min(bounds.y, g.y),\n\t\t\t\tMath.max(bounds.x + bounds.width, g.x + g.width),\n\t\t\t\tMath.max(bounds.y + bounds.height, g.y + g.height));\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: createLine\n */\nmxCompactTreeLayout.prototype.createLine = function(dx, dy, next)\n{\n\tvar line = new Object();\n\tline.dx = dx;\n\tline.dy = dy;\n\tline.next = next;\n\t\n\treturn line;\n};\n\n/**\n * Function: adjustParents\n * \n * Adjust parent cells whose child geometries have changed. The default \n * implementation adjusts the group to just fit around the children with \n * a padding.\n */\nmxCompactTreeLayout.prototype.adjustParents = function()\n{\n\tvar tmp = [];\n\t\n\tfor (var id in this.parentsChanged)\n\t{\n\t\ttmp.push(this.parentsChanged[id]);\n\t}\n\t\n\tthis.arrangeGroups(mxUtils.sortCells(tmp, true), this.groupPadding, this.groupPaddingTop,\n\t\tthis.groupPaddingRight, this.groupPaddingBottom, this.groupPaddingLeft);\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.localEdgeProcessing = function(node)\n{\n\tthis.processNodeOutgoing(node);\n\tvar child = node.child;\n\n\twhile (child != null)\n\t{\n\t\tthis.localEdgeProcessing(child);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Separates the x position of edges as they connect to vertices\n */\nmxCompactTreeLayout.prototype.processNodeOutgoing = function(node)\n{\n\tvar child = node.child;\n\tvar parentCell = node.cell;\n\n\tvar childCount = 0;\n\tvar sortedCells = [];\n\n\twhile (child != null)\n\t{\n\t\tchildCount++;\n\n\t\tvar sortingCriterion = child.x;\n\n\t\tif (this.horizontal)\n\t\t{\n\t\t\tsortingCriterion = child.y;\n\t\t}\n\n\t\tsortedCells.push(new WeightedCellSorter(child, sortingCriterion));\n\t\tchild = child.next;\n\t}\n\n\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\tvar availableWidth = node.width;\n\n\tvar requiredWidth = (childCount + 1) * this.prefHozEdgeSep;\n\n\t// Add a buffer on the edges of the vertex if the edge count allows\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tavailableWidth -= 2 * this.prefHozEdgeSep;\n\t}\n\n\tvar edgeSpacing = availableWidth / childCount;\n\n\tvar currentXOffset = edgeSpacing / 2.0;\n\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tcurrentXOffset += this.prefHozEdgeSep;\n\t}\n\n\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\tvar maxYOffset = 0;\n\n\tvar parentBounds = this.getVertexBounds(parentCell);\n\tchild = node.child;\n\n\tfor (var j = 0; j < sortedCells.length; j++)\n\t{\n\t\tvar childCell = sortedCells[j].cell.cell;\n\t\tvar childBounds = this.getVertexBounds(childCell);\n\n\t\tvar edges = this.graph.getEdgesBetween(parentCell,\n\t\t\t\tchildCell, false);\n\t\t\n\t\tvar newPoints = [];\n\t\tvar x = 0;\n\t\tvar y = 0;\n\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.horizontal)\n\t\t\t{\n\t\t\t\t// Use opposite co-ords, calculation was done for \n\t\t\t\t// \n\t\t\t\tx = parentBounds.x + parentBounds.width;\n\t\t\t\ty = parentBounds.y + currentXOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = parentBounds.x + parentBounds.width\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = childBounds.y + childBounds.height / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = parentBounds.x + currentXOffset;\n\t\t\t\ty = parentBounds.y + parentBounds.height;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = parentBounds.y + parentBounds.height\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = childBounds.x + childBounds.width / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t}\n\n\t\tif (j < childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t}\n\t\telse if (j > childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t}\n\t\t// Ignore the case if equals, this means the second of 2\n\t\t// jettys with the same y (even number of edges)\n\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2] = currentX;\n\t\tcurrentXOffset += edgeSpacing;\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2 + 1] = currentYOffset;\n\n\t\tmaxYOffset = Math.max(maxYOffset, currentYOffset);\n\t}\n};\n__mxOutput.mxCompactTreeLayout = typeof mxCompactTreeLayout !== 'undefined' ? mxCompactTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRadialTreeLayout\n * \n * Extends <mxGraphLayout> to implement a radial tree algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxRadialTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxRadialTreeLayout\n * \n * Constructs a new radial tree layout for the specified graph\n */\nfunction mxRadialTreeLayout(graph)\n{\n\tmxCompactTreeLayout.call(this, graph , false);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxUtils.extend(mxRadialTreeLayout, mxCompactTreeLayout);\n\n/**\n * Variable: angleOffset\n *\n * The initial offset to compute the angle position.\n */\nmxRadialTreeLayout.prototype.angleOffset = 0.5;\n\n/**\n * Variable: rootx\n *\n * The X co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rootx = 0;\n\n/**\n * Variable: rooty\n *\n * The Y co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rooty = 0;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 120.\n */\nmxRadialTreeLayout.prototype.levelDistance = 120;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 10.\n */\nmxRadialTreeLayout.prototype.nodeDistance = 10;\n\n/**\n * Variable: autoRadius\n * \n * Specifies if the radios should be computed automatically\n */\nmxRadialTreeLayout.prototype.autoRadius = false;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxRadialTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: rowMinX\n * \n * Array of leftmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMinX = [];\n\n/**\n * Variable: rowMaxX\n * \n * Array of rightmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMaxX = [];\n\n/**\n * Variable: rowMinCenX\n * \n * Array of x coordinate of leftmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMinCenX = [];\n\n/**\n * Variable: rowMaxCenX\n * \n * Array of x coordinate of rightmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMaxCenX = [];\n\n/**\n * Variable: rowRadi\n * \n * Array of y deltas of each row behind root vertex, also the radius in the tree\n */\nmxRadialTreeLayout.prototype.rowRadi = [];\n\n/**\n * Variable: row\n * \n * Array of vertices on each row\n */\nmxRadialTreeLayout.prototype.row = [];\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxRadialTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n */\nmxRadialTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\t\n\tthis.useBoundingBox = false;\n\tthis.edgeRouting = false;\n\t//this.horizontal = false;\n\n\tmxCompactTreeLayout.prototype.execute.apply(this, arguments);\n\t\n\tvar bounds = null;\n\tvar rootBounds = this.getVertexBounds(this.root);\n\tthis.centerX = rootBounds.x + rootBounds.width / 2;\n\tthis.centerY = rootBounds.y + rootBounds.height / 2;\n\n\t// Calculate the bounds of the involved vertices directly from the values set in the compact tree\n\tfor (var vertex in this.visited)\n\t{\n\t\tvar vertexBounds = this.getVertexBounds(this.visited[vertex]);\n\t\tbounds = (bounds != null) ? bounds : vertexBounds.clone();\n\t\tbounds.add(vertexBounds);\n\t}\n\t\n\tthis.calcRowDims([this.node], 0);\n\t\n\tvar maxLeftGrad = 0;\n\tvar maxRightGrad = 0;\n\n\t// Find the steepest left and right gradients\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar leftGrad = (this.centerX - this.rowMinX[i] - this.nodeDistance) / this.rowRadi[i];\n\t\tvar rightGrad = (this.rowMaxX[i] - this.centerX - this.nodeDistance) / this.rowRadi[i];\n\t\t\n\t\tmaxLeftGrad = Math.max (maxLeftGrad, leftGrad);\n\t\tmaxRightGrad = Math.max (maxRightGrad, rightGrad);\n\t}\n\t\n\t// Extend out row so they meet the maximum gradient and convert to polar co-ords\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar xLeftLimit = this.centerX - this.nodeDistance - maxLeftGrad * this.rowRadi[i];\n\t\tvar xRightLimit = this.centerX + this.nodeDistance + maxRightGrad * this.rowRadi[i];\n\t\tvar fullWidth = xRightLimit - xLeftLimit;\n\t\t\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tvar xProportion = (vertexBounds.x + vertexBounds.width / 2 - xLeftLimit) / (fullWidth);\n\t\t\tvar theta =  2 * Math.PI * xProportion;\n\t\t\tnode.theta = theta;\n\t\t}\n\t}\n\n\t// Post-process from outside inwards to try to align parents with children\n\tfor (var i = this.row.length - 2; i >= 0; i--)\n\t{\n\t\tvar row = this.row[i];\n\t\t\n\t\tfor (var j = 0; j < row.length; j++)\n\t\t{\n\t\t\tvar node = row[j];\n\t\t\tvar child = node.child;\n\t\t\tvar counter = 0;\n\t\t\tvar totalTheta = 0;\n\t\t\t\n\t\t\twhile (child != null)\n\t\t\t{\n\t\t\t\ttotalTheta += child.theta;\n\t\t\t\tcounter++;\n\t\t\t\tchild = child.next;\n\t\t\t}\n\t\t\t\n\t\t\tif (counter > 0)\n\t\t\t{\n\t\t\t\tvar averTheta = totalTheta / counter;\n\t\t\t\t\n\t\t\t\tif (averTheta > node.theta && j < row.length - 1)\n\t\t\t\t{\n\t\t\t\t\tvar nextTheta = row[j+1].theta;\n\t\t\t\t\tnode.theta = Math.min (averTheta, nextTheta - Math.PI/10);\n\t\t\t\t}\n\t\t\t\telse if (averTheta < node.theta && j > 0 )\n\t\t\t\t{\n\t\t\t\t\tvar lastTheta = row[j-1].theta;\n\t\t\t\t\tnode.theta = Math.max (averTheta, lastTheta + Math.PI/10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Set locations\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tthis.setVertexLocation(node.cell,\n\t\t\t\t\t\t\t\t\tthis.centerX - vertexBounds.width / 2 + this.rowRadi[i] * Math.cos(node.theta),\n\t\t\t\t\t\t\t\t\tthis.centerY - vertexBounds.height / 2 + this.rowRadi[i] * Math.sin(node.theta));\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRowDims\n * \n * Recursive function to calculate the dimensions of each row\n * \n * Parameters:\n * \n * row - Array of internal nodes, the children of which are to be processed.\n * rowNum - Integer indicating which row is being processed.\n */\nmxRadialTreeLayout.prototype.calcRowDims = function(row, rowNum)\n{\n\tif (row == null || row.length == 0)\n\t{\n\t\treturn;\n\t}\n\n\t// Place root's children proportionally around the first level\n\tthis.rowMinX[rowNum] = this.centerX;\n\tthis.rowMaxX[rowNum] = this.centerX;\n\tthis.rowMinCenX[rowNum] = this.centerX;\n\tthis.rowMaxCenX[rowNum] = this.centerX;\n\tthis.row[rowNum] = [];\n\n\tvar rowHasChildren = false;\n\n\tfor (var i = 0; i < row.length; i++)\n\t{\n\t\tvar child = row[i] != null ? row[i].child : null;\n\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar cell = child.cell;\n\t\t\tvar vertexBounds = this.getVertexBounds(cell);\n\t\t\t\n\t\t\tthis.rowMinX[rowNum] = Math.min(vertexBounds.x, this.rowMinX[rowNum]);\n\t\t\tthis.rowMaxX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width, this.rowMaxX[rowNum]);\n\t\t\tthis.rowMinCenX[rowNum] = Math.min(vertexBounds.x + vertexBounds.width / 2, this.rowMinCenX[rowNum]);\n\t\t\tthis.rowMaxCenX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width / 2, this.rowMaxCenX[rowNum]);\n\t\t\tthis.rowRadi[rowNum] = vertexBounds.y - this.getVertexBounds(this.root).y;\n\t\n\t\t\tif (child.child != null)\n\t\t\t{\n\t\t\t\trowHasChildren = true;\n\t\t\t}\n\t\t\t\n\t\t\tthis.row[rowNum].push(child);\n\t\t\tchild = child.next;\n\t\t}\n\t}\n\t\n\tif (rowHasChildren)\n\t{\n\t\tthis.calcRowDims(this.row[rowNum], rowNum + 1);\n\t}\n};\n\n__mxOutput.mxRadialTreeLayout = typeof mxRadialTreeLayout !== 'undefined' ? mxRadialTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxFastOrganicLayout\n * \n * Extends <mxGraphLayout> to implement a fast organic layout algorithm.\n * The vertices need to be connected for this layout to work, vertices\n * with no connections are ignored.\n * \n * Example:\n * \n * (code)\n * var layout = new mxFastOrganicLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new fast organic layout for the specified graph.\n */\nfunction mxFastOrganicLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxFastOrganicLayout.prototype = new mxGraphLayout();\nmxFastOrganicLayout.prototype.constructor = mxFastOrganicLayout;\n\n/**\n * Variable: useInputOrigin\n * \n * Specifies if the top left corner of the input cells should be the origin\n * of the layout result. Default is true.\n */\nmxFastOrganicLayout.prototype.useInputOrigin = true;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxFastOrganicLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxFastOrganicLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: forceConstant\n * \n * The force constant by which the attractive forces are divided and the\n * replusive forces are multiple by the square of. The value equates to the\n * average radius there is of free space around each node. Default is 50.\n */\nmxFastOrganicLayout.prototype.forceConstant = 50;\n\n/**\n * Variable: forceConstantSquared\n * \n * Cache of <forceConstant>^2 for performance.\n */\nmxFastOrganicLayout.prototype.forceConstantSquared = 0;\n\n/**\n * Variable: minDistanceLimit\n * \n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.minDistanceLimit = 2;\n\n/**\n * Variable: minDistanceLimit\n * \n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.maxDistanceLimit = 500;\n\n/**\n * Variable: minDistanceLimitSquared\n * \n * Cached version of <minDistanceLimit> squared.\n */\nmxFastOrganicLayout.prototype.minDistanceLimitSquared = 4;\n\n/**\n * Variable: initialTemp\n * \n * Start value of temperature. Default is 200.\n */\nmxFastOrganicLayout.prototype.initialTemp = 200;\n\n/**\n * Variable: temperature\n * \n * Temperature to limit displacement at later stages of layout.\n */\nmxFastOrganicLayout.prototype.temperature = 0;\n\n/**\n * Variable: maxIterations\n * \n * Total number of iterations to run the layout though.\n */\nmxFastOrganicLayout.prototype.maxIterations = 0;\n\n/**\n * Variable: iteration\n * \n * Current iteration count.\n */\nmxFastOrganicLayout.prototype.iteration = 0;\n\n/**\n * Variable: vertexArray\n * \n * An array of all vertices to be laid out.\n */\nmxFastOrganicLayout.prototype.vertexArray;\n\n/**\n * Variable: dispX\n * \n * An array of locally stored X co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispX;\n\n/**\n * Variable: dispY\n * \n * An array of locally stored Y co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispY;\n\n/**\n * Variable: cellLocation\n * \n * An array of locally stored co-ordinate positions for the vertices.\n */\nmxFastOrganicLayout.prototype.cellLocation;\n\n/**\n * Variable: radius\n * \n * The approximate radius of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radius;\n\n/**\n * Variable: radiusSquared\n * \n * The approximate radius squared of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radiusSquared;\n\n/**\n * Variable: isMoveable\n * \n * Array of booleans representing the movable states of the vertices.\n */\nmxFastOrganicLayout.prototype.isMoveable;\n\n/**\n * Variable: neighbours\n * \n * Local copy of cell neighbours.\n */\nmxFastOrganicLayout.prototype.neighbours;\n\n/**\n * Variable: indices\n * \n * Hashtable from cells to local indices.\n */\nmxFastOrganicLayout.prototype.indices;\n\n/**\n * Variable: allowedToRun\n * \n * Boolean flag that specifies if the layout is allowed to run. If this is\n * set to false, then the layout exits in the following iteration.\n */\nmxFastOrganicLayout.prototype.allowedToRun = true;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxFastOrganicLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. This operates on all children of the\n * given parent where <isVertexIgnored> returns false.\n */\nmxFastOrganicLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tthis.vertexArray = [];\n\tvar cells = this.graph.getChildVertices(parent);\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.isVertexIgnored(cells[i]))\n\t\t{\n\t\t\tthis.vertexArray.push(cells[i]);\n\t\t}\n\t}\n\t\n\tvar initialBounds = (this.useInputOrigin) ?\n\t\t\tthis.graph.getBoundingBoxFromGeometry(this.vertexArray) :\n\t\t\t\tnull;\n\tvar n = this.vertexArray.length;\n\n\tthis.indices = [];\n\tthis.dispX = [];\n\tthis.dispY = [];\n\tthis.cellLocation = [];\n\tthis.isMoveable = [];\n\tthis.neighbours = [];\n\tthis.radius = [];\n\tthis.radiusSquared = [];\n\n\tif (this.forceConstant < 0.001)\n\t{\n\t\tthis.forceConstant = 0.001;\n\t}\n\n\tthis.forceConstantSquared = this.forceConstant * this.forceConstant;\n\n\t// Create a map of vertices first. This is required for the array of\n\t// arrays called neighbours which holds, for each vertex, a list of\n\t// ints which represents the neighbours cells to that vertex as\n\t// the indices into vertexArray\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tvar vertex = this.vertexArray[i];\n\t\tthis.cellLocation[i] = [];\n\t\t\n\t\t// Set up the mapping from array indices to cells\n\t\tvar id = mxObjectIdentity.get(vertex);\n\t\tthis.indices[id] = i;\n\t\tvar bounds = this.getVertexBounds(vertex);\n\n\t\t// Set the X,Y value of the internal version of the cell to\n\t\t// the center point of the vertex for better positioning\n\t\tvar width = bounds.width;\n\t\tvar height = bounds.height;\n\t\t\n\t\t// Randomize (0, 0) locations\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\t\n\t\tthis.cellLocation[i][0] = x + width / 2.0;\n\t\tthis.cellLocation[i][1] = y + height / 2.0;\n\t\tthis.radius[i] = Math.min(width, height);\n\t\tthis.radiusSquared[i] = this.radius[i] * this.radius[i];\n\t}\n\n\t// Moves cell location back to top-left from center locations used in\n\t// algorithm, resetting the edge points is part of the transaction\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < n; i++)\n\t\t{\n\t\t\tthis.dispX[i] = 0;\n\t\t\tthis.dispY[i] = 0;\n\t\t\tthis.isMoveable[i] = this.isVertexMovable(this.vertexArray[i]);\n\n\t\t\t// Get lists of neighbours to all vertices, translate the cells\n\t\t\t// obtained in indices into vertexArray and store as an array\n\t\t\t// against the orginial cell index\n\t\t\tvar edges = this.graph.getConnections(this.vertexArray[i], parent);\n\t\t\tvar cells = this.graph.getOpposites(edges, this.vertexArray[i]);\n\t\t\tthis.neighbours[i] = [];\n\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(edges[j]);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \tthis.setEdgeStyleEnabled(edges[j], false);\n\t\t\t    }\n\n\t\t\t\t// Looks the cell up in the indices dictionary\n\t\t\t\tvar id = mxObjectIdentity.get(cells[j]);\n\t\t\t\tvar index = this.indices[id];\n\n\t\t\t\t// Check the connected cell in part of the vertex list to be\n\t\t\t\t// acted on by this layout\n\t\t\t\tif (index != null)\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = index;\n\t\t\t\t}\n\n\t\t\t\t// Else if index of the other cell doesn't correspond to\n\t\t\t\t// any cell listed to be acted upon in this layout. Set\n\t\t\t\t// the index to the value of this vertex (a dummy self-loop)\n\t\t\t\t// so the attraction force of the edge is not calculated\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.temperature = this.initialTemp;\n\n\t\t// If max number of iterations has not been set, guess it\n\t\tif (this.maxIterations == 0)\n\t\t{\n\t\t\tthis.maxIterations = 20 * Math.sqrt(n);\n\t\t}\n\t\t\n\t\t// Main iteration loop\n\t\tfor (this.iteration = 0; this.iteration < this.maxIterations; this.iteration++)\n\t\t{\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Calculate repulsive forces on all vertices\n\t\t\tthis.calcRepulsion();\n\n\t\t\t// Calculate attractive forces through edges\n\t\t\tthis.calcAttraction();\n\n\t\t\tthis.calcPositions();\n\t\t\tthis.reduceTemperature();\n\t\t}\n\n\t\tvar minx = null;\n\t\tvar miny = null;\n\t\t\n\t\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t\t{\n\t\t\tvar vertex = this.vertexArray[i];\n\t\t\t\n\t\t\tif (this.isVertexMovable(vertex))\n\t\t\t{\n\t\t\t\tvar bounds = this.getVertexBounds(vertex);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tthis.cellLocation[i][0] -= bounds.width / 2.0;\n\t\t\t\t\tthis.cellLocation[i][1] -= bounds.height / 2.0;\n\t\t\t\t\t\n\t\t\t\t\tvar x = this.graph.snap(Math.round(this.cellLocation[i][0]));\n\t\t\t\t\tvar y = this.graph.snap(Math.round(this.cellLocation[i][1]));\n\t\t\t\t\t\n\t\t\t\t\tthis.setVertexLocation(vertex, x, y);\n\t\t\t\t\t\n\t\t\t\t\tif (minx == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = Math.min(minx, x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (miny == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = y;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = Math.min(miny, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Modifies the cloned geometries in-place. Not needed\n\t\t// to clone the geometries again as we're in the same\n\t\t// undoable change.\n\t\tvar dx = -(minx || 0) + 1;\n\t\tvar dy = -(miny || 0) + 1;\n\t\t\n\t\tif (initialBounds != null)\n\t\t{\n\t\t\tdx += initialBounds.x;\n\t\t\tdy += initialBounds.y;\n\t\t}\n\t\t\n\t\tthis.graph.moveCells(this.vertexArray, dx, dy);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: calcPositions\n * \n * Takes the displacements calculated for each cell and applies them to the\n * local cache of cell positions. Limits the displacement to the current\n * temperature.\n */\nmxFastOrganicLayout.prototype.calcPositions = function()\n{\n\tfor (var index = 0; index < this.vertexArray.length; index++)\n\t{\n\t\tif (this.isMoveable[index])\n\t\t{\n\t\t\t// Get the distance of displacement for this node for this\n\t\t\t// iteration\n\t\t\tvar deltaLength = Math.sqrt(this.dispX[index] * this.dispX[index] +\n\t\t\t\tthis.dispY[index] * this.dispY[index]);\n\n\t\t\tif (deltaLength < 0.001)\n\t\t\t{\n\t\t\t\tdeltaLength = 0.001;\n\t\t\t}\n\n\t\t\t// Scale down by the current temperature if less than the\n\t\t\t// displacement distance\n\t\t\tvar newXDisp = this.dispX[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\tvar newYDisp = this.dispY[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\t// reset displacements\n\t\t\tthis.dispX[index] = 0;\n\t\t\tthis.dispY[index] = 0;\n\n\t\t\t// Update the cached cell locations\n\t\t\tthis.cellLocation[index][0] += newXDisp;\n\t\t\tthis.cellLocation[index][1] += newYDisp;\n\t\t}\n\t}\n};\n\n/**\n * Function: calcAttraction\n * \n * Calculates the attractive forces between all laid out nodes linked by\n * edges\n */\nmxFastOrganicLayout.prototype.calcAttraction = function()\n{\n\t// Check the neighbours of each vertex and calculate the attractive\n\t// force of the edge connecting them\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tfor (var k = 0; k < this.neighbours[i].length; k++)\n\t\t{\n\t\t\t// Get the index of the othe cell in the vertex array\n\t\t\tvar j = this.neighbours[i][k];\n\t\t\t\n\t\t\t// Do not proceed self-loops\n\t\t\tif (i != j &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\t// The distance between the nodes\n\t\t\t\tvar deltaLengthSquared = xDelta * xDelta + yDelta\n\t\t\t\t\t\t* yDelta - this.radiusSquared[i] - this.radiusSquared[j];\n\n\t\t\t\tif (deltaLengthSquared < this.minDistanceLimitSquared)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthSquared = this.minDistanceLimitSquared;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar deltaLength = Math.sqrt(deltaLengthSquared);\n\t\t\t\tvar force = (deltaLengthSquared) / this.forceConstant;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] -= displacementX;\n\t\t\t\tthis.dispY[i] -= displacementY;\n\t\t\t\t\n\t\t\t\tthis.dispX[j] += displacementX;\n\t\t\t\tthis.dispY[j] += displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRepulsion\n * \n * Calculates the repulsive forces between all laid out nodes\n */\nmxFastOrganicLayout.prototype.calcRepulsion = function()\n{\n\tvar vertexCount = this.vertexArray.length;\n\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tfor (var j = i; j < vertexCount; j++)\n\t\t{\n\t\t\t// Exits if the layout is no longer allowed to run\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (j != i &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\tif (xDelta == 0)\n\t\t\t\t{\n\t\t\t\t\txDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (yDelta == 0)\n\t\t\t\t{\n\t\t\t\t\tyDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Distance between nodes\n\t\t\t\tvar deltaLength = Math.sqrt((xDelta * xDelta)\n\t\t\t\t\t\t+ (yDelta * yDelta));\n\t\t\t\tvar deltaLengthWithRadius = deltaLength - this.radius[i]\n\t\t\t\t\t\t- this.radius[j];\n\n\t\t\t\tif (deltaLengthWithRadius > this.maxDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\t// Ignore vertices too far apart\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (deltaLengthWithRadius < this.minDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthWithRadius = this.minDistanceLimit;\n\t\t\t\t}\n\n\t\t\t\tvar force = this.forceConstantSquared / deltaLengthWithRadius;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] += displacementX;\n\t\t\t\tthis.dispY[i] += displacementY;\n\n\t\t\t\tthis.dispX[j] -= displacementX;\n\t\t\t\tthis.dispY[j] -= displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reduceTemperature\n * \n * Reduces the temperature of the layout from an initial setting in a linear\n * fashion to zero.\n */\nmxFastOrganicLayout.prototype.reduceTemperature = function()\n{\n\tthis.temperature = this.initialTemp * (1.0 - this.iteration / this.maxIterations);\n};\n\n__mxOutput.mxFastOrganicLayout = typeof mxFastOrganicLayout !== 'undefined' ? mxFastOrganicLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCircleLayout\n * \n * Extends <mxGraphLayout> to implement a circluar layout for a given radius.\n * The vertices do not need to be connected for this layout to work and all\n * connections between vertices are not taken into account.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCircleLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCircleLayout\n *\n * Constructs a new circular layout for the specified radius.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n * radius - Optional radius as an int. Default is 100.\n */\nfunction mxCircleLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.radius = (radius != null) ? radius : 100;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCircleLayout.prototype = new mxGraphLayout();\nmxCircleLayout.prototype.constructor = mxCircleLayout;\n\n/**\n * Variable: radius\n * \n * Integer specifying the size of the radius. Default is 100.\n */\nmxCircleLayout.prototype.radius = null;\n\n/**\n * Variable: moveCircle\n * \n * Boolean specifying if the circle should be moved to the top,\n * left corner specified by <x0> and <y0>. Default is false.\n */\nmxCircleLayout.prototype.moveCircle = false;\n\n/**\n * Variable: x0\n * \n * Integer specifying the left coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.x0 = 0;\n\n/**\n * Variable: y0\n * \n * Integer specifying the top coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.y0 = 0;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCircleLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxCircleLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxCircleLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\t// Gets all vertices inside the parent and finds\n\t\t// the maximum dimension of the largest vertex\n\t\tvar max = 0;\n\t\tvar top = null;\n\t\tvar left = null;\n\t\tvar vertices = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(cell);\n\t\t\t\tvar bounds = this.getVertexBounds(cell);\n\t\t\t\t\n\t\t\t\tif (top == null)\n\t\t\t\t{\n\t\t\t\t\ttop = bounds.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttop = Math.min(top, bounds.y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (left == null)\n\t\t\t\t{\n\t\t\t\t\tleft = bounds.x;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleft = Math.min(left, bounds.x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmax = Math.max(max, Math.max(bounds.width, bounds.height));\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(cell);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \t\tthis.setEdgeStyleEnabled(cell, false);\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar r = this.getRadius(vertices.length, max);\n\n\t\t// Moves the circle to the specified origin\n\t\tif (this.moveCircle)\n\t\t{\n\t\t\tleft = this.x0;\n\t\t\ttop = this.y0;\n\t\t}\n\t\t\n\t\tthis.circle(vertices, r, left, top);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: getRadius\n * \n * Returns the radius to be used for the given vertex count. Max is the maximum\n * width or height of all vertices in the layout.\n */\nmxCircleLayout.prototype.getRadius = function(count, max)\n{\n\treturn Math.max(count * max / Math.PI, this.radius);\n};\n\n/**\n * Function: circle\n * \n * Executes the circular layout for the specified array\n * of vertices and the given radius. This is called from\n * <execute>.\n */\nmxCircleLayout.prototype.circle = function(vertices, r, left, top)\n{\n\tvar vertexCount = vertices.length;\n\tvar phi = 2 * Math.PI / vertexCount;\n\t\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tif (this.isVertexMovable(vertices[i]))\n\t\t{\n\t\t\tthis.setVertexLocation(vertices[i],\n\t\t\t\tMath.round(left + r + r * Math.sin(i * phi)),\n\t\t\t\tMath.round(top + r + r * Math.cos(i * phi)));\n\t\t}\n\t}\n};\n\n__mxOutput.mxCircleLayout = typeof mxCircleLayout !== 'undefined' ? mxCircleLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxParallelEdgeLayout\n * \n * Extends <mxGraphLayout> for arranging parallel edges. This layout works\n * on edges for all pairs of vertices where there is more than one edge\n * connecting the latter.\n * \n * Example:\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * To run the layout for the parallel edges of a changed edge only, the\n * following code can be used.\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * \n * graph.addListener(mxEvent.CELL_CONNECTED, function(sender, evt)\n * {\n *   var model = graph.getModel();\n *   var edge = evt.getProperty('edge');\n *   var src = model.getTerminal(edge, true);\n *   var trg = model.getTerminal(edge, false);\n *   \n *   layout.isEdgeIgnored = function(edge2)\n *   {\n *     var src2 = model.getTerminal(edge2, true);\n *     var trg2 = model.getTerminal(edge2, false);\n *     \n *     return !(model.isEdge(edge2) && ((src == src2 && trg == trg2) || (src == trg2 && trg == src2)));\n *   };\n *   \n *   layout.execute(graph.getDefaultParent());\n * });\n * (end)\n * \n * Constructor: mxParallelEdgeLayout\n * \n * Constructs a new parallel edge layout for the specified graph.\n */\nfunction mxParallelEdgeLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxParallelEdgeLayout.prototype = new mxGraphLayout();\nmxParallelEdgeLayout.prototype.constructor = mxParallelEdgeLayout;\n\n/**\n * Variable: spacing\n * \n * Defines the spacing between the parallels. Default is 20.\n */\nmxParallelEdgeLayout.prototype.spacing = 20;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxParallelEdgeLayout.prototype.execute = function(parent)\n{\n\tvar lookup = this.findParallels(parent);\n\t\n\tthis.graph.model.beginUpdate();\t\n\ttry\n\t{\n\t\tfor (var i in lookup)\n\t\t{\n\t\t\tvar parallels = lookup[i];\n\n\t\t\tif (parallels.length > 1)\n\t\t\t{\n\t\t\t\tthis.layout(parallels);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.model.endUpdate();\n\t}\n};\n\n/**\n * Function: findParallels\n * \n * Finds the parallel edges in the given parent.\n */\nmxParallelEdgeLayout.prototype.findParallels = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar lookup = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (!this.isEdgeIgnored(child))\n\t\t{\n\t\t\tvar id = this.getEdgeId(child);\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tif (lookup[id] == null)\n\t\t\t\t{\n\t\t\t\t\tlookup[id] = [];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlookup[id].push(child);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn lookup;\n};\n\n/**\n * Function: getEdgeId\n * \n * Returns a unique ID for the given edge. The id is independent of the\n * edge direction and is built using the visible terminal of the given\n * edge.\n */\nmxParallelEdgeLayout.prototype.getEdgeId = function(edge)\n{\n\tvar view = this.graph.getView();\n\t\n\t// Cannot used cached visible terminal because this could be triggered in BEFORE_UNDO\n\tvar src = view.getVisibleTerminal(edge, true);\n\tvar trg = view.getVisibleTerminal(edge, false);\n\n\tif (src != null && trg != null)\n\t{\n\t\tsrc = mxObjectIdentity.get(src);\n\t\ttrg = mxObjectIdentity.get(trg);\n\t\t\n\t\treturn (src > trg) ? trg + '-' + src : src + '-' + trg;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: layout\n * \n * Lays out the parallel edges in the given array.\n */\nmxParallelEdgeLayout.prototype.layout = function(parallels)\n{\n\tvar edge = parallels[0];\n\tvar view = this.graph.getView();\n\tvar model = this.graph.getModel();\n\tvar src = model.getGeometry(view.getVisibleTerminal(edge, true));\n\tvar trg = model.getGeometry(view.getVisibleTerminal(edge, false));\n\t\n\t// Routes multiple loops\n\tif (src == trg)\n\t{\n\t\tvar x0 = src.x + src.width + this.spacing;\n\t\tvar y0 = src.y + src.height / 2;\n\n\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t{\n\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\tx0 += this.spacing;\n\t\t}\n\t}\n\telse if (src != null && trg != null)\n\t{\n\t\t// Routes parallel edges\n\t\tvar scx = src.x + src.width / 2;\n\t\tvar scy = src.y + src.height / 2;\n\t\t\n\t\tvar tcx = trg.x + trg.width / 2;\n\t\tvar tcy = trg.y + trg.height / 2;\n\t\t\n\t\tvar dx = tcx - scx;\n\t\tvar dy = tcy - scy;\n\n\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (len > 0)\n\t\t{\n\t\t\tvar x0 = scx + dx / 2;\n\t\t\tvar y0 = scy + dy / 2;\n\t\t\t\n\t\t\tvar nx = dy * this.spacing / len;\n\t\t\tvar ny = dx * this.spacing / len;\n\t\t\t\n\t\t\tx0 += nx * (parallels.length - 1) / 2;\n\t\t\ty0 -= ny * (parallels.length - 1) / 2;\n\t\n\t\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t\t{\n\t\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\t\tx0 -= nx;\n\t\t\t\ty0 += ny;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: route\n * \n * Routes the given edge via the given point.\n */\nmxParallelEdgeLayout.prototype.route = function(edge, x, y)\n{\n\tif (this.graph.isCellMovable(edge))\n\t{\n\t\tthis.setEdgePoints(edge, [new mxPoint(x, y)]);\n\t}\n};\n\n__mxOutput.mxParallelEdgeLayout = typeof mxParallelEdgeLayout !== 'undefined' ? mxParallelEdgeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCompositeLayout\n * \n * Allows to compose multiple layouts into a single layout. The master layout\n * is the layout that handles move operations if another layout than the first\n * element in <layouts> should be used. The <master> layout is not executed as\n * the code assumes that it is part of <layouts>.\n * \n * Example:\n * (code)\n * var first = new mxFastOrganicLayout(graph);\n * var second = new mxParallelEdgeLayout(graph);\n * var layout = new mxCompositeLayout(graph, [first, second], first);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompositeLayout\n *\n * Constructs a new layout using the given layouts. The graph instance is\n * required for creating the transaction that contains all layouts.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * layouts - Array of <mxGraphLayouts>.\n * master - Optional layout that handles moves. If no layout is given then\n * the first layout of the above array is used to handle moves.\n */\nfunction mxCompositeLayout(graph, layouts, master)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.layouts = layouts;\n\tthis.master = master;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompositeLayout.prototype = new mxGraphLayout();\nmxCompositeLayout.prototype.constructor = mxCompositeLayout;\n\t\n/**\n * Variable: layouts\n * \n * Holds the array of <mxGraphLayouts> that this layout contains.\n */\nmxCompositeLayout.prototype.layouts = null;\n\n/**\n * Variable: layouts\n * \n * Reference to the <mxGraphLayouts> that handles moves. If this is null\n * then the first layout in <layouts> is used.\n */\nmxCompositeLayout.prototype.master = null;\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell> by calling move on <master> or the first\n * layout in <layouts>.\n */\nmxCompositeLayout.prototype.moveCell = function(cell, x, y)\n{\n\tif (this.master != null)\n\t{\n\t\tthis.master.moveCell.apply(this.master, arguments);\n\t}\n\telse\n\t{\n\t\tthis.layouts[0].moveCell.apply(this.layouts[0], arguments);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute> by executing all <layouts> in a\n * single transaction.\n */\nmxCompositeLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < this.layouts.length; i++)\n\t\t{\n\t\t\tthis.layouts[i].execute.apply(this.layouts[i], arguments);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n__mxOutput.mxCompositeLayout = typeof mxCompositeLayout !== 'undefined' ? mxCompositeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeLabelLayout\n * \n * Extends <mxGraphLayout> to implement an edge label layout. This layout\n * makes use of cell states, which means the graph must be validated in\n * a graph view (so that the label bounds are available) before this layout\n * can be executed.\n * \n * Example:\n * \n * (code)\n * var layout = new mxEdgeLabelLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxEdgeLabelLayout\n *\n * Constructs a new edge label layout.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n */\nfunction mxEdgeLabelLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxEdgeLabelLayout.prototype = new mxGraphLayout();\nmxEdgeLabelLayout.prototype.constructor = mxEdgeLabelLayout;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxEdgeLabelLayout.prototype.execute = function(parent)\n{\n\tvar view = this.graph.view;\n\tvar model = this.graph.getModel();\n\t\n\t// Gets all vertices and edges inside the parent\n\tvar edges = [];\n\tvar vertices = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar cell = model.getChildAt(parent, i);\n\t\tvar state = view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(state);\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\tedges.push(state);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.placeLabels(vertices, edges);\n};\n\n/**\n * Function: placeLabels\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.placeLabels = function(v, e)\n{\n\tvar model = this.graph.getModel();\n\t\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < e.length; i++)\n\t\t{\n\t\t\tvar edge = e[i];\n\t\t\t\n\t\t\tif (edge != null && edge.text != null &&\n\t\t\t\tedge.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < v.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar vertex = v[j];\n\t\t\t\t\t\n\t\t\t\t\tif (vertex != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.avoid(edge, vertex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: avoid\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.avoid = function(edge, vertex)\n{\n\tvar model = this.graph.getModel();\n\tvar labRect = edge.text.boundingBox;\n\t\n\tif (mxUtils.intersects(labRect, vertex))\n\t{\n\t\tvar dy1 = -labRect.y - labRect.height + vertex.y;\n\t\tvar dy2 = -labRect.y + vertex.y + vertex.height;\n\t\t\n\t\tvar dy = (Math.abs(dy1) < Math.abs(dy2)) ? dy1 : dy2;\n\t\t\n\t\tvar dx1 = -labRect.x - labRect.width + vertex.x;\n\t\tvar dx2 = -labRect.x + vertex.x + vertex.width;\n\t\n\t\tvar dx = (Math.abs(dx1) < Math.abs(dx2)) ? dx1 : dx2;\n\t\t\n\t\tif (Math.abs(dx) < Math.abs(dy))\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\n\t\tvar g = model.getGeometry(edge.cell);\n\t\t\n\t\tif (g != null)\n\t\t{\n\t\t\tg = g.clone();\n\t\t\t\n\t\t\tif (g.offset != null)\n\t\t\t{\n\t\t\t\tg.offset.x += dx;\n\t\t\t\tg.offset.y += dy;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\t\n\t\t\tmodel.setGeometry(edge.cell, g);\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeLabelLayout = typeof mxEdgeLabelLayout !== 'undefined' ? mxEdgeLabelLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphAbstractHierarchyCell\n * \n * An abstraction of an internal hierarchy node or edge\n * \n * Constructor: mxGraphAbstractHierarchyCell\n *\n * Constructs a new hierarchical layout algorithm.\n */\nfunction mxGraphAbstractHierarchyCell()\n{\n\tthis.x = [];\n\tthis.y = [];\n\tthis.temp = [];\n};\n\n/**\n * Variable: maxRank\n * \n * The maximum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.maxRank = -1;\n\n/**\n * Variable: minRank\n * \n * The minimum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.minRank = -1;\n\n/**\n * Variable: x\n * \n * The x position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.x = null;\n\n/**\n * Variable: y\n * \n * The y position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.y = null;\n\n/**\n * Variable: width\n * \n * The width of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.width = 0;\n\n/**\n * Variable: height\n * \n * The height of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.height = 0;\n\n/**\n * Variable: nextLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.nextLayerConnectedCells = null;\n\n/**\n * Variable: previousLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.previousLayerConnectedCells = null;\n\n/**\n * Variable: temp\n * \n * Temporary variable for general use. Generally, try to avoid\n * carrying information between stages. Currently, the longest\n * path layering sets temp to the rank position in fixRanks()\n * and the crossing reduction uses this. This meant temp couldn't\n * be used for hashing the nodes in the model dfs and so hashCode\n * was created\n */\nmxGraphAbstractHierarchyCell.prototype.temp = null;\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.getNextLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: isEdge\n * \n * Returns whether or not this cell is an edge\n */\nmxGraphAbstractHierarchyCell.prototype.isEdge = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isVertex\n * \n * Returns whether or not this cell is a node\n */\nmxGraphAbstractHierarchyCell.prototype.isVertex = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\treturn null;\n};\n\n/**\n * Function: setX\n * \n * Set the value of x for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setX = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.x[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.x[layer - this.minRank - 1] = value;\n\t}\n};\n\n/**\n * Function: getX\n * \n * Gets the value of x on the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getX = function(layer)\n{\n\tif (this.isVertex())\n\t{\n\t\treturn this.x[0];\n\t}\n\telse if (this.isEdge())\n\t{\n\t\treturn this.x[layer - this.minRank - 1];\n\t}\n\n\treturn 0.0;\n};\n\n/**\n * Function: setY\n * \n * Set the value of y for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setY = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.y[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.y[layer -this. minRank - 1] = value;\n\t}\n};\n\n__mxOutput.mxGraphAbstractHierarchyCell = typeof mxGraphAbstractHierarchyCell !== 'undefined' ? mxGraphAbstractHierarchyCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyNode\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyNode\n *\n * Constructs an internal node to represent the specified real graph cell\n *\n * Arguments:\n * \n * cell - the real graph cell this node represents\n */\nfunction mxGraphHierarchyNode(cell)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.cell = cell;\n\tthis.id = mxObjectIdentity.get(cell);\n\tthis.connectsAsTarget = [];\n\tthis.connectsAsSource = [];\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyNode.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyNode.prototype.constructor = mxGraphHierarchyNode;\n\n/**\n * Variable: cell\n * \n * The graph cell this object represents.\n */\nmxGraphHierarchyNode.prototype.cell = null;\n\n/**\n * Variable: id\n * \n * The object identity of the wrapped cell\n */\nmxGraphHierarchyNode.prototype.id = null;\n\n/**\n * Variable: connectsAsTarget\n * \n * Collection of hierarchy edges that have this node as a target\n */\nmxGraphHierarchyNode.prototype.connectsAsTarget = null;\n\n/**\n * Variable: connectsAsSource\n * \n * Collection of hierarchy edges that have this node as a source\n */\nmxGraphHierarchyNode.prototype.connectsAsSource = null;\n\n/**\n * Variable: hashCode\n * \n * Assigns a unique hashcode for each node. Used by the model dfs instead\n * of copying HashSets\n */\nmxGraphHierarchyNode.prototype.hashCode = false;\n\n/**\n * Function: getRankValue\n * \n * Returns the integer value of the layer that this node resides in\n */\nmxGraphHierarchyNode.prototype.getRankValue = function(layer)\n{\n\treturn this.maxRank;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyNode.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\tthis.nextLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsTarget.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsTarget[i];\n\n\t\t\tif (edge.maxRank == -1 || edge.maxRank == layer + 1)\n\t\t\t{\n\t\t\t\t// Either edge is not in any rank or\n\t\t\t\t// no dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.nextLayerConnectedCells[0];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyNode.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\t\tthis.previousLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsSource.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsSource[i];\n\n\t\t\tif (edge.minRank == -1 || edge.minRank == layer - 1)\n\t\t\t{\n\t\t\t\t// No dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[0];\n};\n\n/**\n * Function: isVertex\n * \n * Returns true.\n */\nmxGraphHierarchyNode.prototype.isVertex = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[0];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[0] = value;\n};\n\n/**\n * Function: isAncestor\n */\nmxGraphHierarchyNode.prototype.isAncestor = function(otherNode)\n{\n\t// Firstly, the hash code of this node needs to be shorter than the\n\t// other node\n\tif (otherNode != null && this.hashCode != null && otherNode.hashCode != null\n\t\t\t&& this.hashCode.length < otherNode.hashCode.length)\n\t{\n\t\tif (this.hashCode == otherNode.hashCode)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (this.hashCode == null || this.hashCode == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// Secondly, this hash code must match the start of the other\n\t\t// node's hash code. Arrays.equals cannot be used here since\n\t\t// the arrays are different length, and we do not want to\n\t\t// perform another array copy.\n\t\tfor (var i = 0; i < this.hashCode.length; i++)\n\t\t{\n\t\t\tif (this.hashCode[i] != otherNode.hashCode[i])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the core vertex associated with this wrapper\n */\nmxGraphHierarchyNode.prototype.getCoreCell = function()\n{\n\treturn this.cell;\n};\n\n__mxOutput.mxGraphHierarchyNode = typeof mxGraphHierarchyNode !== 'undefined' ? mxGraphHierarchyNode : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyEdge\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyEdge\n *\n * Constructs a hierarchy edge\n *\n * Arguments:\n * \n * edges - a list of real graph edges this abstraction represents\n */\nfunction mxGraphHierarchyEdge(edges)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.edges = edges;\n\tthis.ids = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.ids.push(mxObjectIdentity.get(edges[i]));\n\t}\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyEdge.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyEdge.prototype.constructor = mxGraphHierarchyEdge;\n\n/**\n * Variable: edges\n * \n * The graph edge(s) this object represents. Parallel edges are all grouped\n * together within one hierarchy edge.\n */\nmxGraphHierarchyEdge.prototype.edges = null;\n\n/**\n * Variable: ids\n * \n * The object identities of the wrapped cells\n */\nmxGraphHierarchyEdge.prototype.ids = null;\n\n/**\n * Variable: source\n * \n * The node this edge is sourced at\n */\nmxGraphHierarchyEdge.prototype.source = null;\n\n/**\n * Variable: target\n * \n * The node this edge targets\n */\nmxGraphHierarchyEdge.prototype.target = null;\n\n/**\n * Variable: isReversed\n * \n * Whether or not the direction of this edge has been reversed\n * internally to create a DAG for the hierarchical layout\n */\nmxGraphHierarchyEdge.prototype.isReversed = false;\n\n/**\n * Function: invert\n * \n * Inverts the direction of this internal edge(s)\n */\nmxGraphHierarchyEdge.prototype.invert = function(layer)\n{\n\tvar temp = this.source;\n\tthis.source = this.target;\n\tthis.target = temp;\n\tthis.isReversed = !this.isReversed;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyEdge.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\t\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.nextLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == this.temp.length - 1)\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn this.nextLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyEdge.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.previousLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: isEdge\n * \n * Returns true.\n */\nmxGraphHierarchyEdge.prototype.isEdge = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[layer - this.minRank - 1];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[layer - this.minRank - 1] = value;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the first core edge associated with this wrapper\n */\nmxGraphHierarchyEdge.prototype.getCoreCell = function()\n{\n\tif (this.edges != null && this.edges.length > 0)\n\t{\n\t\treturn this.edges[0];\n\t}\n\t\n\treturn null;\n};\n\n__mxOutput.mxGraphHierarchyEdge = typeof mxGraphHierarchyEdge !== 'undefined' ? mxGraphHierarchyEdge : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxGraphHierarchyModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxGraphHierarchyModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxGraphHierarchyModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxGraphHierarchyModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxGraphHierarchyModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxGraphHierarchyModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxGraphHierarchyModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxGraphHierarchyModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxGraphHierarchyModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxGraphHierarchyModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxGraphHierarchyModel.prototype.tightenToSource = false;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxGraphHierarchyModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxGraphHierarchyModel.prototype.initialRank = function()\n{\n\tvar startNodes = [];\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = this.SOURCESCANSTARTRANK;\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\t\t\tthis.maxRank = Math.min(this.maxRank, minimumLayer);\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] -= this.maxRank;\n\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n\tfor ( var i = 0; i < startNodesCopy.length; i++)\n\t{\n\t\tvar internalNode = startNodesCopy[i];\n\t\tvar currentMaxLayer = 0;\n\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n\n\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[j];\n\t\t\tvar otherNode = internalEdge.target;\n\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n\t\t\t\t\totherNode.temp[0] + 1);\n\t\t\tcurrentMaxLayer = internalNode.temp[0];\n\t\t}\n\t}\n\t\n\t// Reset the maxRank to that which would be expected for a from-sink\n\t// scan\n\tthis.maxRank = this.SOURCESCANSTARTRANK - this.maxRank;\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxGraphHierarchyModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxGraphHierarchyModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxGraphHierarchyModel = typeof mxGraphHierarchyModel !== 'undefined' ? mxGraphHierarchyModel : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxSwimlaneModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxSwimlaneModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxSwimlaneModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxSwimlaneModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxSwimlaneModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxSwimlaneModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxSwimlaneModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxSwimlaneModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxSwimlaneModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxSwimlaneModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxSwimlaneModel.prototype.tightenToSource = false;\n\n/**\n * Variable: ranksPerGroup\n *\n * An array of the number of ranks within each swimlane\n */\nmxSwimlaneModel.prototype.ranksPerGroup = null;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxSwimlaneModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\tvar swimlanes = layout.swimlanes;\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\t\tinternalVertices[i].swimlaneIndex = -1;\n\n\t\tfor (var ii = 0; ii < swimlanes.length; ii++)\n\t\t{\n\t\t\tif (graph.model.getParent(vertices[i]) == swimlanes[ii])\n\t\t\t{\n\t\t\t\tinternalVertices[i].swimlaneIndex = ii;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxSwimlaneModel.prototype.initialRank = function()\n{\n\tthis.ranksPerGroup = [];\n\t\n\tvar startNodes = [];\n\tvar seen = new Object();\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\t\t\tthis.maxChainDfs(null, internalNode, null, seen, 0);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Calculate the lower and upper rank bounds of each swimlane\n\tvar lowerRank = [];\n\tvar upperRank = [];\n\t\n\tfor (var i = this.ranksPerGroup.length - 1; i >= 0; i--)\n\t{\n\t\tif (i == this.ranksPerGroup.length - 1)\n\t\t{\n\t\t\tlowerRank[i] = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlowerRank[i] = upperRank[i+1] + 1;\n\t\t}\n\t\t\n\t\tupperRank[i] = lowerRank[i] + this.ranksPerGroup[i];\n\t}\n\t\n\tthis.maxRank = upperRank[0];\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\t\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = upperRank[0];\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tif (minimumLayer > upperRank[internalNode.swimlaneIndex])\n\t\t\t{\n\t\t\t\tminimumLayer = upperRank[internalNode.swimlaneIndex];\n\t\t\t}\n\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n//\tfor (var key in this.vertexMapper)\n//\t{\n//\t\tvar internalNode = this.vertexMapper[key];\n//\t\t// Mark the node as not having had a layer assigned\n//\t\tinternalNode.temp[0] -= this.maxRank;\n//\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n//\tfor ( var i = 0; i < startNodesCopy.length; i++)\n//\t{\n//\t\tvar internalNode = startNodesCopy[i];\n//\t\tvar currentMaxLayer = 0;\n//\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n//\n//\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n//\t\t{\n//\t\t\tvar internalEdge = layerDeterminingEdges[j];\n//\t\t\tvar otherNode = internalEdge.target;\n//\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n//\t\t\t\t\totherNode.temp[0] + 1);\n//\t\t\tcurrentMaxLayer = internalNode.temp[0];\n//\t\t}\n//\t}\n};\n\n/**\n * Function: maxChainDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of chains within groups.\n * Any cycles should be removed prior to running, but previously seen cells\n * are ignored.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * seen - a set of all nodes seen by this dfs\n * chainCount - the number of edges in the chain of vertices going through\n * the current swimlane\n */\nmxSwimlaneModel.prototype.maxChainDfs = function(parent, root, connectingEdge, seen, chainCount)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = mxCellPath.create(root.cell);\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvar slIndex = root.swimlaneIndex;\n\t\t\t\n\t\t\tif (this.ranksPerGroup[slIndex] == null || this.ranksPerGroup[slIndex] < chainCount)\n\t\t\t{\n\t\t\t\tthis.ranksPerGroup[slIndex] = chainCount;\n\t\t\t}\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), 0);\n\t\t\t\t}\n\t\t\t\telse if (root.swimlaneIndex == targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), chainCount + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxSwimlaneModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxSwimlaneModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\tvar incomingEdges = root.connectsAsTarget.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\t\t\t\t\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex <= targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < incomingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = incomingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.source;\n\n\t\t\t\t// Only navigate in target->source direction from a lower index \n\t\t\t\t// swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxSwimlaneModel = typeof mxSwimlaneModel !== 'undefined' ? mxSwimlaneModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayoutStage\n * \n * The specific layout interface for hierarchical layouts. It adds a\n * <code>run</code> method with a parameter for the hierarchical layout model\n * that is shared between the layout stages.\n * \n * Constructor: mxHierarchicalLayoutStage\n *\n * Constructs a new hierarchical layout stage.\n */\nfunction mxHierarchicalLayoutStage() { };\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxHierarchicalLayoutStage.prototype.execute = function(parent) { };\n\n__mxOutput.mxHierarchicalLayoutStage = typeof mxHierarchicalLayoutStage !== 'undefined' ? mxHierarchicalLayoutStage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMedianHybridCrossingReduction\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well heuristic to straighten edges as\n * far as possible.\n * \n * Constructor: mxMedianHybridCrossingReduction\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxMedianHybridCrossingReduction(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxMedianHybridCrossingReduction.\n */\nmxMedianHybridCrossingReduction.prototype = new mxHierarchicalLayoutStage();\nmxMedianHybridCrossingReduction.prototype.constructor = mxMedianHybridCrossingReduction;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMedianHybridCrossingReduction.prototype.layout = null;\n\n/**\n * Variable: maxIterations\n * \n * The maximum number of iterations to perform whilst reducing edge\n * crossings. Default is 24.\n */\nmxMedianHybridCrossingReduction.prototype.maxIterations = 24;\n\n/**\n * Variable: nestedBestRanks\n * \n * Stores each rank as a collection of cells in the best order found for\n * each layer so far\n */\nmxMedianHybridCrossingReduction.prototype.nestedBestRanks = null;\n\n/**\n * Variable: currentBestCrossings\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.currentBestCrossings = 0;\n\n/**\n * Variable: iterationsWithoutImprovement\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.iterationsWithoutImprovement = 0;\n\n/**\n * Variable: maxNoImprovementIterations\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.maxNoImprovementIterations = 2;\n\n/**\n * Function: execute\n * \n * Performs a vertex ordering within ranks as described by Gansner et al\n * 1993\n */\nmxMedianHybridCrossingReduction.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\n\t// Stores initial ordering as being the best one found so far\n\tthis.nestedBestRanks = [];\n\t\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.nestedBestRanks[i] = model.ranks[i].slice();\n\t}\n\n\tvar iterationsWithoutImprovement = 0;\n\tvar currentBestCrossings = this.calculateCrossings(model);\n\n\tfor (var i = 0; i < this.maxIterations &&\n\t\titerationsWithoutImprovement < this.maxNoImprovementIterations; i++)\n\t{\n\t\tthis.weightedMedian(i, model);\n\t\tthis.transpose(i, model);\n\t\tvar candidateCrossings = this.calculateCrossings(model);\n\n\t\tif (candidateCrossings < currentBestCrossings)\n\t\t{\n\t\t\tcurrentBestCrossings = candidateCrossings;\n\t\t\titerationsWithoutImprovement = 0;\n\n\t\t\t// Store the current rankings as the best ones\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tthis.nestedBestRanks[j][cell.getGeneralPurposeVariable(j)] = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Increase count of iterations where we haven't improved the\n\t\t\t// layout\n\t\t\titerationsWithoutImprovement++;\n\n\t\t\t// Restore the best values to the cells\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tcell.setGeneralPurposeVariable(j, k);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (currentBestCrossings == 0)\n\t\t{\n\t\t\t// Do nothing further\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Store the best rankings but in the model\n\tvar ranks = [];\n\tvar rankList = [];\n\n\tfor (var i = 0; i < model.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tranks[i] = rankList[i];\n\t}\n\n\tfor (var i = 0; i < this.nestedBestRanks.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.nestedBestRanks[i].length; j++)\n\t\t{\n\t\t\trankList[i].push(this.nestedBestRanks[i][j]);\n\t\t}\n\t}\n\n\tmodel.ranks = ranks;\n};\n\n\n/**\n * Function: calculateCrossings\n * \n * Calculates the total number of edge crossing in the current graph.\n * Returns the current number of edge crossings in the hierarchy graph\n * model in the current candidate layout\n * \n * Parameters:\n * \n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateCrossings = function(model)\n{\n\tvar numRanks = model.ranks.length;\n\tvar totalCrossings = 0;\n\n\tfor (var i = 1; i < numRanks; i++)\n\t{\n\t\ttotalCrossings += this.calculateRankCrossing(i, model);\n\t}\n\t\n\treturn totalCrossings;\n};\n\n/**\n * Function: calculateRankCrossing\n * \n * Calculates the number of edges crossings between the specified rank and\n * the rank below it. Returns the number of edges crossings with the rank\n * beneath\n * \n * Parameters:\n * \n * i -  the topmost rank of the pair ( higher rank value )\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateRankCrossing = function(i, model)\n{\n\tvar totalCrossings = 0;\n\tvar rank = model.ranks[i];\n\tvar previousRank = model.ranks[i - 1];\n\n\tvar tmpIndices = [];\n\n\t// Iterate over the top rank and fill in the connection information\n\tfor (var j = 0; j < rank.length; j++)\n\t{\n\t\tvar node = rank[j];\n\t\tvar rankPosition = node.getGeneralPurposeVariable(i);\n\t\tvar connectedCells = node.getPreviousLayerConnectedCells(i);\n\t\tvar nodeIndices = [];\n\n\t\tfor (var k = 0; k < connectedCells.length; k++)\n\t\t{\n\t\t\tvar connectedNode = connectedCells[k];\n\t\t\tvar otherCellRankPosition = connectedNode.getGeneralPurposeVariable(i - 1);\n\t\t\tnodeIndices.push(otherCellRankPosition);\n\t\t}\n\t\t\n\t\tnodeIndices.sort(function(x, y) { return x - y; });\n\t\ttmpIndices[rankPosition] = nodeIndices;\n\t}\n\t\n\tvar indices = [];\n\n\tfor (var j = 0; j < tmpIndices.length; j++)\n\t{\n\t\tindices = indices.concat(tmpIndices[j]);\n\t}\n\n\tvar firstIndex = 1;\n\t\n\twhile (firstIndex < previousRank.length)\n\t{\n\t\tfirstIndex <<= 1;\n\t}\n\n\tvar treeSize = 2 * firstIndex - 1;\n\tfirstIndex -= 1;\n\n\tvar tree = [];\n\t\n\tfor (var j = 0; j < treeSize; ++j)\n\t{\n\t\ttree[j] = 0;\n\t}\n\n\tfor (var j = 0; j < indices.length; j++)\n\t{\n\t\tvar index = indices[j];\n\t    var treeIndex = index + firstIndex;\n\t    ++tree[treeIndex];\n\t    \n\t    while (treeIndex > 0)\n\t    {\n\t    \tif (treeIndex % 2)\n\t    \t{\n\t    \t\ttotalCrossings += tree[treeIndex + 1];\n\t    \t}\n\t      \n\t    \ttreeIndex = (treeIndex - 1) >> 1;\n\t    \t++tree[treeIndex];\n\t    }\n\t}\n\n\treturn totalCrossings;\n};\n\n/**\n * Function: transpose\n * \n * Takes each possible adjacent cell pair on each rank and checks if\n * swapping them around reduces the number of crossing\n * \n * Parameters:\n * \n * mainLoopIteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.transpose = function(mainLoopIteration, model)\n{\n\tvar improved = true;\n\n\t// Track the number of iterations in case of looping\n\tvar count = 0;\n\tvar maxCount = 10;\n\twhile (improved && count++ < maxCount)\n\t{\n\t\t// On certain iterations allow allow swapping of cell pairs with\n\t\t// equal edge crossings switched or not switched. This help to\n\t\t// nudge a stuck layout into a lower crossing total.\n\t\tvar nudge = mainLoopIteration % 2 == 1 && count % 2 == 1;\n\t\timproved = false;\n\t\t\n\t\tfor (var i = 0; i < model.ranks.length; i++)\n\t\t{\n\t\t\tvar rank = model.ranks[i];\n\t\t\tvar orderedCells = [];\n\t\t\t\n\t\t\tfor (var j = 0; j < rank.length; j++)\n\t\t\t{\n\t\t\t\tvar cell = rank[j];\n\t\t\t\tvar tempRank = cell.getGeneralPurposeVariable(i);\n\t\t\t\t\n\t\t\t\t// FIXME: Workaround to avoid negative tempRanks\n\t\t\t\tif (tempRank < 0)\n\t\t\t\t{\n\t\t\t\t\ttempRank = j;\n\t\t\t\t}\n\t\t\t\torderedCells[tempRank] = cell;\n\t\t\t}\n\t\t\t\n\t\t\tvar leftCellAboveConnections = null;\n\t\t\tvar leftCellBelowConnections = null;\n\t\t\tvar rightCellAboveConnections = null;\n\t\t\tvar rightCellBelowConnections = null;\n\t\t\t\n\t\t\tvar leftAbovePositions = null;\n\t\t\tvar leftBelowPositions = null;\n\t\t\tvar rightAbovePositions = null;\n\t\t\tvar rightBelowPositions = null;\n\t\t\t\n\t\t\tvar leftCell = null;\n\t\t\tvar rightCell = null;\n\n\t\t\tfor (var j = 0; j < (rank.length - 1); j++)\n\t\t\t{\n\t\t\t\t// For each intra-rank adjacent pair of cells\n\t\t\t\t// see if swapping them around would reduce the\n\t\t\t\t// number of edges crossing they cause in total\n\t\t\t\t// On every cell pair except the first on each rank, we\n\t\t\t\t// can save processing using the previous values for the\n\t\t\t\t// right cell on the new left cell\n\t\t\t\tif (j == 0)\n\t\t\t\t{\n\t\t\t\t\tleftCell = orderedCells[j];\n\t\t\t\t\tleftCellAboveConnections = leftCell\n\t\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\t\tleftCellBelowConnections = leftCell\n\t\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\t\t\t\t\tleftAbovePositions = [];\n\t\t\t\t\tleftBelowPositions = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellAboveConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftAbovePositions[k] = leftCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellBelowConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftBelowPositions[k] = leftCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftCellAboveConnections = rightCellAboveConnections;\n\t\t\t\t\tleftCellBelowConnections = rightCellBelowConnections;\n\t\t\t\t\tleftAbovePositions = rightAbovePositions;\n\t\t\t\t\tleftBelowPositions = rightBelowPositions;\n\t\t\t\t\tleftCell = rightCell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trightCell = orderedCells[j + 1];\n\t\t\t\trightCellAboveConnections = rightCell\n\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\trightCellBelowConnections = rightCell\n\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\n\t\t\t\trightAbovePositions = [];\n\t\t\t\trightBelowPositions = [];\n\n\t\t\t\tfor (var k = 0; k < rightCellAboveConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightAbovePositions[k] = rightCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rightCellBelowConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightBelowPositions[k] = rightCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t}\n\n\t\t\t\tvar totalCurrentCrossings = 0;\n\t\t\t\tvar totalSwitchedCrossings = 0;\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftAbovePositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightAbovePositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftAbovePositions[k] > rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftAbovePositions[k] < rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftBelowPositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightBelowPositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftBelowPositions[k] > rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftBelowPositions[k] < rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((totalSwitchedCrossings < totalCurrentCrossings) ||\n\t\t\t\t\t(totalSwitchedCrossings == totalCurrentCrossings &&\n\t\t\t\t\tnudge))\n\t\t\t\t{\n\t\t\t\t\tvar temp = leftCell.getGeneralPurposeVariable(i);\n\t\t\t\t\tleftCell.setGeneralPurposeVariable(i, rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(i));\n\t\t\t\t\trightCell.setGeneralPurposeVariable(i, temp);\n\n\t\t\t\t\t// With this pair exchanged we have to switch all of\n\t\t\t\t\t// values for the left cell to the right cell so the\n\t\t\t\t\t// next iteration for this rank uses it as the left\n\t\t\t\t\t// cell again\n\t\t\t\t\trightCellAboveConnections = leftCellAboveConnections;\n\t\t\t\t\trightCellBelowConnections = leftCellBelowConnections;\n\t\t\t\t\trightAbovePositions = leftAbovePositions;\n\t\t\t\t\trightBelowPositions = leftBelowPositions;\n\t\t\t\t\trightCell = leftCell;\n\t\t\t\t\t\n\t\t\t\t\tif (!nudge)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Don't count nudges as improvement or we'll end\n\t\t\t\t\t\t// up stuck in two combinations and not finishing\n\t\t\t\t\t\t// as early as we should\n\t\t\t\t\t\timproved = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: weightedMedian\n * \n * Sweeps up or down the layout attempting to minimise the median placement\n * of connected cells on adjacent ranks\n * \n * Parameters:\n * \n * iteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.weightedMedian = function(iteration, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (iteration % 2 == 0);\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank - 1; j >= 0; j--)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 1; j < model.maxRank; j++)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianRank\n * \n * Attempts to minimise the median placement of connected cells on this rank\n * and one of the adjacent ranks\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * downwardSweep - whether or not this is a downward sweep through the graph\n */\nmxMedianHybridCrossingReduction.prototype.medianRank = function(rankValue, downwardSweep)\n{\n\tvar numCellsForRank = this.nestedBestRanks[rankValue].length;\n\tvar medianValues = [];\n\tvar reservedPositions = [];\n\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tvar cell = this.nestedBestRanks[rankValue][i];\n\t\tvar sorterEntry = new MedianCellSorter();\n\t\tsorterEntry.cell = cell;\n\n\t\t// Flip whether or not equal medians are flipped on up and down\n\t\t// sweeps\n\t\t// TODO re-implement some kind of nudge\n\t\t// medianValues[i].nudge = !downwardSweep;\n\t\tvar nextLevelConnectedCells;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\t\n\t\tvar nextRankValue;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextRankValue = rankValue + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextRankValue = rankValue - 1;\n\t\t}\n\n\t\tif (nextLevelConnectedCells != null\n\t\t\t\t&& nextLevelConnectedCells.length != 0)\n\t\t{\n\t\t\tsorterEntry.medianValue = this.medianValue(\n\t\t\t\t\tnextLevelConnectedCells, nextRankValue);\n\t\t\tmedianValues.push(sorterEntry);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Nodes with no adjacent vertices are flagged in the reserved array\n\t\t\t// to indicate they should be left in their current position.\n\t\t\treservedPositions[cell.getGeneralPurposeVariable(rankValue)] = true;\n\t\t}\n\t}\n\t\n\tmedianValues.sort(MedianCellSorter.prototype.compare);\n\t\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tif (reservedPositions[i] == null)\n\t\t{\n\t\t\tvar cell = medianValues.shift().cell;\n\t\t\tcell.setGeneralPurposeVariable(rankValue, i);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianValue\n * \n * Calculates the median rank order positioning for the specified cell using\n * the connected cells on the specified rank. Returns the median rank\n * ordering value of the connected cells\n * \n * Parameters:\n * \n * connectedCells - the cells on the specified rank connected to the\n * specified cell\n * rankValue - the rank that the connected cell lie upon\n */\nmxMedianHybridCrossingReduction.prototype.medianValue = function(connectedCells, rankValue)\n{\n\tvar medianValues = [];\n\tvar arrayCount = 0;\n\t\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tvar cell = connectedCells[i];\n\t\tmedianValues[arrayCount++] = cell.getGeneralPurposeVariable(rankValue);\n\t}\n\n\t// Sort() sorts lexicographically by default (i.e. 11 before 9) so force\n\t// numerical order sort\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (arrayCount % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(arrayCount / 2)];\n\t}\n\telse if (arrayCount == 2)\n\t{\n\t\treturn ((medianValues[0] + medianValues[1]) / 2.0);\n\t}\n\telse\n\t{\n\t\tvar medianPoint = arrayCount / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1] - medianValues[0];\n\t\tvar rightMedian = medianValues[arrayCount - 1]\n\t\t\t\t- medianValues[medianPoint];\n\n\t\treturn (medianValues[medianPoint - 1] * rightMedian + medianValues[medianPoint]\n\t\t\t\t* leftMedian)\n\t\t\t\t/ (leftMedian + rightMedian);\n\t}\n};\n\n/**\n * Class: MedianCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the median\n * values. Does not violate (x.compareTo(y)==0) == (x.equals(y))\n *\n * Constructor: MedianCellSorter\n * \n * Constructs a new median cell sorter.\n */\nfunction MedianCellSorter()\n{\n\t// empty\n};\n\n/**\n * Variable: medianValue\n * \n * The weighted value of the cell stored.\n */\nMedianCellSorter.prototype.medianValue = 0;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated\n */\nMedianCellSorter.prototype.cell = false;\n\n/**\n * Function: compare\n * \n * Compares two MedianCellSorters.\n */\nMedianCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.medianValue > a.medianValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.medianValue < a.medianValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxMedianHybridCrossingReduction = typeof mxMedianHybridCrossingReduction !== 'undefined' ? mxMedianHybridCrossingReduction : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMinimumCycleRemover\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxMinimumCycleRemover\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxMinimumCycleRemover(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxMinimumCycleRemover.prototype = new mxHierarchicalLayoutStage();\nmxMinimumCycleRemover.prototype.constructor = mxMinimumCycleRemover;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMinimumCycleRemover.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxMinimumCycleRemover.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodesArray = model.vertexMapper.getValues();\n\tvar unseenNodes = new Object();\n\t\n\tfor (var i = 0; i < unseenNodesArray.length; i++)\n\t{\n\t\tunseenNodes[unseenNodesArray[i].id] = unseenNodesArray[i];\n\t}\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, rootsArray, true, null);\n\n\t// If there are any nodes that should be nodes that the dfs can miss\n\t// these need to be processed with the dfs and the roots assigned\n\t// correctly to form a correct internal model\n\tvar seenNodesCopy = mxUtils.clone(seenNodes, null, true);\n\n\t// Pick a random cell and dfs from it\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, unseenNodes, true, seenNodesCopy);\n};\n\n__mxOutput.mxMinimumCycleRemover = typeof mxMinimumCycleRemover !== 'undefined' ? mxMinimumCycleRemover : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCoordinateAssignment\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well as heuristics to straighten edges as\n * far as possible.\n * \n * Constructor: mxCoordinateAssignment\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxCoordinateAssignment(layout, intraCellSpacing, interRankCellSpacing,\n\torientation, initialX, parallelEdgeSpacing)\n{\n\tthis.layout = layout;\n\tthis.intraCellSpacing = intraCellSpacing;\n\tthis.interRankCellSpacing = interRankCellSpacing;\n\tthis.orientation = orientation;\n\tthis.initialX = initialX;\n\tthis.parallelEdgeSpacing = parallelEdgeSpacing;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxCoordinateAssignment.prototype = new mxHierarchicalLayoutStage();\nmxCoordinateAssignment.prototype.constructor = mxCoordinateAssignment;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxCoordinateAssignment.prototype.layout = null;\n\n/**\n * Variable: intraCellSpacing\n * \n * The minimum buffer between cells on the same rank. Default is 30.\n */\nmxCoordinateAssignment.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The minimum distance between cells on adjacent ranks. Default is 100.\n */\nmxCoordinateAssignment.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxCoordinateAssignment.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: maxIterations\n * \n * The number of heuristic iterations to run. Default is 8.\n */\nmxCoordinateAssignment.prototype.maxIterations = 8;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex Default is 5.\n */\nmxCoordinateAssignment.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex Default is 2.\n */\nmxCoordinateAssignment.prototype.prefVertEdgeOff = 2;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex Default is 12.\n */\nmxCoordinateAssignment.prototype.minEdgeJetty = 12;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed Default is 4.\n */\nmxCoordinateAssignment.prototype.channelBuffer = 4;\n\n/**\n * Variable: jettyPositions\n * \n * Map of internal edges and (x,y) pair of positions of the start and end jetty\n * for that edge where it connects to the source and target vertices.\n * Note this should technically be a WeakHashMap, but since JS does not\n * have an equivalent, housekeeping must be performed before using.\n * i.e. check all edges are still in the model and clear the values.\n * Note that the y co-ord is the offset of the jetty, not the\n * absolute point\n */\nmxCoordinateAssignment.prototype.jettyPositions = null;\n\n/**\n * Variable: orientation\n * \n * The position of the root ( start ) node(s) relative to the rest of the\n * laid out graph. Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxCoordinateAssignment.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: initialX\n * \n * The minimum x position node placement starts at\n */\nmxCoordinateAssignment.prototype.initialX = null;\n\n/**\n * Variable: limitX\n * \n * The maximum x value this positioning lays up to\n */\nmxCoordinateAssignment.prototype.limitX = null;\n\n/**\n * Variable: currentXDelta\n * \n * The sum of x-displacements for the current iteration\n */\nmxCoordinateAssignment.prototype.currentXDelta = null;\n\n/**\n * Variable: widestRank\n * \n * The rank that has the widest x position\n */\nmxCoordinateAssignment.prototype.widestRank = null;\n\n/**\n * Variable: rankTopY\n * \n * Internal cache of top-most values of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankTopY = null;\n\n/**\n * Variable: rankBottomY\n * \n * Internal cache of bottom-most value of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankBottomY = null;\n\n/**\n * Variable: widestRankValue\n * \n * The X-coordinate of the edge of the widest rank\n */\nmxCoordinateAssignment.prototype.widestRankValue = null;\n\n/**\n * Variable: rankWidths\n * \n * The width of all the ranks\n */\nmxCoordinateAssignment.prototype.rankWidths = null;\n\n/**\n * Variable: rankY\n * \n * The Y-coordinate of all the ranks\n */\nmxCoordinateAssignment.prototype.rankY = null;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxCoordinateAssignment.prototype.fineTuning = true;\n\n/**\n * Variable: nextLayerConnectedCache\n * \n * A store of connections to the layer above for speed\n */\nmxCoordinateAssignment.prototype.nextLayerConnectedCache = null;\n\n/**\n * Variable: previousLayerConnectedCache\n * \n * A store of connections to the layer below for speed\n */\nmxCoordinateAssignment.prototype.previousLayerConnectedCache = null;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents Default is 10.\n */\nmxCoordinateAssignment.prototype.groupPadding = 10;\n\n/**\n * Utility method to display current positions\n */\nmxCoordinateAssignment.prototype.printStatus = function()\n{\n\tvar model = this.layout.getModel();\n\tmxLog.show();\n\n\tmxLog.writeln('======Coord assignment debug=======');\n\n\tfor (var j = 0; j < model.ranks.length; j++)\n\t{\n\t\tmxLog.write('Rank ', j, ' : ' );\n\t\tvar rank = model.ranks[j];\n\t\t\n\t\tfor (var k = 0; k < rank.length; k++)\n\t\t{\n\t\t\tvar cell = rank[k];\n\t\t\t\n\t\t\tmxLog.write(cell.getGeneralPurposeVariable(j), '  ');\n\t\t}\n\t\tmxLog.writeln();\n\t}\n\t\n\tmxLog.writeln('====================================');\n};\n\n/**\n * Function: execute\n * \n * A basic horizontal coordinate assignment algorithm\n */\nmxCoordinateAssignment.prototype.execute = function(parent)\n{\n\tthis.jettyPositions = Object();\n\tvar model = this.layout.getModel();\n\tthis.currentXDelta = 0.0;\n\n\tthis.initialCoords(this.layout.getGraph(), model);\n\t\n//\tthis.printStatus();\n\t\n\tif (this.fineTuning)\n\t{\n\t\tthis.minNode(model);\n\t}\n\t\n\tvar bestXDelta = 100000000.0;\n\t\n\tif (this.fineTuning)\n\t{\n\t\tfor (var i = 0; i < this.maxIterations; i++)\n\t\t{\n//\t\t\tthis.printStatus();\n\t\t\n\t\t\t// Median Heuristic\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tthis.medianPos(i, model);\n\t\t\t\tthis.minNode(model);\n\t\t\t}\n\t\t\t\n\t\t\t// if the total offset is less for the current positioning,\n\t\t\t// there are less heavily angled edges and so the current\n\t\t\t// positioning is used\n\t\t\tif (this.currentXDelta < bestXDelta)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setX(j, cell.getGeneralPurposeVariable(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbestXDelta = this.currentXDelta;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Restore the best positions\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setGeneralPurposeVariable(j, cell.getX(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.minPath(this.layout.getGraph(), model);\n\t\t\t\n\t\t\tthis.currentXDelta = 0;\n\t\t}\n\t}\n\t\n\tthis.setCellLocations(this.layout.getGraph(), model);\n};\n\n/**\n * Function: minNode\n * \n * Performs one median positioning sweep in both directions\n */\nmxCoordinateAssignment.prototype.minNode = function(model)\n{\n\t// Queue all nodes\n\tvar nodeList = [];\n\t\n\t// Need to be able to map from cell to cellWrapper\n\tvar map = new mxDictionary();\n\tvar rank = [];\n\t\n\tfor (var i = 0; i <= model.maxRank; i++)\n\t{\n\t\trank[i] = model.ranks[i];\n\t\t\n\t\tfor (var j = 0; j < rank[i].length; j++)\n\t\t{\n\t\t\t// Use the weight to store the rank and visited to store whether\n\t\t\t// or not the cell is in the list\n\t\t\tvar node = rank[i][j];\n\t\t\tvar nodeWrapper = new WeightedCellSorter(node, i);\n\t\t\tnodeWrapper.rankIndex = j;\n\t\t\tnodeWrapper.visited = true;\n\t\t\tnodeList.push(nodeWrapper);\n\t\t\t\n\t\t\tmap.put(node, nodeWrapper);\n\t\t}\n\t}\n\t\n\t// Set a limit of the maximum number of times we will access the queue\n\t// in case a loop appears\n\tvar maxTries = nodeList.length * 10;\n\tvar count = 0;\n\t\n\t// Don't move cell within this value of their median\n\tvar tolerance = 1;\n\t\n\twhile (nodeList.length > 0 && count <= maxTries)\n\t{\n\t\tvar cellWrapper = nodeList.shift();\n\t\tvar cell = cellWrapper.cell;\n\t\t\n\t\tvar rankValue = cellWrapper.weightedValue;\n\t\tvar rankIndex = parseInt(cellWrapper.rankIndex);\n\t\t\n\t\tvar nextLayerConnectedCells = cell.getNextLayerConnectedCells(rankValue);\n\t\tvar previousLayerConnectedCells = cell.getPreviousLayerConnectedCells(rankValue);\n\t\t\n\t\tvar numNextLayerConnected = nextLayerConnectedCells.length;\n\t\tvar numPreviousLayerConnected = previousLayerConnectedCells.length;\n\n\t\tvar medianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\trankValue + 1);\n\t\tvar medianPreviousLevel = this.medianXValue(previousLayerConnectedCells,\n\t\t\t\trankValue - 1);\n\n\t\tvar numConnectedNeighbours = numNextLayerConnected\n\t\t\t\t+ numPreviousLayerConnected;\n\t\tvar currentPosition = cell.getGeneralPurposeVariable(rankValue);\n\t\tvar cellMedian = currentPosition;\n\t\t\n\t\tif (numConnectedNeighbours > 0)\n\t\t{\n\t\t\tcellMedian = (medianNextLevel * numNextLayerConnected + medianPreviousLevel\n\t\t\t\t\t* numPreviousLayerConnected)\n\t\t\t\t\t/ numConnectedNeighbours;\n\t\t}\n\n\t\t// Flag storing whether or not position has changed\n\t\tvar positionChanged = false;\n\t\t\n\t\tif (cellMedian < currentPosition - tolerance)\n\t\t{\n\t\t\tif (rankIndex == 0)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar leftCell = rank[rankValue][rankIndex - 1];\n\t\t\t\tvar leftLimit = leftCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\t\t\tif (leftLimit < cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (leftLimit < cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t- tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (cellMedian > currentPosition + tolerance)\n\t\t{\n\t\t\tvar rankSize = rank[rankValue].length;\n\t\t\t\n\t\t\tif (rankIndex == rankSize - 1)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar rightCell = rank[rankValue][rankIndex + 1];\n\t\t\t\tvar rightLimit = rightCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\t\t\t\t\n\t\t\t\tif (rightLimit > cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (rightLimit > cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t+ tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (positionChanged)\n\t\t{\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < nextLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = nextLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\t\t\t\t\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < previousLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = previousLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tcellWrapper.visited = false;\n\t\tcount++;\n\t}\n};\n\n/**\n * Function: medianPos\n * \n * Performs one median positioning sweep in one direction\n * \n * Parameters:\n * \n * i - the iteration of the whole process\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.medianPos = function(i, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (i % 2 == 0);\n\t\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank; j > 0; j--)\n\t\t{\n\t\t\tthis.rankMedianPosition(j - 1, model, j);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 0; j < model.maxRank - 1; j++)\n\t\t{\n\t\t\tthis.rankMedianPosition(j + 1, model, j);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankMedianPosition\n * \n * Performs median minimisation over one rank.\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * model - an internal model of the hierarchical layout\n * nextRankValue - the layer number whose connected cels are to be laid out\n * relative to\n */\nmxCoordinateAssignment.prototype.rankMedianPosition = function(rankValue, model, nextRankValue)\n{\n\tvar rank = model.ranks[rankValue];\n\n\t// Form an array of the order in which the cell are to be processed\n\t// , the order is given by the weighted sum of the in or out edges,\n\t// depending on whether we're traveling up or down the hierarchy.\n\tvar weightedValues = [];\n\tvar cellMap = new Object();\n\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar currentCell = rank[i];\n\t\tweightedValues[i] = new WeightedCellSorter();\n\t\tweightedValues[i].cell = currentCell;\n\t\tweightedValues[i].rankIndex = i;\n\t\tcellMap[currentCell.id] = weightedValues[i];\n\t\tvar nextLayerConnectedCells = null;\n\t\t\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\n\t\t// Calculate the weighing based on this node type and those this\n\t\t// node is connected to on the next layer\n\t\tweightedValues[i].weightedValue = this.calculatedWeightedValue(\n\t\t\t\tcurrentCell, nextLayerConnectedCells);\n\t}\n\n\tweightedValues.sort(WeightedCellSorter.prototype.compare);\n\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\t\n\tfor (var i = 0; i < weightedValues.length; i++)\n\t{\n\t\tvar numConnectionsNextLevel = 0;\n\t\tvar cell = weightedValues[i].cell;\n\t\tvar nextLayerConnectedCells = null;\n\t\tvar medianNextLevel = 0;\n\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getPreviousLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getNextLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\n\t\tif (nextLayerConnectedCells != null)\n\t\t{\n\t\t\tnumConnectionsNextLevel = nextLayerConnectedCells.length;\n\t\t\t\n\t\t\tif (numConnectionsNextLevel > 0)\n\t\t\t{\n\t\t\t\tmedianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\t\t\tnextRankValue);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// For case of no connections on the next level set the\n\t\t\t\t// median to be the current position and try to be\n\t\t\t\t// positioned there\n\t\t\t\tmedianNextLevel = cell.getGeneralPurposeVariable(rankValue);\n\t\t\t}\n\t\t}\n\n\t\tvar leftBuffer = 0.0;\n\t\tvar leftLimit = -100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex - 1; j >= 0;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar leftCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\tleftLimit = leftCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t+ leftCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t+ this.intraCellSpacing\n\t\t\t\t\t\t\t+ leftBuffer + cell.width / 2.0;\n\t\t\t\t\tj = -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftBuffer += leftCell.width + this.intraCellSpacing;\n\t\t\t\t\tj--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar rightBuffer = 0.0;\n\t\tvar rightLimit = 100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex + 1; j < weightedValues.length;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar rightCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\trightLimit = rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t- rightCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t- this.intraCellSpacing\n\t\t\t\t\t\t\t- rightBuffer - cell.width / 2.0;\n\t\t\t\t\tj = weightedValues.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trightBuffer += rightCell.width + this.intraCellSpacing;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (medianNextLevel >= leftLimit && medianNextLevel <= rightLimit)\n\t\t{\n\t\t\tcell.setGeneralPurposeVariable(rankValue, medianNextLevel);\n\t\t}\n\t\telse if (medianNextLevel < leftLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\tthis.currentXDelta += leftLimit - medianNextLevel;\n\t\t}\n\t\telse if (medianNextLevel > rightLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\tthis.currentXDelta += medianNextLevel - rightLimit;\n\t\t}\n\n\t\tweightedValues[i].visited = true;\n\t}\n};\n\n/**\n * Function: calculatedWeightedValue\n * \n * Calculates the priority the specified cell has based on the type of its\n * cell and the cells it is connected to on the next layer\n * \n * Parameters:\n * \n * currentCell - the cell whose weight is to be calculated\n * collection - the cells the specified cell is connected to\n */\nmxCoordinateAssignment.prototype.calculatedWeightedValue = function(currentCell, collection)\n{\n\tvar totalWeight = 0;\n\t\n\tfor (var i = 0; i < collection.length; i++)\n\t{\n\t\tvar cell = collection[i];\n\n\t\tif (currentCell.isVertex() && cell.isVertex())\n\t\t{\n\t\t\ttotalWeight++;\n\t\t}\n\t\telse if (currentCell.isEdge() && cell.isEdge())\n\t\t{\n\t\t\ttotalWeight += 8;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttotalWeight += 2;\n\t\t}\n\t}\n\n\treturn totalWeight;\n};\n\n/**\n * Function: medianXValue\n * \n * Calculates the median position of the connected cell on the specified\n * rank\n * \n * Parameters:\n * \n * connectedCells - the cells the candidate connects to on this level\n * rankValue - the layer number of this rank\n */\nmxCoordinateAssignment.prototype.medianXValue = function(connectedCells, rankValue)\n{\n\tif (connectedCells.length == 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar medianValues = [];\n\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tmedianValues[i] = connectedCells[i].getGeneralPurposeVariable(rankValue);\n\t}\n\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (connectedCells.length % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(connectedCells.length / 2)];\n\t}\n\telse\n\t{\n\t\tvar medianPoint = connectedCells.length / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1];\n\t\tvar rightMedian = medianValues[medianPoint];\n\n\t\treturn ((leftMedian + rightMedian) / 2);\n\t}\n};\n\n/**\n * Function: initialCoords\n * \n * Sets up the layout in an initial positioning. The ranks are all centered\n * as much as possible along the middle vertex in each rank. The other cells\n * are then placed as close as possible on either side.\n * \n * Parameters:\n * \n * facade - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.initialCoords = function(facade, model)\n{\n\tthis.calculateWidestRank(facade, model);\n\n\t// Sweep up and down from the widest rank\n\tfor (var i = this.widestRank; i >= 0; i--)\n\t{\n\t\tif (i < model.maxRank)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n\n\tfor (var i = this.widestRank+1; i <= model.maxRank; i++)\n\t{\n\t\tif (i > 0)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankCoordinates\n * \n * Sets up the layout in an initial positioning. All the first cells in each\n * rank are moved to the left and the rest of the rank inserted as close\n * together as their size and buffering permits. This method works on just\n * the specified rank.\n * \n * Parameters:\n * \n * rankValue - the current rank being processed\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.rankCoordinates = function(rankValue, graph, model)\n{\n\tvar rank = model.ranks[rankValue];\n\tvar maxY = 0.0;\n\tvar localX = this.initialX + (this.widestRankValue - this.rankWidths[rankValue])\n\t\t\t/ 2;\n\n\t// Store whether or not any of the cells' bounds were unavailable so\n\t// to only issue the warning once for all cells\n\tvar boundsWarning = false;\n\t\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar node = rank[i];\n\t\t\n\t\tif (node.isVertex())\n\t\t{\n\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tboundsWarning = true;\n\t\t\t}\n\n\t\t\tmaxY = Math.max(maxY, node.height);\n\t\t}\n\t\telse if (node.isEdge())\n\t\t{\n\t\t\t// The width is the number of additional parallel edges\n\t\t\t// time the parallel edge spacing\n\t\t\tvar numEdges = 1;\n\n\t\t\tif (node.edges != null)\n\t\t\t{\n\t\t\t\tnumEdges = node.edges.length;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t}\n\n\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t}\n\n\t\t// Set the initial x-value as being the best result so far\n\t\tlocalX += node.width / 2.0;\n\t\tnode.setX(rankValue, localX);\n\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\tlocalX += node.width / 2.0;\n\t\tlocalX += this.intraCellSpacing;\n\t}\n\n\tif (boundsWarning == true)\n\t{\n\t\tmxLog.warn('At least one cell has no bounds');\n\t}\n};\n\n/**\n * Function: calculateWidestRank\n * \n * Calculates the width rank in the hierarchy. Also set the y value of each\n * rank whilst performing the calculation\n * \n * Parameters:\n * \n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.calculateWidestRank = function(graph, model)\n{\n\t// Starting y co-ordinate\n\tvar y = -this.interRankCellSpacing;\n\t\n\t// Track the widest cell on the last rank since the y\n\t// difference depends on it\n\tvar lastRankMaxCellHeight = 0.0;\n\tthis.rankWidths = [];\n\tthis.rankY = [];\n\n\tfor (var rankValue = model.maxRank; rankValue >= 0; rankValue--)\n\t{\n\t\t// Keep track of the widest cell on this rank\n\t\tvar maxCellHeight = 0.0;\n\t\tvar rank = model.ranks[rankValue];\n\t\tvar localX = this.initialX;\n\n\t\t// Store whether or not any of the cells' bounds were unavailable so\n\t\t// to only issue the warning once for all cells\n\t\tvar boundsWarning = false;\n\t\t\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar node = rank[i];\n\n\t\t\tif (node.isVertex())\n\t\t\t{\n\t\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tboundsWarning = true;\n\t\t\t\t}\n\n\t\t\t\tmaxCellHeight = Math.max(maxCellHeight, node.height);\n\t\t\t}\n\t\t\telse if (node.isEdge())\n\t\t\t{\n\t\t\t\t// The width is the number of additional parallel edges\n\t\t\t\t// time the parallel edge spacing\n\t\t\t\tvar numEdges = 1;\n\n\t\t\t\tif (node.edges != null)\n\t\t\t\t{\n\t\t\t\t\tnumEdges = node.edges.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t\t}\n\n\t\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t\t}\n\n\t\t\t// Set the initial x-value as being the best result so far\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tnode.setX(rankValue, localX);\n\t\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tlocalX += this.intraCellSpacing;\n\n\t\t\tif (localX > this.widestRankValue)\n\t\t\t{\n\t\t\t\tthis.widestRankValue = localX;\n\t\t\t\tthis.widestRank = rankValue;\n\t\t\t}\n\n\t\t\tthis.rankWidths[rankValue] = localX;\n\t\t}\n\n\t\tif (boundsWarning == true)\n\t\t{\n\t\t\tmxLog.warn('At least one cell has no bounds');\n\t\t}\n\n\t\tthis.rankY[rankValue] = y;\n\t\tvar distanceToNextRank = maxCellHeight / 2.0\n\t\t\t\t+ lastRankMaxCellHeight / 2.0 + this.interRankCellSpacing;\n\t\tlastRankMaxCellHeight = maxCellHeight;\n\n\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.orientation == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\ty += distanceToNextRank;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty -= distanceToNextRank;\n\t\t}\n\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar cell = rank[i];\n\t\t\tcell.setY(rankValue, y);\n\t\t}\n\t}\n};\n\n/**\n * Function: minPath\n * \n * Straightens out chains of virtual nodes where possibleacade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.minPath = function(graph, model)\n{\n\t// Work down and up each edge with at least 2 control points\n\t// trying to straighten each one out. If the same number of\n\t// straight segments are formed in both directions, the \n\t// preferred direction used is the one where the final\n\t// control points have the least offset from the connectable \n\t// region of the terminating vertices\n\tvar edges = model.edgeMapper.getValues();\n\t\n\tfor (var j = 0; j < edges.length; j++)\n\t{\n\t\tvar cell = edges[j];\n\t\t\n\t\tif (cell.maxRank - cell.minRank - 1 < 1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// At least two virtual nodes in the edge\n\t\t// Check first whether the edge is already straight\n\t\tvar referenceX = cell\n\t\t\t\t.getGeneralPurposeVariable(cell.minRank + 1);\n\t\tvar edgeStraight = true;\n\t\tvar refSegCount = 0;\n\t\t\n\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t{\n\t\t\tvar x = cell.getGeneralPurposeVariable(i);\n\n\t\t\tif (referenceX != x)\n\t\t\t{\n\t\t\t\tedgeStraight = false;\n\t\t\t\treferenceX = x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trefSegCount++;\n\t\t\t}\n\t\t}\n\n\t\tif (!edgeStraight)\n\t\t{\n\t\t\tvar upSegCount = 0;\n\t\t\tvar downSegCount = 0;\n\t\t\tvar upXPositions = [];\n\t\t\tvar downXPositions = [];\n\n\t\t\tvar currentX = cell.getGeneralPurposeVariable(cell.minRank + 1);\n\n\t\t\tfor (var i = cell.minRank + 1; i < cell.maxRank - 1; i++)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment up with the current control point.\n\t\t\t\tvar nextX = cell.getX(i + 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i + 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = nextX;\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\n\t\t\tcurrentX = cell.getX(i);\n\n\t\t\tfor (var i = cell.maxRank - 1; i > cell.minRank + 1; i--)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment down with the current control point.\n\t\t\t\tvar nextX = cell.getX(i - 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i - 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = cell.getX(i-1);\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (downSegCount > refSegCount || upSegCount > refSegCount)\n\t\t\t{\n\t\t\t\tif (downSegCount >= upSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply down calculation values\n\t\t\t\t\tfor (var i = cell.maxRank - 2; i > cell.minRank; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, downXPositions[i - cell.minRank - 1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (upSegCount > downSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply up calculation values\n\t\t\t\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, upXPositions[i - cell.minRank - 2]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Neither direction provided a favourable result\n\t\t\t\t\t// But both calculations are better than the\n\t\t\t\t\t// existing solution, so apply the one with minimal\n\t\t\t\t\t// offset to attached vertices at either end.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: repositionValid\n * \n * Determines whether or not a node may be moved to the specified x \n * position on the specified rank\n * \n * Parameters:\n *\n * model - the layout model\n * cell - the cell being analysed\n * rank - the layer of the cell\n * position - the x position being sought\n */\nmxCoordinateAssignment.prototype.repositionValid = function(model, cell, rank, position)\n{\n\tvar rankArray = model.ranks[rank];\n\tvar rankIndex = -1;\n\n\tfor (var i = 0; i < rankArray.length; i++)\n\t{\n\t\tif (cell == rankArray[i])\n\t\t{\n\t\t\trankIndex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (rankIndex < 0)\n\t{\n\t\treturn false;\n\t}\n\n\tvar currentX = cell.getGeneralPurposeVariable(rank);\n\n\tif (position < currentX)\n\t{\n\t\t// Trying to move node to the left.\n\t\tif (rankIndex == 0)\n\t\t{\n\t\t\t// Left-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar leftCell = rankArray[rankIndex - 1];\n\t\tvar leftLimit = leftCell.getGeneralPurposeVariable(rank);\n\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\tif (leftLimit <= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (position > currentX)\n\t{\n\t\t// Trying to move node to the right.\n\t\tif (rankIndex == rankArray.length - 1)\n\t\t{\n\t\t\t// Right-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar rightCell = rankArray[rankIndex + 1];\n\t\tvar rightLimit = rightCell.getGeneralPurposeVariable(rank);\n\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\n\t\tif (rightLimit >= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Function: setCellLocations\n * \n * Sets the cell locations in the facade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the input graph\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.setCellLocations = function(graph, model)\n{\n\tthis.rankTopY = [];\n\tthis.rankBottomY = [];\n\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.rankTopY[i] = Number.MAX_VALUE;\n\t\tthis.rankBottomY[i] = -Number.MAX_VALUE;\n\t}\n\t\n\tvar vertices = model.vertexMapper.getValues();\n\n\t// Process vertices all first, since they define the lower and \n\t// limits of each rank. Between these limits lie the channels\n\t// where the edges can be routed across the graph\n\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tthis.setVertexLocation(vertices[i]);\n\t}\n\t\n\t// Post process edge styles. Needs the vertex locations set for initial\n\t// values of the top and bottoms of each rank\n\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.ORTHOGONAL\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.POLYLINE\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t{\n\t\tthis.localEdgeProcessing(model);\n\t}\n\n\tvar edges = model.edgeMapper.getValues();\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.setEdgePosition(edges[i]);\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n * \n * Separates the x position of edges as they connect to vertices\n * \n * Parameters:\n *\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.localEdgeProcessing = function(model)\n{\n\t// Iterate through each vertex, look at the edges connected in\n\t// both directions.\n\tfor (var rankIndex = 0; rankIndex < model.ranks.length; rankIndex++)\n\t{\n\t\tvar rank = model.ranks[rankIndex];\n\n\t\tfor (var cellIndex = 0; cellIndex < rank.length; cellIndex++)\n\t\t{\n\t\t\tvar cell = rank[cellIndex];\n\n\t\t\tif (cell.isVertex())\n\t\t\t{\n\t\t\t\tvar currentCells = cell.getPreviousLayerConnectedCells(rankIndex);\n\n\t\t\t\tvar currentRank = rankIndex - 1;\n\n\t\t\t\t// Two loops, last connected cells, and next\n\t\t\t\tfor (var k = 0; k < 2; k++)\n\t\t\t\t{\n\t\t\t\t\tif (currentRank > -1\n\t\t\t\t\t\t\t&& currentRank < model.ranks.length\n\t\t\t\t\t\t\t&& currentCells != null\n\t\t\t\t\t\t\t&& currentCells.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sortedCells = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < currentCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar sorter = new WeightedCellSorter(\n\t\t\t\t\t\t\t\t\tcurrentCells[j], currentCells[j].getX(currentRank));\n\t\t\t\t\t\t\tsortedCells.push(sorter);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\t\t\t\t\t\tvar leftLimit = cell.x[0] - cell.width / 2;\n\t\t\t\t\t\tvar rightLimit = leftLimit + cell.width;\n\n\t\t\t\t\t\t// Connected edge count starts at 1 to allow for buffer\n\t\t\t\t\t\t// with edge of vertex\n\t\t\t\t\t\tvar connectedEdgeCount = 0;\n\t\t\t\t\t\tvar connectedEdgeGroupCount = 0;\n\t\t\t\t\t\tvar connectedEdges = [];\n\t\t\t\t\t\t// Calculate width requirements for all connected edges\n\t\t\t\t\t\tfor (var j = 0; j < sortedCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar innerCell = sortedCells[j].cell;\n\t\t\t\t\t\t\tvar connections;\n\n\t\t\t\t\t\t\tif (innerCell.isVertex())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Get the connecting edge\n\t\t\t\t\t\t\t\tif (k == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsSource;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsTarget;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor (var connIndex = 0; connIndex < connections.length; connIndex++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (connections[connIndex].source == innerCell\n\t\t\t\t\t\t\t\t\t\t\t|| connections[connIndex].target == innerCell)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeCount += connections[connIndex].edges\n\t\t\t\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\n\t\t\t\t\t\t\t\t\t\tconnectedEdges.push(connections[connIndex]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnectedEdgeCount += innerCell.edges.length;\n\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\t\t\t\t\t\t\t\tconnectedEdges.push(innerCell);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar requiredWidth = (connectedEdgeCount + 1)\n\t\t\t\t\t\t\t\t* this.prefHozEdgeSep;\n\n\t\t\t\t\t\t// Add a buffer on the edges of the vertex if the edge count allows\n\t\t\t\t\t\tif (cell.width > requiredWidth\n\t\t\t\t\t\t\t\t+ (2 * this.prefHozEdgeSep))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tleftLimit += this.prefHozEdgeSep;\n\t\t\t\t\t\t\trightLimit -= this.prefHozEdgeSep;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar availableWidth = rightLimit - leftLimit;\n\t\t\t\t\t\tvar edgeSpacing = availableWidth / connectedEdgeCount;\n\n\t\t\t\t\t\tvar currentX = leftLimit + edgeSpacing / 2.0;\n\t\t\t\t\t\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\t\t\t\t\t\tvar maxYOffset = 0;\n\n\t\t\t\t\t\tfor (var j = 0; j < connectedEdges.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar numActualEdges = connectedEdges[j].edges\n\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\tvar pos = this.jettyPositions[connectedEdges[j].ids[0]];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (pos == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos = [];\n\t\t\t\t\t\t\t\tthis.jettyPositions[connectedEdges[j].ids[0]] = pos;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (j < connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (j > connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Ignore the case if equals, this means the second of 2\n\t\t\t\t\t\t\t// jettys with the same y (even number of edges)\n\n\t\t\t\t\t\t\tfor (var m = 0; m < numActualEdges; m++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2] = currentX;\n\t\t\t\t\t\t\t\tcurrentX += edgeSpacing;\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2 + 1] = currentYOffset;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmaxYOffset = Math.max(maxYOffset,\n\t\t\t\t\t\t\t\t\tcurrentYOffset);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentCells = cell.getNextLayerConnectedCells(rankIndex);\n\n\t\t\t\t\tcurrentRank = rankIndex + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setEdgePosition\n * \n * Fixes the control points\n */\nmxCoordinateAssignment.prototype.setEdgePosition = function(cell)\n{\n\t// For parallel edges we need to seperate out the points a\n\t// little\n\tvar offsetX = 0;\n\t// Only set the edge control points once\n\n\tif (cell.temp[0] != 101207)\n\t{\n\t\tvar maxRank = cell.maxRank;\n\t\tvar minRank = cell.minRank;\n\t\t\n\t\tif (maxRank == minRank)\n\t\t{\n\t\t\tmaxRank = cell.source.maxRank;\n\t\t\tminRank = cell.target.minRank;\n\t\t}\n\t\t\n\t\tvar parallelEdgeCount = 0;\n\t\tvar jettys = this.jettyPositions[cell.ids[0]];\n\n\t\tvar source = cell.isReversed ? cell.target.cell : cell.source.cell;\n\t\tvar graph = this.layout.graph;\n\t\tvar layoutReversed = this.orientation == mxConstants.DIRECTION_EAST\n\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH;\n\n\t\tfor (var i = 0; i < cell.edges.length; i++)\n\t\t{\n\t\t\tvar realEdge = cell.edges[i];\n\t\t\tvar realSource = this.layout.getVisibleTerminal(realEdge, true);\n\n\t\t\t//List oldPoints = graph.getPoints(realEdge);\n\t\t\tvar newPoints = [];\n\n\t\t\t// Single length reversed edges end up with the jettys in the wrong\n\t\t\t// places. Since single length edges only have jettys, not segment\n\t\t\t// control points, we just say the edge isn't reversed in this section\n\t\t\tvar reversed = cell.isReversed;\n\t\t\t\n\t\t\tif (realSource != source)\n\t\t\t{\n\t\t\t\t// The real edges include all core model edges and these can go\n\t\t\t\t// in both directions. If the source of the hierarchical model edge\n\t\t\t\t// isn't the source of the specific real edge in this iteration\n\t\t\t\t// treat if as reversed\n\t\t\t\treversed = !reversed;\n\t\t\t}\n\n\t\t\t// First jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar y = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 1 + arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ty += jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelSource = graph.model.getTerminal(realEdge, true);\n\n\t\t\t\tif (this.layout.isPort(modelSource) && graph.model.getParent(modelSource) == realSource)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelSource);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realSource.geometry.x + cell.source.width * modelSource.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH\n\t\t\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y + jetty));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y + jetty, x));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Declare variables to define loop through edge points and \n\t\t\t// change direction if edge is reversed\n\n\t\t\tvar loopStart = cell.x.length - 1;\n\t\t\tvar loopLimit = -1;\n\t\t\tvar loopDelta = -1;\n\t\t\tvar currentRank = cell.maxRank - 1;\n\n\t\t\tif (reversed)\n\t\t\t{\n\t\t\t\tloopStart = 0;\n\t\t\t\tloopLimit = cell.x.length;\n\t\t\t\tloopDelta = 1;\n\t\t\t\tcurrentRank = cell.minRank + 1;\n\t\t\t}\n\t\t\t// Reversed edges need the points inserted in\n\t\t\t// reverse order\n\t\t\tfor (var j = loopStart; (cell.maxRank != cell.minRank) && j != loopLimit; j += loopDelta)\n\t\t\t{\n\t\t\t\t// The horizontal position in a vertical layout\n\t\t\t\tvar positionX = cell.x[j] + offsetX;\n\n\t\t\t\t// Work out the vertical positions in a vertical layout\n\t\t\t\t// in the edge buffer channels above and below this rank\n\t\t\t\tvar topChannelY = (this.rankTopY[currentRank] + this.rankBottomY[currentRank + 1]) / 2.0;\n\t\t\t\tvar bottomChannelY = (this.rankTopY[currentRank - 1] + this.rankBottomY[currentRank]) / 2.0;\n\n\t\t\t\tif (reversed)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = topChannelY;\n\t\t\t\t\ttopChannelY = bottomChannelY;\n\t\t\t\t\tbottomChannelY = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, topChannelY));\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, bottomChannelY));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(topChannelY, positionX));\n\t\t\t\t\tnewPoints.push(new mxPoint(bottomChannelY, positionX));\n\t\t\t\t}\n\n\t\t\t\tthis.limitX = Math.max(this.limitX, positionX);\n\t\t\t\tcurrentRank += loopDelta;\n\t\t\t}\n\n\t\t\t// Second jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar rankY = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 3 - arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\tvar y = rankY - jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + 2 - arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelTarget = graph.model.getTerminal(realEdge, false);\n\t\t\t\tvar realTarget = this.layout.getVisibleTerminal(realEdge, false);\n\n\t\t\t\tif (this.layout.isPort(modelTarget) && graph.model.getParent(modelTarget) == realTarget)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelTarget);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realTarget.geometry.x + cell.target.width * modelTarget.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y - jetty));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y - jetty, x));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cell.isReversed)\n\t\t\t{\n\t\t\t\tthis.processReversedEdge(cell, realEdge);\n\t\t\t}\n\n\t\t\tthis.layout.setEdgePoints(realEdge, newPoints);\n\n\t\t\t// Increase offset so next edge is drawn next to\n\t\t\t// this one\n\t\t\tif (offsetX == 0.0)\n\t\t\t{\n\t\t\t\toffsetX = this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\telse if (offsetX > 0)\n\t\t\t{\n\t\t\t\toffsetX = -offsetX;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toffsetX = -offsetX + this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\t\n\t\t\tparallelEdgeCount++;\n\t\t}\n\n\t\tcell.temp[0] = 101207;\n\t}\n};\n\n\n/**\n * Function: setVertexLocation\n * \n * Fixes the position of the specified vertex.\n * \n * Parameters:\n * \n * cell - the vertex to position\n */\nmxCoordinateAssignment.prototype.setVertexLocation = function(cell)\n{\n\tvar realCell = cell.cell;\n\tvar positionX = cell.x[0] - cell.width / 2;\n\tvar positionY = cell.y[0] - cell.height / 2;\n\n\tthis.rankTopY[cell.minRank] = Math.min(this.rankTopY[cell.minRank], positionY);\n\tthis.rankBottomY[cell.minRank] = Math.max(this.rankBottomY[cell.minRank],\n\t\t\tpositionY + cell.height);\n\n\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionX, positionY);\n\t}\n\telse\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionY, positionX);\n\t}\n\n\tthis.limitX = Math.max(this.limitX, positionX + cell.width);\n};\n\n/**\n * Function: processReversedEdge\n * \n * Hook to add additional processing\n * \n * Parameters:\n * \n * edge - the hierarchical model edge\n * realEdge - the real edge in the graph\n */\nmxCoordinateAssignment.prototype.processReversedEdge = function(graph, model)\n{\n\t// hook for subclassers\n};\n\n__mxOutput.mxCoordinateAssignment = typeof mxCoordinateAssignment !== 'undefined' ? mxCoordinateAssignment : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneOrdering\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxSwimlaneOrdering\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxSwimlaneOrdering(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxSwimlaneOrdering.prototype = new mxHierarchicalLayoutStage();\nmxSwimlaneOrdering.prototype.constructor = mxSwimlaneOrdering;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxSwimlaneOrdering.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxSwimlaneOrdering.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodes = mxUtils.clone(model.vertexMapper, null, true);\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\tvar nodeId = mxCellPath.create(modelRoots[i]);\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\t// Ancestor hashes only line up within a swimlane\n\t\tvar isAncestor = parent != null && parent.swimlaneIndex == node.swimlaneIndex && node.isAncestor(parent);\n\n\t\t// If the source->target swimlane indices go from higher to\n\t\t// lower, the edge is reverse\n\t\tvar reversedOverSwimlane = parent != null && connectingEdge != null &&\n\t\t\t\t\t\tparent.swimlaneIndex < node.swimlaneIndex && connectingEdge.source == node;\n\n\t\tif (isAncestor)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\telse if (reversedOverSwimlane)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsTarget);\n\t\t\tnode.connectsAsTarget.push(connectingEdge);\n\t\t\tparent.connectsAsSource.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsSource);\n\t\t}\n\t\t\n\t\tvar cellId = mxCellPath.create(node.cell);\n\t\tseenNodes[cellId] = node;\n\t\tdelete unseenNodes[cellId];\n\t}, rootsArray, true, null);\n};\n\n__mxOutput.mxSwimlaneOrdering = typeof mxSwimlaneOrdering !== 'undefined' ? mxSwimlaneOrdering : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxHierarchicalLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxHierarchicalLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\nvar mxHierarchicalEdgeStyle =\n{\n\tORTHOGONAL: 1,\n\tPOLYLINE: 2,\n\tSTRAIGHT: 3,\n\tCURVE: 4\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxHierarchicalLayout.prototype = new mxGraphLayout();\nmxHierarchicalLayout.prototype.constructor = mxHierarchicalLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxHierarchicalLayout.prototype.roots = null;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxHierarchicalLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxHierarchicalLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxHierarchicalLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 0.\n */\nmxHierarchicalLayout.prototype.parentBorder = 0;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxHierarchicalLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxHierarchicalLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxHierarchicalLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxHierarchicalLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxHierarchicalLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxHierarchicalLayout.prototype.fineTuning = true;\n\n/**\n * \n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxHierarchicalLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxHierarchicalLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same \n * ancestry chain. Default is true.\n */\nmxHierarchicalLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxGraphHierarchyModel> formed of the layout.\n */\nmxHierarchicalLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxGraphHierarchyModel> for this layout algorithm.\n */\nmxHierarchicalLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * roots - Optional starting roots of the layout.\n */\nmxHierarchicalLayout.prototype.execute = function(parent, roots)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\tif (roots != null && !(roots instanceof Array))\n\t{\n\t\troots = [roots];\n\t}\n\t\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (roots == null && parent == null)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\t\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\t\n\tif (roots != null)\n\t{\n\t\tvar rootsCopy = [];\n\n\t\tfor (var i = 0; i < roots.length; i++)\n\t\t{\n\t\t\tvar ancestor = parent != null ? model.isAncestor(parent, roots[i]) : true;\n\t\t\t\n\t\t\tif (ancestor && model.isVertex(roots[i]))\n\t\t\t{\n\t\t\t\trootsCopy.push(roots[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.roots = rootsCopy;\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxHierarchicalLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (model.isVertex(cell) && this.graph.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxHierarchicalLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) ||\n\t\t\t\t((source != target) &&\n\t\t\t\t\t\t((target == cell && (this.parent == null || this.isAncestor(this.parent, source, this.traverseAncestors))) ||\n\t\t\t\t\t\t \t(source == cell && (this.parent == null || this.isAncestor(this.parent, target, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxHierarchicalLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxHierarchicalLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = [];\n\n\tif (this.roots == null && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\tthis.filterDescendants(parent, filledVertexSet);\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twhile (!filledVertexSetEmpty)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(parent, filledVertexSet);\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\t\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\t// Iterate through the result removing parents who have children in this layout\n\t\n\t// Perform a layout for each seperate hierarchy\n\t// Track initial coordinate x-positioning\n\tvar initialX = 0;\n\n\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t{\n\t\tvar vertexSet = hierarchyVertices[i];\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var key in vertexSet)\n\t\t{\n\t\t\ttmp.push(vertexSet[key]);\n\t\t}\n\t\t\n\t\tthis.model = new mxGraphHierarchyModel(this, tmp, this.roots,\n\t\t\tparent, this.tightenToSource);\n\n\t\tthis.cycleStage(parent);\n\t\tthis.layeringStage();\n\t\t\n\t\tthis.crossingStage(parent);\n\t\tinitialX = this.placementStage(initialX, parent);\n\t}\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxHierarchicalLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxHierarchicalLayout.prototype.isPort = function(cell)\n{\n\tif (cell != null && cell.geometry != null)\n\t{\n\t\treturn cell.geometry.relative;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxHierarchicalLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n */\nmxHierarchicalLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar edgeIsSource = [];\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tedgeIsSource[i] = (this.getVisibleTerminal(edges[i], true) == vertex);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tif (!directed || edgeIsSource[i])\n\t\t\t\t{\n\t\t\t\t\tvar next = this.getVisibleTerminal(edges[i], !edgeIsSource[i]);\n\t\t\t\t\t\n\t\t\t\t\t// Check whether there are more edges incoming from the target vertex than outgoing\n\t\t\t\t\t// The hierarchical model treats bi-directional parallel edges as being sourced\n\t\t\t\t\t// from the more \"sourced\" terminal. If the directions are equal in number, the direction\n\t\t\t\t\t// is that of the natural direction from the roots of the layout.\n\t\t\t\t\t// The checks below are slightly more verbose than need be for performance reasons\n\t\t\t\t\tvar netCount = 1;\n\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (j == i)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar isSource2 = edgeIsSource[j];\n\t\t\t\t\t\t\tvar otherTerm = this.getVisibleTerminal(edges[j], !isSource2);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (otherTerm == next)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (isSource2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (netCount >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentComp = this.traverse(next, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxHierarchicalLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxMinimumCycleRemover(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxHierarchicalLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxHierarchicalLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxHierarchicalLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxHierarchicalLayout = typeof mxHierarchicalLayout !== 'undefined' ? mxHierarchicalLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxSwimlaneLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxSwimlaneLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxSwimlaneLayout.prototype = new mxGraphLayout();\nmxSwimlaneLayout.prototype.constructor = mxSwimlaneLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxSwimlaneLayout.prototype.roots = null;\n\n/**\n * Variable: swimlanes\n * \n * Holds the array of <mxCell> of the ordered swimlanes to lay out\n */\nmxSwimlaneLayout.prototype.swimlanes = null;\n\n/**\n * Variable: dummyVertexWidth\n * \n * The cell width of any dummy vertices inserted\n */\nmxSwimlaneLayout.prototype.dummyVertexWidth = 50;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxSwimlaneLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxSwimlaneLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxSwimlaneLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 30.\n */\nmxSwimlaneLayout.prototype.parentBorder = 30;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxSwimlaneLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxSwimlaneLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxSwimlaneLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxSwimlaneLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxSwimlaneLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxSwimlaneLayout.prototype.fineTuning = true;\n\n/**\n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxSwimlaneLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxSwimlaneLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same\n * ancestry chain. Default is true.\n */\nmxSwimlaneLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxSwimlaneModel> formed of the layout.\n */\nmxSwimlaneLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxSwimlaneLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxSwimlaneModel> for this layout algorithm.\n */\nmxSwimlaneLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * swimlanes - Ordered array of swimlanes to be laid out\n */\nmxSwimlaneLayout.prototype.execute = function(parent, swimlanes)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (swimlanes == null || swimlanes.length < 1)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\n\tif (parent == null)\n\t{\n\t\tparent = model.getParent(swimlanes[0]);\n\t}\n\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\n\tthis.swimlanes = swimlanes;\n\tvar dummyVertices = [];\n\t// Check the swimlanes all have vertices\n\t// in them\n\tfor (var i = 0; i < swimlanes.length; i++)\n\t{\n\t\tvar children = this.graph.getChildCells(swimlanes[i]);\n\t\t\n\t\tif (children == null || children.length == 0)\n\t\t{\n\t\t\tvar vertex = this.graph.insertVertex(swimlanes[i], null, null, 0, 0, this.dummyVertexWidth, 0);\n\t\t\tdummyVertices.push(vertex);\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\n\t\tthis.graph.removeCells(dummyVertices);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given array of groups so that it includes\n * all child vertices.\n * \n */\nmxSwimlaneLayout.prototype.updateGroupBounds = function()\n{\n\t// Get all vertices and edge in the layout\n\tvar cells = [];\n\tvar model = this.model;\n\t\n\tfor (var key in model.edgeMapper)\n\t{\n\t\tvar edge = model.edgeMapper[key];\n\t\t\n\t\tfor (var i = 0; i < edge.edges.length; i++)\n\t\t{\n\t\t\tcells.push(edge.edges[i]);\n\t\t}\n\t}\n\t\n\tvar layoutBounds = this.graph.getBoundingBoxFromGeometry(cells, true);\n\tvar childBounds = [];\n\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar bounds = this.graph.getBoundingBoxFromGeometry(children);\n\t\t\tchildBounds[i] = bounds;\n\t\t\tvar childrenY = bounds.y + geo.y - size.height - this.parentBorder;\n\t\t\tvar maxChildrenY = bounds.y + geo.y + bounds.height;\n\n\t\t\tif (layoutBounds == null)\n\t\t\t{\n\t\t\t\tlayoutBounds = new mxRectangle(0, childrenY, 0, maxChildrenY - childrenY);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlayoutBounds.y = Math.min(layoutBounds.y, childrenY);\n\t\t\t\tvar maxY = Math.max(layoutBounds.y + layoutBounds.height, maxChildrenY);\n\t\t\t\tlayoutBounds.height = maxY - layoutBounds.y;\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar newGeo = geo.clone();\n\t\t\t\n\t\t\tvar leftGroupBorder = (i == 0) ? this.parentBorder : this.interRankCellSpacing/2;\n\t\t\tvar w = size.width + leftGroupBorder;\n\t\t\tvar x = childBounds[i].x - w;\n\t\t\tvar y = layoutBounds.y - this.parentBorder;\n\n\t\t\tnewGeo.x += x;\n\t\t\tnewGeo.y = y;\n\t\t\t\n\t\t\tnewGeo.width = childBounds[i].width + w + this.interRankCellSpacing/2;\n\t\t\tnewGeo.height = layoutBounds.height + size.height + 2 * this.parentBorder;\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(lane, newGeo);\n\t\t\tthis.graph.moveCells(children, -x, geo.y - y);\n\t\t}\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxSwimlaneLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (cell != null && model.isVertex(cell) && this.graph.isCellVisible(cell) && model.isAncestor(parent, cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Only count connection within this swimlane\n\t\t\t\t\t\tvar other = this.getVisibleTerminal(conns[k], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (model.isAncestor(parent, other))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (model.isAncestor(parent, src))\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxSwimlaneLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) || ((source != target) && ((target == cell && (this.parent == null || this.graph.isValidAncestor(source, this.parent, this.traverseAncestors))) ||\n\t\t\t(source == cell && (this.parent == null ||\n\t\t\t\t\tthis.graph.isValidAncestor(target, this.parent, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxSwimlaneLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxSwimlaneLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = Object();\n\n\tif (this.swimlanes != null && this.swimlanes.length > 0 && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\t\n\t\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t\t{\n\t\t\tthis.filterDescendants(this.swimlanes[i], filledVertexSet);\n\t\t}\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Only test for candidates in each swimlane in order\n\t\tvar laneCounter = 0;\n\n\t\twhile (!filledVertexSetEmpty && laneCounter < this.swimlanes.length)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(this.swimlanes[laneCounter], filledVertexSet);\n\t\t\t\n\t\t\tif (candidateRoots.length == 0)\n\t\t\t{\n\t\t\t\tlaneCounter++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet, laneCounter);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\tvar tmp = [];\n\t\n\tfor (var key in allVertexSet)\n\t{\n\t\ttmp.push(allVertexSet[key]);\n\t}\n\t\n\tthis.model = new mxSwimlaneModel(this, tmp, this.roots,\n\t\tparent, this.tightenToSource);\n\n\tthis.cycleStage(parent);\n\tthis.layeringStage();\n\t\n\tthis.crossingStage(parent);\n\tthis.placementStage(0, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxSwimlaneLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && model.getParent(cell) != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxSwimlaneLayout.prototype.isPort = function(cell)\n{\n\tif (cell.geometry.relative)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxSwimlaneLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n * swimlaneIndex - the laid out order index of the swimlane vertex is contained in\n */\nmxSwimlaneLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet, swimlaneIndex)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar model = this.graph.model;\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar otherVertex = this.getVisibleTerminal(edges[i], true);\n\t\t\t\tvar isSource = otherVertex == vertex;\n\t\t\t\t\n\t\t\t\tif (isSource)\n\t\t\t\t{\n\t\t\t\t\totherVertex = this.getVisibleTerminal(edges[i], false);\n\t\t\t\t}\n\n\t\t\t\tvar otherIndex = 0;\n\t\t\t\t// Get the swimlane index of the other terminal\n\t\t\t\tfor (otherIndex = 0; otherIndex < this.swimlanes.length; otherIndex++)\n\t\t\t\t{\n\t\t\t\t\tif (model.isAncestor(this.swimlanes[otherIndex], otherVertex))\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (otherIndex >= this.swimlanes.length)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Traverse if the other vertex is within the same swimlane as\n\t\t\t\t// as the current vertex, or if the swimlane index of the other\n\t\t\t\t// vertex is greater than that of this vertex\n\t\t\t\tif ((otherIndex > swimlaneIndex) ||\n\t\t\t\t\t\t((!directed || isSource) && otherIndex == swimlaneIndex))\n\t\t\t\t{\n\t\t\t\t\tcurrentComp = this.traverse(otherVertex, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet, otherIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxSwimlaneLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxSwimlaneOrdering(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxSwimlaneLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxSwimlaneLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxSwimlaneLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxSwimlaneLayout = typeof mxSwimlaneLayout !== 'undefined' ? mxSwimlaneLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphModel\n * \n * Extends <mxEventSource> to implement a graph model. The graph model acts as\n * a wrapper around the cells which are in charge of storing the actual graph\n * datastructure. The model acts as a transactional wrapper with event\n * notification for all changes, whereas the cells contain the atomic\n * operations for updating the actual datastructure.\n * \n * Layers:\n * \n * The cell hierarchy in the model must have a top-level root cell which\n * contains the layers (typically one default layer), which in turn contain the\n * top-level cells of the layers. This means each cell is contained in a layer.\n * If no layers are required, then all new cells should be added to the default\n * layer.\n * \n * Layers are useful for hiding and showing groups of cells, or for placing\n * groups of cells on top of other cells in the display. To identify a layer,\n * the <isLayer> function is used. It returns true if the parent of the given\n * cell is the root of the model.\n * \n * Events:\n * \n * See events section for more details. There is a new set of events for\n * tracking transactional changes as they happen. The events are called\n * startEdit for the initial beginUpdate, executed for each executed change\n * and endEdit for the terminal endUpdate. The executed event contains a\n * property called change which represents the change after execution.\n * \n * Encoding the model:\n * \n * To encode a graph model, use the following code:\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will create an XML node that contains all the model information.\n * \n * Encoding and decoding changes:\n * \n * For the encoding of changes, a graph model listener is required that encodes\n * each change from the given array of changes.\n * \n * (code)\n * model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n *   var nodes = [];\n *   var codec = new mxCodec();\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     nodes.push(codec.encode(changes[i]));\n *   }\n *   // do something with the nodes\n * });\n * (end)\n * \n * For the decoding and execution of changes, the codec needs a lookup function\n * that allows it to resolve cell IDs as follows:\n * \n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * }\n * (end)\n * \n * For each encoded change (represented by a node), the following code can be\n * used to carry out the decoding and create a change object.\n * \n * (code)\n * var changes = [];\n * var change = codec.decode(node);\n * change.model = model;\n * change.execute();\n * changes.push(change);\n * (end)\n * \n * The changes can then be dispatched using the model as follows.\n * \n * (code)\n * var edit = new mxUndoableEdit(model, false);\n * edit.changes = changes;\n * \n * edit.notify = function()\n * {\n *   edit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n *   \t'edit', edit, 'changes', edit.changes));\n *   edit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n *   \t'edit', edit, 'changes', edit.changes));\n * }\n * \n * model.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n * model.fireEvent(new mxEventObject(mxEvent.CHANGE,\n * \t\t'edit', edit, 'changes', changes));\n * (end)\n *\n * Event: mxEvent.CHANGE\n *\n * Fires when an undoable edit is dispatched. The <code>edit</code> property\n * contains the <mxUndoableEdit>. The <code>changes</code> property contains\n * the array of atomic changes inside the undoable edit. The changes property\n * is <strong>deprecated</strong>, please use edit.changes instead.\n *\n * Example:\n * \n * For finding newly inserted cells, the following code can be used:\n * \n * (code)\n * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     var change = changes[i];\n *     \n *     if (change instanceof mxChildChange &&\n *       change.change.previous == null)\n *     {\n *       graph.startEditingAtCell(change.child);\n *       break;\n *     }\n *   }\n * });\n * (end)\n * \n * \n * Event: mxEvent.NOTIFY\n *\n * Same as <mxEvent.CHANGE>, this event can be used for classes that need to\n * implement a sync mechanism between this model and, say, a remote model. In\n * such a setup, only local changes should trigger a notify event and all\n * changes should trigger a change event.\n * \n * Event: mxEvent.EXECUTE\n * \n * Fires between begin- and endUpdate and after an atomic change was executed\n * in the model. The <code>change</code> property contains the atomic change\n * that was executed.\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n *\n * Event: mxEvent.BEGIN_UPDATE\n *\n * Fires after the <updateLevel> was incremented in <beginUpdate>. This event\n * contains no properties.\n * \n * Event: mxEvent.START_EDIT\n *\n * Fires after the <updateLevel> was changed from 0 to 1. This event\n * contains no properties.\n * \n * Event: mxEvent.END_UPDATE\n * \n * Fires after the <updateLevel> was decreased in <endUpdate> but before any\n * notification or change dispatching. The <code>edit</code> property contains\n * the <currentEdit>.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after the <updateLevel> was changed from 1 to 0. This event\n * contains no properties.\n * \n * Event: mxEvent.BEFORE_UNDO\n * \n * Fires before the change is dispatched after the update level has reached 0\n * in <endUpdate>. The <code>edit</code> property contains the <curreneEdit>.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the change was dispatched in <endUpdate>. The <code>edit</code>\n * property contains the <currentEdit>.\n * \n * Constructor: mxGraphModel\n * \n * Constructs a new graph model. If no root is specified then a new root\n * <mxCell> with a default layer is created.\n * \n * Parameters:\n * \n * root - <mxCell> that represents the root cell.\n */\nfunction mxGraphModel(root)\n{\n\tthis.currentEdit = this.createUndoableEdit();\n\t\n\tif (root != null)\n\t{\n\t\tthis.setRoot(root);\n\t}\n\telse\n\t{\n\t\tthis.clear();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphModel.prototype = new mxEventSource();\nmxGraphModel.prototype.constructor = mxGraphModel;\n\n/**\n * Variable: root\n * \n * Holds the root cell, which in turn contains the cells that represent the\n * layers of the diagram as child cells. That is, the actual elements of the\n * diagram are supposed to live in the third generation of cells and below.\n */\nmxGraphModel.prototype.root = null;\n\n/**\n * Variable: cells\n * \n * Maps from Ids to cells.\n */\nmxGraphModel.prototype.cells = null;\n\n/**\n * Variable: maintainEdgeParent\n * \n * Specifies if edges should automatically be moved into the nearest common\n * ancestor of their terminals. Default is true.\n */\nmxGraphModel.prototype.maintainEdgeParent = true;\n\n/**\n * Variable: ignoreRelativeEdgeParent\n * \n * Specifies if relative edge parents should be ignored for finding the nearest\n * common ancestors of an edge's terminals. Default is true.\n */\nmxGraphModel.prototype.ignoreRelativeEdgeParent = true;\n\n/**\n * Variable: createIds\n * \n * Specifies if the model should automatically create Ids for new cells.\n * Default is true.\n */\nmxGraphModel.prototype.createIds = true;\n\n/**\n * Variable: prefix\n * \n * Defines the prefix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.prefix = '';\n\n/**\n * Variable: postfix\n * \n * Defines the postfix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.postfix = '';\n\n/**\n * Variable: nextId\n * \n * Specifies the next Id to be created. Initial value is 0.\n */\nmxGraphModel.prototype.nextId = 0;\n\n/**\n * Variable: currentEdit\n * \n * Holds the changes for the current transaction. If the transaction is\n * closed then a new object is created for this variable using\n * <createUndoableEdit>.\n */\nmxGraphModel.prototype.currentEdit = null;\n\n/**\n * Variable: updateLevel\n * \n * Counter for the depth of nested transactions. Each call to <beginUpdate>\n * will increment this number and each call to <endUpdate> will decrement\n * it. When the counter reaches 0, the transaction is closed and the\n * respective events are fired. Initial value is 0.\n */\nmxGraphModel.prototype.updateLevel = 0;\n\n/**\n * Variable: endingUpdate\n * \n * True if the program flow is currently inside endUpdate.\n */\nmxGraphModel.prototype.endingUpdate = false;\n\n/**\n * Function: clear\n *\n * Sets a new root using <createRoot>.\n */\nmxGraphModel.prototype.clear = function()\n{\n\tthis.setRoot(this.createRoot());\n};\n\n/**\n * Function: isCreateIds\n *\n * Returns <createIds>.\n */\nmxGraphModel.prototype.isCreateIds = function()\n{\n\treturn this.createIds;\n};\n\n/**\n * Function: setCreateIds\n *\n * Sets <createIds>.\n */\nmxGraphModel.prototype.setCreateIds = function(value)\n{\n\tthis.createIds = value;\n};\n\n/**\n * Function: createRoot\n *\n * Creates a new root cell with a default layer (child 0).\n */\nmxGraphModel.prototype.createRoot = function()\n{\n\tvar cell = new mxCell();\n\tcell.insert(new mxCell());\n\t\n\treturn cell;\n};\n\n/**\n * Function: getCell\n *\n * Returns the <mxCell> for the specified Id or null if no cell can be\n * found for the given Id.\n *\n * Parameters:\n * \n * id - A string representing the Id of the cell.\n */\nmxGraphModel.prototype.getCell = function(id)\n{\n\treturn (this.cells != null) ? this.cells[id] : null;\n};\n\n/**\n * Function: filterCells\n * \n * Returns the cells from the given array where the given filter function\n * returns true.\n */\nmxGraphModel.prototype.filterCells = function(cells, filter)\n{\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (filter(cells[i]))\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getDescendants\n * \n * Returns all descendants of the given cell and the cell itself in an array.\n * \n * Parameters:\n * \n * parent - <mxCell> whose descendants should be returned.\n */\nmxGraphModel.prototype.getDescendants = function(parent)\n{\n\treturn this.filterDescendants(null, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Visits all cells recursively and applies the specified filter function\n * to each cell. If the function returns true then the cell is added\n * to the resulting array. The parent and result paramters are optional.\n * If parent is not specified then the recursion starts at <root>.\n * \n * Example:\n * The following example extracts all vertices from a given model:\n * (code)\n * var filter = function(cell)\n * {\n * \treturn model.isVertex(cell);\n * }\n * var vertices = model.filterDescendants(filter);\n * (end)\n * \n * Parameters:\n * \n * filter - JavaScript function that takes an <mxCell> as an argument\n * and returns a boolean.\n * parent - Optional <mxCell> that is used as the root of the recursion.\n */\nmxGraphModel.prototype.filterDescendants = function(filter, parent)\n{\n\t// Creates a new array for storing the result\n\tvar result = [];\n\n\t// Recursion starts at the root of the model\n\tparent = parent || this.getRoot();\n\t\n\t// Checks if the filter returns true for the cell\n\t// and adds it to the result array\n\tif (filter == null || filter(parent))\n\t{\n\t\tresult.push(parent);\n\t}\n\t\n\t// Visits the children of the cell\n\tvar childCount = this.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\t\tresult = result.concat(this.filterDescendants(filter, child));\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root of the model or the topmost parent of the given cell.\n *\n * Parameters:\n * \n * cell - Optional <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.getRoot = function(cell)\n{\n\tvar root = cell || this.root;\n\t\n\tif (cell != null)\n\t{\n\t\twhile (cell != null)\n\t\t{\n\t\t\troot = cell;\n\t\t\tcell = this.getParent(cell);\n\t\t}\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: setRoot\n * \n * Sets the <root> of the model using <mxRootChange> and adds the change to\n * the current transaction. This resets all datastructures in the model and\n * is the preferred way of clearing an existing model. Returns the new\n * root.\n * \n * Example:\n * \n * (code)\n * var root = new mxCell();\n * root.insert(new mxCell());\n * model.setRoot(root);\n * (end)\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.setRoot = function(root)\n{\n\tthis.execute(new mxRootChange(this, root));\n\t\n\treturn root;\n};\n\n/**\n * Function: rootChanged\n * \n * Inner callback to change the root of the model and update the internal\n * datastructures, such as <cells> and <nextId>. Returns the previous root.\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.rootChanged = function(root)\n{\n\tvar oldRoot = this.root;\n\tthis.root = root;\n\t\n\t// Resets counters and datastructures\n\tthis.nextId = 0;\n\tthis.cells = null;\n\tthis.cellAdded(root);\n\t\n\treturn oldRoot;\n};\n\n/**\n * Function: isRoot\n * \n * Returns true if the given cell is the root of the model and a non-null\n * value.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible root.\n */\nmxGraphModel.prototype.isRoot = function(cell)\n{\n\treturn cell != null && this.root == cell;\n};\n\n/**\n * Function: isLayer\n * \n * Returns true if <isRoot> returns true for the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible layer.\n */\nmxGraphModel.prototype.isLayer = function(cell)\n{\n\treturn this.isRoot(this.getParent(cell));\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child. Note \n * returns true if child == parent.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.isAncestor = function(parent, child)\n{\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: contains\n * \n * Returns true if the model contains the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n */\nmxGraphModel.prototype.contains = function(cell)\n{\n\treturn this.isAncestor(this.root, cell);\n};\n\n/**\n * Function: getParent\n * \n * Returns the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose parent should be returned.\n */\nmxGraphModel.prototype.getParent = function(cell)\n{\n\treturn (cell != null) ? cell.getParent() : null;\n};\n\n/**\n * Function: add\n * \n * Adds the specified child to the parent at the given index using\n * <mxChildChange> and adds the change to the current transaction. If no\n * index is specified then the child is appended to the parent's array of\n * children. Returns the inserted child.\n * \n * Parameters:\n * \n * parent - <mxCell> that specifies the parent to contain the child.\n * child - <mxCell> that specifies the child to be inserted.\n * index - Optional integer that specifies the index of the child.\n */\nmxGraphModel.prototype.add = function(parent, child, index)\n{\n\tif (child != parent && parent != null && child != null)\n\t{\t\n\t\t// Appends the child if no index was specified\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount(parent);\n\t\t}\n\t\t\n\t\tvar parentChanged = parent != this.getParent(child);\n\t\tthis.execute(new mxChildChange(this, parent, child, index));\n\n\t\t// Maintains the edges parents by moving the edges\n\t\t// into the nearest common ancestor of its terminals\n\t\tif (this.maintainEdgeParent && parentChanged)\n\t\t{\n\t\t\tthis.updateEdgeParents(child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: cellAdded\n * \n * Inner callback to update <cells> when a cell has been added. This\n * implementation resolves collisions by creating new Ids. To change the\n * ID of a cell after it was inserted into the model, use the following\n * code:\n * \n * (code\n * delete model.cells[cell.getId()];\n * cell.setId(newId);\n * model.cells[cell.getId()] = cell;\n * (end)\n *\n * If the change of the ID should be part of the command history, then the\n * cell should be removed from the model and a clone with the new ID should\n * be reinserted into the model instead.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been added.\n */\nmxGraphModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\t// Creates an Id for the cell if not Id exists\n\t\tif (cell.getId() == null && this.createIds)\n\t\t{\n\t\t\tcell.setId(this.createId(cell));\n\t\t}\n\t\t\n\t\tif (cell.getId() != null)\n\t\t{\n\t\t\tvar collision = this.getCell(cell.getId());\n\t\t\t\n\t\t\tif (collision != cell)\n\t\t\t{\t\n\t\t\t\t// Creates new Id for the cell\n\t\t\t\t// as long as there is a collision\n\t\t\t\twhile (collision != null)\n\t\t\t\t{\n\t\t\t\t\tcell.setId(this.createId(cell));\n\t\t\t\t\tcollision = this.getCell(cell.getId());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Lazily creates the cells dictionary\n\t\t\t\tif (this.cells == null)\n\t\t\t\t{\n\t\t\t\t\tthis.cells = new Object();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.cells[cell.getId()] = cell;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Makes sure IDs of deleted cells are not reused\n\t\tif (mxUtils.isNumeric(cell.getId()))\n\t\t{\n\t\t\tthis.nextId = Math.max(this.nextId, cell.getId());\n\t\t}\n\t\t\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tthis.cellAdded(this.getChildAt(cell, i));\n\t\t}\n\t}\n};\n\n/**\n * Function: createId\n * \n * Hook method to create an Id for the specified cell. This implementation\n * concatenates <prefix>, id and <postfix> to create the Id and increments\n * <nextId>. The cell is ignored by this implementation, but can be used in\n * overridden methods to prefix the Ids with eg. the cell type.\n *\n * Parameters:\n *\n * cell - <mxCell> to create the Id for.\n */\nmxGraphModel.prototype.createId = function(cell)\n{\n\tvar id = this.nextId;\n\tthis.nextId++;\n\t\n\treturn this.prefix + id + this.postfix;\n};\n\n/**\n * Function: updateEdgeParents\n * \n * Updates the parent for all edges that are connected to cell or one of\n * its descendants using <updateEdgeParent>.\n */\nmxGraphModel.prototype.updateEdgeParents = function(cell, root)\n{\n\t// Gets the topmost node of the hierarchy\n\troot = root || this.getRoot(cell);\n\t\n\t// Updates edges on children first\n\tvar childCount = this.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(cell, i);\n\t\tthis.updateEdgeParents(child, root);\n\t}\n\t\n\t// Updates the parents of all connected edges\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar edges = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tedges.push(this.getEdgeAt(cell, i));\n\t}\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar edge = edges[i];\n\t\t\n\t\t// Updates edge parent if edge and child have\n\t\t// a common root node (does not need to be the\n\t\t// model root node)\n\t\tif (this.isAncestor(root, edge))\n\t\t{\n\t\t\tthis.updateEdgeParent(edge, root);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateEdgeParent\n *\n * Inner callback to update the parent of the specified <mxCell> to the\n * nearest-common-ancestor of its two terminals.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * root - <mxCell> that represents the current root of the model.\n */\nmxGraphModel.prototype.updateEdgeParent = function(edge, root)\n{\n\tvar source = this.getTerminal(edge, true);\n\tvar target = this.getTerminal(edge, false);\n\tvar cell = null;\n\t\n\t// Uses the first non-relative descendants of the source terminal\n\twhile (source != null && !this.isEdge(source) &&\n\t\tsource.geometry != null && source.geometry.relative)\n\t{\n\t\tsource = this.getParent(source);\n\t}\n\t\n\t// Uses the first non-relative descendants of the target terminal\n\twhile (target != null && this.ignoreRelativeEdgeParent &&\n\t\t!this.isEdge(target) && target.geometry != null && \n\t\ttarget.geometry.relative)\n\t{\n\t\ttarget = this.getParent(target);\n\t}\n\t\n\tif (this.isAncestor(root, source) && this.isAncestor(root, target))\n\t{\n\t\tif (source == target)\n\t\t{\n\t\t\tcell = this.getParent(source);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcell = this.getNearestCommonAncestor(source, target);\n\t\t}\n\n\t\tif (cell != null && (this.getParent(cell) != this.root ||\n\t\t\tthis.isAncestor(cell, edge)) && this.getParent(edge) != cell)\n\t\t{\n\t\t\tvar geo = this.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar origin1 = this.getOrigin(this.getParent(edge));\n\t\t\t\tvar origin2 = this.getOrigin(cell);\n\t\t\t\t\n\t\t\t\tvar dx = origin2.x - origin1.x;\n\t\t\t\tvar dy = origin2.y - origin1.y;\n\t\t\t\t\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.translate(-dx, -dy);\n\t\t\t\tthis.setGeometry(edge, geo);\n\t\t\t}\n\n\t\t\tthis.add(cell, edge, this.getChildCount(cell));\n\t\t}\n\t}\n};\n\n/**\n * Function: getOrigin\n * \n * Returns the absolute, accumulated origin for the children inside the\n * given parent as an <mxPoint>.\n */\nmxGraphModel.prototype.getOrigin = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tresult = this.getOrigin(this.getParent(cell));\n\t\t\n\t\tif (!this.isEdge(cell))\n\t\t{\n\t\t\tvar geo = this.getGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint();\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getNearestCommonAncestor\n * \n * Returns the nearest common ancestor for the specified cells.\n *\n * Parameters:\n * \n * cell1 - <mxCell> that specifies the first cell in the tree.\n * cell2 - <mxCell> that specifies the second cell in the tree.\n */\nmxGraphModel.prototype.getNearestCommonAncestor = function(cell1, cell2)\n{\n\tif (cell1 != null && cell2 != null)\n\t{\t\t\n\t\t// Creates the cell path for the second cell\n\t\tvar path = mxCellPath.create(cell2);\n\n\t\tif (path != null && path.length > 0)\n\t\t{\n\t\t\t// Bubbles through the ancestors of the first\n\t\t\t// cell to find the nearest common ancestor.\n\t\t\tvar cell = cell1;\n\t\t\tvar current = mxCellPath.create(cell);\n\t\t\t\n\t\t\t// Inverts arguments\n\t\t\tif (path.length < current.length)\n\t\t\t{\n\t\t\t\tcell = cell2;\n\t\t\t\tvar tmp = current;\n\t\t\t\tcurrent = path;\n\t\t\t\tpath = tmp;\n\t\t\t}\n\t\t\t\n\t\t\twhile (cell != null)\n\t\t\t{\n\t\t\t\tvar parent = this.getParent(cell);\n\t\t\t\t\n\t\t\t\t// Checks if the cell path is equal to the beginning of the given cell path\n\t\t\t\tif (path.indexOf(current + mxCellPath.PATH_SEPARATOR) == 0 && parent != null)\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrent = mxCellPath.getParentPath(current);\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: remove\n * \n * Removes the specified cell from the model using <mxChildChange> and adds\n * the change to the current transaction. This operation will remove the\n * cell and all of its children from the model. Returns the removed cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be removed.\n */\nmxGraphModel.prototype.remove = function(cell)\n{\n\tif (cell == this.root)\n\t{\n\t\tthis.setRoot(null);\n\t}\n\telse if (this.getParent(cell) != null)\n\t{\n\t\tthis.execute(new mxChildChange(this, null, cell));\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellRemoved\n * \n * Inner callback to update <cells> when a cell has been removed.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been removed.\n */\nmxGraphModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null && this.cells != null)\n\t{\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tthis.cellRemoved(this.getChildAt(cell, i));\n\t\t}\n\t\t\n\t\t// Removes the dictionary entry for the cell\n\t\tif (this.cells != null && cell.getId() != null)\n\t\t{\n\t\t\tdelete this.cells[cell.getId()];\n\t\t}\n\t}\n};\n\n/**\n * Function: parentForCellChanged\n * \n * Inner callback to update the parent of a cell using <mxCell.insert>\n * on the parent and return the previous parent.\n *\n * Parameters:\n * \n * cell - <mxCell> to update the parent for.\n * parent - <mxCell> that specifies the new parent of the cell.\n * index - Optional integer that defines the index of the child\n * in the parent's child array.\n */\nmxGraphModel.prototype.parentForCellChanged = function(cell, parent, index)\n{\n\tvar previous = this.getParent(cell);\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent != previous || previous.getIndex(cell) != index)\n\t\t{\n\t\t\tparent.insert(cell, index);\n\t\t}\n\t}\n\telse if (previous != null)\n\t{\n\t\tvar oldIndex = previous.getIndex(cell);\n\t\tprevious.remove(oldIndex);\n\t}\n\t\n\t// Adds or removes the cell from the model\n\tvar par = this.contains(parent);\n\tvar pre = this.contains(previous);\n\t\n\tif (par && !pre)\n\t{\n\t\tthis.cellAdded(cell);\n\t}\n\telse if (pre && !par)\n\t{\n\t\tthis.cellRemoved(cell);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of children in the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose number of children should be returned.\n */\nmxGraphModel.prototype.getChildCount = function(cell)\n{\n\treturn (cell != null) ? cell.getChildCount() : 0;\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child of the given <mxCell> at the given index.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the parent.\n * index - Integer that specifies the index of the child to be returned.\n */\nmxGraphModel.prototype.getChildAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getChildAt(index) : null;\n};\n\n/**\n * Function: getChildren\n * \n * Returns all children of the given <mxCell> as an array of <mxCells>. The\n * return value should be only be read.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n */\nmxGraphModel.prototype.getChildren = function(cell)\n{\n\treturn (cell != null) ? cell.children : null;\n};\n\t\n/**\n * Function: getChildVertices\n * \n * Returns the child vertices of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child vertices should be returned.\n */\nmxGraphModel.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\t\n/**\n * Function: getChildEdges\n * \n * Returns the child edges of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child edges should be returned.\n */\nmxGraphModel.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the children of the given cell that are vertices and/or edges\n * depending on the arguments.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n * vertices - Boolean indicating if child vertices should be returned.\n * Default is false.\n * edges - Boolean indicating if child edges should be returned.\n * Default is false.\n */\nmxGraphModel.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\t\n\tvar childCount = this.getChildCount(parent);\n\tvar result = [];\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\n\t\tif ((!edges && !vertices) || (edges && this.isEdge(child)) ||\n\t\t\t(vertices && this.isVertex(child)))\n\t\t{\n\t\t\tresult.push(child);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\t\n/**\n * Function: getTerminal\n * \n * Returns the source or target <mxCell> of the given edge depending on the\n * value of the boolean parameter.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * isSource - Boolean indicating which end of the edge should be returned.\n */\nmxGraphModel.prototype.getTerminal = function(edge, isSource)\n{\n\treturn (edge != null) ? edge.getTerminal(isSource) : null;\n};\n\n/**\n * Function: setTerminal\n * \n * Sets the source or target terminal of the given <mxCell> using\n * <mxTerminalChange> and adds the change to the current transaction.\n * This implementation updates the parent of the edge using <updateEdgeParent>\n * if required.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.setTerminal = function(edge, terminal, isSource)\n{\n\tvar terminalChanged = terminal != this.getTerminal(edge, isSource);\n\tthis.execute(new mxTerminalChange(this, edge, terminal, isSource));\n\t\n\tif (this.maintainEdgeParent && terminalChanged)\n\t{\n\t\tthis.updateEdgeParent(edge, this.getRoot());\n\t}\n\t\n\treturn terminal;\n};\n\t\n/**\n * Function: setTerminals\n * \n * Sets the source and target <mxCell> of the given <mxCell> in a single\n * transaction using <setTerminal> for each end of the edge.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * source - <mxCell> that specifies the new source terminal.\n * target - <mxCell> that specifies the new target terminal.\n */\nmxGraphModel.prototype.setTerminals = function(edge, source, target)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tthis.setTerminal(edge, source, true);\n\t\tthis.setTerminal(edge, target, false);\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: terminalForCellChanged\n * \n * Inner helper function to update the terminal of the edge using\n * <mxCell.insertEdge> and return the previous terminal.\n * \n * Parameters:\n * \n * edge - <mxCell> that specifies the edge to be updated.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.terminalForCellChanged = function(edge, terminal, isSource)\n{\n\tvar previous = this.getTerminal(edge, isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.insertEdge(edge, isSource);\n\t}\n\telse if (previous != null)\n\t{\n\t\tprevious.removeEdge(edge, isSource);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getEdgeCount\n * \n * Returns the number of distinct edges connected to the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the vertex.\n */\nmxGraphModel.prototype.getEdgeCount = function(cell)\n{\n\treturn (cell != null) ? cell.getEdgeCount() : 0;\n};\n\n/**\n * Function: getEdgeAt\n * \n * Returns the edge of cell at the given index.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the vertex.\n * index - Integer that specifies the index of the edge\n * to return.\n */\nmxGraphModel.prototype.getEdgeAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getEdgeAt(index) : null;\n};\n\t\n/**\n * Function: getDirectedEdgeCount\n * \n * Returns the number of incoming or outgoing edges, ignoring the given\n * edge.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edge count should be returned.\n * outgoing - Boolean that specifies if the number of outgoing or\n * incoming edges should be returned.\n * ignoredEdge - <mxCell> that represents an edge to be ignored.\n */\nmxGraphModel.prototype.getDirectedEdgeCount = function(cell, outgoing, ignoredEdge)\n{\n\tvar count = 0;\n\tvar edgeCount = this.getEdgeCount(cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\n\t\tif (edge != ignoredEdge && this.getTerminal(edge, outgoing) == cell)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n};\n\n/**\n * Function: getConnections\n * \n * Returns all edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * \n */\nmxGraphModel.prototype.getConnections = function(cell)\n{\n\treturn this.getEdges(cell, true, true, false);\n};\n\n/**\n * Function: getIncomingEdges\n * \n * Returns the incoming edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * \n */\nmxGraphModel.prototype.getIncomingEdges = function(cell)\n{\n\treturn this.getEdges(cell, true, false, false);\n};\n\n/**\n * Function: getOutgoingEdges\n * \n * Returns the outgoing edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * \n */\nmxGraphModel.prototype.getOutgoingEdges = function(cell)\n{\n\treturn this.getEdges(cell, false, true, false);\n};\n\n/**\n * Function: getEdges\n * \n * Returns all distinct edges connected to this cell as a new array of\n * <mxCells>. If at least one of incoming or outgoing is true, then loops\n * are ignored, otherwise if both are false, then all edges connected to\n * the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n * incoming - Optional boolean that specifies if incoming edges should be\n * returned. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should be\n * returned. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be returned.\n * Default is true. \n */\nmxGraphModel.prototype.getEdges = function(cell, incoming, outgoing, includeLoops)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\t\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar result = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\t\tvar source = this.getTerminal(edge, true);\n\t\tvar target = this.getTerminal(edge, false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming && target == cell) ||\n\t\t\t(outgoing && source == cell))))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns all edges between the given source and target pair. If directed\n * is true, then only edges from the source to the target are returned,\n * otherwise, all edges between the two cells are returned.\n * \n * Parameters:\n * \n * source - <mxCell> that defines the source terminal of the edge to be\n * returned.\n * target - <mxCell> that defines the target terminal of the edge to be\n * returned.\n * directed - Optional boolean that specifies if the direction of the\n * edge should be taken into account. Default is false.\n */\nmxGraphModel.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\t\n\tvar tmp1 = this.getEdgeCount(source);\n\tvar tmp2 = this.getEdgeCount(target);\n\t\n\t// Assumes the source has less connected edges\n\tvar terminal = source;\n\tvar edgeCount = tmp1;\n\t\n\t// Uses the smaller array of connected edges\n\t// for searching the edge\n\tif (tmp2 < tmp1)\n\t{\n\t\tedgeCount = tmp2;\n\t\tterminal = target;\n\t}\n\t\n\tvar result = [];\n\t\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(terminal, i);\n\t\tvar src = this.getTerminal(edge, true);\n\t\tvar trg = this.getTerminal(edge, false);\n\t\tvar directedMatch = (src == source) && (trg == target);\n\t\tvar oppositeMatch = (trg == source) && (src == target);\n\n\t\tif (directedMatch || (!directed && oppositeMatch))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all opposite vertices wrt terminal for the given edges, only\n * returning sources and/or targets as specified. The result is returned\n * as an array of <mxCells>.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contain the edges to be examined.\n * terminal - <mxCell> that specifies the known end of the edges.\n * sources - Boolean that specifies if source terminals should be contained\n * in the result. Default is true.\n * targets - Boolean that specifies if target terminals should be contained\n * in the result. Default is true.\n */\nmxGraphModel.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar source = this.getTerminal(edges[i], true);\n\t\t\tvar target = this.getTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of\n\t\t\t// the edge and if the target should be\n\t\t\t// stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tterminals.push(target);\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of\n\t\t\t// the edge and if the source should be\n\t\t\t// stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tterminals.push(source);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getTopmostCells\n * \n * Returns the topmost cells of the hierarchy in an array that contains no\n * descendants for each <mxCell> that it contains. Duplicates should be\n * removed in the cells array to improve performance.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose topmost ancestors should be returned.\n */\nmxGraphModel.prototype.getTopmostCells = function(cells)\n{\n\tvar dict = new mxDictionary();\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tdict.put(cells[i], true);\n\t}\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tvar cell = cells[i];\n\t\tvar topmost = true;\n\t\tvar parent = this.getParent(cell);\n\t\t\n\t\twhile (parent != null)\n\t\t{\n\t\t\tif (dict.get(parent))\n\t\t\t{\n\t\t\t\ttopmost = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tparent = this.getParent(parent);\n\t\t}\n\t\t\n\t\tif (topmost)\n\t\t{\n\t\t\ttmp.push(cell);\n\t\t}\n\t}\n\t\n\treturn tmp;\n};\n\n/**\n * Function: isVertex\n * \n * Returns true if the given cell is a vertex.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible vertex.\n */\nmxGraphModel.prototype.isVertex = function(cell)\n{\n\treturn (cell != null) ? cell.isVertex() : false;\n};\n\n/**\n * Function: isEdge\n * \n * Returns true if the given cell is an edge.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible edge.\n */\nmxGraphModel.prototype.isEdge = function(cell)\n{\n\treturn (cell != null) ? cell.isEdge() : false;\n};\n\n/**\n * Function: isConnectable\n * \n * Returns true if the given <mxCell> is connectable. If <edgesConnectable>\n * is false, then this function returns false for all edges else it returns\n * the return value of <mxCell.isConnectable>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraphModel.prototype.isConnectable = function(cell)\n{\n\treturn (cell != null) ? cell.isConnectable() : false;\n};\n\n/**\n * Function: getValue\n * \n * Returns the user object of the given <mxCell> using <mxCell.getValue>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be returned.\n */\nmxGraphModel.prototype.getValue = function(cell)\n{\n\treturn (cell != null) ? cell.getValue() : null;\n};\n\n/**\n * Function: setValue\n * \n * Sets the user object of then given <mxCell> using <mxValueChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be changed.\n * value - Object that defines the new user object.\n */\nmxGraphModel.prototype.setValue = function(cell, value)\n{\n\tthis.execute(new mxValueChange(this, cell, value));\n\t\n\treturn value;\n};\n\n/**\n * Function: valueForCellChanged\n * \n * Inner callback to update the user object of the given <mxCell>\n * using <mxCell.valueChanged> and return the previous value,\n * that is, the return value of <mxCell.valueChanged>.\n * \n * To change a specific attribute in an XML node, the following code can be\n * used.\n * \n * (code)\n * graph.getModel().valueForCellChanged = function(cell, value)\n * {\n *   var previous = cell.value.getAttribute('label');\n *   cell.value.setAttribute('label', value);\n *   \n *   return previous;\n * };\n * (end) \n */\nmxGraphModel.prototype.valueForCellChanged = function(cell, value)\n{\n\treturn cell.valueChanged(value);\n};\n\n/**\n * Function: getGeometry\n * \n * Returns the <mxGeometry> of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraphModel.prototype.getGeometry = function(cell)\n{\n\treturn (cell != null) ? cell.getGeometry() : null;\n};\n\n/**\n * Function: setGeometry\n * \n * Sets the <mxGeometry> of the given <mxCell>. The actual update\n * of the cell is carried out in <geometryForCellChanged>. The\n * <mxGeometryChange> action is used to encapsulate the change.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be changed.\n * geometry - <mxGeometry> that defines the new geometry.\n */\nmxGraphModel.prototype.setGeometry = function(cell, geometry)\n{\n\tif (geometry != this.getGeometry(cell))\n\t{\n\t\tthis.execute(new mxGeometryChange(this, cell, geometry));\n\t}\n\t\n\treturn geometry;\n};\n\n/**\n * Function: geometryForCellChanged\n * \n * Inner callback to update the <mxGeometry> of the given <mxCell> using\n * <mxCell.setGeometry> and return the previous <mxGeometry>.\n */\nmxGraphModel.prototype.geometryForCellChanged = function(cell, geometry)\n{\n\tvar previous = this.getGeometry(cell);\n\tcell.setGeometry(geometry);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getStyle\n * \n * Returns the style of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be returned.\n */\nmxGraphModel.prototype.getStyle = function(cell)\n{\n\treturn (cell != null) ? cell.getStyle() : null;\n};\n\n/**\n * Function: setStyle\n * \n * Sets the style of the given <mxCell> using <mxStyleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be changed.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.setStyle = function(cell, style)\n{\n\tif (style != this.getStyle(cell))\n\t{\n\t\tthis.execute(new mxStyleChange(this, cell, style));\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: styleForCellChanged\n * \n * Inner callback to update the style of the given <mxCell>\n * using <mxCell.setStyle> and return the previous style.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.styleForCellChanged = function(cell, style)\n{\n\tvar previous = this.getStyle(cell);\n\tcell.setStyle(style);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isCollapsed\n * \n * Returns true if the given <mxCell> is collapsed.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraphModel.prototype.isCollapsed = function(cell)\n{\n\treturn (cell != null) ? cell.isCollapsed() : false;\n};\n\n/**\n * Function: setCollapsed\n * \n * Sets the collapsed state of the given <mxCell> using <mxCollapseChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be changed.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.setCollapsed = function(cell, collapsed)\n{\n\tif (collapsed != this.isCollapsed(cell))\n\t{\n\t\tthis.execute(new mxCollapseChange(this, cell, collapsed));\n\t}\n\t\n\treturn collapsed;\n};\n\t\n/**\n * Function: collapsedStateForCellChanged\n *\n * Inner callback to update the collapsed state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous collapsed state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.collapsedStateForCellChanged = function(cell, collapsed)\n{\n\tvar previous = this.isCollapsed(cell);\n\tcell.setCollapsed(collapsed);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the given <mxCell> is visible.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraphModel.prototype.isVisible = function(cell)\n{\n\treturn (cell != null) ? cell.isVisible() : false;\n};\n\n/**\n * Function: setVisible\n * \n * Sets the visible state of the given <mxCell> using <mxVisibleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose visible state should be changed.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.setVisible = function(cell, visible)\n{\n\tif (visible != this.isVisible(cell))\n\t{\n\t\tthis.execute(new mxVisibleChange(this, cell, visible));\n\t}\n\t\n\treturn visible;\n};\n\t\n/**\n * Function: visibleStateForCellChanged\n *\n * Inner callback to update the visible state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous visible state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.visibleStateForCellChanged = function(cell, visible)\n{\n\tvar previous = this.isVisible(cell);\n\tcell.setVisible(visible);\n\t\n\treturn previous;\n};\n\n/**\n * Function: execute\n * \n * Executes the given edit and fires events if required. The edit object\n * requires an execute function which is invoked. The edit is added to the\n * <currentEdit> between <beginUpdate> and <endUpdate> calls, so that\n * events will be fired if this execute is an individual transaction, that\n * is, if no previous <beginUpdate> calls have been made without calling\n * <endUpdate>. This implementation fires an <execute> event before\n * executing the given change.\n * \n * Parameters:\n * \n * change - Object that described the change.\n */\nmxGraphModel.prototype.execute = function(change)\n{\n\tchange.execute();\n\tthis.beginUpdate();\n\tthis.currentEdit.add(change);\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE, 'change', change));\n\t// New global executed event\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\tthis.endUpdate();\n};\n\n/**\n * Function: beginUpdate\n * \n * Increments the <updateLevel> by one. The event notification\n * is queued until <updateLevel> reaches 0 by use of\n * <endUpdate>.\n *\n * All changes on <mxGraphModel> are transactional,\n * that is, they are executed in a single undoable change\n * on the model (without transaction isolation).\n * Therefore, if you want to combine any\n * number of changes into a single undoable change,\n * you should group any two or more API calls that\n * modify the graph model between <beginUpdate>\n * and <endUpdate> calls as shown here:\n * \n * (code)\n * var model = graph.getModel();\n * var parent = graph.getDefaultParent();\n * var index = model.getChildCount(parent);\n * model.beginUpdate();\n * try\n * {\n *   model.add(parent, v1, index);\n *   model.add(parent, v2, index+1);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n * \n * Of course there is a shortcut for appending a\n * sequence of cells into the default parent:\n * \n * (code)\n * graph.addCells([v1, v2]).\n * (end)\n */\nmxGraphModel.prototype.beginUpdate = function()\n{\n\tthis.updateLevel++;\n\tthis.fireEvent(new mxEventObject(mxEvent.BEGIN_UPDATE));\n\t\n\tif (this.updateLevel == 1)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t}\n};\n\n/**\n * Function: endUpdate\n * \n * Decrements the <updateLevel> by one and fires an <undo>\n * event if the <updateLevel> reaches 0. This function\n * indirectly fires a <change> event by invoking the notify\n * function on the <currentEdit> und then creates a new\n * <currentEdit> using <createUndoableEdit>.\n *\n * The <undo> event is fired only once per edit, whereas\n * the <change> event is fired whenever the notify\n * function is invoked, that is, on undo and redo of\n * the edit.\n */\nmxGraphModel.prototype.endUpdate = function()\n{\n\tthis.updateLevel--;\n\t\n\tif (this.updateLevel == 0)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tif (!this.endingUpdate)\n\t{\n\t\tthis.endingUpdate = this.updateLevel == 0;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_UPDATE, 'edit', this.currentEdit));\n\n\t\ttry\n\t\t{\t\t\n\t\t\tif (this.endingUpdate && !this.currentEdit.isEmpty())\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_UNDO, 'edit', this.currentEdit));\n\t\t\t\tvar tmp = this.currentEdit;\n\t\t\t\tthis.currentEdit = this.createUndoableEdit();\n\t\t\t\ttmp.notify();\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', tmp));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.endingUpdate = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: createUndoableEdit\n * \n * Creates a new <mxUndoableEdit> that implements the\n * notify function to fire a <change> and <notify> event\n * through the <mxUndoableEdit>'s source.\n * \n * Parameters:\n * \n * significant - Optional boolean that specifies if the edit to be created is\n * significant. Default is true.\n */\nmxGraphModel.prototype.createUndoableEdit = function(significant)\n{\n\tvar edit = new mxUndoableEdit(this, (significant != null) ? significant : true);\n\t\n\tedit.notify = function()\n\t{\n\t\t// LATER: Remove changes property (deprecated)\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t};\n\t\n\treturn edit;\n};\n\n/**\n * Function: mergeChildren\n * \n * Merges the children of the given cell into the given target cell inside\n * this model. All cells are cloned unless there is a corresponding cell in\n * the model with the same id, in which case the source cell is ignored and\n * all edges are connected to the corresponding cell in this model. Edges\n * are considered to have no identity and are always cloned unless the\n * cloneAllEdges flag is set to false, in which case edges with the same\n * id in the target model are reconnected to reflect the terminals of the\n * source edges.\n */\nmxGraphModel.prototype.mergeChildren = function(from, to, cloneAllEdges)\n{\n\tcloneAllEdges = (cloneAllEdges != null) ? cloneAllEdges : true;\n\t\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar mapping = new Object();\n\t\tthis.mergeChildrenImpl(from, to, cloneAllEdges, mapping);\n\t\t\n\t\t// Post-processes all edges in the mapping and\n\t\t// reconnects the terminals to the corresponding\n\t\t// cells in the target model\n\t\tfor (var key in mapping)\n\t\t{\n\t\t\tvar cell = mapping[key];\n\t\t\tvar terminal = this.getTerminal(cell, true);\n\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, true);\n\t\t\t}\n\t\t\t\n\t\t\tterminal = this.getTerminal(cell, false);\n\t\t\t\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, false);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: mergeChildren\n * \n * Clones the children of the source cell into the given target cell in\n * this model and adds an entry to the mapping that maps from the source\n * cell to the target cell with the same id or the clone of the source cell\n * that was inserted into this model.\n */\nmxGraphModel.prototype.mergeChildrenImpl = function(from, to, cloneAllEdges, mapping)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar childCount = from.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = from.getChildAt(i);\n\t\t\t\n\t\t\tif (typeof(cell.getId) == 'function')\n\t\t\t{\n\t\t\t\tvar id = cell.getId();\n\t\t\t\tvar target = (id != null && (!this.isEdge(cell) || !cloneAllEdges)) ?\n\t\t\t\t\t\tthis.getCell(id) : null;\n\t\t\t\t\n\t\t\t\t// Clones and adds the child if no cell exists for the id\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar clone = cell.clone();\n\t\t\t\t\tclone.setId(id);\n\t\t\t\t\t\n\t\t\t\t\t// Sets the terminals from the original cell to the clone\n\t\t\t\t\t// because the lookup uses strings not cells in JS\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(true), true);\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(false), false);\n\t\t\t\t\t\n\t\t\t\t\t// Do *NOT* use model.add as this will move the edge away\n\t\t\t\t\t// from the parent in updateEdgeParent if maintainEdgeParent\n\t\t\t\t\t// is enabled in the target model\n\t\t\t\t\ttarget = to.insert(clone);\n\t\t\t\t\tthis.cellAdded(target);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Stores the mapping for later reconnecting edges\n\t\t\t\tmapping[mxCellPath.create(cell)] = target;\n\t\t\t\t\n\t\t\t\t// Recurses\n\t\t\t\tthis.mergeChildrenImpl(cell, target, cloneAllEdges, mapping);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: getParents\n * \n * Returns an array that represents the set (no duplicates) of all parents\n * for the given array of cells.\n * \n * Parameters:\n * \n * cells - Array of cells whose parents should be returned.\n */\nmxGraphModel.prototype.getParents = function(cells)\n{\n\tvar parents = [];\n\t\n\tif (cells != null)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = this.getParent(cells[i]);\n\t\t\t\n\t\t\tif (parent != null && !dict.get(parent))\n\t\t\t{\n\t\t\t\tdict.put(parent, true);\n\t\t\t\tparents.push(parent);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn parents;\n};\n\n//\n// Cell Cloning\n//\n\n/**\n * Function: cloneCell\n * \n * Returns a deep clone of the given <mxCell> (including\n * the children) which is created using <cloneCells>.\n *\n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n */\nmxGraphModel.prototype.cloneCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn this.cloneCells([cell], true)[0];\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: cloneCells\n * \n * Returns an array of clones for the given array of <mxCells>.\n * Depending on the value of includeChildren, a deep clone is created for\n * each cell. Connections are restored based if the corresponding\n * cell is contained in the passed in array.\n *\n * Parameters:\n * \n * cells - Array of <mxCell> to be cloned.\n * includeChildren - Boolean indicating if the cells should be cloned\n * with all descendants.\n * mapping - Optional mapping for existing clones.\n */\nmxGraphModel.prototype.cloneCells = function(cells, includeChildren, mapping)\n{\n\tmapping = (mapping != null) ? mapping : new Object();\n\tvar clones = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (cells[i] != null)\n\t\t{\n\t\t\tclones.push(this.cloneCellImpl(cells[i], mapping, includeChildren));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones.push(null);\n\t\t}\n\t}\n\t\n\tfor (var i = 0; i < clones.length; i++)\n\t{\n\t\tif (clones[i] != null)\n\t\t{\n\t\t\tthis.restoreClone(clones[i], cells[i], mapping);\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\t\t\t\n/**\n * Function: cloneCellImpl\n * \n * Inner helper method for cloning cells recursively.\n */\nmxGraphModel.prototype.cloneCellImpl = function(cell, mapping, includeChildren)\n{\n\tvar ident = mxObjectIdentity.get(cell);\n\tvar clone = mapping[ident];\n\t\n\tif (clone == null)\n\t{\n\t\tclone = this.cellCloned(cell);\n\t\tmapping[ident] = clone;\n\n\t\tif (includeChildren)\n\t\t{\n\t\t\tvar childCount = this.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cloneChild = this.cloneCellImpl(\n\t\t\t\t\tthis.getChildAt(cell, i), mapping, true);\n\t\t\t\tclone.insert(cloneChild);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn clone;\n};\n\n/**\n * Function: cellCloned\n * \n * Hook for cloning the cell. This returns cell.clone() or\n * any possible exceptions.\n */\nmxGraphModel.prototype.cellCloned = function(cell)\n{\n\treturn cell.clone();\n};\n\n/**\n * Function: restoreClone\n * \n * Inner helper method for restoring the connections in\n * a network of cloned cells.\n */\nmxGraphModel.prototype.restoreClone = function(clone, cell, mapping)\n{\n\tvar source = this.getTerminal(cell, true);\n\t\n\tif (source != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(source)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\ttmp.insertEdge(clone, true);\n\t\t}\n\t}\n\t\n\tvar target = this.getTerminal(cell, false);\n\t\n\tif (target != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(target)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\t\n\t\t\ttmp.insertEdge(clone, false);\n\t\t}\n\t}\n\t\n\tvar childCount = this.getChildCount(clone);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.restoreClone(this.getChildAt(clone, i),\n\t\t\tthis.getChildAt(cell, i), mapping);\n\t}\n};\n\n//\n// Atomic changes\n//\n\n/**\n * Class: mxRootChange\n * \n * Action to change the root in a model.\n *\n * Constructor: mxRootChange\n * \n * Constructs a change of the root in the\n * specified model.\n */\nfunction mxRootChange(model, root)\n{\n\tthis.model = model;\n\tthis.root = root;\n\tthis.previous = root;\n};\n\n/**\n * Function: execute\n * \n * Carries out a change of the root using\n * <mxGraphModel.rootChanged>.\n */\nmxRootChange.prototype.execute = function()\n{\n\tthis.root = this.previous;\n\tthis.previous = this.model.rootChanged(this.previous);\n};\n\n/**\n * Class: mxChildChange\n * \n * Action to add or remove a child in a model.\n *\n * Constructor: mxChildChange\n * \n * Constructs a change of a child in the\n * specified model.\n */\nfunction mxChildChange(model, parent, child, index)\n{\n\tthis.model = model;\n\tthis.parent = parent;\n\tthis.previous = parent;\n\tthis.child = child;\n\tthis.index = index;\n\tthis.previousIndex = index;\n};\n\n/**\n * Function: execute\n * \n * Changes the parent of <child> using\n * <mxGraphModel.parentForCellChanged> and\n * removes or restores the cell's\n * connections.\n */\nmxChildChange.prototype.execute = function()\n{\n\tif (this.child != null)\n\t{\n\t\tvar tmp = this.model.getParent(this.child);\n\t\tvar tmp2 = (tmp != null) ? tmp.getIndex(this.child) : 0;\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.connect(this.child, false);\n\t\t}\n\t\t\n\t\ttmp = this.model.parentForCellChanged(\n\t\t\tthis.child, this.previous, this.previousIndex);\n\t\t\t\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.connect(this.child, true);\n\t\t}\n\t\t\n\t\tthis.parent = this.previous;\n\t\tthis.previous = tmp;\n\t\tthis.index = this.previousIndex;\n\t\tthis.previousIndex = tmp2;\n\t}\n};\n\n/**\n * Function: disconnect\n * \n * Disconnects the given cell recursively from its\n * terminals and stores the previous terminal in the\n * cell's terminals.\n */\nmxChildChange.prototype.connect = function(cell, isConnect)\n{\n\tisConnect = (isConnect != null) ? isConnect : true;\n\t\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\t\n\tif (source != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, source, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, true);\n\t\t}\n\t}\n\t\n\tif (target != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, target, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, false);\n\t\t}\n\t}\n\t\n\tcell.setTerminal(source, true);\n\tcell.setTerminal(target, false);\n\t\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i=0; i<childCount; i++)\n\t{\n\t\tthis.connect(this.model.getChildAt(cell, i), isConnect);\n\t}\n};\n\n/**\n * Class: mxTerminalChange\n * \n * Action to change a terminal in a model.\n *\n * Constructor: mxTerminalChange\n * \n * Constructs a change of a terminal in the \n * specified model.\n */\nfunction mxTerminalChange(model, cell, terminal, source)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.terminal = terminal;\n\tthis.previous = terminal;\n\tthis.source = source;\n};\n\n/**\n * Function: execute\n * \n * Changes the terminal of <cell> to <previous> using\n * <mxGraphModel.terminalForCellChanged>.\n */\nmxTerminalChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.terminal = this.previous;\n\t\tthis.previous = this.model.terminalForCellChanged(\n\t\t\tthis.cell, this.previous, this.source);\n\t}\n};\n\n/**\n * Class: mxValueChange\n * \n * Action to change a user object in a model.\n *\n * Constructor: mxValueChange\n * \n * Constructs a change of a user object in the \n * specified model.\n */\nfunction mxValueChange(model, cell, value)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the value of <cell> to <previous> using\n * <mxGraphModel.valueForCellChanged>.\n */\nmxValueChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.value = this.previous;\n\t\tthis.previous = this.model.valueForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxStyleChange\n * \n * Action to change a cell's style in a model.\n *\n * Constructor: mxStyleChange\n * \n * Constructs a change of a style in the\n * specified model.\n */\nfunction mxStyleChange(model, cell, style)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.style = style;\n\tthis.previous = style;\n};\n\n/**\n * Function: execute\n * \n * Changes the style of <cell> to <previous> using\n * <mxGraphModel.styleForCellChanged>.\n */\nmxStyleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.style = this.previous;\n\t\tthis.previous = this.model.styleForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxGeometryChange\n * \n * Action to change a cell's geometry in a model.\n *\n * Constructor: mxGeometryChange\n * \n * Constructs a change of a geometry in the\n * specified model.\n */\nfunction mxGeometryChange(model, cell, geometry)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.geometry = geometry;\n\tthis.previous = geometry;\n};\n\n/**\n * Function: execute\n * \n * Changes the geometry of <cell> ro <previous> using\n * <mxGraphModel.geometryForCellChanged>.\n */\nmxGeometryChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.geometry = this.previous;\n\t\tthis.previous = this.model.geometryForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCollapseChange\n * \n * Action to change a cell's collapsed state in a model.\n *\n * Constructor: mxCollapseChange\n * \n * Constructs a change of a collapsed state in the\n * specified model.\n */\nfunction mxCollapseChange(model, cell, collapsed)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.collapsed = collapsed;\n\tthis.previous = collapsed;\n};\n\n/**\n * Function: execute\n * \n * Changes the collapsed state of <cell> to <previous> using\n * <mxGraphModel.collapsedStateForCellChanged>.\n */\nmxCollapseChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.collapsed = this.previous;\n\t\tthis.previous = this.model.collapsedStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxVisibleChange\n * \n * Action to change a cell's visible state in a model.\n *\n * Constructor: mxVisibleChange\n * \n * Constructs a change of a visible state in the\n * specified model.\n */\nfunction mxVisibleChange(model, cell, visible)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.visible = visible;\n\tthis.previous = visible;\n};\n\n/**\n * Function: execute\n * \n * Changes the visible state of <cell> to <previous> using\n * <mxGraphModel.visibleStateForCellChanged>.\n */\nmxVisibleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.visible = this.previous;\n\t\tthis.previous = this.model.visibleStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCellAttributeChange\n * \n * Action to change the attribute of a cell's user object.\n * There is no method on the graph model that uses this\n * action. To use the action, you can use the code shown\n * in the example below.\n * \n * Example:\n * \n * To change the attributeName in the cell's user object\n * to attributeValue, use the following code:\n * \n * (code)\n * model.beginUpdate();\n * try\n * {\n *   var edit = new mxCellAttributeChange(\n *     cell, attributeName, attributeValue);\n *   model.execute(edit);\n * }\n * finally\n * {\n *   model.endUpdate();\n * } \n * (end)\n *\n * Constructor: mxCellAttributeChange\n * \n * Constructs a change of a attribute of the DOM node\n * stored as the value of the given <mxCell>.\n */\nfunction mxCellAttributeChange(cell, attribute, value)\n{\n\tthis.cell = cell;\n\tthis.attribute = attribute;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the attribute of the cell's user object by\n * using <mxCell.setAttribute>.\n */\nmxCellAttributeChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tvar tmp = this.cell.getAttribute(this.attribute);\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.cell.value.removeAttribute(this.attribute);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.cell.setAttribute(this.attribute, this.previous);\n\t\t}\n\t\t\n\t\tthis.previous = tmp;\n\t}\n};\n\n__mxOutput.mxGraphModel = typeof mxGraphModel !== 'undefined' ? mxGraphModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCell\n *\n * Cells are the elements of the graph model. They represent the state\n * of the groups, vertices and edges in a graph.\n * \n * Custom attributes:\n * \n * For custom attributes we recommend using an XML node as the value of a cell.\n * The following code can be used to create a cell with an XML node as the\n * value:\n * \n * (code)\n * var doc = mxUtils.createXmlDocument();\n * var node = doc.createElement('MyNode')\n * node.setAttribute('label', 'MyLabel');\n * node.setAttribute('attribute1', 'value1');\n * graph.insertVertex(graph.getDefaultParent(), null, node, 40, 40, 80, 30);\n * (end)\n * \n * For the label to work, <mxGraph.convertValueToString> and\n * <mxGraph.cellLabelChanged> should be overridden as follows:\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     return cell.getAttribute('label', '')\n *   }\n * };\n * \n * var cellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     // Clones the value for correct undo/redo\n *     var elt = cell.value.cloneNode(true);\n *     elt.setAttribute('label', newValue);\n *     newValue = elt;\n *   }\n *   \n *   cellLabelChanged.apply(this, arguments);\n * };\n * (end)\n * \n * Callback: onInit\n *\n * Called from within the constructor.\n * \n * Constructor: mxCell\n *\n * Constructs a new cell to be used in a graph model.\n * This method invokes <onInit> upon completion.\n * \n * Parameters:\n * \n * value - Optional object that represents the cell value.\n * geometry - Optional <mxGeometry> that specifies the geometry.\n * style - Optional formatted string that defines the style.\n */\nfunction mxCell(value, geometry, style)\n{\n\tthis.value = value;\n\tthis.setGeometry(geometry);\n\tthis.setStyle(style);\n\t\n\tif (this.onInit != null)\n\t{\n\t\tthis.onInit();\n\t}\n};\n\n/**\n * Variable: id\n *\n * Holds the Id. Default is null.\n */\nmxCell.prototype.id = null;\n\n/**\n * Variable: value\n *\n * Holds the user object. Default is null.\n */\nmxCell.prototype.value = null;\n\n/**\n * Variable: geometry\n *\n * Holds the <mxGeometry>. Default is null.\n */\nmxCell.prototype.geometry = null;\n\n/**\n * Variable: style\n *\n * Holds the style as a string of the form [(stylename|key=value);]. Default is\n * null.\n */\nmxCell.prototype.style = null;\n\n/**\n * Variable: vertex\n *\n * Specifies whether the cell is a vertex. Default is false.\n */\nmxCell.prototype.vertex = false;\n\n/**\n * Variable: edge\n *\n * Specifies whether the cell is an edge. Default is false.\n */\nmxCell.prototype.edge = false;\n\n/**\n * Variable: connectable\n *\n * Specifies whether the cell is connectable. Default is true.\n */\nmxCell.prototype.connectable = true;\n\n/**\n * Variable: visible\n *\n * Specifies whether the cell is visible. Default is true.\n */\nmxCell.prototype.visible = true;\n\n/**\n * Variable: collapsed\n *\n * Specifies whether the cell is collapsed. Default is false.\n */\nmxCell.prototype.collapsed = false;\n\n/**\n * Variable: parent\n *\n * Reference to the parent cell.\n */\nmxCell.prototype.parent = null;\n\n/**\n * Variable: source\n *\n * Reference to the source terminal.\n */\nmxCell.prototype.source = null;\n\n/**\n * Variable: target\n *\n * Reference to the target terminal.\n */\nmxCell.prototype.target = null;\n\n/**\n * Variable: children\n *\n * Holds the child cells.\n */\nmxCell.prototype.children = null;\n\n/**\n * Variable: edges\n *\n * Holds the edges.\n */\nmxCell.prototype.edges = null;\n\n/**\n * Variable: mxTransient\n *\n * List of members that should not be cloned inside <clone>. This field is\n * passed to <mxUtils.clone> and is not made persistent in <mxCellCodec>.\n * This is not a convention for all classes, it is only used in this class\n * to mark transient fields since transient modifiers are not supported by\n * the language.\n */\nmxCell.prototype.mxTransient = ['id', 'value', 'parent', 'source',\n                                'target', 'children', 'edges'];\n\n/**\n * Function: getId\n *\n * Returns the Id of the cell as a string.\n */\nmxCell.prototype.getId = function()\n{\n\treturn this.id;\n};\n\t\t\n/**\n * Function: setId\n *\n * Sets the Id of the cell to the given string.\n */\nmxCell.prototype.setId = function(id)\n{\n\tthis.id = id;\n};\n\n/**\n * Function: getValue\n *\n * Returns the user object of the cell. The user\n * object is stored in <value>.\n */\nmxCell.prototype.getValue = function()\n{\n\treturn this.value;\n};\n\t\t\n/**\n * Function: setValue\n *\n * Sets the user object of the cell. The user object\n * is stored in <value>.\n */\nmxCell.prototype.setValue = function(value)\n{\n\tthis.value = value;\n};\n\n/**\n * Function: valueChanged\n *\n * Changes the user object after an in-place edit\n * and returns the previous value. This implementation\n * replaces the user object with the given value and\n * returns the old user object.\n */\nmxCell.prototype.valueChanged = function(newValue)\n{\n\tvar previous = this.getValue();\n\tthis.setValue(newValue);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getGeometry\n *\n * Returns the <mxGeometry> that describes the <geometry>.\n */\nmxCell.prototype.getGeometry = function()\n{\n\treturn this.geometry;\n};\n\n/**\n * Function: setGeometry\n *\n * Sets the <mxGeometry> to be used as the <geometry>.\n */\nmxCell.prototype.setGeometry = function(geometry)\n{\n\tthis.geometry = geometry;\n};\n\n/**\n * Function: getStyle\n *\n * Returns a string that describes the <style>.\n */\nmxCell.prototype.getStyle = function()\n{\n\treturn this.style;\n};\n\n/**\n * Function: setStyle\n *\n * Sets the string to be used as the <style>.\n */\nmxCell.prototype.setStyle = function(style)\n{\n\tthis.style = style;\n};\n\n/**\n * Function: isVertex\n *\n * Returns true if the cell is a vertex.\n */\nmxCell.prototype.isVertex = function()\n{\n\treturn this.vertex != 0;\n};\n\n/**\n * Function: setVertex\n *\n * Specifies if the cell is a vertex. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * vertex - Boolean that specifies if the cell is a vertex.\n */\nmxCell.prototype.setVertex = function(vertex)\n{\n\tthis.vertex = vertex;\n};\n\n/**\n * Function: isEdge\n *\n * Returns true if the cell is an edge.\n */\nmxCell.prototype.isEdge = function()\n{\n\treturn this.edge != 0;\n};\n\t\n/**\n * Function: setEdge\n * \n * Specifies if the cell is an edge. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * edge - Boolean that specifies if the cell is an edge.\n */\nmxCell.prototype.setEdge = function(edge)\n{\n\tthis.edge = edge;\n};\n\n/**\n * Function: isConnectable\n *\n * Returns true if the cell is connectable.\n */\nmxCell.prototype.isConnectable = function()\n{\n\treturn this.connectable != 0;\n};\n\n/**\n * Function: setConnectable\n *\n * Sets the connectable state.\n * \n * Parameters:\n * \n * connectable - Boolean that specifies the new connectable state.\n */\nmxCell.prototype.setConnectable = function(connectable)\n{\n\tthis.connectable = connectable;\n};\n\n/**\n * Function: isVisible\n *\n * Returns true if the cell is visibile.\n */\nmxCell.prototype.isVisible = function()\n{\n\treturn this.visible != 0;\n};\n\n/**\n * Function: setVisible\n *\n * Specifies if the cell is visible.\n * \n * Parameters:\n * \n * visible - Boolean that specifies the new visible state.\n */\nmxCell.prototype.setVisible = function(visible)\n{\n\tthis.visible = visible;\n};\n\n/**\n * Function: isCollapsed\n *\n * Returns true if the cell is collapsed.\n */\nmxCell.prototype.isCollapsed = function()\n{\n\treturn this.collapsed != 0;\n};\n\n/**\n * Function: setCollapsed\n *\n * Sets the collapsed state.\n * \n * Parameters:\n * \n * collapsed - Boolean that specifies the new collapsed state.\n */\nmxCell.prototype.setCollapsed = function(collapsed)\n{\n\tthis.collapsed = collapsed;\n};\n\n/**\n * Function: getParent\n *\n * Returns the cell's parent.\n */\nmxCell.prototype.getParent = function()\n{\n\treturn this.parent;\n};\n\n/**\n * Function: setParent\n *\n * Sets the parent cell.\n * \n * Parameters:\n * \n * parent - <mxCell> that represents the new parent.\n */\nmxCell.prototype.setParent = function(parent)\n{\n\tthis.parent = parent;\n};\n\n/**\n * Function: getTerminal\n *\n * Returns the source or target terminal.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source terminal should be\n * returned.\n */\nmxCell.prototype.getTerminal = function(source)\n{\n\treturn (source) ? this.source : this.target;\n};\n\n/**\n * Function: setTerminal\n *\n * Sets the source or target terminal and returns the new terminal.\n * \n * Parameters:\n * \n * terminal - <mxCell> that represents the new source or target terminal.\n * isSource - Boolean that specifies if the source or target terminal\n * should be set.\n */\nmxCell.prototype.setTerminal = function(terminal, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.source = terminal;\n\t}\n\telse\n\t{\n\t\tthis.target = terminal;\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of child cells.\n */\nmxCell.prototype.getChildCount = function()\n{\n\treturn (this.children == null) ? 0 : this.children.length;\n};\n\n/**\n * Function: getIndex\n *\n * Returns the index of the specified child in the child array.\n * \n * Parameters:\n * \n * child - Child whose index should be returned.\n */\nmxCell.prototype.getIndex = function(child)\n{\n\treturn mxUtils.indexOf(this.children, child);\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child at the specified index.\n * \n * Parameters:\n * \n * index - Integer that specifies the child to be returned.\n */\nmxCell.prototype.getChildAt = function(index)\n{\n\treturn (this.children == null) ? null : this.children[index];\n};\n\n/**\n * Function: insert\n *\n * Inserts the specified child into the child array at the specified index\n * and updates the parent reference of the child. If not childIndex is\n * specified then the child is appended to the child array. Returns the\n * inserted child.\n * \n * Parameters:\n * \n * child - <mxCell> to be inserted or appended to the child array.\n * index - Optional integer that specifies the index at which the child\n * should be inserted into the child array.\n */\nmxCell.prototype.insert = function(child, index)\n{\n\tif (child != null)\n\t{\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount();\n\t\t\t\n\t\t\tif (child.getParent() == this)\n\t\t\t{\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\n\t\tchild.removeFromParent();\n\t\tchild.setParent(this);\n\t\t\n\t\tif (this.children == null)\n\t\t{\n\t\t\tthis.children = [];\n\t\t\tthis.children.push(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.children.splice(index, 0, child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: remove\n *\n * Removes the child at the specified index from the child array and\n * returns the child that was removed. Will remove the parent reference of\n * the child.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the child to be\n * removed.\n */\nmxCell.prototype.remove = function(index)\n{\n\tvar child = null;\n\t\n\tif (this.children != null && index >= 0)\n\t{\n\t\tchild = this.getChildAt(index);\n\t\t\n\t\tif (child != null)\n\t\t{\n\t\t\tthis.children.splice(index, 1);\n\t\t\tchild.setParent(null);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: removeFromParent\n *\n * Removes the cell from its parent.\n */\nmxCell.prototype.removeFromParent = function()\n{\n\tif (this.parent != null)\n\t{\n\t\tvar index = this.parent.getIndex(this);\n\t\tthis.parent.remove(index);\n\t}\n};\n\n/**\n * Function: getEdgeCount\n *\n * Returns the number of edges in the edge array.\n */\nmxCell.prototype.getEdgeCount = function()\n{\n\treturn (this.edges == null) ? 0 : this.edges.length;\n};\n\n/**\n * Function: getEdgeIndex\n *\n * Returns the index of the specified edge in <edges>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose index in <edges> should be returned.\n */\nmxCell.prototype.getEdgeIndex = function(edge)\n{\n\treturn mxUtils.indexOf(this.edges, edge);\n};\n\n/**\n * Function: getEdgeAt\n *\n * Returns the edge at the specified index in <edges>.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the edge to be returned.\n */\nmxCell.prototype.getEdgeAt = function(index)\n{\n\treturn (this.edges == null) ? null : this.edges[index];\n};\n\n/**\n * Function: insertEdge\n *\n * Inserts the specified edge into the edge array and returns the edge.\n * Will update the respective terminal reference of the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.insertEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tedge.removeFromTerminal(isOutgoing);\n\t\tedge.setTerminal(this, isOutgoing);\n\t\t\n\t\tif (this.edges == null ||\n\t\t\tedge.getTerminal(!isOutgoing) != this ||\n\t\t\tmxUtils.indexOf(this.edges, edge) < 0)\n\t\t{\n\t\t\tif (this.edges == null)\n\t\t\t{\n\t\t\t\tthis.edges = [];\n\t\t\t}\n\t\t\t\n\t\t\tthis.edges.push(edge);\n\t\t}\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeEdge\n *\n * Removes the specified edge from the edge array and returns the edge.\n * Will remove the respective terminal reference from the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be removed from the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.removeEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tif (edge.getTerminal(!isOutgoing) != this &&\n\t\t\tthis.edges != null)\n\t\t{\n\t\t\tvar index = this.getEdgeIndex(edge);\n\t\t\t\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\tthis.edges.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge.setTerminal(null, isOutgoing);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeFromTerminal\n *\n * Removes the edge from its source or target terminal.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the edge should be removed from its\n * source or target terminal.\n */\nmxCell.prototype.removeFromTerminal = function(isSource)\n{\n\tvar terminal = this.getTerminal(isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.removeEdge(this, isSource);\n\t}\n};\n\n/**\n * Function: hasAttribute\n * \n * Returns true if the user object is an XML node that contains the given\n * attribute.\n * \n * Parameters:\n * \n * name - Name of the attribute.\n */\nmxCell.prototype.hasAttribute = function(name)\n{\n\tvar userObject = this.getValue();\n\t\n\treturn (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT && userObject.hasAttribute) ?\n\t\tuserObject.hasAttribute(name) : userObject.getAttribute(name) != null;\n};\n\n/**\n * Function: getAttribute\n *\n * Returns the specified attribute from the user object if it is an XML\n * node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be returned.\n * defaultValue - Optional default value to use if the attribute has no\n * value.\n */\nmxCell.prototype.getAttribute = function(name, defaultValue)\n{\n\tvar userObject = this.getValue();\n\t\n\tvar val = (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT) ?\n\t\tuserObject.getAttribute(name) : null;\n\t\t\n\treturn (val != null) ? val : defaultValue;\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the specified attribute on the user object if it is an XML node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be set.\n * value - New value of the attribute.\n */\nmxCell.prototype.setAttribute = function(name, value)\n{\n\tvar userObject = this.getValue();\n\t\n\tif (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tuserObject.setAttribute(name, value);\n\t}\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of the cell. Uses <cloneValue> to clone\n * the user object. All fields in <mxTransient> are ignored\n * during the cloning.\n */\nmxCell.prototype.clone = function()\n{\n\tvar clone = mxUtils.clone(this, this.mxTransient);\n\tclone.setValue(this.cloneValue());\n\t\n\treturn clone;\n};\n\n/**\n * Function: cloneValue\n *\n * Returns a clone of the cell's user object.\n */\nmxCell.prototype.cloneValue = function()\n{\n\tvar value = this.getValue();\n\t\n\tif (value != null)\n\t{\n\t\tif (typeof(value.clone) == 'function')\n\t\t{\n\t\t\tvalue = value.clone();\n\t\t}\n\t\telse if (!isNaN(value.nodeType))\n\t\t{\n\t\t\tvalue = value.cloneNode(true);\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n__mxOutput.mxCell = typeof mxCell !== 'undefined' ? mxCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGeometry\n * \n * Extends <mxRectangle> to represent the geometry of a cell.\n * \n * For vertices, the geometry consists of the x- and y-location, and the width\n * and height. For edges, the geometry consists of the optional terminal- and\n * control points. The terminal points are only required if an edge is\n * unconnected, and are stored in the <sourcePoint> and <targetPoint>\n * variables, respectively.\n * \n * Example:\n * \n * If an edge is unconnected, that is, it has no source or target terminal,\n * then a geometry with terminal points for a new edge can be defined as\n * follows.\n * \n * (code)\n * geometry.setTerminalPoint(new mxPoint(x1, y1), true);\n * geometry.points = [new mxPoint(x2, y2)];\n * geometry.setTerminalPoint(new mxPoint(x3, y3), false);\n * (end)\n * \n * Control points are used regardless of the connected state of an edge and may\n * be ignored or interpreted differently depending on the edge's <mxEdgeStyle>.\n * \n * To disable automatic reset of control points after a cell has been moved or\n * resized, the the <mxGraph.resizeEdgesOnMove> and\n * <mxGraph.resetEdgesOnResize> may be used.\n *\n * Edge Labels:\n * \n * Using the x- and y-coordinates of a cell's geometry, it is possible to\n * position the label on edges on a specific location on the actual edge shape\n * as it appears on the screen. The x-coordinate of an edge's geometry is used\n * to describe the distance from the center of the edge from -1 to 1 with 0\n * being the center of the edge and the default value. The y-coordinate of an\n * edge's geometry is used to describe the absolute, orthogonal distance in\n * pixels from that point. In addition, the <mxGeometry.offset> is used as an\n * absolute offset vector from the resulting point.\n * \n * This coordinate system is applied if <relative> is true, otherwise the\n * offset defines the absolute vector from the edge's center point to the\n * label and the values for <x> and <y> are ignored.\n * \n * The width and height parameter for edge geometries can be used to set the\n * label width and height (eg. for word wrapping).\n * \n * Ports:\n * \n * The term \"port\" refers to a relatively positioned, connectable child cell,\n * which is used to specify the connection between the parent and another cell\n * in the graph. Ports are typically modeled as vertices with relative\n * geometries.\n * \n * Offsets:\n * \n * The <offset> field is interpreted in 3 different ways, depending on the cell\n * and the geometry. For edges, the offset defines the absolute offset for the\n * edge label. For relative geometries, the offset defines the absolute offset\n * for the origin (top, left corner) of the vertex, otherwise the offset\n * defines the absolute offset for the label inside the vertex or group.\n * \n * Constructor: mxGeometry\n *\n * Constructs a new object to describe the size and location of a vertex or\n * the control points of an edge.\n */\nfunction mxGeometry(x, y, width, height)\n{\n\tmxRectangle.call(this, x, y, width, height);\n};\n\n/**\n * Extends mxRectangle.\n */\nmxGeometry.prototype = new mxRectangle();\nmxGeometry.prototype.constructor = mxGeometry;\n\n/**\n * Variable: TRANSLATE_CONTROL_POINTS\n * \n * Global switch to translate the points in translate. Default is true.\n */\nmxGeometry.prototype.TRANSLATE_CONTROL_POINTS = true;\n\n/**\n * Variable: alternateBounds\n *\n * Stores alternate values for x, y, width and height in a rectangle. See\n * <swap> to exchange the values. Default is null.\n */\nmxGeometry.prototype.alternateBounds = null;\n\n/**\n * Variable: sourcePoint\n *\n * Defines the source <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a source vertex. Otherwise it is\n * ignored. Default is  null.\n */\nmxGeometry.prototype.sourcePoint = null;\n\n/**\n * Variable: targetPoint\n *\n * Defines the target <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a target vertex. Otherwise it is\n * ignored. Default is null.\n */\nmxGeometry.prototype.targetPoint = null;\n\n/**\n * Variable: points\n *\n * Array of <mxPoints> which specifies the control points along the edge.\n * These points are the intermediate points on the edge, for the endpoints\n * use <targetPoint> and <sourcePoint> or set the terminals of the edge to\n * a non-null value. Default is null.\n */\nmxGeometry.prototype.points = null;\n\n/**\n * Variable: offset\n *\n * For edges, this holds the offset (in pixels) from the position defined\n * by <x> and <y> on the edge. For relative geometries (for vertices), this\n * defines the absolute offset from the point defined by the relative\n * coordinates. For absolute geometries (for vertices), this defines the\n * offset for the label. Default is null.\n */\nmxGeometry.prototype.offset = null;\n\n/**\n * Variable: relative\n *\n * Specifies if the coordinates in the geometry are to be interpreted as\n * relative coordinates. For edges, this is used to define the location of\n * the edge label relative to the edge as rendered on the display. For\n * vertices, this specifies the relative location inside the bounds of the\n * parent cell.\n * \n * If this is false, then the coordinates are relative to the origin of the\n * parent cell or, for edges, the edge label position is relative to the\n * center of the edge as rendered on screen.\n * \n * Default is false.\n */\nmxGeometry.prototype.relative = false;\n\n/**\n * Function: swap\n * \n * Swaps the x, y, width and height with the values stored in\n * <alternateBounds> and puts the previous values into <alternateBounds> as\n * a rectangle. This operation is carried-out in-place, that is, using the\n * existing geometry instance. If this operation is called during a graph\n * model transactional change, then the geometry should be cloned before\n * calling this method and setting the geometry of the cell using\n * <mxGraphModel.setGeometry>.\n */\nmxGeometry.prototype.swap = function()\n{\n\tif (this.alternateBounds != null)\n\t{\n\t\tvar old = new mxRectangle(\n\t\t\tthis.x, this.y, this.width, this.height);\n\n\t\tthis.x = this.alternateBounds.x;\n\t\tthis.y = this.alternateBounds.y;\n\t\tthis.width = this.alternateBounds.width;\n\t\tthis.height = this.alternateBounds.height;\n\n\t\tthis.alternateBounds = old;\n\t}\n};\n\n/**\n * Function: getTerminalPoint\n * \n * Returns the <mxPoint> representing the source or target point of this\n * edge. This is only used if the edge has no source or target vertex.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the source or target point\n * should be returned.\n */\nmxGeometry.prototype.getTerminalPoint = function(isSource)\n{\n\treturn (isSource) ? this.sourcePoint : this.targetPoint;\n};\n\n/**\n * Function: setTerminalPoint\n * \n * Sets the <sourcePoint> or <targetPoint> to the given <mxPoint> and\n * returns the new point.\n * \n * Parameters:\n * \n * point - Point to be used as the new source or target point.\n * isSource - Boolean that specifies if the source or target point\n * should be set.\n */\nmxGeometry.prototype.setTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.sourcePoint = point;\n\t}\n\telse\n\t{\n\t\tthis.targetPoint = point;\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the geometry by the given angle around the given center. That is,\n * <x> and <y> of the geometry, the <sourcePoint>, <targetPoint> and all\n * <points> are translated by the given amount. <x> and <y> are only\n * translated if <relative> is false.\n * \n * Parameters:\n * \n * angle - Number that specifies the rotation angle in degrees.\n * cx - <mxPoint> that specifies the center of the rotation.\n */\nmxGeometry.prototype.rotate = function(angle, cx)\n{\n\tvar rad = mxUtils.toRadians(angle);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\t\n\t// Rotates the geometry\n\tif (!this.relative)\n\t{\n\t\tvar ct = new mxPoint(this.getCenterX(), this.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\n\t\tthis.x = Math.round(pt.x - this.width / 2);\n\t\tthis.y = Math.round(pt.y - this.height / 2);\n\t}\n\n\t// Rotates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.sourcePoint, cos, sin, cx);\n\t\tthis.sourcePoint.x = Math.round(pt.x);\n\t\tthis.sourcePoint.y = Math.round(pt.y);\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.targetPoint, cos, sin, cx);\n\t\tthis.targetPoint.x = Math.round(pt.x);\n\t\tthis.targetPoint.y = Math.round(pt.y);\t\n\t}\n\t\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(this.points[i], cos, sin, cx);\n\t\t\t\tthis.points[i].x = Math.round(pt.x);\n\t\t\t\tthis.points[i].y = Math.round(pt.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: translate\n * \n * Translates the geometry by the specified amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are translated\n * by the given amount. <x> and <y> are only translated if <relative> is false.\n * If <TRANSLATE_CONTROL_POINTS> is false, then <points> are not modified by\n * this function.\n * \n * Parameters:\n * \n * dx - Number that specifies the x-coordinate of the translation.\n * dy - Number that specifies the y-coordinate of the translation.\n */\nmxGeometry.prototype.translate = function(dx, dy)\n{\n\tdx = parseFloat(dx);\n\tdy = parseFloat(dy);\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) + dx;\n\t\tthis.y = parseFloat(this.y) + dy;\n\t}\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) + dx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) + dy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) + dx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) + dy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.TRANSLATE_CONTROL_POINTS && this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) + dx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) + dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: scale\n * \n * Scales the geometry by the given amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are scaled\n * by the given amount. <x>, <y>, <width> and <height> are only scaled if\n * <relative> is false. If <fixedAspect> is true, then the smaller value\n * is used to scale the width and the height.\n * \n * Parameters:\n * \n * sx - Number that specifies the horizontal scale factor.\n * sy - Number that specifies the vertical scale factor.\n * fixedAspect - Optional boolean to keep the aspect ratio fixed.\n */\nmxGeometry.prototype.scale = function(sx, sy, fixedAspect)\n{\n\tsx = parseFloat(sx);\n\tsy = parseFloat(sy);\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) * sx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) * sy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) * sx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) * sy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) * sx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) * sy;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) * sx;\n\t\tthis.y = parseFloat(this.y) * sy;\n\n\t\tif (fixedAspect)\n\t\t{\n\t\t\tsy = sx = Math.min(sx, sy);\n\t\t}\n\t\t\n\t\tthis.width = parseFloat(this.width) * sx;\n\t\tthis.height = parseFloat(this.height) * sy;\n\t}\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this geometry.\n */\nmxGeometry.prototype.equals = function(obj)\n{\n\treturn mxRectangle.prototype.equals.apply(this, arguments) &&\n\t\tthis.relative == obj.relative &&\n\t\t((this.sourcePoint == null && obj.sourcePoint == null) || (this.sourcePoint != null && this.sourcePoint.equals(obj.sourcePoint))) &&\n\t\t((this.targetPoint == null && obj.targetPoint == null) || (this.targetPoint != null && this.targetPoint.equals(obj.targetPoint))) &&\n\t\t((this.points == null && obj.points == null) || (this.points != null && mxUtils.equalPoints(this.points, obj.points))) &&\n\t\t((this.alternateBounds == null && obj.alternateBounds == null) || (this.alternateBounds != null && this.alternateBounds.equals(obj.alternateBounds))) &&\n\t\t((this.offset == null && obj.offset == null) || (this.offset != null && this.offset.equals(obj.offset)));\n};\n\n__mxOutput.mxGeometry = typeof mxGeometry !== 'undefined' ? mxGeometry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCellPath =\n{\n\n\t/**\n\t * Class: mxCellPath\n\t * \n\t * Implements a mechanism for temporary cell Ids.\n\t * \n\t * Variable: PATH_SEPARATOR\n\t * \n\t * Defines the separator between the path components. Default is \".\".\n\t */\n\tPATH_SEPARATOR: '.',\n\t\n\t/**\n\t * Function: create\n\t * \n\t * Creates the cell path for the given cell. The cell path is a\n\t * concatenation of the indices of all ancestors on the (finite) path to\n\t * the root, eg. \"0.0.0.1\".\n\t * \n\t * Parameters:\n\t * \n\t * cell - Cell whose path should be returned.\n\t */\n\tcreate: function(cell)\n\t{\n\t\tvar result = '';\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tvar parent = cell.getParent();\n\t\t\t\n\t\t\twhile (parent != null)\n\t\t\t{\n\t\t\t\tvar index = parent.getIndex(cell);\n\t\t\t\tresult = index + mxCellPath.PATH_SEPARATOR + result;\n\t\t\t\t\n\t\t\t\tcell = parent;\n\t\t\t\tparent = cell.getParent();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes trailing separator\n\t\tvar n = result.length;\n\t\t\n\t\tif (n > 1)\n\t\t{\n\t\t\tresult = result.substring(0, n - 1);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getParentPath\n\t * \n\t * Returns the path for the parent of the cell represented by the given\n\t * path. Returns null if the given path has no parent.\n\t * \n\t * Parameters:\n\t * \n\t * path - Path whose parent path should be returned.\n\t */\n\tgetParentPath: function(path)\n\t{\n\t\tif (path != null)\n\t\t{\n\t\t\tvar index = path.lastIndexOf(mxCellPath.PATH_SEPARATOR);\n\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\treturn path.substring(0, index);\n\t\t\t}\n\t\t\telse if (path.length > 0)\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: resolve\n\t * \n\t * Returns the cell for the specified cell path using the given root as the\n\t * root of the path.\n\t * \n\t * Parameters:\n\t * \n\t * root - Root cell of the path to be resolved.\n\t * path - String that defines the path.\n\t */\n\tresolve: function(root, path)\n\t{\n\t\tvar parent = root;\n\t\t\n\t\tif (path != null)\n\t\t{\n\t\t\tvar tokens = path.split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\n\t\t\tfor (var i=0; i<tokens.length; i++)\n\t\t\t{\n\t\t\t\tparent = parent.getChildAt(parseInt(tokens[i]));\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn parent;\n\t},\n\t\n\t/**\n\t * Function: compare\n\t * \n\t * Compares the given cell paths and returns -1 if p1 is smaller, 0 if\n\t * p1 is equal and 1 if p1 is greater than p2.\n\t */\n\tcompare: function(p1, p2)\n\t{\n\t\tvar min = Math.min(p1.length, p2.length);\n\t\tvar comp = 0;\n\t\t\n\t\tfor (var i = 0; i < min; i++)\n\t\t{\n\t\t\tif (p1[i] != p2[i])\n\t\t\t{\n\t\t\t\tif (p1[i].length == 0 ||\n\t\t\t\t\tp2[i].length == 0)\n\t\t\t\t{\n\t\t\t\t\tcomp = (p1[i] == p2[i]) ? 0 : ((p1[i] > p2[i]) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar t1 = parseInt(p1[i]);\n\t\t\t\t\tvar t2 = parseInt(p2[i]);\n\t\t\t\t\t\n\t\t\t\t\tcomp = (t1 == t2) ? 0 : ((t1 > t2) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Compares path length if both paths are equal to this point\n\t\tif (comp == 0)\n\t\t{\n\t\t\tvar t1 = p1.length;\n\t\t\tvar t2 = p2.length;\n\t\t\t\n\t\t\tif (t1 != t2)\n\t\t\t{\n\t\t\t\tcomp = (t1 > t2) ? 1 : -1;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn comp;\n\t}\n\n};\n\n__mxOutput.mxCellPath = typeof mxCellPath !== 'undefined' ? mxCellPath : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxPerimeter =\n{\n\t/**\n\t * Class: mxPerimeter\n\t * \n\t * Provides various perimeter functions to be used in a style\n\t * as the value of <mxConstants.STYLE_PERIMETER>. Perimeters for\n\t * rectangle, circle, rhombus and triangle are available.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t * (end)\n\t * \n\t * Or programmatically:\n\t * \n\t * (code)\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\t * (end)\n\t * \n\t * When adding new perimeter functions, it is recommended to use the \n\t * mxPerimeter-namespace as follows:\n\t * \n\t * (code)\n\t * mxPerimeter.CustomPerimeter = function (bounds, vertex, next, orthogonal)\n\t * {\n\t *   var x = 0; // Calculate x-coordinate\n\t *   var y = 0; // Calculate y-coordainte\n\t *   \n\t *   return new mxPoint(x, y);\n\t * }\n\t * (end)\n\t * \n\t * The new perimeter should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('customPerimeter', mxPerimeter.CustomPerimeter);\n\t * (end)\n\t * \n\t * The custom perimeter above can now be used in a specific vertex as follows:\n\t * \n\t * (code)\n\t * model.setStyle(vertex, 'perimeter=customPerimeter');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxPerimeter.CustomPerimeter for the value in\n\t * the cell style above.\n\t * \n\t * Or it can be used for all vertices in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultVertexStyle();\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.CustomPerimeter;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * The parameters are explained in <RectanglePerimeter>.\n\t * \n\t * Function: RectanglePerimeter\n\t * \n\t * Describes a rectangular perimeter for the given bounds.\n\t *\n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the absolute bounds of the\n\t * vertex.\n\t * vertex - <mxCellState> that represents the vertex.\n\t * next - <mxPoint> that represents the nearest neighbour point on the\n\t * given edge.\n\t * orthogonal - Boolean that specifies if the orthogonal projection onto\n\t * the perimeter should be returned. If this is false then the intersection\n\t * of the perimeter and the line between the next and the center point is\n\t * returned.\n\t */\n\tRectanglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\t\tvar alpha = Math.atan2(dy, dx);\n\t\tvar p = new mxPoint(0, 0);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI/2;\n\t\tvar beta = pi2 - alpha;\n\t\tvar t = Math.atan2(bounds.height, bounds.width);\n\t\t\n\t\tif (alpha < -pi + t || alpha > pi - t)\n\t\t{\n\t\t\t// Left edge\n\t\t\tp.x = bounds.x;\n\t\t\tp.y = cy - bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse if (alpha < -t)\n\t\t{\n\t\t\t// Top Edge\n\t\t\tp.y = bounds.y;\n\t\t\tp.x = cx - bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\telse if (alpha < t)\n\t\t{\n\t\t\t// Right Edge\n\t\t\tp.x = bounds.x + bounds.width;\n\t\t\tp.y = cy + bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Bottom Edge\n\t\t\tp.y = bounds.y + bounds.height;\n\t\t\tp.x = cx + bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (next.x >= bounds.x &&\n\t\t\t\tnext.x <= bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = next.x;\n\t\t\t}\n\t\t\telse if (next.y >= bounds.y &&\n\t\t\t\t\t   next.y <= bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = next.y;\n\t\t\t}\n\t\t\tif (next.x < bounds.x)\n\t\t\t{\n\t\t\t\tp.x = bounds.x;\n\t\t\t}\n\t\t\telse if (next.x > bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = bounds.x + bounds.width;\n\t\t\t}\n\t\t\tif (next.y < bounds.y)\n\t\t\t{\n\t\t\t\tp.y = bounds.y;\n\t\t\t}\n\t\t\telse if (next.y > bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = bounds.y + bounds.height;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: EllipsePerimeter\n\t * \n\t * Describes an elliptic perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tEllipsePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar a = bounds.width / 2;\n\t\tvar b = bounds.height / 2;\n\t\tvar cx = x + a;\n\t\tvar cy = y + b;\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\t\n\t\t// Calculates straight line equation through\n\t\t// point and ellipse center y = d * x + h\n\t\tvar dx = parseInt(px - cx);\n\t\tvar dy = parseInt(py - cy);\n\t\t\n\t\tif (dx == 0 && dy != 0)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy + b * dy / Math.abs(dy));\n\t\t}\n\t\telse if (dx == 0 && dy == 0)\n\t\t{\n\t\t\treturn new mxPoint(px, py);\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (py >= y && py <= y + bounds.height)\n\t\t\t{\n\t\t\t\tvar ty = py - cy;\n\t\t\t\tvar tx = Math.sqrt(a*a*(1-(ty*ty)/(b*b))) || 0;\n\t\t\t\t\n\t\t\t\tif (px <= x)\n\t\t\t\t{\n\t\t\t\t\ttx = -tx;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(cx+tx, py);\n\t\t\t}\n\t\t\t\n\t\t\tif (px >= x && px <= x + bounds.width)\n\t\t\t{\n\t\t\t\tvar tx = px - cx;\n\t\t\t\tvar ty = Math.sqrt(b*b*(1-(tx*tx)/(a*a))) || 0;\n\t\t\t\t\n\t\t\t\tif (py <= y)\n\t\t\t\t{\n\t\t\t\t\tty = -ty;\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(px, cy+ty);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Calculates intersection\n\t\tvar d = dy / dx;\n\t\tvar h = cy - d * cx;\n\t\tvar e = a * a * d * d + b * b;\n\t\tvar f = -2 * cx * e;\n\t\tvar g = a * a * d * d * cx * cx +\n\t\t\t\tb * b * cx * cx -\n\t\t\t\ta * a * b * b;\n\t\tvar det = Math.sqrt(f * f - 4 * e * g);\n\t\t\n\t\t// Two solutions (perimeter points)\n\t\tvar xout1 = (-f + det) / (2 * e);\n\t\tvar xout2 = (-f - det) / (2 * e);\n\t\tvar yout1 = d * xout1 + h;\n\t\tvar yout2 = d * xout2 + h;\n\t\tvar dist1 = Math.sqrt(Math.pow((xout1 - px), 2)\n\t\t\t\t\t+ Math.pow((yout1 - py), 2));\n\t\tvar dist2 = Math.sqrt(Math.pow((xout2 - px), 2)\n\t\t\t\t\t+ Math.pow((yout2 - py), 2));\n\t\t\t\t\t\n\t\t// Correct solution\n\t\tvar xout = 0;\n\t\tvar yout = 0;\n\t\t\n\t\tif (dist1 < dist2)\n\t\t{\n\t\t\txout = xout1;\n\t\t\tyout = yout1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\txout = xout2;\n\t\t\tyout = yout2;\n\t\t}\n\t\t\n\t\treturn new mxPoint(xout, yout);\n\t},\n\n\t/**\n\t * Function: RhombusPerimeter\n\t * \n\t * Describes a rhombus (aka diamond) perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tRhombusPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\n\t\t// Special case for intersecting the diamond's corners\n\t\tif (cx == px)\n\t\t{\n\t\t\tif (cy > py)\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y); // top\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y + h); // bottom\n\t\t\t}\n\t\t}\n\t\telse if (cy == py)\n\t\t{\n\t\t\tif (cx > px)\n\t\t\t{\n\t\t\t\treturn new mxPoint(x, cy); // left\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(x + w, cy); // right\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tx = cx;\n\t\tvar ty = cy;\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// In which quadrant will the intersection be?\n\t\t// set the slope and offset of the border line accordingly\n\t\tif (px < cx)\n\t\t{\n\t\t\tif (py < cy)\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x, cy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x, cy);\n\t\t\t}\n\t\t}\n\t\telse if (py < cy)\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x + w, cy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x + w, cy);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: TrianglePerimeter\n\t * \n\t * Describes a triangle perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tTrianglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar direction = (vertex != null) ?\n\t\t\tvertex.style[mxConstants.STYLE_DIRECTION] : null;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_SOUTH;\n\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\t\t\n\t\tvar start = new mxPoint(x, y);\n\t\tvar corner = new mxPoint(x + w, cy);\n\t\tvar end = new mxPoint(x, y + h);\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tstart = end;\n\t\t\tcorner = new mxPoint(cx, y);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tcorner = new mxPoint(cx, y + h);\n\t\t\tend = new mxPoint(x + w, y);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tstart = new mxPoint(x + w, y);\n\t\t\tcorner = new mxPoint(x, cy);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\n\t\tvar alpha = (vertical) ? Math.atan2(dx, dy) : Math.atan2(dy, dx);\n\t\tvar t = (vertical) ? Math.atan2(w, h) : Math.atan2(h, w);\n\t\t\n\t\tvar base = false;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tbase = alpha > -t && alpha < t;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbase = alpha < -Math.PI + t || alpha > Math.PI - t;\t\n\t\t}\n\n\t\tvar result = null;\t\t\t\n\n\t\tif (base)\n\t\t{\n\t\t\tif (orthogonal && ((vertical && next.x >= start.x && next.x <= end.x) ||\n\t\t\t\t(!vertical && next.y >= start.y && next.y <= end.y)))\n\t\t\t{\n\t\t\t\tif (vertical)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(next.x, start.y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(start.x, next.y);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 + h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty + h);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 - h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w, y + h / 2 +\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x, y + h / 2 -\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (orthogonal)\n\t\t\t{\n\t\t\t\tvar pt = new mxPoint(cx, cy);\n\t\t\n\t\t\t\tif (next.y >= y && next.y <= y + h)\n\t\t\t\t{\n\t\t\t\t\tpt.x = (vertical) ? cx : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_WEST) ?\n\t\t\t\t\t\t\tx + w : x);\n\t\t\t\t\tpt.y = next.y;\n\t\t\t\t}\n\t\t\t\telse if (next.x >= x && next.x <= x + w)\n\t\t\t\t{\n\t\t\t\t\tpt.x = next.x;\n\t\t\t\t\tpt.y = (!vertical) ? cy : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_NORTH) ?\n\t\t\t\t\t\t\ty + h : y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Compute angle\n\t\t\t\tdx = next.x - pt.x;\n\t\t\t\tdy = next.y - pt.y;\n\t\t\t\t\n\t\t\t\tcx = pt.x;\n\t\t\t\tcy = pt.y;\n\t\t\t}\n\n\t\t\tif ((vertical && next.x <= x + w / 2) ||\n\t\t\t\t(!vertical && next.y <= y + h / 2))\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tstart.x, start.y, corner.x, corner.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tcorner.x, corner.y, end.x, end.y);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\tresult = new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: HexagonPerimeter\n\t * \n\t * Describes a hexagon perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tHexagonPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\tvar dx = px - cx;\n\t\tvar dy = py - cy;\n\t\tvar alpha = -Math.atan2(dy, dx);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI / 2;\n\n\t\tvar result = new mxPoint(cx, cy);\n\n\t\tvar direction = (vertex != null) ? mxUtils.getValue(\n\t\t\t\tvertex.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_EAST) : mxConstants.DIRECTION_EAST;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH\n\t\t\t\t|| direction == mxConstants.DIRECTION_SOUTH;\n\t\tvar a = new mxPoint();\n\t\tvar b = new mxPoint();\n\n\t\t//Only consider corrects quadrants for the orthogonal case.\n\t\tif ((px < x) && (py < y) || (px < x) && (py > y + h)\n\t\t\t\t|| (px > x + w) && (py < y) || (px > x + w) && (py > y + h))\n\t\t{\n\t\t\torthogonal = false;\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (px == cx)\n\t\t\t\t{\n\t\t\t\t\tif (py <= y)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py >= y + h)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px < x)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (py == y)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t}\n\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (py == cy)\n\t\t\t\t{\n\t\t\t\t\tif (px <= x)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px >= x + w)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py < y)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (px == x)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, cy);\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, cy);\n\t\t\t\t}\n\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tx = cx;\n\t\t\tvar ty = cy;\n\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t\t\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tty = y + h;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tty = y;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t\t\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\ttx = x + w;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttx = x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(tx, ty, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 4, w / 2);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == pi2)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi2))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\n\t\t\t\tif ((alpha < beta) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha > pi2) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (((alpha > (pi - beta)) && (alpha <= pi))\n\t\t\t\t\t\t|| ((alpha < (-pi + beta)) && (alpha >= -pi)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > -pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -pi2) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 2, w / 4);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha == pi) || (alpha == -pi))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == 0)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y + h);\n\t\t\t\t}\n\n\t\t\t\tif ((alpha > 0) && (alpha < beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > (pi - beta)) && (alpha < pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < 0) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < (-pi + beta)) && (alpha > -pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(cx, cy, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n__mxOutput.mxPerimeter = typeof mxPerimeter !== 'undefined' ? mxPerimeter : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2017, draw.io AG\n */\n/**\n * Class: mxPrintPreview\n * \n * Implements printing of a diagram across multiple pages. The following opens\n * a print preview for an existing graph:\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.open();\n * (end)\n * \n * Use <mxUtils.getScaleForPageCount> as follows in order to print the graph\n * across a given number of pages:\n * \n * (code)\n * var pageCount = mxUtils.prompt('Enter page count', '1');\n * \n * if (pageCount != null)\n * {\n *   var scale = mxUtils.getScaleForPageCount(pageCount, graph);\n *   var preview = new mxPrintPreview(graph, scale);\n *   preview.open();\n * }\n * (end)\n * \n * Additional pages:\n * \n * To add additional pages before and after the output, <getCoverPages> and\n * <getAppendices> can be used, respectively.\n * \n * (code)\n * var preview = new mxPrintPreview(graph, 1);\n * \n * preview.getCoverPages = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Cover Page</p>'\n *   }))];\n * };\n * \n * preview.getAppendices = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Appendix</p>'\n *   }))];\n * };\n * \n * preview.open();\n * (end)\n * \n * CSS:\n * \n * The CSS from the original page is not carried over to the print preview.\n * To add CSS to the page, use the css argument in the <open> function or\n * override <writeHead> to add the respective link tags as follows:\n * \n * (code)\n * var writeHead = preview.writeHead;\n * preview.writeHead = function(doc, css)\n * {\n *   writeHead.apply(this, arguments);\n *   doc.writeln('<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">');\n * };\n * (end)\n * \n * Padding:\n * \n * To add a padding to the page in the preview (but not the print output), use\n * the following code:\n * \n * (code)\n * preview.writeHead = function(doc)\n * {\n *   writeHead.apply(this, arguments);\n *   \n *   doc.writeln('<style type=\"text/css\">');\n *   doc.writeln('@media screen {');\n *   doc.writeln('  body > div { padding-top:30px;padding-left:40px;box-sizing:content-box; }');\n *   doc.writeln('}');\n *   doc.writeln('</style>');\n * };\n * (end)\n * \n * Headers:\n * \n * Apart from setting the title argument in the mxPrintPreview constructor you\n * can override <renderPage> as follows to add a header to any page:\n * \n * (code)\n * var oldRenderPage = mxPrintPreview.prototype.renderPage;\n * mxPrintPreview.prototype.renderPage = function(w, h, x, y, content, pageNumber)\n * {\n *   var div = oldRenderPage.apply(this, arguments);\n *   \n *   var header = document.createElement('div');\n *   header.style.position = 'absolute';\n *   header.style.top = '0px';\n *   header.style.width = '100%';\n *   header.style.textAlign = 'right';\n *   mxUtils.write(header, 'Your header here');\n *   div.firstChild.appendChild(header);\n *   \n *   return div;\n * };\n * (end)\n * \n * The pageNumber argument contains the number of the current page, starting at\n * 1. To display a header on the first page only, check pageNumber and add a\n * vertical offset in the constructor call for the height of the header.\n * \n * Page Format:\n * \n * For landscape printing, use <mxConstants.PAGE_FORMAT_A4_LANDSCAPE> as\n * the pageFormat in <mxUtils.getScaleForPageCount> and <mxPrintPreview>.\n * Keep in mind that one can not set the defaults for the print dialog\n * of the operating system from JavaScript so the user must manually choose\n * a page format that matches this setting.\n * \n * You can try passing the following CSS directive to <open> to set the\n * page format in the print dialog to landscape. However, this CSS\n * directive seems to be ignored in most major browsers, including IE.\n * \n * (code)\n * @page {\n *   size: landscape;\n * }\n * (end)\n * \n * Note that the print preview behaves differently in IE when used from the\n * filesystem or via HTTP so printing should always be tested via HTTP.\n * \n * If you are using a DOCTYPE in the source page you can override <getDoctype>\n * and provide the same DOCTYPE for the print preview if required. Here is\n * an example for IE8 standards mode.\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.getDoctype = function()\n * {\n *   return '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=5,IE=8\" ><![endif]-->';\n * };\n * preview.open();\n * (end)\n * \n * Constructor: mxPrintPreview\n *\n * Constructs a new print preview for the given parameters.\n * \n * Parameters:\n * \n * graph - <mxGraph> to be previewed.\n * scale - Optional scale of the output. Default is 1 / <mxGraph.pageScale>.\n * pageFormat - <mxRectangle> that specifies the page format (in pixels).\n * border - Border in pixels along each side of every page. Note that the\n * actual print function in the browser will add another border for\n * printing.\n * This should match the page format of the printer. Default uses the\n * <mxGraph.pageFormat> of the given graph.\n * x0 - Optional left offset of the output. Default is 0.\n * y0 - Optional top offset of the output. Default is 0.\n * borderColor - Optional color of the page border. Default is no border.\n * Note that a border is sometimes useful to highlight the printed page\n * border in the print preview of the browser.\n * title - Optional string that is used for the window title. Default\n * is 'Printer-friendly version'.\n * pageSelector - Optional boolean that specifies if the page selector\n * should appear in the window with the print preview. Default is true.\n */\nfunction mxPrintPreview(graph, scale, pageFormat, border, x0, y0, borderColor, title, pageSelector)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.border = (border != null) ? border : 0;\n\tthis.pageFormat = mxRectangle.fromRectangle((pageFormat != null) ? pageFormat : graph.pageFormat);\n\tthis.title = (title != null) ? title : 'Printer-friendly version';\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.borderColor = borderColor;\n\tthis.pageSelector = (pageSelector != null) ? pageSelector : true;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> that should be previewed.\n */\nmxPrintPreview.prototype.graph = null;\n\n/**\n * Variable: pageFormat\n *\n * Holds the <mxRectangle> that defines the page format.\n */\nmxPrintPreview.prototype.pageFormat = null;\n\n/**\n * Variable: scale\n * \n * Holds the scale of the print preview.\n */\nmxPrintPreview.prototype.scale = null;\n\n/**\n * Variable: border\n * \n * The border inset around each side of every page in the preview. This is set\n * to 0 if autoOrigin is false.\n */\nmxPrintPreview.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * The margin at the top of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginTop = 0;\n\n/**\n * Variable: marginBottom\n * \n * The margin at the bottom of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginBottom = 0;\n\n/**\n * Variable: x0\n * \n * Holds the horizontal offset of the output.\n */\nmxPrintPreview.prototype.x0 = 0;\n\n/**\n * Variable: y0\n *\n * Holds the vertical offset of the output.\n */\nmxPrintPreview.prototype.y0 = 0;\n\n/**\n * Variable: autoOrigin\n * \n * Specifies if the origin should be automatically computed based on the top,\n * left corner of the actual diagram contents. The required offset will be added\n * to <x0> and <y0> in <open>. Default is true.\n */\nmxPrintPreview.prototype.autoOrigin = true;\n\n/**\n * Variable: printOverlays\n * \n * Specifies if overlays should be printed. Default is false.\n */\nmxPrintPreview.prototype.printOverlays = false;\n\n/**\n * Variable: printControls\n * \n * Specifies if controls (such as folding icons) should be printed. Default is\n * false.\n */\nmxPrintPreview.prototype.printControls = false;\n\n/**\n * Variable: printBackgroundImage\n * \n * Specifies if the background image should be printed. Default is false.\n */\nmxPrintPreview.prototype.printBackgroundImage = false;\n\n/**\n * Variable: backgroundColor\n * \n * Holds the color value for the page background color. Default is #ffffff.\n */\nmxPrintPreview.prototype.backgroundColor = '#ffffff';\n\n/**\n * Variable: borderColor\n * \n * Holds the color value for the page border.\n */\nmxPrintPreview.prototype.borderColor = null;\n\n/**\n * Variable: title\n * \n * Holds the title of the preview window.\n */\nmxPrintPreview.prototype.title = null;\n\n/**\n * Variable: pageSelector\n * \n * Boolean that specifies if the page selector should be\n * displayed. Default is true.\n */\nmxPrintPreview.prototype.pageSelector = null;\n\n/**\n * Variable: wnd\n * \n * Reference to the preview window.\n */\nmxPrintPreview.prototype.wnd = null;\n\n/**\n * Variable: targetWindow\n * \n * Assign any window here to redirect the rendering in <open>.\n */\nmxPrintPreview.prototype.targetWindow = null;\n\n/**\n * Variable: pageCount\n * \n * Holds the actual number of pages in the preview.\n */\nmxPrintPreview.prototype.pageCount = 0;\n\n/**\n * Variable: clipping\n * \n * Specifies is clipping should be used to avoid creating too many cell states\n * in large diagrams. The bounding box of the cells in the original diagram is\n * used if this is enabled. Default is true.\n */\nmxPrintPreview.prototype.clipping = true;\n\n/**\n * Function: getWindow\n * \n * Returns <wnd>.\n */\nmxPrintPreview.prototype.getWindow = function()\n{\n\treturn this.wnd;\n};\n\n/**\n * Function: getDocType\n * \n * Returns the string that should go before the HTML tag in the print preview\n * page. This implementation returns an X-UA meta tag for IE5 in quirks mode,\n * IE8 in IE8 standards mode and edge in IE9 standards mode.\n */\nmxPrintPreview.prototype.getDoctype = function()\n{\n\tvar dt = '';\n\t\n\tif (document.documentMode == 5)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=5\">';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\">';\n\t}\n\telse if (document.documentMode > 8)\n\t{\n\t\t// Comment needed to make standards doctype apply in IE\n\t\tdt = '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><![endif]-->';\n\t}\n\t\n\treturn dt;\n};\n\n/**\n * Function: appendGraph\n * \n * Adds the given graph to the existing print preview.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.appendGraph = function(graph, scale, x0, y0, forcePageBreaks, keepOpen)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.x0 = x0;\n\tthis.y0 = y0;\n\tthis.open(null, null, forcePageBreaks, keepOpen);\n};\n\n/**\n * Function: open\n * \n * Shows the print preview window. The window is created here if it does\n * not exist.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.open = function(css, targetWindow, forcePageBreaks, keepOpen)\n{\n\t// Closing the window while the page is being rendered may cause an\n\t// exception in IE. This and any other exceptions are simply ignored.\n\tvar previousInitializeOverlay = this.graph.cellRenderer.initializeOverlay;\n\tvar div = null;\n\t\n\ttry\n\t{\n\t\t// Temporarily overrides the method to redirect rendering of overlays\n\t\t// to the draw pane so that they are visible in the printout\n\t\tif (this.printOverlays)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initializeOverlay = function(state, overlay)\n\t\t\t{\n\t\t\t\toverlay.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (this.printControls)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initControl = function(state, control, handleEvents, clickHandler)\n\t\t\t{\n\t\t\t\tcontrol.dialect = state.view.graph.dialect;\n\t\t\t\tcontrol.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tthis.wnd = (targetWindow != null) ? targetWindow : this.wnd;\n\t\tvar isNewWindow = false;\n\t\t\n\t\tif (this.wnd == null)\n\t\t{\n\t\t\tisNewWindow = true;\n\t\t\tthis.wnd = window.open();\n\t\t}\n\t\t\n\t\tvar doc = this.wnd.document;\n\t\t\n\t\tif (isNewWindow)\n\t\t{\n\t\t\tvar dt = this.getDoctype();\n\t\t\t\n\t\t\tif (dt != null && dt.length > 0)\n\t\t\t{\n\t\t\t\tdoc.writeln(dt);\n\t\t\t}\n\t\t\t\n\t\t\tif (mxClient.IS_VML)\n\t\t\t{\n\t\t\t\tdoc.writeln('<html xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (document.compatMode === 'CSS1Compat')\n\t\t\t\t{\n\t\t\t\t\tdoc.writeln('<!DOCTYPE html>');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdoc.writeln('<html>');\n\t\t\t}\n\t\t\t\n\t\t\tdoc.writeln('<head>');\n\t\t\tthis.writeHead(doc, css);\n\t\t\tdoc.writeln('</head>');\n\t\t\tdoc.writeln('<body class=\"mxPage\">');\n\t\t}\n\n\t\t// Computes the horizontal and vertical page count\n\t\tvar bounds = this.graph.getGraphBounds().clone();\n\t\tvar currentScale = this.graph.getView().getScale();\n\t\tvar sc = currentScale / this.scale;\n\t\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\t\t// Uses the absolute origin with no offset for all printing\n\t\tif (!this.autoOrigin)\n\t\t{\n\t\t\tthis.x0 -= tr.x * this.scale;\n\t\t\tthis.y0 -= tr.y * this.scale;\n\t\t\tbounds.width += bounds.x;\n\t\t\tbounds.height += bounds.y;\n\t\t\tbounds.x = 0;\n\t\t\tbounds.y = 0;\n\t\t\tthis.border = 0;\n\t\t}\n\t\t\n\t\t// Store the available page area\n\t\tvar availableWidth = this.pageFormat.width - (this.border * 2);\n\t\tvar availableHeight = this.pageFormat.height - (this.border * 2);\n\t\n\t\t// Adds margins to page format\n\t\tthis.pageFormat.height += this.marginTop + this.marginBottom;\n\n\t\t// Compute the unscaled, untranslated bounds to find\n\t\t// the number of vertical and horizontal pages\n\t\tbounds.width /= sc;\n\t\tbounds.height /= sc;\n\n\t\tvar hpages = Math.max(1, Math.ceil((bounds.width + this.x0) / availableWidth));\n\t\tvar vpages = Math.max(1, Math.ceil((bounds.height + this.y0) / availableHeight));\n\t\tthis.pageCount = hpages * vpages;\n\t\t\n\t\tvar writePageSelector = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.pageSelector && (vpages > 1 || hpages > 1))\n\t\t\t{\n\t\t\t\tvar table = this.createPageSelector(vpages, hpages);\n\t\t\t\tdoc.body.appendChild(table);\n\t\t\t\t\n\t\t\t\t// Implements position: fixed in IE quirks mode\n\t\t\t\tif (mxClient.IS_IE && doc.documentMode == null || doc.documentMode == 5 || doc.documentMode == 8 || doc.documentMode == 7)\n\t\t\t\t{\n\t\t\t\t\ttable.style.position = 'absolute';\n\t\t\t\t\t\n\t\t\t\t\tvar update = function()\n\t\t\t\t\t{\n\t\t\t\t\t\ttable.style.top = ((doc.body.scrollTop || doc.documentElement.scrollTop) + 10) + 'px';\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'scroll', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'resize', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar addPage = mxUtils.bind(this, function(div, addBreak)\n\t\t{\n\t\t\t// Border of the DIV (aka page) inside the document\n\t\t\tif (this.borderColor != null)\n\t\t\t{\n\t\t\t\tdiv.style.borderColor = this.borderColor;\n\t\t\t\tdiv.style.borderStyle = 'solid';\n\t\t\t\tdiv.style.borderWidth = '1px';\n\t\t\t}\n\t\t\t\n\t\t\t// Needs to be assigned directly because IE doesn't support\n\t\t\t// child selectors, eg. body > div { background: white; }\n\t\t\tdiv.style.background = this.backgroundColor;\n\t\t\t\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tdiv.style.pageBreakAfter = 'always';\n\t\t\t}\n\n\t\t\t// NOTE: We are dealing with cross-window DOM here, which\n\t\t\t// is a problem in IE, so we copy the HTML markup instead.\n\t\t\t// The underlying problem is that the graph display markup\n\t\t\t// creation (in mxShape, mxGraphView) is hardwired to using\n\t\t\t// document.createElement and hence we must use this document\n\t\t\t// to create the complete page and then copy it over to the\n\t\t\t// new window.document. This can be fixed later by using the\n\t\t\t// ownerDocument of the container in mxShape and mxGraphView.\n\t\t\tif (isNewWindow && (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE))\n\t\t\t{\n\t\t\t\t// For some obscure reason, removing the DIV from the\n\t\t\t\t// parent before fetching its outerHTML has missing\n\t\t\t\t// fillcolor properties and fill children, so the div\n\t\t\t\t// must be removed afterwards to keep the fillcolors.\n\t\t\t\tdoc.writeln(div.outerHTML);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse if (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE)\n\t\t\t{\n\t\t\t\tvar clone = doc.createElement('div');\n\t\t\t\tclone.innerHTML = div.outerHTML;\n\t\t\t\tclone = clone.getElementsByTagName('div')[0];\n\t\t\t\tdoc.body.appendChild(clone);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tthis.addPageBreak(doc);\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar cov = this.getCoverPages(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\tif (cov != null)\n\t\t{\n\t\t\tfor (var i = 0; i < cov.length; i++)\n\t\t\t{\n\t\t\t\taddPage(cov[i], true);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar apx = this.getAppendices(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\t// Appends each page to the page output for printing, making\n\t\t// sure there will be a page break after each page (ie. div)\n\t\tfor (var i = 0; i < vpages; i++)\n\t\t{\n\t\t\tvar dy = i * availableHeight / this.scale - this.y0 / this.scale +\n\t\t\t\t\t(bounds.y - tr.y * currentScale) / currentScale;\n\t\t\t\n\t\t\tfor (var j = 0; j < hpages; j++)\n\t\t\t{\n\t\t\t\tif (this.wnd == null)\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = j * availableWidth / this.scale - this.x0 / this.scale +\n\t\t\t\t\t\t(bounds.x - tr.x * currentScale) / currentScale;\n\t\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\t\tvar clip = new mxRectangle(dx, dy, availableWidth, availableHeight);\n\t\t\t\tdiv = this.renderPage(this.pageFormat.width, this.pageFormat.height, 0, 0, mxUtils.bind(this, function(div)\n\t\t\t\t{\n\t\t\t\t\tthis.addGraphFragment(-dx, -dy, this.scale, pageNum, div, clip);\n\t\t\t\t\t\n\t\t\t\t\tif (this.printBackgroundImage)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.insertBackgroundImage(div, -dx, -dy);\n\t\t\t\t\t}\n\t\t\t\t}), pageNum);\n\n\t\t\t\t// Gives the page a unique ID for later accessing the page\n\t\t\t\tdiv.setAttribute('id', 'mxPage-'+pageNum);\n\n\t\t\t\taddPage(div, apx != null || i < vpages - 1 || j < hpages - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (apx != null)\n\t\t{\n\t\t\tfor (var i = 0; i < apx.length; i++)\n\t\t\t{\n\t\t\t\taddPage(apx[i], i < apx.length - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (isNewWindow && !keepOpen)\n\t\t{\n\t\t\tthis.closeDocument();\n\t\t\twritePageSelector();\n\t\t}\n\t\t\n\t\tthis.wnd.focus();\n\t}\n\tcatch (e)\n\t{\n\t\t// Removes the DIV from the document in case of an error\n\t\tif (div != null && div.parentNode != null)\n\t\t{\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.cellRenderer.initializeOverlay = previousInitializeOverlay;\n\t}\n\n\treturn this.wnd;\n};\n\n/**\n * Function: addPageBreak\n * \n * Adds a page break to the given document.\n */\nmxPrintPreview.prototype.addPageBreak = function(doc)\n{\n\tvar hr = doc.createElement('hr');\n\thr.className = 'mxPageBreak';\n\tdoc.body.appendChild(hr);\n};\n\n/**\n * Function: closeDocument\n * \n * Writes the closing tags for body and page after calling <writePostfix>.\n */\nmxPrintPreview.prototype.closeDocument = function()\n{\n\ttry\n\t{\n\t\tif (this.wnd != null && this.wnd.document != null)\n\t\t{\n\t\t\tvar doc = this.wnd.document;\n\t\t\t\n\t\t\tthis.writePostfix(doc);\n\t\t\tdoc.writeln('</body>');\n\t\t\tdoc.writeln('</html>');\n\t\t\tdoc.close();\n\t\t\t\n\t\t\t// Removes all event handlers in the print output\n\t\t\tmxEvent.release(doc.body);\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\t// ignore any errors resulting from wnd no longer being available\n\t}\n};\n\n/**\n * Function: writeHead\n * \n * Writes the HEAD section into the given document, without the opening\n * and closing HEAD tags.\n */\nmxPrintPreview.prototype.writeHead = function(doc, css)\n{\n\tif (this.title != null)\n\t{\n\t\tdoc.writeln('<title>' + this.title + '</title>');\n\t}\n\t\n\t// Adds required namespaces\n\tif (mxClient.IS_VML)\n\t{\n\t\tdoc.writeln('<style type=\"text/css\">v\\\\:*{behavior:url(#default#VML)}o\\\\:*{behavior:url(#default#VML)}</style>');\n\t}\n\n\t// Adds all required stylesheets\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css', doc);\n\n\t// Removes horizontal rules and page selector from print output\n\tdoc.writeln('<style type=\"text/css\">');\n\tdoc.writeln('@media print {');\n\tdoc.writeln('  * { -webkit-print-color-adjust: exact; }');\n\tdoc.writeln('  table.mxPageSelector { display: none; }');\n\tdoc.writeln('  hr.mxPageBreak { display: none; }');\n\tdoc.writeln('}');\n\tdoc.writeln('@media screen {');\n\t\n\t// NOTE: position: fixed is not supported in IE, so the page selector\n\t// position (absolute) needs to be updated in IE (see below)\n\tdoc.writeln('  table.mxPageSelector { position: fixed; right: 10px; top: 10px;' +\n\t\t\t'font-family: Arial; font-size:10pt; border: solid 1px darkgray;' +\n\t\t\t'background: white; border-collapse:collapse; }');\n\tdoc.writeln('  table.mxPageSelector td { border: solid 1px gray; padding:4px; }');\n\tdoc.writeln('  body.mxPage { background: gray; }');\n\tdoc.writeln('}');\n\t\n\tif (css != null)\n\t{\n\t\tdoc.writeln(css);\n\t}\n\t\n\tdoc.writeln('</style>');\n};\n\n/**\n * Function: writePostfix\n * \n * Called before closing the body of the page. This implementation is empty.\n */\nmxPrintPreview.prototype.writePostfix = function(doc)\n{\n\t// empty\n};\n\n/**\n * Function: createPageSelector\n * \n * Creates the page selector table.\n */\nmxPrintPreview.prototype.createPageSelector = function(vpages, hpages)\n{\n\tvar doc = this.wnd.document;\n\tvar table = doc.createElement('table');\n\ttable.className = 'mxPageSelector';\n\ttable.setAttribute('border', '0');\n\n\tvar tbody = doc.createElement('tbody');\n\t\n\tfor (var i = 0; i < vpages; i++)\n\t{\n\t\tvar row = doc.createElement('tr');\n\t\t\n\t\tfor (var j = 0; j < hpages; j++)\n\t\t{\n\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\tvar cell = doc.createElement('td');\n\t\t\tvar a = doc.createElement('a');\n\t\t\ta.setAttribute('href', '#mxPage-' + pageNum);\n\n\t\t\t// Workaround for FF where the anchor is appended to the URL of the original document\n\t\t\tif (mxClient.IS_NS && !mxClient.IS_SF && !mxClient.IS_GC)\n\t\t\t{\n\t\t\t\tvar js = 'var page = document.getElementById(\\'mxPage-' + pageNum + '\\');page.scrollIntoView(true);event.preventDefault();';\n\t\t\t\ta.setAttribute('onclick', js);\n\t\t\t}\n\t\t\t\n\t\t\tmxUtils.write(a, pageNum, doc);\n\t\t\tcell.appendChild(a);\n\t\t\trow.appendChild(cell);\n\t\t}\n\t\t\n\t\ttbody.appendChild(row);\n\t}\n\t\n\ttable.appendChild(tbody);\n\t\n\treturn table;\n};\n\n/**\n * Function: renderPage\n * \n * Creates a DIV that prints a single page of the given\n * graph using the given scale and returns the DIV that\n * represents the page.\n * \n * Parameters:\n * \n * w - Width of the page in pixels.\n * h - Height of the page in pixels.\n * dx - Optional horizontal page offset in pixels (used internally).\n * dy - Optional vertical page offset in pixels (used internally).\n * content - Callback that adds the HTML content to the inner div of a page.\n * Takes the inner div as the argument.\n * pageNumber - Integer representing the page number.\n */\nmxPrintPreview.prototype.renderPage = function(w, h, dx, dy, content, pageNumber)\n{\n\tvar doc = this.wnd.document;\n\tvar div = document.createElement('div');\n\tvar arg = null;\n\n\ttry\n\t{\n\t\t// Workaround for ignored clipping in IE 9 standards\n\t\t// when printing with page breaks and HTML labels.\n\t\tif (dx != 0 || dy != 0)\n\t\t{\n\t\t\tdiv.style.position = 'relative';\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.position = 'relative';\n\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\t\t\t\n\t\t\tvar viewport = document.createElement('div');\n\t\t\tviewport.style.position = 'relative';\n\t\t\tviewport.style.marginLeft = dx + 'px';\n\t\t\tviewport.style.marginTop = dy + 'px';\n\n\t\t\t// FIXME: IE8 standards output problems\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t\tviewport.style.position = 'absolute';\n\t\t\t}\n\t\t\n\t\t\tif (doc.documentMode == 10)\n\t\t\t{\n\t\t\t\tviewport.style.width = '100%';\n\t\t\t\tviewport.style.height = '100%';\n\t\t\t}\n\t\t\t\n\t\t\tinnerDiv.appendChild(viewport);\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = viewport;\n\t\t}\n\t\t// FIXME: IE10/11 too many pages\n\t\telse\n\t\t{\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.overflow = 'hidden';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\t// IE8 uses above branch currently\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tdiv.style.position = 'relative';\n\t\t\t}\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\n\t\t\tif (mxClient.IS_IE && (doc.documentMode == null || doc.documentMode == 5 ||\n\t\t\t\tdoc.documentMode == 8 || doc.documentMode == 7))\n\t\t\t{\n\t\t\t\tinnerDiv.style.marginTop = this.border + 'px';\n\t\t\t\tinnerDiv.style.marginLeft = this.border + 'px';\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\t}\n\t\n\t\t\tif (this.graph.dialect == mxConstants.DIALECT_VML)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t}\n\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = innerDiv;\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\tdiv.parentNode.removeChild(div);\n\t\tdiv = null;\n\t\t\n\t\tthrow e;\n\t}\n\n\tcontent(arg);\n\t \n\treturn div;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root cell for painting the graph.\n */\nmxPrintPreview.prototype.getRoot = function()\n{\n\tvar root = this.graph.view.currentRoot;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.graph.getModel().getRoot();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: addGraphFragment\n * \n * Adds a graph fragment to the given div.\n * \n * Parameters:\n * \n * dx - Horizontal translation for the diagram.\n * dy - Vertical translation for the diagram.\n * scale - Scale for the diagram.\n * pageNumber - Number of the page to be rendered.\n * div - Div that contains the output.\n * clip - Contains the clipping rectangle as an <mxRectangle>.\n */\nmxPrintPreview.prototype.addGraphFragment = function(dx, dy, scale, pageNumber, div, clip)\n{\n\tvar view = this.graph.getView();\n\tvar previousContainer = this.graph.container;\n\tthis.graph.container = div;\n\t\n\tvar canvas = view.getCanvas();\n\tvar backgroundPane = view.getBackgroundPane();\n\tvar drawPane = view.getDrawPane();\n\tvar overlayPane = view.getOverlayPane();\n\tvar realScale = scale;\n\n\tif (this.graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tview.createSvg();\n\t\t\n\t\t// Uses CSS transform for scaling\n\t\tif (!mxClient.NO_FO)\n\t\t{\n\t\t\tvar g = view.getDrawPane().parentNode;\n\t\t\tvar prev = g.getAttribute('transform');\n\t\t\tg.setAttribute('transformOrigin', '0 0');\n\t\t\tg.setAttribute('transform', 'scale(' + scale + ',' + scale + ')' +\n\t\t\t\t'translate(' + dx + ',' + dy + ')');\n\t\t\t\n\t\t\tscale = 1;\n\t\t\tdx = 0;\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse if (this.graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tview.createVml();\n\t}\n\telse\n\t{\n\t\tview.createHtml();\n\t}\n\t\n\t// Disables events on the view\n\tvar eventsEnabled = view.isEventsEnabled();\n\tview.setEventsEnabled(false);\n\t\n\t// Disables the graph to avoid cursors\n\tvar graphEnabled = this.graph.isEnabled();\n\tthis.graph.setEnabled(false);\n\n\t// Resets the translation\n\tvar translate = view.getTranslate();\n\tview.translate = new mxPoint(dx, dy);\n\t\n\t// Redraws only states that intersect the clip\n\tvar redraw = this.graph.cellRenderer.redraw;\n\tvar states = view.states;\n\tvar s = view.scale;\n\n\t// Gets the transformed clip for intersection check below\n\tif (this.clipping)\n\t{\n\t\tvar tempClip = new mxRectangle((clip.x + translate.x) * s, (clip.y + translate.y) * s,\n\t\t\t\tclip.width * s / realScale, clip.height * s / realScale);\n\n\t\t// Checks clipping rectangle for speedup\n\t\t// Must create terminal states for edge clipping even if terminal outside of clip\n\t\tthis.graph.cellRenderer.redraw = function(state, force, rendering)\n\t\t{\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\t// Gets original state from graph to find bounding box\n\t\t\t\tvar orig = states.get(state.cell);\n\t\t\t\t\n\t\t\t\tif (orig != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = view.getBoundingBox(orig, false);\n\t\t\t\t\t\n\t\t\t\t\t// Stops rendering if outside clip for speedup but ignores\n\t\t\t\t\t// edge labels where width and height is set to 0\n\t\t\t\t\tif (bbox != null && bbox.width > 0 && bbox.height > 0 &&\n\t\t\t\t\t\t!mxUtils.intersects(tempClip, bbox))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tredraw.apply(this, arguments);\n\t\t};\n\t}\n\t\n\tvar temp = null;\n\t\n\ttry\n\t{\n\t\t// Creates the temporary cell states in the view and\n\t\t// draws them onto the temporary DOM nodes in the view\n\t\tvar cells = [this.getRoot()];\n\t\ttemp = new mxTemporaryCellStates(view, scale, cells, null, mxUtils.bind(this, function(state)\n\t\t{\n\t\t\treturn this.getLinkForCellState(state);\n\t\t}));\n\t}\n\tfinally\n\t{\n\t\t// Removes overlay pane with selection handles\n\t\t// controls and icons from the print output\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tview.overlayPane.innerHTML = '';\n\t\t\tview.canvas.style.overflow = 'hidden';\n\t\t\tview.canvas.style.position = 'relative';\n\t\t\tview.canvas.style.top = this.marginTop + 'px';\n\t\t\tview.canvas.style.width = clip.width + 'px';\n\t\t\tview.canvas.style.height = clip.height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Removes everything but the SVG node\n\t\t\tvar tmp = div.firstChild;\n\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\tvar next = tmp.nextSibling;\n\t\t\t\tvar name = tmp.nodeName.toLowerCase();\n\n\t\t\t\t// Note: Width and height are required in FF 11\n\t\t\t\tif (name == 'svg')\n\t\t\t\t{\n\t\t\t\t\ttmp.style.overflow = 'hidden';\n\t\t\t\t\ttmp.style.position = 'relative';\n\t\t\t\t\ttmp.style.top = this.marginTop + 'px';\n\t\t\t\t\ttmp.setAttribute('width', clip.width);\n\t\t\t\t\ttmp.setAttribute('height', clip.height);\n\t\t\t\t\ttmp.style.width = '';\n\t\t\t\t\ttmp.style.height = '';\n\t\t\t\t}\n\t\t\t\t// Tries to fetch all text labels and only text labels\n\t\t\t\telse if (tmp.style.cursor != 'default' && name != 'div')\n\t\t\t\t{\n\t\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp = next;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Puts background image behind SVG output\n\t\tif (this.printBackgroundImage)\n\t\t{\n\t\t\tvar svgs = div.getElementsByTagName('svg');\n\t\t\t\n\t\t\tif (svgs.length > 0)\n\t\t\t{\n\t\t\t\tsvgs[0].style.position = 'absolute';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Completely removes the overlay pane to remove more handles\n\t\tview.overlayPane.parentNode.removeChild(view.overlayPane);\n\n\t\t// Restores the state of the view\n\t\tthis.graph.setEnabled(graphEnabled);\n\t\tthis.graph.container = previousContainer;\n\t\tthis.graph.cellRenderer.redraw = redraw;\n\t\tview.canvas = canvas;\n\t\tview.backgroundPane = backgroundPane;\n\t\tview.drawPane = drawPane;\n\t\tview.overlayPane = overlayPane;\n\t\tview.translate = translate;\n\t\ttemp.destroy();\n\t\tview.setEventsEnabled(eventsEnabled);\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state. This returns null.\n */\nmxPrintPreview.prototype.getLinkForCellState = function(state)\n{\n\treturn this.graph.getLinkForCell(state.cell);\n};\n\n/**\n * Function: insertBackgroundImage\n * \n * Inserts the background image into the given div.\n */\nmxPrintPreview.prototype.insertBackgroundImage = function(div, dx, dy)\n{\n\tvar bg = this.graph.backgroundImage;\n\t\n\tif (bg != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.style.position = 'absolute';\n\t\timg.style.marginLeft = Math.round(dx * this.scale) + 'px';\n\t\timg.style.marginTop = Math.round(dy * this.scale) + 'px';\n\t\timg.setAttribute('width', Math.round(this.scale * bg.width));\n\t\timg.setAttribute('height', Math.round(this.scale * bg.height));\n\t\timg.src = bg.src;\n\t\t\n\t\tdiv.insertBefore(img, div.firstChild);\n\t}\n};\n\n/**\n * Function: getCoverPages\n * \n * Returns the pages to be added before the print output. This returns null.\n */\nmxPrintPreview.prototype.getCoverPages = function()\n{\n\treturn null;\n};\n\n/**\n * Function: getAppendices\n * \n * Returns the pages to be added after the print output. This returns null.\n */\nmxPrintPreview.prototype.getAppendices = function()\n{\n\treturn null;\n};\n\n/**\n * Function: print\n * \n * Opens the print preview and shows the print dialog.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n */\nmxPrintPreview.prototype.print = function(css)\n{\n\tvar wnd = this.open(css);\n\t\n\tif (wnd != null)\n\t{\n\t\twnd.print();\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the print preview window.\n */\nmxPrintPreview.prototype.close = function()\n{\n\tif (this.wnd != null)\n\t{\n\t\tthis.wnd.close();\n\t\tthis.wnd = null;\n\t}\n};\n\n__mxOutput.mxPrintPreview = typeof mxPrintPreview !== 'undefined' ? mxPrintPreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheet\n *\n * Defines the appearance of the cells in a graph. See <putCellStyle> for an\n * example of creating a new cell style. It is recommended to use objects, not\n * arrays for holding cell styles. Existing styles can be cloned using\n * <mxUtils.clone> and turned into a string for debugging using\n * <mxUtils.toString>.\n *\n * Default Styles:\n *\n * The stylesheet contains two built-in styles, which are used if no style is\n * defined for a cell:\n *\n *   defaultVertex - Default style for vertices\n *   defaultEdge - Default style for edges\n *\n * Example:\n *\n * (code)\n * var vertexStyle = stylesheet.getDefaultVertexStyle();\n * vertexStyle[mxConstants.STYLE_ROUNDED] = true;\n * var edgeStyle = stylesheet.getDefaultEdgeStyle();\n * edgeStyle[mxConstants.STYLE_EDGE] = mxEdgeStyle.EntityRelation;\n * (end)\n *\n * Modifies the built-in default styles.\n *\n * To avoid the default style for a cell, add a leading semicolon\n * to the style definition, eg.\n *\n * (code)\n * ;shadow=1\n * (end)\n *\n * Removing keys:\n *\n * For removing a key in a cell style of the form [stylename;|key=value;] the\n * special value none can be used, eg. highlight;fillColor=none\n *\n * See also the helper methods in mxUtils to modify strings of this format,\n * namely <mxUtils.setStyle>, <mxUtils.indexOfStylename>,\n * <mxUtils.addStylename>, <mxUtils.removeStylename>,\n * <mxUtils.removeAllStylenames> and <mxUtils.setStyleFlag>.\n *\n * Constructor: mxStylesheet\n *\n * Constructs a new stylesheet and assigns default styles.\n */\nfunction mxStylesheet()\n{\n\tthis.styles = new Object();\n\n\tthis.putDefaultVertexStyle(this.createDefaultVertexStyle());\n\tthis.putDefaultEdgeStyle(this.createDefaultEdgeStyle());\n};\n\n/**\n * Function: styles\n *\n * Maps from names to cell styles. Each cell style is a map of key,\n * value pairs.\n */\nmxStylesheet.prototype.styles;\n\n/**\n * Function: createDefaultVertexStyle\n *\n * Creates and returns the default vertex style.\n */\nmxStylesheet.prototype.createDefaultVertexStyle = function()\n{\n\tvar style = new Object();\n\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n\tstyle[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_FILLCOLOR] = '#C3D9FF';\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#774400';\n\n\treturn style;\n};\n\n/**\n * Function: createDefaultEdgeStyle\n *\n * Creates and returns the default edge style.\n */\nmxStylesheet.prototype.createDefaultEdgeStyle = function()\n{\n\tvar style = new Object();\n\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_CONNECTOR;\n\tstyle[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#446299';\n\n\treturn style;\n};\n\n/**\n * Function: putDefaultVertexStyle\n *\n * Sets the default style for vertices using defaultVertex as the\n * stylename.\n *\n * Parameters:\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putDefaultVertexStyle = function(style)\n{\n\tthis.putCellStyle('defaultVertex', style);\n};\n\n/**\n * Function: putDefaultEdgeStyle\n *\n * Sets the default style for edges using defaultEdge as the stylename.\n */\nmxStylesheet.prototype.putDefaultEdgeStyle = function(style)\n{\n\tthis.putCellStyle('defaultEdge', style);\n};\n\n/**\n * Function: getDefaultVertexStyle\n *\n * Returns the default style for vertices.\n */\nmxStylesheet.prototype.getDefaultVertexStyle = function()\n{\n\treturn this.styles['defaultVertex'];\n};\n\n/**\n * Function: getDefaultEdgeStyle\n *\n * Sets the default style for edges.\n */\nmxStylesheet.prototype.getDefaultEdgeStyle = function()\n{\n\treturn this.styles['defaultEdge'];\n};\n\n/**\n * Function: putCellStyle\n *\n * Stores the given map of key, value pairs under the given name in\n * <styles>.\n *\n * Example:\n *\n * The following example adds a new style called 'rounded' into an\n * existing stylesheet:\n *\n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n * style[mxConstants.STYLE_ROUNDED] = true;\n * graph.getStylesheet().putCellStyle('rounded', style);\n * (end)\n *\n * In the above example, the new style is an object. The possible keys of\n * the object are all the constants in <mxConstants> that start with STYLE\n * and the values are either JavaScript objects, such as\n * <mxPerimeter.RightAngleRectanglePerimeter> (which is in fact a function)\n * or expressions, such as true. Note that not all keys will be\n * interpreted by all shapes (eg. the line shape ignores the fill color).\n * The final call to this method associates the style with a name in the\n * stylesheet. The style is used in a cell with the following code:\n *\n * (code)\n * model.setStyle(cell, 'rounded');\n * (end)\n *\n * Parameters:\n *\n * name - Name for the style to be stored.\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putCellStyle = function(name, style)\n{\n\tthis.styles[name] = style;\n};\n\n/**\n * Function: getCellStyle\n *\n * Returns the cell style for the specified stylename or the given\n * defaultStyle if no style can be found for the given stylename.\n *\n * Parameters:\n *\n * name - String of the form [(stylename|key=value);] that represents the\n * style.\n * defaultStyle - Default style to be returned if no style can be found.\n */\nmxStylesheet.prototype.getCellStyle = function(name, defaultStyle)\n{\n\tvar style = defaultStyle;\n\n\tif (name != null && name.length > 0)\n\t{\n\t\tvar pairs = name.split(';');\n\n\t\tif (style != null &&\n\t\t\tname.charAt(0) != ';')\n\t\t{\n\t\t\tstyle = mxUtils.clone(style);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle = new Object();\n\t\t}\n\n\t\t// Parses each key, value pair into the existing style\n\t \tfor (var i = 0; i < pairs.length; i++)\n\t \t{\n\t \t\tvar tmp = pairs[i];\n\t \t\tvar pos = tmp.indexOf('=');\n\n\t \t\tif (pos >= 0)\n\t \t\t{\n\t\t \t\tvar key = tmp.substring(0, pos);\n\t\t \t\tvar value = tmp.substring(pos + 1);\n\n\t\t \t\tif (value == mxConstants.NONE)\n\t\t \t\t{\n\t\t \t\t\tdelete style[key];\n\t\t \t\t}\n\t\t \t\telse if (mxUtils.isNumeric(value))\n\t\t \t\t{\n\t\t \t\t\tstyle[key] = parseFloat(value);\n\t\t \t\t}\n\t\t \t\telse\n\t\t \t\t{\n\t\t\t \t\tstyle[key] = value;\n\t\t \t\t}\n\t\t\t}\n\t \t\telse\n\t \t\t{\n\t \t\t\t// Merges the entries from a named style\n\t\t\t\tvar tmpStyle = this.styles[tmp];\n\n\t\t\t\tif (tmpStyle != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var key in tmpStyle)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle[key] = tmpStyle[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t \t\t}\n\t\t}\n\t}\n\n\treturn style;\n};\n\n__mxOutput.mxStylesheet = typeof mxStylesheet !== 'undefined' ? mxStylesheet : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellState\n * \n * Represents the current state of a cell in a given <mxGraphView>.\n * \n * For edges, the edge label position is stored in <absoluteOffset>.\n * \n * The size for oversize labels can be retrieved using the boundingBox property\n * of the <text> field as shown below.\n * \n * (code)\n * var bbox = (state.text != null) ? state.text.boundingBox : null;\n * (end)\n * \n * Constructor: mxCellState\n * \n * Constructs a new object that represents the current state of the given\n * cell in the specified view.\n * \n * Parameters:\n * \n * view - <mxGraphView> that contains the state.\n * cell - <mxCell> that this state represents.\n * style - Array of key, value pairs that constitute the style.\n */\nfunction mxCellState(view, cell, style)\n{\n\tthis.view = view;\n\tthis.cell = cell;\n\tthis.style = (style != null) ? style : {};\n\t\n\tthis.origin = new mxPoint();\n\tthis.absoluteOffset = new mxPoint();\n};\n\n/**\n * Extends mxRectangle.\n */\nmxCellState.prototype = new mxRectangle();\nmxCellState.prototype.constructor = mxCellState;\n\n/**\n * Variable: view\n * \n * Reference to the enclosing <mxGraphView>.\n */\nmxCellState.prototype.view = null;\n\n/**\n * Variable: cell\n *\n * Reference to the <mxCell> that is represented by this state.\n */\nmxCellState.prototype.cell = null;\n\n/**\n * Variable: style\n * \n * Contains an array of key, value pairs that represent the style of the\n * cell.\n */\nmxCellState.prototype.style = null;\n\n/**\n * Variable: invalidStyle\n * \n * Specifies if the style is invalid. Default is false.\n */\nmxCellState.prototype.invalidStyle = false;\n\n/**\n * Variable: invalid\n * \n * Specifies if the state is invalid. Default is true.\n */\nmxCellState.prototype.invalid = true;\n\n/**\n * Variable: origin\n *\n * <mxPoint> that holds the origin for all child cells. Default is a new\n * empty <mxPoint>.\n */\nmxCellState.prototype.origin = null;\n\n/**\n * Variable: absolutePoints\n * \n * Holds an array of <mxPoints> that represent the absolute points of an\n * edge.\n */\nmxCellState.prototype.absolutePoints = null;\n\n/**\n * Variable: absoluteOffset\n *\n * <mxPoint> that holds the absolute offset. For edges, this is the\n * absolute coordinates of the label position. For vertices, this is the\n * offset of the label relative to the top, left corner of the vertex. \n */\nmxCellState.prototype.absoluteOffset = null;\n\n/**\n * Variable: visibleSourceState\n * \n * Caches the visible source terminal state.\n */\nmxCellState.prototype.visibleSourceState = null;\n\n/**\n * Variable: visibleTargetState\n * \n * Caches the visible target terminal state.\n */\nmxCellState.prototype.visibleTargetState = null;\n\n/**\n * Variable: terminalDistance\n * \n * Caches the distance between the end points for an edge.\n */\nmxCellState.prototype.terminalDistance = 0;\n\n/**\n * Variable: length\n *\n * Caches the length of an edge.\n */\nmxCellState.prototype.length = 0;\n\n/**\n * Variable: segments\n * \n * Array of numbers that represent the cached length of each segment of the\n * edge.\n */\nmxCellState.prototype.segments = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the cell graphically.\n */\nmxCellState.prototype.shape = null;\n\n/**\n * Variable: text\n * \n * Holds the <mxText> that represents the label of the cell. Thi smay be\n * null if the cell has no label.\n */\nmxCellState.prototype.text = null;\n\n/**\n * Variable: unscaledWidth\n * \n * Holds the unscaled width of the state.\n */\nmxCellState.prototype.unscaledWidth = null;\n\n/**\n * Variable: unscaledHeight\n * \n * Holds the unscaled height of the state.\n */\nmxCellState.prototype.unscaledHeight = null;\n\n/**\n * Function: getPerimeterBounds\n * \n * Returns the <mxRectangle> that should be used as the perimeter of the\n * cell.\n * \n * Parameters:\n * \n * border - Optional border to be added around the perimeter bounds.\n * bounds - Optional <mxRectangle> to be used as the initial bounds.\n */\nmxCellState.prototype.getPerimeterBounds = function(border, bounds)\n{\n\tborder = border || 0;\n\tbounds = (bounds != null) ? bounds : new mxRectangle(this.x, this.y, this.width, this.height);\n\t\n\tif (this.shape != null && this.shape.stencil != null && this.shape.stencil.aspect == 'fixed')\n\t{\n\t\tvar aspect = this.shape.stencil.computeAspect(this.style, bounds.x, bounds.y, bounds.width, bounds.height);\n\t\t\n\t\tbounds.x = aspect.x;\n\t\tbounds.y = aspect.y;\n\t\tbounds.width = this.shape.stencil.w0 * aspect.width;\n\t\tbounds.height = this.shape.stencil.h0 * aspect.height;\n\t}\n\t\n\tif (border != 0)\n\t{\n\t\tbounds.grow(border);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: setAbsoluteTerminalPoint\n * \n * Sets the first or last point in <absolutePoints> depending on isSource.\n * \n * Parameters:\n * \n * point - <mxPoint> that represents the terminal point.\n * isSource - Boolean that specifies if the first or last point should\n * be assigned.\n */\nmxCellState.prototype.setAbsoluteTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t}\n\t\t\n\t\tif (this.absolutePoints.length == 0)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[0] = point;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t\tthis.absolutePoints.push(null);\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse if (this.absolutePoints.length == 1)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[this.absolutePoints.length - 1] = point;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the given cursor on the shape and text shape.\n */\nmxCellState.prototype.setCursor = function(cursor)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.setCursor(cursor);\n\t}\n\t\n\tif (this.text != null)\n\t{\n\t\tthis.text.setCursor(cursor);\n\t}\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Returns the visible source or target terminal cell.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target cell should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminal = function(source)\n{\n\tvar tmp = this.getVisibleTerminalState(source);\n\t\n\treturn (tmp != null) ? tmp.cell : null;\n};\n\n/**\n * Function: getVisibleTerminalState\n * \n * Returns the visible source or target terminal state.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target state should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminalState = function(source)\n{\n\treturn (source) ? this.visibleSourceState : this.visibleTargetState;\n};\n\n/**\n * Function: setVisibleTerminalState\n * \n * Sets the visible source or target terminal state.\n * \n * Parameters:\n * \n * terminalState - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the source or target state should be set.\n */\nmxCellState.prototype.setVisibleTerminalState = function(terminalState, source)\n{\n\tif (source)\n\t{\n\t\tthis.visibleSourceState = terminalState;\n\t}\n\telse\n\t{\n\t\tthis.visibleTargetState = terminalState;\n\t}\n};\n\n/**\n * Function: getCellBounds\n * \n * Returns the unscaled, untranslated bounds.\n */\nmxCellState.prototype.getCellBounds = function()\n{\n\treturn this.cellBounds;\n};\n\n/**\n * Function: getPaintBounds\n * \n * Returns the unscaled, untranslated paint bounds. This is the same as\n * <getCellBounds> but with a 90 degree rotation if the shape's\n * isPaintBoundsInverted returns true.\n */\nmxCellState.prototype.getPaintBounds = function()\n{\n\treturn this.paintBounds;\n};\n\n/**\n * Function: updateCachedBounds\n * \n * Updates the cellBounds and paintBounds.\n */\nmxCellState.prototype.updateCachedBounds = function()\n{\n\tvar tr = this.view.translate;\n\tvar s = this.view.scale;\n\tthis.cellBounds = new mxRectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);\n\tthis.paintBounds = mxRectangle.fromRectangle(this.cellBounds);\n\t\n\tif (this.shape != null && this.shape.isPaintBoundsInverted())\n\t{\n\t\tthis.paintBounds.rotate90();\n\t}\n};\n\n/**\n * Destructor: setState\n * \n * Copies all fields from the given state to this state.\n */\nmxCellState.prototype.setState = function(state)\n{\n\tthis.view = state.view;\n\tthis.cell = state.cell;\n\tthis.style = state.style;\n\tthis.absolutePoints = state.absolutePoints;\n\tthis.origin = state.origin;\n\tthis.absoluteOffset = state.absoluteOffset;\n\tthis.boundingBox = state.boundingBox;\n\tthis.terminalDistance = state.terminalDistance;\n\tthis.segments = state.segments;\n\tthis.length = state.length;\n\tthis.x = state.x;\n\tthis.y = state.y;\n\tthis.width = state.width;\n\tthis.height = state.height;\n\tthis.unscaledWidth = state.unscaledWidth;\n\tthis.unscaledHeight = state.unscaledHeight;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxCellState.prototype.clone = function()\n{\n \tvar clone = new mxCellState(this.view, this.cell, this.style);\n\n\t// Clones the absolute points\n\tif (this.absolutePoints != null)\n\t{\n\t\tclone.absolutePoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.absolutePoints.length; i++)\n\t\t{\n\t\t\tclone.absolutePoints[i] = this.absolutePoints[i].clone();\n\t\t}\n\t}\n\n\tif (this.origin != null)\n\t{\n\t\tclone.origin = this.origin.clone();\n\t}\n\n\tif (this.absoluteOffset != null)\n\t{\n\t\tclone.absoluteOffset = this.absoluteOffset.clone();\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tclone.boundingBox = this.boundingBox.clone();\n\t}\n\n\tclone.terminalDistance = this.terminalDistance;\n\tclone.segments = this.segments;\n\tclone.length = this.length;\n\tclone.x = this.x;\n\tclone.y = this.y;\n\tclone.width = this.width;\n\tclone.height = this.height;\n\tclone.unscaledWidth = this.unscaledWidth;\n\tclone.unscaledHeight = this.unscaledHeight;\n\t\n\treturn clone;\n};\n\n/**\n * Destructor: destroy\n * \n * Destroys the state and all associated resources.\n */\nmxCellState.prototype.destroy = function()\n{\n\tthis.view.graph.cellRenderer.destroy(this);\n};\n\n__mxOutput.mxCellState = typeof mxCellState !== 'undefined' ? mxCellState : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphSelectionModel\n *\n * Implements the selection model for a graph. Here is a listener that handles\n * all removed selection cells.\n * \n * (code)\n * graph.getSelectionModel().addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var cells = evt.getProperty('added');\n *   \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     // Handle cells[i]...\n *   }\n * });\n * (end)\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the selection was changed in <changeSelection>. The\n * <code>edit</code> property contains the <mxUndoableEdit> which contains the\n * <mxSelectionChange>.\n * \n * Event: mxEvent.CHANGE\n * \n * Fires after the selection changes by executing an <mxSelectionChange>. The\n * <code>added</code> and <code>removed</code> properties contain arrays of\n * cells that have been added to or removed from the selection, respectively.\n * The names are inverted due to historic reasons. This cannot be changed.\n * \n * Constructor: mxGraphSelectionModel\n *\n * Constructs a new graph selection model for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphSelectionModel(graph)\n{\n\tthis.graph = graph;\n\tthis.cells = [];\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphSelectionModel.prototype = new mxEventSource();\nmxGraphSelectionModel.prototype.constructor = mxGraphSelectionModel;\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphSelectionModel.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Variable: updatingSelectionResource\n *\n * Specifies the resource key for the status message while the selection is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingSelection'.\n */\nmxGraphSelectionModel.prototype.updatingSelectionResource = (mxClient.language != 'none') ? 'updatingSelection' : '';\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphSelectionModel.prototype.graph = null;\n\n/**\n * Variable: singleSelection\n *\n * Specifies if only one selected item at a time is allowed.\n * Default is false.\n */\nmxGraphSelectionModel.prototype.singleSelection = false;\n\n/**\n * Function: isSingleSelection\n *\n * Returns <singleSelection> as a boolean.\n */\nmxGraphSelectionModel.prototype.isSingleSelection = function()\n{\n\treturn this.singleSelection;\n};\n\n/**\n * Function: setSingleSelection\n *\n * Sets the <singleSelection> flag.\n * \n * Parameters:\n * \n * singleSelection - Boolean that specifies the new value for\n * <singleSelection>.\n */\nmxGraphSelectionModel.prototype.setSingleSelection = function(singleSelection)\n{\n\tthis.singleSelection = singleSelection;\n};\n\n/**\n * Function: isSelected\n *\n * Returns true if the given <mxCell> is selected.\n */\nmxGraphSelectionModel.prototype.isSelected = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn mxUtils.indexOf(this.cells, cell) >= 0;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isEmpty\n *\n * Returns true if no cells are currently selected.\n */\nmxGraphSelectionModel.prototype.isEmpty = function()\n{\n\treturn this.cells.length == 0;\n};\n\n/**\n * Function: clear\n *\n * Clears the selection and fires a <change> event if the selection was not\n * empty.\n */\nmxGraphSelectionModel.prototype.clear = function()\n{\n\tthis.changeSelection(null, this.cells);\n};\n\n/**\n * Function: setCell\n *\n * Selects the specified <mxCell> using <setCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraphSelectionModel.prototype.setCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.setCells([cell]);\n\t}\n};\n\n/**\n * Function: setCells\n *\n * Selects the given array of <mxCells> and fires a <change> event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraphSelectionModel.prototype.setCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\t\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, this.cells);\n\t}\n};\n\n/**\n * Function: getFirstSelectableCell\n *\n * Returns the first selectable cell in the given array of cells.\n */\nmxGraphSelectionModel.prototype.getFirstSelectableCell = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\treturn cells[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: addCell\n * \n * Adds the given <mxCell> to the selection and fires a <select> event.\n * \n * Parameters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.addCells([cell]);\n\t}\n};\n\n/**\n * Function: addCells\n * \n * Adds the given array of <mxCells> to the selection and fires a <select>\n * event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar remove = null;\n\t\t\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tremove = this.cells;\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (!this.isSelected(cells[i]) &&\n\t\t\t\tthis.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, remove);\n\t}\n};\n\n/**\n * Function: removeCell\n *\n * Removes the specified <mxCell> from the selection and fires a <select>\n * event for the remaining cells.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.removeCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.removeCells([cell]);\n\t}\n};\n\n/**\n * Function: removeCells\n */\nmxGraphSelectionModel.prototype.removeCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSelected(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.changeSelection(null, tmp);\t\n\t}\n};\n\n/**\n * Function: changeSelection\n *\n * Adds/removes the specified arrays of <mxCell> to/from the selection.\n * \n * Parameters:\n * \n * added - Array of <mxCell> to add to the selection.\n * remove - Array of <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.changeSelection = function(added, removed)\n{\n\tif ((added != null &&\n\t\tadded.length > 0 &&\n\t\tadded[0] != null) ||\n\t\t(removed != null &&\n\t\tremoved.length > 0 &&\n\t\tremoved[0] != null))\n\t{\n\t\tvar change = new mxSelectionChange(this, added, removed);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, false);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t}\n};\n\n/**\n * Function: cellAdded\n *\n * Inner callback to add the specified <mxCell> to the selection. No event\n * is fired in this implementation.\n * \n * Paramters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null &&\n\t\t!this.isSelected(cell))\n\t{\n\t\tthis.cells.push(cell);\n\t}\n};\n\n/**\n * Function: cellRemoved\n *\n * Inner callback to remove the specified <mxCell> from the selection. No\n * event is fired in this implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar index = mxUtils.indexOf(this.cells, cell);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tthis.cells.splice(index, 1);\n\t\t}\n\t}\n};\n\n/**\n * Class: mxSelectionChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxSelectionChange(selectionModel, added, removed)\n{\n\tthis.selectionModel = selectionModel;\n\tthis.added = (added != null) ? added.slice() : null;\n\tthis.removed = (removed != null) ? removed.slice() : null;\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxSelectionChange.prototype.execute = function()\n{\n\tvar t0 = mxLog.enter('mxSelectionChange.execute');\n\twindow.status = mxResources.get(\n\t\tthis.selectionModel.updatingSelectionResource) ||\n\t\tthis.selectionModel.updatingSelectionResource;\n\n\tif (this.removed != null)\n\t{\n\t\tfor (var i = 0; i < this.removed.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellRemoved(this.removed[i]);\n\t\t}\n\t}\n\n\tif (this.added != null)\n\t{\n\t\tfor (var i = 0; i < this.added.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellAdded(this.added[i]);\n\t\t}\n\t}\n\t\n\tvar tmp = this.added;\n\tthis.added = this.removed;\n\tthis.removed = tmp;\n\n\twindow.status = mxResources.get(this.selectionModel.doneResource) ||\n\t\tthis.selectionModel.doneResource;\n\tmxLog.leave('mxSelectionChange.execute', t0);\n\t\n\tthis.selectionModel.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'added', this.added, 'removed', this.removed));\n};\n\n__mxOutput.mxGraphSelectionModel = typeof mxGraphSelectionModel !== 'undefined' ? mxGraphSelectionModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellEditor\n *\n * In-place editor for the graph. To control this editor, use\n * <mxGraph.invokesStopCellEditing>, <mxGraph.enterStopsCellEditing> and\n * <mxGraph.escapeEnabled>. If <mxGraph.enterStopsCellEditing> is true then\n * ctrl-enter or shift-enter can be used to create a linefeed. The F2 and\n * escape keys can always be used to stop editing.\n * \n * To customize the location of the textbox in the graph, override\n * <getEditorBounds> as follows:\n * \n * (code)\n * graph.cellEditor.getEditorBounds = function(state)\n * {\n *   var result = mxCellEditor.prototype.getEditorBounds.apply(this, arguments);\n *   \n *   if (this.graph.getModel().isEdge(state.cell))\n *   {\n *     result.x = state.getCenterX() - result.width / 2;\n *     result.y = state.getCenterY() - result.height / 2;\n *   }\n *   \n *   return result;\n * };\n * (end)\n * \n * Note that this hook is only called if <autoSize> is false. If <autoSize> is true,\n * then <mxShape.getLabelBounds> is used to compute the current bounds of the textbox.\n * \n * The textarea uses the mxCellEditor CSS class. You can modify this class in\n * your custom CSS. Note: You should modify the CSS after loading the client\n * in the page.\n *\n * Example:\n * \n * To only allow numeric input in the in-place editor, use the following code.\n *\n * (code)\n * var text = graph.cellEditor.textarea;\n * \n * mxEvent.addListener(text, 'keydown', function (evt)\n * {\n *   if (!(evt.keyCode >= 48 && evt.keyCode <= 57) &&\n *       !(evt.keyCode >= 96 && evt.keyCode <= 105))\n *   {\n *     mxEvent.consume(evt);\n *   }\n * }); \n * (end)\n * \n * Placeholder:\n * \n * To implement a placeholder for cells without a label, use the\n * <emptyLabelText> variable.\n * \n * Resize in Chrome:\n * \n * Resize of the textarea is disabled by default. If you want to enable\n * this feature extend <init> and set this.textarea.style.resize = ''.\n * \n * To start editing on a key press event, the container of the graph\n * should have focus or a focusable parent should be used to add the\n * key press handler as follows.\n * \n * (code)\n * mxEvent.addListener(graph.container, 'keypress', mxUtils.bind(this, function(evt)\n * {\n *   if (!graph.isEditing() && !graph.isSelectionEmpty() && evt.which !== 0 &&\n *       !mxEvent.isAltDown(evt) && !mxEvent.isControlDown(evt) && !mxEvent.isMetaDown(evt))\n *   {\n *     graph.startEditing();\n *     \n *     if (mxClient.IS_FF)\n *     {\n *       graph.cellEditor.textarea.value = String.fromCharCode(evt.which);\n *     }\n *   }\n * }));\n * (end)\n * \n * To allow focus for a DIV, and hence to receive key press events, some browsers\n * require it to have a valid tabindex attribute. In this case the following\n * code may be used to keep the container focused.\n * \n * (code)\n * var graphFireMouseEvent = graph.fireMouseEvent;\n * graph.fireMouseEvent = function(evtName, me, sender)\n * {\n *   if (evtName == mxEvent.MOUSE_DOWN)\n *   {\n *     this.container.focus();\n *   }\n *   \n *   graphFireMouseEvent.apply(this, arguments);\n * };\n * (end)\n *\n * Constructor: mxCellEditor\n *\n * Constructs a new in-place editor for the specified graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellEditor(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Stops editing after zoom changes\n\tthis.zoomHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (this.graph.isEditing())\n\t\t{\n\t\t\tthis.resize();\n\t\t}\n\t});\n\t\n\tthis.graph.view.addListener(mxEvent.SCALE, this.zoomHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.zoomHandler);\n\t\n\t// Adds handling of deleted cells while editing\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.editingCell != null && this.graph.getView().getState(this.editingCell) == null)\n\t\t{\n\t\t\tthis.stopEditing(true);\n\t\t}\n\t});\n\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellEditor.prototype.graph = null;\n\n/**\n * Variable: textarea\n *\n * Holds the DIV that is used for text editing. Note that this may be null before the first\n * edit. Instantiated in <init>.\n */\nmxCellEditor.prototype.textarea = null;\n\n/**\n * Variable: editingCell\n * \n * Reference to the <mxCell> that is currently being edited.\n */\nmxCellEditor.prototype.editingCell = null;\n\n/**\n * Variable: trigger\n * \n * Reference to the event that was used to start editing.\n */\nmxCellEditor.prototype.trigger = null;\n\n/**\n * Variable: modified\n * \n * Specifies if the label has been modified.\n */\nmxCellEditor.prototype.modified = false;\n\n/**\n * Variable: autoSize\n * \n * Specifies if the textarea should be resized while the text is being edited.\n * Default is true.\n */\nmxCellEditor.prototype.autoSize = true;\n\n/**\n * Variable: selectText\n * \n * Specifies if the text should be selected when editing starts. Default is\n * true.\n */\nmxCellEditor.prototype.selectText = true;\n\n/**\n * Variable: emptyLabelText\n * \n * Text to be displayed for empty labels. Default is '' or '<br>' in Firefox as\n * a workaround for the missing cursor bug for empty content editable. This can\n * be set to eg. \"[Type Here]\" to easier visualize editing of empty labels. The\n * value is only displayed before the first keystroke and is never used as the\n * actual editing value.\n */\nmxCellEditor.prototype.emptyLabelText = (mxClient.IS_FF) ? '<br>' : '';\n\n/**\n * Variable: escapeCancelsEditing\n * \n * If true, pressing the escape key will stop editing and not accept the new\n * value. Change this to false to accept the new value on escape, and cancel\n * editing on Shift+Escape instead. Default is true.\n */\nmxCellEditor.prototype.escapeCancelsEditing = true;\n\n/**\n * Variable: textNode\n * \n * Reference to the label DOM node that has been hidden.\n */\nmxCellEditor.prototype.textNode = '';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the textarea. Default is 5.\n */\nmxCellEditor.prototype.zIndex = 5;\n\n/**\n * Variable: minResize\n * \n * Defines the minimum width and height to be used in <resize>. Default is 0x20px.\n */\nmxCellEditor.prototype.minResize = new mxRectangle(0, 20);\n\n/**\n * Variable: wordWrapPadding\n * \n * Correction factor for word wrapping width. Default is 2 in quirks, 0 in IE\n * 11 and 1 in all other browsers and modes.\n */\nmxCellEditor.prototype.wordWrapPadding = (mxClient.IS_QUIRKS) ? 2 : (!mxClient.IS_IE11) ? 1 : 0;\n\n/**\n * Variable: blurEnabled\n *\n * If <focusLost> should be called if <textarea> loses the focus. Default is false.\n */\nmxCellEditor.prototype.blurEnabled = false;\n\n/**\n * Variable: initialValue\n * \n * Holds the initial editing value to check if the current value was modified.\n */\nmxCellEditor.prototype.initialValue = null;\n\n/**\n * Variable: align\n * \n * Holds the current temporary horizontal alignment for the cell style. If this\n * is modified then the current text alignment is changed and the cell style is\n * updated when the value is applied.\n */\nmxCellEditor.prototype.align = null;\n\n/**\n * Function: init\n *\n * Creates the <textarea> and installs the event listeners. The key handler\n * updates the <modified> state.\n */\nmxCellEditor.prototype.init = function ()\n{\n\tthis.textarea = document.createElement('div');\n\tthis.textarea.className = 'mxCellEditor mxPlainTextEditor';\n\tthis.textarea.contentEditable = true;\n\t\n\t// Workaround for selection outside of DIV if height is 0\n\tif (mxClient.IS_GC)\n\t{\n\t\tthis.textarea.style.minHeight = '1em';\n\t}\n\n\tthis.textarea.style.position = ((this.isLegacyEditor())) ? 'absolute' : 'relative';\n\tthis.installListeners(this.textarea);\n};\n\n/**\n * Function: applyValue\n * \n * Called in <stopEditing> if cancel is false to invoke <mxGraph.labelChanged>.\n */\nmxCellEditor.prototype.applyValue = function(state, value)\n{\n\tthis.graph.labelChanged(state.cell, value, this.trigger);\n};\n\n/**\n * Function: setAlign\n * \n * Sets the temporary horizontal alignment for the current editing session.\n */\nmxCellEditor.prototype.setAlign = function (align)\n{\n\tif (this.textarea != null)\n\t{\n\t\tthis.textarea.style.textAlign = align;\n\t}\n\t\n\tthis.align = align;\n\tthis.resize();\n};\n\n/**\n * Function: getInitialValue\n * \n * Gets the initial editing value for the given cell.\n */\nmxCellEditor.prototype.getInitialValue = function(state, trigger)\n{\n\tvar result = mxUtils.htmlEntities(this.graph.getEditingValue(state.cell, trigger), false);\n\t\n    // Workaround for trailing line breaks being ignored in the editor\n\tif (!mxClient.IS_QUIRKS && document.documentMode != 8 && document.documentMode != 9 &&\n\t\tdocument.documentMode != 10)\n\t{\n\t\tresult = mxUtils.replaceTrailingNewlines(result, '<div><br></div>');\n\t}\n    \n    return result.replace(/\\n/g, '<br>');\n};\n\n/**\n * Function: getCurrentValue\n * \n * Returns the current editing value.\n */\nmxCellEditor.prototype.getCurrentValue = function(state)\n{\n\treturn mxUtils.extractTextWithWhitespace(this.textarea.childNodes);\n};\n\n/**\n * Function: isCancelEditingKeyEvent\n * \n * Returns true if <escapeCancelsEditing> is true and shift, control and meta\n * are not pressed.\n */\nmxCellEditor.prototype.isCancelEditingKeyEvent = function(evt)\n{\n\treturn this.escapeCancelsEditing || mxEvent.isShiftDown(evt) || mxEvent.isControlDown(evt) || mxEvent.isMetaDown(evt);\n};\n\n/**\n * Function: installListeners\n * \n * Installs listeners for focus, change and standard key event handling.\n */\nmxCellEditor.prototype.installListeners = function(elt)\n{\n\t// Applies value if text is dragged\n\t// LATER: Gesture mouse events ignored for starting move\n\tmxEvent.addListener(elt, 'dragstart', mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.stopEditing(false);\n\t\tmxEvent.consume(evt);\n\t}));\n\n\t// Applies value if focus is lost\n\tmxEvent.addListener(elt, 'blur', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.blurEnabled)\n\t\t{\n\t\t\tthis.focusLost(evt);\n\t\t}\n\t}));\n\n\t// Updates modified state and handles placeholder text\n\tmxEvent.addListener(elt, 'keydown', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt))\n\t\t{\n\t\t\tif (this.isStopEditingEvent(evt))\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(false);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t\telse if (evt.keyCode == 27 /* Escape */)\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(this.isCancelEditingKeyEvent(evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}));\n\n\t// Keypress only fires if printable key was pressed and handles removing the empty placeholder\n\tvar keypressHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Clears the initial empty label on the first keystroke\n\t\t\t// and workaround for FF which fires keypress for delete and backspace\n\t\t\tif (this.clearOnChange && elt.innerHTML == this.getEmptyLabelText() &&\n\t\t\t\t(!mxClient.IS_FF || (evt.keyCode != 8 /* Backspace */ && evt.keyCode != 46 /* Delete */)))\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t\telt.innerHTML = '';\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, 'keypress', keypressHandler);\n\tmxEvent.addListener(elt, 'paste', keypressHandler);\n\t\n\t// Handler for updating the empty label text value after a change\n\tvar keyupHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Uses an optional text value for sempty labels which is cleared\n\t\t\t// when the first keystroke appears. This makes it easier to see\n\t\t\t// that a label is being edited even if the label is empty.\n\t\t\t// In Safari and FF, an empty text is represented by <BR> which isn't enough to force a valid size\n\t\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t\t{\n\t\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\t\tthis.clearOnChange = this.textarea.innerHTML.length > 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keyup', keyupHandler);\n\tmxEvent.addListener(elt, 'cut', keyupHandler);\n\tmxEvent.addListener(elt, 'paste', keyupHandler);\n\n\t// Adds automatic resizing of the textbox while typing using input, keyup and/or DOM change events\n\tvar evtName = (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keydown';\n\t\n\tvar resizeHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null && this.autoSize && !mxEvent.isConsumed(evt))\n\t\t{\n\t\t\t// Asynchronous is needed for keydown and shows better results for input events overall\n\t\t\t// (ie non-blocking and cases where the offsetWidth/-Height was wrong at this time)\n\t\t\tif (this.resizeThread != null)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.resizeThread);\n\t\t\t}\n\t\t\t\n\t\t\tthis.resizeThread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resizeThread = null;\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(elt, evtName, resizeHandler);\n\tmxEvent.addListener(window, 'resize', resizeHandler);\n\n\tif (document.documentMode >= 9)\n\t{\n\t\tmxEvent.addListener(elt, 'DOMNodeRemoved', resizeHandler);\n\t\tmxEvent.addListener(elt, 'DOMNodeInserted', resizeHandler);\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(elt, 'cut', resizeHandler);\n\t\tmxEvent.addListener(elt, 'paste', resizeHandler);\n\t}\n};\n\n/**\n * Function: isStopEditingEvent\n * \n * Returns true if the given keydown event should stop cell editing. This\n * returns true if F2 is pressed of if <mxGraph.enterStopsCellEditing> is true\n * and enter is pressed without control or shift.\n */\nmxCellEditor.prototype.isStopEditingEvent = function(evt)\n{\n\treturn evt.keyCode == 113 /* F2 */ || (this.graph.isEnterStopsCellEditing() &&\n\t\tevt.keyCode == 13 /* Enter */ && !mxEvent.isControlDown(evt) &&\n\t\t!mxEvent.isShiftDown(evt));\n};\n\n/**\n * Function: isEventSource\n * \n * Returns true if this editor is the source for the given native event.\n */\nmxCellEditor.prototype.isEventSource = function(evt)\n{\n\treturn mxEvent.getSource(evt) == this.textarea;\n};\n\n/**\n * Function: resize\n * \n * Returns <modified>.\n */\nmxCellEditor.prototype.resize = function()\n{\n\tvar state = this.graph.getView().getState(this.editingCell);\n\t\n\tif (state == null)\n\t{\n\t\tthis.stopEditing(true);\n\t}\n\telse if (this.textarea != null)\n\t{\n\t\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n \t\tvar scale = this.graph.getView().scale;\n \t\tvar m = null;\n\t\t\n\t\tif (!this.autoSize || (state.style[mxConstants.STYLE_OVERFLOW] == 'fill'))\n\t\t{\n\t\t\t// Specifies the bounds of the editor box\n\t\t\tthis.bounds = this.getEditorBounds(state);\n\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + 'px';\n\t\t\tthis.textarea.style.height = Math.round(this.bounds.height / scale) + 'px';\n\t\t\t\n\t\t\t// FIXME: Offset when scaled\n\t\t\tif (document.documentMode == 8 || mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.round(this.bounds.x) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.round(this.bounds.y) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x + 1)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y + 1)) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\t// Installs native word wrapping and avoids word wrap for empty label placeholder\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + this.wordWrapPadding + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t \t{\n\t \t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\tm = (state.text != null && this.align == null) ? state.text.margin : null;\n\t\t\t\n\t\t\tif (m == null)\n\t\t\t{\n\t\t\t\tm = mxUtils.getAlignmentAsPoint(this.align || mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER),\n\t\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE));\n\t\t\t}\n\t\t\t\n\t \t\tif (isEdge)\n\t\t\t{\n\t\t\t\tthis.bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y, 0, 0);\n\t\t\t\t\n\t\t\t\tif (lw != null)\n\t\t\t \t{\n\t\t\t\t\tvar tmp = (parseFloat(lw) + 2) * scale;\n\t\t\t\t\tthis.bounds.width = tmp;\n\t\t\t\t\tthis.bounds.x += m.x * tmp;\n\t\t\t \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar bds = mxRectangle.fromRectangle(state);\n\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\tbds = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(bds) : bds;\n\t\t\t \t\n\t\t\t \tif (lw != null)\n\t\t\t \t{\n\t\t\t \t\tbds.width = parseFloat(lw) * scale;\n\t\t\t \t}\n\t\t\t \t\n\t\t\t \tif (!state.view.graph.cellRenderer.legacySpacing || state.style[mxConstants.STYLE_OVERFLOW] != 'width')\n\t\t\t \t{\n\t\t\t\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 2) * scale;\n\t\t\t\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\t\t\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\t\t\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\t\t\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\t\t\t\t\n\t\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\t\tbds = new mxRectangle(bds.x + spacingLeft, bds.y + spacingTop,\n\t\t\t\t\t\tbds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (spacingLeft + spacingRight) : 0),\n\t\t\t\t\t\tbds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (spacingTop + spacingBottom) : 0));\n\t\t\t \t}\n\n\t\t\t\tthis.bounds = new mxRectangle(bds.x + state.absoluteOffset.x, bds.y + state.absoluteOffset.y, bds.width, bds.height);\n\t\t\t}\n\n\t\t\t// Needed for word wrap inside text blocks with oversize lines to match the final result where\n\t \t\t// the width of the longest line is used as the reference for text alignment in the cell\n\t \t\t// TODO: Fix word wrapping preview for edge labels in helloworld.html\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t \t\t// Forces automatic reflow if text is removed from an oversize label and normal word wrap\n\t\t\t\tvar tmp = Math.round(this.bounds.width / ((document.documentMode == 8) ? scale : scale)) + this.wordWrapPadding;\n\n\t\t\t\tif (this.textarea.style.position != 'relative')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = tmp + 'px';\n\t\t\t\t\t\n\t\t\t\t\tif (this.textarea.scrollWidth > tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.textarea.style.width = this.textarea.scrollWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.maxWidth = tmp + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// KNOWN: Trailing cursor in IE9 quirks mode is not visible\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\tthis.textarea.style.width = '';\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\t// Workaround for wrong measuring in IE8 standards\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tthis.textarea.style.zoom = '1';\n\t\t\t\tthis.textarea.style.height = 'auto';\n\t\t\t}\n\t\t\t\n\t\t\tvar ow = this.textarea.scrollWidth;\n\t\t\tvar oh = this.textarea.scrollHeight;\n\t\t\t\n\t\t\t// TODO: Update CSS width and height if smaller than minResize or remove minResize\n\t\t\t//if (this.minResize != null)\n\t\t\t//{\n\t\t\t//\tow = Math.max(ow, this.minResize.width);\n\t\t\t//\toh = Math.max(oh, this.minResize.height);\n\t\t\t//}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\t// LATER: Scaled wrapping and position is wrong in IE8\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil((this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2) / scale)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil((this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1) / scale)) + 'px';\n\t\t\t\t// Workaround for wrong event handling width and height\n\t\t\t\tthis.textarea.style.width = Math.round(ow * scale) + 'px';\n\t\t\t\tthis.textarea.style.height = Math.round(oh * scale) + 'px';\n\t\t\t}\n\t\t\telse if (mxClient.IS_QUIRKS)\n\t\t\t{\t\t\t\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil(this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil(this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1)) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x - m.x * (this.bounds.width - 2)) + 1) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y - m.y * (this.bounds.height - 4) + ((m.y == -1) ? 3 : 0)) + 1) + 'px';\n\t\t\t}\n\t \t}\n\n\t\tif (mxClient.IS_VML)\n\t\t{\n\t\t\tthis.textarea.style.zoom = scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transformOrigin', '0px 0px');\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transform',\n\t\t\t\t'scale(' + scale + ',' + scale + ')' + ((m == null) ? '' :\n\t\t\t\t' translate(' + (m.x * 100) + '%,' + (m.y * 100) + '%)'));\n\t\t}\n\t}\n};\n\n/**\n * Function: focusLost\n *\n * Called if the textarea has lost focus.\n */\nmxCellEditor.prototype.focusLost = function()\n{\n\tthis.stopEditing(!this.graph.isInvokesStopCellEditing());\n};\n\n/**\n * Function: getBackgroundColor\n * \n * Returns the background color for the in-place editor. This implementation\n * always returns null.\n */\nmxCellEditor.prototype.getBackgroundColor = function(state)\n{\n\treturn null;\n};\n\n/**\n * Function: isLegacyEditor\n * \n * Returns true if max-width is not supported or if the SVG root element in\n * in the graph does not have CSS position absolute. In these cases the text\n * editor must use CSS position absolute to avoid an offset but it will have\n * a less accurate line wrapping width during the text editing preview. This\n * implementation returns true for IE8- and quirks mode or if the CSS position\n * of the SVG element is not absolute.\n */\nmxCellEditor.prototype.isLegacyEditor = function()\n{\n\tif (mxClient.IS_VML)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tvar absoluteRoot = false;\n\t\t\n\t\tif (mxClient.IS_SVG)\n\t\t{\n\t\t\tvar root = this.graph.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\tvar css = mxUtils.getCurrentStyle(root);\n\t\t\t\t\n\t\t\t\tif (css != null)\n\t\t\t\t{\t\t\t\t\n\t\t\t\t\tabsoluteRoot = css.position == 'absolute';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn !absoluteRoot;\n\t}\n};\n\n/**\n * Function: startEditing\n *\n * Starts the editor for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to start editing.\n * trigger - Optional mouse event that triggered the editor.\n */\nmxCellEditor.prototype.startEditing = function(cell, trigger)\n{\n\tthis.stopEditing(true);\n\tthis.align = null;\n\t\n\t// Creates new textarea instance\n\tif (this.textarea == null)\n\t{\n\t\tthis.init();\n\t}\n\t\n\tif (this.graph.tooltipHandler != null)\n\t{\n\t\tthis.graph.tooltipHandler.hideTooltip();\n\t}\n\t\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\t// Configures the style of the in-place editor\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar size = mxUtils.getValue(state.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n\t\tvar family = mxUtils.getValue(state.style, mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY);\n\t\tvar color = mxUtils.getValue(state.style, mxConstants.STYLE_FONTCOLOR, 'black');\n\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_LEFT);\n\t\tvar bold = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_BOLD) == mxConstants.FONT_BOLD;\n\t\tvar italic = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC;\n\t\tvar txtDecor = [];\n\t\t\n\t\tif ((mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\ttxtDecor.push('underline');\n\t\t}\n\t\t\n\t\tif ((mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t{\n\t\t\ttxtDecor.push('line-through');\n\t\t}\n\t\t\n\t\tthis.textarea.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? Math.round(size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\tthis.textarea.style.backgroundColor = this.getBackgroundColor(state);\n\t\tthis.textarea.style.textDecoration = txtDecor.join(' ');\n\t\tthis.textarea.style.fontWeight = (bold) ? 'bold' : 'normal';\n\t\tthis.textarea.style.fontStyle = (italic) ? 'italic' : '';\n\t\tthis.textarea.style.fontSize = Math.round(size) + 'px';\n\t\tthis.textarea.style.zIndex = this.zIndex;\n\t\tthis.textarea.style.fontFamily = family;\n\t\tthis.textarea.style.textAlign = align;\n\t\tthis.textarea.style.outline = 'none';\n\t\tthis.textarea.style.color = color;\n\t\t\n\t\tvar dir = this.textDirection = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO)\n\t\t{\n\t\t\tif (state != null && state.text != null && state.text.dialect != mxConstants.DIALECT_STRICTHTML &&\n\t\t\t\t!mxUtils.isNode(state.text.value))\n\t\t\t{\n\t\t\t\tdir = state.text.getAutoDirection();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tthis.textarea.setAttribute('dir', dir);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.textarea.removeAttribute('dir');\n\t\t}\n\n\t\t// Sets the initial editing value\n\t\tthis.textarea.innerHTML = this.getInitialValue(state, trigger) || '';\n\t\tthis.initialValue = this.textarea.innerHTML;\n\n\t\t// Uses an optional text value for empty labels which is cleared\n\t\t// when the first keystroke appears. This makes it easier to see\n\t\t// that a label is being edited even if the label is empty.\n\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t{\n\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\tthis.clearOnChange = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.clearOnChange = this.textarea.innerHTML == this.getEmptyLabelText();\n\t\t}\n\n\t\tthis.graph.container.appendChild(this.textarea);\n\t\t\n\t\t// Update this after firing all potential events that could update the cleanOnChange flag\n\t\tthis.editingCell = cell;\n\t\tthis.trigger = trigger;\n\t\tthis.textNode = null;\n\n\t\tif (state.text != null && this.isHideLabel(state))\n\t\t{\n\t\t\tthis.textNode = state.text.node;\n\t\t\tthis.textNode.style.visibility = 'hidden';\n\t\t}\n\n\t\t// Workaround for initial offsetHeight not ready for heading in markup\n\t\tif (this.autoSize && (this.graph.model.isEdge(state.cell) || state.style[mxConstants.STYLE_OVERFLOW] != 'fill'))\n\t\t{\n\t\t\twindow.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t\t\n\t\tthis.resize();\n\t\t\n\t\t// Workaround for NS_ERROR_FAILURE in FF\n\t\ttry\n\t\t{\n\t\t\t// Prefers blinking cursor over no selected text if empty\n\t\t\tthis.textarea.focus();\n\t\t\t\n\t\t\tif (this.isSelectText() && this.textarea.innerHTML.length > 0 &&\n\t\t\t\t(this.textarea.innerHTML != this.getEmptyLabelText() || !this.clearOnChange))\n\t\t\t{\n\t\t\t\tdocument.execCommand('selectAll', false, null);\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t}\n};\n\n/**\n * Function: isSelectText\n * \n * Returns <selectText>.\n */\nmxCellEditor.prototype.isSelectText = function()\n{\n\treturn this.selectText;\n};\n\n/**\n * Function: isSelectText\n * \n * Returns <selectText>.\n */\nmxCellEditor.prototype.clearSelection = function()\n{\n\tvar selection = null;\n\t\n\tif (window.getSelection)\n\t{\n\t\tselection = window.getSelection();\n\t}\n\telse if (document.selection)\n\t{\n\t\tselection = document.selection;\n\t}\n\t\n\tif (selection != null)\n\t{\n\t\tif (selection.empty)\n\t\t{\n\t\t\tselection.empty();\n\t\t}\n\t\telse if (selection.removeAllRanges)\n\t\t{\n\t\t\tselection.removeAllRanges();\n\t\t}\n\t}\n};\n\n/**\n * Function: stopEditing\n *\n * Stops the editor and applies the value if cancel is false.\n */\nmxCellEditor.prototype.stopEditing = function(cancel)\n{\n\tcancel = cancel || false;\n\t\n\tif (this.editingCell != null)\n\t{\n\t\tif (this.textNode != null)\n\t\t{\n\t\t\tthis.textNode.style.visibility = 'visible';\n\t\t\tthis.textNode = null;\n\t\t}\n\n\t\tvar state = (!cancel) ? this.graph.view.getState(this.editingCell) : null;\n\n\t\tvar initial = this.initialValue;\n\t\tthis.initialValue = null;\n\t\tthis.editingCell = null;\n\t\tthis.trigger = null;\n\t\tthis.bounds = null;\n\t\tthis.textarea.blur();\n\t\tthis.clearSelection();\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tif (this.clearOnChange && this.textarea.innerHTML == this.getEmptyLabelText())\n\t\t{\n\t\t\tthis.textarea.innerHTML = '';\n\t\t\tthis.clearOnChange = false;\n\t\t}\n\n\t\tif (state != null && (this.textarea.innerHTML != initial || this.align != null))\n\t\t{\n\t\t\tthis.prepareTextarea();\n\t\t\tvar value = this.getCurrentValue(state);\n\t\t\t\n\t\t\tthis.graph.getModel().beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (value != null)\n\t\t\t\t{\n\t\t\t\t\tthis.applyValue(state, value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.align != null)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ALIGN, this.align, [state.cell]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.graph.getModel().endUpdate();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Forces new instance on next edit for undo history reset\n\t\tmxEvent.release(this.textarea);\n\t\tthis.textarea = null;\n\t\tthis.align = null;\n\t}\n};\n\n/**\n * Function: prepareTextarea\n * \n * Prepares the textarea for getting its value in <stopEditing>.\n * This implementation removes the extra trailing linefeed in Firefox.\n */\nmxCellEditor.prototype.prepareTextarea = function()\n{\n\tif (this.textarea.lastChild != null &&\n\t\tthis.textarea.lastChild.nodeName == 'BR')\n\t{\n\t\tthis.textarea.removeChild(this.textarea.lastChild);\n\t}\n};\n\n/**\n * Function: isHideLabel\n * \n * Returns true if the label should be hidden while the cell is being\n * edited.\n */\nmxCellEditor.prototype.isHideLabel = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns the minimum width and height for editing the given state.\n */\nmxCellEditor.prototype.getMinimumSize = function(state)\n{\n\tvar scale = this.graph.getView().scale;\n\t\n\treturn new mxRectangle(0, 0, (state.text == null) ? 30 : state.text.size * scale + 20,\n\t\t\t(this.textarea.style.textAlign == 'left') ? 120 : 40);\n};\n\n/**\n * Function: getEditorBounds\n * \n * Returns the <mxRectangle> that defines the bounds of the editor.\n */\nmxCellEditor.prototype.getEditorBounds = function(state)\n{\n\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n\tvar scale = this.graph.getView().scale;\n\tvar minSize = this.getMinimumSize(state);\n\tvar minWidth = minSize.width;\n \tvar minHeight = minSize.height;\n \tvar result = null;\n \t\n \tif (!isEdge && state.view.graph.cellRenderer.legacySpacing && state.style[mxConstants.STYLE_OVERFLOW] == 'fill')\n \t{\n \t\tresult = state.shape.getLabelBounds(mxRectangle.fromRectangle(state));\n \t}\n \telse\n \t{\n\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 0) * scale;\n\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\n\t \tresult = new mxRectangle(state.x, state.y,\n\t \t\t Math.max(minWidth, state.width - spacingLeft - spacingRight),\n\t \t\t Math.max(minHeight, state.height - spacingTop - spacingBottom));\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tresult = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(result) : result;\n\t\n\t\tif (isEdge)\n\t\t{\n\t\t\tresult.x = state.absoluteOffset.x;\n\t\t\tresult.y = state.absoluteOffset.y;\n\t\n\t\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\t// Workaround for label containing just spaces in which case\n\t\t\t\t// the bounding box location contains negative numbers \n\t\t\t\tif (state.text.boundingBox.x > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.x = state.text.boundingBox.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.y = state.text.boundingBox.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tresult.x = Math.min(result.x, state.text.boundingBox.x);\n\t\t\tresult.y = Math.min(result.y, state.text.boundingBox.y);\n\t\t}\n\t\n\t\tresult.x += spacingLeft;\n\t\tresult.y += spacingTop;\n\t\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (!isEdge)\n\t\t\t{\n\t\t\t\tresult.width = Math.max(result.width, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(result.height, state.text.boundingBox.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.width = Math.max(minWidth, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(minHeight, state.text.boundingBox.height);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Applies the horizontal and vertical label positions\n\t\tif (this.graph.getModel().isVertex(state.cell))\n\t\t{\n\t\t\tvar horizontal = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\n\t\t\tif (horizontal == mxConstants.ALIGN_LEFT)\n\t\t\t{\n\t\t\t\tresult.x -= state.width;\n\t\t\t}\n\t\t\telse if (horizontal == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tresult.x += state.width;\n\t\t\t}\n\t\n\t\t\tvar vertical = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\t\t\tif (vertical == mxConstants.ALIGN_TOP)\n\t\t\t{\n\t\t\t\tresult.y -= state.height;\n\t\t\t}\n\t\t\telse if (vertical == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tresult.y += state.height;\n\t\t\t}\n\t\t}\n \t}\n \t\n \treturn new mxRectangle(Math.round(result.x), Math.round(result.y), Math.round(result.width), Math.round(result.height));\n};\n\n/**\n * Function: getEmptyLabelText\n *\n * Returns the initial label value to be used of the label of the given\n * cell is empty. This label is displayed and cleared on the first keystroke.\n * This implementation returns <emptyLabelText>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a text for an empty editing box should be\n * returned.\n */\nmxCellEditor.prototype.getEmptyLabelText = function (cell)\n{\n\treturn this.emptyLabelText;\n};\n\n/**\n * Function: getEditingCell\n *\n * Returns the cell that is currently being edited or null if no cell is\n * being edited.\n */\nmxCellEditor.prototype.getEditingCell = function ()\n{\n\treturn this.editingCell;\n};\n\n/**\n * Function: destroy\n *\n * Destroys the editor and removes all associated resources.\n */\nmxCellEditor.prototype.destroy = function ()\n{\n\tif (this.textarea != null)\n\t{\n\t\tmxEvent.release(this.textarea);\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tthis.textarea = null;\n\n\t}\n\t\t\t\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\n\tif (this.zoomHandler)\n\t{\n\t\tthis.graph.view.removeListener(this.zoomHandler);\n\t\tthis.zoomHandler = null;\n\t}\n};\n\n__mxOutput.mxCellEditor = typeof mxCellEditor !== 'undefined' ? mxCellEditor : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxCellRenderer\n * \n * Renders cells into a document object model. The <defaultShapes> is a global\n * map of shapename, constructor pairs that is used in all instances. You can\n * get a list of all available shape names using the following code.\n * \n * In general the cell renderer is in charge of creating, redrawing and\n * destroying the shape and label associated with a cell state, as well as\n * some other graphical objects, namely controls and overlays. The shape\n * hieararchy in the display (ie. the hierarchy in which the DOM nodes\n * appear in the document) does not reflect the cell hierarchy. The shapes\n * are a (flat) sequence of shapes and labels inside the draw pane of the\n * graph view, with some exceptions, namely the HTML labels being placed\n * directly inside the graph container for certain browsers.\n * \n * (code)\n * mxLog.show();\n * for (var i in mxCellRenderer.defaultShapes)\n * {\n *   mxLog.debug(i);\n * }\n * (end)\n *\n * Constructor: mxCellRenderer\n * \n * Constructs a new cell renderer with the following built-in shapes:\n * arrow, rectangle, ellipse, rhombus, image, line, label, cylinder,\n * swimlane, connector, actor and cloud.\n */\nfunction mxCellRenderer() { };\n\n/**\n * Variable: defaultShapes\n * \n * Static array that contains the globally registered shapes which are\n * known to all instances of this class. For adding new shapes you should\n * use the static <mxCellRenderer.registerShape> function.\n */\nmxCellRenderer.defaultShapes = new Object();\n\n/**\n * Variable: defaultEdgeShape\n * \n * Defines the default shape for edges. Default is <mxConnector>.\n */\nmxCellRenderer.prototype.defaultEdgeShape = mxConnector;\n\n/**\n * Variable: defaultVertexShape\n * \n * Defines the default shape for vertices. Default is <mxRectangleShape>.\n */\nmxCellRenderer.prototype.defaultVertexShape = mxRectangleShape;\n\n/**\n * Variable: defaultTextShape\n * \n * Defines the default shape for labels. Default is <mxText>.\n */\nmxCellRenderer.prototype.defaultTextShape = mxText;\n\n/**\n * Variable: legacyControlPosition\n * \n * Specifies if the folding icon should ignore the horizontal\n * orientation of a swimlane. Default is true.\n */\nmxCellRenderer.prototype.legacyControlPosition = true;\n\n/**\n * Variable: legacySpacing\n * \n * Specifies if spacing and label position should be ignored if overflow is\n * fill or width. Default is true for backwards compatiblity.\n */\nmxCellRenderer.prototype.legacySpacing = true;\n\n/**\n * Variable: antiAlias\n * \n * Anti-aliasing option for new shapes. Default is true.\n */\nmxCellRenderer.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxCellRenderer.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: forceControlClickHandler\n * \n * Specifies if the enabled state of the graph should be ignored in the control\n * click handler (to allow folding in disabled graphs). Default is false.\n */\nmxCellRenderer.prototype.forceControlClickHandler = false;\n\n/**\n * Function: registerShape\n * \n * Registers the given constructor under the specified key in this instance\n * of the renderer.\n * \n * Example:\n * \n * (code)\n * mxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\n * (end)\n * \n * Parameters:\n * \n * key - String representing the shape name.\n * shape - Constructor of the <mxShape> subclass.\n */\nmxCellRenderer.registerShape = function(key, shape)\n{\n\tmxCellRenderer.defaultShapes[key] = shape;\n};\n\n// Adds default shapes into the default shapes array\nmxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ELLIPSE, mxEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_RHOMBUS, mxRhombus);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CYLINDER, mxCylinder);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CONNECTOR, mxConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ACTOR, mxActor);\nmxCellRenderer.registerShape(mxConstants.SHAPE_TRIANGLE, mxTriangle);\nmxCellRenderer.registerShape(mxConstants.SHAPE_HEXAGON, mxHexagon);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CLOUD, mxCloud);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LINE, mxLine);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW, mxArrow);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW_CONNECTOR, mxArrowConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_DOUBLE_ELLIPSE, mxDoubleEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_SWIMLANE, mxSwimlane);\nmxCellRenderer.registerShape(mxConstants.SHAPE_IMAGE, mxImageShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LABEL, mxLabel);\n\n/**\n * Function: initializeShape\n * \n * Initializes the shape in the given state by calling its init method with\n * the correct container after configuring it using <configureShape>.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be initialized.\n */\nmxCellRenderer.prototype.initializeShape = function(state)\n{\n\tstate.shape.dialect = state.view.graph.dialect;\n\tthis.configureShape(state);\n\tstate.shape.init(state.view.getDrawPane());\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be created.\n */\nmxCellRenderer.prototype.createShape = function(state)\n{\n\tvar shape = null;\n\t\n\tif (state.style != null)\n\t{\n\t\t// Checks if there is a stencil for the name and creates\n\t\t// a shape instance for the stencil if one exists\n\t\tvar stencil = mxStencilRegistry.getStencil(state.style[mxConstants.STYLE_SHAPE]);\n\t\t\n\t\tif (stencil != null)\n\t\t{\n\t\t\tshape = new mxShape(stencil);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar ctor = this.getShapeConstructor(state);\n\t\t\tshape = new ctor();\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: createIndicatorShape\n * \n * Creates the indicator shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the indicator shape should be created.\n */\nmxCellRenderer.prototype.createIndicatorShape = function(state)\n{\n\tstate.shape.indicatorShape = this.getShape(state.view.graph.getIndicatorShape(state));\n};\n\n/**\n * Function: getShape\n * \n * Returns the shape for the given name from <defaultShapes>.\n */\nmxCellRenderer.prototype.getShape = function(name)\n{\n\treturn (name != null) ? mxCellRenderer.defaultShapes[name] : null;\n};\n\n/**\n * Function: getShapeConstructor\n * \n * Returns the constructor to be used for creating the shape.\n */\nmxCellRenderer.prototype.getShapeConstructor = function(state)\n{\n\tvar ctor = this.getShape(state.style[mxConstants.STYLE_SHAPE]);\n\t\n\tif (ctor == null)\n\t{\n\t\tctor = (state.view.graph.getModel().isEdge(state.cell)) ?\n\t\t\tthis.defaultEdgeShape : this.defaultVertexShape;\n\t}\n\t\n\treturn ctor;\n};\n\n/**\n * Function: configureShape\n * \n * Configures the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be configured.\n */\nmxCellRenderer.prototype.configureShape = function(state)\n{\n\tstate.shape.apply(state);\n\tstate.shape.image = state.view.graph.getImage(state);\n\tstate.shape.indicatorColor = state.view.graph.getIndicatorColor(state);\n\tstate.shape.indicatorStrokeColor = state.style[mxConstants.STYLE_INDICATOR_STROKECOLOR];\n\tstate.shape.indicatorGradientColor = state.view.graph.getIndicatorGradientColor(state);\n\tstate.shape.indicatorDirection = state.style[mxConstants.STYLE_INDICATOR_DIRECTION];\n\tstate.shape.indicatorImage = state.view.graph.getIndicatorImage(state);\n\n\tthis.postConfigureShape(state);\n};\n\n/**\n * Function: postConfigureShape\n * \n * Replaces any reserved words used for attributes, eg. inherit,\n * indicated or swimlane for colors in the shape for the given state.\n * This implementation resolves these keywords on the fill, stroke\n * and gradient color keys.\n */\nmxCellRenderer.prototype.postConfigureShape = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tthis.resolveColor(state, 'indicatorGradientColor', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'indicatorColor', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'gradient', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'stroke', mxConstants.STYLE_STROKECOLOR);\n\t\tthis.resolveColor(state, 'fill', mxConstants.STYLE_FILLCOLOR);\n\t}\n};\n\n/**\n * Function: checkPlaceholderStyles\n * \n * Checks if the style of the given <mxCellState> contains 'inherit',\n * 'indicated' or 'swimlane' for colors that support those keywords.\n */\nmxCellRenderer.prototype.checkPlaceholderStyles = function(state)\n{\n\t// LATER: Check if the color has actually changed\n\tif (state.style != null)\n\t{\n\t\tvar values = ['inherit', 'swimlane', 'indicated'];\n\t\tvar styles = [mxConstants.STYLE_FILLCOLOR, mxConstants.STYLE_STROKECOLOR,\n\t\t\tmxConstants.STYLE_GRADIENTCOLOR, mxConstants.STYLE_FONTCOLOR];\n\t\t\n\t\tfor (var i = 0; i < styles.length; i++)\n\t\t{\n\t\t\tif (mxUtils.indexOf(values, state.style[styles[i]]) >= 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: resolveColor\n * \n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.resolveColor = function(state, field, key)\n{\n\tvar shape = (key == mxConstants.STYLE_FONTCOLOR) ?\n\t\tstate.text : state.shape;\n\t\n\tif (shape != null)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar value = shape[field];\n\t\tvar referenced = null;\n\t\t\n\t\tif (value == 'inherit')\n\t\t{\n\t\t\treferenced = graph.model.getParent(state.cell);\n\t\t}\n\t\telse if (value == 'swimlane')\n\t\t{\n\t\t\tshape[field] = (key == mxConstants.STYLE_STROKECOLOR ||\n\t\t\t\tkey == mxConstants.STYLE_FONTCOLOR) ?\n\t\t\t\t'#000000' : '#ffffff';\n\t\t\t\n\t\t\tif (graph.model.getTerminal(state.cell, false) != null)\n\t\t\t{\n\t\t\t\treferenced = graph.model.getTerminal(state.cell, false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treferenced = state.cell;\n\t\t\t}\n\t\t\t\n\t\t\treferenced = graph.getSwimlane(referenced);\n\t\t\tkey = graph.swimlaneIndicatorColorAttribute;\n\t\t}\n\t\telse if (value == 'indicated' && state.shape != null)\n\t\t{\n\t\t\tshape[field] = state.shape.indicatorColor;\n\t\t}\n\t\n\t\tif (referenced != null)\n\t\t{\n\t\t\tvar rstate = graph.getView().getState(referenced);\n\t\t\tshape[field] = null;\n\t\t\t\n\t\t\tif (rstate != null)\n\t\t\t{\n\t\t\t\tvar rshape = (key == mxConstants.STYLE_FONTCOLOR) ? rstate.text : rstate.shape;\n\t\t\t\t\n\t\t\t\tif (rshape != null && field != 'indicatorColor')\n\t\t\t\t{\n\t\t\t\t\tshape[field] = rshape[field];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tshape[field] = rstate.style[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelValue\n * \n * Returns the value to be used for the label.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.getLabelValue = function(state)\n{\n\treturn state.view.graph.getLabel(state.cell);\n};\n\n/**\n * Function: createLabel\n * \n * Creates the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.createLabel = function(state, value)\n{\n\tvar graph = state.view.graph;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\t\n\tif (state.style[mxConstants.STYLE_FONTSIZE] > 0 || state.style[mxConstants.STYLE_FONTSIZE] == null)\n\t{\n\t\t// Avoids using DOM node for empty labels\n\t\tvar isForceHtml = (graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\n\t\tstate.text = new this.defaultTextShape(value, new mxRectangle(),\n\t\t\t\t(state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER),\n\t\t\t\tgraph.getVerticalAlign(state),\n\t\t\t\tstate.style[mxConstants.STYLE_FONTCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTFAMILY],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSIZE],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSTYLE],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_TOP],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_RIGHT],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_BOTTOM],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_LEFT],\n\t\t\t\tstate.style[mxConstants.STYLE_HORIZONTAL],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BORDERCOLOR],\n\t\t\t\tgraph.isWrapping(state.cell) && graph.isHtmlLabel(state.cell),\n\t\t\t\tgraph.isLabelClipped(state.cell),\n\t\t\t\tstate.style[mxConstants.STYLE_OVERFLOW],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_PADDING],\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION));\n\t\tstate.text.opacity = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tstate.text.dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\t\tstate.text.style = state.style;\n\t\tstate.text.state = state;\n\t\tthis.initializeLabel(state, state.text);\n\t\t\n\t\t// Workaround for touch devices routing all events for a mouse gesture\n\t\t// (down, move, up) via the initial DOM node. IE additionally redirects\n\t\t// the event via the initial DOM node but the event source is the node\n\t\t// under the mouse, so we need to check if this is the case and force\n\t\t// getCellAt for the subsequent mouseMoves and the final mouseUp.\n\t\tvar forceGetCell = false;\n\t\t\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar result = state;\n\n\t\t\tif (mxClient.IS_TOUCH || forceGetCell)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t};\n\t\t\n\t\t// TODO: Add handling for special touch device gestures\n\t\tmxEvent.addGestureListeners(state.text.node,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\t\tforceGetCell = graph.dialect != mxConstants.DIALECT_SVG &&\n\t\t\t\t\t\tmxEvent.getSource(evt).nodeName == 'IMG';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t\tforceGetCell = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// Uses double click timeout in mxGraph for quirks mode\n\t\tif (graph.nativeDblClickEnabled)\n\t\t{\n\t\t\tmxEvent.addListener(state.text.node, 'dblclick',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Function: initializeLabel\n * \n * Initiailzes the label with a suitable container.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be initialized.\n */\nmxCellRenderer.prototype.initializeLabel = function(state, shape)\n{\n\tif (mxClient.IS_SVG && mxClient.NO_FO && shape.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.init(state.view.graph.container);\n\t}\n\telse\n\t{\n\t\tshape.init(state.view.getDrawPane());\n\t}\n};\n\n/**\n * Function: createCellOverlays\n * \n * Creates the actual shape for showing the overlay for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n */\nmxCellRenderer.prototype.createCellOverlays = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar overlays = graph.getCellOverlays(state.cell);\n\tvar dict = null;\n\t\n\tif (overlays != null)\n\t{\n\t\tdict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tvar shape = (state.overlays != null) ? state.overlays.remove(overlays[i]) : null;\n\t\t\t\n\t\t\tif (shape == null)\n\t\t\t{\n\t\t\t\tvar tmp = new mxImageShape(new mxRectangle(), overlays[i].image.src);\n\t\t\t\ttmp.dialect = state.view.graph.dialect;\n\t\t\t\ttmp.preserveImageAspect = false;\n\t\t\t\ttmp.overlay = overlays[i];\n\t\t\t\tthis.initializeOverlay(state, tmp);\n\t\t\t\tthis.installCellOverlayListeners(state, overlays[i], tmp);\n\t\n\t\t\t\tif (overlays[i].cursor != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.node.style.cursor = overlays[i].cursor;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdict.put(overlays[i], tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdict.put(overlays[i], shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Removes unused\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tshape.destroy();\n\t\t});\n\t}\n\t\n\tstate.overlays = dict;\n};\n\n/**\n * Function: initializeOverlay\n * \n * Initializes the given overlay.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n * overlay - <mxImageShape> that represents the overlay.\n */\nmxCellRenderer.prototype.initializeOverlay = function(state, overlay)\n{\n\toverlay.init(state.view.getOverlayPane());\n};\n\n/**\n * Function: installOverlayListeners\n * \n * Installs the listeners for the given <mxCellState>, <mxCellOverlay> and\n * <mxShape> that represents the overlay.\n */\nmxCellRenderer.prototype.installCellOverlayListeners = function(state, overlay, shape)\n{\n\tvar graph  = state.view.graph;\n\t\n\tmxEvent.addListener(shape.node, 'click', function (evt)\n\t{\n\t\tif (graph.isEditing())\n\t\t{\n\t\t\tgraph.stopEditing(!graph.isInvokesStopCellEditing());\n\t\t}\n\t\t\n\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t'event', evt, 'cell', state.cell));\n\t});\n\t\n\tmxEvent.addGestureListeners(shape.node,\n\t\tfunction (evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE,\n\t\t\t\tnew mxMouseEvent(evt, state));\n\t\t});\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tmxEvent.addListener(shape.node, 'touchend', function (evt)\n\t\t{\n\t\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t\t'event', evt, 'cell', state.cell));\n\t\t});\n\t}\n};\n\n/**\n * Function: createControl\n * \n * Creates the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be created.\n */\nmxCellRenderer.prototype.createControl = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar image = graph.getFoldingImage(state);\n\t\n\tif (graph.foldingEnabled && image != null)\n\t{\n\t\tif (state.control == null)\n\t\t{\n\t\t\tvar b = new mxRectangle(0, 0, image.width, image.height);\n\t\t\tstate.control = new mxImageShape(b, image.src);\n\t\t\tstate.control.preserveImageAspect = false;\n\t\t\tstate.control.dialect = graph.dialect;\n\n\t\t\tthis.initControl(state, state.control, true, this.createControlClickHandler(state));\n\t\t}\n\t}\n\telse if (state.control != null)\n\t{\n\t\tstate.control.destroy();\n\t\tstate.control = null;\n\t}\n};\n\n/**\n * Function: createControlClickHandler\n * \n * Hook for creating the click handler for the folding icon.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control click handler should be returned.\n */\nmxCellRenderer.prototype.createControlClickHandler = function(state)\n{\n\tvar graph = state.view.graph;\n\t\n\treturn mxUtils.bind(this, function (evt)\n\t{\n\t\tif (this.forceControlClickHandler || graph.isEnabled())\n\t\t{\n\t\t\tvar collapse = !graph.isCellCollapsed(state.cell);\n\t\t\tgraph.foldCells(collapse, false, [state.cell], null, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n};\n\n/**\n * Function: initControl\n * \n * Initializes the given control and returns the corresponding DOM node.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be initialized.\n * control - <mxShape> to be initialized.\n * handleEvents - Boolean indicating if mousedown and mousemove should fire events via the graph.\n * clickHandler - Optional function to implement clicks on the control.\n */\nmxCellRenderer.prototype.initControl = function(state, control, handleEvents, clickHandler)\n{\n\tvar graph = state.view.graph;\n\t\n\t// In the special case where the label is in HTML and the display is SVG the image\n\t// should go into the graph container directly in order to be clickable. Otherwise\n\t// it is obscured by the HTML label that overlaps the cell.\n\tvar isForceHtml = graph.isHtmlLabel(state.cell) && mxClient.NO_FO &&\n\t\tgraph.dialect == mxConstants.DIALECT_SVG;\n\n\tif (isForceHtml)\n\t{\n\t\tcontrol.dialect = mxConstants.DIALECT_PREFERHTML;\n\t\tcontrol.init(graph.container);\n\t\tcontrol.node.style.zIndex = 1;\n\t}\n\telse\n\t{\n\t\tcontrol.init(state.view.getOverlayPane());\n\t}\n\n\tvar node = control.innerNode || control.node;\n\t\n\t// Workaround for missing click event on iOS is to check tolerance below\n\tif (clickHandler != null && !mxClient.IS_IOS)\n\t{\n\t\tif (graph.isEnabled())\n\t\t{\n\t\t\tnode.style.cursor = 'pointer';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(node, 'click', clickHandler);\n\t}\n\t\n\tif (handleEvents)\n\t{\n\t\tvar first = null;\n\n\t\tmxEvent.addGestureListeners(node,\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tfirst = new mxPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, state));\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\n\t\t// Uses capture phase for event interception to stop bubble phase\n\t\tif (clickHandler != null && mxClient.IS_IOS)\n\t\t{\n\t\t\tnode.addEventListener('touchend', function(evt)\n\t\t\t{\n\t\t\t\tif (first != null)\n\t\t\t\t{\n\t\t\t\t\tvar tol = graph.tolerance;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(first.x - mxEvent.getClientX(evt)) < tol &&\n\t\t\t\t\t\tMath.abs(first.y - mxEvent.getClientY(evt)) < tol)\n\t\t\t\t\t{\n\t\t\t\t\t\tclickHandler.call(clickHandler, evt);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, true);\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: isShapeEvent\n * \n * Returns true if the event is for the shape of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shape fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isShapeEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: isLabelEvent\n * \n * Returns true if the event is for the label of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isLabelEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: installListeners\n * \n * Installs the event listeners for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the event listeners should be isntalled.\n */\nmxCellRenderer.prototype.installListeners = function(state)\n{\n\tvar graph = state.view.graph;\n\n\t// Workaround for touch devices routing all events for a mouse\n\t// gesture (down, move, up) via the initial DOM node. Same for\n\t// HTML images in all IE versions (VML images are working).\n\tvar getState = function(evt)\n\t{\n\t\tvar result = state;\n\t\t\n\t\tif ((graph.dialect != mxConstants.DIALECT_SVG && mxEvent.getSource(evt).nodeName == 'IMG') || mxClient.IS_TOUCH)\n\t\t{\n\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\n\t\t\t// Dispatches the drop event to the graph which\n\t\t\t// consumes and executes the source function\n\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\tmxEvent.addGestureListeners(state.shape.node,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t})\n\t);\n\t\n\t// Uses double click timeout in mxGraph for quirks mode\n\tif (graph.nativeDblClickEnabled)\n\t{\n\t\tmxEvent.addListener(state.shape.node, 'dblclick',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n};\n\n/**\n * Function: redrawLabel\n * \n * Redraws the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawLabel = function(state, forced)\n{\n\tvar graph = state.view.graph;\n\tvar value = this.getLabelValue(state);\n\tvar wrapping = graph.isWrapping(state.cell);\n\tvar clipping = graph.isLabelClipped(state.cell);\n\tvar isForceHtml = (state.view.graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\tvar dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\tvar overflow = state.style[mxConstants.STYLE_OVERFLOW] || 'visible';\n\n\tif (state.text != null && (state.text.wrap != wrapping || state.text.clipped != clipping ||\n\t\tstate.text.overflow != overflow || state.text.dialect != dialect))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\t\n\tif (state.text == null && value != null && (mxUtils.isNode(value) || value.length > 0))\n\t{\n\t\tthis.createLabel(state, value);\n\t}\n\telse if (state.text != null && (value == null || value.length == 0))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\n\tif (state.text != null)\n\t{\n\t\t// Forced is true if the style has changed, so to get the updated\n\t\t// result in getLabelBounds we apply the new style to the shape\n\t\tif (forced)\n\t\t{\n\t\t\t// Checks if a full repaint is needed\n\t\t\tif (state.text.lastValue != null && this.isTextShapeInvalid(state, state.text))\n\t\t\t{\n\t\t\t\t// Forces a full repaint\n\t\t\t\tstate.text.lastValue = null;\n\t\t\t}\n\t\t\t\n\t\t\tstate.text.resetStyles();\n\t\t\tstate.text.apply(state);\n\t\t\t\n\t\t\t// Special case where value is obtained via hook in graph\n\t\t\tstate.text.valign = graph.getVerticalAlign(state);\n\t\t}\n\t\t\n\t\tvar bounds = this.getLabelBounds(state);\n\t\tvar nextScale = this.getTextScale(state);\n\t\tthis.resolveColor(state, 'color', mxConstants.STYLE_FONTCOLOR);\n\t\t\n\t\tif (forced || state.text.value != value || state.text.isWrapping != wrapping ||\n\t\t\tstate.text.overflow != overflow || state.text.isClipping != clipping ||\n\t\t\tstate.text.scale != nextScale || state.text.dialect != dialect ||\n\t\t\tstate.text.bounds == null || !state.text.bounds.equals(bounds))\n\t\t{\n\t\t\tstate.text.dialect = dialect;\n\t\t\tstate.text.value = value;\n\t\t\tstate.text.bounds = bounds;\n\t\t\tstate.text.scale = nextScale;\n\t\t\tstate.text.wrap = wrapping;\n\t\t\tstate.text.clipped = clipping;\n\t\t\tstate.text.overflow = overflow;\n\t\t\t\n\t\t\t// Preserves visible state\n\t\t\tvar vis = state.text.node.style.visibility;\n\t\t\tthis.redrawLabelShape(state.text);\n\t\t\tstate.text.node.style.visibility = vis;\n\t\t}\n\t}\n};\n\n/**\n * Function: isTextShapeInvalid\n * \n * Returns true if the style for the text shape has changed.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be checked.\n * shape - <mxText> shape to be checked.\n */\nmxCellRenderer.prototype.isTextShapeInvalid = function(state, shape)\n{\n\tfunction check(property, stylename, defaultValue)\n\t{\n\t\tvar result = false;\n\t\t\n\t\t// Workaround for spacing added to directional spacing\n\t\tif (stylename == 'spacingTop' || stylename == 'spacingRight' ||\n\t\t\tstylename == 'spacingBottom' || stylename == 'spacingLeft')\n\t\t{\n\t\t\tresult = parseFloat(shape[property]) - parseFloat(shape.spacing) !=\n\t\t\t\t(state.style[stylename] || defaultValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = shape[property] != (state.style[stylename] || defaultValue);\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\treturn check('fontStyle', mxConstants.STYLE_FONTSTYLE, mxConstants.DEFAULT_FONTSTYLE) ||\n\t\tcheck('family', mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY) ||\n\t\tcheck('size', mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE) ||\n\t\tcheck('color', mxConstants.STYLE_FONTCOLOR, 'black') ||\n\t\tcheck('align', mxConstants.STYLE_ALIGN, '') ||\n\t\tcheck('valign', mxConstants.STYLE_VERTICAL_ALIGN, '') ||\n\t\tcheck('spacing', mxConstants.STYLE_SPACING, 2) ||\n\t\tcheck('spacingTop', mxConstants.STYLE_SPACING_TOP, 0) ||\n\t\tcheck('spacingRight', mxConstants.STYLE_SPACING_RIGHT, 0) ||\n\t\tcheck('spacingBottom', mxConstants.STYLE_SPACING_BOTTOM, 0) ||\n\t\tcheck('spacingLeft', mxConstants.STYLE_SPACING_LEFT, 0) ||\n\t\tcheck('horizontal', mxConstants.STYLE_HORIZONTAL, true) ||\n\t\tcheck('background', mxConstants.STYLE_LABEL_BACKGROUNDCOLOR) ||\n\t\tcheck('border', mxConstants.STYLE_LABEL_BORDERCOLOR) ||\n\t\tcheck('opacity', mxConstants.STYLE_TEXT_OPACITY, 100) ||\n\t\tcheck('textDirection', mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n};\n\n/**\n * Function: redrawLabelShape\n * \n * Called to invoked redraw on the given text shape.\n * \n * Parameters:\n * \n * shape - <mxText> shape to be redrawn.\n */\nmxCellRenderer.prototype.redrawLabelShape = function(shape)\n{\n\tshape.redraw();\n};\n\n/**\n * Function: getTextScale\n * \n * Returns the scaling used for the label of the given state\n * \n * Parameters:\n * \n * state - <mxCellState> whose label scale should be returned.\n */\nmxCellRenderer.prototype.getTextScale = function(state)\n{\n\treturn state.view.scale;\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds to be used to draw the label of the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be returned.\n */\nmxCellRenderer.prototype.getLabelBounds = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar scale = state.view.scale;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\tvar bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y);\n\n\tif (isEdge)\n\t{\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * scale;\n\t\tbounds.y += spacing.y * scale;\n\t\t\n\t\tvar geo = graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tbounds.width = Math.max(0, geo.width * scale);\n\t\t\tbounds.height = Math.max(0, geo.height * scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Inverts label position\n\t\tif (state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = bounds.x;\n\t\t\tbounds.x = bounds.y;\n\t\t\tbounds.y = tmp;\n\t\t}\n\t\t\n\t\tbounds.x += state.x;\n\t\tbounds.y += state.y;\n\t\t\n\t\t// Minimum of 1 fixes alignment bug in HTML labels\n\t\tbounds.width = Math.max(1, state.width);\n\t\tbounds.height = Math.max(1, state.height);\n\t}\n\n\tif (state.text.isPaintBoundsInverted())\n\t{\n\t\t// Rotates around center of state\n\t\tvar t = (state.width - state.height) / 2;\n\t\tbounds.x += t;\n\t\tbounds.y -= t;\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\n\t// Shape can modify its label bounds\n\tif (state.shape != null)\n\t{\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tif (hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tbounds = state.shape.getLabelBounds(bounds);\n\t\t}\n\t}\n\t\n\t// Label width style overrides actual label width\n\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\n\tif (lw != null)\n\t{\n\t\tbounds.width = parseFloat(lw) * scale;\n\t}\n\t\n\tif (!isEdge)\n\t{\n\t\tthis.rotateLabelBounds(state, bounds);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: rotateLabelBounds\n * \n * Adds the shape rotation to the given label bounds and\n * applies the alignment and offsets.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be rotated.\n * bounds - <mxRectangle> the rectangle to be rotated.\n */\nmxCellRenderer.prototype.rotateLabelBounds = function(state, bounds)\n{\n\tbounds.y -= state.text.margin.y * bounds.height;\n\tbounds.x -= state.text.margin.x * bounds.width;\n\t\n\tif (!this.legacySpacing || (state.style[mxConstants.STYLE_OVERFLOW] != 'fill' && state.style[mxConstants.STYLE_OVERFLOW] != 'width'))\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * s;\n\t\tbounds.y += spacing.y * s;\n\t\t\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tbounds.width = Math.max(0, bounds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (state.text.spacingLeft * s + state.text.spacingRight * s) : 0));\n\t\tbounds.height = Math.max(0, bounds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (state.text.spacingTop * s + state.text.spacingBottom * s) : 0));\n\t}\n\n\tvar theta = state.text.getTextRotation();\n\n\t// Only needed if rotated around another center\n\tif (theta != 0 && state != null && state.view.graph.model.isVertex(state.cell))\n\t{\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\t\n\t\tif (bounds.x != cx || bounds.y != cy)\n\t\t{\n\t\t\tvar rad = theta * (Math.PI / 180);\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(bounds.x, bounds.y),\n\t\t\t\t\tMath.cos(rad), Math.sin(rad), new mxPoint(cx, cy));\n\t\t\t\n\t\t\tbounds.x = pt.x;\n\t\t\tbounds.y = pt.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawCellOverlays\n * \n * Redraws the overlays for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose overlays should be redrawn.\n */\nmxCellRenderer.prototype.redrawCellOverlays = function(state, forced)\n{\n\tthis.createCellOverlays(state);\n\n\tif (state.overlays != null)\n\t{\n\t\tvar rot = mxUtils.mod(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0), 90);\n        var rad = mxUtils.toRadians(rot);\n        var cos = Math.cos(rad);\n        var sin = Math.sin(rad);\n\t\t\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tvar bounds = shape.overlay.getBounds(state);\n\t\t\n\t\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t\t{\n\t\t\t\tif (state.shape != null && rot != 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = bounds.getCenterX();\n\t\t\t\t\tvar cy = bounds.getCenterY();\n\n\t\t\t\t\tvar point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t        bounds.x = Math.round(cx - bounds.width / 2);\n\t\t\t        bounds.y = Math.round(cy - bounds.height / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (forced || shape.bounds == null || shape.scale != state.view.scale ||\n\t\t\t\t!shape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tshape.bounds = bounds;\n\t\t\t\tshape.scale = state.view.scale;\n\t\t\t\tshape.redraw();\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Function: redrawControl\n * \n * Redraws the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control should be redrawn.\n */\nmxCellRenderer.prototype.redrawControl = function(state, forced)\n{\n\tvar image = state.view.graph.getFoldingImage(state);\n\t\n\tif (state.control != null && image != null)\n\t{\n\t\tvar bounds = this.getControlBounds(state, image.width, image.height);\n\t\tvar r = (this.legacyControlPosition) ?\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0) :\n\t\t\t\tstate.shape.getTextRotation();\n\t\tvar s = state.view.scale;\n\t\t\n\t\tif (forced || state.control.scale != s || !state.control.bounds.equals(bounds) ||\n\t\t\tstate.control.rotation != r)\n\t\t{\n\t\t\tstate.control.rotation = r;\n\t\t\tstate.control.bounds = bounds;\n\t\t\tstate.control.scale = s;\n\t\t\t\n\t\t\tstate.control.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getControlBounds\n * \n * Returns the bounds to be used to draw the control (folding icon) of the\n * given state.\n */\nmxCellRenderer.prototype.getControlBounds = function(state, w, h)\n{\n\tif (state.control != null)\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\n\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t{\n\t\t\tcx = state.x + w * s;\n\t\t\tcy = state.y + h * s;\n\t\t\t\n\t\t\tif (state.shape != null)\n\t\t\t{\n\t\t\t\t// TODO: Factor out common code\n\t\t\t\tvar rot = state.shape.getShapeRotation();\n\t\t\t\t\n\t\t\t\tif (this.legacyControlPosition)\n\t\t\t\t{\n\t\t\t\t\trot = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (state.shape.isPaintBoundsInverted())\n\t\t\t\t\t{\n\t\t\t\t\t\tvar t = (state.width - state.height) / 2;\n\t\t\t\t\t\tcx += t;\n\t\t\t\t\t\tcy -= t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (rot != 0)\n\t\t\t\t{\n\t\t\t        var rad = mxUtils.toRadians(rot);\n\t\t\t        var cos = Math.cos(rad);\n\t\t\t        var sin = Math.sin(rad);\n\t\t\t        \n\t\t\t        var point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (state.view.graph.getModel().isEdge(state.cell)) ? \n\t\t\tnew mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s))\n\t\t\t: new mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: insertStateAfter\n * \n * Inserts the given array of <mxShapes> after the given nodes in the DOM.\n * \n * Parameters:\n * \n * shapes - Array of <mxShapes> to be inserted.\n * node - Node in <drawPane> after which the shapes should be inserted.\n * htmlNode - Node in the graph container after which the shapes should be inserted that\n * will not go into the <drawPane> (eg. HTML labels without foreignObjects).\n */\nmxCellRenderer.prototype.insertStateAfter = function(state, node, htmlNode)\n{\n\tvar shapes = this.getShapesForState(state);\n\t\n\tfor (var i = 0; i < shapes.length; i++)\n\t{\n\t\tif (shapes[i] != null && shapes[i].node != null)\n\t\t{\n\t\t\tvar html = shapes[i].node.parentNode != state.view.getDrawPane() &&\n\t\t\t\tshapes[i].node.parentNode != state.view.getOverlayPane();\n\t\t\tvar temp = (html) ? htmlNode : node;\n\t\t\t\n\t\t\tif (temp != null && temp.nextSibling != shapes[i].node)\n\t\t\t{\n\t\t\t\tif (temp.nextSibling == null)\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.appendChild(shapes[i].node);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.insertBefore(shapes[i].node, temp.nextSibling);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (temp == null)\n\t\t\t{\n\t\t\t\t// Special case: First HTML node should be first sibling after canvas\n\t\t\t\tif (shapes[i].node.parentNode == state.view.graph.container)\n\t\t\t\t{\n\t\t\t\t\tvar canvas = state.view.canvas;\n\t\t\t\t\t\n\t\t\t\t\twhile (canvas != null && canvas.parentNode != state.view.graph.container)\n\t\t\t\t\t{\n\t\t\t\t\t\tcanvas = canvas.parentNode;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (canvas != null && canvas.nextSibling != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (canvas.nextSibling != shapes[i].node)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, canvas.nextSibling);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tshapes[i].node.parentNode.appendChild(shapes[i].node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (shapes[i].node.parentNode != null &&\n\t\t\t\t\tshapes[i].node.parentNode.firstChild != null &&\n\t\t\t\t\tshapes[i].node.parentNode.firstChild != shapes[i].node)\n\t\t\t\t{\n\t\t\t\t\t// Inserts the node as the first child of the parent to implement the order\n\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, shapes[i].node.parentNode.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (html)\n\t\t\t{\n\t\t\t\thtmlNode = shapes[i].node;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode = shapes[i].node;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [node, htmlNode];\n};\n\n/**\n * Function: getShapesForState\n * \n * Returns the <mxShapes> for the given cell state in the order in which they should\n * appear in the DOM.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shapes should be returned.\n */\nmxCellRenderer.prototype.getShapesForState = function(state)\n{\n\treturn [state.shape, state.text, state.control];\n};\n\n/**\n * Function: redraw\n * \n * Updates the bounds or points and scale of the shapes for the given cell\n * state. This is called in mxGraphView.validatePoints as the last step of\n * updating all cells.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be updated.\n * force - Optional boolean that specifies if the cell should be reconfiured\n * and redrawn without any additional checks.\n * rendering - Optional boolean that specifies if the cell should actually\n * be drawn into the DOM. If this is false then redraw and/or reconfigure\n * will not be called on the shape.\n */\nmxCellRenderer.prototype.redraw = function(state, force, rendering)\n{\n\tvar shapeChanged = this.redrawShape(state, force, rendering);\n\n\tif (state.shape != null && (rendering == null || rendering))\n\t{\n\t\tthis.redrawLabel(state, shapeChanged);\n\t\tthis.redrawCellOverlays(state, shapeChanged);\n\t\tthis.redrawControl(state, shapeChanged);\n\t}\n};\n\n/**\n * Function: redrawShape\n * \n * Redraws the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawShape = function(state, force, rendering)\n{\n\tvar model = state.view.graph.model;\n\tvar shapeChanged = false;\n\n\t// Forces creation of new shape if shape style has changed\n\tif (state.shape != null && state.shape.style != null && state.style != null &&\n\t\tstate.shape.style[mxConstants.STYLE_SHAPE] != state.style[mxConstants.STYLE_SHAPE])\n\t{\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n\t\n\tif (state.shape == null && state.view.graph.container != null &&\n\t\tstate.cell != state.view.currentRoot &&\n\t\t(model.isVertex(state.cell) || model.isEdge(state.cell)))\n\t{\n\t\tstate.shape = this.createShape(state);\n\t\t\n\t\tif (state.shape != null)\n\t\t{\n\t\t\tstate.shape.minSvgStrokeWidth = this.minSvgStrokeWidth;\n\t\t\tstate.shape.antiAlias = this.antiAlias;\n\t\n\t\t\tthis.createIndicatorShape(state);\n\t\t\tthis.initializeShape(state);\n\t\t\tthis.createCellOverlays(state);\n\t\t\tthis.installListeners(state);\n\t\t\t\n\t\t\t// Forces a refresh of the handler if one exists\n\t\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\t}\n\t}\n\telse if (!force && state.shape != null && (!mxUtils.equalEntries(state.shape.style,\n\t\tstate.style) || this.checkPlaceholderStyles(state)))\n\t{\n\t\tstate.shape.resetStyles();\n\t\tthis.configureShape(state);\n\t\t// LATER: Ignore update for realtime to fix reset of current gesture\n\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\tforce = true;\n\t}\n\t\n\t// Updates indicator shape\n\tif (state.shape != null && state.shape.indicatorShape !=\n\t\tthis.getShape(state.view.graph.getIndicatorShape(state)))\n\t{\n\t\tif (state.shape.indicator != null)\n\t\t{\n\t\t\tstate.shape.indicator.destroy();\n\t\t\tstate.shape.indicator = null;\n\t\t}\n\t\t\n\t\tthis.createIndicatorShape(state);\n\t\t\n\t\tif (state.shape.indicatorShape != null)\n\t\t{\n\t\t\tstate.shape.indicator = new state.shape.indicatorShape();\n\t\t\tstate.shape.indicator.dialect = state.shape.dialect;\n\t\t\tstate.shape.indicator.init(state.node);\n\t\t\tforce = true;\n\t\t}\n\t}\n\n\tif (state.shape != null)\n\t{\n\t\t// Handles changes of the collapse icon\n\t\tthis.createControl(state);\n\t\t\n\t\t// Redraws the cell if required, ignores changes to bounds if points are\n\t\t// defined as the bounds are updated for the given points inside the shape\n\t\tif (force || this.isShapeInvalid(state, state.shape))\n\t\t{\n\t\t\tif (state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tstate.shape.points = state.absolutePoints.slice();\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.points = null;\n\t\t\t\tstate.shape.bounds = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\t}\n\n\t\t\tstate.shape.scale = state.view.scale;\n\t\t\t\n\t\t\tif (rendering == null || rendering)\n\t\t\t{\n\t\t\t\tthis.doRedrawShape(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.updateBoundingBox();\n\t\t\t}\n\t\t\t\n\t\t\tshapeChanged = true;\n\t\t}\n\t}\n\n\treturn shapeChanged;\n};\n\n/**\n * Function: doRedrawShape\n * \n * Invokes redraw on the shape of the given state.\n */\nmxCellRenderer.prototype.doRedrawShape = function(state)\n{\n\tstate.shape.redraw();\n};\n\n/**\n * Function: isShapeInvalid\n * \n * Returns true if the given shape must be repainted.\n */\nmxCellRenderer.prototype.isShapeInvalid = function(state, shape)\n{\n\treturn shape.bounds == null || shape.scale != state.view.scale ||\n\t\t(state.absolutePoints == null && !shape.bounds.equals(state)) ||\n\t\t(state.absolutePoints != null && !mxUtils.equalPoints(shape.points, state.absolutePoints))\n};\n\n/**\n * Function: destroy\n * \n * Destroys the shapes associated with the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be destroyed.\n */\nmxCellRenderer.prototype.destroy = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tif (state.text != null)\n\t\t{\t\t\n\t\t\tstate.text.destroy();\n\t\t\tstate.text = null;\n\t\t}\n\t\t\n\t\tif (state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\tshape.destroy();\n\t\t\t});\n\t\t\t\n\t\t\tstate.overlays = null;\n\t\t}\n\n\t\tif (state.control != null)\n\t\t{\n\t\t\tstate.control.destroy();\n\t\t\tstate.control = null;\n\t\t}\n\t\t\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n};\n\n__mxOutput.mxCellRenderer = typeof mxCellRenderer !== 'undefined' ? mxCellRenderer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEdgeStyle =\n{\n\t/**\n\t * Class: mxEdgeStyle\n\t * \n\t * Provides various edge styles to be used as the values for\n\t * <mxConstants.STYLE_EDGE> in a cell style.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * var style = stylesheet.getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;\n\t * (end)\n\t * \n\t * Sets the default edge style to <ElbowConnector>.\n\t * \n\t * Custom edge style:\n\t * \n\t * To write a custom edge style, a function must be added to the mxEdgeStyle\n\t * object as follows:\n\t * \n\t * (code)\n\t * mxEdgeStyle.MyStyle = function(state, source, target, points, result)\n\t * {\n\t *   if (source != null && target != null)\n\t *   {\n\t *     var pt = new mxPoint(target.getCenterX(), source.getCenterY());\n\t * \n\t *     if (mxUtils.contains(source, pt.x, pt.y))\n\t *     {\n\t *       pt.y = source.y + source.height;\n\t *     }\n\t * \n\t *     result.push(pt);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * In the above example, a right angle is created using a point on the\n\t * horizontal center of the target vertex and the vertical center of the source\n\t * vertex. The code checks if that point intersects the source vertex and makes\n\t * the edge straight if it does. The point is then added into the result array,\n\t * which acts as the return value of the function.\n\t *\n\t * The new edge style should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('myEdgeStyle', mxEdgeStyle.MyStyle);\n\t * (end)\n\t * \n\t * The custom edge style above can now be used in a specific edge as follows:\n\t * \n\t * (code)\n\t * model.setStyle(edge, 'edgeStyle=myEdgeStyle');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxEdgeStyle.MyStyle for the value in the\n\t * cell style above.\n\t * \n\t * Or it can be used for all edges in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.MyStyle;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * Function: EntityRelation\n\t * \n\t * Implements an entity relation style for edges (as used in database\n\t * schema diagrams). At the time the function is called, the result\n\t * array contains a placeholder (null) for the first absolute point,\n\t * that is, the point where the edge and source terminal are connected.\n\t * The implementation of the style then adds all intermediate waypoints\n\t * except for the last point, that is, the connection point between the\n\t * edge and the target terminal. The first ant the last point in the\n\t * result array are then replaced with mxPoints that take into account\n\t * the terminal's perimeter and next point on the edge.\n\t *\n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * source - <mxCellState> that represents the source terminal.\n\t * target - <mxCellState> that represents the target terminal.\n\t * points - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t */\n\t EntityRelation: function(state, source, target, points, result)\n\t {\n\t\tvar view = state.view;\n\t \tvar graph = view.graph;\n\t \tvar segment = mxUtils.getValue(state.style,\n\t \t\t\tmxConstants.STYLE_SEGMENT,\n\t \t\t\tmxConstants.ENTITY_SEGMENT) * view.scale;\n\t \t\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t \tvar isSourceLeft = false;\n\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\telse if (source != null)\n\t\t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(source, state, true, mxConstants.DIRECTION_MASK_NONE);\n\t\t\t\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisSourceLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t \tvar sourceGeometry = graph.getCellGeometry(source.cell);\n\t\t\n\t\t\t \tif (sourceGeometry.relative)\n\t\t\t \t{\n\t\t\t \t\tisSourceLeft = sourceGeometry.x <= 0.5;\n\t\t\t \t}\n\t\t\t \telse if (target != null)\n\t\t\t \t{\n\t\t\t \t\tisSourceLeft = target.x + target.width < source.x;\n\t\t\t \t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn;\n\t\t}\n\t \t\n\t \tvar isTargetLeft = true;\n\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\telse if (target != null)\n\t \t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(target, state, false, mxConstants.DIRECTION_MASK_NONE);\n\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisTargetLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t \tvar targetGeometry = graph.getCellGeometry(target.cell);\n\t\n\t\t\t \tif (targetGeometry.relative)\n\t\t\t \t{\n\t\t\t \t\tisTargetLeft = targetGeometry.x <= 0.5;\n\t\t\t \t}\n\t\t\t \telse if (source != null)\n\t\t\t \t{\n\t\t\t \t\tisTargetLeft = source.x + source.width < target.x;\n\t\t\t \t}\n\t\t\t}\n\t \t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar x0 = (isSourceLeft) ? source.x : source.x + source.width;\n\t\t\tvar y0 = view.getRoutingCenterY(source);\n\t\t\t\n\t\t\tvar xe = (isTargetLeft) ? target.x : target.x + target.width;\n\t\t\tvar ye = view.getRoutingCenterY(target);\n\t\n\t\t\tvar seg = segment;\n\t\n\t\t\tvar dx = (isSourceLeft) ? -seg : seg;\n\t\t\tvar dep = new mxPoint(x0 + dx, y0);\n\t\t\t\t\t\n\t\t\tdx = (isTargetLeft) ? -seg : seg;\n\t\t\tvar arr = new mxPoint(xe + dx, ye);\n\t\n\t\t\t// Adds intermediate points if both go out on same side\n\t\t\tif (isSourceLeft == isTargetLeft)\n\t\t\t{\n\t\t\t\tvar x = (isSourceLeft) ?\n\t\t\t\t\tMath.min(x0, xe)-segment :\n\t\t\t\t\tMath.max(x0, xe)+segment;\n\t\n\t\t\t\tresult.push(new mxPoint(x, y0));\n\t\t\t\tresult.push(new mxPoint(x, ye));\n\t\t\t}\n\t\t\telse if ((dep.x < arr.x) == isSourceLeft)\n\t\t\t{\n\t\t\t\tvar midY = y0 + (ye - y0) / 2;\n\t\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(new mxPoint(dep.x, midY));\n\t\t\t\tresult.push(new mxPoint(arr.x, midY));\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t}\n\t },\n\n\t /**\n\t * Function: Loop\n\t * \n\t * Implements a self-reference, aka. loop.\n\t */\n\tLoop: function(state, source, target, points, result)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tif (points != null && points.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pt = points[i];\n\t\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\tresult.push(new mxPoint(pt.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tvar view = state.view;\n\t\t\tvar graph = view.graph;\n\t\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tif (mxUtils.contains(source, pt.x, pt.y))\n\t\t\t\t{\n\t\t\t\t\tpt = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = 0;\n\t\t\tvar dx = 0;\n\t\t\tvar y = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t \tvar seg = mxUtils.getValue(state.style, mxConstants.STYLE_SEGMENT,\n\t\t \t\tgraph.gridSize) * view.scale;\n\t\t\tvar dir = mxUtils.getValue(state.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_WEST);\n\t\t\t\n\t\t\tif (dir == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdir == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = seg;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ty = view.getRoutingCenterY(source);\n\t\t\t\tdy = seg;\n\t\t\t}\n\t\t\t\n\t\t\tif (pt == null ||\n\t\t\t\tpt.x < source.x ||\n\t\t\t\tpt.x > source.x + source.width)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tx = pt.x;\n\t\t\t\t\tdy = Math.max(Math.abs(y - pt.y), dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y - 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y + source.height + 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_EAST)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x - 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x + source.width + 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (pt != null)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = Math.max(Math.abs(x - pt.x), dy);\n\t\t\t\ty = pt.y;\n\t\t\t\tdy = 0;\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(x - dx, y - dy));\n\t\t\tresult.push(new mxPoint(x + dx, y + dy));\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: ElbowConnector\n\t * \n\t * Uses either <SideToSide> or <TopToBottom> depending on the horizontal\n\t * flag in the cell style. <SideToSide> is used if horizontal is true or\n\t * unspecified. See <EntityRelation> for a description of the\n\t * parameters.\n\t */\n\tElbowConnector: function(state, source, target, points, result)\n\t{\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\tvar vertical = false;\n\t\tvar horizontal = false;\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar left = Math.min(source.x, target.x);\n\t\t\t\tvar right = Math.max(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\n\t\t\t\tvar top = Math.min(source.y, target.y);\n\t\t\t\tvar bottom = Math.max(source.y + source.height,\n\t\t\t\t\ttarget.y + target.height);\n\n\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tvertical = pt.y < top || pt.y > bottom;\n\t\t\t\thorizontal = pt.x < left || pt.x > right;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar left = Math.max(source.x, target.x);\n\t\t\t\tvar right = Math.min(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\t\t\t\t\n\t\t\t\tvertical = left == right;\n\t\t\t\t\n\t\t\t\tif (!vertical)\n\t\t\t\t{\n\t\t\t\t\tvar top = Math.max(source.y, target.y);\n\t\t\t\t\tvar bottom = Math.min(source.y + source.height,\n\t\t\t\t\t\ttarget.y + target.height);\n\t\t\t\t\t\t\n\t\t\t\t\thorizontal = top == bottom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!horizontal && (vertical ||\n\t\t\tstate.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL))\n\t\t{\n\t\t\tmxEdgeStyle.TopToBottom(state, source, target, points, result);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxEdgeStyle.SideToSide(state, source, target, points, result);\n\t\t}\n\t},\n\n\t/**\n\t * Function: SideToSide\n\t * \n\t * Implements a vertical elbow edge. See <EntityRelation> for a description\n\t * of the parameters.\n\t */\n\tSideToSide: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\n\t\t\tvar x = (pt != null) ? pt.x : Math.round(r + (l - r) / 2);\n\t\n\t\t\tvar y1 = view.getRoutingCenterY(source);\n\t\t\tvar y2 = view.getRoutingCenterY(target);\n\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tif (pt.y >= source.y && pt.y <= source.y + source.height)\n\t\t\t\t{\n\t\t\t\t\ty1 = pt.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (pt.y >= target.y && pt.y <= target.y + target.height)\n\t\t\t\t{\n\t\t\t\t\ty2 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y1) &&\n\t\t\t\t!mxUtils.contains(source, x, y1))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x,  y1));\n\t\t\t}\n\t\n\t\t\tif (!mxUtils.contains(target, x, y2) &&\n\t\t\t\t!mxUtils.contains(source, x, y2))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y2));\n\t\t\t}\n\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, x, pt.y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, x, pt.y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(x, pt.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\n\t\t\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(x, t + (b - t) / 2));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: TopToBottom\n\t * \n\t * Implements a horizontal elbow edge. See <EntityRelation> for a\n\t * description of the parameters.\n\t */\n\tTopToBottom: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\n\t\t\tvar x = view.getRoutingCenterX(source);\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= source.x &&\n\t\t\t\tpt.x <= source.x + source.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\t\n\t\t\tvar y = (pt != null) ? pt.y : Math.round(b + (t - b) / 2);\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= target.x &&\n\t\t\t\tpt.x <= target.x + target.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(target);\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null && result.length == 1)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, pt.x, y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, pt.x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(pt.x, y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(l + (r - l) / 2, y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: SegmentConnector\n\t * \n\t * Implements an orthogonal edge style. Use <mxEdgeSegmentHandler>\n\t * as an interactive handler for this style.\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * sourceScaled - <mxCellState> that represents the source terminal.\n\t * targetScaled - <mxCellState> that represents the target terminal.\n\t * controlHints - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t *\n\t */\n\tSegmentConnector: function(state, sourceScaled, targetScaled, controlHints, result)\n\t{\n\t\t// Creates array of all way- and terminalpoints\n\t\tvar pts = mxEdgeStyle.scalePointArray(state.absolutePoints, state.view.scale);\n\t\tvar source = mxEdgeStyle.scaleCellState(sourceScaled, state.view.scale);\n\t\tvar target = mxEdgeStyle.scaleCellState(targetScaled, state.view.scale);\n\t\tvar tol = 1;\n\t\t\n\t\t// Whether the first segment outgoing from the source end is horizontal\n\t\tvar lastPushed = (result.length > 0) ? result[0] : null;\n\t\tvar horizontal = true;\n\t\tvar hint = null;\n\t\t\n\t\t// Adds waypoints only if outside of tolerance\n\t\tfunction pushPoint(pt)\n\t\t{\n\t\t\tpt.x = Math.round(pt.x * state.view.scale * 10) / 10;\n\t\t\tpt.y = Math.round(pt.y * state.view.scale * 10) / 10;\n\n\t\t\tif (lastPushed == null || Math.abs(lastPushed.x - pt.x) >= tol || Math.abs(lastPushed.y - pt.y) >= Math.max(1, state.view.scale))\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t\tlastPushed = pt;\n\t\t\t}\n\t\t\t\n\t\t\treturn lastPushed;\n\t\t};\n\n\t\t// Adds the first point\n\t\tvar pt = pts[0];\n\t\t\n\t\tif (pt == null && source != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(source), state.view.getRoutingCenterY(source));\n\t\t}\n\t\telse if (pt != null)\n\t\t{\n\t\t\tpt = pt.clone();\n\t\t}\n\t\t\n\t\tvar lastInx = pts.length - 1;\n\n\t\t// Adds the waypoints\n\t\tif (controlHints != null && controlHints.length > 0)\n\t\t{\n\t\t\t// Converts all hints and removes nulls\n\t\t\tvar hints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < controlHints.length; i++)\n\t\t\t{\n\t\t\t\tvar tmp = state.view.transformControlPoint(state, controlHints[i], true);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\thints.push(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (hints.length == 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Aligns source and target hint to fixed points\n\t\t\tif (pt != null && hints[0] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[0].x - pt.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].x = pt.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[0].y - pt.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].y = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pe = pts[lastInx];\n\t\t\t\n\t\t\tif (pe != null && hints[hints.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[hints.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[hints.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\thint = hints[0];\n\n\t\t\tvar currentTerm = source;\n\t\t\tvar currentPt = pts[0];\n\t\t\tvar hozChan = false;\n\t\t\tvar vertChan = false;\n\t\t\tvar currentHint = hint;\n\t\t\t\n\t\t\tif (currentPt != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Check for alignment with fixed points and with channels\n\t\t\t// at source and target segments only\n\t\t\tfor (var i = 0; i < 2; i++)\n\t\t\t{\n\t\t\t\tvar fixedVertAlign = currentPt != null && currentPt.x == currentHint.x;\n\t\t\t\tvar fixedHozAlign = currentPt != null && currentPt.y == currentHint.y;\n\t\t\t\t\n\t\t\t\tvar inHozChan = currentTerm != null && (currentHint.y >= currentTerm.y &&\n\t\t\t\t\t\tcurrentHint.y <= currentTerm.y + currentTerm.height);\n\t\t\t\tvar inVertChan = currentTerm != null && (currentHint.x >= currentTerm.x &&\n\t\t\t\t\t\tcurrentHint.x <= currentTerm.x + currentTerm.width);\n\n\t\t\t\thozChan = fixedHozAlign || (currentPt == null && inHozChan);\n\t\t\t\tvertChan = fixedVertAlign || (currentPt == null && inVertChan);\n\t\t\t\t\n\t\t\t\t// If the current hint falls in both the hor and vert channels in the case\n\t\t\t\t// of a floating port, or if the hint is exactly co-incident with a \n\t\t\t\t// fixed point, ignore the source and try to work out the orientation\n\t\t\t\t// from the target end\n\t\t\t\tif (i==0 && ((hozChan && vertChan) || (fixedVertAlign && fixedHozAlign)))\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (currentPt != null && (!fixedHozAlign && !fixedVertAlign) && (inHozChan || inVertChan)) \n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = inHozChan ? false : true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\tif (vertChan || hozChan)\n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = hozChan;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (i == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Work back from target end\n\t\t\t\t\t\t\thorizontal = hints.length % 2 == 0 ? hozChan : vertChan;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentTerm = target;\n\t\t\t\tcurrentPt = pts[lastInx];\n\t\t\t\t\n\t\t\t\tif (currentPt != null)\n\t\t\t\t{\n\t\t\t\t\tcurrentTerm = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentHint = hints[hints.length - 1];\n\t\t\t\t\n\t\t\t\tif (fixedVertAlign && fixedHozAlign)\n\t\t\t\t{\n\t\t\t\t\thints = hints.slice(1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (horizontal && ((pts[0] != null && pts[0].y != hint.y) ||\n\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t(hint.y < source.y || hint.y > source.y + source.height))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t}\n\t\t\telse if (!horizontal && ((pts[0] != null && pts[0].x != hint.x) ||\n\t\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t\t(hint.x < source.x || hint.x > source.x + source.width))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal)\n\t\t\t{\n\t\t\t\tpt.y = hint.y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpt.x = hint.x;\n\t\t\t}\n\t\t\n\t\t\tfor (var i = 0; i < hints.length; i++)\n\t\t\t{\n\t\t\t\thorizontal = !horizontal;\n\t\t\t\thint = hints[i];\n\t\t\t\t\n//\t\t\t\tmxLog.show();\n//\t\t\t\tmxLog.debug('hint', i, hint.x, hint.y);\n\t\t\t\t\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tpt.y = hint.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpt.x = hint.x;\n\t\t\t\t}\n\t\t\n\t\t\t\tpushPoint(pt.clone());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\thint = pt;\n\t\t\t// FIXME: First click in connect preview toggles orientation\n\t\t\thorizontal = true;\n\t\t}\n\n\t\t// Adds the last point\n\t\tpt = pts[lastInx];\n\n\t\tif (pt == null && target != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(target), state.view.getRoutingCenterY(target));\n\t\t}\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tif (hint != null)\n\t\t\t{\n\t\t\t\tif (horizontal && ((pts[lastInx] != null && pts[lastInx].y != hint.y) ||\n\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t(hint.y < target.y || hint.y > target.y + target.height))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t\t}\n\t\t\t\telse if (!horizontal && ((pts[lastInx] != null && pts[lastInx].x != hint.x) ||\n\t\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t\t(hint.x < target.x || hint.x > target.x + target.width))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the source terminal for floating ports\n\t\tif (pts[0] == null && source != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[1] != null &&\n\t\t\t\tmxUtils.contains(source, result[1].x, result[1].y))\n\t\t\t{\n\t\t\t\tresult.splice(1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the target terminal\n\t\tif (pts[lastInx] == null && target != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[result.length - 1] != null &&\n\t\t\t\tmxUtils.contains(target, result[result.length - 1].x, result[result.length - 1].y))\n\t\t\t{\n\t\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes last point if inside tolerance with end point\n\t\tif (pe != null && result[result.length - 1] != null &&\n\t\t\tMath.abs(pe.x - result[result.length - 1].x) <= tol &&\n\t\t\tMath.abs(pe.y - result[result.length - 1].y) <= tol)\n\t\t{\n\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t\n\t\t\t// Lines up second last point in result with end point\n\t\t\tif (result[result.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(result[result.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(result[result.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\n\torthBuffer: 10,\n\t\n\torthPointsFallback: true,\n\n\tdirVectors: [ [ -1, 0 ],\n\t\t\t[ 0, -1 ], [ 1, 0 ], [ 0, 1 ], [ -1, 0 ], [ 0, -1 ], [ 1, 0 ] ],\n\n\twayPoints1: [ [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0], [ 0, 0],  [ 0, 0],\n\t              [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0] ],\n\n\troutePatterns: [\n\t\t[ [ 513, 2308, 2081, 2562 ], [ 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 513, 1090, 514, 2564, 2184, 2562 ],\n\t\t\t[ 513, 2308, 2561, 1090, 514, 2568, 2308 ] ],\n\t[ [ 514, 1057, 513, 2308, 2081, 2562 ], [ 514, 2184, 2114, 2561 ],\n\t\t\t[ 514, 2184, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 514, 1057, 513, 2568, 2308, 2561 ] ],\n\t[ [ 1090, 514, 1057, 513, 2308, 2081, 2562 ], [ 2114, 2561 ],\n\t\t\t[ 1090, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 1090, 514, 1057, 513, 2308, 2561, 2568 ] ],\n\t[ [ 2081, 2562 ], [ 1057, 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 1057, 513, 1090, 514, 2184, 2562, 2564 ],\n\t\t\t[ 1057, 2561, 1090, 514, 2568, 2308 ] ] ],\n\t\n\tinlineRoutePatterns: [\n\t\t\t[ null, [ 2114, 2568 ], null, null ],\n\t\t\t[ null, [ 514, 2081, 2114, 2568 ] , null, null ],\n\t\t\t[ null, [ 2114, 2561 ], null, null ],\n\t\t\t[ [ 2081, 2562 ], [ 1057, 2114, 2568 ],\n\t\t\t\t\t[ 2184, 2562 ],\n\t\t\t\t\tnull ] ],\n\tvertexSeperations: [],\n\n\tlimits: [\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ],\n\n\tLEFT_MASK: 32,\n\n\tTOP_MASK: 64,\n\n\tRIGHT_MASK: 128,\n\n\tBOTTOM_MASK: 256,\n\n\tLEFT: 1,\n\n\tTOP: 2,\n\n\tRIGHT: 4,\n\n\tBOTTOM: 8,\n\n\t// TODO remove magic numbers\n\tSIDE_MASK: 480,\n\t//mxEdgeStyle.LEFT_MASK | mxEdgeStyle.TOP_MASK | mxEdgeStyle.RIGHT_MASK\n\t//| mxEdgeStyle.BOTTOM_MASK,\n\n\tCENTER_MASK: 512,\n\n\tSOURCE_MASK: 1024,\n\n\tTARGET_MASK: 2048,\n\n\tVERTEX_MASK: 3072,\n\t// mxEdgeStyle.SOURCE_MASK | mxEdgeStyle.TARGET_MASK,\n\t\n\tgetJettySize: function(state, isSource)\n\t{\n\t\tvar value = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_SOURCE_JETTY_SIZE :\n\t\t\tmxConstants.STYLE_TARGET_JETTY_SIZE, mxUtils.getValue(state.style,\n\t\t\t\t\tmxConstants.STYLE_JETTY_SIZE, mxEdgeStyle.orthBuffer));\n\t\t\n\t\tif (value == 'auto')\n\t\t{\n\t\t\t// Computes the automatic jetty size\n\t\t\tvar type = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW, mxConstants.NONE);\n\t\t\t\n\t\t\tif (type != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tvar size = mxUtils.getNumber(state.style, (isSource) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\t\tvalue = Math.max(2, Math.ceil((size + mxEdgeStyle.orthBuffer) / mxEdgeStyle.orthBuffer)) * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvalue = 2 * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: scalePointArray\n\t * \n\t * Scales an array of <mxPoint>\n\t * \n\t * Parameters:\n\t * \n\t * points - array of <mxPoint> to scale\n\t * scale - the scaling to divide by\n\t * \n\t */\n\tscalePointArray: function(points, scale)\n\t{\n\t\tvar result = [];\n\n\t\tif (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = new mxPoint(Math.round(points[i].x / scale * 10) / 10,\n\t\t\t\t\t\t\t\t\t\tMath.round(points[i].y / scale * 10) / 10);\n\t\t\t\t\tresult[i] = pt;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult[i] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = null;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: scaleCellState\n\t * \n\t * Scales an <mxCellState>\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> to scale\n\t * scale - the scaling to divide by\n\t * \n\t */\n\tscaleCellState: function(state, scale)\n\t{\n\t\tvar result = null;\n\n\t\tif (state != null)\n\t\t{\n\t\t\tresult = state.clone();\n\t\t\tresult.setRect(Math.round(state.x / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.y / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.width / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.height / scale * 10) / 10);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = null;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: OrthConnector\n\t * \n\t * Implements a local orthogonal router between the given\n\t * cells.\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * sourceScaled - <mxCellState> that represents the source terminal.\n\t * targetScaled - <mxCellState> that represents the target terminal.\n\t * controlHints - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t * \n\t */\n\tOrthConnector: function(state, sourceScaled, targetScaled, controlHints, result)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar sourceEdge = source == null ? false : graph.getModel().isEdge(source.cell);\n\t\tvar targetEdge = target == null ? false : graph.getModel().isEdge(target.cell);\n\n\t\tvar pts = mxEdgeStyle.scalePointArray(state.absolutePoints, state.view.scale);\n\t\tvar source = mxEdgeStyle.scaleCellState(sourceScaled, state.view.scale);\n\t\tvar target = mxEdgeStyle.scaleCellState(targetScaled, state.view.scale);\n\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tvar sourceX = source != null ? source.x : p0.x;\n\t\tvar sourceY = source != null ? source.y : p0.y;\n\t\tvar sourceWidth = source != null ? source.width : 0;\n\t\tvar sourceHeight = source != null ? source.height : 0;\n\t\t\n\t\tvar targetX = target != null ? target.x : pe.x;\n\t\tvar targetY = target != null ? target.y : pe.y;\n\t\tvar targetWidth = target != null ? target.width : 0;\n\t\tvar targetHeight = target != null ? target.height : 0;\n\n\t\tvar sourceBuffer = mxEdgeStyle.getJettySize(state, true);\n\t\tvar targetBuffer = mxEdgeStyle.getJettySize(state, false);\n\t\t\n\t\t//console.log('sourceBuffer', sourceBuffer);\n\t\t//console.log('targetBuffer', targetBuffer);\n\t\t// Workaround for loop routing within buffer zone\n\t\tif (source != null && target == source)\n\t\t{\n\t\t\ttargetBuffer = Math.max(sourceBuffer, targetBuffer);\n\t\t\tsourceBuffer = targetBuffer;\n\t\t}\n\t\t\n\t\tvar totalBuffer = targetBuffer + sourceBuffer;\n\t\t// console.log('totalBuffer', totalBuffer);\n\t\tvar tooShort = false;\n\t\t\n\t\t// Checks minimum distance for fixed points and falls back to segment connector\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\n\t\t\ttooShort = dx * dx + dy * dy < totalBuffer * totalBuffer;\n\t\t}\n\n\t\tif (tooShort || (mxEdgeStyle.orthPointsFallback && (controlHints != null &&\n\t\t\t\tcontrolHints.length > 0)) || sourceEdge || targetEdge)\n\t\t{\n\t\t\tmxEdgeStyle.SegmentConnector(state, sourceScaled, targetScaled, controlHints, result);\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine the side(s) of the source and target vertices\n\t\t// that the edge may connect to\n\t\t// portConstraint [source, target]\n\t\tvar portConstraint = [mxConstants.DIRECTION_MASK_ALL, mxConstants.DIRECTION_MASK_ALL];\n\t\tvar rotation = 0;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tportConstraint[0] = mxUtils.getPortConstraints(source, state, true, \n\t\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(source.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\t//console.log('source rotation', rotation);\n\t\t\t\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(sourceX, sourceY, sourceWidth, sourceHeight), rotation);\n\t\t\t\tsourceX = newRect.x; \n\t\t\t\tsourceY = newRect.y;\n\t\t\t\tsourceWidth = newRect.width;\n\t\t\t\tsourceHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\tif (target != null)\n\t\t{\n\t\t\tportConstraint[1] = mxUtils.getPortConstraints(target, state, false,\n\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(target.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\t//console.log('target rotation', rotation);\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(targetX, targetY, targetWidth, targetHeight), rotation);\n\t\t\t\ttargetX = newRect.x;\n\t\t\t\ttargetY = newRect.y;\n\t\t\t\ttargetWidth = newRect.width;\n\t\t\t\ttargetHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\t//console.log('source' , sourceX, sourceY, sourceWidth, sourceHeight);\n\t\t//console.log('targetX' , targetX, targetY, targetWidth, targetHeight);\n\n\t\tvar dir = [0, 0];\n\n\t\t// Work out which faces of the vertices present against each other\n\t\t// in a way that would allow a 3-segment connection if port constraints\n\t\t// permitted.\n\t\t// geo -> [source, target] [x, y, width, height]\n\t\tvar geo = [ [sourceX, sourceY, sourceWidth, sourceHeight] ,\n\t\t            [targetX, targetY, targetWidth, targetHeight] ];\n\t\tvar buffer = [sourceBuffer, targetBuffer];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tmxEdgeStyle.limits[i][1] = geo[i][0] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][2] = geo[i][1] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][4] = geo[i][0] + geo[i][2] + buffer[i];\n\t\t\tmxEdgeStyle.limits[i][8] = geo[i][1] + geo[i][3] + buffer[i];\n\t\t}\n\t\t\n\t\t// Work out which quad the target is in\n\t\tvar sourceCenX = geo[0][0] + geo[0][2] / 2.0;\n\t\tvar sourceCenY = geo[0][1] + geo[0][3] / 2.0;\n\t\tvar targetCenX = geo[1][0] + geo[1][2] / 2.0;\n\t\tvar targetCenY = geo[1][1] + geo[1][3] / 2.0;\n\t\t\n\t\tvar dx = sourceCenX - targetCenX;\n\t\tvar dy = sourceCenY - targetCenY;\n\n\t\tvar quad = 0;\n\n\t\t// 0 | 1\n\t\t// -----\n\t\t// 3 | 2\n\t\t\n\t\tif (dx < 0)\n\t\t{\n\t\t\tif (dy < 0)\n\t\t\t{\n\t\t\t\tquad = 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (dy <= 0)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\t// Special case on x = 0 and negative y\n\t\t\t\tif (dx == 0)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//console.log('quad', quad);\n\n\t\t// Check for connection constraints\n\t\tvar currentTerm = null;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tcurrentTerm = p0;\n\t\t}\n\n\t\tvar constraint = [ [0.5, 0.5] , [0.5, 0.5] ];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (currentTerm != null)\n\t\t\t{\n\t\t\t\tconstraint[i][0] = (currentTerm.x - geo[i][0]) / geo[i][2];\n\t\t\t\t\n\t\t\t\tif (Math.abs(currentTerm.x - geo[i][0]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.x - geo[i][0] - geo[i][2]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t}\n\n\t\t\t\tconstraint[i][1] = (currentTerm.y - geo[i][1]) / geo[i][3];\n\n\t\t\t\tif (Math.abs(currentTerm.y - geo[i][1]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.y - geo[i][1] - geo[i][3]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrentTerm = null;\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = pe;\n\t\t\t}\n\t\t}\n\n\t\tvar sourceTopDist = geo[0][1] - (geo[1][1] + geo[1][3]);\n\t\tvar sourceLeftDist = geo[0][0] - (geo[1][0] + geo[1][2]);\n\t\tvar sourceBottomDist = geo[1][1] - (geo[0][1] + geo[0][3]);\n\t\tvar sourceRightDist = geo[1][0] - (geo[0][0] + geo[0][2]);\n\n\t\tmxEdgeStyle.vertexSeperations[1] = Math.max(sourceLeftDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[2] = Math.max(sourceTopDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[4] = Math.max(sourceBottomDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[3] = Math.max(sourceRightDist - totalBuffer, 0);\n\t\t\t\t\n\t\t//==============================================================\n\t\t// Start of source and target direction determination\n\n\t\t// Work through the preferred orientations by relative positioning\n\t\t// of the vertices and list them in preferred and available order\n\t\t\n\t\tvar dirPref = [];\n\t\tvar horPref = [];\n\t\tvar vertPref = [];\n\n\t\thorPref[0] = (sourceLeftDist >= sourceRightDist) ? mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t: mxConstants.DIRECTION_MASK_EAST;\n\t\tvertPref[0] = (sourceTopDist >= sourceBottomDist) ? mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t: mxConstants.DIRECTION_MASK_SOUTH;\n\n\t\thorPref[1] = mxUtils.reversePortConstraints(horPref[0]);\n\t\tvertPref[1] = mxUtils.reversePortConstraints(vertPref[0]);\n\t\t\n\t\tvar preferredHorizDist = sourceLeftDist >= sourceRightDist ? sourceLeftDist\n\t\t\t\t: sourceRightDist;\n\t\tvar preferredVertDist = sourceTopDist >= sourceBottomDist ? sourceTopDist\n\t\t\t\t: sourceBottomDist;\n\n\t\tvar prefOrdering = [ [0, 0] , [0, 0] ];\n\t\tvar preferredOrderSet = false;\n\n\t\t// If the preferred port isn't available, switch it\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((horPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\thorPref[i] = mxUtils.reversePortConstraints(horPref[i]);\n\t\t\t}\n\n\t\t\tif ((vertPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tvertPref[i] = mxUtils\n\t\t\t\t\t\t.reversePortConstraints(vertPref[i]);\n\t\t\t}\n\n\t\t\tprefOrdering[i][0] = vertPref[i];\n\t\t\tprefOrdering[i][1] = horPref[i];\n\t\t}\n\n\t\tif (preferredVertDist > 0\n\t\t\t\t&& preferredHorizDist > 0)\n\t\t{\n\t\t\t// Possibility of two segment edge connection\n\t\t\tif (((horPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((vertPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t\telse if (((vertPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((horPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (preferredVertDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\tpreferredOrderSet = true;\n\n\t\t}\n\t\t\n\t\tif (preferredHorizDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\tpreferredOrderSet = true;\n\t\t}\n\n\t\t// The source and target prefs are now an ordered list of\n\t\t// the preferred port selections\n\t\t// If the list contains gaps, compact it\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((prefOrdering[i][0] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tprefOrdering[i][0] = prefOrdering[i][1];\n\t\t\t}\n\n\t\t\tdirPref[i] = prefOrdering[i][0] & portConstraint[i];\n\t\t\tdirPref[i] |= (prefOrdering[i][1] & portConstraint[i]) << 8;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][i] & portConstraint[i]) << 16;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][1 - i] & portConstraint[i]) << 24;\n\n\t\t\tif ((dirPref[i] & 0xF) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = dirPref[i] << 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF00) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xF) | dirPref[i] >> 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF0000) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xFFFF)\n\t\t\t\t\t\t| ((dirPref[i] & 0xF000000) >> 8);\n\t\t\t}\n\n\t\t\tdir[i] = dirPref[i] & 0xF;\n\n\t\t\tif (portConstraint[i] == mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_EAST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_SOUTH)\n\t\t\t{\n\t\t\t\tdir[i] = portConstraint[i];\n\t\t\t}\n\t\t}\n\n\t\t//==============================================================\n\t\t// End of source and target direction determination\n\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\t\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar routePattern = mxEdgeStyle.routePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\n\t\t//console.log('routePattern', routePattern);\n\n\t\tmxEdgeStyle.wayPoints1[0][0] = geo[0][0];\n\t\tmxEdgeStyle.wayPoints1[0][1] = geo[0][1];\n\n\t\tswitch (dir[0])\n\t\t{\n\t\t\tcase mxConstants.DIRECTION_MASK_WEST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] -= sourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_SOUTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += geo[0][3] + sourceBuffer;\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_EAST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += geo[0][2] + sourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_NORTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] -= sourceBuffer;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar currentIndex = 0;\n\n\t\t// Orientation, 0 horizontal, 1 vertical\n\t\tvar lastOrientation = (dir[0] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t: 1;\n\t\tvar initialOrientation = lastOrientation;\n\t\tvar currentOrientation = 0;\n\n\t\tfor (var i = 0; i < routePattern.length; i++)\n\t\t{\n\t\t\tvar nextDirection = routePattern[i] & 0xF;\n\n\t\t\t// Rotate the index of this direction by the quad\n\t\t\t// to get the real direction\n\t\t\tvar directionIndex = nextDirection == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t\t: nextDirection;\n\n\t\t\tdirectionIndex += quad;\n\n\t\t\tif (directionIndex > 4)\n\t\t\t{\n\t\t\t\tdirectionIndex -= 4;\n\t\t\t}\n\n\t\t\tvar direction = mxEdgeStyle.dirVectors[directionIndex - 1];\n\n\t\t\tcurrentOrientation = (directionIndex % 2 > 0) ? 0 : 1;\n\t\t\t// Only update the current index if the point moved\n\t\t\t// in the direction of the current segment move,\n\t\t\t// otherwise the same point is moved until there is \n\t\t\t// a segment direction change\n\t\t\tif (currentOrientation != lastOrientation)\n\t\t\t{\n\t\t\t\tcurrentIndex++;\n\t\t\t\t// Copy the previous way point into the new one\n\t\t\t\t// We can't base the new position on index - 1\n\t\t\t\t// because sometime elbows turn out not to exist,\n\t\t\t\t// then we'd have to rewind.\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] = mxEdgeStyle.wayPoints1[currentIndex - 1][0];\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] = mxEdgeStyle.wayPoints1[currentIndex - 1][1];\n\t\t\t}\n\n\t\t\tvar tar = (routePattern[i] & mxEdgeStyle.TARGET_MASK) > 0;\n\t\t\tvar sou = (routePattern[i] & mxEdgeStyle.SOURCE_MASK) > 0;\n\t\t\tvar side = (routePattern[i] & mxEdgeStyle.SIDE_MASK) >> 5;\n\t\t\tside = side << quad;\n\n\t\t\tif (side > 0xF)\n\t\t\t{\n\t\t\t\tside = side >> 4;\n\t\t\t}\n\n\t\t\tvar center = (routePattern[i] & mxEdgeStyle.CENTER_MASK) > 0;\n\n\t\t\tif ((sou || tar) && side < 9)\n\t\t\t{\n\t\t\t\tvar limit = 0;\n\t\t\t\tvar souTar = sou ? 0 : 1;\n\n\t\t\t\tif (center && currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][0] + constraint[souTar][0] * geo[souTar][2];\n\t\t\t\t}\n\t\t\t\telse if (center)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][1] + constraint[souTar][1] * geo[souTar][3];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlimit = mxEdgeStyle.limits[souTar][side];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tvar lastX = mxEdgeStyle.wayPoints1[currentIndex][0];\n\t\t\t\t\tvar deltaX = (limit - lastX) * direction[0];\n\n\t\t\t\t\tif (deltaX > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t\t\t* deltaX;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar lastY = mxEdgeStyle.wayPoints1[currentIndex][1];\n\t\t\t\t\tvar deltaY = (limit - lastY) * direction[1];\n\n\t\t\t\t\tif (deltaY > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t\t\t* deltaY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (center)\n\t\t\t{\n\t\t\t\t// Which center we're travelling to depend on the current direction\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t}\n\n\t\t\tif (currentIndex > 0\n\t\t\t\t\t&& mxEdgeStyle.wayPoints1[currentIndex][currentOrientation] == mxEdgeStyle.wayPoints1[currentIndex - 1][currentOrientation])\n\t\t\t{\n\t\t\t\tcurrentIndex--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlastOrientation = currentOrientation;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i <= currentIndex; i++)\n\t\t{\n\t\t\tif (i == currentIndex)\n\t\t\t{\n\t\t\t\t// Last point can cause last segment to be in\n\t\t\t\t// same direction as jetty/approach. If so,\n\t\t\t\t// check the number of points is consistent\n\t\t\t\t// with the relative orientation of source and target\n\t\t\t\t// jx. Same orientation requires an even\n\t\t\t\t// number of turns (points), different requires\n\t\t\t\t// odd.\n\t\t\t\tvar targetOrientation = (dir[1] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t\t\t: 1;\n\t\t\t\tvar sameOrient = targetOrientation == initialOrientation ? 0 : 1;\n\n\t\t\t\t// (currentIndex + 1) % 2 is 0 for even number of points,\n\t\t\t\t// 1 for odd\n\t\t\t\tif (sameOrient != (currentIndex + 1) % 2)\n\t\t\t\t{\n\t\t\t\t\t// The last point isn't required\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(Math.round(mxEdgeStyle.wayPoints1[i][0] * state.view.scale * 10) / 10,\n\t\t\t\t\t\t\t\t\tMath.round(mxEdgeStyle.wayPoints1[i][1] * state.view.scale * 10) / 10));\n\t\t}\n\t\t\n\t\t//console.log(result);\n\n\t\t// Removes duplicates\n\t\tvar index = 1;\n\t\t\n\t\twhile (index < result.length)\n\t\t{\n\t\t\tif (result[index - 1] == null || result[index] == null ||\n\t\t\t\tresult[index - 1].x != result[index].x ||\n\t\t\t\tresult[index - 1].y != result[index].y)\n\t\t\t{\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.splice(index, 1);\n\t\t\t}\n\t\t}\n\t},\n\t\n\tgetRoutePattern: function(dir, quad, dx, dy)\n\t{\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar result = routePatterns[sourceIndex - 1][targetIndex - 1];\n\n\t\tif (dx == 0 || dy == 0)\n\t\t{\n\t\t\tif (inlineRoutePatterns[sourceIndex - 1][targetIndex - 1] != null)\n\t\t\t{\n\t\t\t\tresult = inlineRoutePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n__mxOutput.mxEdgeStyle = typeof mxEdgeStyle !== 'undefined' ? mxEdgeStyle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxStyleRegistry =\n{\n\t/**\n\t * Class: mxStyleRegistry\n\t *\n\t * Singleton class that acts as a global converter from string to object values\n\t * in a style. This is currently only used to perimeters and edge styles.\n\t * \n\t * Variable: values\n\t *\n\t * Maps from strings to objects.\n\t */\n\tvalues: [],\n\n\t/**\n\t * Function: putValue\n\t *\n\t * Puts the given object into the registry under the given name.\n\t */\n\tputValue: function(name, obj)\n\t{\n\t\tmxStyleRegistry.values[name] = obj;\n\t},\n\n\t/**\n\t * Function: getValue\n\t *\n\t * Returns the value associated with the given name.\n\t */\n\tgetValue: function(name)\n\t{\n\t\treturn mxStyleRegistry.values[name];\n\t},\n\t\n\t/**\n\t * Function: getName\n\t * \n\t * Returns the name for the given value.\n\t */\n\tgetName: function(value)\n\t{\n\t\tfor (var key in mxStyleRegistry.values)\n\t\t{\n\t\t\tif (mxStyleRegistry.values[key] == value)\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n};\n\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ELBOW, mxEdgeStyle.ElbowConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ENTITY_RELATION, mxEdgeStyle.EntityRelation);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_LOOP, mxEdgeStyle.Loop);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SIDETOSIDE, mxEdgeStyle.SideToSide);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_TOPTOBOTTOM, mxEdgeStyle.TopToBottom);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ORTHOGONAL, mxEdgeStyle.OrthConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SEGMENT, mxEdgeStyle.SegmentConnector);\n\nmxStyleRegistry.putValue(mxConstants.PERIMETER_ELLIPSE, mxPerimeter.EllipsePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RECTANGLE, mxPerimeter.RectanglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RHOMBUS, mxPerimeter.RhombusPerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_TRIANGLE, mxPerimeter.TrianglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_HEXAGON, mxPerimeter.HexagonPerimeter);\n\n__mxOutput.mxStyleRegistry = typeof mxStyleRegistry !== 'undefined' ? mxStyleRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphView\n *\n * Extends <mxEventSource> to implement a view for a graph. This class is in\n * charge of computing the absolute coordinates for the relative child\n * geometries, the points for perimeters and edge styles and keeping them\n * cached in <mxCellStates> for faster retrieval. The states are updated\n * whenever the model or the view state (translate, scale) changes. The scale\n * and translate are honoured in the bounds.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the root was changed in <setCurrentRoot>. The <code>edit</code>\n * property contains the <mxUndoableEdit> which contains the\n * <mxCurrentRootChange>.\n * \n * Event: mxEvent.SCALE_AND_TRANSLATE\n * \n * Fires after the scale and translate have been changed in <scaleAndTranslate>.\n * The <code>scale</code>, <code>previousScale</code>, <code>translate</code>\n * and <code>previousTranslate</code> properties contain the new and previous\n * scale and translate, respectively.\n * \n * Event: mxEvent.SCALE\n * \n * Fires after the scale was changed in <setScale>. The <code>scale</code> and\n * <code>previousScale</code> properties contain the new and previous scale.\n * \n * Event: mxEvent.TRANSLATE\n * \n * Fires after the translate was changed in <setTranslate>. The\n * <code>translate</code> and <code>previousTranslate</code> properties contain\n * the new and previous value for translate.\n * \n * Event: mxEvent.DOWN and mxEvent.UP\n * \n * Fire if the current root is changed by executing an <mxCurrentRootChange>.\n * The event name depends on the location of the root in the cell hierarchy\n * with respect to the current root. The <code>root</code> and\n * <code>previous</code> properties contain the new and previous root,\n * respectively.\n * \n * Constructor: mxGraphView\n *\n * Constructs a new view for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphView(graph)\n{\n\tthis.graph = graph;\n\tthis.translate = new mxPoint();\n\tthis.graphBounds = new mxRectangle();\n\tthis.states = new mxDictionary();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphView.prototype = new mxEventSource();\nmxGraphView.prototype.constructor = mxGraphView;\n\n/**\n *\n */\nmxGraphView.prototype.EMPTY_POINT = new mxPoint();\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphView.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Function: updatingDocumentResource\n *\n * Specifies the resource key for the status message while the document is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingDocument'.\n */\nmxGraphView.prototype.updatingDocumentResource = (mxClient.language != 'none') ? 'updatingDocument' : '';\n\n/**\n * Variable: allowEval\n * \n * Specifies if string values in cell styles should be evaluated using\n * <mxUtils.eval>. This will only be used if the string values can't be mapped\n * to objects using <mxStyleRegistry>. Default is false. NOTE: Enabling this\n * switch carries a possible security risk.\n */\nmxGraphView.prototype.allowEval = false;\n\n/**\n * Variable: captureDocumentGesture\n * \n * Specifies if a gesture should be captured when it goes outside of the\n * graph container. Default is true.\n */\nmxGraphView.prototype.captureDocumentGesture = true;\n\n/**\n * Variable: optimizeVmlReflows\n * \n * Specifies if the <canvas> should be hidden while rendering in IE8 standards\n * mode and quirks mode. This will significantly improve rendering performance.\n * Default is true.\n */\nmxGraphView.prototype.optimizeVmlReflows = true;\n\n/**\n * Variable: rendering\n * \n * Specifies if shapes should be created, updated and destroyed using the\n * methods of <mxCellRenderer> in <graph>. Default is true.\n */\nmxGraphView.prototype.rendering = true;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxGraphView.prototype.graph = null;\n\n/**\n * Variable: currentRoot\n *\n * <mxCell> that acts as the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.currentRoot = null;\n\n/**\n * Variable: graphBounds\n *\n * <mxRectangle> that caches the scales, translated bounds of the current view.\n */\nmxGraphView.prototype.graphBounds = null;\n\n/**\n * Variable: scale\n * \n * Specifies the scale. Default is 1 (100%).\n */\nmxGraphView.prototype.scale = 1;\n\t\n/**\n * Variable: translate\n *\n * <mxPoint> that specifies the current translation. Default is a new\n * empty <mxPoint>.\n */\nmxGraphView.prototype.translate = null;\n\n/**\n * Variable: states\n * \n * <mxDictionary> that maps from cell IDs to <mxCellStates>.\n */\nmxGraphView.prototype.states = null;\n\n/**\n * Variable: updateStyle\n * \n * Specifies if the style should be updated in each validation step. If this\n * is false then the style is only updated if the state is created or if the\n * style of the cell was changed. Default is false.\n */\nmxGraphView.prototype.updateStyle = false;\n\n/**\n * Variable: lastNode\n * \n * During validation, this contains the last DOM node that was processed.\n */\nmxGraphView.prototype.lastNode = null;\n\n/**\n * Variable: lastHtmlNode\n * \n * During validation, this contains the last HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastHtmlNode = null;\n\n/**\n * Variable: lastForegroundNode\n * \n * During validation, this contains the last edge's DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundNode = null;\n\n/**\n * Variable: lastForegroundHtmlNode\n * \n * During validation, this contains the last edge HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundHtmlNode = null;\n\n/**\n * Function: getGraphBounds\n *\n * Returns <graphBounds>.\n */\nmxGraphView.prototype.getGraphBounds = function()\n{\n\treturn this.graphBounds;\n};\n\n/**\n * Function: setGraphBounds\n *\n * Sets <graphBounds>.\n */\nmxGraphView.prototype.setGraphBounds = function(value)\n{\n\tthis.graphBounds = value;\n};\n\n/**\n * Function: getBounds\n * \n * Returns the union of all <mxCellStates> for the given array of <mxCells>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounds should be returned.\n */\nmxGraphView.prototype.getBounds = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(state);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: setCurrentRoot\n *\n * Sets and returns the current root and fires an <undo> event before\n * calling <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * root - <mxCell> that specifies the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.setCurrentRoot = function(root)\n{\n\tif (this.currentRoot != root)\n\t{\n\t\tvar change = new mxCurrentRootChange(this, root);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, true);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t\tthis.graph.sizeDidChange();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: scaleAndTranslate\n *\n * Sets the scale and translation and fires a <scale> and <translate> event\n * before calling <revalidate> followed by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * scale - Decimal value that specifies the new scale (1 is 100%).\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.scaleAndTranslate = function(scale, dx, dy)\n{\n\tvar previousScale = this.scale;\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.scale != scale || this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.scale = scale;\n\t\t\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE_AND_TRANSLATE,\n\t\t'scale', scale, 'previousScale', previousScale,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: getScale\n * \n * Returns the <scale>.\n */\nmxGraphView.prototype.getScale = function()\n{\n\treturn this.scale;\n};\n\n/**\n * Function: setScale\n *\n * Sets the scale and fires a <scale> event before calling <revalidate> followed\n * by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * value - Decimal value that specifies the new scale (1 is 100%).\n */\nmxGraphView.prototype.setScale = function(value)\n{\n\tvar previousScale = this.scale;\n\t\n\tif (this.scale != value)\n\t{\n\t\tthis.scale = value;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE,\n\t\t'scale', value, 'previousScale', previousScale));\n};\n\n/**\n * Function: getTranslate\n * \n * Returns the <translate>.\n */\nmxGraphView.prototype.getTranslate = function()\n{\n\treturn this.translate;\n};\n\n/**\n * Function: setTranslate\n *\n * Sets the translation and fires a <translate> event before calling\n * <revalidate> followed by <mxGraph.sizeDidChange>. The translation is the\n * negative of the origin.\n *\n * Parameters:\n *\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.setTranslate = function(dx, dy)\n{\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.TRANSLATE,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: viewStateChanged\n * \n * Invoked after <scale> and/or <translate> has changed.\n */\nmxGraphView.prototype.viewStateChanged = function()\n{\n\tthis.revalidate();\n\tthis.graph.sizeDidChange();\n};\n\n/**\n * Function: refresh\n *\n * Clears the view if <currentRoot> is not null and revalidates.\n */\nmxGraphView.prototype.refresh = function()\n{\n\tif (this.currentRoot != null)\n\t{\n\t\tthis.clear();\n\t}\n\t\n\tthis.revalidate();\n};\n\n/**\n * Function: revalidate\n *\n * Revalidates the complete view with all cell states.\n */\nmxGraphView.prototype.revalidate = function()\n{\n\tthis.invalidate();\n\tthis.validate();\n};\n\n/**\n * Function: clear\n *\n * Removes the state of the given cell and all descendants if the given\n * cell is not the current root.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the state should be removed. Default\n * is the root of the model.\n * force - Boolean indicating if the current root should be ignored for\n * recursion.\n */\nmxGraphView.prototype.clear = function(cell, force, recurse)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\tforce = (force != null) ? force : false;\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tthis.removeState(cell);\n\t\n\tif (recurse && (force || cell != this.currentRoot))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.clear(model.getChildAt(cell, i), force);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.invalidate(cell);\n\t}\n};\n\n/**\n * Function: invalidate\n * \n * Invalidates the state of the given cell, all its descendants and\n * connected edges.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be invalidated. Default is the root of the\n * model.\n */\nmxGraphView.prototype.invalidate = function(cell, recurse, includeEdges)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\trecurse = (recurse != null) ? recurse : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar state = this.getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tstate.invalid = true;\n\t}\n\t\n\t// Avoids infinite loops for invalid graphs\n\tif (!cell.invalidating)\n\t{\n\t\tcell.invalidating = true;\n\t\t\n\t\t// Recursively invalidates all descendants\n\t\tif (recurse)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\tthis.invalidate(child, recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Propagates invalidation to all connected edges\n\t\tif (includeEdges)\n\t\t{\n\t\t\tvar edgeCount = model.getEdgeCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t{\n\t\t\t\tthis.invalidate(model.getEdgeAt(cell, i), recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\tdelete cell.invalidating;\n\t}\n};\n\n/**\n * Function: validate\n * \n * Calls <validateCell> and <validateCellState> and updates the <graphBounds>\n * using <getBoundingBox>. Finally the background is validated using\n * <validateBackground>.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the root of the validation.\n * Default is <currentRoot> or the root of the model.\n */\nmxGraphView.prototype.validate = function(cell)\n{\n\tvar t0 = mxLog.enter('mxGraphView.validate');\n\twindow.status = mxResources.get(this.updatingDocumentResource) ||\n\t\tthis.updatingDocumentResource;\n\t\n\tthis.resetValidationState();\n\t\n\t// Improves IE rendering speed by minimizing reflows\n\tvar prevDisplay = null;\n\t\n\tif (this.optimizeVmlReflows && this.canvas != null && this.textDiv == null &&\n\t\t((document.documentMode == 8 && !mxClient.IS_EM) || mxClient.IS_QUIRKS))\n\t{\n\t\t// Placeholder keeps scrollbar positions when canvas is hidden\n\t\tthis.placeholder = document.createElement('div');\n\t\tthis.placeholder.style.position = 'absolute';\n\t\tthis.placeholder.style.width = this.canvas.clientWidth + 'px';\n\t\tthis.placeholder.style.height = this.canvas.clientHeight + 'px';\n\t\tthis.canvas.parentNode.appendChild(this.placeholder);\n\n\t\tprevDisplay = this.drawPane.style.display;\n\t\tthis.canvas.style.display = 'none';\n\t\t\n\t\t// Creates temporary DIV used for text measuring in mxText.updateBoundingBox\n\t\tthis.textDiv = document.createElement('div');\n\t\tthis.textDiv.style.position = 'absolute';\n\t\tthis.textDiv.style.whiteSpace = 'nowrap';\n\t\tthis.textDiv.style.visibility = 'hidden';\n\t\tthis.textDiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tthis.textDiv.style.zoom = '1';\n\t\t\n\t\tdocument.body.appendChild(this.textDiv);\n\t}\n\t\n\tvar graphBounds = this.getBoundingBox(this.validateCellState(\n\t\tthis.validateCell(cell || ((this.currentRoot != null) ?\n\t\t\tthis.currentRoot : this.graph.getModel().getRoot()))));\n\tthis.setGraphBounds((graphBounds != null) ? graphBounds : this.getEmptyBounds());\n\tthis.validateBackground();\n\t\n\tif (prevDisplay != null)\n\t{\n\t\tthis.canvas.style.display = prevDisplay;\n\t\tthis.textDiv.parentNode.removeChild(this.textDiv);\n\t\t\n\t\tif (this.placeholder != null)\n\t\t{\n\t\t\tthis.placeholder.parentNode.removeChild(this.placeholder);\n\t\t}\n\t\t\t\t\n\t\t// Textdiv cannot be reused\n\t\tthis.textDiv = null;\n\t}\n\t\n\tthis.resetValidationState();\n\t\n\twindow.status = mxResources.get(this.doneResource) ||\n\t\tthis.doneResource;\n\tmxLog.leave('mxGraphView.validate', t0);\n};\n\n/**\n * Function: getEmptyBounds\n * \n * Returns the bounds for an empty graph. This returns a rectangle at\n * <translate> with the size of 0 x 0.\n */\nmxGraphView.prototype.getEmptyBounds = function()\n{\n\treturn new mxRectangle(this.translate.x * this.scale, this.translate.y * this.scale);\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box of the shape and the label for the given\n * <mxCellState> and its children if recurse is true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounding box should be returned.\n * recurse - Optional boolean indicating if the children should be included.\n * Default is true.\n */\nmxGraphView.prototype.getBoundingBox = function(state, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar bbox = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (state.shape != null && state.shape.boundingBox != null)\n\t\t{\n\t\t\tbbox = state.shape.boundingBox.clone();\n\t\t}\n\t\t\n\t\t// Adds label bounding box to graph bounds\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (bbox != null)\n\t\t\t{\n\t\t\t\tbbox.add(state.text.boundingBox);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox = state.text.boundingBox.clone();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (recurse)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(state.cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar bounds = this.getBoundingBox(this.getState(model.getChildAt(state.cell, i)));\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (bbox == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = bounds;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox.add(bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bbox;\n};\n\n/**\n * Function: createBackgroundPageShape\n *\n * Creates and returns the shape used as the background page.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that represents the bounds of the shape.\n */\nmxGraphView.prototype.createBackgroundPageShape = function(bounds)\n{\n\treturn new mxRectangleShape(bounds, 'white', 'black');\n};\n\n/**\n * Function: validateBackground\n *\n * Calls <validateBackgroundImage> and <validateBackgroundPage>.\n */\nmxGraphView.prototype.validateBackground = function()\n{\n\tthis.validateBackgroundImage();\n\tthis.validateBackgroundPage();\n};\n\n/**\n * Function: validateBackgroundImage\n * \n * Validates the background image.\n */\nmxGraphView.prototype.validateBackgroundImage = function()\n{\n\tvar bg = this.graph.getBackgroundImage();\n\t\n\tif (bg != null)\n\t{\n\t\tif (this.backgroundImage == null || this.backgroundImage.image != bg.src)\n\t\t{\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tthis.backgroundImage.destroy();\n\t\t\t}\n\t\t\t\n\t\t\tvar bounds = new mxRectangle(0, 0, 1, 1);\n\t\t\t\n\t\t\tthis.backgroundImage = new mxImageShape(bounds, bg.src);\n\t\t\tthis.backgroundImage.dialect = this.graph.dialect;\n\t\t\tthis.backgroundImage.init(this.backgroundPane);\n\t\t\tthis.backgroundImage.redraw();\n\n\t\t\t// Workaround for ignored event on background in IE8 standards mode\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tmxEvent.addGestureListeners(this.backgroundImage.node,\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.redrawBackgroundImage(this.backgroundImage, bg);\n\t}\n\telse if (this.backgroundImage != null)\n\t{\n\t\tthis.backgroundImage.destroy();\n\t\tthis.backgroundImage = null;\n\t}\n};\n\n/**\n * Function: validateBackgroundPage\n * \n * Validates the background page.\n */\nmxGraphView.prototype.validateBackgroundPage = function()\n{\n\tif (this.graph.pageVisible)\n\t{\n\t\tvar bounds = this.getBackgroundPageBounds();\n\t\t\n\t\tif (this.backgroundPageShape == null)\n\t\t{\n\t\t\tthis.backgroundPageShape = this.createBackgroundPageShape(bounds);\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.isShadow = true;\n\t\t\tthis.backgroundPageShape.dialect = this.graph.dialect;\n\t\t\tthis.backgroundPageShape.init(this.backgroundPane);\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t\t\n\t\t\t// Adds listener for double click handling on background\n\t\t\tif (this.graph.nativeDblClickEnabled)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(this.backgroundPageShape.node, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.dblClick(evt);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t\t// container and finishing the handling of a single gesture\n\t\t\tmxEvent.addGestureListeners(this.backgroundPageShape.node,\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\t\t\tif (this.graph.tooltipHandler != null && this.graph.tooltipHandler.isHideOnHover())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.tooltipHandler.hide();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.graph.isMouseDown && !mxEvent.isConsumed(evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.bounds = bounds;\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t}\n\t}\n\telse if (this.backgroundPageShape != null)\n\t{\n\t\tthis.backgroundPageShape.destroy();\n\t\tthis.backgroundPageShape = null;\n\t}\n};\n\n/**\n * Function: getBackgroundPageBounds\n * \n * Returns the bounds for the background page.\n */\nmxGraphView.prototype.getBackgroundPageBounds = function()\n{\n\tvar fmt = this.graph.pageFormat;\n\tvar ps = this.scale * this.graph.pageScale;\n\tvar bounds = new mxRectangle(this.scale * this.translate.x, this.scale * this.translate.y,\n\t\t\tfmt.width * ps, fmt.height * ps);\n\t\n\treturn bounds;\n};\n\n/**\n * Function: redrawBackgroundImage\n *\n * Updates the bounds and redraws the background image.\n * \n * Example:\n * \n * If the background image should not be scaled, this can be replaced with\n * the following.\n * \n * (code)\n * mxGraphView.prototype.redrawBackground = function(backgroundImage, bg)\n * {\n *   backgroundImage.bounds.x = this.translate.x;\n *   backgroundImage.bounds.y = this.translate.y;\n *   backgroundImage.bounds.width = bg.width;\n *   backgroundImage.bounds.height = bg.height;\n *\n *   backgroundImage.redraw();\n * };\n * (end)\n * \n * Parameters:\n * \n * backgroundImage - <mxImageShape> that represents the background image.\n * bg - <mxImage> that specifies the image and its dimensions.\n */\nmxGraphView.prototype.redrawBackgroundImage = function(backgroundImage, bg)\n{\n\tbackgroundImage.scale = this.scale;\n\tbackgroundImage.bounds.x = this.scale * this.translate.x;\n\tbackgroundImage.bounds.y = this.scale * this.translate.y;\n\tbackgroundImage.bounds.width = this.scale * bg.width;\n\tbackgroundImage.bounds.height = this.scale * bg.height;\n\n\tbackgroundImage.redraw();\n};\n\n/**\n * Function: validateCell\n * \n * Recursively creates the cell state for the given cell if visible is true and\n * the given cell is visible. If the cell is not visible but the state exists\n * then it is removed using <removeState>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be created.\n * visible - Optional boolean indicating if the cell should be visible. Default\n * is true.\n */\nmxGraphView.prototype.validateCell = function(cell, visible)\n{\n\tvisible = (visible != null) ? visible : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvisible = visible && this.graph.isCellVisible(cell);\n\t\tvar state = this.getState(cell, visible);\n\t\t\n\t\tif (state != null && !visible)\n\t\t{\n\t\t\tthis.removeState(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tthis.validateCell(model.getChildAt(cell, i), visible &&\n\t\t\t\t\t(!this.isCellCollapsed(cell) || cell == this.currentRoot));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: validateCellState\n * \n * Validates and repaints the <mxCellState> for the given <mxCell>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be validated.\n * recurse - Optional boolean indicating if the children of the cell should be\n * validated. Default is true.\n */\nmxGraphView.prototype.validateCellState = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\t\n\t\t\tif (state.invalid)\n\t\t\t{\n\t\t\t\tstate.invalid = false;\n\t\t\t\t\n\t\t\t\tif (state.style == null || state.invalidStyle)\n\t\t\t\t{\n\t\t\t\t\tstate.style = this.graph.getCellStyle(state.cell);\n\t\t\t\t\tstate.invalidStyle = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (cell != this.currentRoot)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getParent(cell), false);\n\t\t\t\t}\n\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, true), false), true);\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, false), false), false);\n\t\t\t\t\n\t\t\t\tthis.updateCellState(state);\n\t\t\t\t\n\t\t\t\t// Repaint happens immediately after the cell is validated\n\t\t\t\tif (cell != this.currentRoot && !state.invalid)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.cellRenderer.redraw(state, false, this.isRendering());\n\n\t\t\t\t\t// Handles changes to invertex paintbounds after update of rendering shape\n\t\t\t\t\tstate.updateCachedBounds();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (recurse && !state.invalid)\n\t\t\t{\n\t\t\t\t// Updates order in DOM if recursively traversing\n\t\t\t\tif (state.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.stateValidated(state);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: updateCellState\n * \n * Updates the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to be updated.\n */\nmxGraphView.prototype.updateCellState = function(state)\n{\n\tstate.absoluteOffset.x = 0;\n\tstate.absoluteOffset.y = 0;\n\tstate.origin.x = 0;\n\tstate.origin.y = 0;\n\tstate.length = 0;\n\t\n\tif (state.cell != this.currentRoot)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar pState = this.getState(model.getParent(state.cell)); \n\t\t\n\t\tif (pState != null && pState.cell != this.currentRoot)\n\t\t{\n\t\t\tstate.origin.x += pState.origin.x;\n\t\t\tstate.origin.y += pState.origin.y;\n\t\t}\n\t\t\n\t\tvar offset = this.graph.getChildOffsetForCell(state.cell);\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tstate.origin.x += offset.x;\n\t\t\tstate.origin.y += offset.y;\n\t\t}\n\t\t\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\t\t\t\t\n\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (!model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\toffset = (geo.offset != null) ? geo.offset : this.EMPTY_POINT;\n\t\n\t\t\t\tif (geo.relative && pState != null)\n\t\t\t\t{\n\t\t\t\t\tif (model.isEdge(pState.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar origin = this.getPoint(pState, geo);\n\n\t\t\t\t\t\tif (origin != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.origin.x += (origin.x / this.scale) - pState.origin.x - this.translate.x;\n\t\t\t\t\t\t\tstate.origin.y += (origin.y / this.scale) - pState.origin.y - this.translate.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.origin.x += geo.x * pState.unscaledWidth + offset.x;\n\t\t\t\t\t\tstate.origin.y += geo.y * pState.unscaledHeight + offset.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstate.absoluteOffset.x = this.scale * offset.x;\n\t\t\t\t\tstate.absoluteOffset.y = this.scale * offset.y;\n\t\t\t\t\tstate.origin.x += geo.x;\n\t\t\t\t\tstate.origin.y += geo.y;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tstate.x = this.scale * (this.translate.x + state.origin.x);\n\t\t\tstate.y = this.scale * (this.translate.y + state.origin.y);\n\t\t\tstate.width = this.scale * geo.width;\n\t\t\tstate.unscaledWidth = geo.width;\n\t\t\tstate.height = this.scale * geo.height;\n\t\t\tstate.unscaledHeight = geo.height;\n\t\t\t\n\t\t\tif (model.isVertex(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateVertexState(state, geo);\n\t\t\t}\n\t\t\t\n\t\t\tif (model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(state, geo);\n\t\t\t}\n\t\t}\n\t}\n\n\tstate.updateCachedBounds();\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the children of the given cell should not be visible in the\n * view. This implementation uses <mxGraph.isCellVisible> but it can be\n * overidden to use a separate condition.\n */\nmxGraphView.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.graph.isCellCollapsed(cell);\n};\n\n/**\n * Function: updateVertexState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateVertexState = function(state, geo)\n{\n\tvar model = this.graph.getModel();\n\tvar pState = this.getState(model.getParent(state.cell));\n\t\n\tif (geo.relative && pState != null && !model.isEdge(pState.cell))\n\t{\n\t\tvar alpha = mxUtils.toRadians(pState.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\tstate.x = pt.x - state.width / 2;\n\t\t\tstate.y = pt.y - state.height / 2;\n\t\t}\n\t}\n\t\n\tthis.updateVertexLabelOffset(state);\n};\n\n/**\n * Function: updateEdgeState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateEdgeState = function(state, geo)\n{\n\tvar source = state.getVisibleTerminalState(true);\n\tvar target = state.getVisibleTerminalState(false);\n\t\n\t// This will remove edges with no terminals and no terminal points\n\t// as such edges are invalid and produce NPEs in the edge styles.\n\t// Also removes connected edges that have no visible terminals.\n\tif ((this.graph.model.getTerminal(state.cell, true) != null && source == null) ||\n\t\t(source == null && geo.getTerminalPoint(true) == null) ||\n\t\t(this.graph.model.getTerminal(state.cell, false) != null && target == null) ||\n\t\t(target == null && geo.getTerminalPoint(false) == null))\n\t{\n\t\tthis.clear(state.cell, true);\n\t}\n\telse\n\t{\n\t\tthis.updateFixedTerminalPoints(state, source, target);\n\t\tthis.updatePoints(state, geo.points, source, target);\n\t\tthis.updateFloatingTerminalPoints(state, source, target);\n\t\t\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (state.cell != this.currentRoot && (pts == null || pts.length < 2 ||\n\t\t\tpts[0] == null || pts[pts.length - 1] == null))\n\t\t{\n\t\t\t// This will remove edges with invalid points from the list of states in the view.\n\t\t\t// Happens if the one of the terminals and the corresponding terminal point is null.\n\t\t\tthis.clear(state.cell, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateEdgeBounds(state);\n\t\t\tthis.updateEdgeLabelOffset(state);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateVertexLabelOffset\n * \n * Updates the absoluteOffset of the given vertex cell state. This takes\n * into account the label position styles.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateVertexLabelOffset = function(state)\n{\n\tvar h = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\n\tif (h == mxConstants.ALIGN_LEFT)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\tlw *= this.scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlw = state.width;\n\t\t}\n\t\t\n\t\tstate.absoluteOffset.x -= lw;\n\t}\n\telse if (h == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstate.absoluteOffset.x += state.width;\n\t}\n\telse if (h == mxConstants.ALIGN_CENTER)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\t// Aligns text block with given width inside the vertex width\n\t\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER);\n\t\t\tvar dx = 0;\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx = 0.5;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx = 1;\n\t\t\t}\n\t\t\t\n\t\t\tif (dx != 0)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset.x -= (lw * this.scale - state.width) * dx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar v = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\tif (v == mxConstants.ALIGN_TOP)\n\t{\n\t\tstate.absoluteOffset.y -= state.height;\n\t}\n\telse if (v == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tstate.absoluteOffset.y += state.height;\n\t}\n};\n\n/**\n * Function: resetValidationState\n *\n * Resets the current validation state.\n */\nmxGraphView.prototype.resetValidationState = function()\n{\n\tthis.lastNode = null;\n\tthis.lastHtmlNode = null;\n\tthis.lastForegroundNode = null;\n\tthis.lastForegroundHtmlNode = null;\n};\n\n/**\n * Function: stateValidated\n * \n * Invoked when a state has been processed in <validatePoints>. This is used\n * to update the order of the DOM nodes of the shape.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n */\nmxGraphView.prototype.stateValidated = function(state)\n{\n\tvar fg = (this.graph.getModel().isEdge(state.cell) && this.graph.keepEdgesInForeground) ||\n\t\t(this.graph.getModel().isVertex(state.cell) && this.graph.keepEdgesInBackground);\n\tvar htmlNode = (fg) ? this.lastForegroundHtmlNode || this.lastHtmlNode : this.lastHtmlNode;\n\tvar node = (fg) ? this.lastForegroundNode || this.lastNode : this.lastNode;\n\tvar result = this.graph.cellRenderer.insertStateAfter(state, node, htmlNode);\n\n\tif (fg)\n\t{\n\t\tthis.lastForegroundHtmlNode = result[1];\n\t\tthis.lastForegroundNode = result[0];\n\t}\n\telse\n\t{\n\t\tthis.lastHtmlNode = result[1];\n\t\tthis.lastNode = result[0];\n\t}\n};\n\n/**\n * Function: updateFixedTerminalPoints\n *\n * Sets the initial absolute terminal points in the given state before the edge\n * style is computed.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose initial terminal points should be updated.\n * source - <mxCellState> which represents the source terminal.\n * target - <mxCellState> which represents the target terminal.\n */\nmxGraphView.prototype.updateFixedTerminalPoints = function(edge, source, target)\n{\n\tthis.updateFixedTerminalPoint(edge, source, true,\n\t\tthis.graph.getConnectionConstraint(edge, source, true));\n\tthis.updateFixedTerminalPoint(edge, target, false,\n\t\tthis.graph.getConnectionConstraint(edge, target, false));\n};\n\n/**\n * Function: updateFixedTerminalPoint\n *\n * Sets the fixed source or target terminal point on the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.updateFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFixedTerminalPoint(edge, terminal, source, constraint), source);\n};\n\n/**\n * Function: getFixedTerminalPoint\n *\n * Returns the fixed source or target terminal point for the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.getFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tvar pt = null;\n\t\n\tif (constraint != null)\n\t{\n\t\tpt = this.graph.getConnectionPoint(terminal, constraint, false); // FIXME Rounding introduced bugs when calculating label positions -> , this.graph.isOrthogonal(edge));\n\t}\n\t\n\tif (pt == null && terminal == null)\n\t{\n\t\tvar s = this.scale;\n\t\tvar tr = this.translate;\n\t\tvar orig = edge.origin;\n\t\tvar geo = this.graph.getCellGeometry(edge.cell);\n\t\tpt = geo.getTerminalPoint(source);\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = new mxPoint(s * (tr.x + pt.x + orig.x),\n\t\t\t\t\t\t\t s * (tr.y + pt.y + orig.y));\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: updateBoundsFromStencil\n * \n * Updates the bounds of the given cell state to reflect the bounds of the stencil\n * if it has a fixed aspect and returns the previous bounds as an <mxRectangle> if\n * the bounds have been modified or null otherwise.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateBoundsFromStencil = function(state)\n{\n\tvar previous = null;\n\t\n\tif (state != null && state.shape != null && state.shape.stencil != null && state.shape.stencil.aspect == 'fixed')\n\t{\n\t\tprevious = mxRectangle.fromRectangle(state);\n\t\tvar asp = state.shape.stencil.computeAspect(state.style, state.x, state.y, state.width, state.height);\n\t\tstate.setRect(asp.x, asp.y, state.shape.stencil.w0 * asp.width, state.shape.stencil.h0 * asp.height);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: updatePoints\n *\n * Updates the absolute points in the given state using the specified array\n * of <mxPoints> as the relative points.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose absolute points should be updated.\n * points - Array of <mxPoints> that constitute the relative points.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updatePoints = function(edge, points, source, target)\n{\n\tif (edge != null)\n\t{\n\t\tvar pts = [];\n\t\tpts.push(edge.absolutePoints[0]);\n\t\tvar edgeStyle = this.getEdgeStyle(edge, points, source, target);\n\t\t\n\t\tif (edgeStyle != null)\n\t\t{\n\t\t\tvar src = this.getTerminalPort(edge, source, true);\n\t\t\tvar trg = this.getTerminalPort(edge, target, false);\n\t\t\t\n\t\t\t// Uses the stencil bounds for routing and restores after routing\n\t\t\tvar srcBounds = this.updateBoundsFromStencil(src);\n\t\t\tvar trgBounds = this.updateBoundsFromStencil(trg);\n\n\t\t\tedgeStyle(edge, src, trg, points, pts);\n\t\t\t\n\t\t\t// Restores previous bounds\n\t\t\tif (srcBounds != null)\n\t\t\t{\n\t\t\t\tsrc.setRect(srcBounds.x, srcBounds.y, srcBounds.width, srcBounds.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (trgBounds != null)\n\t\t\t{\n\t\t\t\ttrg.setRect(trgBounds.x, trgBounds.y, trgBounds.width, trgBounds.height);\n\t\t\t}\n\t\t}\n\t\telse if (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = mxUtils.clone(points[i]);\n\t\t\t\t\tpts.push(this.transformControlPoint(edge, pt));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tmp = edge.absolutePoints;\n\t\tpts.push(tmp[tmp.length-1]);\n\n\t\tedge.absolutePoints = pts;\n\t}\n};\n\n/**\n * Function: transformControlPoint\n *\n * Transforms the given control point to an absolute point.\n */\nmxGraphView.prototype.transformControlPoint = function(state, pt, ignoreScale)\n{\n\tif (state != null && pt != null)\n\t{\n\t\tvar orig = state.origin;\n\t\tvar scale = ignoreScale ? 1 : this.scale\n\t\t\n\t    return new mxPoint(scale * (pt.x + this.translate.x + orig.x),\n\t    \t\tscale * (pt.y + this.translate.y + orig.y));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isLoopStyleEnabled\n * \n * Returns true if the given edge should be routed with <mxGraph.defaultLoopStyle>\n * or the <mxConstants.STYLE_LOOP> defined for the given edge. This implementation\n * returns true if the given edge is a loop and does not have connections constraints\n * associated.\n */\nmxGraphView.prototype.isLoopStyleEnabled = function(edge, points, source, target)\n{\n\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\n\tif ((points == null || points.length < 2) &&\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_ORTHOGONAL_LOOP, false) ||\n\t\t((sc == null || sc.point == null) && (tc == null || tc.point == null))))\n\t{\n\t\treturn source != null && source == target;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgeStyle\n * \n * Returns the edge style function to be used to render the given edge state.\n */\nmxGraphView.prototype.getEdgeStyle = function(edge, points, source, target)\n{\n\tvar edgeStyle = this.isLoopStyleEnabled(edge, points, source, target) ?\n\t\tmxUtils.getValue(edge.style, mxConstants.STYLE_LOOP, this.graph.defaultLoopStyle) :\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_NOEDGESTYLE, false) ?\n\t\tedge.style[mxConstants.STYLE_EDGE] : null);\n\n\t// Converts string values to objects\n\tif (typeof(edgeStyle) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(edgeStyle);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(edgeStyle);\n\t\t}\n\t\t\n\t\tedgeStyle = tmp;\n\t}\n\t\n\tif (typeof(edgeStyle) == \"function\")\n\t{\n\t\treturn edgeStyle;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: updateFloatingTerminalPoints\n *\n * Updates the terminal points in the given state after the edge style was\n * computed for the edge.\n * \n * Parameters:\n * \n * state - <mxCellState> whose terminal points should be updated.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updateFloatingTerminalPoints = function(state, source, target)\n{\n\tvar pts = state.absolutePoints;\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\n\tif (pe == null && target != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, target, source, false);\n\t}\n\t\n\tif (p0 == null && source != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, source, target, true);\n\t}\n};\n\n/**\n * Function: updateFloatingTerminalPoint\n *\n * Updates the absolute terminal point in the given state for the given\n * start and end state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.updateFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFloatingTerminalPoint(edge, start, end, source), source);\n};\n\n/**\n * Function: getFloatingTerminalPoint\n * \n * Returns the floating terminal point for the given edge, start and end\n * state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.getFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tstart = this.getTerminalPort(edge, start, source);\n\tvar next = this.getNextPoint(edge, end, source);\n\t\n\tvar orth = this.graph.isOrthogonal(edge);\n\tvar alpha = mxUtils.toRadians(Number(start.style[mxConstants.STYLE_ROTATION] || '0'));\n\tvar center = new mxPoint(start.getCenterX(), start.getCenterY());\n\t\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(-alpha);\n\t\tvar sin = Math.sin(-alpha);\n\t\tnext = mxUtils.getRotatedPoint(next, cos, sin, center);\n\t}\n\t\n\tvar border = parseFloat(edge.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\tborder += parseFloat(edge.style[(source) ?\n\t\tmxConstants.STYLE_SOURCE_PERIMETER_SPACING :\n\t\tmxConstants.STYLE_TARGET_PERIMETER_SPACING] || 0);\n\tvar pt = this.getPerimeterPoint(start, next, alpha == 0 && orth, border);\n\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, center);\n\t}\n\n\treturn pt;\n};\n\n/**\n * Function: getTerminalPort\n * \n * Returns an <mxCellState> that represents the source or target terminal or\n * port for the given edge.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the given terminal is the source terminal.\n */\nmxGraphView.prototype.getTerminalPort = function(state, terminal, source)\n{\n\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\tmxConstants.STYLE_TARGET_PORT;\n\tvar id = mxUtils.getValue(state.style, key);\n\t\n\tif (id != null)\n\t{\n\t\tvar tmp = this.getState(this.graph.getModel().getCell(id));\n\t\t\n\t\t// Only uses ports where a cell state exists\n\t\tif (tmp != null)\n\t\t{\n\t\t\tterminal = tmp;\n\t\t}\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getPerimeterPoint\n *\n * Returns an <mxPoint> that defines the location of the intersection point between\n * the perimeter and the line between the center of the shape and the given point.\n * \n * Parameters:\n * \n * terminal - <mxCellState> for the source or target terminal.\n * next - <mxPoint> that lies outside of the given terminal.\n * orthogonal - Boolean that specifies if the orthogonal projection onto\n * the perimeter should be returned. If this is false then the intersection\n * of the perimeter and the line between the next and the center point is\n * returned.\n * border - Optional border between the perimeter and the shape.\n */\nmxGraphView.prototype.getPerimeterPoint = function(terminal, next, orthogonal, border)\n{\n\tvar point = null;\n\t\n\tif (terminal != null)\n\t{\n\t\tvar perimeter = this.getPerimeterFunction(terminal);\n\t\t\n\t\tif (perimeter != null && next != null)\n\t\t{\n\t\t\tvar bounds = this.getPerimeterBounds(terminal, border);\n\n\t\t\tif (bounds.width > 0 || bounds.height > 0)\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(next.x, next.y);\n\t\t\t\tvar flipH = false;\n\t\t\t\tvar flipV = false;\t\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isVertex(terminal.cell))\n\t\t\t\t{\n\t\t\t\t\tflipH = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tflipV = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\t\tif (terminal.shape != null && terminal.shape.stencil != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tflipH = (mxUtils.getValue(terminal.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\t\tflipV = (mxUtils.getValue(terminal.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpoint = perimeter(bounds, terminal, point, orthogonal);\n\n\t\t\t\tif (point != null)\n\t\t\t\t{\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (point == null)\n\t\t{\n\t\t\tpoint = this.getPoint(terminal);\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getRoutingCenterX\n * \n * Returns the x-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterX = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_X]) || 0 : 0;\n\n\treturn state.getCenterX() + f * state.width;\n};\n\n/**\n * Function: getRoutingCenterY\n * \n * Returns the y-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterY = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_Y]) || 0 : 0;\n\n\treturn state.getCenterY() + f * state.height;\n};\n\n/**\n * Function: getPerimeterBounds\n *\n * Returns the perimeter bounds for the given terminal, edge pair as an\n * <mxRectangle>.\n * \n * If you have a model where each terminal has a relative child that should\n * act as the graphical endpoint for a connection from/to the terminal, then\n * this method can be replaced as follows:\n * \n * (code)\n * var oldGetPerimeterBounds = mxGraphView.prototype.getPerimeterBounds;\n * mxGraphView.prototype.getPerimeterBounds = function(terminal, edge, isSource)\n * {\n *   var model = this.graph.getModel();\n *   var childCount = model.getChildCount(terminal.cell);\n * \n *   if (childCount > 0)\n *   {\n *     var child = model.getChildAt(terminal.cell, 0);\n *     var geo = model.getGeometry(child);\n *\n *     if (geo != null &&\n *         geo.relative)\n *     {\n *       var state = this.getState(child);\n *       \n *       if (state != null)\n *       {\n *         terminal = state;\n *       }\n *     }\n *   }\n *   \n *   return oldGetPerimeterBounds.apply(this, arguments);\n * };\n * (end)\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * border - Number that adds a border between the shape and the perimeter.\n */\nmxGraphView.prototype.getPerimeterBounds = function(terminal, border)\n{\n\tborder = (border != null) ? border : 0;\n\n\tif (terminal != null)\n\t{\n\t\tborder += parseFloat(terminal.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\t}\n\n\treturn terminal.getPerimeterBounds(border * this.scale);\n};\n\n/**\n * Function: getPerimeterFunction\n *\n * Returns the perimeter function for the given state.\n */\nmxGraphView.prototype.getPerimeterFunction = function(state)\n{\n\tvar perimeter = state.style[mxConstants.STYLE_PERIMETER];\n\n\t// Converts string values to objects\n\tif (typeof(perimeter) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(perimeter);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(perimeter);\n\t\t}\n\n\t\tperimeter = tmp;\n\t}\n\t\n\tif (typeof(perimeter) == \"function\")\n\t{\n\t\treturn perimeter;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getNextPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * opposite - <mxCellState> that represents the opposite terminal.\n * source - Boolean indicating if the next point for the source or target\n * should be returned.\n */\nmxGraphView.prototype.getNextPoint = function(edge, opposite, source)\n{\n\tvar pts = edge.absolutePoints;\n\tvar point = null;\n\t\n\tif (pts != null && pts.length >= 2)\n\t{\n\t\tvar count = pts.length;\n\t\tpoint = pts[(source) ? Math.min(1, count - 1) : Math.max(0, count - 2)];\n\t}\n\t\n\tif (point == null && opposite != null)\n\t{\n\t\tpoint = new mxPoint(opposite.getCenterX(), opposite.getCenterY());\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getVisibleTerminal\n *\n * Returns the nearest ancestor terminal that is visible. The edge appears\n * to be connected to this terminal on the display. The result of this method\n * is cached in <mxCellState.getVisibleTerminalState>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose visible terminal should be returned.\n * source - Boolean that specifies if the source or target terminal\n * should be returned.\n */\nmxGraphView.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar model = this.graph.getModel();\n\tvar result = model.getTerminal(edge, source);\n\tvar best = result;\n\t\n\twhile (result != null && result != this.currentRoot)\n\t{\n\t\tif (!this.graph.isCellVisible(best) || this.isCellCollapsed(result))\n\t\t{\n\t\t\tbest = result;\n\t\t}\n\t\t\n\t\tresult = model.getParent(result);\n\t}\n\n\t// Checks if the result is valid for the current view state\n\tif (best != null && (!model.contains(best) ||\n\t\tmodel.getParent(best) == model.getRoot() ||\n\t\tbest == this.currentRoot))\n\t{\n\t\tbest = null;\n\t}\n\t\n\treturn best;\n};\n\n/**\n * Function: updateEdgeBounds\n *\n * Updates the given state using the bounding box of t\n * he absolute points.\n * Also updates <mxCellState.terminalDistance>, <mxCellState.length> and\n * <mxCellState.segments>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateEdgeBounds = function(state)\n{\n\tvar points = state.absolutePoints;\n\tvar p0 = points[0];\n\tvar pe = points[points.length - 1];\n\t\n\tif (p0.x != pe.x || p0.y != pe.y)\n\t{\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\tstate.terminalDistance = Math.sqrt(dx * dx + dy * dy);\n\t}\n\telse\n\t{\n\t\tstate.terminalDistance = 0;\n\t}\n\t\n\tvar length = 0;\n\tvar segments = [];\n\tvar pt = p0;\n\t\n\tif (pt != null)\n\t{\n\t\tvar minX = pt.x;\n\t\tvar minY = pt.y;\n\t\tvar maxX = minX;\n\t\tvar maxY = minY;\n\t\t\n\t\tfor (var i = 1; i < points.length; i++)\n\t\t{\n\t\t\tvar tmp = points[i];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar dx = pt.x - tmp.x;\n\t\t\t\tvar dy = pt.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar segment = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tsegments.push(segment);\n\t\t\t\tlength += segment;\n\t\t\t\t\n\t\t\t\tpt = tmp;\n\t\t\t\t\n\t\t\t\tminX = Math.min(pt.x, minX);\n\t\t\t\tminY = Math.min(pt.y, minY);\n\t\t\t\tmaxX = Math.max(pt.x, maxX);\n\t\t\t\tmaxY = Math.max(pt.y, maxY);\n\t\t\t}\n\t\t}\n\t\t\n\t\tstate.length = length;\n\t\tstate.segments = segments;\n\t\t\n\t\tvar markerSize = 1; // TODO: include marker size\n\t\t\n\t\tstate.x = minX;\n\t\tstate.y = minY;\n\t\tstate.width = Math.max(markerSize, maxX - minX);\n\t\tstate.height = Math.max(markerSize, maxY - minY);\n\t}\n};\n\n/**\n * Function: getPoint\n *\n * Returns the absolute point on the edge for the given relative\n * <mxGeometry> as an <mxPoint>. The edge is represented by the given\n * <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * geometry - <mxGeometry> that represents the relative location.\n */\nmxGraphView.prototype.getPoint = function(state, geometry)\n{\n\tvar x = state.getCenterX();\n\tvar y = state.getCenterY();\n\t\n\tif (state.segments != null && (geometry == null || geometry.relative))\n\t{\n\t\tvar gx = (geometry != null) ? geometry.x / 2 : 0;\n\t\tvar pointCount = state.absolutePoints.length;\n\t\tvar dist = Math.round((gx + 0.5) * state.length);\n\t\tvar segment = state.segments[0];\n\t\tvar length = 0;\t\t\t\t\n\t\tvar index = 1;\n\n\t\twhile (dist >= Math.round(length + segment) && index < pointCount - 1)\n\t\t{\n\t\t\tlength += segment;\n\t\t\tsegment = state.segments[index++];\n\t\t}\n\n\t\tvar factor = (segment == 0) ? 0 : (dist - length) / segment;\n\t\tvar p0 = state.absolutePoints[index-1];\n\t\tvar pe = state.absolutePoints[index];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar gy = 0;\n\t\t\tvar offsetX = 0;\n\t\t\tvar offsetY = 0;\n\n\t\t\tif (geometry != null)\n\t\t\t{\n\t\t\t\tgy = geometry.y;\n\t\t\t\tvar offset = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (offset != null)\n\t\t\t\t{\n\t\t\t\t\toffsetX = offset.x;\n\t\t\t\t\toffsetY = offset.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\tvar nx = (segment == 0) ? 0 : dy / segment;\n\t\t\tvar ny = (segment == 0) ? 0 : dx / segment;\n\t\t\t\n\t\t\tx = p0.x + dx * factor + (nx * gy + offsetX) * this.scale;\n\t\t\ty = p0.y + dy * factor - (ny * gy - offsetY) * this.scale;\n\t\t}\n\t}\n\telse if (geometry != null)\n\t{\n\t\tvar offset = geometry.offset;\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tx += offset.x;\n\t\t\ty += offset.y;\n\t\t}\n\t}\n\t\n\treturn new mxPoint(x, y);\t\t\n};\n\n/**\n * Function: getRelativePoint\n *\n * Gets the relative point that describes the given, absolute label\n * position for the given edge state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * x - Specifies the x-coordinate of the absolute label location.\n * y - Specifies the y-coordinate of the absolute label location.\n */\nmxGraphView.prototype.getRelativePoint = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar pointCount = edgeState.absolutePoints.length;\n\t\t\n\t\tif (geometry.relative && pointCount > 1)\n\t\t{\n\t\t\tvar totalLength = edgeState.length;\n\t\t\tvar segments = edgeState.segments;\n\n\t\t\t// Works which line segment the point of the label is closest to\n\t\t\tvar p0 = edgeState.absolutePoints[0];\n\t\t\tvar pe = edgeState.absolutePoints[1];\n\t\t\tvar minDist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tvar index = 0;\n\t\t\tvar tmp = 0;\n\t\t\tvar length = 0;\n\t\t\t\n\t\t\tfor (var i = 2; i < pointCount; i++)\n\t\t\t{\n\t\t\t\ttmp += segments[i - 2];\n\t\t\t\tpe = edgeState.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\t\tif (dist <= minDist)\n\t\t\t\t{\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t\tlength = tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tp0 = pe;\n\t\t\t}\n\t\t\t\n\t\t\tvar seg = segments[index];\n\t\t\tp0 = edgeState.absolutePoints[index];\n\t\t\tpe = edgeState.absolutePoints[index + 1];\n\t\t\t\n\t\t\tvar x2 = p0.x;\n\t\t\tvar y2 = p0.y;\n\t\t\t\n\t\t\tvar x1 = pe.x;\n\t\t\tvar y1 = pe.y;\n\t\t\t\n\t\t\tvar px = x;\n\t\t\tvar py = y;\n\t\t\t\n\t\t\tvar xSegment = x2 - x1;\n\t\t\tvar ySegment = y2 - y1;\n\t\t\t\n\t\t\tpx -= x1;\n\t\t\tpy -= y1;\n\t\t\tvar projlenSq = 0;\n\t\t\t\n\t\t\tpx = xSegment - px;\n\t\t\tpy = ySegment - py;\n\t\t\tvar dotprod = px * xSegment + py * ySegment;\n\n\t\t\tif (dotprod <= 0.0)\n\t\t\t{\n\t\t\t\tprojlenSq = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprojlenSq = dotprod * dotprod\n\t\t\t\t\t\t/ (xSegment * xSegment + ySegment * ySegment);\n\t\t\t}\n\n\t\t\tvar projlen = Math.sqrt(projlenSq);\n\n\t\t\tif (projlen > seg)\n\t\t\t{\n\t\t\t\tprojlen = seg;\n\t\t\t}\n\n\t\t\tvar yDistance = Math.sqrt(mxUtils.ptSegDistSq(p0.x, p0.y, pe\n\t\t\t\t\t.x, pe.y, x, y));\n\t\t\tvar direction = mxUtils.relativeCcw(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tif (direction == -1)\n\t\t\t{\n\t\t\t\tyDistance = -yDistance;\n\t\t\t}\n\n\t\t\t// Constructs the relative point for the label\n\t\t\treturn new mxPoint(((totalLength / 2 - length - projlen) / totalLength) * -2,\n\t\t\t\t\t\tyDistance / this.scale);\n\t\t}\n\t}\n\t\n\treturn new mxPoint();\n};\n\n/**\n * Function: updateEdgeLabelOffset\n *\n * Updates <mxCellState.absoluteOffset> for the given state. The absolute\n * offset is normally used for the position of the edge label. Is is\n * calculated from the geometry as an absolute offset from the center\n * between the two endpoints if the geometry is absolute, or as the\n * relative distance between the center along the line and the absolute\n * orthogonal distance if the geometry is relative.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateEdgeLabelOffset = function(state)\n{\n\tvar points = state.absolutePoints;\n\t\n\tstate.absoluteOffset.x = state.getCenterX();\n\tstate.absoluteOffset.y = state.getCenterY();\n\n\tif (points != null && points.length > 0 && state.segments != null)\n\t{\n\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\tvar offset = this.getPoint(state, geometry);\n\t\t\t\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset = offset;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar dx = pe.x - p0.x;\n\t\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\tvar x0 = 0;\n\t\t\t\tvar y0 = 0;\n\n\t\t\t\tvar off = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tx0 = off.x;\n\t\t\t\t\ty0 = off.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar x = p0.x + dx / 2 + x0 * this.scale;\n\t\t\t\tvar y = p0.y + dy / 2 + y0 * this.scale;\n\t\t\t\t\n\t\t\t\tstate.absoluteOffset.x = x;\n\t\t\t\tstate.absoluteOffset.y = y;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getState\n *\n * Returns the <mxCellState> for the given cell. If create is true, then\n * the state is created if it does not yet exist.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be returned.\n * create - Optional boolean indicating if a new state should be created\n * if it does not yet exist. Default is false.\n */\nmxGraphView.prototype.getState = function(cell, create)\n{\n\tcreate = create || false;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.get(cell);\n\t\t\n\t\tif (create && (state == null || this.updateStyle) && this.graph.isCellVisible(cell))\n\t\t{\n\t\t\tif (state == null)\n\t\t\t{\n\t\t\t\tstate = this.createState(cell);\n\t\t\t\tthis.states.put(cell, state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.style = this.graph.getCellStyle(cell);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn state;\n};\n\n/**\n * Function: isRendering\n *\n * Returns <rendering>.\n */\nmxGraphView.prototype.isRendering = function()\n{\n\treturn this.rendering;\n};\n\n/**\n * Function: setRendering\n *\n * Sets <rendering>.\n */\nmxGraphView.prototype.setRendering = function(value)\n{\n\tthis.rendering = value;\n};\n\n/**\n * Function: isAllowEval\n *\n * Returns <allowEval>.\n */\nmxGraphView.prototype.isAllowEval = function()\n{\n\treturn this.allowEval;\n};\n\n/**\n * Function: setAllowEval\n *\n * Sets <allowEval>.\n */\nmxGraphView.prototype.setAllowEval = function(value)\n{\n\tthis.allowEval = value;\n};\n\n/**\n * Function: getStates\n *\n * Returns <states>.\n */\nmxGraphView.prototype.getStates = function()\n{\n\treturn this.states;\n};\n\n/**\n * Function: setStates\n *\n * Sets <states>.\n */\nmxGraphView.prototype.setStates = function(value)\n{\n\tthis.states = value;\n};\n\n/**\n * Function: getCellStates\n *\n * Returns the <mxCellStates> for the given array of <mxCells>. The array\n * contains all states that are not null, that is, the returned array may\n * have less elements than the given array. If no argument is given, then\n * this returns <states>.\n */\nmxGraphView.prototype.getCellStates = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\treturn this.states;\n\t}\n\telse\n\t{\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tresult.push(state);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: removeState\n *\n * Removes and returns the <mxCellState> for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be removed.\n */\nmxGraphView.prototype.removeState = function(cell)\n{\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.remove(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.graph.cellRenderer.destroy(state);\n\t\t\tstate.invalid = true;\n\t\t\tstate.destroy();\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: createState\n *\n * Creates and returns an <mxCellState> for the given cell and initializes\n * it using <mxCellRenderer.initialize>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a new <mxCellState> should be created.\n */\nmxGraphView.prototype.createState = function(cell)\n{\n\treturn new mxCellState(this, cell, this.graph.getCellStyle(cell));\n};\n\n/**\n * Function: getCanvas\n *\n * Returns the DOM node that contains the background-, draw- and\n * overlay- and decoratorpanes.\n */\nmxGraphView.prototype.getCanvas = function()\n{\n\treturn this.canvas;\n};\n\n/**\n * Function: getBackgroundPane\n *\n * Returns the DOM node that represents the background layer.\n */\nmxGraphView.prototype.getBackgroundPane = function()\n{\n\treturn this.backgroundPane;\n};\n\n/**\n * Function: getDrawPane\n *\n * Returns the DOM node that represents the main drawing layer.\n */\nmxGraphView.prototype.getDrawPane = function()\n{\n\treturn this.drawPane;\n};\n\n/**\n * Function: getOverlayPane\n *\n * Returns the DOM node that represents the layer above the drawing layer.\n */\nmxGraphView.prototype.getOverlayPane = function()\n{\n\treturn this.overlayPane;\n};\n\n/**\n * Function: getDecoratorPane\n *\n * Returns the DOM node that represents the topmost drawing layer.\n */\nmxGraphView.prototype.getDecoratorPane = function()\n{\n\treturn this.decoratorPane;\n};\n\n/**\n * Function: isContainerEvent\n * \n * Returns true if the event origin is one of the drawing panes or\n * containers of the view.\n */\nmxGraphView.prototype.isContainerEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\n\treturn (source == this.graph.container ||\n\t\tsource.parentNode == this.backgroundPane ||\n\t\t(source.parentNode != null &&\n\t\tsource.parentNode.parentNode == this.backgroundPane) ||\n\t\tsource == this.canvas.parentNode ||\n\t\tsource == this.canvas ||\n\t\tsource == this.backgroundPane ||\n\t\tsource == this.drawPane ||\n\t\tsource == this.overlayPane ||\n\t\tsource == this.decoratorPane);\n};\n\n/**\n * Function: isScrollEvent\n * \n * Returns true if the event origin is one of the scrollbars of the\n * container in IE. Such events are ignored.\n */\n mxGraphView.prototype.isScrollEvent = function(evt)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar pt = new mxPoint(evt.clientX - offset.x, evt.clientY - offset.y);\n\n\tvar outWidth = this.graph.container.offsetWidth;\n\tvar inWidth = this.graph.container.clientWidth;\n\n\tif (outWidth > inWidth && pt.x > inWidth + 2 && pt.x <= outWidth)\n\t{\n\t\treturn true;\n\t}\n\n\tvar outHeight = this.graph.container.offsetHeight;\n\tvar inHeight = this.graph.container.clientHeight;\n\t\n\tif (outHeight > inHeight && pt.y > inHeight + 2 && pt.y <= outHeight)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: init\n *\n * Initializes the graph event dispatch loop for the specified container\n * and invokes <create> to create the required DOM nodes for the display.\n */\nmxGraphView.prototype.init = function()\n{\n\tthis.installListeners();\n\t\n\t// Creates the DOM nodes for the respective display dialect\n\tvar graph = this.graph;\n\t\n\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tthis.createSvg();\n\t}\n\telse if (graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tthis.createVml();\n\t}\n\telse\n\t{\n\t\tthis.createHtml();\n\t}\n};\n\n/**\n * Function: installListeners\n *\n * Installs the required listeners in the container.\n */\nmxGraphView.prototype.installListeners = function()\n{\n\tvar graph = this.graph;\n\tvar container = graph.container;\n\t\n\tif (container != null)\n\t{\n\t\t// Support for touch device gestures (eg. pinch to zoom)\n\t\t// Double-tap handling is implemented in mxGraph.fireMouseEvent\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(container, 'gesturestart', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t\t\n\t\t\tmxEvent.addListener(container, 'gesturechange', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\n\t\t\tmxEvent.addListener(container, 'gestureend', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Adds basic listeners for graph event dispatching\n\t\tmxEvent.addGestureListeners(container, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Condition to avoid scrollbar events starting a rubberband selection\n\t\t\tif (this.isContainerEvent(evt) && ((!mxClient.IS_IE && !mxClient.IS_IE11 && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_OP && !mxClient.IS_SF) || !this.isScrollEvent(evt)))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Adds listener for double click handling on background, this does always\n\t\t// use native event handler, we assume that the DOM of the background\n\t\t// does not change during the double click\n\t\tmxEvent.addListener(container, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.dblClick(evt);\n\t\t\t}\n\t\t}));\n\n\t\t// Workaround for touch events which started on some DOM node\n\t\t// on top of the container, in which case the cells under the\n\t\t// mouse for the move and up events are not detected.\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar state = null;\n\t\t\t\n\t\t\t// Workaround for touch events which started on some DOM node\n\t\t\t// on top of the container, in which case the cells under the\n\t\t\t// mouse for the move and up events are not detected.\n\t\t\tif (mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(container, x, y);\n\t\t\t\tstate = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn state;\n\t\t};\n\t\t\n\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t// container and finishing the handling of a single gesture\n\t\t// Implemented via graph event dispatch loop to avoid duplicate events\n\t\t// in Firefox and Chrome\n\t\tgraph.addMouseListener(\n\t\t{\n\t\t\tmouseDown: function(sender, me)\n\t\t\t{\n\t\t\t\tgraph.popupMenuHandler.hideMenu();\n\t\t\t},\n\t\t\tmouseMove: function() { },\n\t\t\tmouseUp: function() { }\n\t\t});\n\t\t\n\t\tthis.moveHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\tif (graph.tooltipHandler != null && graph.tooltipHandler.isHideOnHover())\n\t\t\t{\n\t\t\t\tgraph.tooltipHandler.hide();\n\t\t\t}\n\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden' && !mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.endHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden')\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t}\n};\n\n/**\n * Function: create\n *\n * Creates the DOM nodes for the HTML display.\n */\nmxGraphView.prototype.createHtml = function()\n{\n\tvar container = this.graph.container;\n\t\n\tif (container != null)\n\t{\n\t\tthis.canvas = this.createHtmlPane('100%', '100%');\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\n\t\t// Uses minimal size for inner DIVs on Canvas. This is required\n\t\t// for correct event processing in IE. If we have an overlapping\n\t\t// DIV then the events on the cells are only fired for labels.\n\t\tthis.backgroundPane = this.createHtmlPane('1px', '1px');\n\t\tthis.drawPane = this.createHtmlPane('1px', '1px');\n\t\tthis.overlayPane = this.createHtmlPane('1px', '1px');\n\t\tthis.decoratorPane = this.createHtmlPane('1px', '1px');\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\n\t\tcontainer.appendChild(this.canvas);\n\t\tthis.updateContainerStyle(container);\n\t\t\n\t\t// Implements minWidth/minHeight in quirks mode\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tvar onResize = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar bounds = this.getGraphBounds();\n\t\t\t\tvar width = bounds.x + bounds.width + this.graph.border;\n\t\t\t\tvar height = bounds.y + bounds.height + this.graph.border;\n\t\t\t\t\n\t\t\t\tthis.updateHtmlCanvasSize(width, height);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addListener(window, 'resize', onResize);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHtmlCanvasSize\n * \n * Updates the size of the HTML canvas.\n */\nmxGraphView.prototype.updateHtmlCanvasSize = function(width, height)\n{\n\tif (this.graph.container != null)\n\t{\n\t\tvar ow = this.graph.container.offsetWidth;\n\t\tvar oh = this.graph.container.offsetHeight;\n\n\t\tif (ow < width)\n\t\t{\n\t\t\tthis.canvas.style.width = width + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.width = '100%';\n\t\t}\n\n\t\tif (oh < height)\n\t\t{\n\t\t\tthis.canvas.style.height = height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.height = '100%';\n\t\t}\n\t}\n};\n\n/**\n * Function: createHtmlPane\n * \n * Creates and returns a drawing pane in HTML (DIV).\n */\nmxGraphView.prototype.createHtmlPane = function(width, height)\n{\n\tvar pane = document.createElement('DIV');\n\t\n\tif (width != null && height != null)\n\t{\n\t\tpane.style.position = 'absolute';\n\t\tpane.style.left = '0px';\n\t\tpane.style.top = '0px';\n\n\t\tpane.style.width = width;\n\t\tpane.style.height = height;\n\t}\n\telse\n\t{\n\t\tpane.style.position = 'relative';\n\t}\n\t\n\treturn pane;\n};\n\n/**\n * Function: create\n *\n * Creates the DOM nodes for the VML display.\n */\nmxGraphView.prototype.createVml = function()\n{\n\tvar container = this.graph.container;\n\n\tif (container != null)\n\t{\n\t\tvar width = container.offsetWidth;\n\t\tvar height = container.offsetHeight;\n\t\tthis.canvas = this.createVmlPane(width, height);\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\t\n\t\tthis.backgroundPane = this.createVmlPane(width, height);\n\t\tthis.drawPane = this.createVmlPane(width, height);\n\t\tthis.overlayPane = this.createVmlPane(width, height);\n\t\tthis.decoratorPane = this.createVmlPane(width, height);\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\t\t\n\t\tcontainer.appendChild(this.canvas);\n\t}\n};\n\n/**\n * Function: createVmlPane\n * \n * Creates a drawing pane in VML (group).\n */\nmxGraphView.prototype.createVmlPane = function(width, height)\n{\n\tvar pane = document.createElement(mxClient.VML_PREFIX + ':group');\n\t\n\t// At this point the width and height are potentially\n\t// uninitialized. That's OK.\n\tpane.style.position = 'absolute';\n\tpane.style.left = '0px';\n\tpane.style.top = '0px';\n\n\tpane.style.width = width + 'px';\n\tpane.style.height = height + 'px';\n\n\tpane.setAttribute('coordsize', width + ',' + height);\n\tpane.setAttribute('coordorigin', '0,0');\n\t\n\treturn pane;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM nodes for the SVG display.\n */\nmxGraphView.prototype.createSvg = function()\n{\n\tvar container = this.graph.container;\n\tthis.canvas = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\n\t// For background image\n\tthis.backgroundPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.backgroundPane);\n\n\t// Adds two layers (background is early feature)\n\tthis.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.drawPane);\n\n\tthis.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.overlayPane);\n\t\n\tthis.decoratorPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.decoratorPane);\n\t\n\tvar root = document.createElementNS(mxConstants.NS_SVG, 'svg');\n\troot.style.left = '0px';\n\troot.style.top = '0px';\n\troot.style.width = '100%';\n\troot.style.height = '100%';\n\t\n\t// NOTE: In standards mode, the SVG must have block layout\n\t// in order for the container DIV to not show scrollbars.\n\troot.style.display = 'block';\n\troot.appendChild(this.canvas);\n\t\n\t// Workaround for scrollbars in IE11 and below\n\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t{\n\t\troot.style.overflow = 'hidden';\n\t}\n\n\tif (container != null)\n\t{\n\t\tcontainer.appendChild(root);\n\t\tthis.updateContainerStyle(container);\n\t}\n};\n\n/**\n * Function: updateContainerStyle\n * \n * Updates the style of the container after installing the SVG DOM elements.\n */\nmxGraphView.prototype.updateContainerStyle = function(container)\n{\n\t// Workaround for offset of container\n\tvar style = mxUtils.getCurrentStyle(container);\n\t\n\tif (style != null && style.position == 'static')\n\t{\n\t\tcontainer.style.position = 'relative';\n\t}\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tcontainer.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the view and all its resources.\n */\nmxGraphView.prototype.destroy = function()\n{\n\tvar root = (this.canvas != null) ? this.canvas.ownerSVGElement : null;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.canvas;\n\t}\n\t\n\tif (root != null && root.parentNode != null)\n\t{\n\t\tthis.clear(this.currentRoot, true);\n\t\tmxEvent.removeGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t\tmxEvent.release(this.graph.container);\n\t\troot.parentNode.removeChild(root);\n\t\t\n\t\tthis.moveHandler = null;\n\t\tthis.endHandler = null;\n\t\tthis.canvas = null;\n\t\tthis.backgroundPane = null;\n\t\tthis.drawPane = null;\n\t\tthis.overlayPane = null;\n\t\tthis.decoratorPane = null;\n\t}\n};\n\n/**\n * Class: mxCurrentRootChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxCurrentRootChange(view, root)\n{\n\tthis.view = view;\n\tthis.root = root;\n\tthis.previous = root;\n\tthis.isUp = root == null;\n\t\n\tif (!this.isUp)\n\t{\n\t\tvar tmp = this.view.currentRoot;\n\t\tvar model = this.view.graph.getModel();\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp == root)\n\t\t\t{\n\t\t\t\tthis.isUp = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = model.getParent(tmp);\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxCurrentRootChange.prototype.execute = function()\n{\n\tvar tmp = this.view.currentRoot;\n\tthis.view.currentRoot = this.previous;\n\tthis.previous = tmp;\n\n\tvar translate = this.view.graph.getTranslateForRoot(this.view.currentRoot);\n\t\n\tif (translate != null)\n\t{\n\t\tthis.view.translate = new mxPoint(-translate.x, -translate.y);\n\t}\n\n\tif (this.isUp)\n\t{\n\t\tthis.view.clear(this.view.currentRoot, true);\n\t\tthis.view.validate();\n\t}\n\telse\n\t{\n\t\tthis.view.refresh();\n\t}\n\t\n\tvar name = (this.isUp) ? mxEvent.UP : mxEvent.DOWN;\n\tthis.view.fireEvent(new mxEventObject(name,\n\t\t'root', this.view.currentRoot, 'previous', this.previous));\n\tthis.isUp = !this.isUp;\n};\n\n__mxOutput.mxGraphView = typeof mxGraphView !== 'undefined' ? mxGraphView : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraph\n *\n * Extends <mxEventSource> to implement a graph component for\n * the browser. This is the main class of the package. To activate\n * panning and connections use <setPanning> and <setConnectable>.\n * For rubberband selection you must create a new instance of\n * <mxRubberband>. The following listeners are added to\n * <mouseListeners> by default:\n * \n * - <tooltipHandler>: <mxTooltipHandler> that displays tooltips\n * - <panningHandler>: <mxPanningHandler> for panning and popup menus\n * - <connectionHandler>: <mxConnectionHandler> for creating connections\n * - <graphHandler>: <mxGraphHandler> for moving and cloning cells\n * \n * These listeners will be called in the above order if they are enabled.\n *\n * Background Images:\n * \n * To display a background image, set the image, image width and\n * image height using <setBackgroundImage>. If one of the\n * above values has changed then the <view>'s <mxGraphView.validate>\n * should be invoked.\n * \n * Cell Images:\n * \n * To use images in cells, a shape must be specified in the default\n * vertex style (or any named style). Possible shapes are\n * <mxConstants.SHAPE_IMAGE> and <mxConstants.SHAPE_LABEL>.\n * The code to change the shape used in the default vertex style,\n * the following code is used:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;\n * (end)\n * \n * For the default vertex style, the image to be displayed can be\n * specified in a cell's style using the <mxConstants.STYLE_IMAGE>\n * key and the image URL as a value, for example:\n * \n * (code)\n * image=http://www.example.com/image.gif\n * (end)\n * \n * For a named style, the the stylename must be the first element\n * of the cell style:\n * \n * (code)\n * stylename;image=http://www.example.com/image.gif\n * (end)\n * \n * A cell style can have any number of key=value pairs added, divided\n * by a semicolon as follows:\n * \n * (code)\n * [stylename;|key=value;]\n * (end)\n *\n * Labels:\n * \n * The cell labels are defined by <getLabel> which uses <convertValueToString>\n * if <labelsVisible> is true. If a label must be rendered as HTML markup, then\n * <isHtmlLabel> should return true for the respective cell. If all labels\n * contain HTML markup, <htmlLabels> can be set to true. NOTE: Enabling HTML\n * labels carries a possible security risk (see the section on security in\n * the manual).\n * \n * If wrapping is needed for a label, then <isHtmlLabel> and <isWrapping> must\n * return true for the cell whose label should be wrapped. See <isWrapping> for\n * an example.\n * \n * If clipping is needed to keep the rendering of a HTML label inside the\n * bounds of its vertex, then <isClipping> should return true for the\n * respective cell.\n * \n * By default, edge labels are movable and vertex labels are fixed. This can be\n * changed by setting <edgeLabelsMovable> and <vertexLabelsMovable>, or by\n * overriding <isLabelMovable>.\n *\n * In-place Editing:\n * \n * In-place editing is started with a doubleclick or by typing F2.\n * Programmatically, <edit> is used to check if the cell is editable\n * (<isCellEditable>) and call <startEditingAtCell>, which invokes\n * <mxCellEditor.startEditing>. The editor uses the value returned\n * by <getEditingValue> as the editing value.\n * \n * After in-place editing, <labelChanged> is called, which invokes\n * <mxGraphModel.setValue>, which in turn calls\n * <mxGraphModel.valueForCellChanged> via <mxValueChange>.\n * \n * The event that triggers in-place editing is passed through to the\n * <cellEditor>, which may take special actions depending on the type of the\n * event or mouse location, and is also passed to <getEditingValue>. The event\n * is then passed back to the event processing functions which can perform\n * specific actions based on the trigger event.\n * \n * Tooltips:\n * \n * Tooltips are implemented by <getTooltip>, which calls <getTooltipForCell>\n * if a cell is under the mousepointer. The default implementation checks if\n * the cell has a getTooltip function and calls it if it exists. Hence, in order\n * to provide custom tooltips, the cell must provide a getTooltip function, or \n * one of the two above functions must be overridden.\n * \n * Typically, for custom cell tooltips, the latter function is overridden as\n * follows:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * When using a config file, the function is overridden in the mxGraph section\n * using the following entry:\n * \n * (code)\n * <add as=\"getTooltipForCell\"><![CDATA[\n *   function(cell)\n *   {\n *     var label = this.convertValueToString(cell);\n *     return 'Tooltip for '+label;\n *   }\n * ]]></add>\n * (end)\n * \n * \"this\" refers to the graph in the implementation, so for example to check if \n * a cell is an edge, you use this.getModel().isEdge(cell)\n *\n * For replacing the default implementation of <getTooltipForCell> (rather than \n * replacing the function on a specific instance), the following code should be \n * used after loading the JavaScript files, but before creating a new mxGraph \n * instance using <mxGraph>:\n * \n * (code)\n * mxGraph.prototype.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * Shapes & Styles:\n * \n * The implementation of new shapes is demonstrated in the examples. We'll assume\n * that we have implemented a custom shape with the name BoxShape which we want\n * to use for drawing vertices. To use this shape, it must first be registered in\n * the cell renderer as follows:\n * \n * (code)\n * mxCellRenderer.registerShape('box', BoxShape);\n * (end)\n * \n * The code registers the BoxShape constructor under the name box in the cell\n * renderer of the graph. The shape can now be referenced using the shape-key in\n * a style definition. (The cell renderer contains a set of additional shapes,\n * namely one for each constant with a SHAPE-prefix in <mxConstants>.)\n *\n * Styles are a collection of key, value pairs and a stylesheet is a collection\n * of named styles. The names are referenced by the cellstyle, which is stored\n * in <mxCell.style> with the following format: [stylename;|key=value;]. The\n * string is resolved to a collection of key, value pairs, where the keys are\n * overridden with the values in the string.\n *\n * When introducing a new shape, the name under which the shape is registered\n * must be used in the stylesheet. There are three ways of doing this:\n * \n *   - By changing the default style, so that all vertices will use the new\n * \t\tshape\n *   - By defining a new style, so that only vertices with the respective\n * \t\tcellstyle will use the new shape\n *   - By using shape=box in the cellstyle's optional list of key, value pairs\n * \t\tto be overridden\n *\n * In the first case, the code to fetch and modify the default style for\n * vertices is as follows:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * (end)\n * \n * The code takes the default vertex style, which is used for all vertices that\n * do not have a specific cellstyle, and modifies the value for the shape-key\n * in-place to use the new BoxShape for drawing vertices. This is done by\n * assigning the box value in the second line, which refers to the name of the\n * BoxShape in the cell renderer.\n * \n * In the second case, a collection of key, value pairs is created and then\n * added to the stylesheet under a new name. In order to distinguish the\n * shapename and the stylename we'll use boxstyle for the stylename:\n * \n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * style[mxConstants.STYLE_STROKECOLOR] = '#000000';\n * style[mxConstants.STYLE_FONTCOLOR] = '#000000';\n * graph.getStylesheet().putCellStyle('boxstyle', style);\n * (end)\n * \n * The code adds a new style with the name boxstyle to the stylesheet. To use\n * this style with a cell, it must be referenced from the cellstyle as follows:\n * \n * (code)\n * var vertex = graph.insertVertex(parent, null, 'Hello, World!', 20, 20, 80, 20,\n * \t\t\t\t'boxstyle');\n * (end)\n * \n * To summarize, each new shape must be registered in the <mxCellRenderer> with\n * a unique name. That name is then used as the value of the shape-key in a\n * default or custom style. If there are multiple custom shapes, then there\n * should be a separate style for each shape.\n * \n * Inheriting Styles:\n * \n * For fill-, stroke-, gradient-, font- and indicatorColors special keywords\n * can be used. The inherit keyword for one of these colors will inherit the\n * color for the same key from the parent cell. The swimlane keyword does the\n * same, but inherits from the nearest swimlane in the ancestor hierarchy.\n * Finally, the indicated keyword will use the color of the indicator as the\n * color for the given key.\n * \n * Scrollbars:\n * \n * The <containers> overflow CSS property defines if scrollbars are used to\n * display the graph. For values of 'auto' or 'scroll', the scrollbars will\n * be shown. Note that the <resizeContainer> flag is normally not used\n * together with scrollbars, as it will resize the container to match the\n * size of the graph after each change.\n * \n * Multiplicities and Validation:\n * \n * To control the possible connections in mxGraph, <getEdgeValidationError> is\n * used. The default implementation of the function uses <multiplicities>,\n * which is an array of <mxMultiplicity>. Using this class allows to establish\n * simple multiplicities, which are enforced by the graph.\n * \n * The <mxMultiplicity> uses <mxCell.is> to determine for which terminals it\n * applies. The default implementation of <mxCell.is> works with DOM nodes (XML\n * nodes) and checks if the given type parameter matches the nodeName of the\n * node (case insensitive). Optionally, an attributename and value can be\n * specified which are also checked.\n * \n * <getEdgeValidationError> is called whenever the connectivity of an edge\n * changes. It returns an empty string or an error message if the edge is\n * invalid or null if the edge is valid. If the returned string is not empty\n * then it is displayed as an error message.\n * \n * <mxMultiplicity> allows to specify the multiplicity between a terminal and\n * its possible neighbors. For example, if any rectangle may only be connected\n * to, say, a maximum of two circles you can add the following rule to\n * <multiplicities>:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only shape targets allowed'));\n * (end)\n * \n * This will display the first error message whenever a rectangle is connected\n * to more than two circles and the second error message if a rectangle is\n * connected to anything but a circle.\n * \n * For certain multiplicities, such as a minimum of 1 connection, which cannot\n * be enforced at cell creation time (unless the cell is created together with\n * the connection), mxGraph offers <validate> which checks all multiplicities\n * for all cells and displays the respective error messages in an overlay icon\n * on the cells.\n * \n * If a cell is collapsed and contains validation errors, a respective warning\n * icon is attached to the collapsed cell.\n * \n * Auto-Layout:\n * \n * For automatic layout, the <getLayout> hook is provided in <mxLayoutManager>.\n * It can be overridden to return a layout algorithm for the children of a\n * given cell.\n * \n * Unconnected edges:\n * \n * The default values for all switches are designed to meet the requirements of\n * general diagram drawing applications. A very typical set of settings to\n * avoid edges that are not connected is the following:\n * \n * (code)\n * graph.setAllowDanglingEdges(false);\n * graph.setDisconnectOnMove(false);\n * (end)\n * \n * Setting the <cloneInvalidEdges> switch to true is optional. This switch\n * controls if edges are inserted after a copy, paste or clone-drag if they are\n * invalid. For example, edges are invalid if copied or control-dragged without \n * having selected the corresponding terminals and allowDanglingEdges is\n * false, in which case the edges will not be cloned if the switch is false.\n * \n * Output:\n * \n * To produce an XML representation for a diagram, the following code can be\n * used.\n * \n * (code)\n * var enc = new mxCodec(mxUtils.createXmlDocument());\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will produce an XML node than can be handled using the DOM API or\n * turned into a string representation using the following code:\n * \n * (code)\n * var xml = mxUtils.getXml(node);\n * (end)\n * \n * To obtain a formatted string, mxUtils.getPrettyXml can be used instead.\n * \n * This string can now be stored in a local persistent storage (for example\n * using Google Gears) or it can be passed to a backend using mxUtils.post as\n * follows. The url variable is the URL of the Java servlet, PHP page or HTTP\n * handler, depending on the server.\n * \n * (code)\n * var xmlString = encodeURIComponent(mxUtils.getXml(node));\n * mxUtils.post(url, 'xml='+xmlString, function(req)\n * {\n *   // Process server response using req of type mxXmlRequest\n * });\n * (end)\n * \n * Input:\n * \n * To load an XML representation of a diagram into an existing graph object\n * mxUtils.load can be used as follows. The url variable is the URL of the Java\n * servlet, PHP page or HTTP handler that produces the XML string.\n * \n * (code)\n * var xmlDoc = mxUtils.load(url).getXml();\n * var node = xmlDoc.documentElement;\n * var dec = new mxCodec(node.ownerDocument);\n * dec.decode(node, graph.getModel());\n * (end)\n * \n * For creating a page that loads the client and a diagram using a single\n * request please refer to the deployment examples in the backends.\n * \n * Functional dependencies:\n * \n * (see images/callgraph.png)\n * \n * Resources:\n *\n * resources/graph - Language resources for mxGraph\n *\n * Group: Events\n * \n * Event: mxEvent.ROOT\n * \n * Fires if the root in the model has changed. This event has no properties.\n * \n * Event: mxEvent.ALIGN_CELLS\n * \n * Fires between begin- and endUpdate in <alignCells>. The <code>cells</code>\n * and <code>align</code> properties contain the respective arguments that were\n * passed to <alignCells>.\n *\n * Event: mxEvent.FLIP_EDGE\n *\n * Fires between begin- and endUpdate in <flipEdge>. The <code>edge</code>\n * property contains the edge passed to <flipEdge>.\n * \n * Event: mxEvent.ORDER_CELLS\n * \n * Fires between begin- and endUpdate in <orderCells>. The <code>cells</code>\n * and <code>back</code> properties contain the respective arguments that were\n * passed to <orderCells>.\n *\n * Event: mxEvent.CELLS_ORDERED\n *\n * Fires between begin- and endUpdate in <cellsOrdered>. The <code>cells</code>\n * and <code>back</code> arguments contain the respective arguments that were\n * passed to <cellsOrdered>.\n * \n * Event: mxEvent.GROUP_CELLS\n * \n * Fires between begin- and endUpdate in <groupCells>. The <code>group</code>,\n * <code>cells</code> and <code>border</code> arguments contain the respective\n * arguments that were passed to <groupCells>.\n * \n * Event: mxEvent.UNGROUP_CELLS\n * \n * Fires between begin- and endUpdate in <ungroupCells>. The <code>cells</code>\n * property contains the array of cells that was passed to <ungroupCells>.\n * \n * Event: mxEvent.REMOVE_CELLS_FROM_PARENT\n * \n * Fires between begin- and endUpdate in <removeCellsFromParent>. The\n * <code>cells</code> property contains the array of cells that was passed to\n * <removeCellsFromParent>.\n * \n * Event: mxEvent.ADD_CELLS\n * \n * Fires between begin- and endUpdate in <addCells>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code> and\n * <code>target</code> properties contain the respective arguments that were\n * passed to <addCells>.\n * \n * Event: mxEvent.CELLS_ADDED\n * \n * Fires between begin- and endUpdate in <cellsAdded>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code>,\n * <code>target</code> and <code>absolute</code> properties contain the\n * respective arguments that were passed to <cellsAdded>.\n * \n * Event: mxEvent.REMOVE_CELLS\n * \n * Fires between begin- and endUpdate in <removeCells>. The <code>cells</code>\n * and <code>includeEdges</code> arguments contain the respective arguments\n * that were passed to <removeCells>.\n * \n * Event: mxEvent.CELLS_REMOVED\n * \n * Fires between begin- and endUpdate in <cellsRemoved>. The <code>cells</code>\n * argument contains the array of cells that was removed.\n * \n * Event: mxEvent.SPLIT_EDGE\n * \n * Fires between begin- and endUpdate in <splitEdge>. The <code>edge</code>\n * property contains the edge to be splitted, the <code>cells</code>,\n * <code>newEdge</code>, <code>dx</code> and <code>dy</code> properties contain\n * the respective arguments that were passed to <splitEdge>.\n * \n * Event: mxEvent.TOGGLE_CELLS\n * \n * Fires between begin- and endUpdate in <toggleCells>. The <code>show</code>,\n * <code>cells</code> and <code>includeEdges</code> properties contain the\n * respective arguments that were passed to <toggleCells>.\n * \n * Event: mxEvent.FOLD_CELLS\n * \n * Fires between begin- and endUpdate in <foldCells>. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to <foldCells>.\n * \n * Event: mxEvent.CELLS_FOLDED\n * \n * Fires between begin- and endUpdate in cellsFolded. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to\n * <cellsFolded>.\n * \n * Event: mxEvent.UPDATE_CELL_SIZE\n * \n * Fires between begin- and endUpdate in <updateCellSize>. The\n * <code>cell</code> and <code>ignoreChildren</code> properties contain the\n * respective arguments that were passed to <updateCellSize>.\n * \n * Event: mxEvent.RESIZE_CELLS\n * \n * Fires between begin- and endUpdate in <resizeCells>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <resizeCells>.\n * \n * Event: mxEvent.CELLS_RESIZED\n * \n * Fires between begin- and endUpdate in <cellsResized>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <cellsResized>.\n * \n * Event: mxEvent.MOVE_CELLS\n * \n * Fires between begin- and endUpdate in <moveCells>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code>, <code>clone</code>, <code>target</code>\n * and <code>event</code> properties contain the respective arguments that\n * were passed to <moveCells>.\n * \n * Event: mxEvent.CELLS_MOVED\n * \n * Fires between begin- and endUpdate in <cellsMoved>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code> and <code>disconnect</code> properties\n * contain the respective arguments that were passed to <cellsMoved>.\n * \n * Event: mxEvent.CONNECT_CELL\n * \n * Fires between begin- and endUpdate in <connectCell>. The <code>edge</code>,\n * <code>terminal</code> and <code>source</code> properties contain the\n * respective arguments that were passed to <connectCell>.\n * \n * Event: mxEvent.CELL_CONNECTED\n * \n * Fires between begin- and endUpdate in <cellConnected>. The\n * <code>edge</code>, <code>terminal</code> and <code>source</code> properties\n * contain the respective arguments that were passed to <cellConnected>.\n * \n * Event: mxEvent.REFRESH\n * \n * Fires after <refresh> was executed. This event has no properties.\n *\n * Event: mxEvent.CLICK\n * \n * Fires in <click> after a click event. The <code>event</code> property\n * contains the original mouse event and <code>cell</code> property contains\n * the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.DOUBLE_CLICK\n *\n * Fires in <dblClick> after a double click. The <code>event</code> property\n * contains the original mouse event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.GESTURE\n *\n * Fires in <fireGestureEvent> after a touch gesture. The <code>event</code>\n * property contains the original gesture end event and the <code>cell</code>\n * property contains the optional cell associated with the gesture.\n *\n * Event: mxEvent.TAP_AND_HOLD\n *\n * Fires in <tapAndHold> if a tap and hold event was detected. The <code>event</code>\n * property contains the initial touch event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n *\n * Event: mxEvent.FIRE_MOUSE_EVENT\n *\n * Fires in <fireMouseEvent> before the mouse listeners are invoked. The\n * <code>eventName</code> property contains the event name and the\n * <code>event</code> property contains the <mxMouseEvent>.\n *\n * Event: mxEvent.SIZE\n *\n * Fires after <sizeDidChange> was executed. The <code>bounds</code> property\n * contains the new graph bounds.\n *\n * Event: mxEvent.START_EDITING\n *\n * Fires before the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STARTED\n *\n * Fires after the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STOPPED\n *\n * Fires after the in-place editor stops in <stopEditing>.\n *\n * Event: mxEvent.LABEL_CHANGED\n *\n * Fires between begin- and endUpdate in <cellLabelChanged>. The\n * <code>cell</code> property contains the cell, the <code>value</code>\n * property contains the new value for the cell, the <code>old</code> property\n * contains the old value and the optional <code>event</code> property contains\n * the mouse event that started the edit.\n * \n * Event: mxEvent.ADD_OVERLAY\n *\n * Fires after an overlay is added in <addCellOverlay>. The <code>cell</code>\n * property contains the cell and the <code>overlay</code> property contains\n * the <mxCellOverlay> that was added.\n *\n * Event: mxEvent.REMOVE_OVERLAY\n *\n * Fires after an overlay is removed in <removeCellOverlay> and\n * <removeCellOverlays>. The <code>cell</code> property contains the cell and\n * the <code>overlay</code> property contains the <mxCellOverlay> that was\n * removed.\n * \n * Constructor: mxGraph\n * \n * Constructs a new mxGraph in the specified container. Model is an optional\n * mxGraphModel. If no model is provided, a new mxGraphModel instance is \n * used as the model. The container must have a valid owner document prior \n * to calling this function in Internet Explorer. RenderHint is a string to\n * affect the display performance and rendering in IE, but not in SVG-based \n * browsers. The parameter is mapped to <dialect>, which may \n * be one of <mxConstants.DIALECT_SVG> for SVG-based browsers, \n * <mxConstants.DIALECT_STRICTHTML> for fastest display mode,\n * <mxConstants.DIALECT_PREFERHTML> for faster display mode,\n * <mxConstants.DIALECT_MIXEDHTML> for fast and <mxConstants.DIALECT_VML> \n * for exact display mode (slowest). The dialects are defined in mxConstants.\n * The default values are DIALECT_SVG for SVG-based browsers and\n * DIALECT_MIXED for IE.\n *\n * The possible values for the renderingHint parameter are explained below:\n * \n * fast - The parameter is based on the fact that the display performance is \n * highly improved in IE if the VML is not contained within a VML group \n * element. The lack of a group element only slightly affects the display while \n * panning, but improves the performance by almost a factor of 2, while keeping \n * the display sufficiently accurate. This also allows to render certain shapes as HTML \n * if the display accuracy is not affected, which is implemented by \n * <mxShape.isMixedModeHtml>. This is the default setting and is mapped to\n * DIALECT_MIXEDHTML.\n * faster - Same as fast, but more expensive shapes are avoided. This is \n * controlled by <mxShape.preferModeHtml>. The default implementation will \n * avoid gradients and rounded rectangles, but more significant shapes, such \n * as rhombus, ellipse, actor and cylinder will be rendered accurately. This \n * setting is mapped to DIALECT_PREFERHTML.\n * fastest - Almost anything will be rendered in Html. This allows for \n * rectangles, labels and images. This setting is mapped to\n * DIALECT_STRICTHTML.\n * exact - If accurate panning is required and if the diagram is small (up\n * to 100 cells), then this value should be used. In this mode, a group is \n * created that contains the VML. This allows for accurate panning and is \n * mapped to DIALECT_VML.\n *\n * Example:\n * \n * To create a graph inside a DOM node with an id of graph:\n * (code)\n * var container = document.getElementById('graph');\n * var graph = new mxGraph(container);\n * (end)\n * \n * Parameters:\n * \n * container - Optional DOM node that acts as a container for the graph.\n * If this is null then the container can be initialized later using\n * <init>.\n * model - Optional <mxGraphModel> that constitutes the graph data.\n * renderHint - Optional string that specifies the display accuracy and\n * performance. Default is mxConstants.DIALECT_MIXEDHTML (for IE).\n * stylesheet - Optional <mxStylesheet> to be used in the graph.\n */\nfunction mxGraph(container, model, renderHint, stylesheet)\n{\n\t// Initializes the variable in case the prototype has been\n\t// modified to hold some listeners (which is possible because\n\t// the createHandlers call is executed regardless of the\n\t// arguments passed into the ctor).\n\tthis.mouseListeners = null;\n\t\n\t// Converts the renderHint into a dialect\n\tthis.renderHint = renderHint;\n\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_SVG;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_EXACT && mxClient.IS_VML)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_VML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTEST)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_STRICTHTML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTER)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_PREFERHTML;\n\t}\n\telse // default for VML\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_MIXEDHTML;\n\t}\n\t\n\t// Initializes the main members that do not require a container\n\tthis.model = (model != null) ? model : new mxGraphModel();\n\tthis.multiplicities = [];\n\tthis.imageBundles = [];\n\tthis.cellRenderer = this.createCellRenderer();\n\tthis.setSelectionModel(this.createSelectionModel());\n\tthis.setStylesheet((stylesheet != null) ? stylesheet : this.createStylesheet());\n\tthis.view = this.createGraphView();\n\t\n\t// Adds a graph model listener to update the view\n\tthis.graphModelChangeListener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t});\n\t\n\tthis.model.addListener(mxEvent.CHANGE, this.graphModelChangeListener);\n\n\t// Installs basic event handlers with disabled default settings.\n\tthis.createHandlers();\n\t\n\t// Initializes the display if a container was specified\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n\t\n\tthis.view.revalidate();\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/graph');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/graph');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxGraph.prototype = new mxEventSource();\nmxGraph.prototype.constructor = mxGraph;\n\n/**\n * Group: Variables\n */\n\n/**\n * Variable: mouseListeners\n * \n * Holds the mouse event listeners. See <fireMouseEvent>.\n */\nmxGraph.prototype.mouseListeners = null;\n\n/**\n * Variable: isMouseDown\n * \n * Holds the state of the mouse button.\n */\nmxGraph.prototype.isMouseDown = false;\n\n/**\n * Variable: model\n * \n * Holds the <mxGraphModel> that contains the cells to be displayed.\n */\nmxGraph.prototype.model = null;\n\n/**\n * Variable: view\n * \n * Holds the <mxGraphView> that caches the <mxCellStates> for the cells.\n */\nmxGraph.prototype.view = null;\n\n/**\n * Variable: stylesheet\n * \n * Holds the <mxStylesheet> that defines the appearance of the cells.\n * \n * \n * Example:\n * \n * Use the following code to read a stylesheet into an existing graph.\n * \n * (code)\n * var req = mxUtils.load('stylesheet.xml');\n * var root = req.getDocumentElement();\n * var dec = new mxCodec(root.ownerDocument);\n * dec.decode(root, graph.stylesheet);\n * (end)\n */\nmxGraph.prototype.stylesheet = null;\n\t\n/**\n * Variable: selectionModel\n * \n * Holds the <mxGraphSelectionModel> that models the current selection.\n */\nmxGraph.prototype.selectionModel = null;\n\n/**\n * Variable: cellEditor\n * \n * Holds the <mxCellEditor> that is used as the in-place editing.\n */\nmxGraph.prototype.cellEditor = null;\n\n/**\n * Variable: cellRenderer\n * \n * Holds the <mxCellRenderer> for rendering the cells in the graph.\n */\nmxGraph.prototype.cellRenderer = null;\n\n/**\n * Variable: multiplicities\n * \n * An array of <mxMultiplicities> describing the allowed\n * connections in a graph.\n */\nmxGraph.prototype.multiplicities = null;\n\n/**\n * Variable: renderHint\n * \n * RenderHint as it was passed to the constructor.\n */\nmxGraph.prototype.renderHint = null;\n\n/**\n * Variable: dialect\n * \n * Dialect to be used for drawing the graph. Possible values are all\n * constants in <mxConstants> with a DIALECT-prefix.\n */\nmxGraph.prototype.dialect = null;\n\n/**\n * Variable: gridSize\n * \n * Specifies the grid size. Default is 10.\n */\nmxGraph.prototype.gridSize = 10;\n\t\n/**\n * Variable: gridEnabled\n * \n * Specifies if the grid is enabled. This is used in <snap>. Default is\n * true.\n */\nmxGraph.prototype.gridEnabled = true;\n\n/**\n * Variable: portsEnabled\n * \n * Specifies if ports are enabled. This is used in <cellConnected> to update\n * the respective style. Default is true.\n */\nmxGraph.prototype.portsEnabled = true;\n\n/**\n * Variable: nativeDoubleClickEnabled\n * \n * Specifies if native double click events should be detected. Default is true.\n */\nmxGraph.prototype.nativeDblClickEnabled = true;\n\n/**\n * Variable: doubleTapEnabled\n * \n * Specifies if double taps on touch-based devices should be handled as a\n * double click. Default is true.\n */\nmxGraph.prototype.doubleTapEnabled = true;\n\n/**\n * Variable: doubleTapTimeout\n * \n * Specifies the timeout for double taps and non-native double clicks. Default\n * is 500 ms.\n */\nmxGraph.prototype.doubleTapTimeout = 500;\n\n/**\n * Variable: doubleTapTolerance\n * \n * Specifies the tolerance for double taps and double clicks in quirks mode.\n * Default is 25 pixels.\n */\nmxGraph.prototype.doubleTapTolerance = 25;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the x-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the y-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchTime\n * \n * Holds the time of the last touch event for double click detection.\n */\nmxGraph.prototype.lastTouchTime = 0;\n\n/**\n * Variable: tapAndHoldEnabled\n * \n * Specifies if tap and hold should be used for starting connections on touch-based\n * devices. Default is true.\n */\nmxGraph.prototype.tapAndHoldEnabled = true;\n\n/**\n * Variable: tapAndHoldDelay\n * \n * Specifies the time for a tap and hold. Default is 500 ms.\n */\nmxGraph.prototype.tapAndHoldDelay = 500;\n\n/**\n * Variable: tapAndHoldInProgress\n * \n * True if the timer for tap and hold events is running.\n */\nmxGraph.prototype.tapAndHoldInProgress = false;\n\n/**\n * Variable: tapAndHoldValid\n * \n * True as long as the timer is running and the touch events\n * stay within the given <tapAndHoldTolerance>.\n */\nmxGraph.prototype.tapAndHoldValid = false;\n\n/**\n * Variable: initialTouchX\n * \n * Holds the x-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchX = 0;\n\n/**\n * Variable: initialTouchY\n * \n * Holds the y-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchY = 0;\n\n/**\n * Variable: tolerance\n * \n * Tolerance for a move to be handled as a single click.\n * Default is 4 pixels.\n */\nmxGraph.prototype.tolerance = 4;\n\n/**\n * Variable: defaultOverlap\n * \n * Value returned by <getOverlap> if <isAllowOverlapParent> returns\n * true for the given cell. <getOverlap> is used in <constrainChild> if\n * <isConstrainChild> returns true. The value specifies the\n * portion of the child which is allowed to overlap the parent.\n */\nmxGraph.prototype.defaultOverlap = 0.5;\n\n/**\n * Variable: defaultParent\n * \n * Specifies the default parent to be used to insert new cells.\n * This is used in <getDefaultParent>. Default is null.\n */\nmxGraph.prototype.defaultParent = null;\n\n/**\n * Variable: alternateEdgeStyle\n * \n * Specifies the alternate edge style to be used if the main control point\n * on an edge is being doubleclicked. Default is null.\n */\nmxGraph.prototype.alternateEdgeStyle = null;\n\n/**\n * Variable: backgroundImage\n *\n * Specifies the <mxImage> to be returned by <getBackgroundImage>. Default\n * is null.\n * \n * Example:\n *\n * (code)\n * var img = new mxImage('http://www.example.com/maps/examplemap.jpg', 1024, 768);\n * graph.setBackgroundImage(img);\n * graph.view.validate();\n * (end)\n */\nmxGraph.prototype.backgroundImage = null;\n\n/**\n * Variable: pageVisible\n *\n * Specifies if the background page should be visible. Default is false.\n * Not yet implemented.\n */\nmxGraph.prototype.pageVisible = false;\n\n/**\n * Variable: pageBreaksVisible\n * \n * Specifies if a dashed line should be drawn between multiple pages. Default\n * is false. If you change this value while a graph is being displayed then you\n * should call <sizeDidChange> to force an update of the display.\n */\nmxGraph.prototype.pageBreaksVisible = false;\n\n/**\n * Variable: pageBreakColor\n * \n * Specifies the color for page breaks. Default is 'gray'.\n */\nmxGraph.prototype.pageBreakColor = 'gray';\n\n/**\n * Variable: pageBreakDashed\n * \n * Specifies the page breaks should be dashed. Default is true.\n */\nmxGraph.prototype.pageBreakDashed = true;\n\n/**\n * Variable: minPageBreakDist\n * \n * Specifies the minimum distance for page breaks to be visible. Default is\n * 20 (in pixels).\n */\nmxGraph.prototype.minPageBreakDist = 20;\n\n/**\n * Variable: preferPageSize\n * \n * Specifies if the graph size should be rounded to the next page number in\n * <sizeDidChange>. This is only used if the graph container has scrollbars.\n * Default is false.\n */\nmxGraph.prototype.preferPageSize = false;\n\n/**\n * Variable: pageFormat\n *\n * Specifies the page format for the background page. Default is\n * <mxConstants.PAGE_FORMAT_A4_PORTRAIT>. This is used as the default in\n * <mxPrintPreview> and for painting the background page if <pageVisible> is\n * true and the pagebreaks if <pageBreaksVisible> is true.\n */\nmxGraph.prototype.pageFormat = mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\n/**\n * Variable: pageScale\n *\n * Specifies the scale of the background page. Default is 1.5.\n * Not yet implemented.\n */\nmxGraph.prototype.pageScale = 1.5;\n\n/**\n * Variable: enabled\n * \n * Specifies the return value for <isEnabled>. Default is true.\n */\nmxGraph.prototype.enabled = true;\n\n/**\n * Variable: escapeEnabled\n * \n * Specifies if <mxKeyHandler> should invoke <escape> when the escape key\n * is pressed. Default is true.\n */\nmxGraph.prototype.escapeEnabled = true;\n\n/**\n * Variable: invokesStopCellEditing\n * \n * If true, when editing is to be stopped by way of selection changing,\n * data in diagram changing or other means stopCellEditing is invoked, and\n * changes are saved. This is implemented in a focus handler in\n * <mxCellEditor>. Default is true.\n */\nmxGraph.prototype.invokesStopCellEditing = true;\n\n/**\n * Variable: enterStopsCellEditing\n * \n * If true, pressing the enter key without pressing control or shift will stop\n * editing and accept the new value. This is used in <mxCellEditor> to stop\n * cell editing. Note: You can always use F2 and escape to stop editing.\n * Default is false.\n */\nmxGraph.prototype.enterStopsCellEditing = false;\n\n/**\n * Variable: useScrollbarsForPanning\n * \n * Specifies if scrollbars should be used for panning in <panGraph> if\n * any scrollbars are available. If scrollbars are enabled in CSS, but no\n * scrollbars appear because the graph is smaller than the container size,\n * then no panning occurs if this is true. Default is true.\n */\nmxGraph.prototype.useScrollbarsForPanning = true;\n\n/**\n * Variable: exportEnabled\n * \n * Specifies the return value for <canExportCell>. Default is true.\n */\nmxGraph.prototype.exportEnabled = true;\n\n/**\n * Variable: importEnabled\n * \n * Specifies the return value for <canImportCell>. Default is true.\n */\nmxGraph.prototype.importEnabled = true;\n\n/**\n * Variable: cellsLocked\n * \n * Specifies the return value for <isCellLocked>. Default is false.\n */\nmxGraph.prototype.cellsLocked = false;\n\n/**\n * Variable: cellsCloneable\n * \n * Specifies the return value for <isCellCloneable>. Default is true.\n */\nmxGraph.prototype.cellsCloneable = true;\n\n/**\n * Variable: foldingEnabled\n * \n * Specifies if folding (collapse and expand via an image icon in the graph\n * should be enabled). Default is true.\n */\nmxGraph.prototype.foldingEnabled = true;\n\n/**\n * Variable: cellsEditable\n * \n * Specifies the return value for <isCellEditable>. Default is true.\n */\nmxGraph.prototype.cellsEditable = true;\n\t\t\n/**\n * Variable: cellsDeletable\n * \n * Specifies the return value for <isCellDeletable>. Default is true.\n */\nmxGraph.prototype.cellsDeletable = true;\n\n/**\n * Variable: cellsMovable\n * \n * Specifies the return value for <isCellMovable>. Default is true.\n */\nmxGraph.prototype.cellsMovable = true;\n\t\n/**\n * Variable: edgeLabelsMovable\n * \n * Specifies the return value for edges in <isLabelMovable>. Default is true.\n */\nmxGraph.prototype.edgeLabelsMovable = true;\n\t\n/**\n * Variable: vertexLabelsMovable\n * \n * Specifies the return value for vertices in <isLabelMovable>. Default is false.\n */\nmxGraph.prototype.vertexLabelsMovable = false;\n\n/**\n * Variable: dropEnabled\n * \n * Specifies the return value for <isDropEnabled>. Default is false.\n */\nmxGraph.prototype.dropEnabled = false;\n\n/**\n * Variable: splitEnabled\n * \n * Specifies if dropping onto edges should be enabled. This is ignored if\n * <dropEnabled> is false. If enabled, it will call <splitEdge> to carry\n * out the drop operation. Default is true.\n */\nmxGraph.prototype.splitEnabled = true;\n\n/**\n * Variable: cellsResizable\n * \n * Specifies the return value for <isCellResizable>. Default is true.\n */\nmxGraph.prototype.cellsResizable = true;\n\n/**\n * Variable: cellsBendable\n * \n * Specifies the return value for <isCellsBendable>. Default is true.\n */\nmxGraph.prototype.cellsBendable = true;\n\n/**\n * Variable: cellsSelectable\n * \n * Specifies the return value for <isCellSelectable>. Default is true.\n */\nmxGraph.prototype.cellsSelectable = true;\n\n/**\n * Variable: cellsDisconnectable\n * \n * Specifies the return value for <isCellDisconntable>. Default is true.\n */\nmxGraph.prototype.cellsDisconnectable = true;\n\n/**\n * Variable: autoSizeCells\n * \n * Specifies if the graph should automatically update the cell size after an\n * edit. This is used in <isAutoSizeCell>. Default is false.\n */\nmxGraph.prototype.autoSizeCells = false;\n\n/**\n * Variable: autoSizeCellsOnAdd\n * \n * Specifies if autoSize style should be applied when cells are added. Default is false.\n */\nmxGraph.prototype.autoSizeCellsOnAdd = false;\n\n/**\n * Variable: autoScroll\n * \n * Specifies if the graph should automatically scroll if the mouse goes near\n * the container edge while dragging. This is only taken into account if the\n * container has scrollbars. Default is true.\n * \n * If you need this to work without scrollbars then set <ignoreScrollbars> to\n * true. Please consult the <ignoreScrollbars> for details. In general, with\n * no scrollbars, the use of <allowAutoPanning> is recommended.\n */\nmxGraph.prototype.autoScroll = true;\n\n/**\n * Variable: ignoreScrollbars\n * \n * Specifies if the graph should automatically scroll regardless of the\n * scrollbars. This will scroll the container using positive values for\n * scroll positions (ie usually only rightwards and downwards). To avoid\n * possible conflicts with panning, set <translateToScrollPosition> to true.\n */\nmxGraph.prototype.ignoreScrollbars = false;\n\n/**\n * Variable: translateToScrollPosition\n * \n * Specifies if the graph should automatically convert the current scroll\n * position to a translate in the graph view when a mouseUp event is received.\n * This can be used to avoid conflicts when using <autoScroll> and\n * <ignoreScrollbars> with no scrollbars in the container.\n */\nmxGraph.prototype.translateToScrollPosition = false;\n\n/**\n * Variable: timerAutoScroll\n * \n * Specifies if autoscrolling should be carried out via mxPanningManager even\n * if the container has scrollbars. This disables <scrollPointToVisible> and\n * uses <mxPanningManager> instead. If this is true then <autoExtend> is\n * disabled. It should only be used with a scroll buffer or when scollbars\n * are visible and scrollable in all directions. Default is false.\n */\nmxGraph.prototype.timerAutoScroll = false;\n\n/**\n * Variable: allowAutoPanning\n * \n * Specifies if panning via <panGraph> should be allowed to implement autoscroll\n * if no scrollbars are available in <scrollPointToVisible>. To enable panning\n * inside the container, near the edge, set <mxPanningManager.border> to a\n * positive value. Default is false.\n */\nmxGraph.prototype.allowAutoPanning = false;\n\n/**\n * Variable: autoExtend\n * \n * Specifies if the size of the graph should be automatically extended if the\n * mouse goes near the container edge while dragging. This is only taken into\n * account if the container has scrollbars. Default is true. See <autoScroll>.\n */\nmxGraph.prototype.autoExtend = true;\n\n/**\n * Variable: maximumGraphBounds\n * \n * <mxRectangle> that specifies the area in which all cells in the diagram\n * should be placed. Uses in <getMaximumGraphBounds>. Use a width or height of\n * 0 if you only want to give a upper, left corner.\n */\nmxGraph.prototype.maximumGraphBounds = null;\n\n/**\n * Variable: minimumGraphSize\n * \n * <mxRectangle> that specifies the minimum size of the graph. This is ignored\n * if the graph container has no scrollbars. Default is null.\n */\nmxGraph.prototype.minimumGraphSize = null;\n\n/**\n * Variable: minimumContainerSize\n * \n * <mxRectangle> that specifies the minimum size of the <container> if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.minimumContainerSize = null;\n\t\t\n/**\n * Variable: maximumContainerSize\n * \n * <mxRectangle> that specifies the maximum size of the container if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.maximumContainerSize = null;\n\n/**\n * Variable: resizeContainer\n * \n * Specifies if the container should be resized to the graph size when\n * the graph size has changed. Default is false.\n */\nmxGraph.prototype.resizeContainer = false;\n\n/**\n * Variable: border\n * \n * Border to be added to the bottom and right side when the container is\n * being resized after the graph has been changed. Default is 0.\n */\nmxGraph.prototype.border = 0;\n\t\t\n/**\n * Variable: keepEdgesInForeground\n * \n * Specifies if edges should appear in the foreground regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInForeground = false;\n\n/**\n * Variable: keepEdgesInBackground\n * \n * Specifies if edges should appear in the background regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInBackground = false;\n\n/**\n * Variable: allowNegativeCoordinates\n * \n * Specifies if negative coordinates for vertices are allowed. Default is true.\n */\nmxGraph.prototype.allowNegativeCoordinates = true;\n\n/**\n * Variable: constrainChildren\n * \n * Specifies if a child should be constrained inside the parent bounds after a\n * move or resize of the child. Default is true.\n */\nmxGraph.prototype.constrainChildren = true;\n\n/**\n * Variable: constrainRelativeChildren\n * \n * Specifies if child cells with relative geometries should be constrained\n * inside the parent bounds, if <constrainChildren> is true, and/or the\n * <maximumGraphBounds>. Default is false.\n */\nmxGraph.prototype.constrainRelativeChildren = false;\n\n/**\n * Variable: extendParents\n * \n * Specifies if a parent should contain the child bounds after a resize of\n * the child. Default is true. This has precedence over <constrainChildren>.\n */\nmxGraph.prototype.extendParents = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is true.\n */\nmxGraph.prototype.extendParentsOnAdd = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is false for backwards compatiblity.\n */\nmxGraph.prototype.extendParentsOnMove = false;\n\n/**\n * Variable: recursiveResize\n * \n * Specifies the return value for <isRecursiveResize>. Default is\n * false for backwards compatiblity.\n */\nmxGraph.prototype.recursiveResize = false;\n\n/**\n * Variable: collapseToPreferredSize\n * \n * Specifies if the cell size should be changed to the preferred size when\n * a cell is first collapsed. Default is true.\n */\nmxGraph.prototype.collapseToPreferredSize = true;\n\n/**\n * Variable: zoomFactor\n * \n * Specifies the factor used for <zoomIn> and <zoomOut>. Default is 1.2\n * (120%).\n */\nmxGraph.prototype.zoomFactor = 1.2;\n\n/**\n * Variable: keepSelectionVisibleOnZoom\n * \n * Specifies if the viewport should automatically contain the selection cells\n * after a zoom operation. Default is false.\n */\nmxGraph.prototype.keepSelectionVisibleOnZoom = false;\n\n/**\n * Variable: centerZoom\n * \n * Specifies if the zoom operations should go into the center of the actual\n * diagram rather than going from top, left. Default is true.\n */\nmxGraph.prototype.centerZoom = true;\n\n/**\n * Variable: resetViewOnRootChange\n * \n * Specifies if the scale and translate should be reset if the root changes in\n * the model. Default is true.\n */\nmxGraph.prototype.resetViewOnRootChange = true;\n\n/**\n * Variable: resetEdgesOnResize\n * \n * Specifies if edge control points should be reset after the resize of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnResize = false;\n\n/**\n * Variable: resetEdgesOnMove\n * \n * Specifies if edge control points should be reset after the move of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnMove = false;\n\n/**\n * Variable: resetEdgesOnConnect\n * \n * Specifies if edge control points should be reset after the the edge has been\n * reconnected. Default is true.\n */\nmxGraph.prototype.resetEdgesOnConnect = true;\n\n/**\n * Variable: allowLoops\n * \n * Specifies if loops (aka self-references) are allowed. Default is false.\n */\nmxGraph.prototype.allowLoops = false;\n\t\n/**\n * Variable: defaultLoopStyle\n * \n * <mxEdgeStyle> to be used for loops. This is a fallback for loops if the\n * <mxConstants.STYLE_LOOP> is undefined. Default is <mxEdgeStyle.Loop>.\n */\nmxGraph.prototype.defaultLoopStyle = mxEdgeStyle.Loop;\n\n/**\n * Variable: multigraph\n * \n * Specifies if multiple edges in the same direction between the same pair of\n * vertices are allowed. Default is true.\n */\nmxGraph.prototype.multigraph = true;\n\n/**\n * Variable: connectableEdges\n * \n * Specifies if edges are connectable. Default is false. This overrides the\n * connectable field in edges.\n */\nmxGraph.prototype.connectableEdges = false;\n\n/**\n * Variable: allowDanglingEdges\n * \n * Specifies if edges with disconnected terminals are allowed in the graph.\n * Default is true.\n */\nmxGraph.prototype.allowDanglingEdges = true;\n\n/**\n * Variable: cloneInvalidEdges\n * \n * Specifies if edges that are cloned should be validated and only inserted\n * if they are valid. Default is true.\n */\nmxGraph.prototype.cloneInvalidEdges = false;\n\n/**\n * Variable: disconnectOnMove\n * \n * Specifies if edges should be disconnected from their terminals when they\n * are moved. Default is true.\n */\nmxGraph.prototype.disconnectOnMove = true;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible. This is used in <getLabel>. Default\n * is true.\n */\nmxGraph.prototype.labelsVisible = true;\n\t\n/**\n * Variable: htmlLabels\n * \n * Specifies the return value for <isHtmlLabel>. Default is false.\n */\nmxGraph.prototype.htmlLabels = false;\n\n/**\n * Variable: swimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selectable via the content if the\n * mouse is released. Default is true.\n */\nmxGraph.prototype.swimlaneSelectionEnabled = true;\n\n/**\n * Variable: swimlaneNesting\n * \n * Specifies if nesting of swimlanes is allowed. Default is true.\n */\nmxGraph.prototype.swimlaneNesting = true;\n\t\n/**\n * Variable: swimlaneIndicatorColorAttribute\n * \n * The attribute used to find the color for the indicator if the indicator\n * color is set to 'swimlane'. Default is <mxConstants.STYLE_FILLCOLOR>.\n */\nmxGraph.prototype.swimlaneIndicatorColorAttribute = mxConstants.STYLE_FILLCOLOR;\n\n/**\n * Variable: imageBundles\n * \n * Holds the list of image bundles.\n */\nmxGraph.prototype.imageBundles = null;\n\n/**\n * Variable: minFitScale\n * \n * Specifies the minimum scale to be applied in <fit>. Default is 0.1. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.minFitScale = 0.1;\n\n/**\n * Variable: maxFitScale\n * \n * Specifies the maximum scale to be applied in <fit>. Default is 8. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.maxFitScale = 8;\n\n/**\n * Variable: panDx\n * \n * Current horizontal panning value. Default is 0.\n */\nmxGraph.prototype.panDx = 0;\n\n/**\n * Variable: panDy\n * \n * Current vertical panning value. Default is 0.\n */\nmxGraph.prototype.panDy = 0;\n\n/**\n * Variable: collapsedImage\n * \n * Specifies the <mxImage> to indicate a collapsed state.\n * Default value is mxClient.imageBasePath + '/collapsed.gif'\n */\nmxGraph.prototype.collapsedImage = new mxImage(mxClient.imageBasePath + '/collapsed.gif', 9, 9);\n\n/**\n * Variable: expandedImage\n * \n * Specifies the <mxImage> to indicate a expanded state.\n * Default value is mxClient.imageBasePath + '/expanded.gif'\n */\nmxGraph.prototype.expandedImage = new mxImage(mxClient.imageBasePath + '/expanded.gif', 9, 9);\n\n/**\n * Variable: warningImage\n * \n * Specifies the <mxImage> for the image to be used to display a warning\n * overlay. See <setCellWarning>. Default value is mxClient.imageBasePath +\n * '/warning'.  The extension for the image depends on the platform. It is\n * '.png' on the Mac and '.gif' on all other platforms.\n */\nmxGraph.prototype.warningImage = new mxImage(mxClient.imageBasePath + '/warning'+\n\t((mxClient.IS_MAC) ? '.png' : '.gif'), 16, 16);\n\n/**\n * Variable: alreadyConnectedResource\n * \n * Specifies the resource key for the error message to be displayed in\n * non-multigraphs when two vertices are already connected. If the resource\n * for this key does not exist then the value is used as the error message.\n * Default is 'alreadyConnected'.\n */\nmxGraph.prototype.alreadyConnectedResource = (mxClient.language != 'none') ? 'alreadyConnected' : '';\n\n/**\n * Variable: containsValidationErrorsResource\n * \n * Specifies the resource key for the warning message to be displayed when\n * a collapsed cell contains validation errors. If the resource for this\n * key does not exist then the value is used as the warning message.\n * Default is 'containsValidationErrors'.\n */\nmxGraph.prototype.containsValidationErrorsResource = (mxClient.language != 'none') ? 'containsValidationErrors' : '';\n\n/**\n * Variable: collapseExpandResource\n * \n * Specifies the resource key for the tooltip on the collapse/expand icon.\n * If the resource for this key does not exist then the value is used as\n * the tooltip. Default is 'collapse-expand'.\n */\nmxGraph.prototype.collapseExpandResource = (mxClient.language != 'none') ? 'collapse-expand' : '';\n\n/**\n * Function: init\n * \n * Initializes the <container> and creates the respective datastructures.\n * \n * Parameters:\n * \n * container - DOM node that will contain the graph display.\n */\nmxGraph.prototype.init = function(container)\n{\n\tthis.container = container;\n\t\n\t// Initializes the in-place editor\n\tthis.cellEditor = this.createCellEditor();\t\n\n\t// Initializes the container using the view\n\tthis.view.init();\n\t\n\t// Updates the size of the container for the current graph\n\tthis.sizeDidChange();\n\t\n\t// Hides tooltips and resets tooltip timer if mouse leaves container\n\tmxEvent.addListener(container, 'mouseleave', mxUtils.bind(this, function()\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t}));\n\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t\t\n\t\t// Disable shift-click for text\n\t\tmxEvent.addListener(container, 'selectstart',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\treturn this.isEditing() || (!this.isMouseDown && !mxEvent.isShiftDown(evt));\n\t\t\t})\n\t\t);\n\t}\n\t\n\t// Workaround for missing last shape and connect preview in IE8 standards\n\t// mode if no initial graph displayed or no label for shape defined\n\tif (document.documentMode == 8)\n\t{\n\t\tcontainer.insertAdjacentHTML('beforeend', '<' + mxClient.VML_PREFIX + ':group' +\n\t\t\t' style=\"DISPLAY: none;\"></' + mxClient.VML_PREFIX + ':group>');\n\t}\n};\n\n/**\n * Function: createHandlers\n * \n * Creates the tooltip-, panning-, connection- and graph-handler (in this\n * order). This is called in the constructor before <init> is called.\n */\nmxGraph.prototype.createHandlers = function()\n{\n\tthis.tooltipHandler = this.createTooltipHandler();\n\tthis.tooltipHandler.setEnabled(false);\n\tthis.selectionCellsHandler = this.createSelectionCellsHandler();\n\tthis.connectionHandler = this.createConnectionHandler();\n\tthis.connectionHandler.setEnabled(false);\n\tthis.graphHandler = this.createGraphHandler();\n\tthis.panningHandler = this.createPanningHandler();\n\tthis.panningHandler.panningEnabled = false;\n\tthis.popupMenuHandler = this.createPopupMenuHandler();\n};\n\n/**\n * Function: createTooltipHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createTooltipHandler = function()\n{\n\treturn new mxTooltipHandler(this);\n};\n\n/**\n * Function: createSelectionCellsHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createSelectionCellsHandler = function()\n{\n\treturn new mxSelectionCellsHandler(this);\n};\n\n/**\n * Function: createConnectionHandler\n * \n * Creates and returns a new <mxConnectionHandler> to be used in this graph.\n */\nmxGraph.prototype.createConnectionHandler = function()\n{\n\treturn new mxConnectionHandler(this);\n};\n\n/**\n * Function: createGraphHandler\n * \n * Creates and returns a new <mxGraphHandler> to be used in this graph.\n */\nmxGraph.prototype.createGraphHandler = function()\n{\n\treturn new mxGraphHandler(this);\n};\n\n/**\n * Function: createPanningHandler\n * \n * Creates and returns a new <mxPanningHandler> to be used in this graph.\n */\nmxGraph.prototype.createPanningHandler = function()\n{\n\treturn new mxPanningHandler(this);\n};\n\n/**\n * Function: createPopupMenuHandler\n * \n * Creates and returns a new <mxPopupMenuHandler> to be used in this graph.\n */\nmxGraph.prototype.createPopupMenuHandler = function()\n{\n\treturn new mxPopupMenuHandler(this);\n};\n\n/**\n * Function: createSelectionModel\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createSelectionModel = function()\n{\n\treturn new mxGraphSelectionModel(this);\n};\n\n/**\n * Function: createStylesheet\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createStylesheet = function()\n{\n\treturn new mxStylesheet();\n};\n\n/**\n * Function: createGraphView\n * \n * Creates a new <mxGraphView> to be used in this graph.\n */\nmxGraph.prototype.createGraphView = function()\n{\n\treturn new mxGraphView(this);\n};\n \n/**\n * Function: createCellRenderer\n * \n * Creates a new <mxCellRenderer> to be used in this graph.\n */\nmxGraph.prototype.createCellRenderer = function()\n{\n\treturn new mxCellRenderer();\n};\n\n/**\n * Function: createCellEditor\n * \n * Creates a new <mxCellEditor> to be used in this graph.\n */\nmxGraph.prototype.createCellEditor = function()\n{\n\treturn new mxCellEditor(this);\n};\n\n/**\n * Function: getModel\n * \n * Returns the <mxGraphModel> that contains the cells.\n */\nmxGraph.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: getView\n * \n * Returns the <mxGraphView> that contains the <mxCellStates>.\n */\nmxGraph.prototype.getView = function()\n{\n\treturn this.view;\n};\n\n/**\n * Function: getStylesheet\n * \n * Returns the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.getStylesheet = function()\n{\n\treturn this.stylesheet;\n};\n\n/**\n * Function: setStylesheet\n * \n * Sets the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.setStylesheet = function(stylesheet)\n{\n\tthis.stylesheet = stylesheet;\n};\n\n/**\n * Function: getSelectionModel\n * \n * Returns the <mxGraphSelectionModel> that contains the selection.\n */\nmxGraph.prototype.getSelectionModel = function()\n{\n\treturn this.selectionModel;\n};\n\n/**\n * Function: setSelectionModel\n * \n * Sets the <mxSelectionModel> that contains the selection.\n */\nmxGraph.prototype.setSelectionModel = function(selectionModel)\n{\n\tthis.selectionModel = selectionModel;\n};\n\n/**\n * Function: getSelectionCellsForChanges\n * \n * Returns the cells to be selected for the given array of changes.\n * \n * Parameters:\n * \n * ignoreFn - Optional function that takes a change and returns true if the\n * change should be ignored.\n * \n */\nmxGraph.prototype.getSelectionCellsForChanges = function(changes, ignoreFn)\n{\n\tvar dict = new mxDictionary();\n\tvar cells = [];\n\t\n\tvar addCell = mxUtils.bind(this, function(cell)\n\t{\n\t\tif (!dict.get(cell) && this.model.contains(cell))\n\t\t{\n\t\t\tif (this.model.isEdge(cell) || this.model.isVertex(cell))\n\t\t\t{\n\t\t\t\tdict.put(cell, true);\n\t\t\t\tcells.push(cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\taddCell(this.model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change.constructor != mxRootChange &&\n\t\t\t(ignoreFn == null || !ignoreFn(change)))\n\t\t{\n\t\t\tvar cell = null;\n\n\t\t\tif (change instanceof mxChildChange)\n\t\t\t{\n\t\t\t\tcell = change.child;\n\t\t\t}\n\t\t\telse if (!structureOnly && change.cell != null &&\n\t\t\t\tchange.cell instanceof mxCell)\n\t\t\t{\n\t\t\t\tcell = change.cell;\n\t\t\t}\n\t\t\t\n\t\t\tif (cell != null)\n\t\t\t{\n\t\t\t\taddCell(cell);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: graphModelChanged\n * \n * Called when the graph model changes. Invokes <processChange> on each\n * item of the given array to update the view accordingly.\n * \n * Parameters:\n * \n * changes - Array that contains the individual changes.\n */\nmxGraph.prototype.graphModelChanged = function(changes)\n{\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tthis.processChange(changes[i]);\n\t}\n\n\tthis.updateSelection();\n\tthis.view.validate();\n\tthis.sizeDidChange();\n};\n\n/**\n * Function: updateSelection\n * \n * Removes selection cells that are not in the model from the selection.\n */\nmxGraph.prototype.updateSelection = function()\n{\n\tvar cells = this.getSelectionCells();\n\tvar removed = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.model.contains(cells[i]) || !this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tremoved.push(cells[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar par = this.model.getParent(cells[i]);\n\t\t\t\n\t\t\twhile (par != null && par != this.view.currentRoot)\n\t\t\t{\n\t\t\t\tif (this.isCellCollapsed(par) || !this.isCellVisible(par))\n\t\t\t\t{\n\t\t\t\t\tremoved.push(cells[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpar = this.model.getParent(par);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.removeSelectionCells(removed);\n};\n\n/**\n * Function: processChange\n * \n * Processes the given change and invalidates the respective cached data\n * in <view>. This fires a <root> event if the root has changed in the\n * model.\n * \n * Parameters:\n * \n * change - Object that represents the change on the model.\n */\nmxGraph.prototype.processChange = function(change)\n{\n\t// Resets the view settings, removes all cells and clears\n\t// the selection if the root changes.\n\tif (change instanceof mxRootChange)\n\t{\n\t\tthis.clearSelection();\n\t\tthis.setDefaultParent(null);\n\t\tthis.removeStateForCell(change.previous);\n\t\t\n\t\tif (this.resetViewOnRootChange)\n\t\t{\n\t\t\tthis.view.scale = 1;\n\t\t\tthis.view.translate.x = 0;\n\t\t\tthis.view.translate.y = 0;\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t}\n\t\n\t// Adds or removes a child to the view by online invaliding\n\t// the minimal required portions of the cache, namely, the\n\t// old and new parent and the child.\n\telse if (change instanceof mxChildChange)\n\t{\n\t\tvar newParent = this.model.getParent(change.child);\n\t\tthis.view.invalidate(change.child, true, true);\n\t\t\n\t\tif (!this.model.contains(newParent) || this.isCellCollapsed(newParent))\n\t\t{\n\t\t\tthis.view.invalidate(change.child, true, true);\n\t\t\tthis.removeStateForCell(change.child);\n\t\t\t\n\t\t\t// Handles special case of current root of view being removed\n\t\t\tif (this.view.currentRoot == change.child)\n\t\t\t{\n\t\t\t\tthis.home();\n\t\t\t}\n\t\t}\n \n\t\tif (newParent != change.previous)\n\t\t{\n\t\t\t// Refreshes the collapse/expand icons on the parents\n\t\t\tif (newParent != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(newParent, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (change.previous != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(change.previous, false, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handles two special cases where the shape does not need to be\n\t// recreated from scratch, it only needs to be invalidated.\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\t// Checks if the geometry has changed to avoid unnessecary revalidation\n\t\tif (change instanceof mxTerminalChange || ((change.previous == null && change.geometry != null) ||\n\t\t\t(change.previous != null && !change.previous.equals(change.geometry))))\n\t\t{\n\t\t\tthis.view.invalidate(change.cell);\n\t\t}\n\t}\n\n\t// Handles two special cases where only the shape, but no\n\t// descendants need to be recreated\n\telse if (change instanceof mxValueChange)\n\t{\n\t\tthis.view.invalidate(change.cell, false, false);\n\t}\n\t\n\t// Requires a new mxShape in JavaScript\n\telse if (change instanceof mxStyleChange)\n\t{\n\t\tthis.view.invalidate(change.cell, true, true);\n\t\tvar state = this.view.getState(change.cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tstate.invalidStyle = true;\n\t\t}\n\t}\n\t\n\t// Removes the state from the cache by default\n\telse if (change.cell != null && change.cell instanceof mxCell)\n\t{\n\t\tthis.removeStateForCell(change.cell);\n\t}\n};\n\n/**\n * Function: removeStateForCell\n * \n * Removes all cached information for the given cell and its descendants.\n * This is called when a cell was removed from the model.\n * \n * Paramters:\n * \n * cell - <mxCell> that was removed from the model.\n */\nmxGraph.prototype.removeStateForCell = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.removeStateForCell(this.model.getChildAt(cell, i));\n\t}\n\n\tthis.view.invalidate(cell, false, true);\n\tthis.view.removeState(cell);\n};\n\n/**\n * Group: Overlays\n */\n\n/**\n * Function: addCellOverlay\n * \n * Adds an <mxCellOverlay> for the specified cell. This method fires an\n * <addoverlay> event and returns the new <mxCellOverlay>.\n * \n * Parameters:\n * \n * cell - <mxCell> to add the overlay for.\n * overlay - <mxCellOverlay> to be added for the cell.\n */\nmxGraph.prototype.addCellOverlay = function(cell, overlay)\n{\n\tif (cell.overlays == null)\n\t{\n\t\tcell.overlays = [];\n\t}\n\t\n\tcell.overlays.push(overlay);\n\n\tvar state = this.view.getState(cell);\n\n\t// Immediately updates the cell display if the state exists\n\tif (state != null)\n\t{\n\t\tthis.cellRenderer.redraw(state);\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD_OVERLAY,\n\t\t\t'cell', cell, 'overlay', overlay));\n\t\n\treturn overlay;\n};\n\n/**\n * Function: getCellOverlays\n * \n * Returns the array of <mxCellOverlays> for the given cell or null, if\n * no overlays are defined.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be returned.\n */\nmxGraph.prototype.getCellOverlays = function(cell)\n{\n\treturn cell.overlays;\n};\n\n/**\n * Function: removeCellOverlay\n * \n * Removes and returns the given <mxCellOverlay> from the given cell. This\n * method fires a <removeoverlay> event. If no overlay is given, then all\n * overlays are removed using <removeOverlays>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlay should be removed.\n * overlay - Optional <mxCellOverlay> to be removed.\n */\nmxGraph.prototype.removeCellOverlay = function(cell, overlay)\n{\n\tif (overlay == null)\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\telse\n\t{\n\t\tvar index = mxUtils.indexOf(cell.overlays, overlay);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tcell.overlays.splice(index, 1);\n\t\t\t\n\t\t\tif (cell.overlays.length == 0)\n\t\t\t{\n\t\t\t\tcell.overlays = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Immediately updates the cell display if the state exists\n\t\t\tvar state = this.view.getState(cell);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tthis.cellRenderer.redraw(state);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlay));\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\toverlay = null;\n\t\t}\n\t}\n\t\n\treturn overlay;\n};\n\n/**\n * Function: removeCellOverlays\n * \n * Removes all <mxCellOverlays> from the given cell. This method\n * fires a <removeoverlay> event for each <mxCellOverlay> and returns\n * the array of <mxCellOverlays> that was removed from the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be removed\n */\nmxGraph.prototype.removeCellOverlays = function(cell)\n{\n\tvar overlays = cell.overlays;\n\t\n\tif (overlays != null)\n\t{\n\t\tcell.overlays = null;\n\t\t\n\t\t// Immediately updates the cell display if the state exists\n\t\tvar state = this.view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.cellRenderer.redraw(state);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlays[i]));\n\t\t}\n\t}\n\t\n\treturn overlays;\n};\n\n/**\n * Function: clearCellOverlays\n * \n * Removes all <mxCellOverlays> in the graph for the given cell and all its\n * descendants. If no cell is specified then all overlays are removed from\n * the graph. This implementation uses <removeCellOverlays> to remove the\n * overlays from the individual cells.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> that represents the root of the subtree to\n * remove the overlays from. Default is the root in the model.\n */\nmxGraph.prototype.clearCellOverlays = function(cell)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tthis.removeCellOverlays(cell);\n\t\n\t// Recursively removes all overlays from the children\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\t\tthis.clearCellOverlays(child); // recurse\n\t}\n};\n\n/**\n * Function: setCellWarning\n * \n * Creates an overlay for the given cell using the warning and image or\n * <warningImage> and returns the new <mxCellOverlay>. The warning is\n * displayed as a tooltip in a red font and may contain HTML markup. If\n * the warning is null or a zero length string, then all overlays are\n * removed from the cell.\n * \n * Example:\n * \n * (code)\n * graph.setCellWarning(cell, '<b>Warning:</b>: Hello, World!');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose warning should be set.\n * warning - String that represents the warning to be displayed.\n * img - Optional <mxImage> to be used for the overlay. Default is\n * <warningImage>.\n * isSelect - Optional boolean indicating if a click on the overlay\n * should select the corresponding cell. Default is false.\n */\nmxGraph.prototype.setCellWarning = function(cell, warning, img, isSelect)\n{\n\tif (warning != null && warning.length > 0)\n\t{\n\t\timg = (img != null) ? img : this.warningImage;\n\t\t\n\t\t// Creates the overlay with the image and warning\n\t\tvar overlay = new mxCellOverlay(img,\n\t\t\t'<font color=red>'+warning+'</font>');\n\t\t\n\t\t// Adds a handler for single mouseclicks to select the cell\n\t\tif (isSelect)\n\t\t{\n\t\t\toverlay.addListener(mxEvent.CLICK,\n\t\t\t\tmxUtils.bind(this, function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isEnabled())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setSelectionCell(cell);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\t\n\t\t// Sets and returns the overlay in the graph\n\t\treturn this.addCellOverlay(cell, overlay);\n\t}\n\telse\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: In-place editing\n */\n\n/**\n * Function: startEditing\n * \n * Calls <startEditingAtCell> using the given cell or the first selection\n * cell.\n * \n * Parameters:\n * \n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditing = function(evt)\n{\n\tthis.startEditingAtCell(null, evt);\n};\n\n/**\n * Function: startEditingAtCell\n * \n * Fires a <startEditing> event and invokes <mxCellEditor.startEditing>\n * on <editor>. After editing was started, a <editingStarted> event is\n * fired.\n * \n * Parameters:\n * \n * cell - <mxCell> to start the in-place editor for.\n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditingAtCell = function(cell, evt)\n{\n\tif (evt == null || !mxEvent.isMultiTouchEvent(evt))\n\t{\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.getSelectionCell();\n\t\t\t\n\t\t\tif (cell != null && !this.isCellEditable(cell))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDITING,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t\tthis.cellEditor.startEditing(cell, evt);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STARTED,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t}\n\t}\n};\n\n/**\n * Function: getEditingValue\n * \n * Returns the initial value for in-place editing. This implementation\n * returns <convertValueToString> for the given cell. If this function is\n * overridden, then <mxGraphModel.valueForCellChanged> should take care\n * of correctly storing the actual new value inside the user object.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the initial editing value should be returned.\n * evt - Optional mouse event that triggered the editor.\n */\nmxGraph.prototype.getEditingValue = function(cell, evt)\n{\n\treturn this.convertValueToString(cell);\n};\n\n/**\n * Function: stopEditing\n * \n * Stops the current editing  and fires a <editingStopped> event.\n * \n * Parameters:\n * \n * cancel - Boolean that specifies if the current editing value\n * should be stored.\n */\nmxGraph.prototype.stopEditing = function(cancel)\n{\n\tthis.cellEditor.stopEditing(cancel);\n\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STOPPED, 'cancel', cancel));\n};\n\n/**\n * Function: labelChanged\n * \n * Sets the label of the specified cell to the given value using\n * <cellLabelChanged> and fires <mxEvent.LABEL_CHANGED> while the\n * transaction is in progress. Returns the cell whose label was changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * evt - Optional event that triggered the change.\n */\nmxGraph.prototype.labelChanged = function(cell, value, evt)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar old = cell.value;\n\t\tthis.cellLabelChanged(cell, value, this.isAutoSizeCell(cell));\n\t\tthis.fireEvent(new mxEventObject(mxEvent.LABEL_CHANGED,\n\t\t\t'cell', cell, 'value', value, 'old', old, 'event', evt));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellLabelChanged\n * \n * Sets the new label for a cell. If autoSize is true then\n * <cellSizeUpdated> will be called.\n * \n * In the following example, the function is extended to map changes to\n * attributes in an XML node, as shown in <convertValueToString>.\n * Alternatively, the handling of this can be implemented as shown in\n * <mxGraphModel.valueForCellChanged> without the need to clone the\n * user object.\n * \n * (code)\n * var graphCellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n * \t// Cloned for correct undo/redo\n * \tvar elt = cell.value.cloneNode(true);\n *  elt.setAttribute('label', newValue);\n *  \n *  newValue = elt;\n *  graphCellLabelChanged.apply(this, arguments);\n * };\n * (end) \n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * autoSize - Boolean that specifies if <cellSizeUpdated> should be called.\n */\nmxGraph.prototype.cellLabelChanged = function(cell, value, autoSize)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.model.setValue(cell, value);\n\t\t\n\t\tif (autoSize)\n\t\t{\n\t\t\tthis.cellSizeUpdated(cell, false);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n};\n\n/**\n * Group: Event processing\n */\n\n/**\n * Function: escape\n * \n * Processes an escape keystroke.\n * \n * Parameters:\n * \n * evt - Mouseevent that represents the keystroke.\n */\nmxGraph.prototype.escape = function(evt)\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n};\n\n/**\n * Function: click\n * \n * Processes a singleclick on an optional cell and fires a <click> event.\n * The click event is fired initially. If the graph is enabled and the\n * event has not been consumed, then the cell is selected using\n * <selectCellForEvent> or the selection is cleared using\n * <clearSelection>. The events consumed state is set to true if the\n * corresponding <mxMouseEvent> has been consumed.\n *\n * To handle a click event, use the following code.\n * \n * (code)\n * graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event'); // mouse event\n *   var cell = evt.getProperty('cell'); // cell may be null\n *   \n *   if (cell != null)\n *   {\n *     // Do something useful with cell and consume the event\n *     evt.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the single click.\n */\nmxGraph.prototype.click = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar cell = me.getCell();\n\tvar mxe = new mxEventObject(mxEvent.CLICK, 'event', evt, 'cell', cell);\n\t\n\tif (me.isConsumed())\n\t{\n\t\tmxe.consume();\n\t}\n\t\n\tthis.fireEvent(mxe);\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n\t{\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isTransparentClickEvent(evt))\n\t\t\t{\n\t\t\t\tvar active = false;\n\t\t\t\t\n\t\t\t\tvar tmp = this.getCellAt(me.graphX, me.graphY, null, null, null, mxUtils.bind(this, function(state)\n\t\t\t\t{\n\t\t\t\t\tvar selected = this.isCellSelected(state.cell);\n\t\t\t\t\tactive = active || selected;\n\t\t\t\t\t\n\t\t\t\t\treturn !active || selected;\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tcell = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.selectCellForEvent(cell, evt);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar swimlane = null;\n\t\t\t\n\t\t\tif (this.isSwimlaneSelectionEnabled())\n\t\t\t{\n\t\t\t\t// Gets the swimlane at the location (includes\n\t\t\t\t// content area of swimlanes)\n\t\t\t\tswimlane = this.getSwimlaneAt(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\n\t\t\t// Selects the swimlane and consumes the event\n\t\t\tif (swimlane != null)\n\t\t\t{\n\t\t\t\tvar temp = swimlane;\n\t\t\t\tvar swimlanes = [];\n\t\t\t\t\n\t\t\t\twhile (temp != null)\n\t\t\t\t{\n\t\t\t\t\ttemp = this.model.getParent(temp);\n\t\t\t\t\tvar state = this.view.getState(temp);\n\t\t\t\t\t\n\t\t\t\t\tif (this.isSwimlane(temp) && state != null &&\n\t\t\t\t\t\tthis.intersects(state, me.getGraphX(), me.getGraphY()))\n\t\t\t\t\t{\n\t\t\t\t\t\tswimlanes.push(temp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Selects ancestors for selected swimlanes\n\t\t\t\tif (swimlanes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tswimlanes = swimlanes.reverse();\n\t\t\t\t\tswimlanes.splice(0, 0, swimlane);\n\t\t\t\t\tswimlanes.push(swimlane);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < swimlanes.length - 2; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellSelected(swimlanes[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tswimlane = swimlanes[i + 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.selectCellForEvent(swimlane, evt);\n\t\t\t}\n\t\t\t// Ignores the event if the control key is pressed\n\t\t\telse if (!this.isToggleEvent(evt))\n\t\t\t{\n\t\t\t\tthis.clearSelection();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: dblClick\n * \n * Processes a doubleclick on an optional cell and fires a <dblclick>\n * event. The event is fired initially. If the graph is enabled and the\n * event has not been consumed, then <edit> is called with the given\n * cell. The event is ignored if no cell was specified.\n *\n * Example for overriding this method.\n *\n * (code)\n * graph.dblClick = function(evt, cell)\n * {\n *   var mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n *   this.fireEvent(mxe);\n *   \n *   if (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n *   {\n * \t   mxUtils.alert('Hello, World!');\n *     mxe.consume();\n *   }\n * }\n * (end)\n * \n * Example listener for this event.\n * \n * (code)\n * graph.addListener(mxEvent.DOUBLE_CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   // do something with the cell and consume the\n *   // event to prevent in-place editing from start\n * });\n * (end) \n * \n * Parameters:\n * \n * evt - Mouseevent that represents the doubleclick.\n * cell - Optional <mxCell> under the mousepointer.\n */\nmxGraph.prototype.dblClick = function(evt, cell)\n{\n\tvar mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n\tthis.fireEvent(mxe);\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() &&\n\t\tcell != null && this.isCellEditable(cell) && !this.isEditing(cell))\n\t{\n\t\tthis.startEditingAtCell(cell, evt);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: tapAndHold\n * \n * Handles the <mxMouseEvent> by highlighting the <mxCellState>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the touch event.\n * state - Optional <mxCellState> that is associated with the event.\n */\nmxGraph.prototype.tapAndHold = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar mxe = new mxEventObject(mxEvent.TAP_AND_HOLD, 'event', evt, 'cell', me.getCell());\n\n\t// LATER: Check if event should be consumed if me is consumed\n\tthis.fireEvent(mxe);\n\n\tif (mxe.isConsumed())\n\t{\n\t\t// Resets the state of the panning handler\n\t\tthis.panningHandler.panningTrigger = false;\n\t}\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() && this.connectionHandler.isEnabled())\n\t{\n\t\tvar state = this.view.getState(this.connectionHandler.marker.getCell(me));\n\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.connectionHandler.marker.currentColor = this.connectionHandler.marker.validColor;\n\t\t\tthis.connectionHandler.marker.markedState = state;\n\t\t\tthis.connectionHandler.marker.mark();\n\t\t\t\n\t\t\tthis.connectionHandler.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\tthis.connectionHandler.edgeState = this.connectionHandler.createEdgeState(me);\n\t\t\tthis.connectionHandler.previous = state;\n\t\t\tthis.connectionHandler.fireEvent(new mxEventObject(mxEvent.START, 'state', this.connectionHandler.previous));\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollPointToVisible\n * \n * Scrolls the graph to the given point, extending the graph container if\n * specified.\n */\nmxGraph.prototype.scrollPointToVisible = function(x, y, extend, border)\n{\n\tif (!this.timerAutoScroll && (this.ignoreScrollbars || mxUtils.hasScrollbars(this.container)))\n\t{\n\t\tvar c = this.container;\n\t\tborder = (border != null) ? border : 20;\n\t\t\n\t\tif (x >= c.scrollLeft && y >= c.scrollTop && x <= c.scrollLeft + c.clientWidth &&\n\t\t\ty <= c.scrollTop + c.clientHeight)\n\t\t{\n\t\t\tvar dx = c.scrollLeft + c.clientWidth - x;\n\t\t\t\n\t\t\tif (dx < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollLeft;\n\t\t\t\tc.scrollLeft += border - dx;\n\n\t\t\t\t// Automatically extends the canvas size to the bottom, right\n\t\t\t\t// if the event is outside of the canvas and the edge of the\n\t\t\t\t// canvas has been reached. Notes: Needs fix for IE.\n\t\t\t\tif (extend && old == c.scrollLeft)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar width = this.container.scrollWidth + border - dx;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar width = Math.max(c.clientWidth, c.scrollWidth) + border - dx;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollLeft += border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = x - c.scrollLeft;\n\t\t\t\t\n\t\t\t\tif (dx < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft -= border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar dy = c.scrollTop + c.clientHeight - y;\n\t\t\t\n\t\t\tif (dy < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollTop;\n\t\t\t\tc.scrollTop += border - dy;\n\n\t\t\t\tif (old == c.scrollTop && extend)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar height = this.container.scrollHeight + border - dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar height = Math.max(c.clientHeight, c.scrollHeight) + border - dy;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollTop += border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = y - c.scrollTop;\n\t\t\t\t\n\t\t\t\tif (dy < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop -= border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.allowAutoPanning && !this.panningHandler.isActive())\n\t{\n\t\tif (this.panningManager == null)\n\t\t{\n\t\t\tthis.panningManager = this.createPanningManager();\n\t\t}\n\n\t\tthis.panningManager.panTo(x + this.panDx, y + this.panDy);\n\t}\n};\n\n\n/**\n * Function: createPanningManager\n * \n * Creates and returns an <mxPanningManager>.\n */\nmxGraph.prototype.createPanningManager = function()\n{\n\treturn new mxPanningManager(this);\n};\n\n/**\n * Function: getBorderSizes\n * \n * Returns the size of the border and padding on all four sides of the\n * container. The left, top, right and bottom borders are stored in the x, y,\n * width and height of the returned <mxRectangle>, respectively.\n */\nmxGraph.prototype.getBorderSizes = function()\n{\n\tvar css = mxUtils.getCurrentStyle(this.container);\n\t\n\treturn new mxRectangle(mxUtils.parseCssNumber(css.paddingLeft) +\n\t\t\t((css.borderLeftStyle != 'none') ? mxUtils.parseCssNumber(css.borderLeftWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingTop) +\n\t\t\t((css.borderTopStyle != 'none') ? mxUtils.parseCssNumber(css.borderTopWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingRight) +\n\t\t\t((css.borderRightStyle != 'none') ? mxUtils.parseCssNumber(css.borderRightWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingBottom) +\n\t\t\t((css.borderBottomStyle != 'none') ? mxUtils.parseCssNumber(css.borderBottomWidth) : 0));\n};\n\n/**\n * Function: getPreferredPageSize\n * \n * Returns the preferred size of the background page if <preferPageSize> is true.\n */\nmxGraph.prototype.getPreferredPageSize = function(bounds, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = this.pageScale;\n\tvar page = new mxRectangle(0, 0, Math.ceil(fmt.width * ps), Math.ceil(fmt.height * ps));\n\t\n\tvar hCount = (this.pageBreaksVisible) ? Math.ceil(width / page.width) : 1;\n\tvar vCount = (this.pageBreaksVisible) ? Math.ceil(height / page.height) : 1;\n\t\n\treturn new mxRectangle(0, 0, hCount * page.width + 2 + tr.x, vCount * page.height + 2 + tr.y);\n};\n\n/**\n * Function: fit\n *\n * Scales the graph such that the complete diagram fits into <container> and\n * returns the current scale in the view. To fit an initial graph prior to\n * rendering, set <mxGraphView.rendering> to false prior to changing the model\n * and execute the following after changing the model.\n * \n * (code)\n * graph.fit();\n * graph.view.rendering = true;\n * graph.refresh();\n * (end)\n * \n * To fit and center the graph, the following code can be used.\n * \n * (code)\n * var margin = 2;\n * var max = 3;\n * \n * var bounds = graph.getGraphBounds();\n * var cw = graph.container.clientWidth - margin;\n * var ch = graph.container.clientHeight - margin;\n * var w = bounds.width / graph.view.scale;\n * var h = bounds.height / graph.view.scale;\n * var s = Math.min(max, Math.min(cw / w, ch / h));\n * \n * graph.view.scaleAndTranslate(s,\n *   (margin + cw - w * s) / (2 * s) - bounds.x / graph.view.scale,\n *   (margin + ch - h * s) / (2 * s) - bounds.y / graph.view.scale);\n * (end)\n * \n * Parameters:\n * \n * border - Optional number that specifies the border. Default is <border>.\n * keepOrigin - Optional boolean that specifies if the translate should be\n * changed. Default is false.\n * margin - Optional margin in pixels. Default is 0.\n * enabled - Optional boolean that specifies if the scale should be set or\n * just returned. Default is true.\n * ignoreWidth - Optional boolean that specifies if the width should be\n * ignored. Default is false.\n * ignoreHeight - Optional boolean that specifies if the height should be\n * ignored. Default is false.\n * maxHeight - Optional maximum height.\n */\nmxGraph.prototype.fit = function(border, keepOrigin, margin, enabled, ignoreWidth, ignoreHeight, maxHeight)\n{\n\tif (this.container != null)\n\t{\n\t\tborder = (border != null) ? border : this.getBorder();\n\t\tkeepOrigin = (keepOrigin != null) ? keepOrigin : false;\n\t\tmargin = (margin != null) ? margin : 0;\n\t\tenabled = (enabled != null) ? enabled : true;\n\t\tignoreWidth = (ignoreWidth != null) ? ignoreWidth : false;\n\t\tignoreHeight = (ignoreHeight != null) ? ignoreHeight : false;\n\t\t\n\t\t// Adds spacing and border from css\n\t\tvar cssBorder = this.getBorderSizes();\n\t\tvar w1 = this.container.offsetWidth - cssBorder.x - cssBorder.width - 1;\n\t\tvar h1 = (maxHeight != null) ? maxHeight : this.container.offsetHeight - cssBorder.y - cssBorder.height - 1;\n\t\tvar bounds = this.view.getGraphBounds();\n\t\t\n\t\tif (bounds.width > 0 && bounds.height > 0)\n\t\t{\n\t\t\tif (keepOrigin && bounds.x != null && bounds.y != null)\n\t\t\t{\n\t\t\t\tbounds = bounds.clone();\n\t\t\t\tbounds.width += bounds.x;\n\t\t\t\tbounds.height += bounds.y;\n\t\t\t\tbounds.x = 0;\n\t\t\t\tbounds.y = 0;\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Use unscaled bounding boxes to fix rounding errors\n\t\t\tvar s = this.view.scale;\n\t\t\tvar w2 = bounds.width / s;\n\t\t\tvar h2 = bounds.height / s;\n\t\t\t\n\t\t\t// Fits to the size of the background image if required\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tw2 = Math.max(w2, this.backgroundImage.width - bounds.x / s);\n\t\t\t\th2 = Math.max(h2, this.backgroundImage.height - bounds.y / s);\n\t\t\t}\n\t\t\t\n\t\t\tvar b = ((keepOrigin) ? border : 2 * border) + margin + 1;\n\n\t\t\tw1 -= b;\n\t\t\th1 -= b;\n\t\t\t\n\t\t\tvar s2 = (((ignoreWidth) ? h1 / h2 : (ignoreHeight) ? w1 / w2 :\n\t\t\t\tMath.min(w1 / w2, h1 / h2)));\n\t\t\t\n\t\t\tif (this.minFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.max(s2, this.minFitScale);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.maxFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.min(s2, this.maxFitScale);\n\t\t\t}\n\t\n\t\t\tif (enabled)\n\t\t\t{\n\t\t\t\tif (!keepOrigin)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.hasScrollbars(this.container))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar x0 = (bounds.x != null) ? Math.floor(this.view.translate.x - bounds.x / s + border / s2 + margin / 2) : border;\n\t\t\t\t\t\tvar y0 = (bounds.y != null) ? Math.floor(this.view.translate.y - bounds.y / s + border / s2 + margin / 2) : border;\n\n\t\t\t\t\t\tthis.view.scaleAndTranslate(s2, x0, y0);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t\t\tvar b2 = this.getGraphBounds();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.x != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollLeft = b2.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.y != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollTop = b2.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.view.scale != s2)\n\t\t\t\t{\n\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn s2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.view.scale;\n};\n\n/**\n * Function: sizeDidChange\n * \n * Called when the size of the graph has changed. This implementation fires\n * a <size> event after updating the clipping region of the SVG element in\n * SVG-bases browsers.\n */\nmxGraph.prototype.sizeDidChange = function()\n{\n\tvar bounds = this.getGraphBounds();\n\t\n\tif (this.container != null)\n\t{\n\t\tvar border = this.getBorder();\n\t\t\n\t\tvar width = Math.max(0, bounds.x) + bounds.width + 2 * border;\n\t\tvar height = Math.max(0, bounds.y) + bounds.height + 2 * border;\n\t\t\n\t\tif (this.minimumContainerSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumContainerSize.width);\n\t\t\theight = Math.max(height, this.minimumContainerSize.height);\n\t\t}\n\n\t\tif (this.resizeContainer)\n\t\t{\n\t\t\tthis.doResizeContainer(width, height);\n\t\t}\n\n\t\tif (this.preferPageSize || (!mxClient.IS_IE && this.pageVisible))\n\t\t{\n\t\t\tvar size = this.getPreferredPageSize(bounds, Math.max(1, width), Math.max(1, height));\n\t\t\t\n\t\t\tif (size != null)\n\t\t\t{\n\t\t\t\twidth = size.width * this.view.scale;\n\t\t\t\theight = size.height * this.view.scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.minimumGraphSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumGraphSize.width * this.view.scale);\n\t\t\theight = Math.max(height, this.minimumGraphSize.height * this.view.scale);\n\t\t}\n\n\t\twidth = Math.ceil(width);\n\t\theight = Math.ceil(height);\n\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\troot.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\troot.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t\troot.style.width = '100%';\n\t\t\t\troot.style.height = '100%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\t// Quirks mode does not support minWidth/-Height\n\t\t\t\tthis.view.updateHtmlCanvasSize(Math.max(1, width), Math.max(1, height));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.view.canvas.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\tthis.view.canvas.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.updatePageBreaks(this.pageBreaksVisible, width, height);\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.SIZE, 'bounds', bounds));\n};\n\n/**\n * Function: doResizeContainer\n * \n * Resizes the container for the given graph width and height.\n */\nmxGraph.prototype.doResizeContainer = function(width, height)\n{\n\tif (this.maximumContainerSize != null)\n\t{\n\t\twidth = Math.min(this.maximumContainerSize.width, width);\n\t\theight = Math.min(this.maximumContainerSize.height, height);\n\t}\n\n\tthis.container.style.width = Math.ceil(width) + 'px';\n\tthis.container.style.height = Math.ceil(height) + 'px';\n};\n\n/**\n * Function: updatePageBreaks\n * \n * Invokes from <sizeDidChange> to redraw the page breaks.\n * \n * Parameters:\n * \n * visible - Boolean that specifies if page breaks should be shown.\n * width - Specifies the width of the container in pixels.\n * height - Specifies the height of the container in pixels.\n */\nmxGraph.prototype.updatePageBreaks = function(visible, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = scale * this.pageScale;\n\tvar bounds = new mxRectangle(0, 0, fmt.width * ps, fmt.height * ps);\n\n\tvar gb = mxRectangle.fromRectangle(this.getGraphBounds());\n\tgb.width = Math.max(1, gb.width);\n\tgb.height = Math.max(1, gb.height);\n\t\n\tbounds.x = Math.floor((gb.x - tr.x * scale) / bounds.width) * bounds.width + tr.x * scale;\n\tbounds.y = Math.floor((gb.y - tr.y * scale) / bounds.height) * bounds.height + tr.y * scale;\n\t\n\tgb.width = Math.ceil((gb.width + (gb.x - bounds.x)) / bounds.width) * bounds.width;\n\tgb.height = Math.ceil((gb.height + (gb.y - bounds.y)) / bounds.height) * bounds.height;\n\t\n\t// Does not show page breaks if the scale is too small\n\tvisible = visible && Math.min(bounds.width, bounds.height) > this.minPageBreakDist;\n\n\tvar horizontalCount = (visible) ? Math.ceil(gb.height / bounds.height) + 1 : 0;\n\tvar verticalCount = (visible) ? Math.ceil(gb.width / bounds.width) + 1 : 0;\n\tvar right = (verticalCount - 1) * bounds.width;\n\tvar bottom = (horizontalCount - 1) * bounds.height;\n\t\n\tif (this.horizontalPageBreaks == null && horizontalCount > 0)\n\t{\n\t\tthis.horizontalPageBreaks = [];\n\t}\n\n\tif (this.verticalPageBreaks == null && verticalCount > 0)\n\t{\n\t\tthis.verticalPageBreaks = [];\n\t}\n\t\n\tvar drawPageBreaks = mxUtils.bind(this, function(breaks)\n\t{\n\t\tif (breaks != null)\n\t\t{\n\t\t\tvar count = (breaks == this.horizontalPageBreaks) ? horizontalCount : verticalCount; \n\t\t\t\n\t\t\tfor (var i = 0; i <= count; i++)\n\t\t\t{\n\t\t\t\tvar pts = (breaks == this.horizontalPageBreaks) ?\n\t\t\t\t\t[new mxPoint(Math.round(bounds.x), Math.round(bounds.y + i * bounds.height)),\n\t\t\t         new mxPoint(Math.round(bounds.x + right), Math.round(bounds.y + i * bounds.height))] :\n\t\t\t        [new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y)),\n\t\t\t         new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y + bottom))];\n\n\t\t\t\tif (breaks[i] != null)\n\t\t\t\t{\n\t\t\t\t\tbreaks[i].points = pts;\n\t\t\t\t\tbreaks[i].redraw();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pageBreak = new mxPolyline(pts, this.pageBreakColor);\n\t\t\t\t\tpageBreak.dialect = this.dialect;\n\t\t\t\t\tpageBreak.pointerEvents = false;\n\t\t\t\t\tpageBreak.isDashed = this.pageBreakDashed;\n\t\t\t\t\tpageBreak.init(this.view.backgroundPane);\n\t\t\t\t\tpageBreak.redraw();\n\t\t\t\t\t\n\t\t\t\t\tbreaks[i] = pageBreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = count; i < breaks.length; i++)\n\t\t\t{\n\t\t\t\tbreaks[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tbreaks.splice(count, breaks.length - count);\n\t\t}\n\t});\n\t\n\tdrawPageBreaks(this.horizontalPageBreaks);\n\tdrawPageBreaks(this.verticalPageBreaks);\n};\n\n/**\n * Group: Cell styles\n */\n\n/**\n * Function: getCurrentCellStyle\n * \n * Returns the style for the given cell from the cell state, if one exists,\n * or using <getCellStyle>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n * ignoreState - Optional boolean that specifies if the cell state should be ignored.\n */\nmxGraph.prototype.getCurrentCellStyle = function(cell, ignoreState)\n{\n\tvar state = (ignoreState) ? null : this.view.getState(cell);\n\t\n\treturn (state != null) ? state.style : this.getCellStyle(cell);\n};\n\n/**\n * Function: getCellStyle\n * \n * Returns an array of key, value pairs representing the cell style for the\n * given cell. If no string is defined in the model that specifies the\n * style, then the default style for the cell is returned or an empty object,\n * if no style can be found. Note: You should try and get the cell state\n * for the given cell and use the cached style in the state before using\n * this method.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n */\nmxGraph.prototype.getCellStyle = function(cell)\n{\n\tvar stylename = this.model.getStyle(cell);\n\tvar style = null;\n\t\n\t// Gets the default style for the cell\n\tif (this.model.isEdge(cell))\n\t{\n\t\tstyle = this.stylesheet.getDefaultEdgeStyle();\n\t}\n\telse\n\t{\n\t\tstyle = this.stylesheet.getDefaultVertexStyle();\n\t}\n\t\n\t// Resolves the stylename using the above as the default\n\tif (stylename != null)\n\t{\n\t\tstyle = this.postProcessCellStyle(this.stylesheet.getCellStyle(stylename, style));\n\t}\n\t\n\t// Returns a non-null value if no style can be found\n\tif (style == null)\n\t{\n\t\tstyle = new Object();\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: postProcessCellStyle\n * \n * Tries to resolve the value for the image style in the image bundles and\n * turns short data URIs as defined in mxImageBundle to data URIs as\n * defined in RFC 2397 of the IETF.\n */\nmxGraph.prototype.postProcessCellStyle = function(style)\n{\n\tif (style != null)\n\t{\n\t\tvar key = style[mxConstants.STYLE_IMAGE];\n\t\tvar image = this.getImageFromBundles(key);\n\n\t\tif (image != null)\n\t\t{\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t\telse\n\t\t{\n\t\t\timage = key;\n\t\t}\n\t\t\n\t\t// Converts short data uris to normal data uris\n\t\tif (image != null && image.substring(0, 11) == 'data:image/')\n\t\t{\n\t\t\tif (image.substring(0, 20) == 'data:image/svg+xml,<')\n\t\t\t{\n\t\t\t\t// Required for FF and IE11\n\t\t\t\timage = image.substring(0, 19) + encodeURIComponent(image.substring(19));\n\t\t\t}\n\t\t\telse if (image.substring(0, 22) != 'data:image/svg+xml,%3C')\n\t\t\t{\n\t\t\t\tvar comma = image.indexOf(',');\n\t\t\t\t\n\t\t\t\t// Adds base64 encoding prefix if needed\n\t\t\t\tif (comma > 0 && image.substring(comma - 7, comma + 1) != ';base64,')\n\t\t\t\t{\n\t\t\t\t\timage = image.substring(0, comma) + ';base64,'\n\t\t\t\t\t\t+ image.substring(comma + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t}\n\n\treturn style;\n};\n\n/**\n * Function: setCellStyle\n * \n * Sets the style of the specified cells. If no cells are given, then the\n * selection cells are changed.\n * \n * Parameters:\n * \n * style - String representing the new style of the cells.\n * cells - Optional array of <mxCells> to set the style for. Default is the\n * selection cells.\n */\nmxGraph.prototype.setCellStyle = function(style, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(cells[i], style);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: toggleCellStyle\n * \n * Toggles the boolean value for the given key in the style of the given cell\n * and returns the new value as 0 or 1. If no cell is specified then the\n * selection cell is used.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cell - Optional <mxCell> whose style should be modified. Default is\n * the selection cell.\n */\nmxGraph.prototype.toggleCellStyle = function(key, defaultValue, cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\treturn this.toggleCellStyles(key, defaultValue, [cell]);\n};\n\n/**\n * Function: toggleCellStyles\n * \n * Toggles the boolean value for the given key in the style of the given cells\n * and returns the new value as 0 or 1. If no cells are specified, then the\n * selection cells are used. For example, this can be used to toggle\n * <mxConstants.STYLE_ROUNDED> or any other style with a boolean value.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cells - Optional array of <mxCells> whose styles should be modified.\n * Default is the selection cells.\n */\nmxGraph.prototype.toggleCellStyles = function(key, defaultValue, cells)\n{\n\tdefaultValue = (defaultValue != null) ? defaultValue : false;\n\tcells = cells || this.getSelectionCells();\n\tvar value = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cells[0]);\n\t\tvalue = (mxUtils.getValue(style, key, defaultValue)) ? 0 : 1;\n\t\tthis.setCellStyles(key, value, cells);\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: setCellStyles\n * \n * Sets the key to value in the styles of the given cells. This will modify\n * the existing cell styles in-place and override any existing assignment\n * for the given key. If no cells are specified, then the selection cells\n * are changed. If no value is specified, then the respective key is\n * removed from the styles.\n * \n * Parameters:\n * \n * key - String representing the key to be assigned.\n * value - String representing the new value for the key.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyles = function(key, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\tmxUtils.setCellStyles(this.model, cells, key, value);\n};\n\n/**\n * Function: toggleCellStyleFlags\n * \n * Toggles the given bit for the given key in the styles of the specified\n * cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.toggleCellStyleFlags = function(key, flag, cells)\n{\n\tthis.setCellStyleFlags(key, flag, null, cells);\n};\n\n/**\n * Function: setCellStyleFlags\n * \n * Sets or toggles the given bit for the given key in the styles of the\n * specified cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * value - Boolean value to be used or null if the value should be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyleFlags = function(key, flag, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvar style = this.getCurrentCellStyle(cells[0]);\n\t\t\tvar current = parseInt(style[key] || 0);\n\t\t\tvalue = !((current & flag) == flag);\n\t\t}\n\n\t\tmxUtils.setCellStyleFlags(this.model, cells, key, flag, value);\n\t}\n};\n\n/**\n * Group: Cell alignment and orientation\n */\n\n/**\n * Function: alignCells\n * \n * Aligns the given cells vertically or horizontally according to the given\n * alignment using the optional parameter as the coordinate.\n * \n * Parameters:\n * \n * align - Specifies the alignment. Possible values are all constants in\n * mxConstants with an ALIGN prefix.\n * cells - Array of <mxCells> to be aligned.\n * param - Optional coordinate for the alignment.\n */\nmxGraph.prototype.alignCells = function(align, cells, param)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tif (cells != null && cells.length > 1)\n\t{\n\t\t// Finds the required coordinate for the alignment\n\t\tif (param == null)\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\n\t\t\t\tif (state != null && !this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tif (param == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.x + state.width);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.y + state.height);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.x);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Aligns the cells to the coordinate\n\t\tif (param != null)\n\t\t{\n\t\t\tvar s = this.view.scale;\n\n\t\t\tthis.model.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null && !this.model.isEdge(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.resizeCell(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ALIGN_CELLS,\n\t\t\t\t\t\t'align', align, 'cells', cells));\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.model.endUpdate();\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: flipEdge\n * \n * Toggles the style of the given edge between null (or empty) and\n * <alternateEdgeStyle>. This method fires <mxEvent.FLIP_EDGE> while the\n * transaction is in progress. Returns the edge that was flipped.\n * \n * Here is an example that overrides this implementation to invert the\n * value of <mxConstants.STYLE_ELBOW> without removing any existing styles.\n * \n * (code)\n * graph.flipEdge = function(edge)\n * {\n *   if (edge != null)\n *   {\n *     var style = this.getCurrentCellStyle(edge);\n *     var elbow = mxUtils.getValue(style, mxConstants.STYLE_ELBOW,\n *         mxConstants.ELBOW_HORIZONTAL);\n *     var value = (elbow == mxConstants.ELBOW_HORIZONTAL) ?\n *         mxConstants.ELBOW_VERTICAL : mxConstants.ELBOW_HORIZONTAL;\n *     this.setCellStyles(mxConstants.STYLE_ELBOW, value, [edge]);\n *   }\n * };\n * (end)\n * \n * Parameters:\n * \n * edge - <mxCell> whose style should be changed.\n */\nmxGraph.prototype.flipEdge = function(edge)\n{\n\tif (edge != null &&\n\t\tthis.alternateEdgeStyle != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar style = this.model.getStyle(edge);\n\n\t\t\tif (style == null || style.length == 0)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, this.alternateEdgeStyle);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, null);\n\t\t\t}\n\n\t\t\t// Removes all existing control points\n\t\t\tthis.resetEdge(edge);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.FLIP_EDGE, 'edge', edge));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: addImageBundle\n *\n * Adds the specified <mxImageBundle>.\n */\nmxGraph.prototype.addImageBundle = function(bundle)\n{\n\tthis.imageBundles.push(bundle);\n};\n\n/**\n * Function: removeImageBundle\n * \n * Removes the specified <mxImageBundle>.\n */\nmxGraph.prototype.removeImageBundle = function(bundle)\n{\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t{\n\t\tif (this.imageBundles[i] != bundle)\n\t\t{\n\t\t\ttmp.push(this.imageBundles[i]);\n\t\t}\n\t}\n\t\n\tthis.imageBundles = tmp;\n};\n\n/**\n * Function: getImageFromBundles\n *\n * Searches all <imageBundles> for the specified key and returns the value\n * for the first match or null if the key is not found.\n */\nmxGraph.prototype.getImageFromBundles = function(key)\n{\n\tif (key != null)\n\t{\n\t\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t\t{\n\t\t\tvar image = this.imageBundles[i].getImage(key);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\treturn image;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: Order\n */\n\n/**\n * Function: orderCells\n * \n * Moves the given cells to the front or back. The change is carried out\n * using <cellsOrdered>. This method fires <mxEvent.ORDER_CELLS> while the\n * transaction is in progress.\n * \n * Parameters:\n * \n * back - Boolean that specifies if the cells should be moved to back.\n * cells - Array of <mxCells> to move to the background. If null is\n * specified then the selection cells are used.\n */\nmxGraph.prototype.orderCells = function(back, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsOrdered(cells, back);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ORDER_CELLS,\n\t\t\t\t'back', back, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsOrdered\n * \n * Moves the given cells to the front or back. This method fires\n * <mxEvent.CELLS_ORDERED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose order should be changed.\n * back - Boolean that specifies if the cells should be moved to back.\n */\nmxGraph.prototype.cellsOrdered = function(cells, back)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\n\t\t\t\tif (back)\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i], i);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i],\n\t\t\t\t\t\t\tthis.model.getChildCount(parent) - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ORDERED,\n\t\t\t\t\t'back', back, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Grouping\n */\n\n/**\n * Function: groupCells\n * \n * Adds the cells into the given group. The change is carried out using\n * <cellsAdded>, <cellsMoved> and <cellsResized>. This method fires\n * <mxEvent.GROUP_CELLS> while the transaction is in progress. Returns the\n * new group. A group is only created if there is at least one entry in the\n * given array of cells.\n * \n * Parameters:\n * \n * group - <mxCell> that represents the target group. If null is specified\n * then a new group is created using <createGroupCell>.\n * border - Optional integer that specifies the border between the child\n * area and the group bounds. Default is 0.\n * cells - Optional array of <mxCells> to be grouped. If null is specified\n * then the selection cells are used.\n */\nmxGraph.prototype.groupCells = function(group, border, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tcells = this.getCellsForGroup(cells);\n\n\tif (group == null)\n\t{\n\t\tgroup = this.createGroupCell(cells);\n\t}\n\n\tvar bounds = this.getBoundsForGroup(group, cells, border);\n\n\tif (cells.length > 0 && bounds != null)\n\t{\n\t\t// Uses parent of group or previous parent of first child\n\t\tvar parent = this.model.getParent(group);\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getParent(cells[0]);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Checks if the group has a geometry and\n\t\t\t// creates one if one does not exist\n\t\t\tif (this.getCellGeometry(group) == null)\n\t\t\t{\n\t\t\t\tthis.model.setGeometry(group, new mxGeometry());\n\t\t\t}\n\n\t\t\t// Adds the group into the parent\n\t\t\tvar index = this.model.getChildCount(parent);\n\t\t\tthis.cellsAdded([group], parent, index, null, null, false, false, false);\n\n\t\t\t// Adds the children into the group and moves\n\t\t\tindex = this.model.getChildCount(group);\n\t\t\tthis.cellsAdded(cells, group, index, null, null, false, false, false);\n\t\t\tthis.cellsMoved(cells, -bounds.x, -bounds.y, false, false, false);\n\n\t\t\t// Resizes the group\n\t\t\tthis.cellsResized([group], [bounds], false);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.GROUP_CELLS,\n\t\t\t\t\t'group', group, 'border', border, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn group;\n};\n\n/**\n * Function: getCellsForGroup\n * \n * Returns the cells with the same parent as the first cell\n * in the given array.\n */\nmxGraph.prototype.getCellsForGroup = function(cells)\n{\n\tvar result = [];\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar parent = this.model.getParent(cells[0]);\n\t\tresult.push(cells[0]);\n\n\t\t// Filters selection cells with the same parent\n\t\tfor (var i = 1; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getParent(cells[i]) == parent)\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getBoundsForGroup\n * \n * Returns the bounds to be used for the given group and children.\n */\nmxGraph.prototype.getBoundsForGroup = function(group, children, border)\n{\n\tvar result = this.getBoundingBoxFromGeometry(children, true);\n\t\n\tif (result != null)\n\t{\n\t\tif (this.isSwimlane(group))\n\t\t{\n\t\t\tvar size = this.getStartSize(group);\n\t\t\t\n\t\t\tresult.x -= size.width;\n\t\t\tresult.y -= size.height;\n\t\t\tresult.width += size.width;\n\t\t\tresult.height += size.height;\n\t\t}\n\t\t\n\t\t// Adds the border\n\t\tif (border != null)\n\t\t{\n\t\t\tresult.x -= border;\n\t\t\tresult.y -= border;\n\t\t\tresult.width += 2 * border;\n\t\t\tresult.height += 2 * border;\n\t\t}\n\t}\t\t\t\n\t\n\treturn result;\n};\n\n/**\n * Function: createGroupCell\n * \n * Hook for creating the group cell to hold the given array of <mxCells> if\n * no group cell was given to the <group> function.\n * \n * The following code can be used to set the style of new group cells.\n * \n * (code)\n * var graphCreateGroupCell = graph.createGroupCell;\n * graph.createGroupCell = function(cells)\n * {\n *   var group = graphCreateGroupCell.apply(this, arguments);\n *   group.setStyle('group');\n *   \n *   return group;\n * };\n */\nmxGraph.prototype.createGroupCell = function(cells)\n{\n\tvar group = new mxCell('');\n\tgroup.setVertex(true);\n\tgroup.setConnectable(false);\n\t\n\treturn group;\n};\n\n/**\n * Function: ungroupCells\n * \n * Ungroups the given cells by moving the children the children to their\n * parents parent and removing the empty groups. Returns the children that\n * have been removed from the groups.\n * \n * Parameters:\n * \n * cells - Array of cells to be ungrouped. If null is specified then the\n * selection cells are used.\n */\nmxGraph.prototype.ungroupCells = function(cells)\n{\n\tvar result = [];\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\n\t\t// Finds the cells with children\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getChildCount(cells[i]) > 0)\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\n\t\tcells = tmp;\n\t}\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tchildren = children.slice();\n\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\tvar index = this.model.getChildCount(parent);\n\n\t\t\t\t\tthis.cellsAdded(children, parent, index, null, null, true);\n\t\t\t\t\tresult = result.concat(children);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.removeCellsAfterUngroup(cells);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNGROUP_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: removeCellsAfterUngroup\n * \n * Hook to remove the groups after <ungroupCells>.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> that were ungrouped.\n */\nmxGraph.prototype.removeCellsAfterUngroup = function(cells)\n{\n\tthis.cellsRemoved(this.addAllEdges(cells));\n};\n\n/**\n * Function: removeCellsFromParent\n * \n * Removes the specified cells from their parents and adds them to the\n * default parent. Returns the cells that were removed from their parents.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from their parents.\n */\nmxGraph.prototype.removeCellsFromParent = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar parent = this.getDefaultParent();\n\t\tvar index = this.model.getChildCount(parent);\n\n\t\tthis.cellsAdded(cells, parent, index, null, null, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS_FROM_PARENT, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given groups to include all children and returns\n * the passed-in cells. Call this with the groups in parent to child order,\n * top-most group first, the cells are processed in reverse order and cells\n * with no children are ignored.\n * \n * Parameters:\n * \n * cells - The groups whose bounds should be updated. If this is null, then\n * the selection cells are used.\n * border - Optional border to be added in the group. Default is 0.\n * moveGroup - Optional boolean that allows the group to be moved. Default\n * is false.\n * topBorder - Optional top border to be added in the group. Default is 0.\n * rightBorder - Optional top border to be added in the group. Default is 0.\n * bottomBorder - Optional top border to be added in the group. Default is 0.\n * leftBorder - Optional top border to be added in the group. Default is 0.\n */\nmxGraph.prototype.updateGroupBounds = function(cells, border, moveGroup, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tborder = (border != null) ? border : 0;\n\tmoveGroup = (moveGroup != null) ? moveGroup : false;\n\ttopBorder = (topBorder != null) ? topBorder : 0;\n\trightBorder = (rightBorder != null) ? rightBorder : 0;\n\tbottomBorder = (bottomBorder != null) ? bottomBorder : 0;\n\tleftBorder = (leftBorder != null) ? leftBorder : 0;\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = cells.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar children = this.getChildCells(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.getBoundingBoxFromGeometry(children, true);\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null && bounds.width > 0 && bounds.height > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar left = 0;\n\t\t\t\t\t\tvar top = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Adds the size of the title area for swimlanes\n\t\t\t\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar size = this.getStartSize(cells[i]);\n\t\t\t\t\t\t\tleft = size.width;\n\t\t\t\t\t\t\ttop = size.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (moveGroup)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = Math.round(geo.x + bounds.x - border - left - leftBorder);\n\t\t\t\t\t\t\tgeo.y = Math.round(geo.y + bounds.y - border - top - topBorder);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tgeo.width = Math.round(bounds.width + 2 * border + left + leftBorder + rightBorder);\n\t\t\t\t\t\tgeo.height = Math.round(bounds.height + 2 * border + top + topBorder + bottomBorder);\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\tthis.moveCells(children, border + left - bounds.x + leftBorder,\n\t\t\t\t\t\t\t\tborder + top - bounds.y + topBorder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box for the given array of <mxCells>. The bounding box for\n * each cell and its descendants is computed using <mxGraphView.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraph.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.isVertex(cells[i]) || this.model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar bbox = this.view.getBoundingBox(this.view.getState(cells[i]), true);\n\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Group: Cell cloning, insertion and removal\n */\n\n/**\n * Function: cloneCell\n * \n * Returns the clone for the given cell. Uses <cloneCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCell = function(cell, allowInvalidEdges, mapping, keepPosition)\n{\n\treturn this.cloneCells([cell], allowInvalidEdges, mapping, keepPosition)[0];\n};\n\n/**\n * Function: cloneCells\n * \n * Returns the clones for the given cells. The clones are created recursively\n * using <mxGraphModel.cloneCells>. If the terminal of an edge is not in the\n * given array, then the respective end is assigned a terminal point and the\n * terminal is removed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCells = function(cells, allowInvalidEdges, mapping, keepPosition)\n{\n\tallowInvalidEdges = (allowInvalidEdges != null) ? allowInvalidEdges : true;\n\tvar clones = null;\n\t\n\tif (cells != null)\n\t{\n\t\t// Creates a dictionary for fast lookups\n\t\tvar dict = new mxDictionary();\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t\ttmp.push(cells[i]);\n\t\t}\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar trans = this.view.translate;\n\t\t\tclones = this.model.cloneCells(cells, true, mapping);\n\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!allowInvalidEdges && this.model.isEdge(clones[i]) &&\n\t\t\t\t\tthis.getEdgeValidationError(clones[i],\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], true),\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], false)) != null)\n\t\t\t\t{\n\t\t\t\t\tclones[i] = null;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar g = this.model.getGeometry(clones[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(this.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null && pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = (keepPosition) ? 0 : pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = (keepPosition) ? 0 : pstate.origin.y;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isEdge(clones[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (pts != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Checks if the source is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (src == null && pts[0] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - trans.y), true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Checks if the target is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (trg == null && pts[n] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - trans.y), false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Translates the control points\n\t\t\t\t\t\t\t\t\tvar points = g.points;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (points != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfor (var j = 0; j < points.length; j++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].x += dx;\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].y += dy;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tg.translate(dx, dy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones = [];\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\n/**\n * Function: insertVertex\n * \n * Adds a new vertex into the given parent <mxCell> using value as the user\n * object and the given coordinates as the <mxGeometry> of the new vertex.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * When adding new vertices from a mouse event, one should take into\n * account the offset of the graph container and the scale and translation\n * of the view in order to find the correct unscaled, untranslated\n * coordinates using <mxGraph.getPointForEvent> as follows:\n * \n * (code)\n * var pt = graph.getPointForEvent(evt);\n * var parent = graph.getDefaultParent();\n * graph.insertVertex(parent, null,\n * \t\t\t'Hello, World!', x, y, 220, 30);\n * (end)\n * \n * For adding image cells, the style parameter can be assigned as\n * \n * (code)\n * stylename;image=imageUrl\n * (end)\n * \n * See <mxGraph> for more information on using images.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new vertex.\n * id - Optional string that defines the Id of the new vertex.\n * value - Object to be used as the user object.\n * x - Integer that defines the x coordinate of the vertex.\n * y - Integer that defines the y coordinate of the vertex.\n * width - Integer that defines the width of the vertex.\n * height - Integer that defines the height of the vertex.\n * style - Optional string that defines the cell style.\n * relative - Optional boolean that specifies if the geometry is relative.\n * Default is false.\n */\nmxGraph.prototype.insertVertex = function(parent, id, value,\n\tx, y, width, height, style, relative)\n{\n\tvar vertex = this.createVertex(parent, id, value, x, y, width, height, style, relative);\n\n\treturn this.addCell(vertex, parent);\n};\n\n/**\n * Function: createVertex\n * \n * Hook method that creates the new vertex for <insertVertex>.\n */\nmxGraph.prototype.createVertex = function(parent, id, value,\n\t\tx, y, width, height, style, relative)\n{\n\t// Creates the geometry for the vertex\n\tvar geometry = new mxGeometry(x, y, width, height);\n\tgeometry.relative = (relative != null) ? relative : false;\n\t\n\t// Creates the vertex\n\tvar vertex = new mxCell(value, geometry, style);\n\tvertex.setId(id);\n\tvertex.setVertex(true);\n\tvertex.setConnectable(true);\n\t\n\treturn vertex;\n};\n\t\n/**\n * Function: insertEdge\n * \n * Adds a new edge into the given parent <mxCell> using value as the user\n * object and the given source and target as the terminals of the new edge.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new edge.\n * id - Optional string that defines the Id of the new edge.\n * value - JavaScript object to be used as the user object.\n * source - <mxCell> that defines the source of the edge.\n * target - <mxCell> that defines the target of the edge.\n * style - Optional string that defines the cell style.\n */\nmxGraph.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tvar edge = this.createEdge(parent, id, value, source, target, style);\n\t\n\treturn this.addEdge(edge, parent, source, target);\n};\n\n/**\n * Function: createEdge\n * \n * Hook method that creates the new edge for <insertEdge>. This\n * implementation does not set the source and target of the edge, these\n * are set when the edge is added to the model.\n * \n */\nmxGraph.prototype.createEdge = function(parent, id, value, source, target, style)\n{\n\t// Creates the edge\n\tvar edge = new mxCell(value, new mxGeometry(), style);\n\tedge.setId(id);\n\tedge.setEdge(true);\n\tedge.geometry.relative = true;\n\t\n\treturn edge;\n};\n\n/**\n * Function: addEdge\n * \n * Adds the edge to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the edge that was\n * added.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n * index - Optional index to insert the cells at. Default is to append.\n */\nmxGraph.prototype.addEdge = function(edge, parent, source, target, index)\n{\n\treturn this.addCell(edge, parent, index, source, target);\n};\n\n/**\n * Function: addCell\n * \n * Adds the cell to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the cell that was\n * added.\n * \n * Parameters:\n * \n * cell - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.addCell = function(cell, parent, index, source, target)\n{\n\treturn this.addCells([cell], parent, index, source, target)[0];\n};\n\n/**\n * Function: addCells\n * \n * Adds the cells to the parent at the given index, connecting each cell to\n * the optional source and target terminal. The change is carried out using\n * <cellsAdded>. This method fires <mxEvent.ADD_CELLS> while the\n * transaction is in progress. Returns the cells that were added.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be inserted.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional source <mxCell> for all inserted cells.\n * target - Optional target <mxCell> for all inserted cells.\n * absolute - Optional boolean indicating of cells should be kept at\n * their absolute position. Default is false.\n */\nmxGraph.prototype.addCells = function(cells, parent, index, source, target, absolute)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getDefaultParent();\n\t}\n\t\n\tif (index == null)\n\t{\n\t\tindex = this.model.getChildCount(parent);\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsAdded(cells, parent, index, source, target, (absolute != null) ? absolute : false, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_CELLS, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsAdded\n * \n * Adds the specified cells to the given parent. This method fires\n * <mxEvent.CELLS_ADDED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsAdded = function(cells, parent, index, source, target, absolute, constrain, extend)\n{\n\tif (cells != null && parent != null && index != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar parentState = (absolute) ? this.view.getState(parent) : null;\n\t\t\tvar o1 = (parentState != null) ? parentState.origin : null;\n\t\t\tvar zero = new mxPoint(0, 0);\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] == null)\n\t\t\t\t{\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar previous = this.model.getParent(cells[i]);\n\t\n\t\t\t\t\t// Keeps the cell at its absolute location\n\t\t\t\t\tif (o1 != null && cells[i] != parent && parent != previous)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar oldState = this.view.getState(previous);\n\t\t\t\t\t\tvar o2 = (oldState != null) ? oldState.origin : zero;\n\t\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = o2.x - o1.x;\n\t\t\t\t\t\t\tvar dy = o2.y - o1.y;\n\t\n\t\t\t\t\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t\t\t\t\t// to avoid forward references in sessions.\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.translate(dx, dy);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!geo.relative && this.model.isVertex(cells[i]) &&\n\t\t\t\t\t\t\t\t!this.isAllowNegativeCoordinates())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\t\t\t\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Decrements all following indices\n\t\t\t\t\t// if cell is already in parent\n\t\t\t\t\tif (parent == previous && index + i > this.model.getChildCount(parent))\n\t\t\t\t\t{\n\t\t\t\t\t\tindex--;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.add(parent, cells[i], index + i);\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoSizeCellsOnAdd)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.autoSizeCell(cells[i], true);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Extends the parent or constrains the child\n\t\t\t\t\tif ((extend == null || extend) &&\n\t\t\t\t\t\tthis.isExtendParentsOnAdd(cells[i]) && this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Additionally constrains the child after extending the parent\n\t\t\t\t\tif (constrain == null || constrain)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the source terminal\n\t\t\t\t\tif (source != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], source, true);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the target terminal\n\t\t\t\t\tif (target != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], target, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ADDED, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target,\n\t\t\t\t'absolute', absolute));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: autoSizeCell\n * \n * Resizes the specified cell to just fit around the its label and/or children\n * \n * Parameters:\n * \n * cell - <mxCells> to be resized.\n * recurse - Optional boolean which specifies if all descendants should be\n * autosized. Default is true.\n */\nmxGraph.prototype.autoSizeCell = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tif (recurse)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.autoSizeCell(this.model.getChildAt(cell, i));\n\t\t}\n\t}\n\n\tif (this.getModel().isVertex(cell) && this.isAutoSizeCell(cell))\n\t{\n\t\tthis.updateCellSize(cell);\n\t}\n};\n\n/**\n * Function: removeCells\n * \n * Removes the given cells from the graph including all connected edges if\n * includeEdges is true. The change is carried out using <cellsRemoved>.\n * This method fires <mxEvent.REMOVE_CELLS> while the transaction is in\n * progress. The removed cells are returned as an array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove. If null is specified then the\n * selection cells which are deletable are used.\n * includeEdges - Optional boolean which specifies if all connected edges\n * should be removed as well. Default is true.\n */\nmxGraph.prototype.removeCells = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getDeletableCells(this.getSelectionCells());\n\t}\n\n\t// Adds all edges to the cells\n\tif (includeEdges)\n\t{\n\t\t// FIXME: Remove duplicate cells in result or do not add if\n\t\t// in cells or descendant of cells\n\t\tcells = this.getDeletableCells(this.addAllEdges(cells));\n\t}\n\telse\n\t{\n\t\tcells = cells.slice();\n\t\t\n\t\t// Removes edges that are currently not\n\t\t// visible as those cannot be updated\n\t\tvar edges = this.getDeletableCells(this.getAllEdges(cells));\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.view.getState(edges[i]) == null &&\n\t\t\t\t!dict.get(edges[i]))\n\t\t\t{\n\t\t\t\tdict.put(edges[i], true);\n\t\t\t\tcells.push(edges[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsRemoved(cells);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS, \n\t\t\t\t'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: cellsRemoved\n * \n * Removes the given cells from the model. This method fires\n * <mxEvent.CELLS_REMOVED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove.\n */\nmxGraph.prototype.cellsRemoved = function(cells)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar scale = this.view.scale;\n\t\tvar tr = this.view.translate;\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Creates hashtable for faster lookup\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\t// Disconnects edges which are not being removed\n\t\t\t\tvar edges = this.getAllEdges([cells[i]]);\n\t\t\t\t\n\t\t\t\tvar disconnectTerminal = mxUtils.bind(this, function(edge, source)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(edge);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Checks if terminal is being removed\n\t\t\t\t\t\tvar terminal = this.model.getTerminal(edge, source);\n\t\t\t\t\t\tvar connected = false;\n\t\t\t\t\t\tvar tmp = terminal;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (cells[i] == tmp)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnected = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = this.model.getParent(tmp);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (connected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tvar state = this.view.getState(edge);\n\n\t\t\t\t\t\t\tif (state != null && state.absolutePoints != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\tvar n = (source) ? 0 : pts.length - 1;\n\n\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\tpts[n].x / scale - tr.x - state.origin.x,\n\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y - state.origin.y), source);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Fallback to center of terminal if routing\n\t\t\t\t\t\t\t\t// points are not available to add new point\n\t\t\t\t\t\t\t\t// KNOWN: Should recurse to find parent offset\n\t\t\t\t\t\t\t\t// of edge for nested groups but invisible edges\n\t\t\t\t\t\t\t\t// should be removed in removeCells step\n\t\t\t\t\t\t\t\tvar tstate = this.view.getState(terminal);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tstate != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterX() / scale - tr.x,\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterY() / scale - tr.y), source);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t\t\t\tthis.model.setTerminal(edge, null, source);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (!dict.get(edges[j]))\n\t\t\t\t\t{\n\t\t\t\t\t\tdict.put(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.model.remove(cells[i]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_REMOVED, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: splitEdge\n * \n * Splits the given edge by adding the newEdge between the previous source\n * and the given cell and reconnecting the source of the given edge to the\n * given cell. This method fires <mxEvent.SPLIT_EDGE> while the transaction\n * is in progress. Returns the new edge that was inserted.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that represents the cells to insert into the edge.\n * newEdge - <mxCell> that represents the edge to be inserted.\n * dx - Optional integer that specifies the vector to move the cells.\n * dy - Optional integer that specifies the vector to move the cells.\n */\nmxGraph.prototype.splitEdge = function(edge, cells, newEdge, dx, dy)\n{\n\tdx = dx || 0;\n\tdy = dy || 0;\n\n\tvar parent = this.model.getParent(edge);\n\tvar source = this.model.getTerminal(edge, true);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tif (newEdge == null)\n\t\t{\n\t\t\tnewEdge = this.cloneCell(edge);\n\t\t\t\n\t\t\t// Removes waypoints before/after new cell\n\t\t\tvar state = this.view.getState(edge);\n\t\t\tvar geo = this.getCellGeometry(newEdge);\n\t\t\t\n\t\t\tif (geo != null && geo.points != null && state != null)\n\t\t\t{\n\t\t\t\tvar t = this.view.translate;\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar idx = mxUtils.findNearestSegment(state, (dx + t.x) * s, (dy + t.y) * s);\n\t\t\t\tgeo.points = geo.points.slice(0, idx);\n\t\t\t\t\t\t\t\t\n\t\t\t\tgeo = this.getCellGeometry(edge);\n\t\t\t\t\n\t\t\t\tif (geo != null && geo.points != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.points = geo.points.slice(idx);\n\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.cellsMoved(cells, dx, dy, false, false);\n\t\tthis.cellsAdded(cells, parent, this.model.getChildCount(parent), null, null,\n\t\t\t\ttrue);\n\t\tthis.cellsAdded([newEdge], parent, this.model.getChildCount(parent),\n\t\t\t\tsource, cells[0], false);\n\t\tthis.cellConnected(edge, cells[0], true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SPLIT_EDGE, 'edge', edge,\n\t\t\t\t'cells', cells, 'newEdge', newEdge, 'dx', dx, 'dy', dy));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn newEdge;\n};\n\n/**\n * Group: Cell visibility\n */\n\n/**\n * Function: toggleCells\n * \n * Sets the visible state of the specified cells and all connected edges\n * if includeEdges is true. The change is carried out using <cellsToggled>.\n * This method fires <mxEvent.TOGGLE_CELLS> while the transaction is in\n * progress. Returns the cells whose visible state was changed.\n * \n * Parameters:\n * \n * show - Boolean that specifies the visible state to be assigned.\n * cells - Array of <mxCells> whose visible state should be changed. If\n * null is specified then the selection cells are used.\n * includeEdges - Optional boolean indicating if the visible state of all\n * connected edges should be changed as well. Default is true.\n */\nmxGraph.prototype.toggleCells = function(show, cells, includeEdges)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\n\t// Adds all connected edges recursively\n\tif (includeEdges)\n\t{\n\t\tcells = this.addAllEdges(cells);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsToggled(cells, show);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.TOGGLE_CELLS,\n\t\t\t'show', show, 'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsToggled\n * \n * Sets the visible state of the specified cells.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose visible state should be changed.\n * show - Boolean that specifies the visible state to be assigned.\n */\nmxGraph.prototype.cellsToggled = function(cells, show)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setVisible(cells[i], show);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Folding\n */\n\n/**\n * Function: foldCells\n * \n * Sets the collapsed state of the specified cells and all descendants\n * if recurse is true. The change is carried out using <cellsFolded>.\n * This method fires <mxEvent.FOLD_CELLS> while the transaction is in\n * progress. Returns the cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Optional boolean indicating if the collapsed state of all\n * descendants should be set. Default is false.\n * cells - Array of <mxCells> whose collapsed state should be set. If\n * null is specified then the foldable selection cells are used.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n * evt - Optional native event that triggered the invocation.\n */\nmxGraph.prototype.foldCells = function(collapse, recurse, cells, checkFoldable, evt)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getFoldableCells(this.getSelectionCells(), collapse);\n\t}\n\n\tthis.stopEditing(false);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsFolded(cells, collapse, recurse, checkFoldable);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FOLD_CELLS,\n\t\t\t'collapse', collapse, 'recurse', recurse, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsFolded\n * \n * Sets the collapsed state of the specified cells. This method fires\n * <mxEvent.CELLS_FOLDED> while the transaction is in progress. Returns the\n * cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose collapsed state should be set.\n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Boolean indicating if the collapsed state of all descendants\n * should be set.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n */\nmxGraph.prototype.cellsFolded = function(cells, collapse, recurse, checkFoldable)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif ((!checkFoldable || this.isCellFoldable(cells[i], collapse)) &&\n\t\t\t\t\tcollapse != this.isCellCollapsed(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.model.setCollapsed(cells[i], collapse);\n\t\t\t\t\tthis.swapBounds(cells[i], collapse);\n\n\t\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recurse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\t\tthis.cellsFolded(children, collapse, recurse);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_FOLDED,\n\t\t\t\t'cells', cells, 'collapse', collapse, 'recurse', recurse));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swapBounds\n * \n * Swaps the alternate and the actual bounds in the geometry of the given\n * cell invoking <updateAlternateBounds> before carrying out the swap.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the bounds should be swapped.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.swapBounds = function(cell, willCollapse)\n{\n\tif (cell != null)\n\t{\n\t\tvar geo = this.model.getGeometry(cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tthis.updateAlternateBounds(cell, geo, willCollapse);\n\t\t\tgeo.swap();\n\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateAlternateBounds\n * \n * Updates or sets the alternate bounds in the given geometry for the given\n * cell depending on whether the cell is going to be collapsed. If no\n * alternate bounds are defined in the geometry and\n * <collapseToPreferredSize> is true, then the preferred size is used for\n * the alternate bounds. The top, left corner is always kept at the same\n * location.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the geometry is being udpated.\n * g - <mxGeometry> for which the alternate bounds should be updated.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.updateAlternateBounds = function(cell, geo, willCollapse)\n{\n\tif (cell != null && geo != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\n\t\tif (geo.alternateBounds == null)\n\t\t{\n\t\t\tvar bounds = geo;\n\t\t\t\n\t\t\tif (this.collapseToPreferredSize)\n\t\t\t{\n\t\t\t\tvar tmp = this.getPreferredSizeForCell(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tbounds = tmp;\n\n\t\t\t\t\tvar startSize = mxUtils.getValue(style, mxConstants.STYLE_STARTSIZE);\n\n\t\t\t\t\tif (startSize > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbounds.height = Math.max(bounds.height, startSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tgeo.alternateBounds = new mxRectangle(0, 0, bounds.width, bounds.height);\n\t\t}\n\t\t\n\t\tif (geo.alternateBounds != null)\n\t\t{\n\t\t\tgeo.alternateBounds.x = geo.x;\n\t\t\tgeo.alternateBounds.y = geo.y;\n\t\t\t\n\t\t\tvar alpha = mxUtils.toRadians(style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar dx = geo.alternateBounds.getCenterX() - geo.getCenterX();\n\t\t\t\tvar dy = geo.alternateBounds.getCenterY() - geo.getCenterY();\n\t\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\n\t\t\t\tvar dx2 = cos * dx - sin * dy;\n\t\t\t\tvar dy2 = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tgeo.alternateBounds.x += dx2 - dx;\n\t\t\t\tgeo.alternateBounds.y += dy2 - dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: addAllEdges\n * \n * Returns an array with the given cells and all edges that are connected\n * to a cell or one of its descendants.\n */\nmxGraph.prototype.addAllEdges = function(cells)\n{\n\tvar allCells = cells.slice();\n\t\n\treturn mxUtils.removeDuplicates(allCells.concat(this.getAllEdges(cells)));\n};\n\n/**\n * Function: getAllEdges\n * \n * Returns all edges connected to the given cells or its descendants.\n */\nmxGraph.prototype.getAllEdges = function(cells)\n{\n\tvar edges = [];\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar edgeCount = this.model.getEdgeCount(cells[i]);\n\t\t\t\n\t\t\tfor (var j = 0; j < edgeCount; j++)\n\t\t\t{\n\t\t\t\tedges.push(this.model.getEdgeAt(cells[i], j));\n\t\t\t}\n\n\t\t\t// Recurses\n\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\tedges = edges.concat(this.getAllEdges(children));\n\t\t}\n\t}\n\t\n\treturn edges;\n};\n\n/**\n * Group: Cell sizing\n */\n\n/**\n * Function: updateCellSize\n * \n * Updates the size of the given cell in the model using <cellSizeUpdated>.\n * This method fires <mxEvent.UPDATE_CELL_SIZE> while the transaction is in\n * progress. Returns the cell whose size was updated.\n * \n * Parameters:\n * \n * cell - <mxCell> whose size should be updated.\n */\nmxGraph.prototype.updateCellSize = function(cell, ignoreChildren)\n{\n\tignoreChildren = (ignoreChildren != null) ? ignoreChildren : false;\n\t\n\tthis.model.beginUpdate();\t\t\t\t\n\ttry\n\t{\n\t\tthis.cellSizeUpdated(cell, ignoreChildren);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UPDATE_CELL_SIZE,\n\t\t\t\t'cell', cell, 'ignoreChildren', ignoreChildren));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellSizeUpdated\n * \n * Updates the size of the given cell in the model using\n * <getPreferredSizeForCell> to get the new size.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the size should be changed.\n */\nmxGraph.prototype.cellSizeUpdated = function(cell, ignoreChildren)\n{\n\tif (cell != null)\n\t{\n\t\tthis.model.beginUpdate();\t\t\t\t\n\t\ttry\n\t\t{\n\t\t\tvar size = this.getPreferredSizeForCell(cell);\n\t\t\tvar geo = this.model.getGeometry(cell);\n\t\t\t\n\t\t\tif (size != null && geo != null)\n\t\t\t{\n\t\t\t\tvar collapsed = this.isCellCollapsed(cell);\n\t\t\t\tgeo = geo.clone();\n\n\t\t\t\tif (this.isSwimlane(cell))\n\t\t\t\t{\n\t\t\t\t\tvar style = this.getCellStyle(cell);\n\t\t\t\t\tvar cellStyle = this.model.getStyle(cell);\n\n\t\t\t\t\tif (cellStyle == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.height + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = size.height + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.width + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = size.width + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.setStyle(cell, cellStyle);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.createState(cell);\n\t\t\t\t\tvar align = (state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER);\n\t\t\t\t\t\n\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += geo.width - size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse if (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += Math.round((geo.width - size.width) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar valign = this.getVerticalAlign(state);\n\t\t\t\t\t\n\t\t\t\t\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += geo.height - size.height;\n\t\t\t\t\t}\n\t\t\t\t\telse if (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += Math.round((geo.height - size.height) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t}\n\n\t\t\t\tif (!ignoreChildren && !collapsed)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.view.getBounds(this.model.getChildren(cell));\n\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tr = this.view.translate;\n\t\t\t\t\t\tvar scale = this.view.scale;\n\n\t\t\t\t\t\tvar width = (bounds.x + bounds.width) / scale - geo.x - tr.x;\n\t\t\t\t\t\tvar height = (bounds.y + bounds.height) / scale - geo.y - tr.y;\n\n\t\t\t\t\t\tgeo.width = Math.max(geo.width, width);\n\t\t\t\t\t\tgeo.height = Math.max(geo.height, height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.cellsResized([cell], [geo], false);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getPreferredSizeForCell\n * \n * Returns the preferred width and height of the given <mxCell> as an\n * <mxRectangle>. To implement a minimum width, add a new style eg.\n * minWidth in the vertex and override this method as follows.\n * \n * (code)\n * var graphGetPreferredSizeForCell = graph.getPreferredSizeForCell;\n * graph.getPreferredSizeForCell = function(cell)\n * {\n *   var result = graphGetPreferredSizeForCell.apply(this, arguments);\n *   var style = this.getCellStyle(cell);\n *   \n *   if (style['minWidth'] > 0)\n *   {\n *     result.width = Math.max(style['minWidth'], result.width);\n *   }\n * \n *   return result;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> for which the preferred size should be returned.\n */\nmxGraph.prototype.getPreferredSizeForCell = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar state = this.view.createState(cell);\n\t\tvar style = state.style;\n\n\t\tif (!this.model.isEdge(cell))\n\t\t{\n\t\t\tvar fontSize = style[mxConstants.STYLE_FONTSIZE] || mxConstants.DEFAULT_FONTSIZE;\n\t\t\tvar dx = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t\t// Adds dimension of image if shape is a label\n\t\t\tif (this.getImage(state) != null || style[mxConstants.STYLE_IMAGE] != null)\n\t\t\t{\n\t\t\t\tif (style[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_LABEL)\n\t\t\t\t{\n\t\t\t\t\tif (style[mxConstants.STYLE_VERTICAL_ALIGN] == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx += parseFloat(style[mxConstants.STYLE_IMAGE_WIDTH]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (style[mxConstants.STYLE_ALIGN] != mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy += parseFloat(style[mxConstants.STYLE_IMAGE_HEIGHT]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adds spacings\n\t\t\tdx += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdx += style[mxConstants.STYLE_SPACING_LEFT] || 0;\n\t\t\tdx += style[mxConstants.STYLE_SPACING_RIGHT] || 0;\n\n\t\t\tdy += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdy += style[mxConstants.STYLE_SPACING_TOP] || 0;\n\t\t\tdy += style[mxConstants.STYLE_SPACING_BOTTOM] || 0;\n\t\t\t\n\t\t\t// Add spacing for collapse/expand icon\n\t\t\t// LATER: Check alignment and use constants\n\t\t\t// for image spacing\n\t\t\tvar image = this.getFoldingImage(state);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\tdx += image.width + 8;\n\t\t\t}\n\n\t\t\t// Adds space for label\n\t\t\tvar value = this.cellRenderer.getLabelValue(state);\n\n\t\t\tif (value != null && value.length > 0)\n\t\t\t{\n\t\t\t\tif (!this.isHtmlLabel(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvalue = mxUtils.htmlEntities(value, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = value.replace(/\\n/g, '<br>');\n\t\t\t\t\n\t\t\t\tvar size = mxUtils.getSizeForString(value, fontSize,\n\t\t\t\t\tstyle[mxConstants.STYLE_FONTFAMILY], null,\n\t\t\t\t\tstyle[mxConstants.STYLE_FONTSTYLE]);\n\t\t\t\tvar width = size.width + dx;\n\t\t\t\tvar height = size.height + dy;\n\t\t\t\t\n\t\t\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tvar tmp = height;\n\t\t\t\t\t\n\t\t\t\t\theight = width;\n\t\t\t\t\twidth = tmp;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (this.gridEnabled)\n\t\t\t\t{\n\t\t\t\t\twidth = this.snap(width + this.gridSize / 2);\n\t\t\t\t\theight = this.snap(height + this.gridSize / 2);\n\t\t\t\t}\n\n\t\t\t\tresult = new mxRectangle(0, 0, width, height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gs2 = 4 * this.gridSize;\n\t\t\t\tresult = new mxRectangle(0, 0, gs2, gs2);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: resizeCell\n * \n * Sets the bounds of the given cell using <resizeCells>. Returns the\n * cell which was passed to the function.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangle> that represents the new bounds.\n */\nmxGraph.prototype.resizeCell = function(cell, bounds, recurse)\n{\n\treturn this.resizeCells([cell], [bounds], recurse)[0];\n};\n\n/**\n * Function: resizeCells\n * \n * Sets the bounds of the given cells and fires a <mxEvent.RESIZE_CELLS>\n * event while the transaction is in progress. Returns the cells which\n * have been passed to the function.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n */\nmxGraph.prototype.resizeCells = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : this.isRecursiveResize();\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar prev = this.cellsResized(cells, bounds, recurse);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_CELLS,\n\t\t\t'cells', cells, 'bounds', bounds, 'previous', prev));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsResized\n * \n * Sets the bounds of the given cells and fires a <mxEvent.CELLS_RESIZED>\n * event. If <extendParents> is true, then the parent is extended if a\n * child size is changed so that it overlaps with the parent.\n * \n * The following example shows how to control group resizes to make sure\n * that all child cells stay within the group.\n * \n * (code)\n * graph.addListener(mxEvent.CELLS_RESIZED, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n *   \n *   if (cells != null)\n *   {\n *     for (var i = 0; i < cells.length; i++)\n *     {\n *       if (graph.getModel().getChildCount(cells[i]) > 0)\n *       {\n *         var geo = graph.getCellGeometry(cells[i]);\n *         \n *         if (geo != null)\n *         {\n *           var children = graph.getChildCells(cells[i], true, true);\n *           var bounds = graph.getBoundingBoxFromGeometry(children, true);\n *           \n *           geo = geo.clone();\n *           geo.width = Math.max(geo.width, bounds.width);\n *           geo.height = Math.max(geo.height, bounds.height);\n *           \n *           graph.getModel().setGeometry(cells[i], geo);\n *         }\n *       }\n *     }\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellsResized = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\tvar prev = [];\n\n\tif (cells != null && bounds != null && cells.length == bounds.length)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tprev.push(this.cellResized(cells[i], bounds[i], false, recurse));\n\n\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnResize)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_RESIZED,\n\t\t\t\t'cells', cells, 'bounds', bounds, 'previous', prev));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn prev;\n};\n\n/**\n * Function: cellResized\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangles> that represent the new bounds.\n * ignoreRelative - Boolean that indicates if relative cells should be ignored.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellResized = function(cell, bounds, ignoreRelative, recurse)\n{\n\tvar prev = this.model.getGeometry(cell);\n\n\tif (prev != null && (prev.x != bounds.x || prev.y != bounds.y ||\n\t\tprev.width != bounds.width || prev.height != bounds.height))\n\t{\n\t\tvar geo = prev.clone();\n\n\t\tif (!ignoreRelative && geo.relative)\n\t\t{\n\t\t\tvar offset = geo.offset;\n\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\toffset.x += bounds.x - geo.x;\n\t\t\t\toffset.y += bounds.y - geo.y;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.x = bounds.x;\n\t\t\tgeo.y = bounds.y;\n\t\t}\n\n\t\tgeo.width = bounds.width;\n\t\tgeo.height = bounds.height;\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (recurse)\n\t\t\t{\n\t\t\t\tthis.resizeChildCells(cell, geo);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\tthis.constrainChildCells(cell);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn prev;\n};\n\n/**\n * Function: resizeChildCells\n * \n * Resizes the child cells of the given cell for the given new geometry with\n * respect to the current geometry of the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n * newGeo - <mxGeometry> that represents the new bounds.\n */\nmxGraph.prototype.resizeChildCells = function(cell, newGeo)\n{\n\tvar geo = this.model.getGeometry(cell);\n\tvar dx = newGeo.width / geo.width;\n\tvar dy = newGeo.height / geo.height;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.scaleCell(this.model.getChildAt(cell, i), dx, dy, true);\n\t}\n};\n\n/**\n * Function: constrainChildCells\n * \n * Constrains the children of the given cell using <constrainChild>.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.constrainChildCells = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.constrainChild(this.model.getChildAt(cell, i));\n\t}\n};\n\n/**\n * Function: scaleCell\n * \n * Scales the points, position and size of the given cell according to the\n * given vertical and horizontal scaling factors.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be scaled.\n * dx - Horizontal scaling factor.\n * dy - Vertical scaling factor.\n * recurse - Boolean indicating if the child cells should be scaled.\n */\nmxGraph.prototype.scaleCell = function(cell, dx, dy, recurse)\n{\n\tvar geo = this.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\t\tgeo = geo.clone();\n\t\t\n\t\t// Stores values for restoring based on style\n\t\tvar x = geo.x;\n\t\tvar y = geo.y\n\t\tvar w = geo.width;\n\t\tvar h = geo.height;\n\t\t\n\t\tgeo.scale(dx, dy, style[mxConstants.STYLE_ASPECT] == 'fixed');\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_WIDTH] == '1')\n\t\t{\n\t\t\tgeo.width = w * dx;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_WIDTH] == '0')\n\t\t{\n\t\t\tgeo.width = w;\n\t\t}\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_HEIGHT] == '1')\n\t\t{\n\t\t\tgeo.height = h * dy;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_HEIGHT] == '0')\n\t\t{\n\t\t\tgeo.height = h;\n\t\t}\n\t\t\n\t\tif (!this.isCellMovable(cell))\n\t\t{\n\t\t\tgeo.x = x;\n\t\t\tgeo.y = y;\n\t\t}\n\t\t\n\t\tif (!this.isCellResizable(cell))\n\t\t{\n\t\t\tgeo.width = w;\n\t\t\tgeo.height = h;\n\t\t}\n\n\t\tif (this.model.isVertex(cell))\n\t\t{\n\t\t\tthis.cellResized(cell, geo, true, recurse);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendParent\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.extendParent = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\tvar p = this.getCellGeometry(parent);\n\t\t\n\t\tif (parent != null && p != null && !this.isCellCollapsed(parent))\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative &&\n\t\t\t\t(p.width < geo.x + geo.width ||\n\t\t\t\tp.height < geo.y + geo.height))\n\t\t\t{\n\t\t\t\tp = p.clone();\n\t\t\t\t\n\t\t\t\tp.width = Math.max(p.width, geo.x + geo.width);\n\t\t\t\tp.height = Math.max(p.height, geo.y + geo.height);\n\t\t\t\t\n\t\t\t\tthis.cellsResized([parent], [p], false);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Cell moving\n */\n\n/**\n * Function: importCells\n * \n * Clones and inserts the given cells into the graph using the move\n * method and returns the inserted cells. This shortcut is used if\n * cells are inserted via datatransfer.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be imported.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.importCells = function(cells, dx, dy, target, evt, mapping)\n{\t\n\treturn this.moveCells(cells, dx, dy, true, target, evt, mapping);\n};\n\n/**\n * Function: moveCells\n * \n * Moves or clones the specified cells and moves the cells or clones by the\n * given amount, adding them to the optional target cell. The evt is the\n * mouse event as the mouse was released. The change is carried out using\n * <cellsMoved>. This method fires <mxEvent.MOVE_CELLS> while the\n * transaction is in progress. Returns the cells that were moved.\n * \n * Use the following code to move all cells in the graph.\n * \n * (code)\n * graph.moveCells(graph.getChildCells(null, true, true), 10, 10);\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be moved, cloned or added to the target.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * clone - Boolean indicating if the cells should be cloned. Default is false.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.moveCells = function(cells, dx, dy, clone, target, evt, mapping)\n{\n\tdx = (dx != null) ? dx : 0;\n\tdy = (dy != null) ? dy : 0;\n\tclone = (clone != null) ? clone : false;\n\t\n\tif (cells != null && (dx != 0 || dy != 0 || clone || target != null))\n\t{\n\t\t// Removes descendants with ancestors in cells to avoid multiple moving\n\t\tcells = this.model.getTopmostCells(cells);\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Faster cell lookups to remove relative edge labels with selected\n\t\t\t// terminals to avoid explicit and implicit move at same time\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tvar isSelected = mxUtils.bind(this, function(cell)\n\t\t\t{\n\t\t\t\twhile (cell != null)\n\t\t\t\t{\n\t\t\t\t\tif (dict.get(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcell = this.model.getParent(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\t\n\t\t\t// Removes relative edge labels with selected terminals\n\t\t\tvar checked = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\n\t\t\t\tif ((geo == null || !geo.relative) || !this.model.isEdge(parent) ||\n\t\t\t\t\t(!isSelected(this.model.getTerminal(parent, true)) &&\n\t\t\t\t\t!isSelected(this.model.getTerminal(parent, false))))\n\t\t\t\t{\n\t\t\t\t\tchecked.push(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcells = checked;\n\t\t\t\n\t\t\tif (clone)\n\t\t\t{\n\t\t\t\tcells = this.cloneCells(cells, this.isCloneInvalidEdges(), mapping);\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\ttarget = this.getDefaultParent();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t// to avoid forward references in sessions.\n\t\t\t// Need to disable allowNegativeCoordinates if target not null to\n\t\t\t// allow for temporary negative numbers until cellsAdded is called.\n\t\t\tvar previous = this.isAllowNegativeCoordinates();\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tthis.setAllowNegativeCoordinates(true);\n\t\t\t}\n\t\t\t\n\t\t\tthis.cellsMoved(cells, dx, dy, !clone && this.isDisconnectOnMove()\n\t\t\t\t\t&& this.isAllowDanglingEdges(), target == null,\n\t\t\t\t\tthis.isExtendParentsOnMove() && target == null);\n\t\t\t\n\t\t\tthis.setAllowNegativeCoordinates(previous);\n\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tvar index = this.model.getChildCount(target);\n\t\t\t\tthis.cellsAdded(cells, target, index, null, null, true);\n\t\t\t}\n\n\t\t\t// Dispatches a move event\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_CELLS, 'cells', cells,\n\t\t\t\t'dx', dx, 'dy', dy, 'clone', clone, 'target', target, 'event', evt));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsMoved\n * \n * Moves the specified cells by the given vector, disconnecting the cells\n * using disconnectGraph is disconnect is true. This method fires\n * <mxEvent.CELLS_MOVED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsMoved = function(cells, dx, dy, disconnect, constrain, extend)\n{\n\tif (cells != null && (dx != 0 || dy != 0))\n\t{\n\t\textend = (extend != null) ? extend : false;\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (disconnect)\n\t\t\t{\n\t\t\t\tthis.disconnectGraph(cells);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.translateCell(cells[i], dx, dy);\n\t\t\t\t\n\t\t\t\tif (extend && this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\telse if (constrain)\n\t\t\t\t{\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnMove)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_MOVED,\n\t\t\t\t'cells', cells, 'dx', dx, 'dy', dy, 'disconnect', disconnect));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: translateCell\n * \n * Translates the geometry of the given cell and stores the new,\n * translated geometry in the model as an atomic change.\n */\nmxGraph.prototype.translateCell = function(cell, dx, dy)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null)\n\t{\n\t\tdx = parseFloat(dx);\n\t\tdy = parseFloat(dy);\n\t\tgeo = geo.clone();\n\t\tgeo.translate(dx, dy);\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, parseFloat(geo.x));\n\t\t\tgeo.y = Math.max(0, parseFloat(geo.y));\n\t\t}\n\t\t\n\t\tif (geo.relative && !this.model.isEdge(cell))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar angle = 0;\n\t\t\t\n\t\t\tif (this.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar style = this.getCurrentCellStyle(parent);\n\t\t\t\tangle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (angle != 0)\n\t\t\t{\n\t\t\t\tvar rad = mxUtils.toRadians(-angle);\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(dx, dy), cos, sin, new mxPoint(0, 0));\n\t\t\t\tdx = pt.x;\n\t\t\t\tdy = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x = parseFloat(geo.offset.x) + dx;\n\t\t\t\tgeo.offset.y = parseFloat(geo.offset.y) + dy;\n\t\t\t}\n\t\t}\n\n\t\tthis.model.setGeometry(cell, geo);\n\t}\n};\n\n/**\n * Function: getCellContainmentArea\n * \n * Returns the <mxRectangle> inside which a cell is to be kept.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the area should be returned.\n */\nmxGraph.prototype.getCellContainmentArea = function(cell)\n{\n\tif (cell != null && !this.model.isEdge(cell))\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\t\n\t\tif (parent != null && parent != this.getDefaultParent())\n\t\t{\n\t\t\tvar g = this.model.getGeometry(parent);\n\t\t\t\n\t\t\tif (g != null)\n\t\t\t{\n\t\t\t\tvar x = 0;\n\t\t\t\tvar y = 0;\n\t\t\t\tvar w = g.width;\n\t\t\t\tvar h = g.height;\n\t\t\t\t\n\t\t\t\tif (this.isSwimlane(parent))\n\t\t\t\t{\n\t\t\t\t\tvar size = this.getStartSize(parent);\n\t\t\t\t\tvar style = this.getCurrentCellStyle(parent);\n\t\t\t\t\tvar dir = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\t\t\t\tvar flipH = mxUtils.getValue(style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_SOUTH || dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = size.width;\n\t\t\t\t\t\tsize.width = size.height;\n\t\t\t\t\t\tsize.height = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((dir == mxConstants.DIRECTION_EAST && !flipV) || (dir == mxConstants.DIRECTION_NORTH && !flipH) ||\n\t\t\t\t\t\t(dir == mxConstants.DIRECTION_WEST && flipV) || (dir == mxConstants.DIRECTION_SOUTH && flipH))\n\t\t\t\t\t{\n\t\t\t\t\t\tx = size.width;\n\t\t\t\t\t\ty = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tw -= size.width;\n\t\t\t\t\th -= size.height;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxRectangle(x, y, w, h);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getMaximumGraphBounds\n * \n * Returns the bounds inside which the diagram should be kept as an\n * <mxRectangle>.\n */\nmxGraph.prototype.getMaximumGraphBounds = function()\n{\n\treturn this.maximumGraphBounds;\n};\n\n/**\n * Function: constrainChild\n * \n * Keeps the given cell inside the bounds returned by\n * <getCellContainmentArea> for its parent, according to the rules defined by\n * <getOverlap> and <isConstrainChild>. This modifies the cell's geometry\n * in-place and does not clone it.\n * \n * Parameters:\n * \n * cells - <mxCell> which should be constrained.\n * sizeFirst - Specifies if the size should be changed first. Default is true.\n */\nmxGraph.prototype.constrainChild = function(cell, sizeFirst)\n{\n\tsizeFirst = (sizeFirst != null) ? sizeFirst : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvar geo = this.getCellGeometry(cell);\n\t\t\n\t\tif (geo != null && (this.isConstrainRelativeChildren() || !geo.relative))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar pgeo = this.getCellGeometry(parent);\n\t\t\tvar max = this.getMaximumGraphBounds();\n\t\t\t\n\t\t\t// Finds parent offset\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar off = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\n\t\t\t\t\tmax.x -= off.x;\n\t\t\t\t\tmax.y -= off.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isConstrainChild(cell))\n\t\t\t{\n\t\t\t\tvar tmp = this.getCellContainmentArea(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tvar overlap = this.getOverlap(cell);\n\t\n\t\t\t\t\tif (overlap > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\t\n\t\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Find the intersection between max and tmp\n\t\t\t\t\tif (max == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar cells = [cell];\n\t\t\t\t\n\t\t\t\tif (!this.isCellCollapsed(cell))\n\t\t\t\t{\n\t\t\t\t\tvar desc = this.model.getDescendants(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < desc.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellVisible(desc[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcells.push(desc[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bbox = this.getBoundingBoxFromGeometry(cells, false);\n\t\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative horizontal movement\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.width > max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = geo.width - max.width;\n\t\t\t\t\t\tgeo.width -= dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x + bbox.width > max.x + max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x + bbox.width - max.x - max.width - dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative vertical movement\n\t\t\t\t\tvar dy = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.height > max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = geo.height - max.height;\n\t\t\t\t\t\tgeo.height -= dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y + bbox.height > max.y + max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y + bbox.height - max.y - max.height - dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x < max.x)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x - max.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y < max.y)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y - max.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Relative geometries are moved via absolute offset\n\t\t\t\t\t\t\tif (geo.offset == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.offset = new mxPoint();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tgeo.offset.x += dx;\n\t\t\t\t\t\t\tgeo.offset.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x += dx;\n\t\t\t\t\t\t\tgeo.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdges\n * \n * Resets the control points of the edges that are connected to the given\n * cells if not both ends of the edge are in the given cells array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> for which the connected edges should be\n * reset.\n */\nmxGraph.prototype.resetEdges = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\t// Prepares faster cells lookup\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar edges = this.model.getEdges(cells[i]);\n\t\t\t\t\n\t\t\t\tif (edges != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(edges[j]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[j], true);\n\t\t\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[j], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if one of the terminals is not in the given array\n\t\t\t\t\t\tif (!dict.get(source) || !dict.get(target))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.resetEdge(edges[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.resetEdges(this.model.getChildren(cells[i]));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdge\n * \n * Resets the control points of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose points should be reset.\n */\nmxGraph.prototype.resetEdge = function(edge)\n{\n\tvar geo = this.model.getGeometry(edge);\n\t\n\t// Resets the control points\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tgeo = geo.clone();\n\t\tgeo.points = [];\n\t\tthis.model.setGeometry(edge, geo);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Group: Cell connecting and connection constraints\n */\n\n/**\n * Function: getOutlineConstraint\n * \n * Returns the constraint used to connect to the outline of the given state.\n */\nmxGraph.prototype.getOutlineConstraint = function(point, terminalState, me)\n{\n\tif (terminalState.shape != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(terminalState);\n\t\tvar direction = terminalState.style[mxConstants.STYLE_DIRECTION];\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tbounds.x += bounds.width / 2 - bounds.height / 2;\n\t\t\tbounds.y += bounds.height / 2 - bounds.width / 2;\n\t\t\tvar tmp = bounds.width;\n\t\t\tbounds.width = bounds.height;\n\t\t\tbounds.height = tmp;\n\t\t}\n\t\n\t\tvar alpha = mxUtils.toRadians(terminalState.shape.getShapeRotation());\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(-alpha);\n\t\t\tvar sin = Math.sin(-alpha);\n\t\n\t\t\tvar ct = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\t\tpoint = mxUtils.getRotatedPoint(point, cos, sin, ct);\n\t\t}\n\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\t// LATER: Add flipping support for image shapes\n\t\tif (this.getModel().isVertex(terminalState.cell))\n\t\t{\n\t\t\tvar flipH = terminalState.style[mxConstants.STYLE_FLIPH];\n\t\t\tvar flipV = terminalState.style[mxConstants.STYLE_FLIPV];\n\t\t\t\n\t\t\t// Legacy support for stencilFlipH/V\n\t\t\tif (terminalState.shape != null && terminalState.shape.stencil != null)\n\t\t\t{\n\t\t\t\tflipH = mxUtils.getValue(terminalState.style, 'stencilFlipH', 0) == 1 || flipH;\n\t\t\t\tflipV = mxUtils.getValue(terminalState.style, 'stencilFlipV', 0) == 1 || flipV;\n\t\t\t}\n\t\t\t\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tvar tmp = flipH;\n\t\t\t\tflipH = flipV;\n\t\t\t\tflipV = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipH)\n\t\t\t{\n\t\t\t\tsx = -1;\n\t\t\t\tdx = -bounds.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipV)\n\t\t\t{\n\t\t\t\tsy = -1;\n\t\t\t\tdy = -bounds.height ;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpoint = new mxPoint((point.x - bounds.x) * sx - dx + bounds.x, (point.y - bounds.y) * sy - dy + bounds.y);\n\t\t\n\t\tvar x = (bounds.width == 0) ? 0 : Math.round((point.x - bounds.x) * 1000 / bounds.width) / 1000;\n\t\tvar y = (bounds.height == 0) ? 0 : Math.round((point.y - bounds.y) * 1000 / bounds.height) / 1000;\n\t\t\n\t\treturn new mxConnectionConstraint(new mxPoint(x, y), false);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getAllConnectionConstraints\n * \n * Returns an array of all <mxConnectionConstraints> for the given terminal. If\n * the shape of the given terminal is a <mxStencilShape> then the constraints\n * of the corresponding <mxStencil> are returned.\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the terminal is the source or target.\n */\nmxGraph.prototype.getAllConnectionConstraints = function(terminal, source)\n{\n\tif (terminal != null && terminal.shape != null && terminal.shape.stencil != null)\n\t{\n\t\treturn terminal.shape.stencil.constraints;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getConnectionConstraint\n * \n * Returns an <mxConnectionConstraint> that describes the given connection\n * point. This result can then be passed to <getConnectionPoint>.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n */\nmxGraph.prototype.getConnectionConstraint = function(edge, terminal, source)\n{\n\tvar point = null;\n\tvar x = edge.style[(source) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\n\tif (x != null)\n\t{\n\t\tvar y = edge.style[(source) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t\n\t\tif (y != null)\n\t\t{\n\t\t\tpoint = new mxPoint(parseFloat(x), parseFloat(y));\n\t\t}\n\t}\n\t\n\tvar perimeter = false;\n\tvar dx = 0, dy = 0;\n\t\n\tif (point != null)\n\t{\n\t\tperimeter = mxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, true);\n\n\t\t//Add entry/exit offset\n\t\tdx = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DX : mxConstants.STYLE_ENTRY_DX]);\n\t\tdy = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DY : mxConstants.STYLE_ENTRY_DY]);\n\t\t\n\t\tdx = isFinite(dx)? dx : 0;\n\t\tdy = isFinite(dy)? dy : 0;\n\t}\n\n\treturn new mxConnectionConstraint(point, perimeter, null, dx, dy);\n};\n\n/**\n * Function: setConnectionConstraint\n * \n * Sets the <mxConnectionConstraint> that describes the given connection point.\n * If no constraint is given then nothing is changed. To remove an existing\n * constraint from the given edge, use an empty constraint instead.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * terminal - <mxCell> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.setConnectionConstraint = function(edge, terminal, source, constraint)\n{\n\tif (constraint != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tif (constraint == null || constraint.point == null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t}\n\t\t\telse if (constraint.point != null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, constraint.point.x, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, constraint.point.y, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, constraint.dx, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, constraint.dy, [edge]);\n\t\t\t\t\n\t\t\t\t// Only writes 0 since 1 is default\n\t\t\t\tif (!constraint.perimeter)\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, '0', [edge]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getConnectionPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * vertex - <mxCellState> that represents the vertex.\n * constraint - <mxConnectionConstraint> that represents the connection point\n * constraint as returned by <getConnectionConstraint>.\n */\nmxGraph.prototype.getConnectionPoint = function(vertex, constraint, round)\n{\n\tround = (round != null) ? round : true;\n\tvar point = null;\n\t\n\tif (vertex != null && constraint.point != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(vertex);\n        var cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\tvar direction = vertex.style[mxConstants.STYLE_DIRECTION];\n\t\tvar r1 = 0;\n\t\t\n\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\tif (direction != null && mxUtils.getValue(vertex.style,\n\t\t\tmxConstants.STYLE_ANCHOR_POINT_DIRECTION, 1) == 1)\n\t\t{\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t{\n\t\t\t\tr1 += 270;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t{\n\t\t\t\tr1 += 180;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tr1 += 90;\n\t\t\t}\n\n\t\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tbounds.rotate90();\n\t\t\t}\n\t\t}\n\n\t\tvar scale = this.view.scale;\n\t\tpoint = new mxPoint(bounds.x + constraint.point.x * bounds.width + constraint.dx * scale,\n\t\t\t\tbounds.y + constraint.point.y * bounds.height + constraint.dy * scale);\n\t\t\n\t\t// Rotation for direction before projection on perimeter\n\t\tvar r2 = vertex.style[mxConstants.STYLE_ROTATION] || 0;\n\t\t\n\t\tif (constraint.perimeter)\n\t\t{\n\t\t\tif (r1 != 0)\n\t\t\t{\n\t\t\t\t// Only 90 degrees steps possible here so no trig needed\n\t\t\t\tvar cos = 0;\n\t\t\t\tvar sin = 0;\n\t\t\t\t\n\t\t\t\tif (r1 == 90)\n\t\t\t\t{\n\t\t\t\t\tsin = 1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 180)\n\t\t\t\t{\n\t\t\t\t\tcos = -1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 270)\n\t\t\t\t{\n\t\t\t\t\tsin = -1;\n\t\t\t\t}\n\t\t\t\t\n\t\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t\t}\n\t\n\t\t\tpoint = this.view.getPerimeterPoint(vertex, point, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr2 += r1;\n\t\t\t\n\t\t\tif (this.getModel().isVertex(vertex.cell))\n\t\t\t{\n\t\t\t\tvar flipH = vertex.style[mxConstants.STYLE_FLIPH] == 1;\n\t\t\t\tvar flipV = vertex.style[mxConstants.STYLE_FLIPV] == 1;\n\t\t\t\t\n\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\tif (vertex.shape != null && vertex.shape.stencil != null)\n\t\t\t\t{\n\t\t\t\t\tflipH = (mxUtils.getValue(vertex.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\tflipV = (mxUtils.getValue(vertex.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tvar temp = flipH;\n\t\t\t\t\tflipH = flipV\n\t\t\t\t\tflipV = temp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipH)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipV)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Generic rotation after projection on perimeter\n\t\tif (r2 != 0 && point != null)\n\t\t{\n\t        var rad = mxUtils.toRadians(r2);\n\t        var cos = Math.cos(rad);\n\t        var sin = Math.sin(rad);\n\t        \n\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t}\n\t}\n\t\n\tif (round && point != null)\n\t{\n\t\tpoint.x = Math.round(point.x);\n\t\tpoint.y = Math.round(point.y);\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: connectCell\n * \n * Connects the specified end of the given edge to the given terminal\n * using <cellConnected> and fires <mxEvent.CONNECT_CELL> while the\n * transaction is in progress. Returns the updated edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.connectCell = function(edge, terminal, source, constraint)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar previous = this.model.getTerminal(edge, source);\n\t\tthis.cellConnected(edge, terminal, source, constraint);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT_CELL,\n\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t'previous', previous));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: cellConnected\n * \n * Sets the new terminal for the given edge and resets the edge points if\n * <resetEdgesOnConnect> is true. This method fires\n * <mxEvent.CELL_CONNECTED> while the transaction is in progress.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - <mxConnectionConstraint> to be used for this connection.\n */\nmxGraph.prototype.cellConnected = function(edge, terminal, source, constraint)\n{\n\tif (edge != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar previous = this.model.getTerminal(edge, source);\n\n\t\t\t// Updates the constraint\n\t\t\tthis.setConnectionConstraint(edge, terminal, source, constraint);\n\t\t\t\n\t\t\t// Checks if the new terminal is a port, uses the ID of the port in the\n\t\t\t// style and the parent of the port as the actual terminal of the edge.\n\t\t\tif (this.isPortsEnabled())\n\t\t\t{\n\t\t\t\tvar id = null;\n\t\n\t\t\t\tif (this.isPort(terminal))\n\t\t\t\t{\n\t\t\t\t\tid = terminal.getId();\n\t\t\t\t\tterminal = this.getTerminalForPort(terminal, source);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Sets or resets all previous information for connecting to a child port\n\t\t\t\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\t\t\t\tmxConstants.STYLE_TARGET_PORT;\n\t\t\t\tthis.setCellStyles(key, id, [edge]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.model.setTerminal(edge, terminal, source);\n\t\t\t\n\t\t\tif (this.resetEdgesOnConnect)\n\t\t\t{\n\t\t\t\tthis.resetEdge(edge);\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELL_CONNECTED,\n\t\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t\t'previous', previous));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: disconnectGraph\n * \n * Disconnects the given edges from the terminals which are not in the\n * given array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be disconnected.\n */\nmxGraph.prototype.disconnectGraph = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\t\t\t\t\t\t\t\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar tr = this.view.translate;\n\t\t\t\n\t\t\t// Fast lookup for finding cells in array\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(\n\t\t\t\t\t\t\tthis.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null &&\n\t\t\t\t\t\t\tpstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar dx = -pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = -pstate.origin.y;\n\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\n\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (src != null && this.isCellDisconnectable(cells[i], src, true))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (src == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - tr.y + dy), true);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (trg != null && this.isCellDisconnectable(cells[i], trg, false))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (trg == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y + dy), false);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Drilldown\n */\n\n/**\n * Function: getCurrentRoot\n * \n * Returns the current root of the displayed cell hierarchy. This is a\n * shortcut to <mxGraphView.currentRoot> in <view>.\n */\nmxGraph.prototype.getCurrentRoot = function()\n{\n\treturn this.view.currentRoot;\n};\n \n/**\n * Function: getTranslateForRoot\n * \n * Returns the translation to be used if the given cell is the root cell as\n * an <mxPoint>. This implementation returns null.\n * \n * Example:\n * \n * To keep the children at their absolute position while stepping into groups,\n * this function can be overridden as follows.\n * \n * (code)\n * var offset = new mxPoint(0, 0);\n * \n * while (cell != null)\n * {\n *   var geo = this.model.getGeometry(cell);\n * \n *   if (geo != null)\n *   {\n *     offset.x -= geo.x;\n *     offset.y -= geo.y;\n *   }\n * \n *   cell = this.model.getParent(cell);\n * }\n * \n * return offset;\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the root.\n */\nmxGraph.prototype.getTranslateForRoot = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, the cell returned by getTerminalForPort should be used as the\n * terminal and the port should be referenced by the ID in either the\n * mxConstants.STYLE_SOURCE_PORT or the or the\n * mxConstants.STYLE_TARGET_PORT. Note that a port should not be movable.\n * This implementation always returns false.\n * \n * A typical implementation is the following:\n * \n * (code)\n * graph.isPort = function(cell)\n * {\n *   var geo = this.getCellGeometry(cell);\n *   \n *   return (geo != null) ? geo.relative : false;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxGraph.prototype.isPort = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getTerminalForPort\n * \n * Returns the terminal to be used for a given port. This implementation\n * always returns the parent cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n * source - If the cell is the source or target port.\n */\nmxGraph.prototype.getTerminalForPort = function(cell, source)\n{\n\treturn this.model.getParent(cell);\n};\n\n/**\n * Function: getChildOffsetForCell\n * \n * Returns the offset to be used for the cells inside the given cell. The\n * root and layer cells may be identified using <mxGraphModel.isRoot> and\n * <mxGraphModel.isLayer>. For all other current roots, the\n * <mxGraphView.currentRoot> field points to the respective cell, so that\n * the following holds: cell == this.view.currentRoot. This implementation\n * returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose offset should be returned.\n */\nmxGraph.prototype.getChildOffsetForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: enterGroup\n * \n * Uses the given cell as the root of the displayed cell hierarchy. If no\n * cell is specified then the selection cell is used. The cell is only used\n * if <isValidRoot> returns true.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the new root. Default is the\n * selection cell.\n */\nmxGraph.prototype.enterGroup = function(cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\tif (cell != null && this.isValidRoot(cell))\n\t{\n\t\tthis.view.setCurrentRoot(cell);\n\t\tthis.clearSelection();\n\t}\n};\n\n/**\n * Function: exitGroup\n * \n * Changes the current root to the next valid root in the displayed cell\n * hierarchy.\n */\nmxGraph.prototype.exitGroup = function()\n{\n\tvar root = this.model.getRoot();\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tvar next = this.model.getParent(current);\n\t\t\n\t\t// Finds the next valid root in the hierarchy\n\t\twhile (next != root && !this.isValidRoot(next) &&\n\t\t\t\tthis.model.getParent(next) != root)\n\t\t{\n\t\t\tnext = this.model.getParent(next);\n\t\t}\n\t\t\n\t\t// Clears the current root if the new root is\n\t\t// the model's root or one of the layers.\n\t\tif (next == root || this.model.getParent(next) == root)\n\t\t{\n\t\t\tthis.view.setCurrentRoot(null);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.view.setCurrentRoot(next);\n\t\t}\n\t\t\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\t// Selects the previous root in the graph\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: home\n * \n * Uses the root of the model as the root of the displayed cell hierarchy\n * and selects the previous root.\n */\nmxGraph.prototype.home = function()\n{\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tthis.view.setCurrentRoot(null);\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: isValidRoot\n * \n * Returns true if the given cell is a valid root for the cell display\n * hierarchy. This implementation returns true for all non-null values.\n * \n * Parameters:\n * \n * cell - <mxCell> which should be checked as a possible root.\n */\nmxGraph.prototype.isValidRoot = function(cell)\n{\n\treturn (cell != null);\n};\n\n/**\n * Group: Graph display\n */\n \n/**\n * Function: getGraphBounds\n * \n * Returns the bounds of the visible graph. Shortcut to\n * <mxGraphView.getGraphBounds>. See also: <getBoundingBoxFromGeometry>.\n */\n mxGraph.prototype.getGraphBounds = function()\n {\n \treturn this.view.getGraphBounds();\n };\n\n/**\n * Function: getCellBounds\n * \n * Returns the scaled, translated bounds for the given cell. See\n * <mxGraphView.getBounds> for arrays.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be returned.\n * includeEdge - Optional boolean that specifies if the bounds of\n * the connected edges should be included. Default is false.\n * includeDescendants - Optional boolean that specifies if the bounds\n * of all descendants should be included. Default is false.\n */\nmxGraph.prototype.getCellBounds = function(cell, includeEdges, includeDescendants)\n{\n\tvar cells = [cell];\n\t\n\t// Includes all connected edges\n\tif (includeEdges)\n\t{\n\t\tcells = cells.concat(this.model.getEdges(cell));\n\t}\n\t\n\tvar result = this.view.getBounds(cells);\n\t\n\t// Recursively includes the bounds of the children\n\tif (includeDescendants)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar tmp = this.getCellBounds(this.model.getChildAt(cell, i),\n\t\t\t\tincludeEdges, true);\n\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\tresult.add(tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getBoundingBoxFromGeometry\n * \n * Returns the bounding box for the geometries of the vertices in the\n * given array of cells. This can be used to find the graph bounds during\n * a layout operation (ie. before the last endUpdate) as follows:\n * \n * (code)\n * var cells = graph.getChildCells(graph.getDefaultParent(), true, true);\n * var bounds = graph.getBoundingBoxFromGeometry(cells, true);\n * (end)\n * \n * This can then be used to move cells to the origin:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.moveCells(cells, -Math.min(bounds.x, 0), -Math.min(bounds.y, 0))\n * }\n * (end)\n * \n * Or to translate the graph view:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.view.setTranslate(-Math.min(bounds.x, 0), -Math.min(bounds.y, 0));\n * }\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be returned.\n * includeEdges - Specifies if edge bounds should be included by computing\n * the bounding box for all points in geometry. Default is false.\n */\nmxGraph.prototype.getBoundingBoxFromGeometry = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : false;\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (includeEdges || this.model.isVertex(cells[i]))\n\t\t\t{\n\t\t\t\t// Computes the bounding box for the points in the geometry\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = null;\n\t\t\t\t\t\n\t\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar addPoint = function(pt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (pt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (tmp == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp = new mxRectangle(pt.x, pt.y, 0, 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.add(new mxRectangle(pt.x, pt.y, 0, 0));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], true) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(true));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], false) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(false));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tvar pts = geo.points;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pts != null && pts.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = new mxRectangle(pts[0].x, pts[0].y, 0, 0);\n\n\t\t\t\t\t\t\tfor (var j = 1; j < pts.length; j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taddPoint(pts[j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbbox = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && parent != this.view.currentRoot)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox = new mxRectangle(geo.x * tmp.width, geo.y * tmp.height, geo.width, geo.height);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox = mxRectangle.fromRectangle(geo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null && geo.offset != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox.x += geo.offset.x;\n\t\t\t\t\t\t\tbbox.y += geo.offset.y;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar style = this.getCurrentCellStyle(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar angle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (angle != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, angle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (result == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: refresh\n * \n * Clears all cell states or the states for the hierarchy starting at the\n * given cell and validates the graph. This fires a refresh event as the\n * last step.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the cell states should be cleared.\n */\nmxGraph.prototype.refresh = function(cell)\n{\n\tthis.view.clear(cell, cell == null);\n\tthis.view.validate();\n\tthis.sizeDidChange();\n\tthis.fireEvent(new mxEventObject(mxEvent.REFRESH));\n};\n\n/**\n * Function: snap\n * \n * Snaps the given numeric value to the grid if <gridEnabled> is true.\n * \n * Parameters:\n * \n * value - Numeric value to be snapped to the grid.\n */\nmxGraph.prototype.snap = function(value)\n{\n\tif (this.gridEnabled)\n\t{\n\t\tvalue = Math.round(value / this.gridSize ) * this.gridSize;\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: snapDelta\n * \n * Snaps the given delta with the given scaled bounds.\n */\nmxGraph.prototype.snapDelta = function(delta, bounds, ignoreGrid, ignoreHorizontal, ignoreVertical)\n{\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\t\n\tif (!ignoreGrid && this.gridEnabled)\n\t{\n\t\tvar tol = this.gridSize * s * 0.5;\n\t\t\n\t\tif (!ignoreHorizontal)\n\t\t{\n\t\t\tvar tx = bounds.x - (this.snap(bounds.x / s - t.x) + t.x) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.x- tx) < tol)\n\t\t\t{\n\t\t\t\tdelta.x = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.x = this.snap(delta.x / s) * s - tx;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!ignoreVertical)\n\t\t{\n\t\t\tvar ty = bounds.y - (this.snap(bounds.y / s - t.y) + t.y) * s;\n\t\t\t\t\n\t\t\tif (Math.abs(delta.y - ty) < tol)\n\t\t\t{\n\t\t\t\tdelta.y = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.y = this.snap(delta.y / s) * s - ty;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tol = 0.5 * s;\n\t\t\n\t\tif (!ignoreHorizontal)\n\t\t{\n\t\t\tvar tx = bounds.x - (Math.round(bounds.x / s - t.x) + t.x) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.x - tx) < tol)\n\t\t\t{\n\t\t\t\tdelta.x = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.x = Math.round(delta.x / s) * s - tx;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!ignoreVertical)\n\t\t{\t\t\n\t\t\tvar ty = bounds.y - (Math.round(bounds.y / s - t.y) + t.y) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.y - ty) < tol)\n\t\t\t{\n\t\t\t\tdelta.y = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.y = Math.round(delta.y / s) * s - ty;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: panGraph\n * \n * Shifts the graph display by the given amount. This is used to preview\n * panning operations, use <mxGraphView.setTranslate> to set a persistent\n * translation of the view. Fires <mxEvent.PAN>.\n * \n * Parameters:\n * \n * dx - Amount to shift the graph along the x-axis.\n * dy - Amount to shift the graph along the y-axis.\n */\nmxGraph.prototype.panGraph = function(dx, dy)\n{\n\tif (this.useScrollbarsForPanning && mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.container.scrollLeft = -dx;\n\t\tthis.container.scrollTop = -dy;\n\t}\n\telse\n\t{\n\t\tvar canvas = this.view.getCanvas();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\t// Puts everything inside the container in a DIV so that it\n\t\t\t// can be moved without changing the state of the container\n\t\t\tif (dx == 0 && dy == 0)\n\t\t\t{\n\t\t\t\t// Workaround for ignored removeAttribute on SVG element in IE9 standards\n\t\t\t\tif (mxClient.IS_IE)\n\t\t\t\t{\n\t\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.removeAttribute('transform');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 != null)\n\t\t\t\t{\n\t\t\t\t\tvar child = this.shiftPreview1.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview1.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview1.parentNode.removeChild(this.shiftPreview1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview1 = null;\n\t\t\t\t\t\n\t\t\t\t\tthis.container.appendChild(canvas.parentNode);\n\t\t\t\t\t\n\t\t\t\t\tchild = this.shiftPreview2.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview2.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview2.parentNode.removeChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 == null)\n\t\t\t\t{\n\t\t\t\t\t// Needs two divs for stuff before and after the SVG element\n\t\t\t\t\tthis.shiftPreview1 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview1.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview1.style.overflow = 'visible';\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview2.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview2.style.overflow = 'visible';\n\n\t\t\t\t\tvar current = this.shiftPreview1;\n\t\t\t\t\tvar child = this.container.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// SVG element is moved via transform attribute\n\t\t\t\t\t\tif (child != canvas.parentNode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent.appendChild(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = this.shiftPreview2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Inserts elements only if not empty\n\t\t\t\t\tif (this.shiftPreview1.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.insertBefore(this.shiftPreview1, canvas.parentNode);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.shiftPreview2.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.appendChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.shiftPreview1.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview1.style.top = dy + 'px';\n\t\t\t\tthis.shiftPreview2.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview2.style.top = dy + 'px';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcanvas.style.left = dx + 'px';\n\t\t\tcanvas.style.top = dy + 'px';\n\t\t}\n\t\t\n\t\tthis.panDx = dx;\n\t\tthis.panDy = dy;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN));\n\t}\n};\n\n/**\n * Function: zoomIn\n * \n * Zooms into the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomIn = function()\n{\n\tthis.zoom(this.zoomFactor);\n};\n\n/**\n * Function: zoomOut\n * \n * Zooms out of the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomOut = function()\n{\n\tthis.zoom(1 / this.zoomFactor);\n};\n\n/**\n * Function: zoomActual\n * \n * Resets the zoom and panning in the view.\n */\nmxGraph.prototype.zoomActual = function()\n{\n\tif (this.view.scale == 1)\n\t{\n\t\tthis.view.setTranslate(0, 0);\n\t}\n\telse\n\t{\n\t\tthis.view.translate.x = 0;\n\t\tthis.view.translate.y = 0;\n\n\t\tthis.view.setScale(1);\n\t}\n};\n\n/**\n * Function: zoomTo\n * \n * Zooms the graph to the given scale with an optional boolean center\n * argument, which is passd to <zoom>.\n */\nmxGraph.prototype.zoomTo = function(scale, center)\n{\n\tthis.zoom(scale / this.view.scale, center);\n};\n\n/**\n * Function: center\n * \n * Centers the graph in the container.\n * \n * Parameters:\n * \n * horizontal - Optional boolean that specifies if the graph should be centered\n * horizontally. Default is true.\n * vertical - Optional boolean that specifies if the graph should be centered\n * vertically. Default is true.\n * cx - Optional float that specifies the horizontal center. Default is 0.5.\n * cy - Optional float that specifies the vertical center. Default is 0.5.\n */\nmxGraph.prototype.center = function(horizontal, vertical, cx, cy)\n{\n\thorizontal = (horizontal != null) ? horizontal : true;\n\tvertical = (vertical != null) ? vertical : true;\n\tcx = (cx != null) ? cx : 0.5;\n\tcy = (cy != null) ? cy : 0.5;\n\t\n\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\tvar padding = 2 * this.getBorder();\n\tvar cw = this.container.clientWidth - padding;\n\tvar ch = this.container.clientHeight - padding;\n\tvar bounds = this.getGraphBounds();\n\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\n\tvar dx = (horizontal) ? cw - bounds.width : 0;\n\tvar dy = (vertical) ? ch - bounds.height : 0;\n\t\n\tif (!hasScrollbars)\n\t{\n\t\tthis.view.setTranslate((horizontal) ? Math.floor(t.x - bounds.x * s + dx * cx / s) : t.x,\n\t\t\t(vertical) ? Math.floor(t.y - bounds.y * s + dy * cy / s) : t.y);\n\t}\n\telse\n\t{\n\t\tbounds.x -= t.x;\n\t\tbounds.y -= t.y;\n\t\n\t\tvar sw = this.container.scrollWidth;\n\t\tvar sh = this.container.scrollHeight;\n\t\t\n\t\tif (sw > cw)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\t\n\t\tif (sh > ch)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\n\t\tthis.view.setTranslate(Math.floor(dx / 2 - bounds.x), Math.floor(dy / 2 - bounds.y));\n\t\tthis.container.scrollLeft = (sw - cw) / 2;\n\t\tthis.container.scrollTop = (sh - ch) / 2;\n\t}\n};\n\n/**\n * Function: zoom\n * \n * Zooms the graph using the given factor. Center is an optional boolean\n * argument that keeps the graph scrolled to the center. If the center argument\n * is omitted, then <centerZoom> will be used as its value.\n */\nmxGraph.prototype.zoom = function(factor, center)\n{\n\tcenter = (center != null) ? center : this.centerZoom;\n\tvar scale = Math.round(this.view.scale * factor * 100) / 100;\n\tvar state = this.view.getState(this.getSelectionCell());\n\tfactor = scale / this.view.scale;\n\t\n\tif (this.keepSelectionVisibleOnZoom && state != null)\n\t{\n\t\tvar rect = new mxRectangle(state.x * factor, state.y * factor,\n\t\t\tstate.width * factor, state.height * factor);\n\t\t\n\t\t// Refreshes the display only once if a scroll is carried out\n\t\tthis.view.scale = scale;\n\t\t\n\t\tif (!this.scrollRectToVisible(rect))\n\t\t{\n\t\t\tthis.view.revalidate();\n\t\t\t\n\t\t\t// Forces an event to be fired but does not revalidate again\n\t\t\tthis.view.setScale(scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\t\t\n\t\tif (center && !hasScrollbars)\n\t\t{\n\t\t\tvar dx = this.container.offsetWidth;\n\t\t\tvar dy = this.container.offsetHeight;\n\t\t\t\n\t\t\tif (factor > 1)\n\t\t\t{\n\t\t\t\tvar f = (factor - 1) / (scale * 2);\n\t\t\t\tdx *= -f;\n\t\t\t\tdy *= -f;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = (1 / factor - 1) / (this.view.scale * 2);\n\t\t\t\tdx *= f;\n\t\t\t\tdy *= f;\n\t\t\t}\n\n\t\t\tthis.view.scaleAndTranslate(scale,\n\t\t\t\tthis.view.translate.x + dx,\n\t\t\t\tthis.view.translate.y + dy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Allows for changes of translate and scrollbars during setscale\n\t\t\tvar tx = this.view.translate.x;\n\t\t\tvar ty = this.view.translate.y;\n\t\t\tvar sl = this.container.scrollLeft;\n\t\t\tvar st = this.container.scrollTop;\n\t\t\t\n\t\t\tthis.view.setScale(scale);\n\t\t\t\n\t\t\tif (hasScrollbars)\n\t\t\t{\n\t\t\t\tvar dx = 0;\n\t\t\t\tvar dy = 0;\n\t\t\t\t\n\t\t\t\tif (center)\n\t\t\t\t{\n\t\t\t\t\tdx = this.container.offsetWidth * (factor - 1) / 2;\n\t\t\t\t\tdy = this.container.offsetHeight * (factor - 1) / 2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.container.scrollLeft = (this.view.translate.x - tx) * this.view.scale + Math.round(sl * factor + dx);\n\t\t\t\tthis.container.scrollTop = (this.view.translate.y - ty) * this.view.scale + Math.round(st * factor + dy);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: zoomToRect\n * \n * Zooms the graph to the specified rectangle. If the rectangle does not have same aspect\n * ratio as the display container, it is increased in the smaller relative dimension only\n * until the aspect match. The original rectangle is centralised within this expanded one.\n * \n * Note that the input rectangular must be un-scaled and un-translated.\n * \n * Parameters:\n * \n * rect - The un-scaled and un-translated rectangluar region that should be just visible \n * after the operation\n */\nmxGraph.prototype.zoomToRect = function(rect)\n{\n\tvar scaleX = this.container.clientWidth / rect.width;\n\tvar scaleY = this.container.clientHeight / rect.height;\n\tvar aspectFactor = scaleX / scaleY;\n\n\t// Remove any overlap of the rect outside the client area\n\trect.x = Math.max(0, rect.x);\n\trect.y = Math.max(0, rect.y);\n\tvar rectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\tvar rectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\trect.width = rectRight - rect.x;\n\trect.height = rectBottom - rect.y;\n\n\t// The selection area has to be increased to the same aspect\n\t// ratio as the container, centred around the centre point of the \n\t// original rect passed in.\n\tif (aspectFactor < 1.0)\n\t{\n\t\t// Height needs increasing\n\t\tvar newHeight = rect.height / aspectFactor;\n\t\tvar deltaHeightBuffer = (newHeight - rect.height) / 2.0;\n\t\trect.height = newHeight;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar upperBuffer = Math.min(rect.y , deltaHeightBuffer);\n\t\trect.y = rect.y - upperBuffer;\n\t\t\n\t\t// Check if the bottom has extended too far\n\t\trectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\t\trect.height = rectBottom - rect.y;\n\t}\n\telse\n\t{\n\t\t// Width needs increasing\n\t\tvar newWidth = rect.width * aspectFactor;\n\t\tvar deltaWidthBuffer = (newWidth - rect.width) / 2.0;\n\t\trect.width = newWidth;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar leftBuffer = Math.min(rect.x , deltaWidthBuffer);\n\t\trect.x = rect.x - leftBuffer;\n\t\t\n\t\t// Check if the right hand side has extended too far\n\t\trectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\t\trect.width = rectRight - rect.x;\n\t}\n\n\tvar scale = this.container.clientWidth / rect.width;\n\tvar newScale = this.view.scale * scale;\n\n\tif (!mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.view.scaleAndTranslate(newScale, (this.view.translate.x - rect.x / this.view.scale), (this.view.translate.y - rect.y / this.view.scale));\n\t}\n\telse\n\t{\n\t\tthis.view.setScale(newScale);\n\t\tthis.container.scrollLeft = Math.round(rect.x * scale);\n\t\tthis.container.scrollTop = Math.round(rect.y * scale);\n\t}\n};\n\n/**\n * Function: scrollCellToVisible\n * \n * Pans the graph so that it shows the given cell. Optionally the cell may\n * be centered in the container.\n * \n * To center a given graph if the <container> has no scrollbars, use the following code.\n * \n * [code]\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x - (bounds.width - container.clientWidth) / 2,\n * \t\t\t\t\t\t   -bounds.y - (bounds.height - container.clientHeight) / 2);\n * [/code]\n * \n * Parameters:\n * \n * cell - <mxCell> to be made visible.\n * center - Optional boolean flag. Default is false.\n */\nmxGraph.prototype.scrollCellToVisible = function(cell, center)\n{\n\tvar x = -this.view.translate.x;\n\tvar y = -this.view.translate.y;\n\n\tvar state = this.view.getState(cell);\n\n\tif (state != null)\n\t{\n\t\tvar bounds = new mxRectangle(x + state.x, y + state.y, state.width,\n\t\t\tstate.height);\n\n\t\tif (center && this.container != null)\n\t\t{\n\t\t\tvar w = this.container.clientWidth;\n\t\t\tvar h = this.container.clientHeight;\n\n\t\t\tbounds.x = bounds.getCenterX() - w / 2;\n\t\t\tbounds.width = w;\n\t\t\tbounds.y = bounds.getCenterY() - h / 2;\n\t\t\tbounds.height = h;\n\t\t}\n\t\t\n\t\tvar tr = new mxPoint(this.view.translate.x, this.view.translate.y);\n\n\t\tif (this.scrollRectToVisible(bounds))\n\t\t{\n\t\t\t// Triggers an update via the view's event source\n\t\t\tvar tr2 = new mxPoint(this.view.translate.x, this.view.translate.y);\n\t\t\tthis.view.translate.x = tr.x;\n\t\t\tthis.view.translate.y = tr.y;\n\t\t\tthis.view.setTranslate(tr2.x, tr2.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollRectToVisible\n * \n * Pans the graph so that it shows the given rectangle.\n * \n * Parameters:\n * \n * rect - <mxRectangle> to be made visible.\n */\nmxGraph.prototype.scrollRectToVisible = function(rect)\n{\n\tvar isChanged = false;\n\t\n\tif (rect != null)\n\t{\n\t\tvar w = this.container.offsetWidth;\n\t\tvar h = this.container.offsetHeight;\n\n        var widthLimit = Math.min(w, rect.width);\n        var heightLimit = Math.min(h, rect.height);\n\n\t\tif (mxUtils.hasScrollbars(this.container))\n\t\t{\n\t\t\tvar c = this.container;\n\t\t\trect.x += this.view.translate.x;\n\t\t\trect.y += this.view.translate.y;\n\t\t\tvar dx = c.scrollLeft - rect.x;\n\t\t\tvar ddx = Math.max(dx - c.scrollLeft, 0);\n\n\t\t\tif (dx > 0)\n\t\t\t{\n\t\t\t\tc.scrollLeft -= dx + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = rect.x + widthLimit - c.scrollLeft - c.clientWidth;\n\n\t\t\t\tif (dx > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft += dx + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dy = c.scrollTop - rect.y;\n\t\t\tvar ddy = Math.max(0, dy - c.scrollTop);\n\n\t\t\tif (dy > 0)\n\t\t\t{\n\t\t\t\tc.scrollTop -= dy + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = rect.y + heightLimit - c.scrollTop - c.clientHeight;\n\n\t\t\t\tif (dy > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop += dy + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.useScrollbarsForPanning && (ddx != 0 || ddy != 0))\n\t\t\t{\n\t\t\t\tthis.view.setTranslate(ddx, ddy);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar x = -this.view.translate.x;\n\t\t\tvar y = -this.view.translate.y;\n\n\t\t\tvar s = this.view.scale;\n\n\t\t\tif (rect.x + widthLimit > x + w)\n\t\t\t{\n\t\t\t\tthis.view.translate.x -= (rect.x + widthLimit - w - x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y + heightLimit > y + h)\n\t\t\t{\n\t\t\t\tthis.view.translate.y -= (rect.y + heightLimit - h - y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.x < x)\n\t\t\t{\n\t\t\t\tthis.view.translate.x += (x - rect.x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y  < y)\n\t\t\t{\n\t\t\t\tthis.view.translate.y += (y - rect.y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (isChanged)\n\t\t\t{\n\t\t\t\tthis.view.refresh();\n\t\t\t\t\n\t\t\t\t// Repaints selection marker (ticket 18)\n\t\t\t\tif (this.selectionCellsHandler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.selectionCellsHandler.refresh();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn isChanged;\n};\n\n/**\n * Function: getCellGeometry\n * \n * Returns the <mxGeometry> for the given cell. This implementation uses\n * <mxGraphModel.getGeometry>. Subclasses can override this to implement\n * specific geometries for cells in only one graph, that is, it can return\n * geometries that depend on the current state of the view.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraph.prototype.getCellGeometry = function(cell)\n{\n\treturn this.model.getGeometry(cell);\n};\n\n/**\n * Function: isCellVisible\n * \n * Returns true if the given cell is visible in this graph. This\n * implementation uses <mxGraphModel.isVisible>. Subclassers can override\n * this to implement specific visibility for cells in only one graph, that\n * is, without affecting the visible state of the cell.\n * \n * When using dynamic filter expressions for cell visibility, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraph.prototype.isCellVisible = function(cell)\n{\n\treturn this.model.isVisible(cell);\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the given cell is collapsed in this graph. This\n * implementation uses <mxGraphModel.isCollapsed>. Subclassers can override\n * this to implement specific collapsed states for cells in only one graph,\n * that is, without affecting the collapsed state of the cell.\n * \n * When using dynamic filter expressions for the collapsed state, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraph.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.model.isCollapsed(cell);\n};\n\n/**\n * Function: isCellConnectable\n * \n * Returns true if the given cell is connectable in this graph. This\n * implementation uses <mxGraphModel.isConnectable>. Subclassers can override\n * this to implement specific connectable states for cells in only one graph,\n * that is, without affecting the connectable state of the cell in the model.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraph.prototype.isCellConnectable = function(cell)\n{\n\treturn this.model.isConnectable(cell);\n};\n\n/**\n * Function: isOrthogonal\n * \n * Returns true if perimeter points should be computed such that the\n * resulting edge has only horizontal or vertical segments.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n */\nmxGraph.prototype.isOrthogonal = function(edge)\n{\n\tvar orthogonal = edge.style[mxConstants.STYLE_ORTHOGONAL];\n\t\n\tif (orthogonal != null)\n\t{\n\t\treturn orthogonal;\n\t}\n\t\n\tvar tmp = this.view.getEdgeStyle(edge);\n\t\n\treturn tmp == mxEdgeStyle.SegmentConnector ||\n\t\ttmp == mxEdgeStyle.ElbowConnector ||\n\t\ttmp == mxEdgeStyle.SideToSide ||\n\t\ttmp == mxEdgeStyle.TopToBottom ||\n\t\ttmp == mxEdgeStyle.EntityRelation ||\n\t\ttmp == mxEdgeStyle.OrthConnector;\n};\n\n/**\n * Function: isLoop\n * \n * Returns true if the given cell state is a loop.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents a potential loop.\n */\nmxGraph.prototype.isLoop = function(state)\n{\n\tvar src = state.getVisibleTerminalState(true);\n\tvar trg = state.getVisibleTerminalState(false);\n\t\n\treturn (src != null && src == trg);\n};\n\n/**\n * Function: isCloneEvent\n * \n * Returns true if the given event is a clone event. This implementation\n * returns true if control is pressed.\n */\nmxGraph.prototype.isCloneEvent = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isTransparentClickEvent\n * \n * Hook for implementing click-through behaviour on selected cells. If this\n * returns true the cell behind the selected cell will be selected. This\n * implementation returns false;\n */\nmxGraph.prototype.isTransparentClickEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Function: isToggleEvent\n * \n * Returns true if the given event is a toggle event. This implementation\n * returns true if the meta key (Cmd) is pressed on Macs or if control is\n * pressed on any other platform.\n */\nmxGraph.prototype.isToggleEvent = function(evt)\n{\n\treturn (mxClient.IS_MAC) ? mxEvent.isMetaDown(evt) : mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isGridEnabledEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isGridEnabledEvent = function(evt)\n{\n\treturn evt != null && !mxEvent.isAltDown(evt);\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isConstrainedEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isIgnoreTerminalEvent\n * \n * Returns true if the given mouse event should not allow any connections to be\n * made. This implementation returns false.\n */\nmxGraph.prototype.isIgnoreTerminalEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Group: Validation\n */\n\n/**\n * Function: validationAlert\n * \n * Displays the given validation error in a dialog. This implementation uses\n * mxUtils.alert.\n */\nmxGraph.prototype.validationAlert = function(message)\n{\n\tmxUtils.alert(message);\n};\n\n/**\n * Function: isEdgeValid\n * \n * Checks if the return value of <getEdgeValidationError> for the given\n * arguments is null.\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.isEdgeValid = function(edge, source, target)\n{\n\treturn this.getEdgeValidationError(edge, source, target) == null;\n};\n\n/**\n * Function: getEdgeValidationError\n * \n * Returns the validation error message to be displayed when inserting or\n * changing an edges' connectivity. A return value of null means the edge\n * is valid, a return value of '' means it's not valid, but do not display\n * an error message. Any other (non-empty) string returned from this method\n * is displayed as an error message when trying to connect an edge to a\n * source and target. This implementation uses the <multiplicities>, and\n * checks <multigraph>, <allowDanglingEdges> and <allowLoops> to generate\n * validation errors.\n * \n * For extending this method with specific checks for source/target cells,\n * the method can be extended as follows. Returning an empty string means\n * the edge is invalid with no error message, a non-null string specifies\n * the error message, and null means the edge is valid.\n * \n * (code)\n * graph.getEdgeValidationError = function(edge, source, target)\n * {\n *   if (source != null && target != null &&\n *     this.model.getValue(source) != null &&\n *     this.model.getValue(target) != null)\n *   {\n *     if (target is not valid for source)\n *     {\n *       return 'Invalid Target';\n *     }\n *   }\n *   \n *   // \"Supercall\"\n *   return mxGraph.prototype.getEdgeValidationError.apply(this, arguments);\n * }\n * (end)\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.getEdgeValidationError = function(edge, source, target)\n{\n\tif (edge != null && !this.isAllowDanglingEdges() && (source == null || target == null))\n\t{\n\t\treturn '';\n\t}\n\t\n\tif (edge != null && this.model.getTerminal(edge, true) == null &&\n\t\tthis.model.getTerminal(edge, false) == null)\t\n\t{\n\t\treturn null;\n\t}\n\t\n\t// Checks if we're dealing with a loop\n\tif (!this.allowLoops && source == target && source != null)\n\t{\n\t\treturn '';\n\t}\n\t\n\t// Checks if the connection is generally allowed\n\tif (!this.isValidConnection(source, target))\n\t{\n\t\treturn '';\n\t}\n\n\tif (source != null && target != null)\n\t{\n\t\tvar error = '';\n\n\t\t// Checks if the cells are already connected\n\t\t// and adds an error message if required\t\t\t\n\t\tif (!this.multigraph)\n\t\t{\n\t\t\tvar tmp = this.model.getEdgesBetween(source, target, true);\n\t\t\t\n\t\t\t// Checks if the source and target are not connected by another edge\n\t\t\tif (tmp.length > 1 || (tmp.length == 1 && tmp[0] != edge))\n\t\t\t{\n\t\t\t\terror += (mxResources.get(this.alreadyConnectedResource) ||\n\t\t\t\t\tthis.alreadyConnectedResource)+'\\n';\n\t\t\t}\n\t\t}\n\n\t\t// Gets the number of outgoing edges from the source\n\t\t// and the number of incoming edges from the target\n\t\t// without counting the edge being currently changed.\n\t\tvar sourceOut = this.model.getDirectedEdgeCount(source, true, edge);\n\t\tvar targetIn = this.model.getDirectedEdgeCount(target, false, edge);\n\n\t\t// Checks the change against each multiplicity rule\n\t\tif (this.multiplicities != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t\t{\n\t\t\t\tvar err = this.multiplicities[i].check(this, edge, source,\n\t\t\t\t\ttarget, sourceOut, targetIn);\n\t\t\t\t\n\t\t\t\tif (err != null)\n\t\t\t\t{\n\t\t\t\t\terror += err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validates the source and target terminals independently\n\t\tvar err = this.validateEdge(edge, source, target);\n\t\t\n\t\tif (err != null)\n\t\t{\n\t\t\terror += err;\n\t\t}\n\t\t\n\t\treturn (error.length > 0) ? error : null;\n\t}\n\t\n\treturn (this.allowDanglingEdges) ? null : '';\n};\n\n/**\n * Function: validateEdge\n * \n * Hook method for subclassers to return an error message for the given\n * edge and terminals. This implementation returns null.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.validateEdge = function(edge, source, target)\n{\n\treturn null;\n};\n\n/**\n * Function: validateGraph\n * \n * Validates the graph by validating each descendant of the given cell or\n * the root of the model. Context is an object that contains the validation\n * state for the complete validation run. The validation errors are\n * attached to their cells using <setCellWarning>. Returns null in the case of\n * successful validation or an array of strings (warnings) in the case of\n * failed validations.\n * \n * Paramters:\n * \n * cell - Optional <mxCell> to start the validation recursion. Default is\n * the graph root.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateGraph = function(cell, context)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tcontext = (context != null) ? context : new Object();\n\t\n\tvar isValid = true;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar tmp = this.model.getChildAt(cell, i);\n\t\tvar ctx = context;\n\t\t\n\t\tif (this.isValidRoot(tmp))\n\t\t{\n\t\t\tctx = new Object();\n\t\t}\n\t\t\n\t\tvar warn = this.validateGraph(tmp, ctx);\n\t\t\n\t\tif (warn != null)\n\t\t{\n\t\t\tthis.setCellWarning(tmp, warn.replace(/\\n/g, '<br>'));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setCellWarning(tmp, null);\n\t\t}\n\t\t\n\t\tisValid = isValid && warn == null;\n\t}\n\t\n\tvar warning = '';\n\t\n\t// Adds error for invalid children if collapsed (children invisible)\n\tif (this.isCellCollapsed(cell) && !isValid)\n\t{\n\t\twarning += (mxResources.get(this.containsValidationErrorsResource) ||\n\t\t\tthis.containsValidationErrorsResource) + '\\n';\n\t}\n\t\n\t// Checks edges and cells using the defined multiplicities\n\tif (this.model.isEdge(cell))\n\t{\n\t\twarning += this.getEdgeValidationError(cell,\n\t\tthis.model.getTerminal(cell, true),\n\t\tthis.model.getTerminal(cell, false)) || '';\n\t}\n\telse\n\t{\n\t\twarning += this.getCellValidationError(cell) || '';\n\t}\n\t\n\t// Checks custom validation rules\n\tvar err = this.validateCell(cell, context);\n\t\n\tif (err != null)\n\t{\n\t\twarning += err;\n\t}\n\t\n\t// Updates the display with the warning icons\n\t// before any potential alerts are displayed.\n\t// LATER: Move this into addCellOverlay. Redraw\n\t// should check if overlay was added or removed.\n\tif (this.model.getParent(cell) == null)\n\t{\n\t\tthis.view.validate();\n\t}\n\n\treturn (warning.length > 0 || !isValid) ? warning : null;\n};\n\n/**\n * Function: getCellValidationError\n * \n * Checks all <multiplicities> that cannot be enforced while the graph is\n * being modified, namely, all multiplicities that require a minimum of\n * 1 edge.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the multiplicities should be checked.\n */\nmxGraph.prototype.getCellValidationError = function(cell)\n{\n\tvar outCount = this.model.getDirectedEdgeCount(cell, true);\n\tvar inCount = this.model.getDirectedEdgeCount(cell, false);\n\tvar value = this.model.getValue(cell);\n\tvar error = '';\n\n\tif (this.multiplicities != null)\n\t{\n\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t{\n\t\t\tvar rule = this.multiplicities[i];\n\t\t\t\n\t\t\tif (rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\trule.attr, rule.value) && (outCount > rule.max ||\n\t\t\t\toutCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t\telse if (!rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\t\trule.attr, rule.value) && (inCount > rule.max ||\n\t\t\t\t\tinCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: validateCell\n * \n * Hook method for subclassers to return an error message for the given\n * cell and validation context. This implementation returns null. Any HTML\n * breaks will be converted to linefeeds in the calling method.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to validate.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateCell = function(cell, context)\n{\n\treturn null;\n};\n\n/**\n * Group: Graph appearance\n */\n\n/**\n * Function: getBackgroundImage\n * \n * Returns the <backgroundImage> as an <mxImage>.\n */\nmxGraph.prototype.getBackgroundImage = function()\n{\n\treturn this.backgroundImage;\n};\n\n/**\n * Function: setBackgroundImage\n * \n * Sets the new <backgroundImage>.\n * \n * Parameters:\n * \n * image - New <mxImage> to be used for the background.\n */\nmxGraph.prototype.setBackgroundImage = function(image)\n{\n\tthis.backgroundImage = image;\n};\n\n/**\n * Function: getFoldingImage\n * \n * Returns the <mxImage> used to display the collapsed state of\n * the specified cell state. This returns null for all edges.\n */\nmxGraph.prototype.getFoldingImage = function(state)\n{\n\tif (state != null && this.foldingEnabled && !this.getModel().isEdge(state.cell))\n\t{\n\t\tvar tmp = this.isCellCollapsed(state.cell);\n\t\t\n\t\tif (this.isCellFoldable(state.cell, !tmp))\n\t\t{\n\t\t\treturn (tmp) ? this.collapsedImage : this.expandedImage;\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: convertValueToString\n * \n * Returns the textual representation for the given cell. This\n * implementation returns the nodename or string-representation of the user\n * object.\n *\n * Example:\n * \n * The following returns the label attribute from the cells user\n * object if it is an XML node.\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n * \treturn cell.getAttribute('label');\n * }\n * (end)\n * \n * See also: <cellLabelChanged>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose textual representation should be returned.\n */\nmxGraph.prototype.convertValueToString = function(cell)\n{\n\tvar value = this.model.getValue(cell);\n\t\n\tif (value != null)\n\t{\n\t\tif (mxUtils.isNode(value))\n\t\t{\n\t\t\treturn value.nodeName;\n\t\t}\n\t\telse if (typeof(value.toString) == 'function')\n\t\t{\n\t\t\treturn value.toString();\n\t\t}\n\t}\n\t\n\treturn '';\n};\n\n/**\n * Function: getLabel\n * \n * Returns a string or DOM node that represents the label for the given\n * cell. This implementation uses <convertValueToString> if <labelsVisible>\n * is true. Otherwise it returns an empty string.\n * \n * To truncate a label to match the size of the cell, the following code\n * can be used.\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var label = mxGraph.prototype.getLabel.apply(this, arguments);\n * \n *   if (label != null && this.model.isVertex(cell))\n *   {\n *     var geo = this.getCellGeometry(cell);\n * \n *     if (geo != null)\n *     {\n *       var max = parseInt(geo.width / 8);\n * \n *       if (label.length > max)\n *       {\n *         label = label.substring(0, max)+'...';\n *       }\n *     }\n *   } \n *   return mxUtils.htmlEntities(label);\n * }\n * (end)\n * \n * A resize listener is needed in the graph to force a repaint of the label\n * after a resize.\n * \n * (code)\n * graph.addListener(mxEvent.RESIZE_CELLS, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n * \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     this.view.removeState(cells[i]);\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be returned.\n */\nmxGraph.prototype.getLabel = function(cell)\n{\n\tvar result = '';\n\t\n\tif (this.labelsVisible && cell != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\t\t\n\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_NOLABEL, false))\n\t\t{\n\t\t\tresult = this.convertValueToString(cell);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isHtmlLabel\n * \n * Returns true if the label must be rendered as HTML markup. The default\n * implementation returns <htmlLabels>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be displayed as HTML markup.\n */\nmxGraph.prototype.isHtmlLabel = function(cell)\n{\n\treturn this.isHtmlLabels();\n};\n \n/**\n * Function: isHtmlLabels\n * \n * Returns <htmlLabels>.\n */\nmxGraph.prototype.isHtmlLabels = function()\n{\n\treturn this.htmlLabels;\n};\n \n/**\n * Function: setHtmlLabels\n * \n * Sets <htmlLabels>.\n */\nmxGraph.prototype.setHtmlLabels = function(value)\n{\n\tthis.htmlLabels = value;\n};\n\n/**\n * Function: isWrapping\n * \n * This enables wrapping for HTML labels.\n * \n * Returns true if no white-space CSS style directive should be used for\n * displaying the given cells label. This implementation returns true if\n * <mxConstants.STYLE_WHITE_SPACE> in the style of the given cell is 'wrap'.\n * \n * This is used as a workaround for IE ignoring the white-space directive\n * of child elements if the directive appears in a parent element. It\n * should be overridden to return true if a white-space directive is used\n * in the HTML markup that represents the given cells label. In order for\n * HTML markup to work in labels, <isHtmlLabel> must also return true\n * for the given cell.\n * \n * Example:\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var tmp = mxGraph.prototype.getLabel.apply(this, arguments); // \"supercall\"\n *   \n *   if (this.model.isEdge(cell))\n *   {\n *     tmp = '<div style=\"width: 150px; white-space:normal;\">'+tmp+'</div>';\n *   }\n *   \n *   return tmp;\n * }\n * \n * graph.isWrapping = function(state)\n * {\n * \t return this.model.isEdge(state.cell);\n * }\n * (end)\n * \n * Makes sure no edge label is wider than 150 pixels, otherwise the content\n * is wrapped. Note: No width must be specified for wrapped vertex labels as\n * the vertex defines the width in its geometry.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be wrapped.\n */\nmxGraph.prototype.isWrapping = function(cell)\n{\n\treturn this.getCurrentCellStyle(cell)[mxConstants.STYLE_WHITE_SPACE] == 'wrap';\n};\n\n/**\n * Function: isLabelClipped\n * \n * Returns true if the overflow portion of labels should be hidden. If this\n * returns true then vertex labels will be clipped to the size of the vertices.\n * This implementation returns true if <mxConstants.STYLE_OVERFLOW> in the\n * style of the given cell is 'hidden'.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be clipped.\n */\nmxGraph.prototype.isLabelClipped = function(cell)\n{\n\treturn this.getCurrentCellStyle(cell)[mxConstants.STYLE_OVERFLOW] == 'hidden';\n};\n\n/**\n * Function: getTooltip\n * \n * Returns the string or DOM node that represents the tooltip for the given\n * state, node and coordinate pair. This implementation checks if the given\n * node is a folding icon or overlay and returns the respective tooltip. If\n * this does not result in a tooltip, the handler for the cell is retrieved\n * from <selectionCellsHandler> and the optional getTooltipForNode method is\n * called. If no special tooltip exists here then <getTooltipForCell> is used\n * with the cell in the given state as the argument to return a tooltip for the\n * given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose tooltip should be returned.\n * node - DOM node that is currently under the mouse.\n * x - X-coordinate of the mouse.\n * y - Y-coordinate of the mouse.\n */\nmxGraph.prototype.getTooltip = function(state, node, x, y)\n{\n\tvar tip = null;\n\t\n\tif (state != null)\n\t{\n\t\t// Checks if the mouse is over the folding icon\n\t\tif (state.control != null && (node == state.control.node ||\n\t\t\tnode.parentNode == state.control.node))\n\t\t{\n\t\t\ttip = this.collapseExpandResource;\n\t\t\ttip = mxUtils.htmlEntities(mxResources.get(tip) || tip).replace(/\\\\n/g, '<br>');\n\t\t}\n\n\t\tif (tip == null && state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\t// LATER: Exit loop if tip is not null\n\t\t\t\tif (tip == null && (node == shape.node || node.parentNode == shape.node))\n\t\t\t\t{\n\t\t\t\t\ttip = shape.overlay.toString();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\tvar handler = this.selectionCellsHandler.getHandler(state.cell);\n\t\t\t\n\t\t\tif (handler != null && typeof(handler.getTooltipForNode) == 'function')\n\t\t\t{\n\t\t\t\ttip = handler.getTooltipForNode(node);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\ttip = this.getTooltipForCell(state.cell);\n\t\t}\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getTooltipForCell\n * \n * Returns the string or DOM node to be used as the tooltip for the given\n * cell. This implementation uses the cells getTooltip function if it\n * exists, or else it returns <convertValueToString> for the cell.\n * \n * Example:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   return 'Hello, World!';\n * }\n * (end)\n * \n * Replaces all tooltips with the string Hello, World!\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getTooltipForCell = function(cell)\n{\n\tvar tip = null;\n\t\n\tif (cell != null && cell.getTooltip != null)\n\t{\n\t\ttip = cell.getTooltip();\n\t}\n\telse\n\t{\n\t\ttip = this.convertValueToString(cell);\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getLinkForCell\n * \n * Returns the string to be used as the link for the given cell. This\n * implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getLinkForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getCursorForMouseEvent\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given event. This implementation calls <getCursorForCell>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForMouseEvent = function(me)\n{\n\treturn this.getCursorForCell(me.getCell());\n};\n\n/**\n * Function: getCursorForCell\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given cell. This implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getStartSize\n * \n * Returns the start size of the given swimlane, that is, the width or\n * height of the part that contains the title, depending on the\n * horizontal style. The return value is an <mxRectangle> with either\n * width or height set as appropriate.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose start size should be returned.\n * ignoreState - Optional boolean that specifies if cell state should be ignored.\n */\nmxGraph.prototype.getStartSize = function(swimlane, ignoreState)\n{\n\tvar result = new mxRectangle();\n\tvar style = this.getCurrentCellStyle(swimlane, ignoreState);\n\tvar size = parseInt(mxUtils.getValue(style,\n\t\tmxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n\t\n\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t{\n\t\tresult.height = size;\n\t}\n\telse\n\t{\n\t\tresult.width = size;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getImage\n * \n * Returns the image URL for the given cell state. This implementation\n * returns the value stored under <mxConstants.STYLE_IMAGE> in the cell\n * style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose image URL should be returned.\n */\nmxGraph.prototype.getImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_IMAGE] : null;\n};\n\n/**\n * Function: isTransparentState\n * \n * Returns true if the given state has no stroke- or fillcolor and no image.\n * \n * Parameters:\n * \n * state - <mxCellState> to check.\n */\nmxGraph.prototype.isTransparentState = function(state)\n{\n\tvar result = false;\n\t\n\tif (state != null)\n\t{\n\t\tvar stroke = mxUtils.getValue(state.style, mxConstants.STYLE_STROKECOLOR, mxConstants.NONE);\n\t\tvar fill = mxUtils.getValue(state.style, mxConstants.STYLE_FILLCOLOR, mxConstants.NONE);\n\t\t\n\t\tresult = stroke == mxConstants.NONE && fill == mxConstants.NONE && this.getImage(state) == null;\n\t\t\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVerticalAlign\n * \n * Returns the vertical alignment for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_VERTICAL_ALIGN> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose vertical alignment should be\n * returned.\n */\nmxGraph.prototype.getVerticalAlign = function(state)\n{\n\treturn (state != null && state.style != null) ?\n\t\t(state.style[mxConstants.STYLE_VERTICAL_ALIGN] ||\n\t\tmxConstants.ALIGN_MIDDLE) : null;\n};\n\n/**\n * Function: getIndicatorColor\n * \n * Returns the indicator color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_COLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_COLOR] : null;\n};\n\n/**\n * Function: getIndicatorGradientColor\n * \n * Returns the indicator gradient color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_GRADIENTCOLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator gradient color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorGradientColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_GRADIENTCOLOR] : null;\n};\n\n/**\n * Function: getIndicatorShape\n * \n * Returns the indicator shape for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_SHAPE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator shape should be returned.\n */\nmxGraph.prototype.getIndicatorShape = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_SHAPE] : null;\n};\n\n/**\n * Function: getIndicatorImage\n * \n * Returns the indicator image for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_IMAGE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator image should be returned.\n */\nmxGraph.prototype.getIndicatorImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_IMAGE] : null;\n};\n\n/**\n * Function: getBorder\n * \n * Returns the value of <border>.\n */\nmxGraph.prototype.getBorder = function()\n{\n\treturn this.border;\n};\n\n/**\n * Function: setBorder\n * \n * Sets the value of <border>.\n * \n * Parameters:\n * \n * value - Positive integer that represents the border to be used.\n */\nmxGraph.prototype.setBorder = function(value)\n{\n\tthis.border = value;\n};\n\n/**\n * Function: isSwimlane\n * \n * Returns true if the given cell is a swimlane in the graph. A swimlane is\n * a container cell with some specific behaviour. This implementation\n * checks if the shape associated with the given cell is a <mxSwimlane>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be checked.\n */\nmxGraph.prototype.isSwimlane = function(cell)\n{\n\tif (cell != null && this.model.getParent(cell) != this.model.getRoot() && !this.model.isEdge(cell))\n\t{\n\t\treturn this.getCurrentCellStyle(cell)[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_SWIMLANE;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Group: Graph behaviour\n */\n\n/**\n * Function: isResizeContainer\n * \n * Returns <resizeContainer>.\n */\nmxGraph.prototype.isResizeContainer = function()\n{\n\treturn this.resizeContainer;\n};\n\n/**\n * Function: setResizeContainer\n * \n * Sets <resizeContainer>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the container should be resized.\n */\nmxGraph.prototype.setResizeContainer = function(value)\n{\n\tthis.resizeContainer = value;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if the graph is <enabled>.\n */\nmxGraph.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Specifies if the graph should allow any interactions. This\n * implementation updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be enabled.\n */\nmxGraph.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isEscapeEnabled\n * \n * Returns <escapeEnabled>.\n */\nmxGraph.prototype.isEscapeEnabled = function()\n{\n\treturn this.escapeEnabled;\n};\n\n/**\n * Function: setEscapeEnabled\n * \n * Sets <escapeEnabled>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if escape should be enabled.\n */\nmxGraph.prototype.setEscapeEnabled = function(value)\n{\n\tthis.escapeEnabled = value;\n};\n\n/**\n * Function: isInvokesStopCellEditing\n * \n * Returns <invokesStopCellEditing>.\n */\nmxGraph.prototype.isInvokesStopCellEditing = function()\n{\n\treturn this.invokesStopCellEditing;\n};\n\n/**\n * Function: setInvokesStopCellEditing\n * \n * Sets <invokesStopCellEditing>.\n */\nmxGraph.prototype.setInvokesStopCellEditing = function(value)\n{\n\tthis.invokesStopCellEditing = value;\n};\n\n/**\n * Function: isEnterStopsCellEditing\n * \n * Returns <enterStopsCellEditing>.\n */\nmxGraph.prototype.isEnterStopsCellEditing = function()\n{\n\treturn this.enterStopsCellEditing;\n};\n\n/**\n * Function: setEnterStopsCellEditing\n * \n * Sets <enterStopsCellEditing>.\n */\nmxGraph.prototype.setEnterStopsCellEditing = function(value)\n{\n\tthis.enterStopsCellEditing = value;\n};\n\n/**\n * Function: isCellLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellLocked = function(cell)\n{\n\tvar geometry = this.model.getGeometry(cell);\n\t\n\treturn this.isCellsLocked() || (geometry != null && this.model.isVertex(cell) && geometry.relative);\n};\n\n/**\n * Function: isCellsLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellsLocked = function()\n{\n\treturn this.cellsLocked;\n};\n\n/**\n * Function: setCellsLocked\n * \n * Sets if any cell may be moved, sized, bended, disconnected, edited or\n * selected.\n * \n * Parameters:\n * \n * value - Boolean that defines the new value for <cellsLocked>.\n */\nmxGraph.prototype.setCellsLocked = function(value)\n{\n\tthis.cellsLocked = value;\n};\n\n/**\n * Function: getCloneableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getCloneableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellCloneable(cell);\n\t}));\n};\n\n/**\n * Function: isCellCloneable\n * \n * Returns true if the given cell is cloneable. This implementation returns\n * <isCellsCloneable> for all cells unless a cell style specifies\n * <mxConstants.STYLE_CLONEABLE> to be 0. \n * \n * Parameters:\n * \n * cell - Optional <mxCell> whose cloneable state should be returned.\n */\nmxGraph.prototype.isCellCloneable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\n\treturn this.isCellsCloneable() && style[mxConstants.STYLE_CLONEABLE] != 0;\n};\n\n/**\n * Function: isCellsCloneable\n * \n * Returns <cellsCloneable>, that is, if the graph allows cloning of cells\n * by using control-drag.\n */\nmxGraph.prototype.isCellsCloneable = function()\n{\n\treturn this.cellsCloneable;\n};\n\n/**\n * Function: setCellsCloneable\n * \n * Specifies if the graph should allow cloning of cells by holding down the\n * control key while cells are being moved. This implementation updates\n * <cellsCloneable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be cloneable.\n */\nmxGraph.prototype.setCellsCloneable = function(value)\n{\n\tthis.cellsCloneable = value;\n};\n\n/**\n * Function: getExportableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getExportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canExportCell(cell);\n\t}));\n};\n\n/**\n * Function: canExportCell\n * \n * Returns true if the given cell may be exported to the clipboard. This\n * implementation returns <exportEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be exported.\n */\nmxGraph.prototype.canExportCell = function(cell)\n{\n\treturn this.exportEnabled;\n};\n\n/**\n * Function: getImportableCells\n * \n * Returns the cells which may be imported in the given array of cells.\n */\nmxGraph.prototype.getImportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canImportCell(cell);\n\t}));\n};\n\n/**\n * Function: canImportCell\n * \n * Returns true if the given cell may be imported from the clipboard.\n * This implementation returns <importEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be imported.\n */\nmxGraph.prototype.canImportCell = function(cell)\n{\n\treturn this.importEnabled;\n};\n\n/**\n * Function: isCellSelectable\n *\n * Returns true if the given cell is selectable. This implementation\n * returns <cellsSelectable>.\n * \n * To add a new style for making cells (un)selectable, use the following code.\n * \n * (code)\n * mxGraph.prototype.isCellSelectable = function(cell)\n * {\n *   var style = this.getCurrentCellStyle(cell);\n *   \n *   return this.isCellsSelectable() && !this.isCellLocked(cell) && style['selectable'] != 0;\n * };\n * (end)\n * \n * You can then use the new style as shown in this example.\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'selectable=0');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose selectable state should be returned.\n */\nmxGraph.prototype.isCellSelectable = function(cell)\n{\n\treturn this.isCellsSelectable();\n};\n\n/**\n * Function: isCellsSelectable\n *\n * Returns <cellsSelectable>.\n */\nmxGraph.prototype.isCellsSelectable = function()\n{\n\treturn this.cellsSelectable;\n};\n\n/**\n * Function: setCellsSelectable\n *\n * Sets <cellsSelectable>.\n */\nmxGraph.prototype.setCellsSelectable = function(value)\n{\n\tthis.cellsSelectable = value;\n};\n\n/**\n * Function: getDeletableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getDeletableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellDeletable(cell);\n\t}));\n};\n\n/**\n * Function: isCellDeletable\n *\n * Returns true if the given cell is moveable. This returns\n * <cellsDeletable> for all given cells if a cells style does not specify\n * <mxConstants.STYLE_DELETABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose deletable state should be returned.\n */\nmxGraph.prototype.isCellDeletable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsDeletable() && style[mxConstants.STYLE_DELETABLE] != 0;\n};\n\n/**\n * Function: isCellsDeletable\n *\n * Returns <cellsDeletable>.\n */\nmxGraph.prototype.isCellsDeletable = function()\n{\n\treturn this.cellsDeletable;\n};\n\n/**\n * Function: setCellsDeletable\n * \n * Sets <cellsDeletable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow deletion of cells.\n */\nmxGraph.prototype.setCellsDeletable = function(value)\n{\n\tthis.cellsDeletable = value;\n};\n\n/**\n * Function: isLabelMovable\n *\n * Returns true if the given edges's label is moveable. This returns\n * <movable> for all given cells if <isLocked> does not return true\n * for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be moved.\n */\nmxGraph.prototype.isLabelMovable = function(cell)\n{\n\treturn !this.isCellLocked(cell) &&\n\t\t((this.model.isEdge(cell) && this.edgeLabelsMovable) ||\n\t\t(this.model.isVertex(cell) && this.vertexLabelsMovable));\n};\n\n/**\n * Function: isCellRotatable\n *\n * Returns true if the given cell is rotatable. This returns true for the given\n * cell if its style does not specify <mxConstants.STYLE_ROTATABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose rotatable state should be returned.\n */\nmxGraph.prototype.isCellRotatable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn style[mxConstants.STYLE_ROTATABLE] != 0;\n};\n\n/**\n * Function: getMovableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getMovableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellMovable(cell);\n\t}));\n};\n\n/**\n * Function: isCellMovable\n *\n * Returns true if the given cell is moveable. This returns <cellsMovable>\n * for all given cells if <isCellLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_MOVABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraph.prototype.isCellMovable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsMovable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_MOVABLE] != 0;\n};\n\n/**\n * Function: isCellsMovable\n *\n * Returns <cellsMovable>.\n */\nmxGraph.prototype.isCellsMovable = function()\n{\n\treturn this.cellsMovable;\n};\n\n/**\n * Function: setCellsMovable\n * \n * Specifies if the graph should allow moving of cells. This implementation\n * updates <cellsMsovable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow moving of cells.\n */\nmxGraph.prototype.setCellsMovable = function(value)\n{\n\tthis.cellsMovable = value;\n};\n\n/**\n * Function: isGridEnabled\n *\n * Returns <gridEnabled> as a boolean.\n */\nmxGraph.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Specifies if the grid should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the grid should be enabled.\n */\nmxGraph.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: isPortsEnabled\n *\n * Returns <portsEnabled> as a boolean.\n */\nmxGraph.prototype.isPortsEnabled = function()\n{\n\treturn this.portsEnabled;\n};\n\n/**\n * Function: setPortsEnabled\n * \n * Specifies if the ports should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the ports should be enabled.\n */\nmxGraph.prototype.setPortsEnabled = function(value)\n{\n\tthis.portsEnabled = value;\n};\n\n/**\n * Function: getGridSize\n *\n * Returns <gridSize>.\n */\nmxGraph.prototype.getGridSize = function()\n{\n\treturn this.gridSize;\n};\n\n/**\n * Function: setGridSize\n * \n * Sets <gridSize>.\n */\nmxGraph.prototype.setGridSize = function(value)\n{\n\tthis.gridSize = value;\n};\n\n/**\n * Function: getTolerance\n *\n * Returns <tolerance>.\n */\nmxGraph.prototype.getTolerance = function()\n{\n\treturn this.tolerance;\n};\n\n/**\n * Function: setTolerance\n * \n * Sets <tolerance>.\n */\nmxGraph.prototype.setTolerance = function(value)\n{\n\tthis.tolerance = value;\n};\n\n/**\n * Function: isVertexLabelsMovable\n *\n * Returns <vertexLabelsMovable>.\n */\nmxGraph.prototype.isVertexLabelsMovable = function()\n{\n\treturn this.vertexLabelsMovable;\n};\n\n/**\n * Function: setVertexLabelsMovable\n * \n * Sets <vertexLabelsMovable>.\n */\nmxGraph.prototype.setVertexLabelsMovable = function(value)\n{\n\tthis.vertexLabelsMovable = value;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n *\n * Returns <edgeLabelsMovable>.\n */\nmxGraph.prototype.isEdgeLabelsMovable = function()\n{\n\treturn this.edgeLabelsMovable;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n * \n * Sets <edgeLabelsMovable>.\n */\nmxGraph.prototype.setEdgeLabelsMovable = function(value)\n{\n\tthis.edgeLabelsMovable = value;\n};\n\n/**\n * Function: isSwimlaneNesting\n *\n * Returns <swimlaneNesting> as a boolean.\n */\nmxGraph.prototype.isSwimlaneNesting = function()\n{\n\treturn this.swimlaneNesting;\n};\n\n/**\n * Function: setSwimlaneNesting\n * \n * Specifies if swimlanes can be nested by drag and drop. This is only\n * taken into account if dropEnabled is true.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes can be nested.\n */\nmxGraph.prototype.setSwimlaneNesting = function(value)\n{\n\tthis.swimlaneNesting = value;\n};\n\n/**\n * Function: isSwimlaneSelectionEnabled\n *\n * Returns <swimlaneSelectionEnabled> as a boolean.\n */\nmxGraph.prototype.isSwimlaneSelectionEnabled = function()\n{\n\treturn this.swimlaneSelectionEnabled;\n};\n\n/**\n * Function: setSwimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selected if the mouse is released\n * over their content area.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes content areas\n * should be selected when the mouse is released over them.\n */\nmxGraph.prototype.setSwimlaneSelectionEnabled = function(value)\n{\n\tthis.swimlaneSelectionEnabled = value;\n};\n\n/**\n * Function: isMultigraph\n *\n * Returns <multigraph> as a boolean.\n */\nmxGraph.prototype.isMultigraph = function()\n{\n\treturn this.multigraph;\n};\n\n/**\n * Function: setMultigraph\n * \n * Specifies if the graph should allow multiple connections between the\n * same pair of vertices.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph allows multiple connections\n * between the same pair of vertices.\n */\nmxGraph.prototype.setMultigraph = function(value)\n{\n\tthis.multigraph = value;\n};\n\n/**\n * Function: isAllowLoops\n *\n * Returns <allowLoops> as a boolean.\n */\nmxGraph.prototype.isAllowLoops = function()\n{\n\treturn this.allowLoops;\n};\n\n/**\n * Function: setAllowDanglingEdges\n * \n * Specifies if dangling edges are allowed, that is, if edges are allowed\n * that do not have a source and/or target terminal defined.\n * \n * Parameters:\n * \n * value - Boolean indicating if dangling edges are allowed.\n */\nmxGraph.prototype.setAllowDanglingEdges = function(value)\n{\n\tthis.allowDanglingEdges = value;\n};\n\n/**\n * Function: isAllowDanglingEdges\n *\n * Returns <allowDanglingEdges> as a boolean.\n */\nmxGraph.prototype.isAllowDanglingEdges = function()\n{\n\treturn this.allowDanglingEdges;\n};\n\n/**\n * Function: setConnectableEdges\n * \n * Specifies if edges should be connectable.\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be connectable.\n */\nmxGraph.prototype.setConnectableEdges = function(value)\n{\n\tthis.connectableEdges = value;\n};\n\n/**\n * Function: isConnectableEdges\n *\n * Returns <connectableEdges> as a boolean.\n */\nmxGraph.prototype.isConnectableEdges = function()\n{\n\treturn this.connectableEdges;\n};\n\n/**\n * Function: setCloneInvalidEdges\n * \n * Specifies if edges should be inserted when cloned but not valid wrt.\n * <getEdgeValidationError>. If false such edges will be silently ignored.\n * \n * Parameters:\n * \n * value - Boolean indicating if cloned invalid edges should be\n * inserted into the graph or ignored.\n */\nmxGraph.prototype.setCloneInvalidEdges = function(value)\n{\n\tthis.cloneInvalidEdges = value;\n};\n\n/**\n * Function: isCloneInvalidEdges\n *\n * Returns <cloneInvalidEdges> as a boolean.\n */\nmxGraph.prototype.isCloneInvalidEdges = function()\n{\n\treturn this.cloneInvalidEdges;\n};\n\n/**\n * Function: setAllowLoops\n * \n * Specifies if loops are allowed.\n * \n * Parameters:\n * \n * value - Boolean indicating if loops are allowed.\n */\nmxGraph.prototype.setAllowLoops = function(value)\n{\n\tthis.allowLoops = value;\n};\n\n/**\n * Function: isDisconnectOnMove\n *\n * Returns <disconnectOnMove> as a boolean.\n */\nmxGraph.prototype.isDisconnectOnMove = function()\n{\n\treturn this.disconnectOnMove;\n};\n\n/**\n * Function: setDisconnectOnMove\n * \n * Specifies if edges should be disconnected when moved. (Note: Cloned\n * edges are always disconnected.)\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be disconnected\n * when moved.\n */\nmxGraph.prototype.setDisconnectOnMove = function(value)\n{\n\tthis.disconnectOnMove = value;\n};\n\n/**\n * Function: isDropEnabled\n *\n * Returns <dropEnabled> as a boolean.\n */\nmxGraph.prototype.isDropEnabled = function()\n{\n\treturn this.dropEnabled;\n};\n\n/**\n * Function: setDropEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setDropEnabled = function(value)\n{\n\tthis.dropEnabled = value;\n};\n\n/**\n * Function: isSplitEnabled\n *\n * Returns <splitEnabled> as a boolean.\n */\nmxGraph.prototype.isSplitEnabled = function()\n{\n\treturn this.splitEnabled;\n};\n\n/**\n * Function: setSplitEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setSplitEnabled = function(value)\n{\n\tthis.splitEnabled = value;\n};\n\n/**\n * Function: isCellResizable\n *\n * Returns true if the given cell is resizable. This returns\n * <cellsResizable> for all given cells if <isCellLocked> does not return\n * true for the given cell and its style does not specify\n * <mxConstants.STYLE_RESIZABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose resizable state should be returned.\n */\nmxGraph.prototype.isCellResizable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\n\treturn this.isCellsResizable() && !this.isCellLocked(cell) &&\n\t\tmxUtils.getValue(style, mxConstants.STYLE_RESIZABLE, '1') != '0';\n};\n\n/**\n * Function: isCellsResizable\n *\n * Returns <cellsResizable>.\n */\nmxGraph.prototype.isCellsResizable = function()\n{\n\treturn this.cellsResizable;\n};\n\n/**\n * Function: setCellsResizable\n * \n * Specifies if the graph should allow resizing of cells. This\n * implementation updates <cellsResizable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow resizing of\n * cells.\n */\nmxGraph.prototype.setCellsResizable = function(value)\n{\n\tthis.cellsResizable = value;\n};\n\n/**\n * Function: isTerminalPointMovable\n *\n * Returns true if the given terminal point is movable. This is independent\n * from <isCellConnectable> and <isCellDisconnectable> and controls if terminal\n * points can be moved in the graph if the edge is not connected. Note that it\n * is required for this to return true to connect unconnected edges. This\n * implementation returns true.\n * \n * Parameters:\n * \n * cell - <mxCell> whose terminal point should be moved.\n * source - Boolean indicating if the source or target terminal should be moved.\n */\nmxGraph.prototype.isTerminalPointMovable = function(cell, source)\n{\n\treturn true;\n};\n\n/**\n * Function: isCellBendable\n *\n * Returns true if the given cell is bendable. This returns <cellsBendable>\n * for all given cells if <isLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_BENDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bendable state should be returned.\n */\nmxGraph.prototype.isCellBendable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsBendable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_BENDABLE] != 0;\n};\n\n/**\n * Function: isCellsBendable\n *\n * Returns <cellsBenadable>.\n */\nmxGraph.prototype.isCellsBendable = function()\n{\n\treturn this.cellsBendable;\n};\n\n/**\n * Function: setCellsBendable\n * \n * Specifies if the graph should allow bending of edges. This\n * implementation updates <bendable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow bending of\n * edges.\n */\nmxGraph.prototype.setCellsBendable = function(value)\n{\n\tthis.cellsBendable = value;\n};\n\n/**\n * Function: isCellEditable\n *\n * Returns true if the given cell is editable. This returns <cellsEditable> for\n * all given cells if <isCellLocked> does not return true for the given cell\n * and its style does not specify <mxConstants.STYLE_EDITABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose editable state should be returned.\n */\nmxGraph.prototype.isCellEditable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsEditable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_EDITABLE] != 0;\n};\n\n/**\n * Function: isCellsEditable\n *\n * Returns <cellsEditable>.\n */\nmxGraph.prototype.isCellsEditable = function()\n{\n\treturn this.cellsEditable;\n};\n\n/**\n * Function: setCellsEditable\n * \n * Specifies if the graph should allow in-place editing for cell labels.\n * This implementation updates <cellsEditable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow in-place\n * editing.\n */\nmxGraph.prototype.setCellsEditable = function(value)\n{\n\tthis.cellsEditable = value;\n};\n\n/**\n * Function: isCellDisconnectable\n *\n * Returns true if the given cell is disconnectable from the source or\n * target terminal. This returns <isCellsDisconnectable> for all given\n * cells if <isCellLocked> does not return true for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose disconnectable state should be returned.\n * terminal - <mxCell> that represents the source or target terminal.\n * source - Boolean indicating if the source or target terminal is to be\n * disconnected.\n */\nmxGraph.prototype.isCellDisconnectable = function(cell, terminal, source)\n{\n\treturn this.isCellsDisconnectable() && !this.isCellLocked(cell);\n};\n\n/**\n * Function: isCellsDisconnectable\n *\n * Returns <cellsDisconnectable>.\n */\nmxGraph.prototype.isCellsDisconnectable = function()\n{\n\treturn this.cellsDisconnectable;\n};\n\n/**\n * Function: setCellsDisconnectable\n *\n * Sets <cellsDisconnectable>.\n */\nmxGraph.prototype.setCellsDisconnectable = function(value)\n{\n\tthis.cellsDisconnectable = value;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns true if the given cell is a valid source for new connections.\n * This implementation returns true for all non-null values and is\n * called by is called by <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible source or null.\n */\nmxGraph.prototype.isValidSource = function(cell)\n{\n\treturn (cell == null && this.allowDanglingEdges) ||\n\t\t(cell != null && (!this.model.isEdge(cell) ||\n\t\tthis.connectableEdges) && this.isCellConnectable(cell));\n};\n\t\n/**\n * Function: isValidTarget\n * \n * Returns <isValidSource> for the given cell. This is called by\n * <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible target or null.\n */\nmxGraph.prototype.isValidTarget = function(cell)\n{\n\treturn this.isValidSource(cell);\n};\n\n/**\n * Function: isValidConnection\n * \n * Returns true if the given target cell is a valid target for source.\n * This is a boolean implementation for not allowing connections between\n * certain pairs of vertices and is called by <getEdgeValidationError>.\n * This implementation returns true if <isValidSource> returns true for\n * the source and <isValidTarget> returns true for the target.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source cell.\n * target - <mxCell> that represents the target cell.\n */\nmxGraph.prototype.isValidConnection = function(source, target)\n{\n\treturn this.isValidSource(source) && this.isValidTarget(target);\n};\n\n/**\n * Function: setConnectable\n * \n * Specifies if the graph should allow new connections. This implementation\n * updates <mxConnectionHandler.enabled> in <connectionHandler>.\n * \n * Parameters:\n * \n * connectable - Boolean indicating if new connections should be allowed.\n */\nmxGraph.prototype.setConnectable = function(connectable)\n{\n\tthis.connectionHandler.setEnabled(connectable);\n};\n\t\n/**\n * Function: isConnectable\n * \n * Returns true if the <connectionHandler> is enabled.\n */\nmxGraph.prototype.isConnectable = function()\n{\n\treturn this.connectionHandler.isEnabled();\n};\n\n/**\n * Function: setTooltips\n * \n * Specifies if tooltips should be enabled. This implementation updates\n * <mxTooltipHandler.enabled> in <tooltipHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if tooltips should be enabled.\n */\nmxGraph.prototype.setTooltips = function (enabled)\n{\n\tthis.tooltipHandler.setEnabled(enabled);\n};\n\n/**\n * Function: setPanning\n * \n * Specifies if panning should be enabled. This implementation updates\n * <mxPanningHandler.panningEnabled> in <panningHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if panning should be enabled.\n */\nmxGraph.prototype.setPanning = function(enabled)\n{\n\tthis.panningHandler.panningEnabled = enabled;\n};\n\n/**\n * Function: isEditing\n * \n * Returns true if the given cell is currently being edited.\n * If no cell is specified then this returns true if any\n * cell is currently being edited.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be checked.\n */\nmxGraph.prototype.isEditing = function(cell)\n{\n\tif (this.cellEditor != null)\n\t{\n\t\tvar editingCell = this.cellEditor.getEditingCell();\n\t\t\n\t\treturn (cell == null) ? editingCell != null : cell == editingCell;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isAutoSizeCell\n * \n * Returns true if the size of the given cell should automatically be\n * updated after a change of the label. This implementation returns\n * <autoSizeCells> or checks if the cell style does specify\n * <mxConstants.STYLE_AUTOSIZE> to be 1.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be resized.\n */\nmxGraph.prototype.isAutoSizeCell = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isAutoSizeCells() || style[mxConstants.STYLE_AUTOSIZE] == 1;\n};\n\n/**\n * Function: isAutoSizeCells\n * \n * Returns <autoSizeCells>.\n */\nmxGraph.prototype.isAutoSizeCells = function()\n{\n\treturn this.autoSizeCells;\n};\n\n/**\n * Function: setAutoSizeCells\n * \n * Specifies if cell sizes should be automatically updated after a label\n * change. This implementation sets <autoSizeCells> to the given parameter.\n * To update the size of cells when the cells are added, set\n * <autoSizeCellsOnAdd> to true.\n * \n * Parameters:\n * \n * value - Boolean indicating if cells should be resized\n * automatically.\n */\nmxGraph.prototype.setAutoSizeCells = function(value)\n{\n\tthis.autoSizeCells = value;\n};\n\n/**\n * Function: isExtendParent\n * \n * Returns true if the parent of the given cell should be extended if the\n * child has been resized so that it overlaps the parent. This\n * implementation returns <isExtendParents> if the cell is not an edge.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.isExtendParent = function(cell)\n{\n\treturn !this.getModel().isEdge(cell) && this.isExtendParents();\n};\n\n/**\n * Function: isExtendParents\n * \n * Returns <extendParents>.\n */\nmxGraph.prototype.isExtendParents = function()\n{\n\treturn this.extendParents;\n};\n\n/**\n * Function: setExtendParents\n * \n * Sets <extendParents>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParents>.\n */\nmxGraph.prototype.setExtendParents = function(value)\n{\n\tthis.extendParents = value;\n};\n\n/**\n * Function: isExtendParentsOnAdd\n * \n * Returns <extendParentsOnAdd>.\n */\nmxGraph.prototype.isExtendParentsOnAdd = function(cell)\n{\n\treturn this.extendParentsOnAdd;\n};\n\n/**\n * Function: setExtendParentsOnAdd\n * \n * Sets <extendParentsOnAdd>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnAdd = function(value)\n{\n\tthis.extendParentsOnAdd = value;\n};\n\n/**\n * Function: isExtendParentsOnMove\n * \n * Returns <extendParentsOnMove>.\n */\nmxGraph.prototype.isExtendParentsOnMove = function()\n{\n\treturn this.extendParentsOnMove;\n};\n\n/**\n * Function: setExtendParentsOnMove\n * \n * Sets <extendParentsOnMove>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnMove = function(value)\n{\n\tthis.extendParentsOnMove = value;\n};\n\n/**\n * Function: isRecursiveResize\n * \n * Returns <recursiveResize>.\n * \n * Parameters:\n * \n * state - <mxCellState> that is being resized.\n */\nmxGraph.prototype.isRecursiveResize = function(state)\n{\n\treturn this.recursiveResize;\n};\n\n/**\n * Function: setRecursiveResize\n * \n * Sets <recursiveResize>.\n * \n * Parameters:\n * \n * value - New boolean value for <recursiveResize>.\n */\nmxGraph.prototype.setRecursiveResize = function(value)\n{\n\tthis.recursiveResize = value;\n};\n\n/**\n * Function: isConstrainChild\n * \n * Returns true if the given cell should be kept inside the bounds of its\n * parent according to the rules defined by <getOverlap> and\n * <isAllowOverlapParent>. This implementation returns false for all children\n * of edges and <isConstrainChildren> otherwise.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be constrained.\n */\nmxGraph.prototype.isConstrainChild = function(cell)\n{\n\treturn this.isConstrainChildren() && !this.getModel().isEdge(this.getModel().getParent(cell));\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <constrainChildren>.\n */\nmxGraph.prototype.isConstrainChildren = function()\n{\n\treturn this.constrainChildren;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <constrainChildren>.\n */\nmxGraph.prototype.setConstrainChildren = function(value)\n{\n\tthis.constrainChildren = value;\n};\n\n/**\n * Function: isConstrainRelativeChildren\n * \n * Returns <constrainRelativeChildren>.\n */\nmxGraph.prototype.isConstrainRelativeChildren = function()\n{\n\treturn this.constrainRelativeChildren;\n};\n\n/**\n * Function: setConstrainRelativeChildren\n * \n * Sets <constrainRelativeChildren>.\n */\nmxGraph.prototype.setConstrainRelativeChildren = function(value)\n{\n\tthis.constrainRelativeChildren = value;\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <allowNegativeCoordinates>.\n */\nmxGraph.prototype.isAllowNegativeCoordinates = function()\n{\n\treturn this.allowNegativeCoordinates;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <allowNegativeCoordinates>.\n */\nmxGraph.prototype.setAllowNegativeCoordinates = function(value)\n{\n\tthis.allowNegativeCoordinates = value;\n};\n\n/**\n * Function: getOverlap\n * \n * Returns a decimal number representing the amount of the width and height\n * of the given cell that is allowed to overlap its parent. A value of 0\n * means all children must stay inside the parent, 1 means the child is\n * allowed to be placed outside of the parent such that it touches one of\n * the parents sides. If <isAllowOverlapParent> returns false for the given\n * cell, then this method returns 0.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the overlap ratio should be returned.\n */\nmxGraph.prototype.getOverlap = function(cell)\n{\n\treturn (this.isAllowOverlapParent(cell)) ? this.defaultOverlap : 0;\n};\n\t\n/**\n * Function: isAllowOverlapParent\n * \n * Returns true if the given cell is allowed to be placed outside of the\n * parents area.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the child to be checked.\n */\nmxGraph.prototype.isAllowOverlapParent = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getFoldableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getFoldableCells = function(cells, collapse)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellFoldable(cell, collapse);\n\t}));\n};\n\n/**\n * Function: isCellFoldable\n * \n * Returns true if the given cell is foldable. This implementation\n * returns true if the cell has at least one child and its style\n * does not specify <mxConstants.STYLE_FOLDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose foldable state should be returned.\n */\nmxGraph.prototype.isCellFoldable = function(cell, collapse)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.model.getChildCount(cell) > 0 && style[mxConstants.STYLE_FOLDABLE] != 0;\n};\n\n/**\n * Function: isValidDropTarget\n *\n * Returns true if the given cell is a valid drop target for the specified\n * cells. If <splitEnabled> is true then this returns <isSplitTarget> for\n * the given arguments else it returns true if the cell is not collapsed\n * and its child count is greater than 0.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the possible drop target.\n * cells - <mxCells> that should be dropped into the target.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isValidDropTarget = function(cell, cells, evt)\n{\n\treturn cell != null && ((this.isSplitEnabled() &&\n\t\tthis.isSplitTarget(cell, cells, evt)) || (!this.model.isEdge(cell) &&\n\t\t(this.isSwimlane(cell) || (this.model.getChildCount(cell) > 0 &&\n\t\t!this.isCellCollapsed(cell)))));\n};\n\n/**\n * Function: isSplitTarget\n *\n * Returns true if the given edge may be splitted into two edges with the\n * given cell as a new terminal between the two.\n * \n * Parameters:\n * \n * target - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that should split the edge.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isSplitTarget = function(target, cells, evt)\n{\n\tif (this.model.isEdge(target) && cells != null && cells.length == 1 &&\n\t\tthis.isCellConnectable(cells[0]) && this.getEdgeValidationError(target,\n\t\t\tthis.model.getTerminal(target, true), cells[0]) == null)\n\t{\n\t\tvar src = this.model.getTerminal(target, true);\n\t\tvar trg = this.model.getTerminal(target, false);\n\n\t\treturn (!this.model.isAncestor(cells[0], src) &&\n\t\t\t\t!this.model.isAncestor(cells[0], trg));\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the given cell if it is a drop target for the given cells or the\n * nearest ancestor that may be used as a drop target for the given cells.\n * If the given array contains a swimlane and <swimlaneNesting> is false\n * then this always returns null. If no cell is given, then the bottommost\n * swimlane at the location of the given event is returned.\n * \n * This function should only be used if <isDropEnabled> returns true.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> which are to be dropped onto the target.\n * evt - Mouseevent for the drag and drop.\n * cell - <mxCell> that is under the mousepointer.\n * clone - Optional boolean to indicate of cells will be cloned.\n */\nmxGraph.prototype.getDropTarget = function(cells, evt, cell, clone)\n{\n\tif (!this.isSwimlaneNesting())\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar pt = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\tpt.x -= this.panDx;\n\tpt.y -= this.panDy;\n\tvar swimlane = this.getSwimlaneAt(pt.x, pt.y);\n\t\n\tif (cell == null)\n\t{\n\t\tcell = swimlane;\n\t}\n\telse if (swimlane != null)\n\t{\n\t\t// Checks if the cell is an ancestor of the swimlane\n\t\t// under the mouse and uses the swimlane in that case\n\t\tvar tmp = this.model.getParent(swimlane);\n\t\t\n\t\twhile (tmp != null && this.isSwimlane(tmp) && tmp != cell)\n\t\t{\n\t\t\ttmp = this.model.getParent(tmp);\n\t\t}\n\t\t\n\t\tif (tmp == cell)\n\t\t{\n\t\t\tcell = swimlane;\n\t\t}\n\t}\n\t\n\twhile (cell != null && !this.isValidDropTarget(cell, cells, evt) &&\n\t\t!this.model.isLayer(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\t// Checks if parent is dropped into child if not cloning\n\tif (clone == null || !clone)\n\t{\n\t\tvar parent = cell;\n\t\t\n\t\twhile (parent != null && mxUtils.indexOf(cells, parent) < 0)\n\t\t{\n\t\t\tparent = this.model.getParent(parent);\n\t\t}\n\t}\n\n\treturn (!this.model.isLayer(cell) && parent == null) ? cell : null;\n};\n\n/**\n * Group: Cell retrieval\n */\n\n/**\n * Function: getDefaultParent\n * \n * Returns <defaultParent> or <mxGraphView.currentRoot> or the first child\n * child of <mxGraphModel.root> if both are null. The value returned by\n * this function should be used as the parent for new cells (aka default\n * layer).\n */\nmxGraph.prototype.getDefaultParent = function()\n{\n\tvar parent = this.getCurrentRoot();\n\t\n\tif (parent == null)\n\t{\n\t\tparent = this.defaultParent;\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tvar root = this.model.getRoot();\n\t\t\tparent = this.model.getChildAt(root, 0);\n\t\t}\n\t}\n\t\n\treturn parent;\n};\n\n/**\n * Function: setDefaultParent\n * \n * Sets the <defaultParent> to the given cell. Set this to null to return\n * the first child of the root in getDefaultParent.\n */\nmxGraph.prototype.setDefaultParent = function(cell)\n{\n\tthis.defaultParent = cell;\n};\n\n/**\n * Function: getSwimlane\n * \n * Returns the nearest ancestor of the given cell which is a swimlane, or\n * the given cell, if it is itself a swimlane.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the ancestor swimlane should be returned.\n */\nmxGraph.prototype.getSwimlane = function(cell)\n{\n\twhile (cell != null && !this.isSwimlane(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: getSwimlaneAt\n * \n * Returns the bottom-most swimlane that intersects the given point (x, y)\n * in the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is <defaultParent>.\n */\nmxGraph.prototype.getSwimlaneAt = function (x, y, parent)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getRoot();\n\t\t}\n\t}\n\t\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\tvar result = this.getSwimlaneAt(x, y, child);\n\t\t\t\t\n\t\t\t\tif (result != null)\n\t\t\t\t{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\telse if (this.isCellVisible(child) && this.isSwimlane(child))\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\t\n\t\t\t\t\tif (this.intersects(state, x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getCellAt\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy starting at the given parent. This will also return\n * swimlanes if the given location intersects the content area of the\n * swimlane. If this is not desired, then the <hitsSwimlaneContent> may be\n * used if the returned cell is a swimlane to determine if the location\n * is inside the content area or on the actual title of the swimlane.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * vertices - Optional boolean indicating if vertices should be returned.\n * Default is true.\n * edges - Optional boolean indicating if edges should be returned. Default\n * is true.\n * ignoreFn - Optional function that returns true if cell should be ignored.\n * The function is passed the cell state and the x and y parameter.\n */\nmxGraph.prototype.getCellAt = function(x, y, parent, vertices, edges, ignoreFn)\n{\n\tvertices = (vertices != null) ? vertices : true;\n\tedges = (edges != null) ? edges : true;\n\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar cell = this.model.getChildAt(parent, i);\n\t\t\tvar result = this.getCellAt(x, y, cell, vertices, edges, ignoreFn);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if (this.isCellVisible(cell) && (edges && this.model.isEdge(cell) ||\n\t\t\t\tvertices && this.model.isVertex(cell)))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cell);\n\n\t\t\t\tif (state != null && (ignoreFn == null || !ignoreFn(state, x, y)) &&\n\t\t\t\t\tthis.intersects(state, x, y))\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: intersects\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n */\nmxGraph.prototype.intersects = function(state, x, y)\n{\n\tif (state != null)\n\t{\n\t\tvar pts = state.absolutePoints;\n\n\t\tif (pts != null)\n\t\t{\n\t\t\tvar t2 = this.tolerance * this.tolerance;\n\t\t\tvar pt = pts[0];\n\t\t\t\n\t\t\tfor (var i = 1; i < pts.length; i++)\n\t\t\t{\n\t\t\t\tvar next = pts[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(pt.x, pt.y, next.x, next.y, x, y);\n\t\t\t\t\n\t\t\t\tif (dist <= t2)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpt = next;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (mxUtils.contains(state, x, y))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: hitsSwimlaneContent\n * \n * Returns true if the given coordinate pair is inside the content\n * are of the given swimlane.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that specifies the swimlane.\n * x - X-coordinate of the mouse event.\n * y - Y-coordinate of the mouse event.\n */\nmxGraph.prototype.hitsSwimlaneContent = function(swimlane, x, y)\n{\n\tvar state = this.getView().getState(swimlane);\n\tvar size = this.getStartSize(swimlane);\n\t\n\tif (state != null)\n\t{\n\t\tvar scale = this.getView().getScale();\n\t\tx -= state.x;\n\t\ty -= state.y;\n\t\t\n\t\tif (size.width > 0 && x > 0 && x > size.width * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (size.height > 0 && y > 0 && y > size.height * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getChildVertices\n * \n * Returns the visible child vertices of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n */\nmxGraph.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\n/**\n * Function: getChildEdges\n * \n * Returns the visible child edges of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose child vertices should be returned.\n */\nmxGraph.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the visible child vertices or edges in the given parent. If\n * vertices and edges is false, then all children are returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n * vertices - Optional boolean that specifies if child vertices should\n * be returned. Default is false.\n * edges - Optional boolean that specifies if child edges should\n * be returned. Default is false.\n */\nmxGraph.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tparent = (parent != null) ? parent : this.getDefaultParent();\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\n\tvar cells = this.model.getChildCells(parent, vertices, edges);\n\tvar result = [];\n\n\t// Filters out the non-visible child cells\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tresult.push(cells[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\n/**\n * Function: getConnections\n * \n * Returns all visible edges connected to the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connections should be returned.\n * parent - Optional parent of the opposite end for a connection to be\n * returned.\n */\nmxGraph.prototype.getConnections = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, true, false);\n};\n\t\n/**\n * Function: getIncomingEdges\n * \n * Returns the visible incoming edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getIncomingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, false, false);\n};\n\t\n/**\n * Function: getOutgoingEdges\n * \n * Returns the visible outgoing edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getOutgoingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, false, true, false);\n};\n\t\n/**\n * Function: getEdges\n * \n * Returns the incoming and/or outgoing edges for the given cell.\n * If the optional parent argument is specified, then only edges are returned\n * where the opposite is in the given parent cell. If at least one of incoming\n * or outgoing is true, then loops are ignored, if both are false, then all\n * edges connected to the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n * incoming - Optional boolean that specifies if incoming edges should\n * be included in the result. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should\n * be included in the result. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be\n * included in the result. Default is true.\n * recurse - Optional boolean the specifies if the parent specified only \n * need be an ancestral parent, true, or the direct parent, false.\n * Default is false\n */\nmxGraph.prototype.getEdges = function(cell, parent, incoming, outgoing, includeLoops, recurse)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tvar edges = [];\n\tvar isCollapsed = this.isCellCollapsed(cell);\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\n\t\tif (isCollapsed || !this.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(this.model.getEdges(child, incoming, outgoing));\n\t\t}\n\t}\n\n\tedges = edges.concat(this.model.getEdges(cell, incoming, outgoing));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming &&\n\t\t\ttarget == cell && (parent == null || this.isValidAncestor(source, parent, recurse))) ||\n\t\t\t(outgoing && source == cell && (parent == null ||\n\t\t\t\t\tthis.isValidAncestor(target, parent, recurse))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isValidAncestor\n * \n * Returns whether or not the specified parent is a valid\n * ancestor of the specified cell, either direct or indirectly\n * based on whether ancestor recursion is enabled.\n * \n * Parameters:\n * \n * cell - <mxCell> the possible child cell\n * parent - <mxCell> the possible parent cell\n * recurse - boolean whether or not to recurse the child ancestors\n */\nmxGraph.prototype.isValidAncestor = function(cell, parent, recurse)\n{\n\treturn (recurse ? this.model.isAncestor(parent, cell) : this.model\n\t\t\t.getParent(cell) == parent);\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all distinct visible opposite cells for the specified terminal\n * on the given edges.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contains the edges whose opposite\n * terminals should be returned.\n * terminal - Terminal that specifies the end whose opposite should be\n * returned.\n * sources - Optional boolean that specifies if source terminals should be\n * included in the result. Default is true.\n * targets - Optional boolean that specifies if targer terminals should be\n * included in the result. Default is true.\n */\nmxGraph.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\t// Fast lookup to avoid duplicates in terminals array\n\tvar dict = new mxDictionary();\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar state = this.view.getState(edges[i]);\n\t\t\t\n\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of the edge and if the\n\t\t\t// target should be stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tif (!dict.get(target))\n\t\t\t\t{\n\t\t\t\t\tdict.put(target, true);\n\t\t\t\t\tterminals.push(target);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of the edge and if the\n\t\t\t// source should be stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tif (!dict.get(source))\n\t\t\t\t{\n\t\t\t\t\tdict.put(source, true);\n\t\t\t\t\tterminals.push(source);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and returns the connected edges\n * as displayed on the screen.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxGraph.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar src = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar trg = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns an <mxPoint> representing the given event in the unscaled,\n * non-translated coordinate space of <container> and applies the grid.\n * \n * Parameters:\n * \n * evt - Mousevent that contains the mouse pointer location.\n * addOffset - Optional boolean that specifies if the position should be\n * offset by half of the <gridSize>. Default is true.\n */\n mxGraph.prototype.getPointForEvent = function(evt, addOffset)\n {\n\tvar p = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\n\tvar s = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar off = (addOffset != false) ? this.gridSize / 2 : 0;\n\t\n\tp.x = this.snap(p.x / s - tr.x - off);\n\tp.y = this.snap(p.y / s - tr.y - off);\n\t\n\treturn p;\n };\n\n/**\n * Function: getCells\n * \n * Returns the child vertices and edges of the given parent that are contained\n * in the given rectangle. The result is added to the optional result array,\n * which is returned. If no result array is specified then a new array is\n * created and returned.\n * \n * Parameters:\n * \n * x - X-coordinate of the rectangle.\n * y - Y-coordinate of the rectangle.\n * width - Width of the rectangle.\n * height - Height of the rectangle.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * result - Optional array to store the result in.\n */\nmxGraph.prototype.getCells = function(x, y, width, height, parent, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (width > 0 || height > 0)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar right = x + width;\n\t\tvar bottom = y + height;\n\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getCurrentRoot();\n\t\t\t\n\t\t\tif (parent == null)\n\t\t\t{\n\t\t\t\tparent = model.getRoot();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(cell);\n\t\t\t\t\n\t\t\t\tif (state != null && this.isCellVisible(cell))\n\t\t\t\t{\n\t\t\t\t\tvar deg = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0;\n\t\t\t\t\tvar box = state;\n\t\t\t\t\t\n\t\t\t\t\tif (deg != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbox = mxUtils.getBoundingBox(box, deg);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((model.isEdge(cell) || model.isVertex(cell)) &&\n\t\t\t\t\t\tbox.x >= x && box.y + box.height <= bottom &&\n\t\t\t\t\t\tbox.y >= y && box.x + box.width <= right)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(cell);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.getCells(x, y, width, height, cell, result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsBeyond\n * \n * Returns the children of the given parent that are contained in the\n * halfpane from the given point (x0, y0) rightwards or downwards\n * depending on rightHalfpane and bottomHalfpane.\n * \n * Parameters:\n * \n * x0 - X-coordinate of the origin.\n * y0 - Y-coordinate of the origin.\n * parent - Optional <mxCell> whose children should be checked. Default is\n * <defaultParent>.\n * rightHalfpane - Boolean indicating if the cells in the right halfpane\n * from the origin should be returned.\n * bottomHalfpane - Boolean indicating if the cells in the bottom halfpane\n * from the origin should be returned.\n */\nmxGraph.prototype.getCellsBeyond = function(x0, y0, parent, rightHalfpane, bottomHalfpane)\n{\n\tvar result = [];\n\t\n\tif (rightHalfpane || bottomHalfpane)\n\t{\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getDefaultParent();\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\n\t\t\t\tif (this.isCellVisible(child) && state != null)\n\t\t\t\t{\n\t\t\t\t\tif ((!rightHalfpane || state.x >= x0) &&\n\t\t\t\t\t\t(!bottomHalfpane || state.y >= y0))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: findTreeRoots\n * \n * Returns all children in the given parent which do not have incoming\n * edges. If the result is empty then the with the greatest difference\n * between incoming and outgoing edges is returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * isolate - Optional boolean that specifies if edges should be ignored if\n * the opposite end is not a child of the given parent cell. Default is\n * false.\n * invert - Optional boolean that specifies if outgoing or incoming edges\n * should be counted for a tree root. If false then outgoing edges will be\n * counted. Default is false.\n */\nmxGraph.prototype.findTreeRoots = function(parent, isolate, invert)\n{\n\tisolate = (isolate != null) ? isolate : false;\n\tinvert = (invert != null) ? invert : false;\n\tvar roots = [];\n\t\n\tif (parent != null)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar best = null;\n\t\tvar maxDiff = 0;\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (this.model.isVertex(cell) && this.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getConnections(cell, (isolate) ? parent : null);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < conns.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.view.getVisibleTerminal(conns[j], true);\n\n                    if (src == cell)\n                    {\n                        fanOut++;\n                    }\n                    else\n                    {\n                        fanIn++;\n                    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((invert && fanOut == 0 && fanIn > 0) ||\n\t\t\t\t\t(!invert && fanIn == 0 && fanOut > 0))\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar diff = (invert) ? fanIn - fanOut : fanOut - fanIn;\n\t\t\t\t\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> from cells to true for the visited cells.\n * inverse - Optional boolean to traverse in inverse direction. Default is false.\n * This is ignored if directed is false.\n */\nmxGraph.prototype.traverse = function(vertex, directed, func, edge, visited, inverse)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tinverse = (inverse != null) ? inverse : false;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || (!inverse == isSource))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.model.getTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited, inverse);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Selection\n */\n\n/**\n * Function: isCellSelected\n * \n * Returns true if the given cell is selected.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the selection state should be returned.\n */\nmxGraph.prototype.isCellSelected = function(cell)\n{\n\treturn this.getSelectionModel().isSelected(cell);\n};\n\n/**\n * Function: isSelectionEmpty\n * \n * Returns true if the selection is empty.\n */\nmxGraph.prototype.isSelectionEmpty = function()\n{\n\treturn this.getSelectionModel().isEmpty();\n};\n\n/**\n * Function: clearSelection\n * \n * Clears the selection using <mxGraphSelectionModel.clear>.\n */\nmxGraph.prototype.clearSelection = function()\n{\n\treturn this.getSelectionModel().clear();\n};\n\n/**\n * Function: getSelectionCount\n * \n * Returns the number of selected cells.\n */\nmxGraph.prototype.getSelectionCount = function()\n{\n\treturn this.getSelectionModel().cells.length;\n};\n\t\n/**\n * Function: getSelectionCell\n * \n * Returns the first cell from the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCell = function()\n{\n\treturn this.getSelectionModel().cells[0];\n};\n\n/**\n * Function: getSelectionCells\n * \n * Returns the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCells = function()\n{\n\treturn this.getSelectionModel().cells.slice();\n};\n\n/**\n * Function: setSelectionCell\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraph.prototype.setSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().setCell(cell);\n};\n\n/**\n * Function: setSelectionCells\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraph.prototype.setSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().setCells(cells);\n};\n\n/**\n * Function: addSelectionCell\n * \n * Adds the given cell to the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be add to the selection.\n */\nmxGraph.prototype.addSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().addCell(cell);\n};\n\n/**\n * Function: addSelectionCells\n * \n * Adds the given cells to the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be added to the selection.\n */\nmxGraph.prototype.addSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().addCells(cells);\n};\n\n/**\n * Function: removeSelectionCell\n * \n * Removes the given cell from the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().removeCell(cell);\n};\n\n/**\n * Function: removeSelectionCells\n * \n * Removes the given cells from the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().removeCells(cells);\n};\n\n/**\n * Function: selectRegion\n * \n * Selects and returns the cells inside the given rectangle for the\n * specified event.\n * \n * Parameters:\n * \n * rect - <mxRectangle> that represents the region to be selected.\n * evt - Mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectRegion = function(rect, evt)\n{\n\tvar cells = this.getCells(rect.x, rect.y, rect.width, rect.height);\n\tthis.selectCellsForEvent(cells, evt);\n\t\n\treturn cells;\n};\n\n/**\n * Function: selectNextCell\n * \n * Selects the next cell.\n */\nmxGraph.prototype.selectNextCell = function()\n{\n\tthis.selectCell(true);\n};\n\n/**\n * Function: selectPreviousCell\n * \n * Selects the previous cell.\n */\nmxGraph.prototype.selectPreviousCell = function()\n{\n\tthis.selectCell();\n};\n\n/**\n * Function: selectParentCell\n * \n * Selects the parent cell.\n */\nmxGraph.prototype.selectParentCell = function()\n{\n\tthis.selectCell(false, true);\n};\n\n/**\n * Function: selectChildCell\n * \n * Selects the first child cell.\n */\nmxGraph.prototype.selectChildCell = function()\n{\n\tthis.selectCell(false, false, true);\n};\n\n/**\n * Function: selectCell\n * \n * Selects the next, parent, first child or previous cell, if all arguments\n * are false.\n * \n * Parameters:\n * \n * isNext - Boolean indicating if the next cell should be selected.\n * isParent - Boolean indicating if the parent cell should be selected.\n * isChild - Boolean indicating if the first child cell should be selected.\n */\nmxGraph.prototype.selectCell = function(isNext, isParent, isChild)\n{\n\tvar sel = this.selectionModel;\n\tvar cell = (sel.cells.length > 0) ? sel.cells[0] : null;\n\t\n\tif (sel.cells.length > 1)\n\t{\n\t\tsel.clear();\n\t}\n\t\n\tvar parent = (cell != null) ?\n\t\tthis.model.getParent(cell) :\n\t\tthis.getDefaultParent();\n\t\n\tvar childCount = this.model.getChildCount(parent);\n\t\n\tif (cell == null && childCount > 0)\n\t{\n\t\tvar child = this.model.getChildAt(parent, 0);\n\t\tthis.setSelectionCell(child);\n\t}\n\telse if ((cell == null || isParent) &&\n\t\tthis.view.getState(parent) != null &&\n\t\tthis.model.getGeometry(parent) != null)\n\t{\n\t\tif (this.getCurrentRoot() != parent)\n\t\t{\n\t\t\tthis.setSelectionCell(parent);\n\t\t}\n\t}\n\telse if (cell != null && isChild)\n\t{\n\t\tvar tmp = this.model.getChildCount(cell);\n\t\t\n\t\tif (tmp > 0)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(cell, 0);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n\telse if (childCount > 0)\n\t{\n\t\tvar i = parent.getIndex(cell);\n\t\t\n\t\tif (isNext)\n\t\t{\n\t\t\ti++;\n\t\t\tvar child = this.model.getChildAt(parent, i % childCount);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti--;\n\t\t\tvar index =  (i < 0) ? childCount - 1 : i;\n\t\t\tvar child = this.model.getChildAt(parent, index);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectAll\n * \n * Selects all children of the given parent cell or the children of the\n * default parent if no parent is specified. To select leaf vertices and/or\n * edges use <selectCells>.\n * \n * Parameters:\n * \n * parent - Optional <mxCell> whose children should be selected.\n * Default is <defaultParent>.\n * descendants - Optional boolean specifying whether all descendants should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectAll = function(parent, descendants)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar cells = (descendants) ? this.model.filterDescendants(mxUtils.bind(this, function(cell)\n\t{\n\t\treturn cell != parent && this.view.getState(cell) != null;\n\t}), parent) : this.model.getChildren(parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectVertices = function(parent, selectGroups)\n{\n\tthis.selectCells(true, false, parent, selectGroups);\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectEdges = function(parent)\n{\n\tthis.selectCells(false, true, parent);\n};\n\n/**\n * Function: selectCells\n * \n * Selects all vertices and/or edges depending on the given boolean\n * arguments recursively, starting at the given parent or the default\n * parent if no parent is specified. Use <selectAll> to select all cells.\n * For vertices, only cells with no children are selected.\n * \n * Parameters:\n * \n * vertices - Boolean indicating if vertices should be selected.\n * edges - Boolean indicating if edges should be selected.\n * parent - Optional <mxCell> that acts as the root of the recursion.\n * Default is <defaultParent>.\n * selectGroups - Optional boolean that specifies if groups should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectCells = function(vertices, edges, parent, selectGroups)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.view.getState(cell) != null &&\n\t\t\t(((selectGroups || this.model.getChildCount(cell) == 0) &&\n\t\t\tthis.model.isVertex(cell) && vertices\n\t\t\t&& !this.model.isEdge(this.model.getParent(cell))) ||\n\t\t\t(this.model.isEdge(cell) && edges));\n\t});\n\t\n\tvar cells = this.model.filterDescendants(filter, parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectCellForEvent\n * \n * Selects the given cell by either adding it to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellForEvent = function(cell, evt)\n{\n\tvar isSelected = this.isCellSelected(cell);\n\t\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tif (isSelected)\n\t\t{\n\t\t\tthis.removeSelectionCell(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.addSelectionCell(cell);\n\t\t}\n\t}\n\telse if (!isSelected || this.getSelectionCount() != 1)\n\t{\n\t\tthis.setSelectionCell(cell);\n\t}\n};\n\n/**\n * Function: selectCellsForEvent\n * \n * Selects the given cells by either adding them to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellsForEvent = function(cells, evt)\n{\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tthis.addSelectionCells(cells);\n\t}\n\telse\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Group: Selection state\n */\n\n/**\n * Function: createHandler\n * \n * Creates a new handler for the given cell state. This implementation\n * returns a new <mxEdgeHandler> of the corresponding cell is an edge,\n * otherwise it returns an <mxVertexHandler>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose handler should be created.\n */\nmxGraph.prototype.createHandler = function(state)\n{\n\tvar result = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (this.model.isEdge(state.cell))\n\t\t{\n\t\t\tvar source = state.getVisibleTerminalState(true);\n\t\t\tvar target = state.getVisibleTerminalState(false);\n\t\t\tvar geo = this.getCellGeometry(state.cell);\n\t\t\t\n\t\t\tvar edgeStyle = this.view.getEdgeStyle(state, (geo != null) ? geo.points : null, source, target);\n\t\t\tresult = this.createEdgeHandler(state, edgeStyle);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = this.createVertexHandler(state);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createVertexHandler\n * \n * Hooks to create a new <mxVertexHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createVertexHandler = function(state)\n{\n\treturn new mxVertexHandler(state);\n};\n\n/**\n * Function: createEdgeHandler\n * \n * Hooks to create a new <mxEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeHandler = function(state, edgeStyle)\n{\n\tvar result = null;\n\t\n\tif (edgeStyle == mxEdgeStyle.Loop ||\n\t\tedgeStyle == mxEdgeStyle.ElbowConnector ||\n\t\tedgeStyle == mxEdgeStyle.SideToSide ||\n\t\tedgeStyle == mxEdgeStyle.TopToBottom)\n\t{\n\t\tresult = this.createElbowEdgeHandler(state);\n\t}\n\telse if (edgeStyle == mxEdgeStyle.SegmentConnector || \n\t\t\tedgeStyle == mxEdgeStyle.OrthConnector)\n\t{\n\t\tresult = this.createEdgeSegmentHandler(state);\n\t}\n\telse\n\t{\n\t\tresult = new mxEdgeHandler(state);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createEdgeSegmentHandler\n * \n * Hooks to create a new <mxEdgeSegmentHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeSegmentHandler = function(state)\n{\n\treturn new mxEdgeSegmentHandler(state);\n};\n\n/**\n * Function: createElbowEdgeHandler\n * \n * Hooks to create a new <mxElbowEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createElbowEdgeHandler = function(state)\n{\n\treturn new mxElbowEdgeHandler(state);\n};\n\n/**\n * Group: Graph events\n */\n\n/**\n * Function: addMouseListener\n * \n * Adds a listener to the graph event dispatch loop. The listener\n * must implement the mouseDown, mouseMove and mouseUp methods\n * as shown in the <mxMouseEvent> class.\n * \n * Parameters:\n * \n * listener - Listener to be added to the graph event listeners.\n */\nmxGraph.prototype.addMouseListener = function(listener)\n{\n\tif (this.mouseListeners == null)\n\t{\n\t\tthis.mouseListeners = [];\n\t}\n\t\n\tthis.mouseListeners.push(listener);\n};\n\n/**\n * Function: removeMouseListener\n * \n * Removes the specified graph listener.\n * \n * Parameters:\n * \n * listener - Listener to be removed from the graph event listeners.\n */\nmxGraph.prototype.removeMouseListener = function(listener)\n{\n\tif (this.mouseListeners != null)\n\t{\n\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t{\n\t\t\tif (this.mouseListeners[i] == listener)\n\t\t\t{\n\t\t\t\tthis.mouseListeners.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateMouseEvent\n * \n * Sets the graphX and graphY properties if the given <mxMouseEvent> if\n * required and returned the event.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> to be updated.\n * evtName - Name of the mouse event.\n */\nmxGraph.prototype.updateMouseEvent = function(me, evtName)\n{\n\tif (me.graphX == null || me.graphY == null)\n\t{\n\t\tvar pt = mxUtils.convertPoint(this.container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x - this.panDx;\n\t\tme.graphY = pt.y - this.panDy;\n\t\t\n\t\t// Searches for rectangles using method if native hit detection is disabled on shape\n\t\tif (me.getCell() == null && this.isMouseDown && evtName == mxEvent.MOUSE_MOVE)\n\t\t{\n\t\t\tme.state = this.view.getState(this.getCellAt(pt.x, pt.y, null, null, null, function(state)\n\t\t\t{\n\t\t\t\treturn state.shape == null || state.shape.paintBackground != mxRectangleShape.prototype.paintBackground ||\n\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1' ||\n\t\t\t\t\t(state.shape.fill != null && state.shape.fill != mxConstants.NONE);\n\t\t\t}));\n\t\t}\n\t}\n\t\n\treturn me;\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the state for the given touch event.\n */\nmxGraph.prototype.getStateForTouchEvent = function(evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\t\n\t// Dispatches the drop event to the graph which\n\t// consumes and executes the source function\n\tvar pt = mxUtils.convertPoint(this.container, x, y);\n\n\treturn this.view.getState(this.getCellAt(pt.x, pt.y));\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>.\n */\nmxGraph.prototype.isEventIgnored = function(evtName, me, sender)\n{\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\tvar result = false;\n\n\t// Drops events that are fired more than once\n\tif (me.getEvent() == this.lastEvent)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tthis.lastEvent = me.getEvent();\n\t}\n\n\t// Installs event listeners to capture the complete gesture from the event source\n\t// for non-MS touch events as a workaround for all events for the same geture being\n\t// fired from the event source even if that was removed from the DOM.\n\tif (this.eventSource != null && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t\tthis.mouseMoveRedirect = null;\n\t\tthis.mouseUpRedirect = null;\n\t\tthis.eventSource = null;\n\t}\n\telse if (!mxClient.IS_GC && this.eventSource != null && me.getSource() != this.eventSource)\n\t{\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_TOUCH && mxClient.IOS_VERSION <= 12 && evtName == mxEvent.MOUSE_DOWN &&\n\t\t\t!mouseEvent && !mxEvent.isPenEvent(me.getEvent()))\n\t{\n\t\tthis.eventSource = me.getSource();\n\n\t\tthis.mouseMoveRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\tthis.mouseUpRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t}\n\n\t// Factored out the workarounds for FF to make it easier to override/remove\n\t// Note this method has side-effects!\n\tif (this.isSyntheticEventIgnored(evtName, me, sender))\n\t{\n\t\tresult = true;\n\t}\n\n\t// Never fires mouseUp/-Down for double clicks\n\tif (!mxEvent.isPopupTrigger(this.lastEvent) && evtName != mxEvent.MOUSE_MOVE && this.lastEvent.detail == 2)\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Filters out of sequence events or mixed event types during a gesture\n\tif (evtName == mxEvent.MOUSE_UP && this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = false;\n\t}\n\telse if (evtName == mxEvent.MOUSE_DOWN && !this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = true;\n\t\tthis.isMouseTrigger = mouseEvent;\n\t}\n\t// Drops mouse events that are fired during touch gestures as a workaround for Webkit\n\t// and mouse events that are not in sync with the current internal button state\n\telse if (!result && (((!mxClient.IS_FF || evtName != mxEvent.MOUSE_MOVE) &&\n\t\tthis.isMouseDown && this.isMouseTrigger != mouseEvent) ||\n\t\t(evtName == mxEvent.MOUSE_DOWN && this.isMouseDown) ||\n\t\t(evtName == mxEvent.MOUSE_UP && !this.isMouseDown)))\n\t{\n\t\tresult = true;\n\t}\n\t\n\tif (!result && evtName == mxEvent.MOUSE_DOWN)\n\t{\n\t\tthis.lastMouseX = me.getX();\n\t\tthis.lastMouseY = me.getY();\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isSyntheticEventIgnored\n * \n * Hook for ignoring synthetic mouse events after touchend in Firefox.\n */\nmxGraph.prototype.isSyntheticEventIgnored = function(evtName, me, sender)\n{\n\tvar result = false;\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\t\n\t// LATER: This does not cover all possible cases that can go wrong in FF\n\tif (this.ignoreMouseEvents && mouseEvent && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tthis.ignoreMouseEvents = evtName != mxEvent.MOUSE_UP;\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_FF && !mouseEvent && evtName == mxEvent.MOUSE_UP)\n\t{\n\t\tthis.ignoreMouseEvents = true;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isEventSourceIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>. This\n * implementation returns true for select, option and input (if not of type\n * checkbox, radio, button, submit or file) event sources if the event is not\n * a mouse event or a left mouse button press event.\n * \n * Parameters:\n * \n * evtName - The name of the event.\n * me - <mxMouseEvent> that should be ignored.\n */\nmxGraph.prototype.isEventSourceIgnored = function(evtName, me)\n{\n\tvar source = me.getSource();\n\tvar name = (source.nodeName != null) ? source.nodeName.toLowerCase() : '';\n\tvar candidate = !mxEvent.isMouseEvent(me.getEvent()) || mxEvent.isLeftMouseButton(me.getEvent());\n\t\n\treturn evtName == mxEvent.MOUSE_DOWN && candidate && (name == 'select' || name == 'option' ||\n\t\t(name == 'input' && source.type != 'checkbox' && source.type != 'radio' &&\n\t\tsource.type != 'button' && source.type != 'submit' && source.type != 'file'));\n};\n\n/**\n * Function: getEventState\n * \n * Returns the <mxCellState> to be used when firing the mouse event for the\n * given state. This implementation returns the given state.\n * \n * Parameters:\n * \n * <mxCellState> - State whose event source should be returned.\n */\nmxGraph.prototype.getEventState = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: fireMouseEvent\n * \n * Dispatches the given event in the graph event dispatch loop. Possible\n * event names are <mxEvent.MOUSE_DOWN>, <mxEvent.MOUSE_MOVE> and\n * <mxEvent.MOUSE_UP>. All listeners are invoked for all events regardless\n * of the consumed state of the event.\n * \n * Parameters:\n * \n * evtName - String that specifies the type of event to be dispatched.\n * me - <mxMouseEvent> to be fired.\n * sender - Optional sender argument. Default is this.\n */\nmxGraph.prototype.fireMouseEvent = function(evtName, me, sender)\n{\n\tif (this.isEventSourceIgnored(evtName, me))\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t\t\n\t\treturn;\n\t}\n\t\n\tif (sender == null)\n\t{\n\t\tsender = this;\n\t}\n\n\t// Updates the graph coordinates in the event\n\tme = this.updateMouseEvent(me, evtName);\n\n\t// Detects and processes double taps for touch-based devices which do not have native double click events\n\t// or where detection of double click is not always possible (quirks, IE10+). Note that this can only handle\n\t// double clicks on cells because the sequence of events in IE prevents detection on the background, it fires\n\t// two mouse ups, one of which without a cell but no mousedown for the second click which means we cannot\n\t// detect which mouseup(s) are part of the first click, ie we do not know when the first click ends.\n\tif ((!this.nativeDblClickEnabled && !mxEvent.isPopupTrigger(me.getEvent())) || (this.doubleTapEnabled &&\n\t\tmxClient.IS_TOUCH && (mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent()))))\n\t{\n\t\tvar currentTime = new Date().getTime();\n\t\t\n\t\t// NOTE: Second mouseDown for double click missing in quirks mode\n\t\tif ((!mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_DOWN) || (mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_UP && !this.fireDoubleClick))\n\t\t{\n\t\t\tif (this.lastTouchEvent != null && this.lastTouchEvent != me.getEvent() &&\n\t\t\t\tcurrentTime - this.lastTouchTime < this.doubleTapTimeout &&\n\t\t\t\tMath.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance &&\n\t\t\t\tthis.doubleClickCounter < 2)\n\t\t\t{\n\t\t\t\tthis.doubleClickCounter++;\n\t\t\t\tvar doubleClickFired = false;\n\t\t\t\t\n\t\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t{\n\t\t\t\t\tif (me.getCell() == this.lastTouchCell && this.lastTouchCell != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t\t\tvar cell = this.lastTouchCell;\n\t\t\t\t\t\tthis.lastTouchCell = null;\n\n\t\t\t\t\t\t// Fires native dblclick event via event source\n\t\t\t\t\t\t// NOTE: This fires two double click events on edges in quirks mode. While\n\t\t\t\t\t\t// trying to fix this, we realized that nativeDoubleClick can be disabled for\n\t\t\t\t\t\t// quirks and IE10+ (or we didn't find the case mentioned above where it\n\t\t\t\t\t\t// would not work), ie. all double clicks seem to be working without this.\n\t\t\t\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tme.getSource().fireEvent('ondblclick');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t\t\t\tdoubleClickFired = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.fireDoubleClick = true;\n\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t}\n\n\t\t\t\t// Do not ignore mouse up in quirks in this case\n\t\t\t\tif (!mxClient.IS_QUIRKS || doubleClickFired)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.lastTouchEvent == null || this.lastTouchEvent != me.getEvent())\n\t\t\t{\n\t\t\t\tthis.lastTouchCell = me.getCell();\n\t\t\t\tthis.lastTouchX = me.getX();\n\t\t\t\tthis.lastTouchY = me.getY();\n\t\t\t\tthis.lastTouchTime = currentTime;\n\t\t\t\tthis.lastTouchEvent = me.getEvent();\n\t\t\t\tthis.doubleClickCounter = 0;\n\t\t\t}\n\t\t}\n\t\telse if ((this.isMouseDown || evtName == mxEvent.MOUSE_UP) && this.fireDoubleClick)\n\t\t{\n\t\t\tthis.fireDoubleClick = false;\n\t\t\tvar cell = this.lastTouchCell;\n\t\t\tthis.lastTouchCell = null;\n\t\t\tthis.isMouseDown = false;\n\t\t\t\n\t\t\t// Workaround for Chrome/Safari not firing native double click events for double touch on background\n\t\t\tvar valid = (cell != null) || ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\t\t(mxClient.IS_GC || mxClient.IS_SF));\n\t\t\t\n\t\t\tif (valid && Math.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance)\n\t\t\t{\n\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!this.isEventIgnored(evtName, me, sender))\n\t{\n\t\t// Updates the event state via getEventState\n\t\tme.state = this.getEventState(me.getState());\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FIRE_MOUSE_EVENT, 'eventName', evtName, 'event', me));\n\t\t\n\t\tif ((mxClient.IS_OP || mxClient.IS_SF || mxClient.IS_GC || mxClient.IS_IE11 ||\n\t\t\t(mxClient.IS_IE && mxClient.IS_SVG) || me.getEvent().target != this.container))\n\t\t{\n\t\t\tif (evtName == mxEvent.MOUSE_MOVE && this.isMouseDown && this.autoScroll && !mxEvent.isMultiTouchEvent(me.getEvent))\n\t\t\t{\n\t\t\t\tthis.scrollPointToVisible(me.getGraphX(), me.getGraphY(), this.autoExtend);\n\t\t\t}\n\t\t\telse if (evtName == mxEvent.MOUSE_UP && this.ignoreScrollbars && this.translateToScrollPosition &&\n\t\t\t\t\t(this.container.scrollLeft != 0 || this.container.scrollTop != 0))\n\t\t\t{\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar tr = this.view.translate;\n\t\t\t\tthis.view.setTranslate(tr.x - this.container.scrollLeft / s, tr.y - this.container.scrollTop / s);\n\t\t\t\tthis.container.scrollLeft = 0;\n\t\t\t\tthis.container.scrollTop = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.mouseListeners != null)\n\t\t\t{\n\t\t\t\tvar args = [sender, me];\n\t\n\t\t\t\t// Does not change returnValue in Opera\n\t\t\t\tif (!me.getEvent().preventDefault)\n\t\t\t\t{\n\t\t\t\t\tme.getEvent().returnValue = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar l = this.mouseListeners[i];\n\t\t\t\t\t\n\t\t\t\t\tif (evtName == mxEvent.MOUSE_DOWN)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseDown.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_MOVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseMove.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseUp.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Invokes the click handler\n\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t{\n\t\t\t\tthis.click(me);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Detects tapAndHold events using a timer\n\t\tif ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\tevtName == mxEvent.MOUSE_DOWN && this.tapAndHoldEnabled && !this.tapAndHoldInProgress)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = true;\n\t\t\tthis.initialTouchX = me.getGraphX();\n\t\t\tthis.initialTouchY = me.getGraphY();\n\t\t\t\n\t\t\tvar handler = function()\n\t\t\t{\n\t\t\t\tif (this.tapAndHoldValid)\n\t\t\t\t{\n\t\t\t\t\tthis.tapAndHold(me);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\t\tthis.tapAndHoldValid = false;\n\t\t\t};\n\t\t\t\n\t\t\tif (this.tapAndHoldThread)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.tapAndHoldThread);\n\t\t\t}\n\t\n\t\t\tthis.tapAndHoldThread = window.setTimeout(mxUtils.bind(this, handler), this.tapAndHoldDelay);\n\t\t\tthis.tapAndHoldValid = true;\n\t\t}\n\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\tthis.tapAndHoldValid = false;\n\t\t}\n\t\telse if (this.tapAndHoldValid)\n\t\t{\n\t\t\tthis.tapAndHoldValid =\n\t\t\t\tMath.abs(this.initialTouchX - me.getGraphX()) < this.tolerance &&\n\t\t\t\tMath.abs(this.initialTouchY - me.getGraphY()) < this.tolerance;\n\t\t}\n\n\t\t// Stops editing for all events other than from cellEditor\n\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isEditing() && !this.cellEditor.isEventSource(me.getEvent()))\n\t\t{\n\t\t\tthis.stopEditing(!this.isInvokesStopCellEditing());\n\t\t}\n\n\t\tthis.consumeMouseEvent(evtName, me, sender);\n\t}\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given <mxMouseEvent> if it's a touchStart event.\n */\nmxGraph.prototype.consumeMouseEvent = function(evtName, me, sender)\n{\n\t// Workaround for duplicate click in Windows 8 with Chrome/FF/Opera with touch\n\tif (evtName == mxEvent.MOUSE_DOWN && mxEvent.isTouchEvent(me.getEvent()))\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: fireGestureEvent\n * \n * Dispatches a <mxEvent.GESTURE> event. The following example will resize the\n * cell under the mouse based on the scale property of the native touch event.\n * \n * (code)\n * graph.addListener(mxEvent.GESTURE, function(sender, eo)\n * {\n *   var evt = eo.getProperty('event');\n *   var state = graph.view.getState(eo.getProperty('cell'));\n *   \n *   if (graph.isEnabled() && graph.isCellResizable(state.cell) && Math.abs(1 - evt.scale) > 0.2)\n *   {\n *     var scale = graph.view.scale;\n *     var tr = graph.view.translate;\n *     \n *     var w = state.width * evt.scale;\n *     var h = state.height * evt.scale;\n *     var x = state.x - (w - state.width) / 2;\n *     var y = state.y - (h - state.height) / 2;\n *     \n *     var bounds = new mxRectangle(graph.snap(x / scale) - tr.x,\n *     \t\tgraph.snap(y / scale) - tr.y, graph.snap(w / scale), graph.snap(h / scale));\n *     graph.resizeCell(state.cell, bounds);\n *     eo.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * evt - Gestureend event that represents the gesture.\n * cell - Optional <mxCell> associated with the gesture.\n */\nmxGraph.prototype.fireGestureEvent = function(evt, cell)\n{\n\t// Resets double tap event handling when gestures take place\n\tthis.lastTouchTime = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.GESTURE, 'event', evt, 'cell', cell));\n};\n\n/**\n * Function: destroy\n * \n * Destroys the graph and all its resources.\n */\nmxGraph.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\t\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.selectionCellsHandler != null)\n\t\t{\n\t\t\tthis.selectionCellsHandler.destroy();\n\t\t}\n\n\t\tif (this.panningHandler != null)\n\t\t{\n\t\t\tthis.panningHandler.destroy();\n\t\t}\n\n\t\tif (this.popupMenuHandler != null)\n\t\t{\n\t\t\tthis.popupMenuHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.connectionHandler != null)\n\t\t{\n\t\t\tthis.connectionHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.graphHandler != null)\n\t\t{\n\t\t\tthis.graphHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.cellEditor != null)\n\t\t{\n\t\t\tthis.cellEditor.destroy();\n\t\t}\n\t\t\n\t\tif (this.view != null)\n\t\t{\n\t\t\tthis.view.destroy();\n\t\t}\n\n\t\tif (this.model != null && this.graphModelChangeListener != null)\n\t\t{\n\t\t\tthis.model.removeListener(this.graphModelChangeListener);\n\t\t\tthis.graphModelChangeListener = null;\n\t\t}\n\n\t\tthis.container = null;\n\t}\n};\n\n__mxOutput.mxGraph = typeof mxGraph !== 'undefined' ? mxGraph : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellOverlay\n *\n * Extends <mxEventSource> to implement a graph overlay, represented by an icon\n * and a tooltip. Overlays can handle and fire <click> events and are added to\n * the graph using <mxGraph.addCellOverlay>, and removed using\n * <mxGraph.removeCellOverlay>, or <mxGraph.removeCellOverlays> to remove all overlays.\n * The <mxGraph.getCellOverlays> function returns the array of overlays for a given\n * cell in a graph. If multiple overlays exist for the same cell, then\n * <getBounds> should be overridden in at least one of the overlays.\n * \n * Overlays appear on top of all cells in a special layer. If this is not\n * desirable, then the image must be rendered as part of the shape or label of\n * the cell instead.\n *\n * Example:\n * \n * The following adds a new overlays for a given vertex and selects the cell\n * if the overlay is clicked.\n *\n * (code)\n * var overlay = new mxCellOverlay(img, html);\n * graph.addCellOverlay(vertex, overlay);\n * overlay.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   graph.setSelectionCell(cell);\n * });\n * (end)\n * \n * For cell overlays to be printed use <mxPrintPreview.printOverlays>.\n *\n * Event: mxEvent.CLICK\n *\n * Fires when the user clicks on the overlay. The <code>event</code> property\n * contains the corresponding mouse event and the <code>cell</code> property\n * contains the cell. For touch devices this is fired if the element receives\n * a touchend event.\n * \n * Constructor: mxCellOverlay\n *\n * Constructs a new overlay using the given image and tooltip.\n * \n * Parameters:\n * \n * image - <mxImage> that represents the icon to be displayed.\n * tooltip - Optional string that specifies the tooltip.\n * align - Optional horizontal alignment for the overlay. Possible\n * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>\n * (default).\n * verticalAlign - Vertical alignment for the overlay. Possible\n * values are <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>\n * (default).\n */\nfunction mxCellOverlay(image, tooltip, align, verticalAlign, offset, cursor)\n{\n\tthis.image = image;\n\tthis.tooltip = tooltip;\n\tthis.align = (align != null) ? align : this.align;\n\tthis.verticalAlign = (verticalAlign != null) ? verticalAlign : this.verticalAlign;\n\tthis.offset = (offset != null) ? offset : new mxPoint();\n\tthis.cursor = (cursor != null) ? cursor : 'help';\n};\n\n/**\n * Extends mxEventSource.\n */\nmxCellOverlay.prototype = new mxEventSource();\nmxCellOverlay.prototype.constructor = mxCellOverlay;\n\n/**\n * Variable: image\n *\n * Holds the <mxImage> to be used as the icon.\n */\nmxCellOverlay.prototype.image = null;\n\n/**\n * Variable: tooltip\n * \n * Holds the optional string to be used as the tooltip.\n */\nmxCellOverlay.prototype.tooltip = null;\n\n/**\n * Variable: align\n * \n * Holds the horizontal alignment for the overlay. Default is\n * <mxConstants.ALIGN_RIGHT>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.align = mxConstants.ALIGN_RIGHT;\n\n/**\n * Variable: verticalAlign\n * \n * Holds the vertical alignment for the overlay. Default is\n * <mxConstants.ALIGN_BOTTOM>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.verticalAlign = mxConstants.ALIGN_BOTTOM;\n\n/**\n * Variable: offset\n * \n * Holds the offset as an <mxPoint>. The offset will be scaled according to the\n * current scale.\n */\nmxCellOverlay.prototype.offset = null;\n\n/**\n * Variable: cursor\n * \n * Holds the cursor for the overlay. Default is 'help'.\n */\nmxCellOverlay.prototype.cursor = null;\n\n/**\n * Variable: defaultOverlap\n * \n * Defines the overlapping for the overlay, that is, the proportional distance\n * from the origin to the point defined by the alignment. Default is 0.5.\n */\nmxCellOverlay.prototype.defaultOverlap = 0.5;\n\n/**\n * Function: getBounds\n * \n * Returns the bounds of the overlay for the given <mxCellState> as an\n * <mxRectangle>. This should be overridden when using multiple overlays\n * per cell so that the overlays do not overlap.\n * \n * The following example will place the overlay along an edge (where\n * x=[-1..1] from the start to the end of the edge and y is the\n * orthogonal offset in px).\n * \n * (code)\n * overlay.getBounds = function(state)\n * {\n *   var bounds = mxCellOverlay.prototype.getBounds.apply(this, arguments);\n *   \n *   if (state.view.graph.getModel().isEdge(state.cell))\n *   {\n *     var pt = state.view.getPoint(state, {x: 0, y: 0, relative: true});\n *     \n *     bounds.x = pt.x - bounds.width / 2;\n *     bounds.y = pt.y - bounds.height / 2;\n *   }\n *   \n *   return bounds;\n * };\n * (end)\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the current state of the\n * associated cell.\n */\nmxCellOverlay.prototype.getBounds = function(state)\n{\n\tvar isEdge = state.view.graph.getModel().isEdge(state.cell);\n\tvar s = state.view.scale;\n\tvar pt = null;\n\n\tvar w = this.image.width;\n\tvar h = this.image.height;\n\t\n\tif (isEdge)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (pts.length % 2 == 1)\n\t\t{\n\t\t\tpt = pts[Math.floor(pts.length / 2)];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar idx = pts.length / 2;\n\t\t\tvar p0 = pts[idx-1];\n\t\t\tvar p1 = pts[idx];\n\t\t\tpt = new mxPoint(p0.x + (p1.x - p0.x) / 2,\n\t\t\t\tp0.y + (p1.y - p0.y) / 2);\n\t\t}\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint();\n\t\t\n\t\tif (this.align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tpt.x = state.x;\n\t\t}\n\t\telse if (this.align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tpt.x = state.x + state.width / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.x = state.x + state.width;\n\t\t}\n\t\t\n\t\tif (this.verticalAlign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tpt.y = state.y;\n\t\t}\n\t\telse if (this.verticalAlign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tpt.y = state.y + state.height / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.y = state.y + state.height;\n\t\t}\n\t}\n\n\treturn new mxRectangle(Math.round(pt.x - (w * this.defaultOverlap - this.offset.x) * s),\n\t\tMath.round(pt.y - (h * this.defaultOverlap - this.offset.y) * s), w * s, h * s);\n};\n\n/**\n * Function: toString\n * \n * Returns the textual representation of the overlay to be used as the\n * tooltip. This implementation returns <tooltip>.\n */\nmxCellOverlay.prototype.toString = function()\n{\n\treturn this.tooltip;\n};\n\n__mxOutput.mxCellOverlay = typeof mxCellOverlay !== 'undefined' ? mxCellOverlay : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxOutline\n *\n * Implements an outline (aka overview) for a graph. Set <updateOnPan> to true\n * to enable updates while the source graph is panning.\n * \n * Example:\n * \n * (code)\n * var outline = new mxOutline(graph, div);\n * (end)\n * \n * If an outline is used in an <mxWindow> in IE8 standards mode, the following\n * code makes sure that the shadow filter is not inherited and that any\n * transparent elements in the graph do not show the page background, but the\n * background of the graph container.\n * \n * (code)\n * if (document.documentMode == 8)\n * {\n *   container.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n * }\n * (end)\n * \n * To move the graph to the top, left corner the following code can be used.\n * \n * (code)\n * var scale = graph.view.scale;\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x / scale, -bounds.y / scale);\n * (end)\n * \n * To toggle the suspended mode, the following can be used.\n * \n * (code)\n * outline.suspended = !outln.suspended;\n * if (!outline.suspended)\n * {\n *   outline.update(true);\n * }\n * (end)\n * \n * Constructor: mxOutline\n *\n * Constructs a new outline for the specified graph inside the given\n * container.\n * \n * Parameters:\n * \n * source - <mxGraph> to create the outline for.\n * container - DOM node that will contain the outline.\n */\nfunction mxOutline(source, container)\n{\n\tthis.source = source;\n\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\n/**\n * Function: source\n * \n * Reference to the source <mxGraph>.\n */\nmxOutline.prototype.source = null;\n\n/**\n * Function: outline\n * \n * Reference to the <mxGraph> that renders the outline.\n */\nmxOutline.prototype.outline = null;\n\n/**\n * Function: graphRenderHint\n * \n * Renderhint to be used for the outline graph. Default is faster.\n */\nmxOutline.prototype.graphRenderHint = mxConstants.RENDERING_HINT_FASTER;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxOutline.prototype.enabled = true;\n\n/**\n * Variable: showViewport\n * \n * Specifies a viewport rectangle should be shown. Default is true.\n */\nmxOutline.prototype.showViewport = true;\n\n/**\n * Variable: border\n * \n * Border to be added at the bottom and right. Default is 10.\n */\nmxOutline.prototype.border = 10;\n\n/**\n * Variable: enabled\n * \n * Specifies the size of the sizer handler. Default is 8.\n */\nmxOutline.prototype.sizerSize = 8;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible in the outline. Default is false.\n */\nmxOutline.prototype.labelsVisible = false;\n\n/**\n * Variable: updateOnPan\n * \n * Specifies if <update> should be called for <mxEvent.PAN> in the source\n * graph. Default is false.\n */\nmxOutline.prototype.updateOnPan = false;\n\n/**\n * Variable: sizerImage\n * \n * Optional <mxImage> to be used for the sizer. Default is null.\n */\nmxOutline.prototype.sizerImage = null;\n\n/**\n * Variable: minScale\n * \n * Minimum scale to be used. Default is 0.0001.\n */\nmxOutline.prototype.minScale = 0.0001;\n\n/**\n * Variable: suspended\n * \n * Optional boolean flag to suspend updates. Default is false. This flag will\n * also suspend repaints of the outline. To toggle this switch, use the\n * following code.\n * \n * (code)\n * nav.suspended = !nav.suspended;\n * \n * if (!nav.suspended)\n * {\n *   nav.update(true);\n * }\n * (end)\n */\nmxOutline.prototype.suspended = false;\n\n/**\n * Variable: forceVmlHandles\n * \n * Specifies if VML should be used to render the handles in this control. This\n * is true for IE8 standards mode and false for all other browsers and modes.\n * This is a workaround for rendering issues of HTML elements over elements\n * with filters in IE 8 standards mode.\n */\nmxOutline.prototype.forceVmlHandles = document.documentMode == 8;\n\n/**\n * Function: createGraph\n * \n * Creates the <mxGraph> used in the outline.\n */\nmxOutline.prototype.createGraph = function(container)\n{\n\tvar graph = new mxGraph(container, this.source.getModel(), this.graphRenderHint, this.source.getStylesheet());\n\tgraph.foldingEnabled = false;\n\tgraph.autoScroll = false;\n\t\n\treturn graph;\n};\n\n/**\n * Function: init\n * \n * Initializes the outline inside the given container.\n */\nmxOutline.prototype.init = function(container)\n{\n\tthis.outline = this.createGraph(container);\n\t\n\t// Do not repaint when suspended\n\tvar outlineGraphModelChanged = this.outline.graphModelChanged;\n\tthis.outline.graphModelChanged = mxUtils.bind(this, function(changes)\n\t{\n\t\tif (!this.suspended && this.outline != null)\n\t\t{\n\t\t\toutlineGraphModelChanged.apply(this.outline, arguments);\n\t\t}\n\t});\n\n\t// Enables faster painting in SVG\n\tif (mxClient.IS_SVG)\n\t{\n\t\tvar node = this.outline.getView().getCanvas().parentNode;\n\t\tnode.setAttribute('shape-rendering', 'optimizeSpeed');\n\t\tnode.setAttribute('image-rendering', 'optimizeSpeed');\n\t}\n\t\n\t// Hides cursors and labels\n\tthis.outline.labelsVisible = this.labelsVisible;\n\tthis.outline.setEnabled(false);\n\t\n\tthis.updateHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (!this.suspended && !this.active)\n\t\t{\n\t\t\tthis.update();\n\t\t}\n\t});\n\t\n\t// Updates the scale of the outline after a change of the main graph\n\tthis.source.getModel().addListener(mxEvent.CHANGE, this.updateHandler);\n\tthis.outline.addMouseListener(this);\n\t\n\t// Adds listeners to keep the outline in sync with the source graph\n\tvar view = this.source.getView();\n\tview.addListener(mxEvent.SCALE, this.updateHandler);\n\tview.addListener(mxEvent.TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.SCALE_AND_TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.DOWN, this.updateHandler);\n\tview.addListener(mxEvent.UP, this.updateHandler);\n\n\t// Updates blue rectangle on scroll\n\tmxEvent.addListener(this.source.container, 'scroll', this.updateHandler);\n\t\n\tthis.panHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.updateOnPan)\n\t\t{\n\t\t\tthis.updateHandler.apply(this, arguments);\n\t\t}\n\t});\n\tthis.source.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Refreshes the graph in the outline after a refresh of the main graph\n\tthis.refreshHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.outline.setStylesheet(this.source.getStylesheet());\n\t\tthis.outline.refresh();\n\t});\n\tthis.source.addListener(mxEvent.REFRESH, this.refreshHandler);\n\n\t// Creates the blue rectangle for the viewport\n\tthis.bounds = new mxRectangle(0, 0, 0, 0);\n\tthis.selectionBorder = new mxRectangleShape(this.bounds, null,\n\t\tmxConstants.OUTLINE_COLOR, mxConstants.OUTLINE_STROKEWIDTH);\n\tthis.selectionBorder.dialect = this.outline.dialect;\n\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.selectionBorder.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.selectionBorder.init(this.outline.getView().getOverlayPane());\n\n\t// Handles event by catching the initial pointer start and then listening to the\n\t// complete gesture on the event target. This is needed because all the events\n\t// are routed via the initial element even if that element is removed from the\n\t// DOM, which happens when we repaint the selection border and zoom handles.\n\tvar handler = mxUtils.bind(this, function(evt)\n\t{\n\t\tvar t = mxEvent.getSource(evt);\n\t\t\n\t\tvar redirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tvar redirect2 = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tmxEvent.removeGestureListeners(t, null, redirect, redirect2);\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(t, null, redirect, redirect2);\n\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t});\n\t\n\tmxEvent.addGestureListeners(this.selectionBorder.node, handler);\n\n\t// Creates a small blue rectangle for sizing (sizer handle)\n\tthis.sizer = this.createSizer();\n\t\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.sizer.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.sizer.init(this.outline.getView().getOverlayPane());\n\t\n\tif (this.enabled)\n\t{\n\t\tthis.sizer.node.style.cursor = 'nwse-resize';\n\t}\n\t\n\tmxEvent.addGestureListeners(this.sizer.node, handler);\n\n\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\tthis.sizer.node.style.display = this.selectionBorder.node.style.display;\n\tthis.selectionBorder.node.style.cursor = 'move';\n\n\tthis.update(false);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxOutline.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setZoomEnabled\n * \n * Enables or disables the zoom handling by showing or hiding the respective\n * handle.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setZoomEnabled = function(value)\n{\n\tthis.sizer.node.style.visibility = (value) ? 'visible' : 'hidden';\n};\n\n/**\n * Function: refresh\n * \n * Invokes <update> and revalidate the outline. This method is deprecated.\n */\nmxOutline.prototype.refresh = function()\n{\n\tthis.update(true);\n};\n\n/**\n * Function: createSizer\n * \n * Creates the shape used as the sizer.\n */\nmxOutline.prototype.createSizer = function()\n{\n\tif (this.sizerImage != null)\n\t{\n\t\tvar sizer = new mxImageShape(new mxRectangle(0, 0, this.sizerImage.width, this.sizerImage.height), this.sizerImage.src);\n\t\tsizer.dialect = this.outline.dialect;\n\t\t\n\t\treturn sizer;\n\t}\n\telse\n\t{\n\t\tvar sizer = new mxRectangleShape(new mxRectangle(0, 0, this.sizerSize, this.sizerSize),\n\t\t\tmxConstants.OUTLINE_HANDLE_FILLCOLOR, mxConstants.OUTLINE_HANDLE_STROKECOLOR);\n\t\tsizer.dialect = this.outline.dialect;\n\t\n\t\treturn sizer;\n\t}\n};\n\n/**\n * Function: getSourceContainerSize\n * \n * Returns the size of the source container.\n */\nmxOutline.prototype.getSourceContainerSize = function()\n{\n\treturn new mxRectangle(0, 0, this.source.container.scrollWidth, this.source.container.scrollHeight);\n};\n\n/**\n * Function: getOutlineOffset\n * \n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getOutlineOffset = function(scale)\n{\n\treturn null;\n};\n\n/**\n * Function: getOutlineOffset\n * \n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getSourceGraphBounds = function()\n{\n\treturn this.source.getGraphBounds();\n};\n\n/**\n * Function: update\n * \n * Updates the outline.\n */\nmxOutline.prototype.update = function(revalidate)\n{\n\tif (this.source != null && this.source.container != null &&\n\t\tthis.outline != null && this.outline.container != null)\n\t{\n\t\tvar sourceScale = this.source.view.scale;\n\t\tvar scaledGraphBounds = this.getSourceGraphBounds();\n\t\tvar unscaledGraphBounds = new mxRectangle(scaledGraphBounds.x / sourceScale + this.source.panDx,\n\t\t\t\tscaledGraphBounds.y / sourceScale + this.source.panDy, scaledGraphBounds.width / sourceScale,\n\t\t\t\tscaledGraphBounds.height / sourceScale);\n\n\t\tvar unscaledFinderBounds = new mxRectangle(0, 0,\n\t\t\tthis.source.container.clientWidth / sourceScale,\n\t\t\tthis.source.container.clientHeight / sourceScale);\n\t\t\n\t\tvar union = unscaledGraphBounds.clone();\n\t\tunion.add(unscaledFinderBounds);\n\t\n\t\t// Zooms to the scrollable area if that is bigger than the graph\n\t\tvar size = this.getSourceContainerSize();\n\t\tvar completeWidth = Math.max(size.width / sourceScale, union.width);\n\t\tvar completeHeight = Math.max(size.height / sourceScale, union.height);\n\t\n\t\tvar availableWidth = Math.max(0, this.outline.container.clientWidth - this.border);\n\t\tvar availableHeight = Math.max(0, this.outline.container.clientHeight - this.border);\n\t\t\n\t\tvar outlineScale = Math.min(availableWidth / completeWidth, availableHeight / completeHeight);\n\t\tvar scale = (isNaN(outlineScale)) ? this.minScale : Math.max(this.minScale, outlineScale);\n\n\t\tif (scale > 0)\n\t\t{\n\t\t\tif (this.outline.getView().scale != scale)\n\t\t\t{\n\t\t\t\tthis.outline.getView().scale = scale;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\tvar navView = this.outline.getView();\n\t\t\t\n\t\t\tif (navView.currentRoot != this.source.getView().currentRoot)\n\t\t\t{\n\t\t\t\tnavView.setCurrentRoot(this.source.getView().currentRoot);\n\t\t\t}\n\n\t\t\tvar t = this.source.view.translate;\n\t\t\tvar tx = t.x + this.source.panDx;\n\t\t\tvar ty = t.y + this.source.panDy;\n\t\t\t\n\t\t\tvar off = this.getOutlineOffset(scale);\n\t\t\t\n\t\t\tif (off != null)\n\t\t\t{\n\t\t\t\ttx += off.x;\n\t\t\t\tty += off.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (unscaledGraphBounds.x < 0)\n\t\t\t{\n\t\t\t\ttx = tx - unscaledGraphBounds.x;\n\t\t\t}\n\t\t\tif (unscaledGraphBounds.y < 0)\n\t\t\t{\n\t\t\t\tty = ty - unscaledGraphBounds.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (navView.translate.x != tx || navView.translate.y != ty)\n\t\t\t{\n\t\t\t\tnavView.translate.x = tx;\n\t\t\t\tnavView.translate.y = ty;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\t// Prepares local variables for computations\n\t\t\tvar t2 = navView.translate;\n\t\t\tscale = this.source.getView().scale;\n\t\t\tvar scale2 = scale / navView.scale;\n\t\t\tvar scale3 = 1.0 / navView.scale;\n\t\t\tvar container = this.source.container;\n\t\t\t\n\t\t\t// Updates the bounds of the viewrect in the navigation\n\t\t\tthis.bounds = new mxRectangle(\n\t\t\t\t(t2.x - t.x - this.source.panDx) / scale3,\n\t\t\t\t(t2.y - t.y - this.source.panDy) / scale3,\n\t\t\t\t(container.clientWidth / scale2),\n\t\t\t\t(container.clientHeight / scale2));\n\t\t\t\n\t\t\t// Adds the scrollbar offset to the finder\n\t\t\tthis.bounds.x += this.source.container.scrollLeft * navView.scale / scale;\n\t\t\tthis.bounds.y += this.source.container.scrollTop * navView.scale / scale;\n\t\t\t\n\t\t\tvar b = this.selectionBorder.bounds;\n\t\t\t\n\t\t\tif (b.x != this.bounds.x || b.y != this.bounds.y || b.width != this.bounds.width || b.height != this.bounds.height)\n\t\t\t{\n\t\t\t\tthis.selectionBorder.bounds = this.bounds;\n\t\t\t\tthis.selectionBorder.redraw();\n\t\t\t}\n\t\t\n\t\t\t// Updates the bounds of the zoom handle at the bottom right\n\t\t\tvar b = this.sizer.bounds;\n\t\t\tvar b2 = new mxRectangle(this.bounds.x + this.bounds.width - b.width / 2,\n\t\t\t\t\tthis.bounds.y + this.bounds.height - b.height / 2, b.width, b.height);\n\n\t\t\tif (b.x != b2.x || b.y != b2.y || b.width != b2.width || b.height != b2.height)\n\t\t\t{\n\t\t\t\tthis.sizer.bounds = b2;\n\t\t\t\t\n\t\t\t\t// Avoids update of visibility in redraw for VML\n\t\t\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t\t\t{\n\t\t\t\t\tthis.sizer.redraw();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (revalidate)\n\t\t\t{\n\t\t\t\tthis.outline.view.revalidate();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by starting a translation or zoom.\n */\nmxOutline.prototype.mouseDown = function(sender, me)\n{\n\tif (this.enabled && this.showViewport)\n\t{\n\t\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.source.tolerance : 0;\n\t\tvar hit = (this.source.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\t\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\tthis.zoom = me.isSource(this.sizer) || (hit != null && mxUtils.intersects(shape.bounds, hit));\n\t\tthis.startX = me.getX();\n\t\tthis.startY = me.getY();\n\t\tthis.active = true;\n\n\t\tif (this.source.useScrollbarsForPanning && mxUtils.hasScrollbars(this.source.container))\n\t\t{\n\t\t\tthis.dx0 = this.source.container.scrollLeft;\n\t\t\tthis.dy0 = this.source.container.scrollTop;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx0 = 0;\n\t\t\tthis.dy0 = 0;\n\t\t}\n\t}\n\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by previewing the viewrect in <graph> and updating the\n * rectangle that represents the viewrect in the outline.\n */\nmxOutline.prototype.mouseMove = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\t\tthis.sizer.node.style.display = this.selectionBorder.node.style.display; \n\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar bounds = null;\n\t\t\n\t\tif (!this.zoom)\n\t\t{\n\t\t\t// Previews the panning on the source graph\n\t\t\tvar scale = this.outline.getView().scale;\n\t\t\tbounds = new mxRectangle(this.bounds.x + dx,\n\t\t\t\tthis.bounds.y + dy, this.bounds.width, this.bounds.height);\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t\tdx /= scale;\n\t\t\tdx *= this.source.getView().scale;\n\t\t\tdy /= scale;\n\t\t\tdy *= this.source.getView().scale;\n\t\t\tthis.source.panGraph(-dx - this.dx0, -dy - this.dy0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Does *not* preview zooming on the source graph\n\t\t\tvar container = this.source.container;\n\t\t\tvar viewRatio = container.clientWidth / container.clientHeight;\n\t\t\tdy = dx / viewRatio;\n\t\t\tbounds = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y,\n\t\t\t\tMath.max(1, this.bounds.width + dx),\n\t\t\t\tMath.max(1, this.bounds.height + dy));\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t}\n\t\t\n\t\t// Updates the zoom handle\n\t\tvar b = this.sizer.bounds;\n\t\tthis.sizer.bounds = new mxRectangle(\n\t\t\tbounds.x + bounds.width - b.width / 2,\n\t\t\tbounds.y + bounds.height - b.height / 2,\n\t\t\tb.width, b.height);\n\t\t\n\t\t// Avoids update of visibility in redraw for VML\n\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t{\n\t\t\tthis.sizer.redraw();\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: getTranslateForEvent\n * \n * Gets the translate for the given mouse event. Here is an example to limit\n * the outline to stay within positive coordinates:\n * \n * (code)\n * outline.getTranslateForEvent = function(me)\n * {\n *   var pt = new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n *   \n *   if (!this.zoom)\n *   {\n *     var tr = this.source.view.translate;\n *     pt.x = Math.max(tr.x * this.outline.view.scale, pt.x);\n *     pt.y = Math.max(tr.y * this.outline.view.scale, pt.y);\n *   }\n *   \n *   return pt;\n * };\n * (end)\n */\nmxOutline.prototype.getTranslateForEvent = function(me)\n{\n\treturn new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the translation or zoom to <graph>.\n */\nmxOutline.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\t\n\t\tif (Math.abs(dx) > 0 || Math.abs(dy) > 0)\n\t\t{\n\t\t\tif (!this.zoom)\n\t\t\t{\n\t\t\t\t// Applies the new translation if the source\n\t\t\t\t// has no scrollbars\n\t\t\t\tif (!this.source.useScrollbarsForPanning ||\n\t\t\t\t\t!mxUtils.hasScrollbars(this.source.container))\n\t\t\t\t{\n\t\t\t\t\tthis.source.panGraph(0, 0);\n\t\t\t\t\tdx /= this.outline.getView().scale;\n\t\t\t\t\tdy /= this.outline.getView().scale;\n\t\t\t\t\tvar t = this.source.getView().translate;\n\t\t\t\t\tthis.source.getView().setTranslate(t.x - dx, t.y - dy);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Applies the new zoom\n\t\t\t\tvar w = this.selectionBorder.bounds.width;\n\t\t\t\tvar scale = this.source.getView().scale;\n\t\t\t\tthis.source.zoomTo(Math.max(this.minScale, scale - (dx * scale) / w), false);\n\t\t\t}\n\n\t\t\tthis.update();\n\t\t\tme.consume();\n\t\t}\n\t\t\t\n\t\t// Resets the state of the handler\n\t\tthis.index = null;\n\t\tthis.active = false;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroy this outline and removes all listeners from <source>.\n */\nmxOutline.prototype.destroy = function()\n{\n\tif (this.source != null)\n\t{\n\t\tthis.source.removeListener(this.panHandler);\n\t\tthis.source.removeListener(this.refreshHandler);\n\t\tthis.source.getModel().removeListener(this.updateHandler);\n\t\tthis.source.getView().removeListener(this.updateHandler);\n\t\tmxEvent.removeListener(this.source.container, 'scroll', this.updateHandler);\n\t\tthis.source = null;\n\t}\n\t\n\tif (this.outline != null)\n\t{\n\t\tthis.outline.removeMouseListener(this);\n\t\tthis.outline.destroy();\n\t\tthis.outline = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tif (this.sizer != null)\n\t{\n\t\tthis.sizer.destroy();\n\t\tthis.sizer = null;\n\t}\n};\n\n__mxOutput.mxOutline = typeof mxOutline !== 'undefined' ? mxOutline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMultiplicity\n * \n * Defines invalid connections along with the error messages that they produce.\n * To add or remove rules on a graph, you must add/remove instances of this\n * class to <mxGraph.multiplicities>.\n * \n * Example:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only circle targets allowed'));\n * (end)\n * \n * Defines a rule where each rectangle must be connected to no more than 2\n * circles and no other types of targets are allowed.\n * \n * Constructor: mxMultiplicity\n * \n * Instantiate class mxMultiplicity in order to describe allowed\n * connections in a graph. Not all constraints can be enforced while\n * editing, some must be checked at validation time. The <countError> and\n * <typeError> are treated as resource keys in <mxResources>.\n * \n * Parameters:\n * \n * source - Boolean indicating if this rule applies to the source or target\n * terminal.\n * type - Type of the source or target terminal that this rule applies to.\n * See <type> for more information.\n * attr - Optional attribute name to match the source or target terminal.\n * value - Optional attribute value to match the source or target terminal.\n * min - Minimum number of edges for this rule. Default is 1.\n * max - Maximum number of edges for this rule. n means infinite. Default\n * is n.\n * validNeighbors - Array of types of the opposite terminal for which this\n * rule applies.\n * countError - Error to be displayed for invalid number of edges.\n * typeError - Error to be displayed for invalid opposite terminals.\n * validNeighborsAllowed - Optional boolean indicating if the array of\n * opposite types should be valid or invalid.\n */\nfunction mxMultiplicity(source, type, attr, value, min, max,\n\tvalidNeighbors, countError, typeError, validNeighborsAllowed)\n{\n\tthis.source = source;\n\tthis.type = type;\n\tthis.attr = attr;\n\tthis.value = value;\n\tthis.min = (min != null) ? min : 0;\n\tthis.max = (max != null) ? max : 'n';\n\tthis.validNeighbors = validNeighbors;\n\tthis.countError = mxResources.get(countError) || countError;\n\tthis.typeError = mxResources.get(typeError) || typeError;\n\tthis.validNeighborsAllowed = (validNeighborsAllowed != null) ?\n\t\tvalidNeighborsAllowed : true;\n};\n\n/**\n * Variable: type\n * \n * Defines the type of the source or target terminal. The type is a string\n * passed to <mxUtils.isNode> together with the source or target vertex\n * value as the first argument.\n */\nmxMultiplicity.prototype.type = null;\n\n/**\n * Variable: attr\n * \n * Optional string that specifies the attributename to be passed to\n * <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.attr = null;\n\n/**\n * Variable: value\n * \n * Optional string that specifies the value of the attribute to be passed\n * to <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.value = null;\n\n/**\n * Variable: source\n * \n * Boolean that specifies if the rule is applied to the source or target\n * terminal of an edge.\n */\nmxMultiplicity.prototype.source = null;\n\n/**\n * Variable: min\n * \n * Defines the minimum number of connections for which this rule applies.\n * Default is 0.\n */\nmxMultiplicity.prototype.min = null;\n\n/**\n * Variable: max\n * \n * Defines the maximum number of connections for which this rule applies.\n * A value of 'n' means unlimited times. Default is 'n'. \n */\nmxMultiplicity.prototype.max = null;\n\n/**\n * Variable: validNeighbors\n * \n * Holds an array of strings that specify the type of neighbor for which\n * this rule applies. The strings are used in <mxCell.is> on the opposite\n * terminal to check if the rule applies to the connection.\n */\nmxMultiplicity.prototype.validNeighbors = null;\n\n/**\n * Variable: validNeighborsAllowed\n * \n * Boolean indicating if the list of validNeighbors are those that are allowed\n * for this rule or those that are not allowed for this rule.\n */\nmxMultiplicity.prototype.validNeighborsAllowed = true;\n\n/**\n * Variable: countError\n * \n * Holds the localized error message to be displayed if the number of\n * connections for which the rule applies is smaller than <min> or greater\n * than <max>.\n */\nmxMultiplicity.prototype.countError = null;\n\n/**\n * Variable: typeError\n * \n * Holds the localized error message to be displayed if the type of the\n * neighbor for a connection does not match the rule.\n */\nmxMultiplicity.prototype.typeError = null;\n\n/**\n * Function: check\n * \n * Checks the multiplicity for the given arguments and returns the error\n * for the given connection or null if the multiplicity does not apply.\n *  \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph> instance.\n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * sourceOut - Number of outgoing edges from the source terminal.\n * targetIn - Number of incoming edges for the target terminal.\n */\nmxMultiplicity.prototype.check = function(graph, edge, source, target, sourceOut, targetIn)\n{\n\tvar error = '';\n\n\tif ((this.source && this.checkTerminal(graph, source, edge)) ||\n\t\t(!this.source && this.checkTerminal(graph, target, edge)))\n\t{\n\t\tif (this.countError != null && \n\t\t\t((this.source && (this.max == 0 || (sourceOut >= this.max))) ||\n\t\t\t(!this.source && (this.max == 0 || (targetIn >= this.max)))))\n\t\t{\n\t\t\terror += this.countError + '\\n';\n\t\t}\n\n\t\tif (this.validNeighbors != null && this.typeError != null && this.validNeighbors.length > 0)\n\t\t{\n\t\t\tvar isValid = this.checkNeighbors(graph, edge, source, target);\n\n\t\t\tif (!isValid)\n\t\t\t{\n\t\t\t\terror += this.typeError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: checkNeighbors\n * \n * Checks if there are any valid neighbours in <validNeighbors>. This is only\n * called if <validNeighbors> is a non-empty array.\n */\nmxMultiplicity.prototype.checkNeighbors = function(graph, edge, source, target)\n{\n\tvar sourceValue = graph.model.getValue(source);\n\tvar targetValue = graph.model.getValue(target);\n\tvar isValid = !this.validNeighborsAllowed;\n\tvar valid = this.validNeighbors;\n\t\n\tfor (var j = 0; j < valid.length; j++)\n\t{\n\t\tif (this.source &&\n\t\t\tthis.checkType(graph, targetValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t\telse if (!this.source && \n\t\t\tthis.checkType(graph, sourceValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn isValid;\n};\n\n/**\n * Function: checkTerminal\n * \n * Checks the given terminal cell and returns true if this rule applies. The\n * given cell is the source or target of the given edge, depending on\n * <source>. This implementation uses <checkType> on the terminal's value.\n */\nmxMultiplicity.prototype.checkTerminal = function(graph, terminal, edge)\n{\n\tvar value = graph.model.getValue(terminal);\n\t\n\treturn this.checkType(graph, value, this.type, this.attr, this.value);\n};\n\n/**\n * Function: checkType\n * \n * Checks the type of the given value.\n */\nmxMultiplicity.prototype.checkType = function(graph, value, type, attr, attrValue)\n{\n\tif (value != null)\n\t{\n\t\tif (!isNaN(value.nodeType)) // Checks if value is a DOM node\n\t\t{\n\t\t\treturn mxUtils.isNode(value, type, attr, attrValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn value == type;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n__mxOutput.mxMultiplicity = typeof mxMultiplicity !== 'undefined' ? mxMultiplicity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLayoutManager\n * \n * Implements a layout manager that runs a given layout after any changes to the graph:\n * \n * Example:\n * \n * (code)\n * var layoutMgr = new mxLayoutManager(graph);\n * layoutMgr.getLayout = function(cell, eventName)\n * {\n *   return layout;\n * };\n * (end)\n * \n * See <getLayout> for a description of the possible eventNames.\n * \n * Event: mxEvent.LAYOUT_CELLS\n * \n * Fires between begin- and endUpdate after all cells have been layouted in\n * <layoutCells>. The <code>cells</code> property contains all cells that have\n * been passed to <layoutCells>.\n * \n * Constructor: mxLayoutManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxLayoutManager(graph)\n{\n\t// Executes the layout before the changes are dispatched\n\tthis.undoHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.beforeUndo(evt.getProperty('edit'));\n\t\t}\n\t});\n\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.moveHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsMoved(evt.getProperty('cells'), evt.getProperty('event'));\n\t\t}\n\t});\n\t\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'), evt.getProperty('bounds'),\n\t\t\t\tevt.getProperty('previous'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxLayoutManager.prototype = new mxEventSource();\nmxLayoutManager.prototype.constructor = mxLayoutManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxLayoutManager.prototype.graph = null;\n\n/**\n * Variable: bubbling\n * \n * Specifies if the layout should bubble along\n * the cell hierarchy. Default is true.\n */\nmxLayoutManager.prototype.bubbling = true;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxLayoutManager.prototype.enabled = true;\n\n/**\n * Variable: undoHandler\n * \n * Holds the function that handles the endUpdate event.\n */\nmxLayoutManager.prototype.undoHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxLayoutManager.prototype.moveHandler = null;\n\n/**\n * Variable: resizeHandler\n * \n * Holds the function that handles the resize event.\n */\nmxLayoutManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxLayoutManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxLayoutManager.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isBubbling\n * \n * Returns true if a layout should bubble, that is, if the parent layout\n * should be executed whenever a cell layout (layout of the children of\n * a cell) has been executed. This implementation returns <bubbling>.\n */\nmxLayoutManager.prototype.isBubbling = function()\n{\n\treturn this.bubbling;\n};\n\n/**\n * Function: setBubbling\n * \n * Sets <bubbling>.\n */\nmxLayoutManager.prototype.setBubbling = function(value)\n{\n\tthis.bubbling = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxLayoutManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxLayoutManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\t\n\t\tmodel.removeListener(this.undoHandler);\n\t\tthis.graph.removeListener(this.moveHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\n\t\tmodel.addListener(mxEvent.BEFORE_UNDO, this.undoHandler);\n\t\tthis.graph.addListener(mxEvent.MOVE_CELLS, this.moveHandler);\n\t\tthis.graph.addListener(mxEvent.RESIZE_CELLS, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: getLayout\n * \n * Returns the layout for the given cell and eventName. Possible\n * event names are <mxEvent.MOVE_CELLS> and <mxEvent.RESIZE_CELLS>\n * for callbacks on when cells are moved or resized and\n * <mxEvent.BEGIN_UPDATE> and <mxEvent.END_UPDATE> for the capture\n * and bubble phase of the layout after any changes of the model.\n */\nmxLayoutManager.prototype.getLayout = function(cell, eventName)\n{\n\treturn null;\n};\n\n/**\n * Function: beforeUndo\n * \n * Called from <undoHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.beforeUndo = function(undoableEdit)\n{\n\tthis.executeLayoutForCells(this.getCellsForChanges(undoableEdit.changes));\n};\n\n/**\n * Function: cellsMoved\n * \n * Called from <moveHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.cellsMoved = function(cells, evt)\n{\n\tif (cells != null && evt != null)\n\t{\n\t\tvar point = mxUtils.convertPoint(this.getGraph().container,\n\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\n\t\t// Checks if a layout exists to take care of the moving if the\n\t\t// parent itself is not being moved\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar layout = this.getAncestorLayout(cells[i], mxEvent.MOVE_CELLS);\n\n\t\t\tif (layout != null)\n\t\t\t{\n\t\t\t\tlayout.moveCell(cells[i], point.x, point.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called from <resizeHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been resized.\n * bounds - <mxRectangle> taht represents the new bounds.\n */\nmxLayoutManager.prototype.cellsResized = function(cells, bounds, prev)\n{\n\tif (cells != null && bounds != null)\n\t{\n\t\t// Checks if a layout exists to take care of the resize if the\n\t\t// parent itself is not being resized\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar layout = this.getAncestorLayout(cells[i], mxEvent.RESIZE_CELLS);\n\n\t\t\tif (layout != null)\n\t\t\t{\n\t\t\t\tlayout.resizeCell(cells[i], bounds[i], prev[i]);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getAncestorLayout\n * \n * Returns the cells to be layouted for the given sequence of changes.\n */\nmxLayoutManager.prototype.getAncestorLayout = function(cell, eventName)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\twhile (cell != null)\n\t{\n\t\tvar layout = this.getLayout(cell, eventName);\n\n\t\tif (layout != null)\n\t\t{\n\t\t\treturn layout;\n\t\t}\n\t\t\n\t\tcell = model.getParent(cell);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getCellsForChanges\n * \n * Returns the cells for which a layout should be executed.\n */\nmxLayoutManager.prototype.getCellsForChanges = function(changes)\n{\n\tvar result = [];\n\t\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change instanceof mxRootChange)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = result.concat(this.getCellsForChange(change));\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsForChange\n * \n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.getCellsForChange = function(change)\n{\n\tif (change instanceof mxChildChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.child,\n\t\t\tthis.addCellsWithLayout(change.previous));\n\t}\n\telse if (change instanceof mxTerminalChange ||\n\t\tchange instanceof mxGeometryChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.cell);\n\t}\n\telse if (change instanceof mxVisibleChange ||\n\t\tchange instanceof mxStyleChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.cell);\n\t}\n\t\n\treturn [];\n};\n\n/**\n * Function: addCellsWithLayout\n * \n * Adds all ancestors of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addCellsWithLayout = function(cell, result)\n{\n\treturn this.addDescendantsWithLayout(cell,\n\t\tthis.addAncestorsWithLayout(cell, result));\n};\n\n/**\n * Function: addAncestorsWithLayout\n * \n * Adds all ancestors of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addAncestorsWithLayout = function(cell, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (cell != null)\n\t{\n\t\tvar layout = this.getLayout(cell);\n\t\t\n\t\tif (layout != null)\n\t\t{\n\t\t\tresult.push(cell);\n\t\t}\n\t\t\n\t\tif (this.isBubbling())\n\t\t{\n\t\t\tvar model = this.getGraph().getModel();\n\t\t\tthis.addAncestorsWithLayout(\n\t\t\t\tmodel.getParent(cell), result);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: addDescendantsWithLayout\n * \n * Adds all descendants of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addDescendantsWithLayout = function(cell, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (cell != null && this.getLayout(cell) != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tfor (var i = 0; i < model.getChildCount(cell); i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\tif (this.getLayout(child) != null)\n\t\t\t{\n\t\t\t\tresult.push(child);\n\t\t\t\tthis.addDescendantsWithLayout(child, result);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: executeLayoutForCells\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayoutForCells = function(cells)\n{\n\t// Adds reverse to this array to avoid duplicate execution of leaves\n\t// Works like capture/bubble for events, first executes all layout\n\t// from top to bottom and in reverse order and removes duplicates.\n\tvar sorted = mxUtils.sortCells(cells, true);\n\tthis.layoutCells(sorted, false);\n\tthis.layoutCells(sorted.reverse(), true);\n};\n\n/**\n * Function: layoutCells\n * \n * Executes all layouts which have been scheduled during the changes.\n */\nmxLayoutManager.prototype.layoutCells = function(cells, bubble)\n{\n\tif (cells.length > 0)\n\t{\n\t\t// Invokes the layouts while removing duplicates\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry \n\t\t{\n\t\t\tvar last = null;\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] != model.getRoot() && cells[i] != last)\n\t\t\t\t{\n\t\t\t\t\tthis.executeLayout(cells[i], bubble);\n\t\t\t\t\tlast = cells[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.LAYOUT_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: executeLayout\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayout = function(cell, bubble)\n{\n\tvar layout = this.getLayout(cell, (bubble) ?\n\t\tmxEvent.END_UPDATE : mxEvent.BEGIN_UPDATE);\n\n\tif (layout != null)\n\t{\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxLayoutManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxLayoutManager = typeof mxLayoutManager !== 'undefined' ? mxLayoutManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneManager\n * \n * Manager for swimlanes and nested swimlanes that sets the size of newly added\n * swimlanes to that of their siblings, and propagates changes to the size of a\n * swimlane to its siblings, if <siblings> is true, and its ancestors, if\n * <bubbling> is true.\n * \n * Constructor: mxSwimlaneManager\n *\n * Constructs a new swimlane manager for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxSwimlaneManager(graph, horizontal, addEnabled, resizeEnabled)\n{\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.addEnabled = (addEnabled != null) ? addEnabled : true;\n\tthis.resizeEnabled = (resizeEnabled != null) ? resizeEnabled : true;\n\n\tthis.addHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isAddEnabled())\n\t\t{\n\t\t\tthis.cellsAdded(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isResizeEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxSwimlaneManager.prototype = new mxEventSource();\nmxSwimlaneManager.prototype.constructor = mxSwimlaneManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSwimlaneManager.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxSwimlaneManager.prototype.enabled = true;\n\n/**\n * Variable: horizontal\n * \n * Specifies the orientation of the swimlanes. Default is true.\n */\nmxSwimlaneManager.prototype.horizontal = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if newly added cells should be resized to match the size of their\n * existing siblings. Default is true.\n */\nmxSwimlaneManager.prototype.addEnabled = true;\n\n/**\n * Variable: resizeEnabled\n * \n * Specifies if resizing of swimlanes should be handled. Default is true.\n */\nmxSwimlaneManager.prototype.resizeEnabled = true;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.addHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxSwimlaneManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxSwimlaneManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxSwimlaneManager.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: setHorizontal\n * \n * Sets <horizontal>.\n */\nmxSwimlaneManager.prototype.setHorizontal = function(value)\n{\n\tthis.horizontal = value;\n};\n\n/**\n * Function: isAddEnabled\n * \n * Returns <addEnabled>.\n */\nmxSwimlaneManager.prototype.isAddEnabled = function()\n{\n\treturn this.addEnabled;\n};\n\n/**\n * Function: setAddEnabled\n * \n * Sets <addEnabled>.\n */\nmxSwimlaneManager.prototype.setAddEnabled = function(value)\n{\n\tthis.addEnabled = value;\n};\n\n/**\n * Function: isResizeEnabled\n * \n * Returns <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.isResizeEnabled = function()\n{\n\treturn this.resizeEnabled;\n};\n\n/**\n * Function: setResizeEnabled\n * \n * Sets <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.setResizeEnabled = function(value)\n{\n\tthis.resizeEnabled = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this manager operates on.\n */\nmxSwimlaneManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the manager operates on.\n */\nmxSwimlaneManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.removeListener(this.addHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.addListener(mxEvent.ADD_CELLS, this.addHandler);\n\t\tthis.graph.addListener(mxEvent.CELLS_RESIZED, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: isSwimlaneIgnored\n * \n * Returns true if the given swimlane should be ignored.\n */\nmxSwimlaneManager.prototype.isSwimlaneIgnored = function(swimlane)\n{\n\treturn !this.getGraph().isSwimlane(swimlane);\n};\n\n/**\n * Function: isCellHorizontal\n * \n * Returns true if the given cell is horizontal. If the given cell is not a\n * swimlane, then the global orientation is returned.\n */\nmxSwimlaneManager.prototype.isCellHorizontal = function(cell)\n{\n\tif (this.graph.isSwimlane(cell))\n\t{\n\t\tvar style = this.graph.getCellStyle(cell);\n\t\t\n\t\treturn mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n\t}\n\t\n\treturn !this.isHorizontal();\n};\n\n/**\n * Function: cellsAdded\n * \n * Called if any cells have been added.\n * \n * Parameters:\n * \n * cell - Array of <mxCells> that have been added.\n */\nmxSwimlaneManager.prototype.cellsAdded = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.swimlaneAdded(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swimlaneAdded\n * \n * Updates the size of the given swimlane to match that of any existing\n * siblings swimlanes.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that represents the new swimlane.\n */\nmxSwimlaneManager.prototype.swimlaneAdded = function(swimlane)\n{\n\tvar model = this.getGraph().getModel();\n\tvar parent = model.getParent(swimlane);\n\tvar childCount = model.getChildCount(parent);\n\tvar geo = null;\n\t\n\t// Finds the first valid sibling swimlane as reference\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (child != swimlane && !this.isSwimlaneIgnored(child))\n\t\t{\n\t\t\tgeo = model.getGeometry(child);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Applies the size of the refernece to the newly added swimlane\n\tif (geo != null)\n\t{\n\t\tvar parentHorizontal = (parent != null) ? this.isCellHorizontal(parent) : this.horizontal;\n\t\tthis.resizeSwimlane(swimlane, geo.width, geo.height, parentHorizontal);\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called if any cells have been resizes. Calls <swimlaneResized> for all\n * swimlanes where <isSwimlaneIgnored> returns false.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose size was changed.\n */\nmxSwimlaneManager.prototype.cellsResized = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Finds the top-level swimlanes and adds offsets\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = model.getGeometry(cells[i]);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar size = new mxRectangle(0, 0, geo.width, geo.height);\n\t\t\t\t\t\tvar top = cells[i];\n\t\t\t\t\t\tvar current = top;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (current != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttop = current;\n\t\t\t\t\t\t\tcurrent = model.getParent(current);\n\t\t\t\t\t\t\tvar tmp = (this.graph.isSwimlane(current)) ?\n\t\t\t\t\t\t\t\t\tthis.graph.getStartSize(current) :\n\t\t\t\t\t\t\t\t\tnew mxRectangle();\n\t\t\t\t\t\t\tsize.width += tmp.width;\n\t\t\t\t\t\t\tsize.height += tmp.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar parentHorizontal = (current != null) ? this.isCellHorizontal(current) : this.horizontal;\n\t\t\t\t\t\tthis.resizeSwimlane(top, size.width, size.height, parentHorizontal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeSwimlane\n * \n * Called from <cellsResized> for all swimlanes that are not ignored to update\n * the size of the siblings and the size of the parent swimlanes, recursively,\n * if <bubbling> is true.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose size has changed.\n */\nmxSwimlaneManager.prototype.resizeSwimlane = function(swimlane, w, h, parentHorizontal)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar horizontal = this.isCellHorizontal(swimlane);\n\t\t\n\t\tif (!this.isSwimlaneIgnored(swimlane))\n\t\t{\n\t\t\tvar geo = model.getGeometry(swimlane);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tif ((parentHorizontal && geo.height != h) || (!parentHorizontal && geo.width != w))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (parentHorizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = h;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = w;\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.setGeometry(swimlane, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar tmp = (this.graph.isSwimlane(swimlane)) ?\n\t\t\t\tthis.graph.getStartSize(swimlane) :\n\t\t\t\tnew mxRectangle();\n\t\tw -= tmp.width;\n\t\th -= tmp.height;\n\t\t\n\t\tvar childCount = model.getChildCount(swimlane);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(swimlane, i);\n\t\t\tthis.resizeSwimlane(child, w, h, horizontal);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxSwimlaneManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxSwimlaneManager = typeof mxSwimlaneManager !== 'undefined' ? mxSwimlaneManager : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxTemporaryCellStates\n * \n * Creates a temporary set of cell states.\n */\nfunction mxTemporaryCellStates(view, scale, cells, isCellVisibleFn, getLinkForCellState)\n{\n\tscale = (scale != null) ? scale : 1;\n\tthis.view = view;\n\t\n\t// Stores the previous state\n\tthis.oldValidateCellState = view.validateCellState;\n\tthis.oldBounds = view.getGraphBounds();\n\tthis.oldStates = view.getStates();\n\tthis.oldScale = view.getScale();\n\tthis.oldDoRedrawShape = view.graph.cellRenderer.doRedrawShape;\n\n\tvar self = this;\n\n\t// Overrides doRedrawShape and paint shape to add links on shapes\n\tif (getLinkForCellState != null)\n\t{\n\t\tview.graph.cellRenderer.doRedrawShape = function(state)\n\t\t{\n\t\t\tvar oldPaint = state.shape.paint;\n\t\t\t\n\t\t\tstate.shape.paint = function(c)\n\t\t\t{\n\t\t\t\tvar link = getLinkForCellState(state);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(link);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toldPaint.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(null);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tself.oldDoRedrawShape.apply(view.graph.cellRenderer, arguments);\n\t\t\tstate.shape.paint = oldPaint;\n\t\t};\n\t}\n\n\t// Overrides validateCellState to ignore invisible cells\n\tview.validateCellState = function(cell, resurse)\n\t{\n\t\tif (cell == null || isCellVisibleFn == null || isCellVisibleFn(cell))\n\t\t{\n\t\t\treturn self.oldValidateCellState.apply(view, arguments);\n\t\t}\n\t\t\n\t\treturn null;\n\t};\n\t\n\t// Creates space for new states\n\tview.setStates(new mxDictionary());\n\tview.setScale(scale);\n\t\n\tif (cells != null)\n\t{\n\t\tview.resetValidationState();\n\t\tvar bbox = null;\n\n\t\t// Validates the vertices and edges without adding them to\n\t\t// the model so that the original cells are not modified\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar bounds = view.getBoundingBox(view.validateCellState(view.validateCell(cells[i])));\n\t\t\t\n\t\t\tif (bbox == null)\n\t\t\t{\n\t\t\t\tbbox = bounds;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox.add(bounds);\n\t\t\t}\n\t\t}\n\n\t\tview.setGraphBounds(bbox || new mxRectangle());\n\t}\n};\n\n/**\n * Variable: view\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.view = null;\n\n/**\n * Variable: oldStates\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldStates = null;\n\n/**\n * Variable: oldBounds\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldBounds = null;\n\n/**\n * Variable: oldScale\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldScale = null;\n\n/**\n * Function: destroy\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxTemporaryCellStates.prototype.destroy = function()\n{\n\tthis.view.setScale(this.oldScale);\n\tthis.view.setStates(this.oldStates);\n\tthis.view.setGraphBounds(this.oldBounds);\n\tthis.view.validateCellState = this.oldValidateCellState;\n\tthis.view.graph.cellRenderer.doRedrawShape = this.oldDoRedrawShape;\n};\n\n__mxOutput.mxTemporaryCellStates = typeof mxTemporaryCellStates !== 'undefined' ? mxTemporaryCellStates : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxCellStatePreview\n * \n * Implements a live preview for moving cells.\n * \n * Constructor: mxCellStatePreview\n * \n * Constructs a move preview for the given graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellStatePreview(graph)\n{\n\tthis.deltas = new mxDictionary();\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.graph = null;\n\n/**\n * Variable: deltas\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.deltas = null;\n\n/**\n * Variable: count\n * \n * Contains the number of entries in the map.\n */\nmxCellStatePreview.prototype.count = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if this contains no entries.\n */\nmxCellStatePreview.prototype.isEmpty = function()\n{\n\treturn this.count == 0;\n};\n\n/**\n * Function: moveState\n */\nmxCellStatePreview.prototype.moveState = function(state, dx, dy, add, includeEdges)\n{\n\tadd = (add != null) ? add : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar delta = this.deltas.get(state.cell);\n\n\tif (delta == null)\n\t{\n\t\t// Note: Deltas stores the point and the state since the key is a string.\n\t\tdelta = {point: new mxPoint(dx, dy), state: state};\n\t\tthis.deltas.put(state.cell, delta);\n\t\tthis.count++;\n\t}\n\telse if (add)\n\t{\n\t\tdelta.point.x += dx;\n\t\tdelta.point.y += dy;\n\t}\n\telse\n\t{\n\t\tdelta.point.x = dx;\n\t\tdelta.point.y = dy;\n\t}\n\t\n\tif (includeEdges)\n\t{\n\t\tthis.addEdges(state);\n\t}\n\t\n\treturn delta.point;\n};\n\n/**\n * Function: show\n */\nmxCellStatePreview.prototype.show = function(visitor)\n{\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.translateState(delta.state, delta.point.x, delta.point.y);\n\t}));\n\t\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.revalidateState(delta.state, delta.point.x, delta.point.y, visitor);\n\t}));\n};\n\n/**\n * Function: translateState\n */\nmxCellStatePreview.prototype.translateState = function(state, dx, dy)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tif (model.isVertex(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t\tvar geo = model.getGeometry(state.cell);\n\t\t\t\n\t\t\t// Moves selection cells and non-relative vertices in\n\t\t\t// the first phase so that edge terminal points will\n\t\t\t// be updated in the second phase\n\t\t\tif ((dx != 0 || dy != 0) && geo != null && (!geo.relative || this.deltas.get(state.cell) != null))\n\t\t\t{\n\t\t\t\tstate.x += dx;\n\t\t\t\tstate.y += dy;\n\t\t\t}\n\t\t}\n\t    \n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.translateState(state.view.getState(model.getChildAt(state.cell, i)), dx, dy);\n\t    }\n\t}\n};\n\n/**\n * Function: revalidateState\n */\nmxCellStatePreview.prototype.revalidateState = function(state, dx, dy, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\t// Updates the edge terminal points and restores the\n\t\t// (relative) positions of any (relative) children\n\t\tif (model.isEdge(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t}\n\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\n\t\tvar pState = state.view.getState(model.getParent(state.cell));\n\t\t\n\t\t// Moves selection vertices which are relative\n\t\tif ((dx != 0 || dy != 0) && geo != null && geo.relative &&\n\t\t\tmodel.isVertex(state.cell) && (pState == null ||\n\t\t\tmodel.isVertex(pState.cell) || this.deltas.get(state.cell) != null))\n\t\t{\n\t\t\tstate.x += dx;\n\t\t\tstate.y += dy;\n\t\t}\n\t\t\n\t\tthis.graph.cellRenderer.redraw(state);\n\t\n\t\t// Invokes the visitor on the given state\n\t\tif (visitor != null)\n\t\t{\n\t\t\tvisitor(state);\n\t\t}\n\t\t\t\t\t\t\n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.revalidateState(this.graph.view.getState(model.getChildAt(state.cell, i)), dx, dy, visitor);\n\t    }\n\t}\n};\n\n/**\n * Function: addEdges\n */\nmxCellStatePreview.prototype.addEdges = function(state)\n{\n\tvar model = this.graph.getModel();\n\tvar edgeCount = model.getEdgeCount(state.cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar s = state.view.getState(model.getEdgeAt(state.cell, i));\n\n\t\tif (s != null)\n\t\t{\n\t\t\tthis.moveState(s, 0, 0);\n\t\t}\n\t}\n};\n\n__mxOutput.mxCellStatePreview = typeof mxCellStatePreview !== 'undefined' ? mxCellStatePreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnectionConstraint\n * \n * Defines an object that contains the constraints about how to connect one\n * side of an edge to its terminal.\n * \n * Constructor: mxConnectionConstraint\n * \n * Constructs a new connection constraint for the given point and boolean\n * arguments.\n * \n * Parameters:\n * \n * point - Optional <mxPoint> that specifies the fixed location of the point\n * in relative coordinates. Default is null.\n * perimeter - Optional boolean that specifies if the fixed point should be\n * projected onto the perimeter of the terminal. Default is true.\n */\nfunction mxConnectionConstraint(point, perimeter, name, dx, dy)\n{\n\tthis.point = point;\n\tthis.perimeter = (perimeter != null) ? perimeter : true;\n\tthis.name = name;\n\tthis.dx = dx? dx : 0;\n\tthis.dy = dy? dy : 0;\n};\n\n/**\n * Variable: point\n * \n * <mxPoint> that specifies the fixed location of the connection point.\n */\nmxConnectionConstraint.prototype.point = null;\n\n/**\n * Variable: perimeter\n * \n * Boolean that specifies if the point should be projected onto the perimeter\n * of the terminal.\n */\nmxConnectionConstraint.prototype.perimeter = null;\n\n/**\n * Variable: name\n * \n * Optional string that specifies the name of the constraint.\n */\nmxConnectionConstraint.prototype.name = null;\n\n/**\n * Variable: dx\n * \n * Optional float that specifies the horizontal offset of the constraint.\n */\nmxConnectionConstraint.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Optional float that specifies the vertical offset of the constraint.\n */\nmxConnectionConstraint.prototype.dy = null;\n\n\n__mxOutput.mxConnectionConstraint = typeof mxConnectionConstraint !== 'undefined' ? mxConnectionConstraint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHandler\n * \n * Graph event handler that handles selection. Individual cells are handled\n * separately using <mxVertexHandler> or one of the edge handlers. These\n * handlers are created using <mxGraph.createHandler> in\n * <mxGraphSelectionModel.cellAdded>.\n * \n * To avoid the container to scroll a moved cell into view, set\n * <scrollAfterMove> to false.\n * \n * Constructor: mxGraphHandler\n * \n * Constructs an event handler that creates handles for the\n * selection cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphHandler(graph)\n{\n\tthis.graph = graph;\n\tthis.graph.addMouseListener(this);\n\t\n\t// Repaints the handler after autoscroll\n\tthis.panHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (!this.suspended)\n\t\t{\n\t\t\tthis.updatePreview();\n\t\t\tthis.updateHint();\n\t\t}\n\t});\n\t\n\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Handles escape keystrokes\n\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t\n\t// Updates the preview box for remote changes\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Waits for the states and handlers to be updated\n\t\twindow.setTimeout(mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.first != null && !this.suspended)\n\t\t\t{\n\t\t\t\t// Updates preview with no translate to compute bounding box\n\t\t\t\tvar dx = this.currentDx;\n\t\t\t\tvar dy = this.currentDy;\n\t\t\t\tthis.currentDx = 0;\n\t\t\t\tthis.currentDy = 0;\n\t\t\t\tthis.updatePreview();\n\t\t\t\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\t\t\t\tthis.pBounds = this.getPreviewBounds(this.cells);\n\n\t\t\t\tif (this.pBounds == null)\n\t\t\t\t{\n\t\t\t\t\tthis.reset();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Restores translate and updates preview\n\t\t\t\t\tthis.currentDx = dx;\n\t\t\t\t\tthis.currentDy = dy;\n\t\t\t\t\tthis.updatePreview();\n\t\t\t\t\tthis.updateHint();\n\n\t\t\t\t\tif (this.livePreviewUsed)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setHandlesVisibleForCells(this.graph.getSelectionCells(), false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}), 0);\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\t\n\tthis.keyHandler = mxUtils.bind(this, function(e)\n\t{\n\t\tif (this.graph.container != null && this.graph.container.style.visibility != 'hidden' &&\n\t\t\tthis.first != null && !this.suspended)\n\t\t{\n\t\t\tvar clone = this.graph.isCloneEvent(e) &&\n\t\t\t\tthis.graph.isCellsCloneable() &&\n\t\t\t\tthis.isCloneEnabled();\n\t\t\t\n\t\t\tif (clone != this.cloning)\n\t\t\t{\n\t\t\t\tthis.cloning = clone;\n\t\t\t\tthis.checkPreview();\n\t\t\t\tthis.updatePreview();\n\t\t\t}\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(document, 'keydown', this.keyHandler);\n\tmxEvent.addListener(document, 'keyup', this.keyHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphHandler.prototype.graph = null;\n\n/**\n * Variable: maxCells\n * \n * Defines the maximum number of cells to paint subhandles\n * for. Default is 50 for Firefox and 20 for IE. Set this\n * to 0 if you want an unlimited number of handles to be\n * displayed. This is only recommended if the number of\n * cells in the graph is limited to a small number, eg.\n * 500.\n */\nmxGraphHandler.prototype.maxCells = (mxClient.IS_IE) ? 20 : 50;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxGraphHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightEnabled\n * \n * Specifies if drop targets under the mouse should be enabled. Default is\n * true.\n */\nmxGraphHandler.prototype.highlightEnabled = true;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxGraphHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: moveEnabled\n * \n * Specifies if moving is enabled. Default is true.\n */\nmxGraphHandler.prototype.moveEnabled = true;\n\n/**\n * Variable: guidesEnabled\n * \n * Specifies if other cells should be used for snapping the right, center or\n * left side of the current selection. Default is false.\n */\nmxGraphHandler.prototype.guidesEnabled = false;\n\n/**\n * Variable: handlesVisible\n * \n * Whether the handles of the selection are currently visible.\n */\nmxGraphHandler.prototype.handlesVisible = true;\n\n/**\n * Variable: guide\n * \n * Holds the <mxGuide> instance that is used for alignment.\n */\nmxGraphHandler.prototype.guide = null;\n\n/**\n * Variable: currentDx\n * \n * Stores the x-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDx = null;\n\n/**\n * Variable: currentDy\n * \n * Stores the y-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDy = null;\n\n/**\n * Variable: updateCursor\n * \n * Specifies if a move cursor should be shown if the mouse is over a movable\n * cell. Default is true.\n */\nmxGraphHandler.prototype.updateCursor = true;\n\n/**\n * Variable: selectEnabled\n * \n * Specifies if selecting is enabled. Default is true.\n */\nmxGraphHandler.prototype.selectEnabled = true;\n\n/**\n * Variable: removeCellsFromParent\n * \n * Specifies if cells may be moved out of their parents. Default is true.\n */\nmxGraphHandler.prototype.removeCellsFromParent = true;\n\n/**\n * Variable: removeEmptyParents\n * \n * If empty parents should be removed from the model after all child cells\n * have been moved out. Default is true.\n */\nmxGraphHandler.prototype.removeEmptyParents = false;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if drop events are interpreted as new connections if no other\n * drop action is defined. Default is false.\n */\nmxGraphHandler.prototype.connectOnDrop = false;\n\n/**\n * Variable: scrollOnMove\n * \n * Specifies if the view should be scrolled so that a moved cell is\n * visible. Default is true.\n */\nmxGraphHandler.prototype.scrollOnMove = true;\n\n/**\n * Variable: minimumSize\n * \n * Specifies the minimum number of pixels for the width and height of a\n * selection border. Default is 6.\n */\nmxGraphHandler.prototype.minimumSize = 6;\n\n/**\n * Variable: previewColor\n * \n * Specifies the color of the preview shape. Default is black.\n */\nmxGraphHandler.prototype.previewColor = 'black';\n\n/**\n * Variable: htmlPreview\n * \n * Specifies if the graph container should be used for preview. If this is used\n * then drop target detection relies entirely on <mxGraph.getCellAt> because\n * the HTML preview does not \"let events through\". Default is false.\n */\nmxGraphHandler.prototype.htmlPreview = false;\n\n/**\n * Variable: shape\n * \n * Reference to the <mxShape> that represents the preview.\n */\nmxGraphHandler.prototype.shape = null;\n\n/**\n * Variable: scaleGrid\n * \n * Specifies if the grid should be scaled. Default is false.\n */\nmxGraphHandler.prototype.scaleGrid = false;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if the bounding box should allow for rotation. Default is true.\n */\nmxGraphHandler.prototype.rotationEnabled = true;\n\n/**\n * Variable: maxLivePreview\n * \n * Maximum number of cells for which live preview should be used. Default is 0\n * which means no live preview.\n */\nmxGraphHandler.prototype.maxLivePreview = 0;\n\n/**\n * Variable: allowLivePreview\n * \n * If live preview is allowed on this system. Default is true for systems with\n * SVG support.\n */\nmxGraphHandler.prototype.allowLivePreview = mxClient.IS_SVG;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxGraphHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxGraphHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isCloneEnabled\n * \n * Returns <cloneEnabled>.\n */\nmxGraphHandler.prototype.isCloneEnabled = function()\n{\n\treturn this.cloneEnabled;\n};\n\n/**\n * Function: setCloneEnabled\n * \n * Sets <cloneEnabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new clone enabled state.\n */\nmxGraphHandler.prototype.setCloneEnabled = function(value)\n{\n\tthis.cloneEnabled = value;\n};\n\n/**\n * Function: isMoveEnabled\n * \n * Returns <moveEnabled>.\n */\nmxGraphHandler.prototype.isMoveEnabled = function()\n{\n\treturn this.moveEnabled;\n};\n\n/**\n * Function: setMoveEnabled\n * \n * Sets <moveEnabled>.\n */\nmxGraphHandler.prototype.setMoveEnabled = function(value)\n{\n\tthis.moveEnabled = value;\n};\n\n/**\n * Function: isSelectEnabled\n * \n * Returns <selectEnabled>.\n */\nmxGraphHandler.prototype.isSelectEnabled = function()\n{\n\treturn this.selectEnabled;\n};\n\n/**\n * Function: setSelectEnabled\n * \n * Sets <selectEnabled>.\n */\nmxGraphHandler.prototype.setSelectEnabled = function(value)\n{\n\tthis.selectEnabled = value;\n};\n\n/**\n * Function: isRemoveCellsFromParent\n * \n * Returns <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.isRemoveCellsFromParent = function()\n{\n\treturn this.removeCellsFromParent;\n};\n\n/**\n * Function: setRemoveCellsFromParent\n * \n * Sets <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.setRemoveCellsFromParent = function(value)\n{\n\tthis.removeCellsFromParent = value;\n};\n\n/**\n * Function: getInitialCellForEvent\n * \n * Hook to return initial cell for the given event.\n */\nmxGraphHandler.prototype.getInitialCellForEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: isDelayedSelection\n * \n * Hook to return true for delayed selections.\n */\nmxGraphHandler.prototype.isDelayedSelection = function(cell, me)\n{\n\treturn this.graph.isCellSelected(cell);\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given mouse event. NOTE: This may be used to enable click\n * events for links in labels on iOS as follows as consuming the initial\n * touchStart disables firing the subsequent click event on the link.\n * \n * <code>\n * mxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n * {\n *   var source = mxEvent.getSource(me.getEvent());\n *   \n *   if (!mxEvent.isTouchEvent(me.getEvent()) || source.nodeName != 'A')\n *   {\n *     me.consume();\n *   }\n * }\n * </code>\n */\nmxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by selecing the given cell and creating a handle for\n * it. By consuming the event all subsequent events of the gesture are\n * redirected to this handler.\n */\nmxGraphHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() != null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar cell = this.getInitialCellForEvent(me);\n\t\tthis.delayedSelection = this.isDelayedSelection(cell, me);\n\t\tthis.cell = null;\n\t\t\n\t\tif (this.isSelectEnabled() && !this.delayedSelection)\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\n\t\tif (this.isMoveEnabled())\n\t\t{\n\t\t\tvar model = this.graph.model;\n\t\t\tvar geo = model.getGeometry(cell);\n\n\t\t\tif (this.graph.isCellMovable(cell) && ((!model.isEdge(cell) || this.graph.getSelectionCount() > 1 ||\n\t\t\t\t(geo.points != null && geo.points.length > 0) || model.getTerminal(cell, true) == null ||\n\t\t\t\tmodel.getTerminal(cell, false) == null) || this.graph.allowDanglingEdges || \n\t\t\t\t(this.graph.isCloneEvent(me.getEvent()) && this.graph.isCellsCloneable())))\n\t\t\t{\n\t\t\t\tthis.start(cell, me.getX(), me.getY());\n\t\t\t}\n\t\t\telse if (this.delayedSelection)\n\t\t\t{\n\t\t\t\tthis.cell = cell;\n\t\t\t}\n\n\t\t\tthis.cellWasClicked = true;\n\t\t\tthis.consumeMouseEvent(mxEvent.MOUSE_DOWN, me);\n\t\t}\n\t}\n};\n\n/**\n * Function: getGuideStates\n * \n * Creates an array of cell states which should be used as guides.\n */\nmxGraphHandler.prototype.getGuideStates = function()\n{\n\tvar parent = this.graph.getDefaultParent();\n\tvar model = this.graph.getModel();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.graph.view.getState(cell) != null &&\n\t\t\tmodel.isVertex(cell) &&\n\t\t\tmodel.getGeometry(cell) != null &&\n\t\t\t!model.getGeometry(cell).relative;\n\t});\n\t\n\treturn this.graph.view.getCellStates(model.filterDescendants(filter, parent));\n};\n\n/**\n * Function: getCells\n * \n * Returns the cells to be modified by this handler. This implementation\n * returns all selection cells that are movable, or the given initial cell if\n * the given cell is not selected and movable. This handles the case of moving\n * unselectable or unselected cells.\n * \n * Parameters:\n * \n * initialCell - <mxCell> that triggered this handler.\n */\nmxGraphHandler.prototype.getCells = function(initialCell)\n{\n\tif (!this.delayedSelection && this.graph.isCellMovable(initialCell))\n\t{\n\t\treturn [initialCell];\n\t}\n\telse\n\t{\n\t\treturn this.graph.getMovableCells(this.graph.getSelectionCells());\n\t}\n};\n\n/**\n * Function: getPreviewBounds\n * \n * Returns the <mxRectangle> used as the preview bounds for\n * moving the given cells.\n */\nmxGraphHandler.prototype.getPreviewBounds = function(cells)\n{\n\tvar bounds = this.getBoundingBox(cells);\n\t\n\tif (bounds != null)\n\t{\n\t\t// Corrects width and height\n\t\tbounds.width = Math.max(0, bounds.width - 1);\n\t\tbounds.height = Math.max(0, bounds.height - 1);\n\t\t\n\t\tif (bounds.width < this.minimumSize)\n\t\t{\n\t\t\tvar dx = this.minimumSize - bounds.width;\n\t\t\tbounds.x -= dx / 2;\n\t\t\tbounds.width = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.x = Math.round(bounds.x);\n\t\t\tbounds.width = Math.ceil(bounds.width);\n\t\t}\n\t\t\n\t\tvar tr = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (bounds.height < this.minimumSize)\n\t\t{\n\t\t\tvar dy = this.minimumSize - bounds.height;\n\t\t\tbounds.y -= dy / 2;\n\t\t\tbounds.height = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.y = Math.round(bounds.y);\n\t\t\tbounds.height = Math.ceil(bounds.height);\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the union of the <mxCellStates> for the given array of <mxCells>.\n * For vertices, this method uses the bounding box of the corresponding shape\n * if one exists. The bounding box of the corresponding text label and all\n * controls and overlays are ignored. See also: <mxGraphView.getBounds> and\n * <mxGraph.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraphHandler.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = state;\n\t\t\t\t\t\n\t\t\t\t\tif (model.isVertex(cells[i]) && state.shape != null && state.shape.boundingBox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = state.shape.boundingBox;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createPreviewShape\n * \n * Creates the shape used to draw the preview for the given bounds.\n */\nmxGraphHandler.prototype.createPreviewShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.previewColor);\n\tshape.isDashed = true;\n\t\n\tif (this.htmlPreview)\n\t{\n\t\tshape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tshape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t// event-transparency on the background area of the rectangle since\n\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\tshape.init(this.graph.getView().getOverlayPane());\n\t\tshape.pointerEvents = false;\n\t\t\n\t\t// Workaround for artifacts on iOS\n\t\tif (mxClient.IS_IOS)\n\t\t{\n\t\t\tshape.getSvgScreenOffset = function()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxGraphHandler.prototype.start = function(cell, x, y, cells)\n{\n\tthis.cell = cell;\n\tthis.first = mxUtils.convertPoint(this.graph.container, x, y);\n\tthis.cells = (cells != null) ? cells : this.getCells(this.cell);\n\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\tthis.pBounds = this.getPreviewBounds(this.cells);\n\tthis.allCells = new mxDictionary();\n\tthis.cloning = false;\n\tthis.cellCount = 0;\n\t\n\tfor (var i = 0; i < this.cells.length; i++)\n\t{\n\t\tthis.cellCount += this.addStates(this.cells[i], this.allCells);\n\t}\n\t\n\tif (this.guidesEnabled)\n\t{\n\t\tthis.guide = new mxGuide(this.graph, this.getGuideStates());\n\t\tvar parent = this.graph.model.getParent(cell);\n\t\tvar ignore = this.graph.model.getChildCount(parent) < 2;\n\t\t\n\t\t// Uses connected states as guides\n\t\tvar connected = new mxDictionary();\n\t\tvar opps = this.graph.getOpposites(this.graph.getEdges(this.cell), this.cell);\n\t\t\n\t\tfor (var i = 0; i < opps.length; i++)\n\t\t{\n\t\t\tvar state = this.graph.view.getState(opps[i]);\n\t\t\t\n\t\t\tif (state != null && !connected.get(state))\n\t\t\t{\n\t\t\t\tconnected.put(state, true);\n\t\t\t}\n\t\t}\n\n\t\tthis.guide.isStateIgnored = mxUtils.bind(this, function(state)\n\t\t{\n\t\t\tvar p = this.graph.model.getParent(state.cell);\n\t\t\t\n\t\t\treturn state.cell != null && ((!this.cloning &&\n\t\t\t\tthis.isCellMoving(state.cell)) ||\n\t\t\t\t(state.cell != (this.target || parent) && !ignore &&\n\t\t\t\t!connected.get(state) &&\n\t\t\t\t(this.target == null || this.graph.model.getChildCount(\n\t\t\t\tthis.target) >= 2) && p != (this.target || parent)));  \n\t\t});\n\t}\n};\n\n/**\n * Function: addStates\n * \n * Adds the states for the given cell recursively to the given dictionary.\n */\nmxGraphHandler.prototype.addStates = function(cell, dict)\n{\n\tvar state = this.graph.view.getState(cell);\n\tvar count = 0;\n\t\n\tif (state != null && dict.get(cell) == null)\n\t{\n\t\tdict.put(cell, state);\n\t\tcount++;\n\t\t\n\t\tvar childCount = this.graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tcount += this.addStates(this.graph.model.getChildAt(cell, i), dict);\n\t\t}\n\t}\n\t\n\treturn count;\n};\n\n/**\n * Function: isCellMoving\n * \n * Returns true if the given cell is currently being moved.\n */\nmxGraphHandler.prototype.isCellMoving = function(cell)\n{\n\treturn this.allCells.get(cell) != null;\n};\n\n/**\n * Function: useGuidesForEvent\n * \n * Returns true if the guides should be used for the given <mxMouseEvent>.\n * This implementation returns <mxGuide.isEnabledForEvent>.\n */\nmxGraphHandler.prototype.useGuidesForEvent = function(me)\n{\n\treturn (this.guide != null) ? this.guide.isEnabledForEvent(me.getEvent()) : true;\n};\n\n\n/**\n * Function: snap\n * \n * Snaps the given vector to the grid and returns the given mxPoint instance.\n */\nmxGraphHandler.prototype.snap = function(vector)\n{\n\tvar scale = (this.scaleGrid) ? this.graph.view.scale : 1;\n\t\n\tvector.x = this.graph.snap(vector.x / scale) * scale;\n\tvector.y = this.graph.snap(vector.y / scale) * scale;\n\t\n\treturn vector;\n};\n\n/**\n * Function: getDelta\n * \n * Returns an <mxPoint> that represents the vector for moving the cells\n * for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.getDelta = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\t\n\treturn new mxPoint(point.x - this.first.x - this.graph.panDx,\n\t\tpoint.y - this.first.y - this.graph.panDy);\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxGraphHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxGraphHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled vector. Allows for half steps in the raster so\n * numbers coming in should be rounded if no half steps are allowed (ie for non\n * aligned standard moving where pixel steps should be preferred).\n */\nmxGraphHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 100) / 100;\n};\n\n/**\n * Function: isValidDropTarget\n * \n * Returns true if the given cell is a valid drop target.\n */\nmxGraphHandler.prototype.isValidDropTarget = function(target)\n{\n\treturn this.graph.model.getParent(this.cell) != target;\n};\n\n/**\n * Function: checkPreview\n * \n * Updates the preview if cloning state has changed.\n */\nmxGraphHandler.prototype.checkPreview = function()\n{\n\tif (this.livePreviewActive && this.cloning)\n\t{\n\t\tthis.resetLivePreview();\n\t\tthis.livePreviewActive = false;\n\t}\n\telse if (this.maxLivePreview >= this.cellCount && !this.livePreviewActive && this.allowLivePreview)\n\t{\n\t\tif (!this.cloning || !this.livePreviewActive)\n\t\t{\n\t\t\tthis.livePreviewActive = true;\n\t\t\tthis.livePreviewUsed = true;\n\t\t}\n\t}\n\telse if (!this.livePreviewUsed && this.shape == null)\n\t{\n\t\tthis.shape = this.createPreviewShape(this.bounds);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting possible drop targets and updating the\n * preview.\n */\nmxGraphHandler.prototype.mouseMove = function(sender, me)\n{\n\tvar graph = this.graph;\n\n\tif (!me.isConsumed() && graph.isMouseDown && this.cell != null &&\n\t\tthis.first != null && this.bounds != null && !this.suspended)\n\t{\n\t\t// Stops moving if a multi touch event is received\n\t\tif (mxEvent.isMultiTouchEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.reset();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar delta = this.getDelta(me);\n\t\tvar tol = graph.tolerance;\n\n\t\tif (this.shape != null || this.livePreviewActive || Math.abs(delta.x) > tol || Math.abs(delta.y) > tol)\n\t\t{\n\t\t\t// Highlight is used for highlighting drop targets\n\t\t\tif (this.highlight == null)\n\t\t\t{\n\t\t\t\tthis.highlight = new mxCellHighlight(this.graph,\n\t\t\t\t\tmxConstants.DROP_TARGET_COLOR, 3);\n\t\t\t}\n\n\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\tvar gridEnabled = graph.isGridEnabledEvent(me.getEvent());\n\t\t\tvar cell = me.getCell();\n\t\t\tvar hideGuide = true;\n\t\t\tvar target = null;\n\t\t\tthis.cloning = clone;\n\t\t\t\n\t\t\tif (graph.isDropEnabled() && this.highlightEnabled)\n\t\t\t{\n\t\t\t\t// Contains a call to getCellAt to find the cell under the mouse\n\t\t\t\ttarget = graph.getDropTarget(this.cells, me.getEvent(), cell, clone);\n\t\t\t}\n\n\t\t\tvar state = graph.getView().getState(target);\n\t\t\tvar highlight = false;\n\t\t\t\n\t\t\tif (state != null && (clone || this.isValidDropTarget(target)))\n\t\t\t{\n\t\t\t    if (this.target != target)\n\t\t\t    {\n\t\t\t\t    this.target = target;\n\t\t\t\t    this.setHighlightColor(mxConstants.DROP_TARGET_COLOR);\n\t\t\t\t}\n\t\t\t    \n\t\t\t    highlight = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.target = null;\n\n\t\t\t\tif (this.connectOnDrop && cell != null && this.cells.length == 1 &&\n\t\t\t\t\tgraph.getModel().isVertex(cell) && graph.isCellConnectable(cell))\n\t\t\t\t{\n\t\t\t\t\tstate = graph.getView().getState(cell);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar error = graph.getEdgeValidationError(null, this.cell, cell);\n\t\t\t\t\t\tvar color = (error == null) ?\n\t\t\t\t\t\t\tmxConstants.VALID_COLOR :\n\t\t\t\t\t\t\tmxConstants.INVALID_CONNECT_TARGET_COLOR;\n\t\t\t\t\t\tthis.setHighlightColor(color);\n\t\t\t\t\t\thighlight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (state != null && highlight)\n\t\t\t{\n\t\t\t\tthis.highlight.highlight(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.highlight.hide();\n\t\t\t}\n\n\t\t\tif (this.guide != null && this.useGuidesForEvent(me))\n\t\t\t{\n\t\t\t\tdelta = this.guide.move(this.bounds, delta, gridEnabled, clone);\n\t\t\t\thideGuide = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta = this.graph.snapDelta(delta, this.bounds, !gridEnabled, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.guide != null && hideGuide)\n\t\t\t{\n\t\t\t\tthis.guide.hide();\n\t\t\t}\n\n\t\t\t// Constrained movement if shift key is pressed\n\t\t\tif (graph.isConstrainedEvent(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(delta.x) > Math.abs(delta.y))\n\t\t\t\t{\n\t\t\t\t\tdelta.y = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelta.x = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.checkPreview();\n\t\t\t\n\t\t\tif (this.currentDx != delta.x || this.currentDy != delta.y)\n\t\t\t{\n\t\t\t\tthis.currentDx = delta.x;\n\t\t\t\tthis.currentDy = delta.y;\n\t\t\t\tthis.updatePreview();\n\t\t\t}\n\t\t}\n\n\t\tthis.updateHint(me);\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_MOVE, me);\n\t\t\n\t\t// Cancels the bubbling of events to the container so\n\t\t// that the droptarget is not reset due to an mouseMove\n\t\t// fired on the container with no associated state.\n\t\tmxEvent.consume(me.getEvent());\n\t}\n\telse if ((this.isMoveEnabled() || this.isCloneEnabled()) && this.updateCursor && !me.isConsumed() &&\n\t\t\t(me.getState() != null || me.sourceState != null) && !graph.isMouseDown)\n\t{\n\t\tvar cursor = graph.getCursorForMouseEvent(me);\n\t\t\n\t\tif (cursor == null && graph.isEnabled() && graph.isCellMovable(me.getCell()))\n\t\t{\n\t\t\tif (graph.getModel().isEdge(me.getCell()))\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_EDGE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_VERTEX;\n\t\t\t}\n\t\t}\n\n\t\t// Sets the cursor on the original source state under the mouse\n\t\t// instead of the event source state which can be the parent\n\t\tif (cursor != null && me.sourceState != null)\n\t\t{\n\t\t\tme.sourceState.setCursor(cursor);\n\t\t}\n\t}\n};\n\n/**\n * Function: updatePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreview = function(remote)\n{\n\tif (this.livePreviewUsed && !remote)\n\t{\n\t\tif (this.cells != null)\n\t\t{\n\t\t\tthis.setHandlesVisibleForCells(this.graph.getSelectionCells(), false);\n\t\t\tthis.updateLivePreview(this.currentDx, this.currentDy);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.updatePreviewShape();\n\t}\n};\n\n/**\n * Function: updatePreviewShape\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreviewShape = function()\n{\n\tif (this.shape != null && this.pBounds != null)\n\t{\n\t\tthis.shape.bounds = new mxRectangle(Math.round(this.pBounds.x + this.currentDx),\n\t\t\t\tMath.round(this.pBounds.y + this.currentDy), this.pBounds.width, this.pBounds.height);\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updateLivePreview = function(dx, dy)\n{\n\tif (!this.suspended)\n\t{\n\t\tvar states = [];\n\t\t\n\t\tif (this.allCells != null)\n\t\t{\n\t\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t\t{\n\t\t\t\t// Checks if cell was removed\n\t\t\t\tif (this.graph.view.getState(state.cell) == null)\n\t\t\t\t{\n\t\t\t\t\tstate.destroy();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Saves current state\n\t\t\t\t\tvar tempState = state.clone();\n\t\t\t\t\tstates.push([state, tempState]);\n\t\t\n\t\t\t\t\t// Makes transparent for events to detect drop targets\n\t\t\t\t\tif (state.shape != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (state.shape.originalPointerEvents == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.shape.originalPointerEvents = state.shape.pointerEvents;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstate.shape.pointerEvents = false;\n\t\t\n\t\t\t\t\t\tif (state.text != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (state.text.originalPointerEvents == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.text.originalPointerEvents = state.text.pointerEvents;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tstate.text.pointerEvents = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\t// Temporarily changes position\n\t\t\t\t\tif (this.graph.model.isVertex(state.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.x += dx;\n\t\t\t\t\t\tstate.y += dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Draws the live preview\n\t\t\t\t\t\tif (!this.cloning)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Forces redraw of connected edges after all states\n\t\t\t\t\t\t\t// have been updated but avoids update of state\n\t\t\t\t\t\t\tstate.view.invalidate(state.cell);\n\t\t\t\t\t\t\tstate.invalid = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Hides folding icon\n\t\t\t\t\t\t\tif (state.control != null && state.control.node != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.control.node.style.visibility = 'hidden';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Resets the handler if everything was removed\n\t\tif (states.length == 0)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Redraws connected edges\n\t\t\tvar s = this.graph.view.scale;\n\t\t\t\n\t\t\tfor (var i = 0; i < states.length; i++)\n\t\t\t{\n\t\t\t\tvar state = states[i][0];\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isEdge(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\t\t\tvar points = [];\n\t\t\t\t\t\n\t\t\t\t\tif (geometry != null && geometry.points != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var j = 0; j < geometry.points.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (geometry.points[j] != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.push(new mxPoint(\n\t\t\t\t\t\t\t\t\tgeometry.points[j].x + dx / s,\n\t\t\t\t\t\t\t\t\tgeometry.points[j].y + dy / s));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar source = state.visibleSourceState;\n\t\t\t\t\tvar target = state.visibleTargetState;\n\t\t\t\t\tvar pts = states[i][1].absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\tif (source == null || !this.isCellMoving(source.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt0 = pts[0];\n\t\t\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(pt0.x + dx, pt0.y + dy), true);\n\t\t\t\t\t\tsource = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.updateFixedTerminalPoint(state, source, true,\n\t\t\t\t\t\t\tthis.graph.getConnectionConstraint(state, source, true));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (target == null || !this.isCellMoving(target.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ptn = pts[pts.length - 1];\n\t\t\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(ptn.x + dx, ptn.y + dy), false);\n\t\t\t\t\t\ttarget = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.updateFixedTerminalPoint(state, target, false,\n\t\t\t\t\t\t\tthis.graph.getConnectionConstraint(state, target, false));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstate.view.updatePoints(state, points, source, target);\n\t\t\t\t\tstate.view.updateFloatingTerminalPoints(state, source, target);\n\t\t\t\t\tstate.view.updateEdgeLabelOffset(state);\n\t\t\t\t\tstate.invalid = false;\n\t\n\t\t\t\t\t// Draws the live preview but avoids update of state\n\t\t\t\t\tif (!this.cloning)\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tthis.graph.view.validate();\n\t\t\tthis.redrawHandles(states);\n\t\t\tthis.resetPreviewStates(states);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the preview shape for the given states array.\n */\nmxGraphHandler.prototype.redrawHandles = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tvar handler = this.graph.selectionCellsHandler.getHandler(states[i][0].cell);\n\t\t\n\t\tif (handler != null)\n\t\t{\n\t\t\thandler.redraw(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetPreviewStates\n * \n * Resets the given preview states array.\n */\nmxGraphHandler.prototype.resetPreviewStates = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tstates[i][0].setState(states[i][1]);\n\t}\n};\n\n/**\n * Function: suspend\n * \n * Suspends the livew preview.\n */\nmxGraphHandler.prototype.suspend = function()\n{\n\tif (!this.suspended)\n\t{\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.updateLivePreview(0, 0);\n\t\t}\n\t\t\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.node.style.visibility = 'hidden';\n\t\t} \n\t\n\t\tif (this.guide != null)\n\t\t{\n\t\t\tthis.guide.setVisible(false);\n\t\t}\n\t\t\n\t\tthis.suspended = true;\n\t}\n};\n\n/**\n * Function: resume\n * \n * Suspends the livew preview.\n */\nmxGraphHandler.prototype.resume = function()\n{\n\tif (this.suspended)\n\t{\n\t\tthis.suspended = null;\n\t\t\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.livePreviewActive = true;\n\t\t}\n\t\t\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.node.style.visibility = 'visible';\n\t\t}\n\t\t\n\t\tif (this.guide != null)\n\t\t{\n\t\t\tthis.guide.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetLivePreview\n * \n * Resets the livew preview.\n */\nmxGraphHandler.prototype.resetLivePreview = function()\n{\n\tif (this.allCells != null)\n\t{\n\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t{\n\t\t\t// Restores event handling\n\t\t\tif (state.shape != null && state.shape.originalPointerEvents != null)\n\t\t\t{\n\t\t\t\tstate.shape.pointerEvents = state.shape.originalPointerEvents;\n\t\t\t\tstate.shape.originalPointerEvents = null;\n\t\t\t\t\n\t\t\t\t// Forces repaint even if not moved to update pointer events\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t\t\n\t\t\t\tif (state.text != null)\n\t\t\t\t{\n\t\t\t\t\tstate.text.pointerEvents = state.text.originalPointerEvents;\n\t\t\t\t\tstate.text.originalPointerEvents = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Shows folding icon\n\t\t\tif (state.control != null && state.control.node != null &&\n\t\t\t\tstate.control.node.style.visibility == 'hidden')\n\t\t\t{\n\t\t\t\tstate.control.node.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\t// Forces repaint of connected edges\n\t\t\tstate.view.invalidate(state.cell);\n\t\t}));\n\n\t\t// Repaints all invalid states\n\t\tthis.graph.view.validate();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.setHandlesVisibleForCells = function(cells, visible)\n{\n\tif (this.handlesVisible != visible)\n\t{\n\t\tthis.handlesVisible = visible;\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar cell = cells[i];\n\t\n\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(cell);\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\thandler.setHandlesVisible(visible);\n\t\t\t\t\n\t\t\t\tif (visible)\n\t\t\t\t{\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxGraphHandler.prototype.setHighlightColor = function(color)\n{\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.setHighlightColor(color);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the selection cells.\n */\nmxGraphHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed())\n\t{\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.resetLivePreview();\n\t\t}\n\t\t\n\t\tif (this.cell != null && this.first != null && (this.shape != null || this.livePreviewUsed) &&\n\t\t\tthis.currentDx != null && this.currentDy != null)\n\t\t{\n\t\t\tvar graph = this.graph;\n\t\t\tvar cell = me.getCell();\n\t\t\t\n\t\t\tif (this.connectOnDrop && this.target == null && cell != null && graph.getModel().isVertex(cell) &&\n\t\t\t\tgraph.isCellConnectable(cell) && graph.isEdgeValid(null, this.cell, cell))\n\t\t\t{\n\t\t\t\tgraph.connectionHandler.connect(this.cell, cell, me.getEvent());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\t\tvar scale = graph.getView().scale;\n\t\t\t\tvar dx = this.roundLength(this.currentDx / scale);\n\t\t\t\tvar dy = this.roundLength(this.currentDy / scale);\n\t\t\t\tvar target = this.target;\n\t\t\t\t\n\t\t\t\tif (graph.isSplitEnabled() && graph.isSplitTarget(target, this.cells, me.getEvent()))\n\t\t\t\t{\n\t\t\t\t\tgraph.splitEdge(target, this.cells, null, dx, dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.moveCells(this.cells, dx, dy, clone, this.target, me.getEvent());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSelectEnabled() && this.delayedSelection && this.cell != null)\n\t\t{\n\t\t\tthis.selectDelayed(me);\n\t\t}\n\t}\n\n\t// Consumes the event if a cell was initially clicked\n\tif (this.cellWasClicked)\n\t{\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_UP, me);\n\t}\n\n\tthis.reset();\n};\n\n/**\n * Function: selectDelayed\n * \n * Implements the delayed selection for the given mouse event.\n */\nmxGraphHandler.prototype.selectDelayed = function(me)\n{\n\tif (!this.graph.isCellSelected(this.cell) || !this.graph.popupMenuHandler.isPopupTrigger(me))\n\t{\n\t\tthis.graph.selectCellForEvent(this.cell, me.getEvent());\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.reset = function()\n{\n\tif (this.livePreviewUsed)\n\t{\n\t\tthis.resetLivePreview();\n\t\tthis.setHandlesVisibleForCells(this.graph.getSelectionCells(), true);\n\t}\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n\n\tthis.delayedSelection = false;\n\tthis.livePreviewActive = null;\n\tthis.livePreviewUsed = null;\n\tthis.cellWasClicked = false;\n\tthis.suspended = null;\n\tthis.currentDx = null;\n\tthis.currentDy = null;\n\tthis.cellCount = null;\n\tthis.cloning = false;\n\tthis.allCells = null;\n\tthis.pBounds = null;\n\tthis.guides = null;\n\tthis.target = null;\n\tthis.first = null;\n\tthis.cells = null;\n\tthis.cell = null;\n};\n\n/**\n * Function: shouldRemoveCellsFromParent\n * \n * Returns true if the given cells should be removed from the parent for the specified\n * mousereleased event.\n */\nmxGraphHandler.prototype.shouldRemoveCellsFromParent = function(parent, cells, evt)\n{\n\tif (this.graph.getModel().isVertex(parent))\n\t{\n\t\tvar pState = this.graph.getView().getState(parent);\n\t\t\n\t\tif (pState != null)\n\t\t{\n\t\t\tvar pt = mxUtils.convertPoint(this.graph.container,\n\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(pState.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, cx);\n\t\t\t}\n\t\t\n\t\t\treturn !mxUtils.contains(pState, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: moveCells\n * \n * Moves the given cells by the specified amount.\n */\nmxGraphHandler.prototype.moveCells = function(cells, dx, dy, clone, target, evt)\n{\n\tif (clone)\n\t{\n\t\tcells = this.graph.getCloneableCells(cells);\n\t}\n\t\n\t// Removes cells from parent\n\tvar parent = this.graph.getModel().getParent(this.cell);\n\t\n\tif (target == null && this.isRemoveCellsFromParent() &&\n\t\tthis.shouldRemoveCellsFromParent(parent, cells, evt))\n\t{\n\t\ttarget = this.graph.getDefaultParent();\n\t}\n\t\n\t// Cloning into locked cells is not allowed\n\tclone = clone && !this.graph.isCellLocked(target || this.graph.getDefaultParent());\n\n\tthis.graph.getModel().beginUpdate();\n\ttry\n\t{\n\t\tvar parents = [];\n\t\t\n\t\t// Removes parent if all child cells are removed\n\t\tif (!clone && target != null && this.removeEmptyParents)\n\t\t{\n\t\t\t// Collects all non-selected parents\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Recurse up the cell hierarchy\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar par = this.graph.model.getParent(cells[i]);\n\n\t\t\t\tif (par != null && !dict.get(par))\n\t\t\t\t{\n\t\t\t\t\tdict.put(par, true);\n\t\t\t\t\tparents.push(par);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Passes all selected cells in order to correctly clone or move into\n\t\t// the target cell. The method checks for each cell if its movable.\n\t\tcells = this.graph.moveCells(cells, dx, dy, clone, target, evt);\n\n\t\t// Removes parent if all child cells are removed\n\t\tvar temp = [];\n\t\t\n\t\tfor (var i = 0; i < parents.length; i++)\n\t\t{\n\t\t\tif (this.shouldRemoveParent(parents[i]))\n\t\t\t{\n\t\t\t\ttemp.push(parents[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.graph.removeCells(temp, false);\n\t}\n\tfinally\n\t{\n\t\tthis.graph.getModel().endUpdate();\n\t}\n\n\t// Selects the new cells if cells have been cloned\n\tif (clone)\n\t{\n\t\tthis.graph.setSelectionCells(cells);\n\t}\n\n\tif (this.isSelectEnabled() && this.scrollOnMove)\n\t{\n\t\tthis.graph.scrollCellToVisible(cells[0]);\n\t}\n};\n\n/**\n * Function: shouldRemoveParent\n * \n * Returns true if the given parent should be removed after removal of child cells.\n */\nmxGraphHandler.prototype.shouldRemoveParent = function(parent)\n{\n\tvar state = this.graph.view.getState(parent);\n\t\n\treturn state != null && (this.graph.model.isEdge(state.cell) || this.graph.model.isVertex(state.cell)) &&\n\t\tthis.graph.isCellDeletable(state.cell) && this.graph.model.getChildCount(state.cell) == 0 &&\n\t\tthis.graph.isTransparentState(state);\n};\n\n/**\n * Function: destroyShapes\n * \n * Destroy the preview and highlight shapes.\n */\nmxGraphHandler.prototype.destroyShapes = function()\n{\n\t// Destroys the preview dashed rectangle\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.guide != null)\n\t{\n\t\tthis.guide.destroy();\n\t\tthis.guide = null;\n\t}\n\t\n\t// Destroys the drop target highlight\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.destroy();\n\t\tthis.highlight = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxGraphHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.panHandler);\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n\t\n\tmxEvent.removeListener(document, 'keydown', this.keyHandler);\n\tmxEvent.removeListener(document, 'keyup', this.keyHandler);\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n};\n\n__mxOutput.mxGraphHandler = typeof mxGraphHandler !== 'undefined' ? mxGraphHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningHandler\n * \n * Event handler that pans and creates popupmenus. To use the left\n * mousebutton for panning without interfering with cell moving and\n * resizing, use <isUseLeftButton> and <isIgnoreCell>. For grid size\n * steps while panning, use <useGrid>. This handler is built-into\n * <mxGraph.panningHandler> and enabled using <mxGraph.setPanning>.\n * \n * Constructor: mxPanningHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>\n * and pans the graph.\n *\n * Event: mxEvent.PAN_START\n *\n * Fires when the panning handler changes its <active> state to true. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN\n *\n * Fires while handle is processing events. The <code>event</code> property contains\n * the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN_END\n *\n * Fires when the panning handler changes its <active> state to false. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n */\nfunction mxPanningHandler(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force panning event\n\t\tthis.forcePanningHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForcePanningEvent(me))\n\t\t\t{\n\t\t\t\tthis.start(me);\n\t\t\t\tthis.active = true;\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forcePanningHandler);\n\t\t\n\t\t// Handles pinch gestures\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.isPinchEnabled())\n\t\t\t{\n\t\t\t\tvar evt = eo.getProperty('event');\n\t\t\t\t\n\t\t\t\tif (!mxEvent.isConsumed(evt) && evt.type == 'gesturestart')\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\t\t// Forces start of panning when pinch gesture starts\n\t\t\t\t\tif (!this.active && this.mouseDownEvent != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.start(this.mouseDownEvent);\n\t\t\t\t\t\tthis.mouseDownEvent = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (evt.type == 'gestureend' && this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.zoomGraph(evt);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.reset();\n\t    \t}\n\t\t});\n\t\t\n\t\t// Stops scrolling on every mouseup anywhere in the document\n\t\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPanningHandler.prototype = new mxEventSource();\nmxPanningHandler.prototype.constructor = mxPanningHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPanningHandler.prototype.graph = null;\n\n/**\n * Variable: useLeftButtonForPanning\n * \n * Specifies if panning should be active for the left mouse button.\n * Setting this to true may conflict with <mxRubberband>. Default is false.\n */\nmxPanningHandler.prototype.useLeftButtonForPanning = false;\n\n/**\n * Variable: usePopupTrigger\n * \n * Specifies if <mxEvent.isPopupTrigger> should also be used for panning.\n */\nmxPanningHandler.prototype.usePopupTrigger = true;\n\n/**\n * Variable: ignoreCell\n * \n * Specifies if panning should be active even if there is a cell under the\n * mousepointer. Default is false.\n */\nmxPanningHandler.prototype.ignoreCell = false;\n\n/**\n * Variable: previewEnabled\n * \n * Specifies if the panning should be previewed. Default is true.\n */\nmxPanningHandler.prototype.previewEnabled = true;\n\n/**\n * Variable: useGrid\n * \n * Specifies if the panning steps should be aligned to the grid size.\n * Default is false.\n */\nmxPanningHandler.prototype.useGrid = false;\n\n/**\n * Variable: panningEnabled\n * \n * Specifies if panning should be enabled. Default is true.\n */\nmxPanningHandler.prototype.panningEnabled = true;\n\n/**\n * Variable: pinchEnabled\n * \n * Specifies if pinch gestures should be handled as zoom. Default is true.\n */\nmxPanningHandler.prototype.pinchEnabled = true;\n\n/**\n * Variable: maxScale\n * \n * Specifies the maximum scale. Default is 8.\n */\nmxPanningHandler.prototype.maxScale = 8;\n\n/**\n * Variable: minScale\n * \n * Specifies the minimum scale. Default is 0.01.\n */\nmxPanningHandler.prototype.minScale = 0.01;\n\n/**\n * Variable: dx\n * \n * Holds the current horizontal offset.\n */\nmxPanningHandler.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Holds the current vertical offset.\n */\nmxPanningHandler.prototype.dy = null;\n\n/**\n * Variable: startX\n * \n * Holds the x-coordinate of the start point.\n */\nmxPanningHandler.prototype.startX = 0;\n\n/**\n * Variable: startY\n * \n * Holds the y-coordinate of the start point.\n */\nmxPanningHandler.prototype.startY = 0;\n\n/**\n * Function: isActive\n * \n * Returns true if the handler is currently active.\n */\nmxPanningHandler.prototype.isActive = function()\n{\n\treturn this.active || this.initialScale != null;\n};\n\n/**\n * Function: isPanningEnabled\n * \n * Returns <panningEnabled>.\n */\nmxPanningHandler.prototype.isPanningEnabled = function()\n{\n\treturn this.panningEnabled;\n};\n\n/**\n * Function: setPanningEnabled\n * \n * Sets <panningEnabled>.\n */\nmxPanningHandler.prototype.setPanningEnabled = function(value)\n{\n\tthis.panningEnabled = value;\n};\n\n/**\n * Function: isPinchEnabled\n * \n * Returns <pinchEnabled>.\n */\nmxPanningHandler.prototype.isPinchEnabled = function()\n{\n\treturn this.pinchEnabled;\n};\n\n/**\n * Function: setPinchEnabled\n * \n * Sets <pinchEnabled>.\n */\nmxPanningHandler.prototype.setPinchEnabled = function(value)\n{\n\tthis.pinchEnabled = value;\n};\n\n/**\n * Function: isPanningTrigger\n * \n * Returns true if the given event is a panning trigger for the optional\n * given cell. This returns true if control-shift is pressed or if\n * <usePopupTrigger> is true and the event is a popup trigger.\n */\nmxPanningHandler.prototype.isPanningTrigger = function(me)\n{\n\tvar evt = me.getEvent();\n\t\n\treturn (this.useLeftButtonForPanning && me.getState() == null &&\n\t\t\tmxEvent.isLeftMouseButton(evt)) || (mxEvent.isControlDown(evt) &&\n\t\t\tmxEvent.isShiftDown(evt)) || (this.usePopupTrigger && mxEvent.isPopupTrigger(evt));\n};\n\n/**\n * Function: isForcePanningEvent\n * \n * Returns true if the given <mxMouseEvent> should start panning. This\n * implementation always returns true if <ignoreCell> is true or for\n * multi touch events.\n */\nmxPanningHandler.prototype.isForcePanningEvent = function(me)\n{\n\treturn this.ignoreCell || mxEvent.isMultiTouchEvent(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPanningHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownEvent = me;\n\t\n\tif (!me.isConsumed() && this.isPanningEnabled() && !this.active && this.isPanningTrigger(me))\n\t{\n\t\tthis.start(me);\n\t\tthis.consumePanningTrigger(me);\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts panning at the given event.\n */\nmxPanningHandler.prototype.start = function(me)\n{\n\tthis.dx0 = -this.graph.container.scrollLeft;\n\tthis.dy0 = -this.graph.container.scrollTop;\n\n\t// Stores the location of the trigger event\n\tthis.startX = me.getX();\n\tthis.startY = me.getY();\n\tthis.dx = null;\n\tthis.dy = null;\n\t\n\tthis.panningTrigger = true;\n};\n\n/**\n * Function: consumePanningTrigger\n * \n * Consumes the given <mxMouseEvent> if it was a panning trigger in\n * <mouseDown>. The default is to invoke <mxMouseEvent.consume>. Note that this\n * will block any further event processing. If you haven't disabled built-in\n * context menus and require immediate selection of the cell on mouseDown in\n * Safari and/or on the Mac, then use the following code:\n * \n * (code)\n * mxPanningHandler.prototype.consumePanningTrigger = function(me)\n * {\n *   if (me.evt.preventDefault)\n *   {\n *     me.evt.preventDefault();\n *   }\n *   \n *   // Stops event processing in IE\n *   me.evt.returnValue = false;\n *   \n *   // Sets local consumed state\n *   if (!mxClient.IS_SF && !mxClient.IS_MAC)\n *   {\n *     me.consumed = true;\n *   }\n * };\n * (end)\n */\nmxPanningHandler.prototype.consumePanningTrigger = function(me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPanningHandler.prototype.mouseMove = function(sender, me)\n{\n\tthis.dx = me.getX() - this.startX;\n\tthis.dy = me.getY() - this.startY;\n\t\n\tif (this.active)\n\t{\n\t\tif (this.previewEnabled)\n\t\t{\n\t\t\t// Applies the grid to the panning steps\n\t\t\tif (this.useGrid)\n\t\t\t{\n\t\t\t\tthis.dx = this.graph.snap(this.dx);\n\t\t\t\tthis.dy = this.graph.snap(this.dy);\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN, 'event', me));\n\t}\n\telse if (this.panningTrigger)\n\t{\n\t\tvar tmp = this.active;\n\n\t\t// Panning is activated only if the mouse is moved\n\t\t// beyond the graph tolerance\n\t\tthis.active = Math.abs(this.dx) > this.graph.tolerance || Math.abs(this.dy) > this.graph.tolerance;\n\n\t\tif (!tmp && this.active)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t}\n\t}\n\t\n\tif (this.active || this.panningTrigger)\n\t{\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tif (this.dx != null && this.dy != null)\n\t\t{\n\t\t\t// Ignores if scrollbars have been used for panning\n\t\t\tif (!this.graph.useScrollbarsForPanning || !mxUtils.hasScrollbars(this.graph.container))\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar t = this.graph.getView().translate;\n\t\t\t\tthis.graph.panGraph(0, 0);\n\t\t\t\tthis.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);\n\t\t\t}\n\t\t\t\n\t\t\tme.consume();\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_END, 'event', me));\n\t}\n\t\n\tthis.reset();\n};\n\n/**\n * Function: zoomGraph\n * \n * Zooms the graph to the given value and consumed the event if needed.\n */\nmxPanningHandler.prototype.zoomGraph = function(evt)\n{\n\tvar value = Math.round(this.initialScale * evt.scale * 100) / 100;\n\t\n\tif (this.minScale != null)\n\t{\n\t\tvalue = Math.max(this.minScale, value);\n\t}\n\t\n\tif (this.maxScale != null)\n\t{\n\t\tvalue = Math.min(this.maxScale, value);\n\t}\n\n\tif (this.graph.view.scale != value)\n\t{\n\t\tthis.graph.zoomTo(value);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.reset = function()\n{\n\tthis.panningTrigger = false;\n\tthis.mouseDownEvent = null;\n\tthis.active = false;\n\tthis.dx = null;\n\tthis.dy = null;\n};\n\n/**\n * Function: panGraph\n * \n * Pans <graph> by the given amount.\n */\nmxPanningHandler.prototype.panGraph = function(dx, dy)\n{\n\tthis.graph.getView().setTranslate(dx, dy);\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPanningHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.forcePanningHandler);\n\tthis.graph.removeListener(this.gestureHandler);\n\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n};\n\n__mxOutput.mxPanningHandler = typeof mxPanningHandler !== 'undefined' ? mxPanningHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenuHandler\n * \n * Event handler that creates popupmenus.\n * \n * Constructor: mxPopupMenuHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>.\n */\nfunction mxPopupMenuHandler(graph, factoryMethod)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.graph.addMouseListener(this);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxPopupMenu.\n */\nmxPopupMenuHandler.prototype = new mxPopupMenu();\nmxPopupMenuHandler.prototype.constructor = mxPopupMenuHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPopupMenuHandler.prototype.graph = null;\n\n/**\n * Variable: selectOnPopup\n * \n * Specifies if cells should be selected if a popupmenu is displayed for\n * them. Default is true.\n */\nmxPopupMenuHandler.prototype.selectOnPopup = true;\n\n/**\n * Variable: clearSelectionOnBackground\n * \n * Specifies if cells should be deselected if a popupmenu is displayed for\n * the diagram background. Default is true.\n */\nmxPopupMenuHandler.prototype.clearSelectionOnBackground = true;\n\n/**\n * Variable: triggerX\n * \n * X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerX = null;\n\n/**\n * Variable: triggerY\n * \n * Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerY = null;\n\n/**\n * Variable: screenX\n * \n * Screen X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenX = null;\n\n/**\n * Variable: screenY\n * \n * Screen Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenY = null;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenuHandler.prototype.init = function()\n{\n\t// Supercall\n\tmxPopupMenu.prototype.init.apply(this);\n\n\t// Hides the tooltip if the mouse is over\n\t// the context menu\n\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.tooltipHandler.hide();\n\t}));\n};\n\n/**\n * Function: isSelectOnPopup\n * \n * Hook for returning if a cell should be selected for a given <mxMouseEvent>.\n * This implementation returns <selectOnPopup>.\n */\nmxPopupMenuHandler.prototype.isSelectOnPopup = function(me)\n{\n\treturn this.selectOnPopup;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPopupMenuHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.isEnabled() && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\t// Hides the popupmenu if is is being displayed\n\t\tthis.hideMenu();\n\t\tthis.triggerX = me.getGraphX();\n\t\tthis.triggerY = me.getGraphY();\n\t\tthis.screenX = mxEvent.getMainEvent(me.getEvent()).screenX;\n\t\tthis.screenY = mxEvent.getMainEvent(me.getEvent()).screenY;\n\t\tthis.popupTrigger = this.isPopupTrigger(me);\n\t\tthis.inTolerance = true;\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPopupMenuHandler.prototype.mouseMove = function(sender, me)\n{\n\t// Popup trigger may change on mouseUp so ignore it\n\tif (this.inTolerance && this.screenX != null && this.screenY != null)\n\t{\n\t\tif (Math.abs(mxEvent.getMainEvent(me.getEvent()).screenX - this.screenX) > this.graph.tolerance ||\n\t\t\tMath.abs(mxEvent.getMainEvent(me.getEvent()).screenY - this.screenY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPopupMenuHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.popupTrigger && this.inTolerance && this.triggerX != null && this.triggerY != null)\n\t{\n\t\tvar cell = this.getCellForPopupEvent(me);\n\n\t\t// Selects the cell for which the context menu is being displayed\n\t\tif (this.graph.isEnabled() && this.isSelectOnPopup(me) &&\n\t\t\tcell != null && !this.graph.isCellSelected(cell))\n\t\t{\n\t\t\tthis.graph.setSelectionCell(cell);\n\t\t}\n\t\telse if (this.clearSelectionOnBackground && cell == null)\n\t\t{\n\t\t\tthis.graph.clearSelection();\n\t\t}\n\t\t\n\t\t// Hides the tooltip if there is one\n\t\tthis.graph.tooltipHandler.hide();\n\n\t\t// Menu is shifted by 1 pixel so that the mouse up event\n\t\t// is routed via the underlying shape instead of the DIV\n\t\tvar origin = mxUtils.getScrollOrigin();\n\t\tthis.popup(me.getX() + origin.x + 1, me.getY() + origin.y + 1, cell, me.getEvent());\n\t\tme.consume();\n\t}\n\t\n\tthis.popupTrigger = false;\n\tthis.inTolerance = false;\n};\n\n/**\n * Function: getCellForPopupEvent\n * \n * Hook to return the cell for the mouse up popup trigger handling.\n */\nmxPopupMenuHandler.prototype.getCellForPopupEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenuHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.gestureHandler);\n\t\n\t// Supercall\n\tmxPopupMenu.prototype.destroy.apply(this);\n};\n\n__mxOutput.mxPopupMenuHandler = typeof mxPopupMenuHandler !== 'undefined' ? mxPopupMenuHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellMarker\n * \n * A helper class to process mouse locations and highlight cells.\n * \n * Helper class to highlight cells. To add a cell marker to an existing graph\n * for highlighting all cells, the following code is used:\n * \n * (code)\n * var marker = new mxCellMarker(graph);\n * graph.addMouseListener({\n *   mouseDown: function() {},\n *   mouseMove: function(sender, me)\n *   {\n *     marker.process(me);\n *   },\n *   mouseUp: function() {}\n * });\n * (end)\n *\n * Event: mxEvent.MARK\n * \n * Fires after a cell has been marked or unmarked. The <code>state</code>\n * property contains the marked <mxCellState> or null if no state is marked.\n * \n * Constructor: mxCellMarker\n * \n * Constructs a new cell marker.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * validColor - Optional marker color for valid states. Default is\n * <mxConstants.DEFAULT_VALID_COLOR>.\n * invalidColor - Optional marker color for invalid states. Default is\n * <mxConstants.DEFAULT_INVALID_COLOR>.\n * hotspot - Portion of the width and hight where a state intersects a\n * given coordinate pair. A value of 0 means always highlight. Default is\n * <mxConstants.DEFAULT_HOTSPOT>.\n */\nfunction mxCellMarker(graph, validColor, invalidColor, hotspot)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.validColor = (validColor != null) ? validColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.invalidColor = (invalidColor != null) ? invalidColor : mxConstants.DEFAULT_INVALID_COLOR;\n\t\tthis.hotspot = (hotspot != null) ? hotspot : mxConstants.DEFAULT_HOTSPOT;\n\t\t\n\t\tthis.highlight = new mxCellHighlight(graph);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxCellMarker, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellMarker.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if the marker is enabled. Default is true.\n */\nmxCellMarker.prototype.enabled = true;\n\n/**\n * Variable: hotspot\n * \n * Specifies the portion of the width and height that should trigger\n * a highlight. The area around the center of the cell to be marked is used\n * as the hotspot. Possible values are between 0 and 1. Default is\n * mxConstants.DEFAULT_HOTSPOT.\n */\nmxCellMarker.prototype.hotspot = mxConstants.DEFAULT_HOTSPOT; \n\n/**\n * Variable: hotspotEnabled\n * \n * Specifies if the hotspot is enabled. Default is false.\n */\nmxCellMarker.prototype.hotspotEnabled = false;\n\n/**\n * Variable: validColor\n * \n * Holds the valid marker color.\n */\nmxCellMarker.prototype.validColor = null;\n\n/**\n * Variable: invalidColor\n * \n * Holds the invalid marker color.\n */\nmxCellMarker.prototype.invalidColor = null;\n\n/**\n * Variable: currentColor\n * \n * Holds the current marker color.\n */\nmxCellMarker.prototype.currentColor = null;\n\n/**\n * Variable: validState\n * \n * Holds the marked <mxCellState> if it is valid.\n */\nmxCellMarker.prototype.validState = null; \n\n/**\n * Variable: markedState\n * \n * Holds the marked <mxCellState>.\n */\nmxCellMarker.prototype.markedState = null;\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxCellMarker.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxCellMarker.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setHotspot\n * \n * Sets the <hotspot>.\n */\nmxCellMarker.prototype.setHotspot = function(hotspot)\n{\n\tthis.hotspot = hotspot;\n};\n\n/**\n * Function: getHotspot\n * \n * Returns the <hotspot>.\n */\nmxCellMarker.prototype.getHotspot = function()\n{\n\treturn this.hotspot;\n};\n\n/**\n * Function: setHotspotEnabled\n * \n * Specifies whether the hotspot should be used in <intersects>.\n */\nmxCellMarker.prototype.setHotspotEnabled = function(enabled)\n{\n\tthis.hotspotEnabled = enabled;\n};\n\n/**\n * Function: isHotspotEnabled\n * \n * Returns true if hotspot is used in <intersects>.\n */\nmxCellMarker.prototype.isHotspotEnabled = function()\n{\n\treturn this.hotspotEnabled;\n};\n\n/**\n * Function: hasValidState\n * \n * Returns true if <validState> is not null.\n */\nmxCellMarker.prototype.hasValidState = function()\n{\n\treturn this.validState != null;\n};\n\n/**\n * Function: getValidState\n * \n * Returns the <validState>.\n */\nmxCellMarker.prototype.getValidState = function()\n{\n\treturn this.validState;\n};\n\n/**\n * Function: getMarkedState\n * \n * Returns the <markedState>.\n */\nmxCellMarker.prototype.getMarkedState = function()\n{\n\treturn this.markedState;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the cell marker.\n */\nmxCellMarker.prototype.reset = function()\n{\n\tthis.validState = null;\n\t\n\tif (this.markedState != null)\n\t{\n\t\tthis.markedState = null;\n\t\tthis.unmark();\n\t}\n};\n\n/**\n * Function: process\n * \n * Processes the given event and cell and marks the state returned by\n * <getState> with the color returned by <getMarkerColor>. If the\n * markerColor is not null, then the state is stored in <markedState>. If\n * <isValidState> returns true, then the state is stored in <validState>\n * regardless of the marker color. The state is returned regardless of the\n * marker color and valid state. \n */\nmxCellMarker.prototype.process = function(me)\n{\n\tvar state = null;\n\t\n\tif (this.isEnabled())\n\t{\n\t\tstate = this.getState(me);\n\t\tthis.setCurrentState(state, me);\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: setCurrentState\n * \n * Sets and marks the current valid state.\n */\nmxCellMarker.prototype.setCurrentState = function(state, me, color)\n{\n\tvar isValid = (state != null) ? this.isValidState(state) : false;\n\tcolor = (color != null) ? color : this.getMarkerColor(me.getEvent(), state, isValid);\n\t\n\tif (isValid)\n\t{\n\t\tthis.validState = state;\n\t}\n\telse\n\t{\n\t\tthis.validState = null;\n\t}\n\t\n\tif (state != this.markedState || color != this.currentColor)\n\t{\n\t\tthis.currentColor = color;\n\t\t\n\t\tif (state != null && this.currentColor != null)\n\t\t{\n\t\t\tthis.markedState = state;\n\t\t\tthis.mark();\t\t\n\t\t}\n\t\telse if (this.markedState != null)\n\t\t{\n\t\t\tthis.markedState = null;\n\t\t\tthis.unmark();\n\t\t}\n\t}\n};\n\n/**\n * Function: markCell\n * \n * Marks the given cell using the given color, or <validColor> if no color is specified.\n */\nmxCellMarker.prototype.markCell = function(cell, color)\n{\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tthis.currentColor = (color != null) ? color : this.validColor;\n\t\tthis.markedState = state;\n\t\tthis.mark();\n\t}\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellMarker.prototype.mark = function()\n{\n\tthis.highlight.setHighlightColor(this.currentColor);\n\tthis.highlight.highlight(this.markedState);\n\tthis.fireEvent(new mxEventObject(mxEvent.MARK, 'state', this.markedState));\n};\n\n/**\n * Function: unmark\n * \n * Hides the marker and fires a <mark> event.\n */\nmxCellMarker.prototype.unmark = function()\n{\n\tthis.mark();\n};\n\n/**\n * Function: isValidState\n * \n * Returns true if the given <mxCellState> is a valid state. If this\n * returns true, then the state is stored in <validState>. The return value\n * of this method is used as the argument for <getMarkerColor>.\n */\nmxCellMarker.prototype.isValidState = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMarkerColor\n * \n * Returns the valid- or invalidColor depending on the value of isValid.\n * The given <mxCellState> is ignored by this implementation.\n */\nmxCellMarker.prototype.getMarkerColor = function(evt, state, isValid)\n{\n\treturn (isValid) ? this.validColor : this.invalidColor;\n};\n\n/**\n * Function: getState\n * \n * Uses <getCell>, <getStateToMark> and <intersects> to return the\n * <mxCellState> for the given <mxMouseEvent>.\n */\nmxCellMarker.prototype.getState = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar cell = this.getCell(me);\n\tvar state = this.getStateToMark(view.getState(cell));\n\n\treturn (state != null && this.intersects(state, me)) ? state : null;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> for the given event and cell. This returns the\n * given cell.\n */\nmxCellMarker.prototype.getCell = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: getStateToMark\n * \n * Returns the <mxCellState> to be marked for the given <mxCellState> under\n * the mouse. This returns the given state.\n */\nmxCellMarker.prototype.getStateToMark = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given coordinate pair intersects the given state.\n * This returns true if the <hotspot> is 0 or the coordinates are inside\n * the hotspot for the given cell state.\n */\nmxCellMarker.prototype.intersects = function(state, me)\n{\n\tif (this.hotspotEnabled)\n\t{\n\t\treturn mxUtils.intersectsHotspot(state, me.getGraphX(), me.getGraphY(),\n\t\t\tthis.hotspot, mxConstants.MIN_HOTSPOT_SIZE,\n\t\t\tmxConstants.MAX_HOTSPOT_SIZE);\n\t}\n\t\n\treturn true;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellMarker.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getModel().removeListener(this.resetHandler);\n\tthis.highlight.destroy();\n};\n\n__mxOutput.mxCellMarker = typeof mxCellMarker !== 'undefined' ? mxCellMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSelectionCellsHandler\n * \n * An event handler that manages cell handlers and invokes their mouse event\n * processing functions.\n * \n * Group: Events\n * \n * Event: mxEvent.ADD\n * \n * Fires if a cell has been added to the selection. The <code>state</code>\n * property contains the <mxCellState> that has been added.\n * \n * Event: mxEvent.REMOVE\n * \n * Fires if a cell has been remove from the selection. The <code>state</code>\n * property contains the <mxCellState> that has been removed.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxSelectionCellsHandler(graph)\n{\n\tmxEventSource.call(this);\n\t\n\tthis.graph = graph;\n\tthis.handlers = new mxDictionary();\n\tthis.graph.addMouseListener(this);\n\t\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.refresh();\n\t\t}\n\t});\n\t\n\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.refreshHandler);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxSelectionCellsHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSelectionCellsHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxSelectionCellsHandler.prototype.enabled = true;\n\n/**\n * Variable: refreshHandler\n * \n * Keeps a reference to an event listener for later removal.\n */\nmxSelectionCellsHandler.prototype.refreshHandler = null;\n\n/**\n * Variable: maxHandlers\n * \n * Defines the maximum number of handlers to paint individually. Default is 100.\n */\nmxSelectionCellsHandler.prototype.maxHandlers = 100;\n\n/**\n * Variable: handlers\n * \n * <mxDictionary> that maps from cells to handlers.\n */\nmxSelectionCellsHandler.prototype.handlers = null;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxSelectionCellsHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxSelectionCellsHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getHandler\n * \n * Returns the handler for the given cell.\n */\nmxSelectionCellsHandler.prototype.getHandler = function(cell)\n{\n\treturn this.handlers.get(cell);\n};\n\n/**\n * Function: reset\n * \n * Resets all handlers.\n */\nmxSelectionCellsHandler.prototype.reset = function()\n{\n\tthis.handlers.visit(function(key, handler)\n\t{\n\t\thandler.reset.apply(handler);\n\t});\n};\n\n/**\n * Function: refresh\n * \n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.refresh = function()\n{\n\t// Removes all existing handlers\n\tvar oldHandlers = this.handlers;\n\tthis.handlers = new mxDictionary();\n\t\n\t// Creates handles for all selection cells\n\tvar tmp = this.graph.getSelectionCells();\n\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = oldHandlers.remove(tmp[i]);\n\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tif (handler.state != state)\n\t\t\t\t{\n\t\t\t\t\thandler.destroy();\n\t\t\t\t\thandler = null;\n\t\t\t\t}\n\t\t\t\telse if (!this.isHandlerActive(handler))\n\t\t\t\t{\n\t\t\t\t\tif (handler.refresh != null)\n\t\t\t\t\t{\n\t\t\t\t\t\thandler.refresh();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (handler == null)\n\t\t\t{\n\t\t\t\thandler = this.graph.createHandler(state);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'state', state));\n\t\t\t}\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Destroys all unused handlers\n\toldHandlers.visit(mxUtils.bind(this, function(key, handler)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE, 'state', handler.state));\n\t\thandler.destroy();\n\t}));\n};\n\n/**\n * Function: isHandlerActive\n * \n * Returns true if the given handler is active and should not be redrawn.\n */\nmxSelectionCellsHandler.prototype.isHandlerActive = function(handler)\n{\n\treturn handler.index != null;\n};\n\n/**\n * Function: updateHandler\n * \n * Updates the handler for the given shape if one exists.\n */\nmxSelectionCellsHandler.prototype.updateHandler = function(state)\n{\n\tvar handler = this.handlers.remove(state.cell);\n\t\n\tif (handler != null)\n\t{\n\t\t// Transfers the current state to the new handler\n\t\tvar index = handler.index;\n\t\tvar x = handler.startX;\n\t\tvar y = handler.startY;\n\t\t\n\t\thandler.destroy();\n\t\thandler = this.graph.createHandler(state);\n\n\t\tif (handler != null)\n\t\t{\n\t\t\tthis.handlers.put(state.cell, handler);\n\t\t\t\n\t\t\tif (index != null && x != null && y != null)\n\t\t\t{\n\t\t\t\thandler.start(x, y, index);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseDown.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseMove.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseUp.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxSelectionCellsHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getSelectionModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getView().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n};\n\n__mxOutput.mxSelectionCellsHandler = typeof mxSelectionCellsHandler !== 'undefined' ? mxSelectionCellsHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxConnectionHandler\n *\n * Graph event handler that creates new connections. Uses <mxTerminalMarker>\n * for finding and highlighting the source and target vertices and\n * <factoryMethod> to create the edge instance. This handler is built-into\n * <mxGraph.connectionHandler> and enabled using <mxGraph.setConnectable>.\n *\n * Example:\n * \n * (code)\n * new mxConnectionHandler(graph, function(source, target, style)\n * {\n *   edge = new mxCell('', new mxGeometry());\n *   edge.setEdge(true);\n *   edge.setStyle(style);\n *   edge.geometry.relative = true;\n *   return edge;\n * });\n * (end)\n * \n * Here is an alternative solution that just sets a specific user object for\n * new edges by overriding <insertEdge>.\n *\n * (code)\n * mxConnectionHandlerInsertEdge = mxConnectionHandler.prototype.insertEdge;\n * mxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n * {\n *   value = 'Test';\n * \n *   return mxConnectionHandlerInsertEdge.apply(this, arguments);\n * };\n * (end)\n * \n * Using images to trigger connections:\n * \n * This handler uses mxTerminalMarker to find the source and target cell for\n * the new connection and creates a new edge using <connect>. The new edge is\n * created using <createEdge> which in turn uses <factoryMethod> or creates a\n * new default edge.\n * \n * The handler uses a \"highlight-paradigm\" for indicating if a cell is being\n * used as a source or target terminal, as seen in other diagramming products.\n * In order to allow both, moving and connecting cells at the same time,\n * <mxConstants.DEFAULT_HOTSPOT> is used in the handler to determine the hotspot\n * of a cell, that is, the region of the cell which is used to trigger a new\n * connection. The constant is a value between 0 and 1 that specifies the\n * amount of the width and height around the center to be used for the hotspot\n * of a cell and its default value is 0.5. In addition,\n * <mxConstants.MIN_HOTSPOT_SIZE> defines the minimum number of pixels for the\n * width and height of the hotspot.\n * \n * This solution, while standards compliant, may be somewhat confusing because\n * there is no visual indicator for the hotspot and the highlight is seen to\n * switch on and off while the mouse is being moved in and out. Furthermore,\n * this paradigm does not allow to create different connections depending on\n * the highlighted hotspot as there is only one hotspot per cell and it\n * normally does not allow cells to be moved and connected at the same time as\n * there is no clear indication of the connectable area of the cell.\n * \n * To come across these issues, the handle has an additional <createIcons> hook\n * with a default implementation that allows to create one icon to be used to\n * trigger new connections. If this icon is specified, then new connections can\n * only be created if the image is clicked while the cell is being highlighted.\n * The <createIcons> hook may be overridden to create more than one\n * <mxImageShape> for creating new connections, but the default implementation\n * supports one image and is used as follows:\n * \n * In order to display the \"connect image\" whenever the mouse is over the cell,\n * an DEFAULT_HOTSPOT of 1 should be used:\n * \n * (code)\n * mxConstants.DEFAULT_HOTSPOT = 1;\n * (end)\n * \n * In order to avoid confusion with the highlighting, the highlight color\n * should not be used with a connect image:\n * \n * (code)\n * mxConstants.HIGHLIGHT_COLOR = null;\n * (end)\n * \n * To install the image, the connectImage field of the mxConnectionHandler must\n * be assigned a new <mxImage> instance:\n * \n * (code)\n * mxConnectionHandler.prototype.connectImage = new mxImage('images/green-dot.gif', 14, 14);\n * (end)\n * \n * This will use the green-dot.gif with a width and height of 14 pixels as the\n * image to trigger new connections. In createIcons the icon field of the\n * handler will be set in order to remember the icon that has been clicked for\n * creating the new connection. This field will be available under selectedIcon\n * in the connect method, which may be overridden to take the icon that\n * triggered the new connection into account. This is useful if more than one\n * icon may be used to create a connection.\n *\n * Group: Events\n * \n * Event: mxEvent.START\n * \n * Fires when a new connection is being created by the user. The <code>state</code>\n * property contains the state of the source cell.\n * \n * Event: mxEvent.CONNECT\n * \n * Fires between begin- and endUpdate in <connect>. The <code>cell</code>\n * property contains the inserted edge, the <code>event</code> and <code>target</code> \n * properties contain the respective arguments that were passed to <connect> (where\n * target corresponds to the dropTarget argument). Finally, the <code>terminal</code>\n * property corresponds to the target argument in <connect> or the clone of the source\n * terminal if <createTarget> is enabled.\n * \n * Note that the target is the cell under the mouse where the mouse button was released.\n * Depending on the logic in the handler, this doesn't necessarily have to be the target\n * of the inserted edge. To print the source, target or any optional ports IDs that the\n * edge is connected to, the following code can be used. To get more details about the\n * actual connection point, <mxGraph.getConnectionConstraint> can be used. To resolve\n * the port IDs, use <mxGraphModel.getCell>.\n * \n * (code)\n * graph.connectionHandler.addListener(mxEvent.CONNECT, function(sender, evt)\n * {\n *   var edge = evt.getProperty('cell');\n *   var source = graph.getModel().getTerminal(edge, true);\n *   var target = graph.getModel().getTerminal(edge, false);\n *   \n *   var style = graph.getCellStyle(edge);\n *   var sourcePortId = style[mxConstants.STYLE_SOURCE_PORT];\n *   var targetPortId = style[mxConstants.STYLE_TARGET_PORT];\n *   \n *   mxLog.show();\n *   mxLog.debug('connect', edge, source.id, target.id, sourcePortId, targetPortId);\n * });\n * (end)\n *\n * Event: mxEvent.RESET\n * \n * Fires when the <reset> method is invoked.\n *\n * Constructor: mxConnectionHandler\n *\n * Constructs an event handler that connects vertices using the specified\n * factory method to create the new edges. Modify\n * <mxConstants.ACTIVE_REGION> to setup the region on a cell which triggers\n * the creation of a new connection or use connect icons as explained\n * above.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and an\n * optional cell style from the preview as the third argument. It returns\n * the <mxCell> that represents the new edge.\n */\nfunction mxConnectionHandler(graph, factoryMethod)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxConnectionHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConnectionHandler.prototype.graph = null;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used for creating new edges. The function takes the\n * source and target <mxCell> as the first and second argument and returns\n * a new <mxCell> that represents the edge. This is used in <createEdge>.\n */\nmxConnectionHandler.prototype.factoryMethod = true;\n\n/**\n * Variable: moveIconFront\n * \n * Specifies if icons should be displayed inside the graph container instead\n * of the overlay pane. This is used for HTML labels on vertices which hide\n * the connect icon. This has precendence over <moveIconBack> when set\n * to true. Default is false.\n */\nmxConnectionHandler.prototype.moveIconFront = false;\n\n/**\n * Variable: moveIconBack\n * \n * Specifies if icons should be moved to the back of the overlay pane. This can\n * be set to true if the icons of the connection handler conflict with other\n * handles, such as the vertex label move handle. Default is false.\n */\nmxConnectionHandler.prototype.moveIconBack = false;\n\n/**\n * Variable: connectImage\n * \n * <mxImage> that is used to trigger the creation of a new connection. This\n * is used in <createIcons>. Default is null.\n */\nmxConnectionHandler.prototype.connectImage = null;\n\n/**\n * Variable: targetConnectImage\n * \n * Specifies if the connect icon should be centered on the target state\n * while connections are being previewed. Default is false.\n */\nmxConnectionHandler.prototype.targetConnectImage = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConnectionHandler.prototype.enabled = true;\n\n/**\n * Variable: select\n * \n * Specifies if new edges should be selected. Default is true.\n */\nmxConnectionHandler.prototype.select = true;\n\n/**\n * Variable: createTarget\n * \n * Specifies if <createTargetVertex> should be called if no target was under the\n * mouse for the new connection. Setting this to true means the connection\n * will be drawn as valid if no target is under the mouse, and\n * <createTargetVertex> will be called before the connection is created between\n * the source cell and the newly created vertex in <createTargetVertex>, which\n * can be overridden to create a new target. Default is false.\n */\nmxConnectionHandler.prototype.createTarget = false;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> used for finding source and target cells.\n */\nmxConnectionHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxConnectionHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while connections are being created.\n */\nmxConnectionHandler.prototype.error = null;\n\n/**\n * Variable: waypointsEnabled\n * \n * Specifies if single clicks should add waypoints on the new edge. Default is\n * false.\n */\nmxConnectionHandler.prototype.waypointsEnabled = false;\n\n/**\n * Variable: ignoreMouseDown\n * \n * Specifies if the connection handler should ignore the state of the mouse\n * button when highlighting the source. Default is false, that is, the\n * handler only highlights the source if no button is being pressed.\n */\nmxConnectionHandler.prototype.ignoreMouseDown = false;\n\n/**\n * Variable: first\n * \n * Holds the <mxPoint> where the mouseDown took place while the handler is\n * active.\n */\nmxConnectionHandler.prototype.first = null;\n\n/**\n * Variable: connectIconOffset\n * \n * Holds the offset for connect icons during connection preview.\n * Default is mxPoint(0, <mxConstants.TOOLTIP_VERTICAL_OFFSET>).\n * Note that placing the icon under the mouse pointer with an\n * offset of (0,0) will affect hit detection.\n */\nmxConnectionHandler.prototype.connectIconOffset = new mxPoint(0, mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\n/**\n * Variable: edgeState\n * \n * Optional <mxCellState> that represents the preview edge while the\n * handler is active. This is created in <createEdgeState>.\n */\nmxConnectionHandler.prototype.edgeState = null;\n\n/**\n * Variable: changeHandler\n * \n * Holds the change event listener for later removal.\n */\nmxConnectionHandler.prototype.changeHandler = null;\n\n/**\n * Variable: drillHandler\n * \n * Holds the drill event listener for later removal.\n */\nmxConnectionHandler.prototype.drillHandler = null;\n\n/**\n * Variable: mouseDownCounter\n * \n * Counts the number of mouseDown events since the start. The initial mouse\n * down event counts as 1.\n */\nmxConnectionHandler.prototype.mouseDownCounter = 0;\n\n/**\n * Variable: movePreviewAway\n * \n * Switch to enable moving the preview away from the mousepointer. This is required in browsers\n * where the preview cannot be made transparent to events and if the built-in hit detection on\n * the HTML elements in the page should be used. Default is the value of <mxClient.IS_VML>.\n */\nmxConnectionHandler.prototype.movePreviewAway = mxClient.IS_VML;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxConnectionHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: livePreview\n * \n * Specifies if the actual shape of the edge state should be used for the preview.\n * Default is false. (Ignored if no edge state is created in <createEdgeState>.)\n */\nmxConnectionHandler.prototype.livePreview = false;\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used while the handler is active. Default is null.\n */\nmxConnectionHandler.prototype.cursor = null;\n\n/**\n * Variable: insertBeforeSource\n * \n * Specifies if new edges should be inserted before the source vertex in the\n * cell hierarchy. Default is false for backwards compatibility.\n */\nmxConnectionHandler.prototype.insertBeforeSource = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConnectionHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConnectionHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isInsertBefore\n * \n * Returns <insertBeforeSource> for non-loops and false for loops.\n *\n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be inserted.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.isInsertBefore = function(edge, source, target, evt, dropTarget)\n{\n\treturn this.insertBeforeSource && source != target;\n};\n\n/**\n * Function: isCreateTarget\n * \n * Returns <createTarget>.\n *\n * Parameters:\n *\n * evt - Current active native pointer event.\n */\nmxConnectionHandler.prototype.isCreateTarget = function(evt)\n{\n\treturn this.createTarget;\n};\n\n/**\n * Function: setCreateTarget\n * \n * Sets <createTarget>.\n */\nmxConnectionHandler.prototype.setCreateTarget = function(value)\n{\n\tthis.createTarget = value;\n};\n\n/**\n * Function: createShape\n * \n * Creates the preview shape for new connections.\n */\nmxConnectionHandler.prototype.createShape = function()\n{\n\t// Creates the edge preview\n\tvar shape = (this.livePreview && this.edgeState != null) ?\n\t\tthis.graph.cellRenderer.createShape(this.edgeState) :\n\t\tnew mxPolyline([], mxConstants.INVALID_COLOR);\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.scale = this.graph.view.scale;\n\tshape.pointerEvents = false;\n\tshape.isDashed = true;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, null);\n\n\treturn shape;\n};\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this connection handler. This should\n * be invoked if <mxGraph.container> is assigned after the connection\n * handler has been created.\n */\nmxConnectionHandler.prototype.init = function()\n{\n\tthis.graph.addMouseListener(this);\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\n\t// Redraws the icons if the graph changes\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.iconState = this.graph.getView().getState(this.iconState.cell);\n\t\t}\n\t\t\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.redrawIcons(this.icons, this.iconState);\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != null && this.graph.view.getState(this.previous.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.changeHandler);\n\t\n\t// Removes the icon if we step into/up or start editing\n\tthis.drillHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.START_EDITING, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.drillHandler);\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxConnectionHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxConnectionHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tmarker.hotspotEnabled = true;\n\n\t// Overrides to return cell at location only if valid (so that\n\t// there is no highlight for invalid cells)\n\tmarker.getCell = mxUtils.bind(this, function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(marker, arguments);\n\t\tthis.error = null;\n\t\t\n\t\t// Checks for cell at preview point (with grid)\n\t\tif (cell == null && this.currentPoint != null)\n\t\t{\n\t\t\tcell = this.graph.getCellAt(this.currentPoint.x, this.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && this.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, this.currentPoint.x, this.currentPoint.y)) ||\n\t\t\t!this.isConnectableCell(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isConnecting())\n\t\t\t{\n\t\t\t\tif (this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tthis.error = this.validateConnection(this.previous.cell, cell);\n\t\t\t\t\t\n\t\t\t\t\tif (this.error != null && this.error.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell = null;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Enables create target inside groups\n\t\t\t\t\t\tif (this.isCreateTarget(me.getEvent()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.error = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!this.isValidSource(cell, me))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.isConnecting() && !this.isCreateTarget(me.getEvent()) &&\n\t\t\t\t!this.graph.allowDanglingEdges)\n\t\t{\n\t\t\tthis.error = '';\n\t\t}\n\n\t\treturn cell;\n\t});\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = mxUtils.bind(this, function(state)\n\t{\n\t\tif (this.isConnecting())\n\t\t{\n\t\t\treturn this.error == null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxCellMarker.prototype.isValidState.apply(marker, arguments);\n\t\t}\n\t});\n\n\t// Overrides to use marker color only in highlight mode or for\n\t// target selection\n\tmarker.getMarkerColor = mxUtils.bind(this, function(evt, state, isValid)\n\t{\n\t\treturn (this.connectImage == null || this.isConnecting()) ?\n\t\t\tmxCellMarker.prototype.getMarkerColor.apply(marker, arguments) :\n\t\t\tnull;\n\t});\n\n\t// Overrides to use hotspot only for source selection otherwise\n\t// intersects always returns true when over a cell\n\tmarker.intersects = mxUtils.bind(this, function(state, evt)\n\t{\n\t\tif (this.connectImage != null || this.isConnecting())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxCellMarker.prototype.intersects.apply(marker, arguments);\n\t});\n\n\treturn marker;\n};\n\n/**\n * Function: start\n * \n * Starts a new connection for the given state and coordinates.\n */\nmxConnectionHandler.prototype.start = function(state, x, y, edgeState)\n{\n\tthis.previous = state;\n\tthis.first = new mxPoint(x, y);\n\tthis.edgeState = (edgeState != null) ? edgeState : this.createEdgeState(null);\n\t\n\t// Marks the source state\n\tthis.marker.currentColor = this.marker.validColor;\n\tthis.marker.markedState = state;\n\tthis.marker.mark();\n\n\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n};\n\n/**\n * Function: isConnecting\n * \n * Returns true if the source terminal has been clicked and a new\n * connection is currently being previewed.\n */\nmxConnectionHandler.prototype.isConnecting = function()\n{\n\treturn this.first != null && this.shape != null;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns <mxGraph.isValidSource> for the given source terminal.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the source terminal.\n * me - <mxMouseEvent> that is associated with this call.\n */\nmxConnectionHandler.prototype.isValidSource = function(cell, me)\n{\n\treturn this.graph.isValidSource(cell);\n};\n\n/**\n * Function: isValidTarget\n * \n * Returns true. The call to <mxGraph.isValidTarget> is implicit by calling\n * <mxGraph.getEdgeValidationError> in <validateConnection>. This is an\n * additional hook for disabling certain targets in this specific handler.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.isValidTarget = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.validateConnection = function(source, target)\n{\n\tif (!this.isValidTarget(target))\n\t{\n\t\treturn '';\n\t}\n\t\n\treturn this.graph.getEdgeValidationError(null, source, target);\n};\n\n/**\n * Function: getConnectImage\n * \n * Hook to return the <mxImage> used for the connection icon of the given\n * <mxCellState>. This implementation returns <connectImage>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect image should be returned.\n */\nmxConnectionHandler.prototype.getConnectImage = function(state)\n{\n\treturn this.connectImage;\n};\n\n/**\n * Function: isMoveIconToFrontForState\n * \n * Returns true if the state has a HTML label in the graph's container, otherwise\n * it returns <moveIconFront>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.isMoveIconToFrontForState = function(state)\n{\n\tif (state.text != null && state.text.node.parentNode == this.graph.container)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn this.moveIconFront;\n};\n\n/**\n * Function: createIcons\n * \n * Creates the array <mxImageShapes> that represent the connect icons for\n * the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.createIcons = function(state)\n{\n\tvar image = this.getConnectImage(state);\n\t\n\tif (image != null && state != null)\n\t{\n\t\tthis.iconState = state;\n\t\tvar icons = [];\n\n\t\t// Cannot use HTML for the connect icons because the icon receives all\n\t\t// mouse move events in IE, must use VML and SVG instead even if the\n\t\t// connect-icon appears behind the selection border and the selection\n\t\t// border consumes the events before the icon gets a chance\n\t\tvar bounds = new mxRectangle(0, 0, image.width, image.height);\n\t\tvar icon = new mxImageShape(bounds, image.src, null, null, 0);\n\t\ticon.preserveImageAspect = false;\n\t\t\n\t\tif (this.isMoveIconToFrontForState(state))\n\t\t{\n\t\t\ticon.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\ticon.init(this.graph.container);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ticon.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\ticon.init(this.graph.getView().getOverlayPane());\n\n\t\t\t// Move the icon back in the overlay pane\n\t\t\tif (this.moveIconBack && icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\t\t}\n\n\t\ticon.node.style.cursor = mxConstants.CURSOR_CONNECT;\n\n\t\t// Events transparency\n\t\tvar getState = mxUtils.bind(this, function()\n\t\t{\n\t\t\treturn (this.currentState != null) ? this.currentState : state;\n\t\t});\n\t\t\n\t\t// Updates the local icon before firing the mouse down event.\n\t\tvar mouseDown = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tthis.icon = icon;\n\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN,\n\t\t\t\t\tnew mxMouseEvent(evt, getState()));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState, mouseDown);\n\t\t\n\t\ticons.push(icon);\n\t\tthis.redrawIcons(icons, this.iconState);\n\t\t\n\t\treturn icons;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: redrawIcons\n * \n * Redraws the given array of <mxImageShapes>.\n * \n * Parameters:\n * \n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.redrawIcons = function(icons, state)\n{\n\tif (icons != null && icons[0] != null && state != null)\n\t{\n\t\tvar pos = this.getIconPosition(icons[0], state);\n\t\ticons[0].bounds.x = pos.x;\n\t\ticons[0].bounds.y = pos.y;\n\t\ticons[0].redraw();\n\t}\n};\n\n/**\n * Function: redrawIcons\n * \n * Redraws the given array of <mxImageShapes>.\n * \n * Parameters:\n * \n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.getIconPosition = function(icon, state)\n{\n\tvar scale = this.graph.getView().scale;\n\tvar cx = state.getCenterX();\n\tvar cy = state.getCenterY();\n\t\n\tif (this.graph.isSwimlane(state.cell))\n\t{\n\t\tvar size = this.graph.getStartSize(state.cell);\n\t\t\n\t\tcx = (size.width != 0) ? state.x + size.width * scale / 2 : cx;\n\t\tcy = (size.height != 0) ? state.y + size.height * scale / 2 : cy;\n\t\t\n\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin, ct);\n\t\t\tcx = pt.x;\n\t\t\tcy = pt.y;\n\t\t}\n\t}\n\n\treturn new mxPoint(cx - icon.bounds.width / 2,\n\t\t\tcy - icon.bounds.height / 2);\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the connect icons and resets the respective state.\n */\nmxConnectionHandler.prototype.destroyIcons = function()\n{\n\tif (this.icons != null)\n\t{\n\t\tfor (var i = 0; i < this.icons.length; i++)\n\t\t{\n\t\t\tthis.icons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.icons = null;\n\t\tthis.icon = null;\n\t\tthis.selectedIcon = null;\n\t\tthis.iconState = null;\n\t}\n};\n\n/**\n * Function: isStartEvent\n * \n * Returns true if the given mouse down event should start this handler. The\n * This implementation returns true if the event does not force marquee\n * selection, and the currentConstraint and currentFocus of the\n * <constraintHandler> are not null, or <previous> and <error> are not null and\n * <icons> is null or <icons> and <icon> are not null.\n */\nmxConnectionHandler.prototype.isStartEvent = function(me)\n{\n\treturn ((this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null) ||\n\t\t(this.previous != null && this.error == null && (this.icons == null || (this.icons != null &&\n\t\tthis.icon != null))));\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a new connection.\n */\nmxConnectionHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownCounter++;\n\t\n\tif (this.isEnabled() && this.graph.isEnabled() && !me.isConsumed() &&\n\t\t!this.isConnecting() && this.isStartEvent(me))\n\t{\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t{\n\t\t\tthis.sourceConstraint = this.constraintHandler.currentConstraint;\n\t\t\tthis.previous = this.constraintHandler.currentFocus;\n\t\t\tthis.first = this.constraintHandler.currentPoint.clone();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Stores the location of the initial mousedown\n\t\t\tthis.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t}\n\t\n\t\tthis.edgeState = this.createEdgeState(me);\n\t\tthis.mouseDownCounter = 1;\n\t\t\n\t\tif (this.waypointsEnabled && this.shape == null)\n\t\t{\n\t\t\tthis.waypoints = null;\n\t\t\tthis.shape = this.createShape();\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t}\n\t\t}\n\n\t\t// Stores the starting point in the geometry of the preview\n\t\tif (this.previous == null && this.edgeState != null)\n\t\t{\n\t\t\tvar pt = this.graph.getPointForEvent(me.getEvent());\n\t\t\tthis.edgeState.cell.geometry.setTerminalPoint(pt, true);\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n\n\t\tme.consume();\n\t}\n\n\tthis.selectedIcon = this.icon;\n\tthis.icon = null;\n};\n\n/**\n * Function: isImmediateConnectSource\n * \n * Returns true if a tap on the given source state should immediately start\n * connecting. This implementation returns true if the state is not movable\n * in the graph. \n */\nmxConnectionHandler.prototype.isImmediateConnectSource = function(state)\n{\n\treturn !this.graph.isCellMovable(state.cell);\n};\n\n/**\n * Function: createEdgeState\n * \n * Hook to return an <mxCellState> which may be used during the preview.\n * This implementation returns null.\n * \n * Use the following code to create a preview for an existing edge style:\n * \n * (code)\n * graph.connectionHandler.createEdgeState = function(me)\n * {\n *   var edge = graph.createEdge(null, null, null, null, null, 'edgeStyle=elbowEdgeStyle');\n *   \n *   return new mxCellState(this.graph.view, edge, this.graph.getCellStyle(edge));\n * };\n * (end)\n */\nmxConnectionHandler.prototype.createEdgeState = function(me)\n{\n\treturn null;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxConnectionHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updateCurrentState\n * \n * Updates the current state for a given mouse move event by using\n * the <marker>.\n */\nmxConnectionHandler.prototype.updateCurrentState = function(me, point)\n{\n\tthis.constraintHandler.update(me, this.first == null, false, (this.first == null ||\n\t\tme.isSource(this.marker.highlight.shape)) ? null : point);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\n\t\t// Updates validation state\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.error = this.validateConnection(this.previous.cell, this.constraintHandler.currentFocus.cell);\n\t\t\t\n\t\t\tif (this.error == null)\n\t\t\t{\n\t\t\t\tthis.currentState = this.constraintHandler.currentFocus;\n\t\t\t}\n\t\t\t\t\t\n\t\t\tif (this.error != null || (this.currentState != null &&\n\t\t\t\t!this.isCellEnabled(this.currentState.cell)))\n\t\t\t{\n\t\t\t\tthis.constraintHandler.reset();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.process(me);\n\t\t\tthis.currentState = this.marker.getValidState();\n\t\t}\n\t\t\t\n\t\tif (this.currentState != null && !this.isCellEnabled(this.currentState.cell))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar outline = this.isOutlineConnectEvent(me);\n\t\t\n\t\tif (this.currentState != null && outline)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tvar constraint = this.graph.getOutlineConstraint(point, this.currentState, me);\n\t\t\tthis.constraintHandler.setFocus(me, this.currentState, false);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\n\t\tif (this.outlineConnect)\n\t\t{\n\t\t\tif (this.marker.highlight != null && this.marker.highlight.shape != null)\n\t\t\t{\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.OUTLINE_HIGHLIGHT_COLOR;\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t} \n\t\t\t\telse if (this.marker.hasValidState())\n\t\t\t\t{\n\t\t\t\t\t// Handles special case where actual end point of edge and current mouse point\n\t\t\t\t\t// are not equal (due to grid snapping) and there is no hit on shape or highlight\n\t\t\t\t\t// but ignores cases where parent is used for non-connectable child cells\n\t\t\t\t\tif (this.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\t\t\tthis.marker.getValidState() != me.getState())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\t\tthis.currentState = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.DEFAULT_VALID_COLOR;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell allows new connections to be created. This implementation\n * always returns true.\n */\nmxConnectionHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: convertWaypoint\n * \n * Converts the given point from screen coordinates to model coordinates.\n */\nmxConnectionHandler.prototype.convertWaypoint = function(point)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\n\tpoint.x = point.x / scale - tr.x;\n\tpoint.y = point.y / scale - tr.y;\n};\n\n/**\n * Function: snapToPreview\n * \n * Called to snap the given point to the current preview. This snaps to the\n * first point of the preview if alt is not pressed.\n */\nmxConnectionHandler.prototype.snapToPreview = function(me, point)\n{\n\tif (!mxEvent.isAltDown(me.getEvent()) && this.previous != null)\n\t{\n\t\tvar tol = this.graph.gridSize * this.graph.view.scale / 2;\t\n\t\tvar tmp = (this.sourceConstraint != null) ? this.first :\n\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\n\t\tif (Math.abs(tmp.x - me.getGraphX()) < tol)\n\t\t{\n\t\t\tpoint.x = tmp.x;\n\t\t}\n\t\t\n\t\tif (Math.abs(tmp.y - me.getGraphY()) < tol)\n\t\t{\n\t\t\tpoint.y = tmp.y;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview edge or by highlighting\n * a possible source or target terminal.\n */\nmxConnectionHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && (this.ignoreMouseDown || this.first != null || !this.graph.isMouseDown))\n\t{\n\t\t// Handles special case when handler is disabled during highlight\n\t\tif (!this.isEnabled() && this.currentState != null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar view = this.graph.getView();\n\t\tvar scale = view.scale;\n\t\tvar tr = view.translate;\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tthis.error = null;\n\n\t\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t\t{\n\t\t\tpoint = new mxPoint((this.graph.snap(point.x / scale - tr.x) + tr.x) * scale,\n\t\t\t\t(this.graph.snap(point.y / scale - tr.y) + tr.y) * scale);\n\t\t}\n\t\t\n\t\tthis.snapToPreview(me, point);\n\t\tthis.currentPoint = point;\n\t\t\n\t\tif ((this.first != null || (this.isEnabled() && this.graph.isEnabled())) &&\n\t\t\t(this.shape != null || this.first == null ||\n\t\t\tMath.abs(me.getGraphX() - this.first.x) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.first.y) > this.graph.tolerance))\n\t\t{\n\t\t\tthis.updateCurrentState(me, point);\n\t\t}\n\n\t\tif (this.first != null)\n\t\t{\n\t\t\tvar constraint = null;\n\t\t\tvar current = point;\n\t\t\t\n\t\t\t// Uses the current point from the constraint handler if available\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tconstraint = this.constraintHandler.currentConstraint;\n\t\t\t\tcurrent = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.previous != null && !this.graph.isIgnoreTerminalEvent(me.getEvent()) &&\n\t\t\t\tmxEvent.isShiftDown(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(this.previous.getCenterX() - point.x) <\n\t\t\t\t\tMath.abs(this.previous.getCenterY() - point.y))\n\t\t\t\t{\n\t\t\t\t\tpoint.x = this.previous.getCenterX();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpoint.y = this.previous.getCenterY();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pt2 = this.first;\n\t\t\t\n\t\t\t// Moves the connect icon with the mouse\n\t\t\tif (this.selectedIcon != null)\n\t\t\t{\n\t\t\t\tvar w = this.selectedIcon.bounds.width;\n\t\t\t\tvar h = this.selectedIcon.bounds.height;\n\t\t\t\t\n\t\t\t\tif (this.currentState != null && this.targetConnectImage)\n\t\t\t\t{\n\t\t\t\t\tvar pos = this.getIconPosition(this.selectedIcon, this.currentState);\n\t\t\t\t\tthis.selectedIcon.bounds.x = pos.x;\n\t\t\t\t\tthis.selectedIcon.bounds.y = pos.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar bounds = new mxRectangle(me.getGraphX() + this.connectIconOffset.x,\n\t\t\t\t\t\tme.getGraphY() + this.connectIconOffset.y, w, h);\n\t\t\t\t\tthis.selectedIcon.bounds = bounds;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.selectedIcon.redraw();\n\t\t\t}\n\n\t\t\t// Uses edge state to compute the terminal points\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(current, constraint);\n\t\t\t\tcurrent = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 1];\n\t\t\t\tpt2 = this.edgeState.absolutePoints[0];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.currentState != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.constraintHandler.currentConstraint == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = this.getTargetPerimeterPoint(this.currentState, me);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Computes the source perimeter point\n\t\t\t\tif (this.sourceConstraint == null && this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\t\t\t\tthis.waypoints[0] : current;\n\t\t\t\t\tvar tmp = this.getSourcePerimeterPoint(this.previous, next, me);\n\t\t\t\t\t\n\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt2 = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Makes sure the cell under the mousepointer can be detected\n\t\t\t// by moving the preview shape away from the mouse. This\n\t\t\t// makes sure the preview shape does not prevent the detection\n\t\t\t// of the cell under the mousepointer even for slow gestures.\n\t\t\tif (this.currentState == null && this.movePreviewAway)\n\t\t\t{\n\t\t\t\tvar tmp = pt2; \n\t\t\t\t\n\t\t\t\tif (this.edgeState != null && this.edgeState.absolutePoints.length >= 2)\n\t\t\t\t{\n\t\t\t\t\tvar tmp2 = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 2];\n\t\t\t\t\t\n\t\t\t\t\tif (tmp2 != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = tmp2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = current.x - tmp.x;\n\t\t\t\tvar dy = current.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\n\t\t\t\tif (len == 0)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Stores old point to reuse when creating edge\n\t\t\t\tthis.originalPoint = current.clone();\n\t\t\t\tcurrent.x -= dx * 4 / len;\n\t\t\t\tcurrent.y -= dy * 4 / len;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.originalPoint = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the preview shape (lazy)\n\t\t\tif (this.shape == null)\n\t\t\t{\n\t\t\t\tvar dx = Math.abs(me.getGraphX() - this.first.x);\n\t\t\t\tvar dy = Math.abs(me.getGraphY() - this.first.y);\n\n\t\t\t\tif (dx > this.graph.tolerance || dy > this.graph.tolerance)\n\t\t\t\t{\n\t\t\t\t\tthis.shape = this.createShape();\n\n\t\t\t\t\tif (this.edgeState != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Revalidates current connection\n\t\t\t\t\tthis.updateCurrentState(me, point);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Updates the points in the preview edge\n\t\t\tif (this.shape != null)\n\t\t\t{\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tthis.shape.points = this.edgeState.absolutePoints;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pts = [pt2];\n\t\t\t\t\t\n\t\t\t\t\tif (this.waypoints != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpts = pts.concat(this.waypoints);\n\t\t\t\t\t}\n\n\t\t\t\t\tpts.push(current);\n\t\t\t\t\tthis.shape.points = pts;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.drawPreview();\n\t\t\t}\n\t\t\t\n\t\t\t// Makes sure endpoint of edge is visible during connect\n\t\t\tif (this.cursor != null)\n\t\t\t{\n\t\t\t\tthis.graph.container.style.cursor = this.cursor;\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(me.getEvent());\n\t\t\tme.consume();\n\t\t}\n\t\telse if (!this.isEnabled() || !this.graph.isEnabled())\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != this.currentState && this.edgeState == null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\t\n\t\t\t// Sets the cursor on the current shape\t\t\t\t\n\t\t\tif (this.currentState != null && this.error == null && this.constraintHandler.currentConstraint == null)\n\t\t\t{\n\t\t\t\tthis.icons = this.createIcons(this.currentState);\n\n\t\t\t\tif (this.icons == null)\n\t\t\t\t{\n\t\t\t\t\tthis.currentState.setCursor(mxConstants.CURSOR_CONNECT);\n\t\t\t\t\tme.consume();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.previous = this.currentState;\n\t\t}\n\t\telse if (this.previous == this.currentState && this.currentState != null && this.icons == null &&\n\t\t\t!this.graph.isMouseDown)\n\t\t{\n\t\t\t// Makes sure that no cursors are changed\n\t\t\tme.consume();\n\t\t}\n\n\t\tif (!this.graph.isMouseDown && this.currentState != null && this.icons != null)\n\t\t{\n\t\t\tvar hitsIcon = false;\n\t\t\tvar target = me.getSource();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.icons.length && !hitsIcon; i++)\n\t\t\t{\n\t\t\t\thitsIcon = target == this.icons[i].node || target.parentNode == this.icons[i].node;\n\t\t\t}\n\n\t\t\tif (!hitsIcon)\n\t\t\t{\n\t\t\t\tthis.updateIcons(this.currentState, this.icons, me);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n};\n\n/**\n * Function: updateEdgeState\n * \n * Updates <edgeState>.\n */\nmxConnectionHandler.prototype.updateEdgeState = function(current, constraint)\n{\n\t// TODO: Use generic method for writing constraint to style\n\tif (this.sourceConstraint != null && this.sourceConstraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_X] = this.sourceConstraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_Y] = this.sourceConstraint.point.y;\n\t}\n\n\tif (constraint != null && constraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t}\n\telse\n\t{\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_X];\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_Y];\n\t}\n\t\n\tthis.edgeState.absolutePoints = [null, (this.currentState != null) ? null : current];\n\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.previous, true, this.sourceConstraint);\n\t\n\tif (this.currentState != null)\n\t{\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = this.graph.getConnectionConstraint(this.edgeState, this.previous, false);\n\t\t}\n\t\t\n\t\tthis.edgeState.setAbsoluteTerminalPoint(null, false);\n\t\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.currentState, false, constraint);\n\t}\n\t\n\t// Scales and translates the waypoints to the model\n\tvar realPoints = null;\n\t\n\tif (this.waypoints != null)\n\t{\n\t\trealPoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t{\n\t\t\tvar pt = this.waypoints[i].clone();\n\t\t\tthis.convertWaypoint(pt);\n\t\t\trealPoints[i] = pt;\n\t\t}\n\t}\n\t\n\tthis.graph.view.updatePoints(this.edgeState, realPoints, this.previous, this.currentState);\n\tthis.graph.view.updateFloatingTerminalPoints(this.edgeState, this.previous, this.currentState);\n};\n\n/**\n * Function: getTargetPerimeterPoint\n * \n * Returns the perimeter point for the given target state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getTargetPerimeterPoint = function(state, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar targetPerimeter = view.getPerimeterFunction(state);\n\t\n\tif (targetPerimeter != null)\n\t{\n\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\tthis.waypoints[this.waypoints.length - 1] :\n\t\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\t\tvar tmp = targetPerimeter(view.getPerimeterBounds(state),\n\t\t\tthis.edgeState, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint(state.getCenterX(), state.getCenterY());\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSourcePerimeterPoint\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * next - <mxPoint> that represents the next point along the previewed edge.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getSourcePerimeterPoint = function(state, next, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar sourcePerimeter = view.getPerimeterFunction(state);\n\tvar c = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\n\tif (sourcePerimeter != null)\n\t{\n\t\tvar theta = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\tvar rad = -theta * (Math.PI / 180);\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\tnext = mxUtils.getRotatedPoint(new mxPoint(next.x, next.y), Math.cos(rad), Math.sin(rad), c);\n\t\t}\n\t\t\n\t\tvar tmp = sourcePerimeter(view.getPerimeterBounds(state), state, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tif (theta != 0)\n\t\t\t{\n\t\t\t\ttmp = mxUtils.getRotatedPoint(new mxPoint(tmp.x, tmp.y), Math.cos(-rad), Math.sin(-rad), c);\n\t\t\t}\n\t\t\t\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = c;\n\t}\n\t\n\treturn result;\n};\n\n\n/**\n * Function: updateIcons\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> under the mouse.\n * icons - Array of currently displayed icons.\n * me - <mxMouseEvent> that contains the mouse event.\n */\nmxConnectionHandler.prototype.updateIcons = function(state, icons, me)\n{\n\t// empty\n};\n\n/**\n * Function: isStopEvent\n * \n * Returns true if the given mouse up event should stop this handler. The\n * connection will be created if <error> is null. Note that this is only\n * called if <waypointsEnabled> is true. This implemtation returns true\n * if there is a cell state in the given event.\n */\nmxConnectionHandler.prototype.isStopEvent = function(me)\n{\n\treturn me.getState() != null;\n};\n\n/**\n * Function: addWaypoint\n * \n * Adds the waypoint for the given event to <waypoints>.\n */\nmxConnectionHandler.prototype.addWaypointForEvent = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar dx = Math.abs(point.x - this.first.x);\n\tvar dy = Math.abs(point.y - this.first.y);\n\tvar addPoint = this.waypoints != null || (this.mouseDownCounter > 1 &&\n\t\t\t(dx > this.graph.tolerance || dy > this.graph.tolerance));\n\n\tif (addPoint)\n\t{\n\t\tif (this.waypoints == null)\n\t\t{\n\t\t\tthis.waypoints = [];\n\t\t}\n\t\t\n\t\tvar scale = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.graph.snap(me.getGraphX() / scale) * scale,\n\t\t\t\tthis.graph.snap(me.getGraphY() / scale) * scale);\n\t\tthis.waypoints.push(point);\n\t}\n};\n\n/**\n * Function: checkConstraints\n * \n * Returns true if the connection for the given constraints is valid. This\n * implementation returns true if the constraints are not pointing to the\n * same fixed connection point.\n */\nmxConnectionHandler.prototype.checkConstraints = function(c1, c2)\n{\n\treturn (c1 == null || c2 == null || c1.point == null || c2.point == null ||\n\t\t!c1.point.equals(c2.point) || c1.dx != c2.dx || c1.dy != c2.dy ||\n\t\tc1.perimeter != c2.perimeter);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by inserting the new connection.\n */\nmxConnectionHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isConnecting())\n\t{\n\t\tif (this.waypointsEnabled && !this.isStopEvent(me))\n\t\t{\n\t\t\tthis.addWaypointForEvent(me);\n\t\t\tme.consume();\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar c1 = this.sourceConstraint;\n\t\tvar c2 = this.constraintHandler.currentConstraint;\n\n\t\tvar source = (this.previous != null) ? this.previous.cell : null;\n\t\tvar target = null;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\ttarget = this.constraintHandler.currentFocus.cell;\n\t\t}\n\t\t\n\t\tif (target == null && this.currentState != null)\n\t\t{\n\t\t\ttarget = this.currentState.cell;\n\t\t}\n\t\t\n\t\t// Inserts the edge if no validation error exists and if constraints differ\n\t\tif (this.error == null && (source == null || target == null ||\n\t\t\tsource != target || this.checkConstraints(c1, c2)))\n\t\t{\n\t\t\tthis.connect(source, target, me.getEvent(), me.getCell());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Selects the source terminal for self-references\n\t\t\tif (this.previous != null && this.marker.validState != null &&\n\t\t\t\tthis.previous.cell == this.marker.validState.cell)\n\t\t\t{\n\t\t\t\tthis.graph.selectCellForEvent(this.marker.source, me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\t// Displays the error message if it is not an empty string,\n\t\t\t// for empty error messages, the event is silently dropped\n\t\t\tif (this.error != null && this.error.length > 0)\n\t\t\t{\n\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Redraws the connect icons and resets the handler state\n\t\tthis.destroyIcons();\n\t\tme.consume();\n\t}\n\n\tif (this.first != null)\n\t{\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConnectionHandler.prototype.reset = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\t// Resets the cursor on the container\n\tif (this.cursor != null && this.graph.container != null)\n\t{\n\t\tthis.graph.container.style.cursor = '';\n\t}\n\t\n\tthis.destroyIcons();\n\tthis.marker.reset();\n\tthis.constraintHandler.reset();\n\tthis.originalPoint = null;\n\tthis.currentPoint = null;\n\tthis.edgeState = null;\n\tthis.previous = null;\n\tthis.error = null;\n\tthis.sourceConstraint = null;\n\tthis.mouseDownCounter = 0;\n\tthis.first = null;\n\n\tthis.fireEvent(new mxEventObject(mxEvent.RESET));\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview edge using the color and width returned by\n * <getEdgeColor> and <getEdgeWidth>.\n */\nmxConnectionHandler.prototype.drawPreview = function()\n{\n\tthis.updatePreview(this.error == null);\n\tthis.shape.redraw();\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.updatePreview = function(valid)\n{\n\tthis.shape.strokewidth = this.getEdgeWidth(valid);\n\tthis.shape.stroke = this.getEdgeColor(valid);\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeColor = function(valid)\n{\n\treturn (valid) ? mxConstants.VALID_COLOR : mxConstants.INVALID_COLOR;\n};\n\t\n/**\n * Function: getEdgeWidth\n * \n * Returns the width used to draw the preview edge. This returns 3 if\n * there is no edge validation error and 1 otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the width for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeWidth = function(valid)\n{\n\treturn (valid) ? 3 : 1;\n};\n\n/**\n * Function: connect\n * \n * Connects the given source and target using a new edge. This\n * implementation uses <createEdge> to create the edge.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.connect = function(source, target, evt, dropTarget)\n{\n\tif (target != null || this.isCreateTarget(evt) || this.graph.allowDanglingEdges)\n\t{\n\t\t// Uses the common parent of source and target or\n\t\t// the default parent to insert the edge\n\t\tvar model = this.graph.getModel();\n\t\tvar terminalInserted = false;\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (source != null && target == null && !this.graph.isIgnoreTerminalEvent(evt) && this.isCreateTarget(evt))\n\t\t\t{\n\t\t\t\ttarget = this.createTargetVertex(evt, source);\n\t\t\t\t\n\t\t\t\tif (target != null)\n\t\t\t\t{\n\t\t\t\t\tdropTarget = this.graph.getDropTarget([target], evt, dropTarget);\n\t\t\t\t\tterminalInserted = true;\n\t\t\t\t\t\n\t\t\t\t\t// Disables edges as drop targets if the target cell was created\n\t\t\t\t\t// FIXME: Should not shift if vertex was aligned (same in Java)\n\t\t\t\t\tif (dropTarget == null || !this.graph.getModel().isEdge(dropTarget))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pstate = this.graph.getView().getState(dropTarget);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = model.getGeometry(target);\n\t\t\t\t\t\t\ttmp.x -= pstate.origin.x;\n\t\t\t\t\t\t\ttmp.y -= pstate.origin.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdropTarget = this.graph.getDefaultParent();\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tthis.graph.addCell(target, dropTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar parent = this.graph.getDefaultParent();\n\n\t\t\tif (source != null && target != null &&\n\t\t\t\tmodel.getParent(source) == model.getParent(target) &&\n\t\t\t\tmodel.getParent(model.getParent(source)) != model.getRoot())\n\t\t\t{\n\t\t\t\tparent = model.getParent(source);\n\n\t\t\t\tif ((source.geometry != null && source.geometry.relative) &&\n\t\t\t\t\t(target.geometry != null && target.geometry.relative))\n\t\t\t\t{\n\t\t\t\t\tparent = model.getParent(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Uses the value of the preview edge state for inserting\n\t\t\t// the new edge into the graph\n\t\t\tvar value = null;\n\t\t\tvar style = null;\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tvalue = this.edgeState.cell.value;\n\t\t\t\tstyle = this.edgeState.cell.style;\n\t\t\t}\n\n\t\t\tedge = this.insertEdge(parent, null, value, source, target, style);\n\t\t\t\n\t\t\tif (edge != null)\n\t\t\t{\n\t\t\t\t// Updates the connection constraints\n\t\t\t\tthis.graph.setConnectionConstraint(edge, source, true, this.sourceConstraint);\n\t\t\t\tthis.graph.setConnectionConstraint(edge, target, false, this.constraintHandler.currentConstraint);\n\t\t\t\t\n\t\t\t\t// Uses geometry of the preview edge state\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmodel.setGeometry(edge, this.edgeState.cell.geometry);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar parent = model.getParent(source);\n\t\t\t\t\n\t\t\t\t// Inserts edge before source\n\t\t\t\tif (this.isInsertBefore(edge, source, target, evt, dropTarget))\n\t\t\t\t{\n\t\t\t\t\tvar index = null;\n\t\t\t\t\tvar tmp = source;\n\n\t\t\t\t\twhile (tmp.parent != null && tmp.geometry != null &&\n\t\t\t\t\t\ttmp.geometry.relative && tmp.parent != edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = this.graph.model.getParent(tmp);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tmp != null && tmp.parent != null && tmp.parent == edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.add(parent, edge, tmp.parent.getIndex(tmp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Makes sure the edge has a non-null, relative geometry\n\t\t\t\tvar geo = model.getGeometry(edge);\n\n\t\t\t\tif (geo == null)\n\t\t\t\t{\n\t\t\t\t\tgeo = new mxGeometry();\n\t\t\t\t\tgeo.relative = true;\n\t\t\t\t\t\n\t\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Uses scaled waypoints in geometry\n\t\t\t\tif (this.waypoints != null && this.waypoints.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar tr = this.graph.view.translate;\n\t\t\t\t\tgeo.points = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt = this.waypoints[i];\n\t\t\t\t\t\tgeo.points.push(new mxPoint(pt.x / s - tr.x, pt.y / s - tr.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar t = this.graph.view.translate;\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar pt = (this.originalPoint != null) ?\n\t\t\t\t\t\t\tnew mxPoint(this.originalPoint.x / s - t.x, this.originalPoint.y / s - t.y) :\n\t\t\t\t\t\tnew mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\tgeo.setTerminalPoint(pt, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT, 'cell', edge, 'terminal', target,\n\t\t\t\t\t'event', evt, 'target', dropTarget, 'terminalInserted', terminalInserted));\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxLog.show();\n\t\t\tmxLog.debug(e.message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tif (this.select)\n\t\t{\n\t\t\tthis.selectCells(edge, (terminalInserted) ? target : null);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectCells\n * \n * Selects the given edge after adding a new connection. The target argument\n * contains the target vertex if one has been inserted.\n */\nmxConnectionHandler.prototype.selectCells = function(edge, target)\n{\n\tthis.graph.setSelectionCell(edge);\n};\n\n/**\n * Function: insertEdge\n * \n * Creates, inserts and returns the new edge for the given parameters. This\n * implementation does only use <createEdge> if <factoryMethod> is defined,\n * otherwise <mxGraph.insertEdge> will be used.\n */\nmxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tif (this.factoryMethod == null)\n\t{\n\t\treturn this.graph.insertEdge(parent, id, value, source, target, style);\n\t}\n\telse\n\t{\n\t\tvar edge = this.createEdge(value, source, target, style);\n\t\tedge = this.graph.addEdge(edge, parent, source, target);\n\t\t\n\t\treturn edge;\n\t}\n};\n\n/**\n * Function: createTargetVertex\n * \n * Hook method for creating new vertices on the fly if no target was\n * under the mouse. This is only called if <createTarget> is true and\n * returns null.\n * \n * Parameters:\n * \n * evt - Mousedown event of the connect gesture.\n * source - <mxCell> that represents the source terminal.\n */\nmxConnectionHandler.prototype.createTargetVertex = function(evt, source)\n{\n\t// Uses the first non-relative source\n\tvar geo = this.graph.getCellGeometry(source);\n\t\n\twhile (geo != null && geo.relative)\n\t{\n\t\tsource = this.graph.getModel().getParent(source);\n\t\tgeo = this.graph.getCellGeometry(source);\n\t}\n\t\n\tvar clone = this.graph.cloneCell(source);\n\tvar geo = this.graph.getModel().getGeometry(clone);\n\t\n\tif (geo != null)\n\t{\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\tgeo.x = Math.round(point.x - geo.width / 2 - this.graph.panDx / s);\n\t\tgeo.y = Math.round(point.y - geo.height / 2 - this.graph.panDy / s);\n\n\t\t// Aligns with source if within certain tolerance\n\t\tvar tol = this.getAlignmentTolerance();\n\t\t\n\t\tif (tol > 0)\n\t\t{\n\t\t\tvar sourceState = this.graph.view.getState(source);\n\t\t\t\n\t\t\tif (sourceState != null)\n\t\t\t{\n\t\t\t\tvar x = sourceState.x / s - t.x;\n\t\t\t\tvar y = sourceState.y / s - t.y;\n\t\t\t\t\n\t\t\t\tif (Math.abs(x - geo.x) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.x = Math.round(x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(y - geo.y) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.y = Math.round(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn clone;\t\t\n};\n\n/**\n * Function: getAlignmentTolerance\n * \n * Returns the tolerance for aligning new targets to sources. This returns the grid size / 2.\n */\nmxConnectionHandler.prototype.getAlignmentTolerance = function(evt)\n{\n\treturn (this.graph.isGridEnabled()) ? this.graph.gridSize / 2 : this.graph.tolerance;\n};\n\n/**\n * Function: createEdge\n * \n * Creates and returns a new edge using <factoryMethod> if one exists. If\n * no factory method is defined, then a new default edge is returned. The\n * source and target arguments are informal, the actual connection is\n * setup later by the caller of this function.\n * \n * Parameters:\n * \n * value - Value to be used for creating the edge.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * style - Optional style from the preview edge.\n */\nmxConnectionHandler.prototype.createEdge = function(value, source, target, style)\n{\n\tvar edge = null;\n\t\n\t// Creates a new edge using the factoryMethod\n\tif (this.factoryMethod != null)\n\t{\n\t\tedge = this.factoryMethod(source, target, style);\n\t}\n\t\n\tif (edge == null)\n\t{\n\t\tedge = new mxCell(value || '');\n\t\tedge.setEdge(true);\n\t\tedge.setStyle(style);\n\t\t\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\tedge.setGeometry(geo);\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This should be\n * called on all instances. It is called automatically for the built-in\n * instance created for each <mxGraph>.\n */\nmxConnectionHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.graph.getView().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\t\n\tif (this.drillHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.drillHandler);\n\t\tthis.graph.getView().removeListener(this.drillHandler);\n\t\tthis.drillHandler = null;\n\t}\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n};\n\n__mxOutput.mxConnectionHandler = typeof mxConnectionHandler !== 'undefined' ? mxConnectionHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConstraintHandler\n *\n * Handles constraints on connection targets. This class is in charge of\n * showing fixed points when the mouse is over a vertex and handles constraints\n * to establish new connections.\n *\n * Constructor: mxConstraintHandler\n *\n * Constructs an new constraint handler.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and\n * returns the <mxCell> that represents the new edge.\n */\nfunction mxConstraintHandler(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Adds a graph model listener to update the current focus on changes\n\tthis.resetHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.currentFocus != null && this.graph.view.getState(this.currentFocus.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.redraw();\n\t\t}\n\t});\n\t\n\tthis.graph.model.addListener(mxEvent.CHANGE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE, this.resetHandler);\n\tthis.graph.addListener(mxEvent.ROOT, this.resetHandler);\n};\n\n/**\n * Variable: pointImage\n * \n * <mxImage> to be used as the image for fixed connection points.\n */\nmxConstraintHandler.prototype.pointImage = new mxImage(mxClient.imageBasePath + '/point.gif', 5, 5);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConstraintHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConstraintHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightColor\n * \n * Specifies the color for the highlight. Default is <mxConstants.DEFAULT_VALID_COLOR>.\n */\nmxConstraintHandler.prototype.highlightColor = mxConstants.DEFAULT_VALID_COLOR;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConstraintHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConstraintHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConstraintHandler.prototype.reset = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t}\n\t\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n\t\n\tthis.currentConstraint = null;\n\tthis.currentFocusArea = null;\n\tthis.currentPoint = null;\n\tthis.currentFocus = null;\n\tthis.focusPoints = null;\n};\n\n/**\n * Function: getTolerance\n * \n * Returns the tolerance to be used for intersecting connection points. This\n * implementation returns <mxGraph.tolerance>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose tolerance should be returned.\n */\nmxConstraintHandler.prototype.getTolerance = function(me)\n{\n\treturn this.graph.getTolerance();\n};\n\n/**\n * Function: getImageForConstraint\n * \n * Returns the tolerance to be used for intersecting connection points.\n */\nmxConstraintHandler.prototype.getImageForConstraint = function(state, constraint, point)\n{\n\treturn this.pointImage;\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given <mxMouseEvent> should be ignored in <update>. This\n * implementation always returns false.\n */\nmxConstraintHandler.prototype.isEventIgnored = function(me, source)\n{\n\treturn false;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored. This always returns false.\n */\nmxConstraintHandler.prototype.isStateIgnored = function(state, source)\n{\n\treturn false;\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the <focusIcons> if they exist.\n */\nmxConstraintHandler.prototype.destroyIcons = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t\tthis.focusPoints = null;\n\t}\n};\n\n/**\n * Function: destroyFocusHighlight\n * \n * Destroys the <focusHighlight> if one exists.\n */\nmxConstraintHandler.prototype.destroyFocusHighlight = function()\n{\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n};\n\n/**\n * Function: isKeepFocusEvent\n * \n * Returns true if the current focused state should not be changed for the given event.\n * This returns true if shift and alt are pressed.\n */\nmxConstraintHandler.prototype.isKeepFocusEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent());\n};\n\n/**\n * Function: getCellForEvent\n * \n * Returns the cell for the given event.\n */\nmxConstraintHandler.prototype.getCellForEvent = function(me, point)\n{\n\tvar cell = me.getCell();\n\t\n\t// Gets cell under actual point if different from event location\n\tif (cell == null && point != null && (me.getGraphX() != point.x || me.getGraphY() != point.y))\n\t{\n\t\tcell = this.graph.getCellAt(point.x, point.y);\n\t}\n\t\n\t// Uses connectable parent vertex if one exists\n\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\n\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t{\n\t\t\tcell = parent;\n\t\t}\n\t}\n\t\n\treturn (this.graph.isCellLocked(cell)) ? null : cell;\n};\n\n/**\n * Function: update\n * \n * Updates the state of this handler based on the given <mxMouseEvent>.\n * Source is a boolean indicating if the cell is a source or target.\n */\nmxConstraintHandler.prototype.update = function(me, source, existingEdge, point)\n{\n\tif (this.isEnabled() && !this.isEventIgnored(me))\n\t{\n\t\t// Lazy installation of mouseleave handler\n\t\tif (this.mouseleaveHandler == null && this.graph.container != null)\n\t\t{\n\t\t\tthis.mouseleaveHandler = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t});\n\n\t\t\tmxEvent.addListener(this.graph.container, 'mouseleave', this.resetHandler);\t\n\t\t}\n\t\t\n\t\tvar tol = this.getTolerance(me);\n\t\tvar x = (point != null) ? point.x : me.getGraphX();\n\t\tvar y = (point != null) ? point.y : me.getGraphY();\n\t\tvar grid = new mxRectangle(x - tol, y - tol, 2 * tol, 2 * tol);\n\t\tvar mouse = new mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol);\n\t\tvar state = this.graph.view.getState(this.getCellForEvent(me, point));\n\n\t\t// Keeps focus icons visible while over vertex bounds and no other cell under mouse or shift is pressed\n\t\tif (!this.isKeepFocusEvent(me) && (this.currentFocusArea == null || this.currentFocus == null ||\n\t\t\t(state != null) || !this.graph.getModel().isVertex(this.currentFocus.cell) ||\n\t\t\t!mxUtils.intersects(this.currentFocusArea, mouse)) && (state != this.currentFocus))\n\t\t{\n\t\t\tthis.currentFocusArea = null;\n\t\t\tthis.currentFocus = null;\n\t\t\tthis.setFocus(me, state, source);\n\t\t}\n\n\t\tthis.currentConstraint = null;\n\t\tthis.currentPoint = null;\n\t\tvar minDistSq = null;\n\t\t\n\t\tif (this.focusIcons != null && this.constraints != null &&\n\t\t\t(state == null || this.currentFocus == state))\n\t\t{\n\t\t\tvar cx = mouse.getCenterX();\n\t\t\tvar cy = mouse.getCenterY();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tvar dx = cx - this.focusIcons[i].bounds.getCenterX();\n\t\t\t\tvar dy = cy - this.focusIcons[i].bounds.getCenterY();\n\t\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\t\n\t\t\t\tif ((this.intersects(this.focusIcons[i], mouse, source, existingEdge) || (point != null &&\n\t\t\t\t\tthis.intersects(this.focusIcons[i], grid, source, existingEdge))) &&\n\t\t\t\t\t(minDistSq == null || tmp < minDistSq))\n\t\t\t\t{\n\t\t\t\t\tthis.currentConstraint = this.constraints[i];\n\t\t\t\t\tthis.currentPoint = this.focusPoints[i];\n\t\t\t\t\tminDistSq = tmp;\n\t\t\t\t\t\n\t\t\t\t\tvar tmp = this.focusIcons[i].bounds.clone();\n\t\t\t\t\ttmp.grow(mxConstants.HIGHLIGHT_SIZE + 1);\n\t\t\t\t\ttmp.width -= 1;\n\t\t\t\t\ttmp.height -= 1;\n\t\t\t\t\t\n\t\t\t\t\tif (this.focusHighlight == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar hl = this.createHighlightShape();\n\t\t\t\t\t\thl.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\t\t\t\thl.pointerEvents = false;\n\n\t\t\t\t\t\thl.init(this.graph.getView().getOverlayPane());\n\t\t\t\t\t\tthis.focusHighlight = hl;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\tmxEvent.redirectMouseEvents(hl.node, this.graph, getState);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.focusHighlight.bounds = tmp;\n\t\t\t\t\tthis.focusHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.currentConstraint == null)\n\t\t{\n\t\t\tthis.destroyFocusHighlight();\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.currentConstraint = null;\n\t\tthis.currentFocus = null;\n\t\tthis.currentPoint = null;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.redraw = function()\n{\n\tif (this.currentFocus != null && this.constraints != null && this.focusIcons != null)\n\t{\n\t\tvar state = this.graph.view.getState(this.currentFocus.cell);\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tthis.focusIcons[i].bounds = bounds;\n\t\t\tthis.focusIcons[i].redraw();\n\t\t\tthis.currentFocusArea.add(this.focusIcons[i].bounds);\n\t\t\tthis.focusPoints[i] = cp;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: setFocus\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.setFocus = function(me, state, source)\n{\n\tthis.constraints = (state != null && !this.isStateIgnored(state, source) &&\n\t\tthis.graph.isCellConnectable(state.cell)) ? ((this.isEnabled()) ?\n\t\t(this.graph.getAllConnectionConstraints(state, source) || []) : []) : null;\n\n\t// Only uses cells which have constraints\n\tif (this.constraints != null)\n\t{\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tif (this.focusIcons != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tthis.focusIcons[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tthis.focusIcons = null;\n\t\t\tthis.focusPoints = null;\n\t\t}\n\t\t\n\t\tthis.focusPoints = [];\n\t\tthis.focusIcons = [];\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar src = img.src;\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tvar icon = new mxImageShape(bounds, src);\n\t\t\ticon.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\ticon.preserveImageAspect = false;\n\t\t\ticon.init(this.graph.getView().getDecoratorPane());\n\t\t\t\n\t\t\t// Fixes lost event tracking for images in quirks / IE8 standards\n\t\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(icon.node, 'dragstart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// Move the icon behind all other overlays\n\t\t\tif (icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\n\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t});\n\t\t\t\n\t\t\ticon.redraw();\n\n\t\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState);\n\t\t\tthis.currentFocusArea.add(icon.bounds);\n\t\t\tthis.focusIcons.push(icon);\n\t\t\tthis.focusPoints.push(cp);\n\t\t}\n\t\t\n\t\tthis.currentFocusArea.grow(this.getTolerance(me));\n\t}\n\telse\n\t{\n\t\tthis.destroyIcons();\n\t\tthis.destroyFocusHighlight();\n\t}\n};\n\n/**\n * Function: createHighlightShape\n * \n * Create the shape used to paint the highlight.\n * \n * Returns true if the given icon intersects the given point.\n */\nmxConstraintHandler.prototype.createHighlightShape = function()\n{\n\tvar hl = new mxRectangleShape(null, this.highlightColor, this.highlightColor, mxConstants.HIGHLIGHT_STROKEWIDTH);\n\thl.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\t\n\treturn hl;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given icon intersects the given rectangle.\n */\nmxConstraintHandler.prototype.intersects = function(icon, mouse, source, existingEdge)\n{\n\treturn mxUtils.intersects(icon.bounds, mouse);\n};\n\n/**\n * Function: destroy\n * \n * Destroy this handler.\n */\nmxConstraintHandler.prototype.destroy = function()\n{\n\tthis.reset();\n\t\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.graph.model.removeListener(this.resetHandler);\n\t\tthis.graph.view.removeListener(this.resetHandler);\n\t\tthis.graph.removeListener(this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.mouseleaveHandler != null && this.graph.container != null)\n\t{\n\t\tmxEvent.removeListener(this.graph.container, 'mouseleave', this.mouseleaveHandler);\n\t\tthis.mouseleaveHandler = null;\n\t}\n};\n\n__mxOutput.mxConstraintHandler = typeof mxConstraintHandler !== 'undefined' ? mxConstraintHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxRubberband\n * \n * Event handler that selects rectangular regions. This is not built-into\n * <mxGraph>. To enable rubberband selection in a graph, use the following code.\n * \n * Example:\n * \n * (code)\n * var rubberband = new mxRubberband(graph);\n * (end)\n * \n * Constructor: mxRubberband\n * \n * Constructs an event handler that selects rectangular regions in the graph\n * using rubberband selection.\n */\nfunction mxRubberband(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force rubberband event\n\t\tthis.forceRubberbandHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForceRubberbandEvent(me))\n\t\t\t{\n\t\t\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\t\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\t\t\torigin.x -= offset.x;\n\t\t\t\torigin.y -= offset.y;\n\t\t\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\t\t\t\tme.consume(false);\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forceRubberbandHandler);\n\t\t\n\t\t// Repaints the marquee after autoscroll\n\t\tthis.panHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.repaint();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.first != null)\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: defaultOpacity\n * \n * Specifies the default opacity to be used for the rubberband div. Default\n * is 20.\n */\nmxRubberband.prototype.defaultOpacity = 20;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxRubberband.prototype.enabled = true;\n\n/**\n * Variable: div\n * \n * Holds the DIV element which is currently visible.\n */\nmxRubberband.prototype.div = null;\n\n/**\n * Variable: sharedDiv\n * \n * Holds the DIV element which is used to display the rubberband.\n */\nmxRubberband.prototype.sharedDiv = null;\n\n/**\n * Variable: currentX\n * \n * Holds the value of the x argument in the last call to <update>.\n */\nmxRubberband.prototype.currentX = 0;\n\n/**\n * Variable: currentY\n * \n * Holds the value of the y argument in the last call to <update>.\n */\nmxRubberband.prototype.currentY = 0;\n\n/**\n * Variable: fadeOut\n * \n * Optional fade out effect. Default is false.\n */\nmxRubberband.prototype.fadeOut = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxRubberband.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation updates\n * <enabled>.\n */\nmxRubberband.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isForceRubberbandEvent\n * \n * Returns true if the given <mxMouseEvent> should start rubberband selection.\n * This implementation returns true if the alt key is pressed.\n */\nmxRubberband.prototype.isForceRubberbandEvent = function(me)\n{\n\treturn mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxRubberband.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() == null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\n\t\t// Does not prevent the default for this event so that the\n\t\t// event processing chain is still executed even if we start\n\t\t// rubberbanding. This is required eg. in ExtJs to hide the\n\t\t// current context menu. In mouseMove we'll make sure we're\n\t\t// not selecting anything while we're rubberbanding.\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: start\n * \n * Sets the start point for the rubberband selection.\n */\nmxRubberband.prototype.start = function(x, y)\n{\n\tthis.first = new mxPoint(x, y);\n\n\tvar container = this.graph.container;\n\t\n\tfunction createMouseEvent(evt)\n\t{\n\t\tvar me = new mxMouseEvent(evt);\n\t\tvar pt = mxUtils.convertPoint(container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x;\n\t\tme.graphY = pt.y;\n\t\t\n\t\treturn me;\n\t};\n\n\tthis.dragHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseMove(this.graph, createMouseEvent(evt));\n\t});\n\n\tthis.dropHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseUp(this.graph, createMouseEvent(evt));\n\t});\n\n\t// Workaround for rubberband stopping if the mouse leaves the container in Firefox\n\tif (mxClient.IS_FF)\n\t{\n\t\tmxEvent.addGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating therubberband selection.\n */\nmxRubberband.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.first != null)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tvar x = me.getX() + origin.x;\n\t\tvar y = me.getY() + origin.y;\n\t\tvar dx = this.first.x - x;\n\t\tvar dy = this.first.y - y;\n\t\tvar tol = this.graph.tolerance;\n\t\t\n\t\tif (this.div != null || Math.abs(dx) > tol ||  Math.abs(dy) > tol)\n\t\t{\n\t\t\tif (this.div == null)\n\t\t\t{\n\t\t\t\tthis.div = this.createShape();\n\t\t\t}\n\t\t\t\n\t\t\t// Clears selection while rubberbanding. This is required because\n\t\t\t// the event is not consumed in mouseDown.\n\t\t\tmxUtils.clearSelection();\n\t\t\t\n\t\t\tthis.update(x, y);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates the rubberband selection shape.\n */\nmxRubberband.prototype.createShape = function()\n{\n\tif (this.sharedDiv == null)\n\t{\n\t\tthis.sharedDiv = document.createElement('div');\n\t\tthis.sharedDiv.className = 'mxRubberband';\n\t\tmxUtils.setOpacity(this.sharedDiv, this.defaultOpacity);\n\t}\n\n\tthis.graph.container.appendChild(this.sharedDiv);\n\tvar result = this.sharedDiv;\n\t\n\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t{\n\t\tthis.sharedDiv = null;\n\t}\n\t\t\n\treturn result;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this handler is active.\n */\nmxRubberband.prototype.isActive = function(sender, me)\n{\n\treturn this.div != null && this.div.style.display != 'none';\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by selecting the region of the rubberband using\n * <mxGraph.selectRegion>.\n */\nmxRubberband.prototype.mouseUp = function(sender, me)\n{\n\tvar active = this.isActive();\n\tthis.reset();\n\t\n\tif (active)\n\t{\n\t\tthis.execute(me.getEvent());\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: execute\n * \n * Resets the state of this handler and selects the current region\n * for the given event.\n */\nmxRubberband.prototype.execute = function(evt)\n{\n\tvar rect = new mxRectangle(this.x, this.y, this.width, this.height);\n\tthis.graph.selectRegion(rect, evt);\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the rubberband selection.\n */\nmxRubberband.prototype.reset = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t\t{\n\t\t\tvar temp = this.div;\n\t\t\tmxUtils.setPrefixedStyle(temp.style, 'transition', 'all 0.2s linear');\n\t\t\ttemp.style.pointerEvents = 'none';\n\t\t\ttemp.style.opacity = 0;\n\t\t    \n\t\t    window.setTimeout(function()\n\t\t    \t{\n\t\t    \t\ttemp.parentNode.removeChild(temp);\n\t\t    \t}, 200);\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t}\n\n\tmxEvent.removeGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\tthis.dragHandler = null;\n\tthis.dropHandler = null;\n\t\n\tthis.currentX = 0;\n\tthis.currentY = 0;\n\tthis.first = null;\n\tthis.div = null;\n};\n\n/**\n * Function: update\n * \n * Sets <currentX> and <currentY> and calls <repaint>.\n */\nmxRubberband.prototype.update = function(x, y)\n{\n\tthis.currentX = x;\n\tthis.currentY = y;\n\t\n\tthis.repaint();\n};\n\n/**\n * Function: repaint\n * \n * Computes the bounding box and updates the style of the <div>.\n */\nmxRubberband.prototype.repaint = function()\n{\n\tif (this.div != null)\n\t{\n\t\tvar x = this.currentX - this.graph.panDx;\n\t\tvar y = this.currentY - this.graph.panDy;\n\t\t\n\t\tthis.x = Math.min(this.first.x, x);\n\t\tthis.y = Math.min(this.first.y, y);\n\t\tthis.width = Math.max(this.first.x, x) - this.x;\n\t\tthis.height =  Math.max(this.first.y, y) - this.y;\n\n\t\tvar dx = (mxClient.IS_VML) ? this.graph.panDx : 0;\n\t\tvar dy = (mxClient.IS_VML) ? this.graph.panDy : 0;\n\t\t\n\t\tthis.div.style.left = (this.x + dx) + 'px';\n\t\tthis.div.style.top = (this.y + dy) + 'px';\n\t\tthis.div.style.width = Math.max(1, this.width) + 'px';\n\t\tthis.div.style.height = Math.max(1, this.height) + 'px';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called, it is called automatically when the\n * window unloads.\n */\nmxRubberband.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\tthis.graph.removeMouseListener(this);\n\t\tthis.graph.removeListener(this.forceRubberbandHandler);\n\t\tthis.graph.removeListener(this.panHandler);\n\t\tthis.reset();\n\t\t\n\t\tif (this.sharedDiv != null)\n\t\t{\n\t\t\tthis.sharedDiv = null;\n\t\t}\n\t}\n};\n\n__mxOutput.mxRubberband = typeof mxRubberband !== 'undefined' ? mxRubberband : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHandle\n * \n * Implements a single custom handle for vertices.\n * \n * Constructor: mxHandle\n * \n * Constructs a new handle for the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxHandle(state, cursor, image)\n{\n\tthis.graph = state.view.graph;\n\tthis.state = state;\n\tthis.cursor = (cursor != null) ? cursor : this.cursor;\n\tthis.image = (image != null) ? image : this.image;\n\tthis.init();\n};\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used for this handle. Default is 'default'.\n */\nmxHandle.prototype.cursor = 'default';\n\n/**\n * Variable: image\n * \n * Specifies the <mxImage> to be used to render the handle. Default is null.\n */\nmxHandle.prototype.image = null;\n\n/**\n * Variable: ignoreGrid\n * \n * Default is false.\n */\nmxHandle.prototype.ignoreGrid = false;\n\n/**\n * Function: getPosition\n * \n * Hook for subclassers to return the current position of the handle.\n */\nmxHandle.prototype.getPosition = function(bounds) { };\n\n/**\n * Function: setPosition\n * \n * Hooks for subclassers to update the style in the <state>.\n */\nmxHandle.prototype.setPosition = function(bounds, pt, me) { };\n\n/**\n * Function: execute\n * \n * Hook for subclassers to execute the handle.\n */\nmxHandle.prototype.execute = function() { };\n\n/**\n * Function: copyStyle\n * \n * Sets the cell style with the given name to the corresponding value in <state>.\n */\nmxHandle.prototype.copyStyle = function(key)\n{\n\tthis.graph.setCellStyles(key, this.state.style[key], [this.state.cell]);\n};\n\n/**\n * Function: processEvent\n * \n * Processes the given <mxMouseEvent> and invokes <setPosition>.\n */\nmxHandle.prototype.processEvent = function(me)\n{\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\tvar pt = new mxPoint(me.getGraphX() / scale - tr.x, me.getGraphY() / scale - tr.y);\n\t\n\t// Center shape on mouse cursor\n\tif (this.shape != null && this.shape.bounds != null)\n\t{\n\t\tpt.x -= this.shape.bounds.width / scale / 4;\n\t\tpt.y -= this.shape.bounds.height / scale / 4;\n\t}\n\n\t// Snaps to grid for the rotated position then applies the rotation for the direction after that\n\tvar alpha1 = -mxUtils.toRadians(this.getRotation());\n\tvar alpha2 = -mxUtils.toRadians(this.getTotalRotation()) - alpha1;\n\tpt = this.flipPoint(this.rotatePoint(this.snapPoint(this.rotatePoint(pt, alpha1),\n\t\t\tthis.ignoreGrid || !this.graph.isGridEnabledEvent(me.getEvent())), alpha2));\n\tthis.setPosition(this.state.getPaintBounds(), pt, me);\n\tthis.positionChanged();\n\tthis.redraw();\n};\n\n/**\n * Function: positionChanged\n * \n * Called after <setPosition> has been called in <processEvent>. This repaints\n * the state using <mxCellRenderer>.\n */\nmxHandle.prototype.positionChanged = function()\n{\n\tif (this.state.text != null)\n\t{\n\t\tthis.state.text.apply(this.state);\n\t}\n\t\n\tif (this.state.shape != null)\n\t{\n\t\tthis.state.shape.apply(this.state);\n\t}\n\t\n\tthis.graph.cellRenderer.redraw(this.state, true);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation defined in the style of the cell.\n */\nmxHandle.prototype.getRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: getTotalRotation\n * \n * Returns the rotation from the style and the rotation from the direction of\n * the cell.\n */\nmxHandle.prototype.getTotalRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getShapeRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: init\n * \n * Creates and initializes the shapes required for this handle.\n */\nmxHandle.prototype.init = function()\n{\n\tvar html = this.isHtmlRequired();\n\t\n\tif (this.image != null)\n\t{\n\t\tthis.shape = new mxImageShape(new mxRectangle(0, 0, this.image.width, this.image.height), this.image.src);\n\t\tthis.shape.preserveImageAspect = false;\n\t}\n\telse\n\t{\n\t\tthis.shape = this.createShape(html);\n\t}\n\t\n\tthis.initShape(html);\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for this handle.\n */\nmxHandle.prototype.createShape = function(html)\n{\n\tvar bounds = new mxRectangle(0, 0, mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE);\n\t\n\treturn new mxRectangleShape(bounds, mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n};\n\n/**\n * Function: initShape\n * \n * Initializes <shape> and sets its cursor.\n */\nmxHandle.prototype.initShape = function(html)\n{\n\tif (html && this.shape.isHtmlAllowed())\n\t{\n\t\tthis.shape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tthis.shape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\n\t\tif (this.cursor != null)\n\t\t{\n\t\t\tthis.shape.init(this.graph.getView().getOverlayPane());\n\t\t}\n\t}\n\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\tthis.shape.node.style.cursor = this.cursor;\n};\n\n/**\n * Function: redraw\n * \n * Renders the shape for this handle.\n */\nmxHandle.prototype.redraw = function()\n{\n\tif (this.shape != null && this.state.shape != null)\n\t{\n\t\tvar pt = this.getPosition(this.state.getPaintBounds());\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(this.getTotalRotation());\n\t\t\tpt = this.rotatePoint(this.flipPoint(pt), alpha);\n\t\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar tr = this.graph.view.translate;\n\t\t\tthis.shape.bounds.x = Math.floor((pt.x + tr.x) * scale - this.shape.bounds.width / 2);\n\t\t\tthis.shape.bounds.y = Math.floor((pt.y + tr.y) * scale - this.shape.bounds.height / 2);\n\t\t\t\n\t\t\t// Needed to force update of text bounds\n\t\t\tthis.shape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHtmlRequired\n * \n * Returns true if this handle should be rendered in HTML. This returns true if\n * the text node is in the graph container.\n */\nmxHandle.prototype.isHtmlRequired = function()\n{\n\treturn this.state.text != null && this.state.text.node.parentNode == this.graph.container;\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the point by the given angle.\n */\nmxHandle.prototype.rotatePoint = function(pt, alpha)\n{\n\tvar bounds = this.state.getCellBounds();\n\tvar cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\tvar cos = Math.cos(alpha);\n\tvar sin = Math.sin(alpha); \n\n\treturn mxUtils.getRotatedPoint(pt, cos, sin, cx);\n};\n\n/**\n * Function: flipPoint\n * \n * Flips the given point vertically and/or horizontally.\n */\nmxHandle.prototype.flipPoint = function(pt)\n{\n\tif (this.state.shape != null)\n\t{\n\t\tvar bounds = this.state.getCellBounds();\n\t\t\n\t\tif (this.state.shape.flipH)\n\t\t{\n\t\t\tpt.x = 2 * bounds.x + bounds.width - pt.x;\n\t\t}\n\t\t\n\t\tif (this.state.shape.flipV)\n\t\t{\n\t\t\tpt.y = 2 * bounds.y + bounds.height - pt.y;\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: snapPoint\n * \n * Snaps the given point to the grid if ignore is false. This modifies\n * the given point in-place and also returns it.\n */\nmxHandle.prototype.snapPoint = function(pt, ignore)\n{\n\tif (!ignore)\n\t{\n\t\tpt.x = this.graph.snap(pt.x);\n\t\tpt.y = this.graph.snap(pt.y);\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides this handle.\n */\nmxHandle.prototype.setVisible = function(visible)\n{\n\tif (this.shape != null && this.shape.node != null)\n\t{\n\t\tthis.shape.node.style.display = (visible) ? '' : 'none';\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handle by setting its visibility to true.\n */\nmxHandle.prototype.reset = function()\n{\n\tthis.setVisible(true);\n\tthis.state.style = this.graph.getCellStyle(this.state.cell);\n\tthis.positionChanged();\n};\n\n/**\n * Function: destroy\n * \n * Destroys this handle.\n */\nmxHandle.prototype.destroy = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxHandle = typeof mxHandle !== 'undefined' ? mxHandle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxVertexHandler\n * \n * Event handler for resizing cells. This handler is automatically created in\n * <mxGraph.createHandler>.\n * \n * Constructor: mxVertexHandler\n * \n * Constructs an event handler that allows to resize vertices\n * and groups.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be resized.\n */\nfunction mxVertexHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tif (this.livePreview && this.index != null)\n\t\t\t{\n\t\t\t\t// Redraws the live preview\n\t\t\t\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\t\t\t\n\t\t\t\t// Redraws connected edges\n\t\t\t\tthis.state.view.invalidate(this.state.cell);\n\t\t\t\tthis.state.invalid = false;\n\t\t\t\tthis.state.view.validate();\n\t\t\t}\n\t\t\t\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxVertexHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxVertexHandler.prototype.state = null;\n\n/**\n * Variable: singleSizer\n * \n * Specifies if only one sizer handle at the bottom, right corner should be\n * used. Default is false.\n */\nmxVertexHandler.prototype.singleSizer = false;\n\n/**\n * Variable: index\n * \n * Holds the index of the current handle.\n */\nmxVertexHandler.prototype.index = null;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE or\n * if <tolerance> > 0. Default is true.\n */\nmxVertexHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxVertexHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxVertexHandler.prototype.tolerance = 0;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if a rotation handle should be visible. Default is false.\n */\nmxVertexHandler.prototype.rotationEnabled = false;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxVertexHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: rotationRaster\n * \n * Specifies if rotation steps should be \"rasterized\" depening on the distance\n * to the handle. Default is true.\n */\nmxVertexHandler.prototype.rotationRaster = true;\n\n/**\n * Variable: rotationCursor\n * \n * Specifies the cursor for the rotation handle. Default is 'crosshair'.\n */\nmxVertexHandler.prototype.rotationCursor = 'crosshair';\n\n/**\n * Variable: livePreview\n * \n * Specifies if resize should change the cell in-place. This is an experimental\n * feature for non-touch devices. Default is false.\n */\nmxVertexHandler.prototype.livePreview = false;\n\n/**\n * Variable: manageSizers\n * \n * Specifies if sizers should be hidden and spaced if the vertex is small.\n * Default is false.\n */\nmxVertexHandler.prototype.manageSizers = false;\n\n/**\n * Variable: constrainGroupByChildren\n * \n * Specifies if the size of groups should be constrained by the children.\n * Default is false.\n */\nmxVertexHandler.prototype.constrainGroupByChildren = false;\n\n/**\n * Variable: rotationHandleVSpacing\n * \n * Vertical spacing for rotation icon. Default is -16.\n */\nmxVertexHandler.prototype.rotationHandleVSpacing = -16;\n\n/**\n * Variable: horizontalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset horizontally.\n */\nmxVertexHandler.prototype.horizontalOffset = 0;\n\n/**\n * Variable: verticalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset vertically.\n */\nmxVertexHandler.prototype.verticalOffset = 0;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\tthis.selectionBorder = this.createSelectionShape(this.bounds);\n\t// VML dialect required here for event transparency in IE\n\tthis.selectionBorder.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tthis.selectionBorder.pointerEvents = false;\n\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tthis.selectionBorder.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(this.selectionBorder.node, this.graph, this.state);\n\t\n\tif (this.graph.isCellMovable(this.state.cell))\n\t{\n\t\tthis.selectionBorder.setCursor(mxConstants.CURSOR_MOVABLE_VERTEX);\n\t}\n\n\t// Adds the sizer handles\n\tif (mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells)\n\t{\n\t\tvar resizable = this.graph.isCellResizable(this.state.cell);\n\t\tthis.sizers = [];\n\n\t\tif (resizable || (this.graph.isLabelMovable(this.state.cell) &&\n\t\t\tthis.state.width >= 2 && this.state.height >= 2))\n\t\t{\n\t\t\tvar i = 0;\n\n\t\t\tif (resizable)\n\t\t\t{\n\t\t\t\tif (!this.singleSizer)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers.push(this.createSizer('nw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('n-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('ne-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('w-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('e-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('sw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('s-resize', i++));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.sizers.push(this.createSizer('se-resize', i++));\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.model.getGeometry(this.state.cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative && !this.graph.isSwimlane(this.state.cell) &&\n\t\t\t\tthis.graph.isLabelMovable(this.state.cell))\n\t\t\t{\n\t\t\t\t// Marks this as the label handle for getHandleForEvent\n\t\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_LABEL_HANDLE, mxEvent.LABEL_HANDLE,\n\t\t\t\t\tmxConstants.LABEL_HANDLE_SIZE, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\t\tthis.sizers.push(this.labelShape);\n\t\t\t}\n\t\t}\n\t\telse if (this.graph.isCellMovable(this.state.cell) && !this.graph.isCellResizable(this.state.cell) &&\n\t\t\tthis.state.width < 2 && this.state.height < 2)\n\t\t{\n\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_MOVABLE_VERTEX,\n\t\t\t\tmxEvent.LABEL_HANDLE, null, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\tthis.sizers.push(this.labelShape);\n\t\t}\n\t}\n\t\n\t// Adds the rotation handler\n\tif (this.isRotationHandleVisible())\n\t{\n\t\tthis.rotationShape = this.createSizer(this.rotationCursor, mxEvent.ROTATION_HANDLE,\n\t\t\tmxConstants.HANDLE_SIZE + 3, mxConstants.HANDLE_FILLCOLOR);\n\t\tthis.sizers.push(this.rotationShape);\n\t}\n\n\tthis.customHandles = this.createCustomHandles();\n\tthis.redraw();\n\t\n\tif (this.constrainGroupByChildren)\n\t{\n\t\tthis.updateMinBounds();\n\t}\n};\n\n/**\n * Function: isRotationHandleVisible\n * \n * Returns true if the rotation handle should be showing.\n */\nmxVertexHandler.prototype.isRotationHandleVisible = function()\n{\n\treturn this.graph.isEnabled() && this.rotationEnabled && this.graph.isCellRotatable(this.state.cell) &&\n\t\t(mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells) &&\n\t\tthis.state.width >= 2 && this.state.height >= 2;\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the aspect ratio if the cell should be maintained.\n */\nmxVertexHandler.prototype.isConstrainedEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent()) || this.state.style[mxConstants.STYLE_ASPECT] == 'fixed';\n};\n\n/**\n * Function: isCenteredEvent\n * \n * Returns true if the center of the vertex should be maintained during the resize.\n */\nmxVertexHandler.prototype.isCenteredEvent = function(state, me)\n{\n\treturn false;\n};\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxVertexHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: updateMinBounds\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.updateMinBounds = function()\n{\n\tvar children = this.graph.getChildCells(this.state.cell);\n\t\n\tif (children.length > 0)\n\t{\n\t\tthis.minBounds = this.graph.view.getBounds(children);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tvar s = this.state.view.scale;\n\t\t\tvar t = this.state.view.translate;\n\n\t\t\tthis.minBounds.x -= this.state.x;\n\t\t\tthis.minBounds.y -= this.state.y;\n\t\t\tthis.minBounds.x /= s;\n\t\t\tthis.minBounds.y /= s;\n\t\t\tthis.minBounds.width /= s;\n\t\t\tthis.minBounds.height /= s;\n\t\t\tthis.x0 = this.state.x / s - t.x;\n\t\t\tthis.y0 = this.state.y / s - t.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: getSelectionBounds\n * \n * Returns the mxRectangle that defines the bounds of the selection\n * border.\n */\nmxVertexHandler.prototype.getSelectionBounds = function(state)\n{\n\treturn new mxRectangle(Math.round(state.x), Math.round(state.y), Math.round(state.width), Math.round(state.height));\n};\n\n/**\n * Function: createParentHighlightShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\treturn this.createSelectionShape(bounds);\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createSelectionShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(\n\t\tmxRectangle.fromRectangle(bounds),\n\t\tnull, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.VERTEX_SELECTION_COLOR>.\n */\nmxVertexHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.VERTEX_SELECTION_STROKEWIDTH>.\n */\nmxVertexHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.VERTEX_SELECTION_DASHED>.\n */\nmxVertexHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_DASHED;\n};\n\n/**\n * Function: createSizer\n * \n * Creates a sizer handle for the specified cursor and index and returns\n * the new <mxRectangleShape> that represents the handle.\n */\nmxVertexHandler.prototype.createSizer = function(cursor, index, size, fillColor)\n{\n\tsize = size || mxConstants.HANDLE_SIZE;\n\t\n\tvar bounds = new mxRectangle(0, 0, size, size);\n\tvar sizer = this.createSizerShape(bounds, index, fillColor);\n\n\tif (sizer.isHtmlAllowed() && this.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t{\n\t\tsizer.bounds.height -= 1;\n\t\tsizer.bounds.width -= 1;\n\t\tsizer.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tsizer.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tsizer.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tsizer.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(sizer.node, this.graph, this.state);\n\t\n\tif (this.graph.isEnabled())\n\t{\n\t\tsizer.setCursor(cursor);\n\t}\n\t\n\tif (!this.isSizerVisible(index))\n\t{\n\t\tsizer.visible = false;\n\t}\n\t\n\treturn sizer;\n};\n\n/**\n * Function: isSizerVisible\n * \n * Returns true if the sizer for the given index is visible.\n * This returns true for all given indices.\n */\nmxVertexHandler.prototype.isSizerVisible = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: createSizerShape\n * \n * Creates the shape used for the sizer handle for the specified bounds an\n * index. Only images and rectangles should be returned if support for HTML\n * labels with not foreign objects is required.\n */\nmxVertexHandler.prototype.createSizerShape = function(bounds, index, fillColor)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tbounds = new mxRectangle(bounds.x, bounds.y, this.handleImage.width, this.handleImage.height);\n\t\tvar shape = new mxImageShape(bounds, this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse if (index == mxEvent.ROTATION_HANDLE)\n\t{\n\t\treturn new mxEllipse(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangleShape(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createBounds\n * \n * Helper method to create an <mxRectangle> around the given centerpoint\n * with a width and height of 2*s or 6, if no s is given.\n */\nmxVertexHandler.prototype.moveSizerTo = function(shape, x, y)\n{\n\tif (shape != null)\n\t{\n\t\tshape.bounds.x = Math.floor(x - shape.bounds.width / 2);\n\t\tshape.bounds.y = Math.floor(y - shape.bounds.height / 2);\n\t\t\n\t\t// Fixes visible inactive handles in VML\n\t\tif (shape.node != null && shape.node.style.display != 'none')\n\t\t{\n\t\t\tshape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event. This returns the index\n * of the sizer from where the event originated or <mxEvent.LABEL_INDEX>.\n */\nmxVertexHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\n\tfunction checkShape(shape)\n\t{\n\t\treturn shape != null && (me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit) &&\n\t\t\tshape.node.style.display != 'none' && shape.node.style.visibility != 'hidden'));\n\t}\n\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (checkShape(this.rotationShape))\n\t{\n\t\treturn mxEvent.ROTATION_HANDLE;\n\t}\n\telse if (checkShape(this.labelShape))\n\t{\n\t\treturn mxEvent.LABEL_HANDLE;\n\t}\n\t\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.sizers[i]))\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxVertexHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event if a handle has been clicked. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxVertexHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 0;\n\t\n\tif (!me.isConsumed() && this.graph.isEnabled() && (tol > 0 || me.getState() == this.state))\n\t{\n\t\tvar handle = this.getHandleForEvent(me);\n\n\t\tif (handle != null)\n\t\t{\n\t\t\tthis.start(me.getGraphX(), me.getGraphY(), handle);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: isLivePreviewBorder\n * \n * Called if <livePreview> is enabled to check if a border should be painted.\n * This implementation returns true if the shape is transparent.\n */\nmxVertexHandler.prototype.isLivePreviewBorder = function()\n{\n\treturn this.state.shape != null && this.state.shape.fill == null && this.state.shape.stroke == null;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.start = function(x, y, index)\n{\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.livePreviewActive = this.livePreview && this.graph.model.getChildCount(this.state.cell) == 0;\n\t\tthis.inTolerance = true;\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t\tthis.index = index;\n\t\tthis.startX = x;\n\t\tthis.startY = y;\n\t\t\n\t\t// Saves reference to parent state\n\t\tvar model = this.state.view.graph.model;\n\t\tvar parent = model.getParent(this.state.cell);\n\t\t\n\t\tif (this.state.view.currentRoot != parent && (model.isVertex(parent) || model.isEdge(parent)))\n\t\t{\n\t\t\tthis.parentState = this.state.view.graph.view.getState(parent);\n\t\t}\n\t\t\n\t\t// Creates a preview that can be on top of any HTML label\n\t\tthis.selectionBorder.node.style.display = (index == mxEvent.ROTATION_HANDLE) ? 'inline' : 'none';\n\t\t\n\t\t// Creates the border that represents the new bounds\n\t\tif (!this.livePreviewActive || this.isLivePreviewBorder())\n\t\t{\n\t\t\tthis.preview = this.createSelectionShape(this.bounds);\n\t\t\t\n\t\t\tif (!(mxClient.IS_SVG && Number(this.state.style[mxConstants.STYLE_ROTATION] || '0') != 0) &&\n\t\t\t\tthis.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t\t\t{\n\t\t\t\tthis.preview.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\t\tthis.preview.init(this.graph.container);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.preview.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.preview.init(this.graph.view.getOverlayPane());\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t{\n\t\t\t// With the rotation handle in a corner, need the angle and distance\n\t\t\tvar pos = this.getRotationHandlePosition();\n\t\t\t\n\t\t\tvar dx = pos.x - this.state.getCenterX();\n\t\t\tvar dy = pos.y - this.state.getCenterY();\n\t\t\t\n\t\t\tthis.startAngle = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : ((dy < 0) ? 180 : 0);\n\t\t\tthis.startDist = Math.sqrt(dx * dx + dy * dy);\n\t\t}\n\n\t\t// Prepares the handles for live preview\n\t\tif (this.livePreviewActive)\n\t\t{\n\t\t\tthis.hideSizers();\n\t\t\t\n\t\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tthis.rotationShape.node.style.display = '';\n\t\t\t}\n\t\t\telse if (index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.labelShape.node.style.display = '';\n\t\t\t}\n\t\t\telse if (this.sizers != null && this.sizers[index] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[index].node.style.display = '';\n\t\t\t}\n\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].setVisible(true);\n\t\t\t}\n\t\t\t\n\t\t\t// Gets the array of connected edge handlers for redrawing\n\t\t\tvar edges = this.graph.getEdges(this.state.cell);\n\t\t\tthis.edgeHandlers = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(edges[i]);\n\t\t\t\t\n\t\t\t\tif (handler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.edgeHandlers.push(handler);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxVertexHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: hideSizers\n * \n * Hides all sizers except.\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.hideSizers = function()\n{\n\tthis.setHandlesVisible(false);\n};\n\n/**\n * Function: checkTolerance\n * \n * Checks if the coordinates for the given event are within the\n * <mxGraph.tolerance>. If the event is a mouse event then the tolerance is\n * ignored.\n */\nmxVertexHandler.prototype.checkTolerance = function(me)\n{\n\tif (this.inTolerance && this.startX != null && this.startY != null)\n\t{\n\t\tif (mxEvent.isMouseEvent(me.getEvent()) ||\n\t\t\tMath.abs(me.getGraphX() - this.startX) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.startY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxVertexHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxVertexHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundAngle\n * \n * Hook for rounding the angle. This uses Math.round.\n */\nmxVertexHandler.prototype.roundAngle = function(angle)\n{\n\treturn Math.round(angle * 10) / 10;\n};\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxVertexHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 100) / 100;\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxVertexHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.index != null)\n\t{\n\t\t// Checks tolerance for ignoring single clicks\n\t\tthis.checkTolerance(me);\n\n\t\tif (!this.inTolerance)\n\t\t{\n\t\t\tif (this.index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].active = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.moveLabel(me);\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tthis.rotateVertex(me);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.resizeVertex(me);\n\t\t\t}\n\n\t\t\tthis.updateHint(me);\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (!this.graph.isMouseDown && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.moveLabel = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\t\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t}\n\n\tvar index = (this.rotationShape != null) ? this.sizers.length - 2 : this.sizers.length - 1;\n\tthis.moveSizerTo(this.sizers[index], point.x, point.y);\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.rotateVertex = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar dx = this.state.x + this.state.width / 2 - point.x;\n\tvar dy = this.state.y + this.state.height / 2 - point.y;\n\tthis.currentAlpha = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : ((dy < 0) ? 180 : 0);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.currentAlpha -= 180;\n\t}\n\t\n\tthis.currentAlpha -= this.startAngle;\n\t\n\t// Rotation raster\n\tif (this.rotationRaster && this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar dx = point.x - this.state.getCenterX();\n\t\tvar dy = point.y - this.state.getCenterY();\n\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (dist - this.startDist < 2)\n\t\t{\n\t\t\traster = 15;\n\t\t}\n\t\telse if (dist - this.startDist < 25)\n\t\t{\n\t\t\traster = 5;\n\t\t}\n\t\telse\n\t\t{\n\t\t\traster = 1;\n\t\t}\n\t\t\n\t\tthis.currentAlpha = Math.round(this.currentAlpha / raster) * raster;\n\t}\n\telse\n\t{\n\t\tthis.currentAlpha = this.roundAngle(this.currentAlpha);\n\t}\n\n\tthis.selectionBorder.rotation = this.currentAlpha;\n\tthis.selectionBorder.redraw();\n\t\t\t\t\t\n\tif (this.livePreviewActive)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.resizeVertex = function(me)\n{\n\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\tvar cos = Math.cos(-alpha);\n\tvar sin = Math.sin(-alpha);\n\t\n\tvar dx = point.x - this.startX;\n\tvar dy = point.y - this.startY;\n\n\t// Rotates vector for mouse gesture\n\tvar tx = cos * dx - sin * dy;\n\tvar ty = sin * dx + cos * dy;\n\t\n\tdx = tx;\n\tdy = ty;\n\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tthis.unscaledBounds = this.union(geo, dx / scale, dy / scale, this.index,\n\t\tthis.graph.isGridEnabledEvent(me.getEvent()), 1,\n\t\tnew mxPoint(0, 0), this.isConstrainedEvent(me),\n\t\tthis.isCenteredEvent(this.state, me));\n\t\n\t// Keeps vertex within maximum graph or parent bounds\n\tif (!geo.relative)\n\t{\n\t\tvar max = this.graph.getMaximumGraphBounds();\n\t\t\n\t\t// Handles child cells\n\t\tif (max != null && this.parentState != null)\n\t\t{\n\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\n\t\t\tmax.x -= (this.parentState.x - tr.x * scale) / scale;\n\t\t\tmax.y -= (this.parentState.y - tr.y * scale) / scale;\n\t\t}\n\t\t\n\t\tif (this.graph.isConstrainChild(this.state.cell))\n\t\t{\n\t\t\tvar tmp = this.graph.getCellContainmentArea(this.state.cell);\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar overlap = this.graph.getOverlap(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (overlap > 0)\n\t\t\t\t{\n\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\n\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (max == null)\n\t\t\t\t{\n\t\t\t\t\tmax = tmp;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (max != null)\n\t\t{\n\t\t\tif (this.unscaledBounds.x < max.x)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= max.x - this.unscaledBounds.x;\n\t\t\t\tthis.unscaledBounds.x = max.x;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y < max.y)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= max.y - this.unscaledBounds.y;\n\t\t\t\tthis.unscaledBounds.y = max.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.x + this.unscaledBounds.width > max.x + max.width)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= this.unscaledBounds.x +\n\t\t\t\t\tthis.unscaledBounds.width - max.x - max.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y + this.unscaledBounds.height > max.y + max.height)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= this.unscaledBounds.y +\n\t\t\t\t\tthis.unscaledBounds.height - max.y - max.height;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar old = this.bounds;\n\tthis.bounds = new mxRectangle(((this.parentState != null) ? this.parentState.x : tr.x * scale) +\n\t\t(this.unscaledBounds.x) * scale, ((this.parentState != null) ? this.parentState.y : tr.y * scale) +\n\t\t(this.unscaledBounds.y) * scale, this.unscaledBounds.width * scale, this.unscaledBounds.height * scale);\n\n\tif (geo.relative && this.parentState != null)\n\t{\n\t\tthis.bounds.x += this.state.x - this.parentState.x;\n\t\tthis.bounds.y += this.state.y - this.parentState.y;\n\t}\n\n\tcos = Math.cos(alpha);\n\tsin = Math.sin(alpha);\n\t\n\tvar c2 = new mxPoint(this.bounds.getCenterX(), this.bounds.getCenterY());\n\n\tvar dx = c2.x - ct.x;\n\tvar dy = c2.y - ct.y;\n\t\n\tvar dx2 = cos * dx - sin * dy;\n\tvar dy2 = sin * dx + cos * dy;\n\t\n\tvar dx3 = dx2 - dx;\n\tvar dy3 = dy2 - dy;\n\t\n\tvar dx4 = this.bounds.x - this.state.x;\n\tvar dy4 = this.bounds.y - this.state.y;\n\t\n\tvar dx5 = cos * dx4 - sin * dy4;\n\tvar dy5 = sin * dx4 + cos * dy4;\n\t\n\tthis.bounds.x += dx3;\n\tthis.bounds.y += dy3;\n\t\n\t// Rounds unscaled bounds to int\n\tthis.unscaledBounds.x = this.roundLength(this.unscaledBounds.x + dx3 / scale);\n\tthis.unscaledBounds.y = this.roundLength(this.unscaledBounds.y + dy3 / scale);\n\tthis.unscaledBounds.width = this.roundLength(this.unscaledBounds.width);\n\tthis.unscaledBounds.height = this.roundLength(this.unscaledBounds.height);\n\t\n\t// Shifts the children according to parent offset\n\tif (!this.graph.isCellCollapsed(this.state.cell) && (dx3 != 0 || dy3 != 0))\n\t{\n\t\tthis.childOffsetX = this.state.x - this.bounds.x + dx5;\n\t\tthis.childOffsetY = this.state.y - this.bounds.y + dy5;\n\t}\n\telse\n\t{\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t}\n\t\t\t\n\tif (!old.equals(this.bounds))\n\t{\t\n\t\tif (this.livePreviewActive)\n\t\t{\n\t\t\tthis.updateLivePreview(me);\n\t\t}\n\t\t\n\t\tif (this.preview != null)\n\t\t{\n\t\t\tthis.drawPreview();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateParentHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Repaints the live preview.\n */\nmxVertexHandler.prototype.updateLivePreview = function(me)\n{\n\t// TODO: Apply child offset to children in live preview\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\t\n\t// Saves current state\n\tvar tempState = this.state.clone();\n\n\t// Temporarily changes size and origin\n\tthis.state.x = this.bounds.x;\n\tthis.state.y = this.bounds.y;\n\tthis.state.origin = new mxPoint(this.state.x / scale - tr.x, this.state.y / scale - tr.y);\n\tthis.state.width = this.bounds.width;\n\tthis.state.height = this.bounds.height;\n\t\n\t// Redraws cell and handles\n\tvar off = this.state.absoluteOffset;\n\toff = new mxPoint(off.x, off.y);\n\n\t// Required to store and reset absolute offset for updating label position\n\tthis.state.absoluteOffset.x = 0;\n\tthis.state.absoluteOffset.y = 0;\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\t\t\t\t\n\n\tif (geo != null)\n\t{\n\t\tvar offset = geo.offset || this.EMPTY_POINT;\n\n\t\tif (offset != null && !geo.relative)\n\t\t{\n\t\t\tthis.state.absoluteOffset.x = this.state.view.scale * offset.x;\n\t\t\tthis.state.absoluteOffset.y = this.state.view.scale * offset.y;\n\t\t}\n\t\t\n\t\tthis.state.view.updateVertexLabelOffset(this.state);\n\t}\n\t\n\t// Draws the live preview\n\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\n\t// Redraws connected edges TODO: Include child edges\n\tthis.state.view.invalidate(this.state.cell);\n\tthis.state.invalid = false;\n\tthis.state.view.validate();\n\tthis.redrawHandles();\n\t\n\t// Moves live preview to front\n\tif ((this.state.text != null && this.state.text.node != null &&\n\t\tthis.state.text.node.nextSibling != null) ||\n\t\t(this.state.shape != null && this.state.shape.node != null &&\n\t\tthis.state.shape.node.nextSibling != null && (this.state.text == null ||\n\t\tthis.state.shape.node.nextSibling != this.state.text.node)))\n\t{\n\t\tif (this.state.shape != null && this.state.shape.node != null)\n\t\t{\n\t\t\tthis.state.shape.node.parentNode.appendChild(this.state.shape.node);\n\t\t}\n\t\t\n\t\tif (this.state.text != null && this.state.text.node != null)\n\t\t{\n\t\t\tthis.state.text.node.parentNode.appendChild(this.state.text.node);\n\t\t}\n\t}\n\t\n\t// Hides folding icon\n\tif (this.state.control != null && this.state.control.node != null)\n\t{\n\t\tthis.state.control.node.style.visibility = 'hidden';\n\t}\n\t\n\t// Restores current state\n\tthis.state.setState(tempState);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the geometry.\n */\nmxVertexHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.index != null && this.state != null)\n\t{\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\n\t\tthis.graph.getModel().beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].active = false;\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.currentAlpha != null)\n\t\t\t\t{\n\t\t\t\t\tvar delta = this.currentAlpha - (this.state.style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\t\t\n\t\t\t\t\tif (delta != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(this.state.cell, delta);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.rotateClick();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gridEnabled = this.graph.isGridEnabledEvent(me.getEvent());\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\t\n\t\t\t\tvar dx = point.x - this.startX;\n\t\t\t\tvar dy = point.y - this.startY;\n\t\t\t\t\n\t\t\t\t// Rotates vector for mouse gesture\n\t\t\t\tvar tx = cos * dx - sin * dy;\n\t\t\t\tvar ty = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tdx = tx;\n\t\t\t\tdy = ty;\n\t\t\t\t\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\tvar recurse = this.isRecursiveResize(this.state, me);\n\t\t\t\tthis.resizeCell(this.state.cell, this.roundLength(dx / s), this.roundLength(dy / s),\n\t\t\t\t\tindex, gridEnabled, this.isConstrainedEvent(me), recurse);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.graph.getModel().endUpdate();\n\t\t}\n\n\t\tme.consume();\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: rotateCell\n * \n * Rotates the given cell to the given rotation.\n */\nmxVertexHandler.prototype.isRecursiveResize = function(state, me)\n{\n\treturn this.graph.isRecursiveResize(this.state);\n};\n\n/**\n * Function: rotateClick\n * \n * Hook for subclassers to implement a single click on the rotation handle.\n * This code is executed as part of the model transaction. This implementation\n * is empty.\n */\nmxVertexHandler.prototype.rotateClick = function() { };\n\n/**\n * Function: rotateCell\n * \n * Rotates the given cell and its children by the given angle in degrees.\n * \n * Parameters:\n * \n * cell - <mxCell> to be rotated.\n * angle - Angle in degrees.\n */\nmxVertexHandler.prototype.rotateCell = function(cell, angle, parent)\n{\n\tif (angle != 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isVertex(cell) || model.isEdge(cell))\n\t\t{\n\t\t\tif (!model.isEdge(cell))\n\t\t\t{\n\t\t\t\tvar style = this.graph.getCurrentCellStyle(cell);\n\t\t\t\tvar total = (style[mxConstants.STYLE_ROTATION] || 0) + angle;\n\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ROTATION, total, [cell]);\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null && !model.isEdge(parent))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.rotate(angle, new mxPoint(pgeo.width / 2, pgeo.height / 2));\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((model.isVertex(cell) && !geo.relative) || model.isEdge(cell))\n\t\t\t\t{\n\t\t\t\t\t// Recursive rotation\n\t\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(model.getChildAt(cell, i), angle, cell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxVertexHandler.prototype.reset = function()\n{\n\tif (this.sizers != null && this.index != null && this.sizers[this.index] != null &&\n\t\tthis.sizers[this.index].node.style.display == 'none')\n\t{\n\t\tthis.sizers[this.index].node.style.display = '';\n\t}\n\n\tthis.currentAlpha = null;\n\tthis.inTolerance = null;\n\tthis.index = null;\n\n\t// TODO: Reset and redraw cell states for live preview\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\n\tif (this.livePreviewActive && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Shows folding icon\n\t\tif (this.state.control != null && this.state.control.node != null)\n\t\t{\n\t\t\tthis.state.control.node.style.visibility = '';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tif (this.customHandles[i].active)\n\t\t\t{\n\t\t\t\tthis.customHandles[i].active = false;\n\t\t\t\tthis.customHandles[i].reset();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.customHandles[i].setVisible(true);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Checks if handler has been destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.node.style.display = 'inline';\n\t\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\t\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y,\n\t\t\tthis.selectionBounds.width, this.selectionBounds.height);\n\t\tthis.drawPreview();\n\t}\n\n\tthis.removeHint();\n\tthis.redrawHandles();\n\tthis.edgeHandlers = null;\n\tthis.unscaledBounds = null;\n\tthis.livePreviewActive = null;\n};\n\n/**\n * Function: resizeCell\n * \n * Uses the given vector to change the bounds of the given cell\n * in the graph using <mxGraph.resizeCell>.\n */\nmxVertexHandler.prototype.resizeCell = function(cell, dx, dy, index, gridEnabled, constrained, recurse)\n{\n\tvar geo = this.graph.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (index == mxEvent.LABEL_HANDLE)\n\t\t{\n\t\t\tvar alpha = -mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(\n\t\t\t\tMath.round((this.labelShape.bounds.getCenterX() - this.startX) / scale),\n\t\t\t\tMath.round((this.labelShape.bounds.getCenterY() - this.startY) / scale)),\n\t\t\t\tcos, sin);\n\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = pt;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x += pt.x;\n\t\t\t\tgeo.offset.y += pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(cell, geo);\n\t\t}\n\t\telse if (this.unscaledBounds != null)\n\t\t{\n\t\t\tvar scale = this.graph.view.scale;\n\n\t\t\tif (this.childOffsetX != 0 || this.childOffsetY != 0)\n\t\t\t{\n\t\t\t\tthis.moveChildren(cell, Math.round(this.childOffsetX / scale), Math.round(this.childOffsetY / scale));\n\t\t\t}\n\n\t\t\tthis.graph.resizeCell(cell, this.unscaledBounds, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: moveChildren\n * \n * Moves the children of the given cell by the given vector.\n */\nmxVertexHandler.prototype.moveChildren = function(cell, dx, dy)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\t\tvar geo = this.graph.getCellGeometry(child);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.translate(dx, dy);\n\t\t\tmodel.setGeometry(child, geo);\n\t\t}\n\t}\n};\n/**\n * Function: union\n * \n * Returns the union of the given bounds and location for the specified\n * handle index.\n * \n * To override this to limit the size of vertex via a minWidth/-Height style,\n * the following code can be used.\n * \n * (code)\n * var vertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = vertexHandlerUnion.apply(this, arguments);\n *   \n *   result.width = Math.max(result.width, mxUtils.getNumber(this.state.style, 'minWidth', 0));\n *   result.height = Math.max(result.height, mxUtils.getNumber(this.state.style, 'minHeight', 0));\n *   \n *   return result;\n * };\n * (end)\n * \n * The minWidth/-Height style can then be used as follows:\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'minWidth=100;minHeight=100;');\n * (end)\n * \n * To override this to update the height for a wrapped text if the width of a vertex is\n * changed, the following can be used.\n * \n * (code)\n * var mxVertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = mxVertexHandlerUnion.apply(this, arguments);\n *   var s = this.state;\n *   \n *   if (this.graph.isHtmlLabel(s.cell) && (index == 3 || index == 4) &&\n *       s.text != null && s.style[mxConstants.STYLE_WHITE_SPACE] == 'wrap')\n *   {\n *     var label = this.graph.getLabel(s.cell);\n *     var fontSize = mxUtils.getNumber(s.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n *     var ww = result.width / s.view.scale - s.text.spacingRight - s.text.spacingLeft\n *     \n *     result.height = mxUtils.getSizeForString(label, fontSize, s.style[mxConstants.STYLE_FONTFAMILY], ww).height;\n *   }\n *   \n *   return result;\n * };\n * (end)\n */\nmxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained, centered)\n{\n\tgridEnabled = (gridEnabled != null) ? gridEnabled && this.graph.gridEnabled : this.graph.gridEnabled;\n\t\n\tif (this.singleSizer)\n\t{\n\t\tvar x = bounds.x + bounds.width + dx;\n\t\tvar y = bounds.y + bounds.height + dy;\n\t\t\n\t\tif (gridEnabled)\n\t\t{\n\t\t\tx = this.graph.snap(x / scale) * scale;\n\t\t\ty = this.graph.snap(y / scale) * scale;\n\t\t}\n\t\t\n\t\tvar rect = new mxRectangle(bounds.x, bounds.y, 0, 0);\n\t\trect.add(new mxRectangle(x, y, 0, 0));\n\t\t\n\t\treturn rect;\n\t}\n\telse\n\t{\n\t\tvar w0 = bounds.width;\n\t\tvar h0 = bounds.height;\n\t\tvar left = bounds.x - tr.x * scale;\n\t\tvar right = left + w0;\n\t\tvar top = bounds.y - tr.y * scale;\n\t\tvar bottom = top + h0;\n\t\t\n\t\tvar cx = left + w0 / 2;\n\t\tvar cy = top + h0 / 2;\n\t\t\n\t\tif (index > 4 /* Bottom Row */)\n\t\t{\n\t\t\tbottom = bottom + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tbottom = this.graph.snap(bottom / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbottom = Math.round(bottom / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index < 3 /* Top Row */)\n\t\t{\n\t\t\ttop = top + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\ttop = this.graph.snap(top / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttop = Math.round(top / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (index == 0 || index == 3 || index == 5 /* Left */)\n\t\t{\n\t\t\tleft += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tleft = this.graph.snap(left / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tleft = Math.round(left / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index == 2 || index == 4 || index == 7 /* Right */)\n\t\t{\n\t\t\tright += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tright = this.graph.snap(right / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tright = Math.round(right / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar width = right - left;\n\t\tvar height = bottom - top;\n\n\t\tif (constrained)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar aspect = geo.width / geo.height;\n\t\t\t\t\n\t\t\t\tif (index== 1 || index== 2 || index == 7 || index == 6)\n\t\t\t\t{\n\t\t\t\t\twidth = height * aspect;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\theight = width / aspect;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (index == 0)\n\t\t\t\t{\n\t\t\t\t\tleft = right - width;\n\t\t\t\t\ttop = bottom - height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (centered)\n\t\t{\n\t\t\twidth += (width - w0);\n\t\t\theight += (height - h0);\n\t\t\t\n\t\t\tvar cdx = cx - (left + width / 2);\n\t\t\tvar cdy = cy - (top + height / 2);\n\n\t\t\tleft += cdx;\n\t\t\ttop += cdy;\n\t\t\tright += cdx;\n\t\t\tbottom += cdy;\n\t\t}\n\n\t\t// Flips over left side\n\t\tif (width < 0)\n\t\t{\n\t\t\tleft += width;\n\t\t\twidth = Math.abs(width);\n\t\t}\n\t\t\n\t\t// Flips over top side\n\t\tif (height < 0)\n\t\t{\n\t\t\ttop += height;\n\t\t\theight = Math.abs(height);\n\t\t}\n\n\t\tvar result = new mxRectangle(left + tr.x * scale, top + tr.y * scale, width, height);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tresult.width = Math.max(result.width, this.minBounds.x * scale + this.minBounds.width * scale +\n\t\t\t\tMath.max(0, this.x0 * scale - result.x));\n\t\t\tresult.height = Math.max(result.height, this.minBounds.y * scale + this.minBounds.height * scale +\n\t\t\t\tMath.max(0, this.y0 * scale - result.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Redraws the handles and the preview.\n */\nmxVertexHandler.prototype.redraw = function(ignoreHandles)\n{\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\tthis.drawPreview();\n\n\tif (!ignoreHandles)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Returns the padding to be used for drawing handles for the current <bounds>.\n */\nmxVertexHandler.prototype.getHandlePadding = function()\n{\n\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\tvar result = new mxPoint(0, 0);\n\tvar tol = this.tolerance;\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null &&\n\t\t(this.bounds.width < 2 * this.sizers[0].bounds.width + 2 * tol ||\n\t\tthis.bounds.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t{\n\t\ttol /= 2;\n\t\t\n\t\tresult.x = this.sizers[0].bounds.width + tol;\n\t\tresult.y = this.sizers[0].bounds.height + tol;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles. To hide certain handles the following code can be used.\n * \n * (code)\n * mxVertexHandler.prototype.redrawHandles = function()\n * {\n *   mxVertexHandlerRedrawHandles.apply(this, arguments);\n *   \n *   if (this.sizers != null && this.sizers.length > 7)\n *   {\n *     this.sizers[1].node.style.display = 'none';\n *     this.sizers[6].node.style.display = 'none';\n *   }\n * };\n * (end)\n */\nmxVertexHandler.prototype.redrawHandles = function()\n{\n\tvar tol = this.tolerance;\n\tthis.horizontalOffset = 0;\n\tthis.verticalOffset = 0;\n\tvar s = this.bounds;\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility =\n\t\t\t\t(this.isCustomHandleVisible(this.customHandles[i])) ?\n\t\t\t\t'' : 'hidden';\n\t\t}\n\t}\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null)\n\t{\n\t\tif (this.index == null && this.manageSizers && this.sizers.length >= 8)\n\t\t{\n\t\t\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\t\t\tvar padding = this.getHandlePadding();\n\t\t\tthis.horizontalOffset = padding.x;\n\t\t\tthis.verticalOffset = padding.y;\n\t\t\t\n\t\t\tif (this.horizontalOffset != 0 || this.verticalOffset != 0)\n\t\t\t{\n\t\t\t\ts = new mxRectangle(s.x, s.y, s.width, s.height);\n\n\t\t\t\ts.x -= this.horizontalOffset / 2;\n\t\t\t\ts.width += this.horizontalOffset;\n\t\t\t\ts.y -= this.verticalOffset / 2;\n\t\t\t\ts.height += this.verticalOffset;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tif ((s.width < 2 * this.sizers[0].bounds.width + 2 * tol) ||\n\t\t\t\t\t(s.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[2].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[5].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[7].node.style.display = 'none';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = '';\n\t\t\t\t\tthis.sizers[2].node.style.display = '';\n\t\t\t\t\tthis.sizers[5].node.style.display = '';\n\t\t\t\t\tthis.sizers[7].node.style.display = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar r = s.x + s.width;\n\t\tvar b = s.y + s.height;\n\t\t\n\t\tif (this.singleSizer)\n\t\t{\n\t\t\tthis.moveSizerTo(this.sizers[0], r, b);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cx = s.x + s.width / 2;\n\t\t\tvar cy = s.y + s.height / 2;\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tvar crs = ['nw-resize', 'n-resize', 'ne-resize', 'e-resize', 'se-resize', 's-resize', 'sw-resize', 'w-resize'];\n\t\t\t\t\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\t\t\t\n\t\t\t\tvar da = Math.round(alpha * 4 / Math.PI);\n\t\t\t\t\n\t\t\t\tvar ct = new mxPoint(s.getCenterX(), s.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(s.x, s.y), cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[0], pt.x, pt.y);\n\t\t\t\tthis.sizers[0].setCursor(crs[mxUtils.mod(0 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[1], pt.x, pt.y);\n\t\t\t\tthis.sizers[1].setCursor(crs[mxUtils.mod(1 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[2], pt.x, pt.y);\n\t\t\t\tthis.sizers[2].setCursor(crs[mxUtils.mod(2 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[3], pt.x, pt.y);\n\t\t\t\tthis.sizers[3].setCursor(crs[mxUtils.mod(7 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[4], pt.x, pt.y);\n\t\t\t\tthis.sizers[4].setCursor(crs[mxUtils.mod(3 + da, crs.length)]);\n\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[5], pt.x, pt.y);\n\t\t\t\tthis.sizers[5].setCursor(crs[mxUtils.mod(6 + da, crs.length)]);\n\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[6], pt.x, pt.y);\n\t\t\t\tthis.sizers[6].setCursor(crs[mxUtils.mod(5 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[7], pt.x, pt.y);\n\t\t\t\tthis.sizers[7].setCursor(crs[mxUtils.mod(4 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx + this.state.absoluteOffset.x;\n\t\t\t\tpt.y = cy + this.state.absoluteOffset.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\tthis.moveSizerTo(this.sizers[8], pt.x, pt.y);\n\t\t\t}\n\t\t\telse if (this.state.width >= 2 && this.state.height >= 2)\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], this.state.x, this.state.y);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.rotationShape != null)\n\t{\n\t\tvar alpha = mxUtils.toRadians((this.currentAlpha != null) ? this.currentAlpha : this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\t\n\t\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(this.getRotationHandlePosition(), cos, sin, ct);\n\n\t\tif (this.rotationShape.node != null)\n\t\t{\n\t\t\tthis.moveSizerTo(this.rotationShape, pt.x, pt.y);\n\n\t\t\t// Hides rotation handle during text editing\n\t\t\tthis.rotationShape.node.style.visibility = (this.state.view.graph.isEditing()) ? 'hidden' : '';\n\t\t}\n\t}\n\t\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t}\n\t\n\tif (this.edgeHandlers != null)\n\t{\t\t\n\t\tfor (var i = 0; i < this.edgeHandlers.length; i++)\n\t\t{\n\t\t\tthis.edgeHandlers[i].redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isCustomHandleVisible\n * \n * Returns true if the given custom handle is visible.\n */\nmxVertexHandler.prototype.isCustomHandleVisible = function(handle)\n{\n\treturn !this.graph.isEditing() && this.state.view.graph.getSelectionCount() == 1;\n};\n\n/**\n * Function: getRotationHandlePosition\n * \n * Returns an <mxPoint> that defines the rotation handle position.\n */\nmxVertexHandler.prototype.getRotationHandlePosition = function()\n{\n\treturn new mxPoint(this.bounds.x + this.bounds.width / 2, this.bounds.y + this.rotationHandleVSpacing)\n};\n\n/**\n * Function: updateParentHighlight\n * \n * Updates the highlight of the parent if <parentHighlightEnabled> is true.\n */\nmxVertexHandler.prototype.updateParentHighlight = function()\n{\n\t// If not destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tif (this.parentHighlight != null)\n\t\t{\n\t\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\n\t\t\tif (this.graph.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\tvar b = this.parentHighlight.bounds;\n\t\t\t\t\n\t\t\t\tif (pstate != null && (b.x != pstate.x || b.y != pstate.y ||\n\t\t\t\t\tb.width != pstate.width || b.height != pstate.height))\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight.bounds = mxRectangle.fromRectangle(pstate);\n\t\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.parentHighlight.destroy();\n\t\t\t\tthis.parentHighlight = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.parentHighlightEnabled)\n\t\t{\n\t\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\t\n\t\t\tif (this.graph.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\t\n\t\t\t\tif (pstate != null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxVertexHandler.prototype.drawPreview = function()\n{\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.bounds = this.bounds;\n\t\t\n\t\tif (this.preview.node.parentNode == this.graph.container)\n\t\t{\n\t\t\tthis.preview.bounds.width = Math.max(0, this.preview.bounds.width - 1);\n\t\t\tthis.preview.bounds.height = Math.max(0, this.preview.bounds.height - 1);\n\t\t}\n\t\n\t\tthis.preview.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tthis.preview.redraw();\n\t}\n\t\n\tthis.selectionBorder.bounds = this.bounds;\n\tthis.selectionBorder.redraw();\n\tthis.updateParentHighlight();\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxVertexHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tthis.labelShape = null;\n\tthis.removeHint();\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].destroy();\n\t\t}\n\t\t\n\t\tthis.sizers = null;\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].destroy();\n\t\t}\n\t\t\n\t\tthis.customHandles = null;\n\t}\n};\n\n__mxOutput.mxVertexHandler = typeof mxVertexHandler !== 'undefined' ? mxVertexHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler> for each selected edge.\n * \n * To enable adding/removing control points, the following code can be used:\n * \n * (code)\n * mxEdgeHandler.prototype.addEnabled = true;\n * mxEdgeHandler.prototype.removeEnabled = true;\n * (end)\n * \n * Note: This experimental feature is not recommended for production use.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxEdgeHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar dirty = this.index != null;\n\t\t\tthis.reset();\n\t\t\t\n\t\t\tif (dirty)\n\t\t\t{\n\t\t\t\tthis.graph.cellRenderer.redraw(this.state, false, state.view.isRendering());\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxEdgeHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxEdgeHandler.prototype.state = null;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> which is used for highlighting terminals.\n */\nmxEdgeHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxEdgeHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while a connection is being changed.\n */\nmxEdgeHandler.prototype.error = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the preview edge.\n */\nmxEdgeHandler.prototype.shape = null;\n\n/**\n * Variable: bends\n * \n * Holds the <mxShapes> that represent the points.\n */\nmxEdgeHandler.prototype.bends = null;\n\n/**\n * Variable: labelShape\n * \n * Holds the <mxShape> that represents the label position.\n */\nmxEdgeHandler.prototype.labelShape = null;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxEdgeHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if adding bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.addEnabled = false;\n\n/**\n * Variable: removeEnabled\n * \n * Specifies if removing bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.removeEnabled = false;\n\n/**\n * Variable: dblClickRemoveEnabled\n * \n * Specifies if removing bends by double click is enabled. Default is false.\n */\nmxEdgeHandler.prototype.dblClickRemoveEnabled = false;\n\n/**\n * Variable: mergeRemoveEnabled\n * \n * Specifies if removing bends by dropping them on other bends is enabled.\n * Default is false.\n */\nmxEdgeHandler.prototype.mergeRemoveEnabled = false;\n\n/**\n * Variable: straightRemoveEnabled\n * \n * Specifies if removing bends by creating straight segments should be enabled.\n * If enabled, this can be overridden by holding down the alt key while moving.\n * Default is false.\n */\nmxEdgeHandler.prototype.straightRemoveEnabled = false;\n\n/**\n * Variable: virtualBendsEnabled\n * \n * Specifies if virtual bends should be added in the center of each\n * segments. These bends can then be used to add new waypoints.\n * Default is false.\n */\nmxEdgeHandler.prototype.virtualBendsEnabled = false;\n\n/**\n * Variable: virtualBendOpacity\n * \n * Opacity to be used for virtual bends (see <virtualBendsEnabled>).\n * Default is 20.\n */\nmxEdgeHandler.prototype.virtualBendOpacity = 20;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxEdgeHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: preferHtml\n * \n * Specifies if bends should be added to the graph container. This is updated\n * in <init> based on whether the edge or one of its terminals has an HTML\n * label in the container.\n */\nmxEdgeHandler.prototype.preferHtml = false;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE\n * Default is true.\n */\nmxEdgeHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: snapToTerminals\n * \n * Specifies if waypoints should snap to the routing centers of terminals.\n * Default is false.\n */\nmxEdgeHandler.prototype.snapToTerminals = false;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxEdgeHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxEdgeHandler.prototype.tolerance = 0;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxEdgeHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: manageLabelHandle\n * \n * Specifies if the label handle should be moved if it intersects with another\n * handle. Uses <checkLabelHandle> for checking and moving. Default is false.\n */\nmxEdgeHandler.prototype.manageLabelHandle = false;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this edge handler.\n */\nmxEdgeHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\t\n\t// Clones the original points from the cell\n\t// and makes sure at least one point exists\n\tthis.points = [];\n\t\n\t// Uses the absolute points of the state\n\t// for the initial configuration and preview\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.shape = this.createSelectionShape(this.abspoints);\n\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\tthis.shape.init(this.graph.getView().getOverlayPane());\n\tthis.shape.pointerEvents = false;\n\tthis.shape.setCursor(mxConstants.CURSOR_MOVABLE_EDGE);\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\n\t// Updates preferHtml\n\tthis.preferHtml = this.state.text != null &&\n\t\tthis.state.text.node.parentNode == this.graph.container;\n\t\n\tif (!this.preferHtml)\n\t{\n\t\t// Checks source terminal\n\t\tvar sourceState = this.state.getVisibleTerminalState(true);\n\t\t\n\t\tif (sourceState != null)\n\t\t{\n\t\t\tthis.preferHtml = sourceState.text != null &&\n\t\t\t\tsourceState.text.node.parentNode == this.graph.container;\n\t\t}\n\t\t\n\t\tif (!this.preferHtml)\n\t\t{\n\t\t\t// Checks target terminal\n\t\t\tvar targetState = this.state.getVisibleTerminalState(false);\n\t\t\t\n\t\t\tif (targetState != null)\n\t\t\t{\n\t\t\t\tthis.preferHtml = targetState.text != null &&\n\t\t\t\ttargetState.text.node.parentNode == this.graph.container;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Adds highlight for parent group\n\tif (this.parentHighlightEnabled)\n\t{\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\n\t\t\tif (pstate != null)\n\t\t\t{\n\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Creates bends for the non-routed absolute points\n\t// or bends that don't correspond to points\n\tif (this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells ||\n\t\tmxGraphHandler.prototype.maxCells <= 0)\n\t{\n\t\tthis.bends = this.createBends();\n\n\t\tif (this.isVirtualBendsEnabled())\n\t\t{\n\t\t\tthis.virtualBends = this.createVirtualBends();\n\t\t}\n\t}\n\n\t// Adds a rectangular handle for the label position\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape = this.createLabelHandleShape();\n\tthis.initBend(this.labelShape);\n\tthis.labelShape.setCursor(mxConstants.CURSOR_LABEL_HANDLE);\n\t\n\tthis.customHandles = this.createCustomHandles();\n\t\n\tthis.redraw();\n};\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxEdgeHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: isVirtualBendsEnabled\n * \n * Returns true if virtual bends should be added. This returns true if\n * <virtualBendsEnabled> is true and the current style allows and\n * renders custom waypoints.\n */\nmxEdgeHandler.prototype.isVirtualBendsEnabled = function(evt)\n{\n\treturn this.virtualBendsEnabled && (this.state.style[mxConstants.STYLE_EDGE] == null ||\n\t\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.NONE ||\n\t\t\tthis.state.style[mxConstants.STYLE_NOEDGESTYLE] == 1)  &&\n\t\t\tmxUtils.getValue(this.state.style, mxConstants.STYLE_SHAPE, null) != 'arrow';\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell allows new connections to be created. This implementation\n * always returns true.\n */\nmxEdgeHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: isAddPointEvent\n * \n * Returns true if the given event is a trigger to add a new point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isAddPointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isRemovePointEvent\n * \n * Returns true if the given event is a trigger to remove a point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isRemovePointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: getSelectionPoints\n * \n * Returns the list of points that defines the selection stroke.\n */\nmxEdgeHandler.prototype.getSelectionPoints = function(state)\n{\n\treturn state.absolutePoints;\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createSelectionShape = function(points)\n{\n\tvar shape = new this.state.shape.constructor();\n\tshape.outline = true;\n\tshape.apply(this.state);\n\t\n\tshape.isDashed = this.isSelectionDashed();\n\tshape.stroke = this.getSelectionColor();\n\tshape.isShadow = false;\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.EDGE_SELECTION_COLOR>.\n */\nmxEdgeHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.EDGE_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.EDGE_SELECTION_STROKEWIDTH>.\n */\nmxEdgeHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.EDGE_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.EDGE_SELECTION_DASHED>.\n */\nmxEdgeHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.EDGE_SELECTION_DASHED;\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxEdgeHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: getCellAt\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.getCellAt = function(x, y)\n{\n\treturn (!this.outlineConnect) ? this.graph.getCellAt(x, y) : null;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tvar self = this; // closure\n\n\t// Only returns edges if they are connectable and never returns\n\t// the edge that is currently being modified\n\tmarker.getCell = function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(this, arguments);\n\n\t\t// Checks for cell at preview point (with grid)\n\t\tif ((cell == self.state.cell || cell == null) && self.currentPoint != null)\n\t\t{\n\t\t\tcell = self.graph.getCellAt(self.currentPoint.x, self.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar model = self.graph.getModel();\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && self.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, self.currentPoint.x, self.currentPoint.y)) ||\n\t\t\t(!self.isConnectableCell(cell)) || (cell == self.state.cell ||\n\t\t\t(cell != null && !self.graph.connectableEdges && model.isEdge(cell))) ||\n\t\t\tmodel.isAncestor(self.state.cell, cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (!this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\treturn cell;\n\t};\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = function(state)\n\t{\n\t\tvar model = self.graph.getModel();\n\t\tvar other = self.graph.view.getTerminalPort(state,\n\t\t\tself.graph.view.getState(model.getTerminal(self.state.cell,\n\t\t\t!self.isSource)), !self.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (self.isSource) ? state.cell : otherCell;\n\t\tvar target = (self.isSource) ? otherCell : state.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tself.error = self.validateConnection(source, target);\n\n\t\treturn self.error == null;\n\t};\n\t\n\treturn marker;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source, target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxEdgeHandler.prototype.validateConnection = function(source, target)\n{\n\treturn this.graph.getEdgeValidationError(this.state.cell, source, target);\n};\n\n/**\n * Function: createBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar bends = [];\n\n\tfor (var i = 0; i < this.abspoints.length; i++)\n\t{\n\t\tif (this.isHandleVisible(i))\n\t\t{\n\t\t\tvar source = i == 0;\n\t\t\tvar target = i == this.abspoints.length - 1;\n\t\t\tvar terminal = source || target;\n\n\t\t\tif (terminal || this.graph.isCellBendable(cell))\n\t\t\t{\n\t\t\t\t(mxUtils.bind(this, function(index)\n\t\t\t\t{\n\t\t\t\t\tvar bend = this.createHandleShape(index);\n\t\t\t\t\tthis.initBend(bend, mxUtils.bind(this, mxUtils.bind(this, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.dblClickRemoveEnabled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.removePoint(this.state, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t})));\n\t\n\t\t\t\t\tif (this.isHandleEnabled(i))\n\t\t\t\t\t{\n\t\t\t\t\t\tbend.setCursor((terminal) ? mxConstants.CURSOR_TERMINAL_HANDLE : mxConstants.CURSOR_BEND_HANDLE);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbends.push(bend);\n\t\t\t\t\n\t\t\t\t\tif (!terminal)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t\t\t\t\tbend.node.style.visibility = 'hidden';\n\t\t\t\t\t}\n\t\t\t\t}))(i);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: createVirtualBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createVirtualBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar last = this.abspoints[0];\n\tvar bends = [];\n\n\tif (this.graph.isCellBendable(cell))\n\t{\n\t\tfor (var i = 1; i < this.abspoints.length; i++)\n\t\t{\n\t\t\t(mxUtils.bind(this, function(bend)\n\t\t\t{\n\t\t\t\tthis.initBend(bend);\n\t\t\t\tbend.setCursor(mxConstants.CURSOR_VIRTUAL_BEND_HANDLE);\n\t\t\t\tbends.push(bend);\n\t\t\t}))(this.createHandleShape());\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: isHandleEnabled\n * \n * Creates the shape used to display the given bend.\n */\nmxEdgeHandler.prototype.isHandleEnabled = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: isHandleVisible\n * \n * Returns true if the handle at the given index is visible.\n */\nmxEdgeHandler.prototype.isHandleVisible = function(index)\n{\n\tvar source = this.state.getVisibleTerminalState(true);\n\tvar target = this.state.getVisibleTerminalState(false);\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tvar edgeStyle = (geo != null) ? this.graph.view.getEdgeStyle(this.state, geo.points, source, target) : null;\n\n\treturn edgeStyle != mxEdgeStyle.EntityRelation || index == 0 || index == this.abspoints.length - 1;\n};\n\n/**\n * Function: createHandleShape\n * \n * Creates the shape used to display the given bend. Note that the index may be\n * null for special cases, such as when called from\n * <mxElbowEdgeHandler.createVirtualBend>. Only images and rectangles should be\n * returned if support for HTML labels with not foreign objects is required.\n * Index if null for virtual handles.\n */\nmxEdgeHandler.prototype.createHandleShape = function(index)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.handleImage.width, this.handleImage.height), this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.HANDLE_SIZE;\n\t\t\n\t\tif (this.preferHtml)\n\t\t{\n\t\t\ts -= 1;\n\t\t}\n\t\t\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createLabelHandleShape\n * \n * Creates the shape used to display the the label handle.\n */\nmxEdgeHandler.prototype.createLabelHandleShape = function()\n{\n\tif (this.labelHandleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.labelHandleImage.width, this.labelHandleImage.height), this.labelHandleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.LABEL_HANDLE_SIZE;\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.LABEL_HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: initBend\n * \n * Helper method to initialize the given bend.\n * \n * Parameters:\n * \n * bend - <mxShape> that represents the bend to be initialized.\n */\nmxEdgeHandler.prototype.initBend = function(bend, dblClick)\n{\n\tif (this.preferHtml)\n\t{\n\t\tbend.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tbend.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tbend.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tbend.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(bend.node, this.graph, this.state,\n\t\t\tnull, null, null, dblClick);\n\t\n\t// Fixes lost event tracking for images in quirks / IE8 standards\n\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t{\n\t\tmxEvent.addListener(bend.node, 'dragstart', function(evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t}\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tbend.node.setAttribute('pointer-events', 'none');\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event.\n */\nmxEdgeHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\tvar minDistSq = null;\n\tvar result = null;\n\n\tfunction checkShape(shape)\n\t{\n\t\tif (shape != null && shape.node != null && shape.node.style.display != 'none' &&\n\t\t\tshape.node.style.visibility != 'hidden' &&\n\t\t\t(me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit))))\n\t\t{\n\t\t\tvar dx = me.getGraphX() - shape.bounds.getCenterX();\n\t\t\tvar dy = me.getGraphY() - shape.bounds.getCenterY();\n\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\n\t\t\tif (minDistSq == null || tmp <= minDistSq)\n\t\t\t{\n\t\t\t\tminDistSq = tmp;\n\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (me.isSource(this.state.text) || checkShape(this.labelShape))\n\t{\n\t\tresult = mxEvent.LABEL_HANDLE;\n\t}\n\t\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.bends[i]))\n\t\t\t{\n\t\t\t\tresult = i;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (this.virtualBends != null && this.isAddVirtualBendEvent(me))\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.virtualBends[i]))\n\t\t\t{\n\t\t\t\tresult = mxEvent.VIRTUAL_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isAddVirtualBendEvent\n * \n * Returns true if the given event allows virtual bends to be added. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isAddVirtualBendEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by checking if a special element of the handler\n * was clicked, in which case the index parameter is non-null. The\n * indices may be one of <LABEL_HANDLE> or the number of the respective\n * control point. The source and target points are used for reconnecting\n * the edge.\n */\nmxEdgeHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar handle = this.getHandleForEvent(me);\n\t\n\tif (this.bends != null && this.bends[handle] != null)\n\t{\n\t\tvar b = this.bends[handle].bounds;\n\t\tthis.snapPoint = new mxPoint(b.getCenterX(), b.getCenterY());\n\t}\n\t\n\tif (this.addEnabled && handle == null && this.isAddPointEvent(me.getEvent()))\n\t{\n\t\tthis.addPoint(this.state, me.getEvent());\n\t\tme.consume();\n\t}\n\telse if (handle != null && !me.isConsumed() && this.graph.isEnabled())\n\t{\n\t\tif (this.removeEnabled && this.isRemovePointEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.removePoint(this.state, handle);\n\t\t}\n\t\telse if (handle != mxEvent.LABEL_HANDLE || this.graph.isLabelMovable(me.getCell()))\n\t\t{\n\t\t\tif (handle <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.virtualBends[mxEvent.VIRTUAL_HANDLE - handle].node, 100);\n\t\t\t}\n\t\t\t\n\t\t\tthis.start(me.getX(), me.getY(), handle);\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxEdgeHandler.prototype.start = function(x, y, index)\n{\n\tthis.startX = x;\n\tthis.startY = y;\n\n\tthis.isSource = (this.bends == null) ? false : index == 0;\n\tthis.isTarget = (this.bends == null) ? false : index == this.bends.length - 1;\n\tthis.isLabel = index == mxEvent.LABEL_HANDLE;\n\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tvar cell = this.state.cell;\n\t\tvar terminal = this.graph.model.getTerminal(cell, this.isSource);\n\n\t\tif ((terminal == null && this.graph.isTerminalPointMovable(cell, this.isSource)) ||\n\t\t\t(terminal != null && this.graph.isCellDisconnectable(cell, terminal, this.isSource)))\n\t\t{\n\t\t\tthis.index = index;\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.index = index;\n\t}\n\t\n\t// Hides other custom handles\n\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t{\n\t\tif (this.customHandles != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t\t{\n\t\t\t\tif (i != mxEvent.CUSTOM_HANDLE - this.index)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[i].setVisible(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: clonePreviewState\n * \n * Returns a clone of the current preview state for the given point and terminal.\n */\nmxEdgeHandler.prototype.clonePreviewState = function(point, terminal)\n{\n\treturn this.state.clone();\n};\n\n/**\n * Function: getSnapToTerminalTolerance\n * \n * Returns the tolerance for the guides. Default value is\n * gridSize * scale / 2.\n */\nmxEdgeHandler.prototype.getSnapToTerminalTolerance = function()\n{\n\treturn this.graph.gridSize * this.graph.view.scale / 2;\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxEdgeHandler.prototype.updateHint = function(me, point) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxEdgeHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxEdgeHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length);\n};\n\n/**\n * Function: isSnapToTerminalsEvent\n * \n * Returns true if <snapToTerminals> is true and if alt is not pressed.\n */\nmxEdgeHandler.prototype.isSnapToTerminalsEvent = function(me)\n{\n\treturn this.snapToTerminals && !mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns the point for the given event.\n */\nmxEdgeHandler.prototype.getPointForEvent = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar scale = view.scale;\n\tvar point = new mxPoint(this.roundLength(me.getGraphX() / scale) * scale,\n\t\tthis.roundLength(me.getGraphY() / scale) * scale);\n\t\n\tvar tt = this.getSnapToTerminalTolerance();\n\tvar overrideX = false;\n\tvar overrideY = false;\t\t\n\t\n\tif (tt > 0 && this.isSnapToTerminalsEvent(me))\n\t{\n\t\tfunction snapToPoint(pt)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar x = pt.x;\n\n\t\t\t\tif (Math.abs(point.x - x) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = x;\n\t\t\t\t\toverrideX = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar y = pt.y;\n\n\t\t\t\tif (Math.abs(point.y - y) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = y;\n\t\t\t\t\toverrideY = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Temporary function\n\t\tfunction snapToTerminal(terminal)\n\t\t{\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, new mxPoint(view.getRoutingCenterX(terminal),\n\t\t\t\t\t\tview.getRoutingCenterY(terminal)));\n\t\t\t}\n\t\t};\n\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(true));\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(false));\n\n\t\tif (this.state.absolutePoints != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, this.state.absolutePoints[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar tr = view.translate;\n\t\t\n\t\tif (!overrideX)\n\t\t{\n\t\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\t}\n\t\t\n\t\tif (!overrideY)\n\t\t{\n\t\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getPreviewTerminalState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.getPreviewTerminalState = function(me)\n{\n\tthis.constraintHandler.update(me, this.isSource, true, me.isSource(this.marker.highlight.shape) ? null : this.currentPoint);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\t\t\n\t\tvar model = this.graph.getModel();\n\t\tvar other = this.graph.view.getTerminalPort(this.state,\n\t\t\t\tthis.graph.view.getState(model.getTerminal(this.state.cell,\n\t\t\t!this.isSource)), !this.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (this.isSource) ? this.constraintHandler.currentFocus.cell : otherCell;\n\t\tvar target = (this.isSource) ? otherCell : this.constraintHandler.currentFocus.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tthis.error = this.validateConnection(source, target);\n\t\tvar result = null;\n\t\t\n\t\tif (this.error == null)\n\t\t{\n\t\t\tresult = this.constraintHandler.currentFocus;\n\t\t}\n\t\t\n\t\tif (this.error != null || (result != null &&\n\t\t\t!this.isCellEnabled(result.cell)))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\telse if (!this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t{\n\t\tthis.marker.process(me);\n\t\tvar state = this.marker.getValidState();\n\t\t\n\t\tif (state != null && !this.isCellEnabled(state.cell))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t\tthis.marker.reset();\n\t\t}\n\t\t\n\t\treturn this.marker.getValidState();\n\t}\n\telse\n\t{\n\t\tthis.marker.reset();\n\t\t\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n * \n * Parameters:\n * \n * pt - <mxPoint> that contains the current pointer position.\n * me - Optional <mxMouseEvent> that contains the current event.\n */\nmxEdgeHandler.prototype.getPreviewPoints = function(pt, me)\n{\n\tvar geometry = this.graph.getCellGeometry(this.state.cell);\n\tvar points = (geometry.points != null) ? geometry.points.slice() : null;\n\tvar point = new mxPoint(pt.x, pt.y);\n\tvar result = null;\n\t\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tthis.convertPoint(point, false);\n\t\t\n\t\tif (points == null)\n\t\t{\n\t\t\tpoints = [point];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adds point from virtual bend\n\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 0, point);\n\t\t\t}\n\n\t\t\t// Removes point if dragged on terminal point\n\t\t\tif (!this.isSource && !this.isTarget)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (i != this.index)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar bend = this.bends[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bend != null && mxUtils.contains(bend.bounds, pt.x, pt.y))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(this.index - 1, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Removes point if user tries to straighten a segment\n\t\t\t\tif (result == null && this.straightRemoveEnabled && (me == null || !mxEvent.isAltDown(me.getEvent())))\n\t\t\t\t{\n\t\t\t\t\tvar tol = this.graph.tolerance * this.graph.tolerance;\n\t\t\t\t\tvar abs = this.state.absolutePoints.slice();\n\t\t\t\t\tabs[this.index] = pt;\n\t\t\t\t\t\n\t\t\t\t\t// Handes special case where removing waypoint affects tolerance (flickering)\n\t\t\t\t\tvar src = this.state.getVisibleTerminalState(true);\n\t\t\t\t\t\n\t\t\t\t\tif (src != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, src, true);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(src, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[0] = new mxPoint(src.view.getRoutingCenterX(src), src.view.getRoutingCenterY(src));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar trg = this.state.getVisibleTerminalState(false);\n\t\t\t\t\t\n\t\t\t\t\tif (trg != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, trg, false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(trg, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[abs.length - 1] = new mxPoint(trg.view.getRoutingCenterX(trg), trg.view.getRoutingCenterY(trg));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction checkRemove(idx, tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (idx > 0 && idx < abs.length - 1 &&\n\t\t\t\t\t\t\tmxUtils.ptSegDistSq(abs[idx - 1].x, abs[idx - 1].y,\n\t\t\t\t\t\t\t\tabs[idx + 1].x, abs[idx + 1].y, tmp.x, tmp.y) < tol)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpoints.splice(idx - 1, 1);\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// LATER: Check if other points can be removed if a segment is made straight\n\t\t\t\t\tcheckRemove(this.index, pt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Updates existing point\n\t\t\tif (result == null && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints[this.index - 1] = point;\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.graph.resetEdgesOnConnect)\n\t{\n\t\tpoints = null;\n\t}\n\t\n\treturn (result != null) ? result : points;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxEdgeHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updatePreviewState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.updatePreviewState = function(edge, point, terminalState, me, outline)\n{\n\t// Computes the points for the edge style and terminals\n\tvar sourceState = (this.isSource) ? terminalState : this.state.getVisibleTerminalState(true);\n\tvar targetState = (this.isTarget) ? terminalState : this.state.getVisibleTerminalState(false);\n\t\n\tvar sourceConstraint = this.graph.getConnectionConstraint(edge, sourceState, true);\n\tvar targetConstraint = this.graph.getConnectionConstraint(edge, targetState, false);\n\n\tvar constraint = this.constraintHandler.currentConstraint;\n\n\tif (constraint == null && outline)\n\t{\n\t\tif (terminalState != null)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tconstraint = this.graph.getOutlineConstraint(point, terminalState, me);\n\t\t\tthis.constraintHandler.setFocus(me, terminalState, this.isSource);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\t}\n\t\n\tif (this.outlineConnect && this.marker.highlight != null && this.marker.highlight.shape != null)\n\t{\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (outline) ? mxConstants.OUTLINE_HIGHLIGHT_COLOR : 'transparent';\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t\telse if (this.marker.hasValidState())\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (this.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\tthis.marker.getValidState() != me.getState()) ?\n\t\t\t\t'transparent' : mxConstants.DEFAULT_VALID_COLOR;\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t}\n\t\n\tif (this.isSource)\n\t{\n\t\tsourceConstraint = constraint;\n\t}\n\telse if (this.isTarget)\n\t{\n\t\ttargetConstraint = constraint;\n\t}\n\t\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tif (constraint != null && constraint.point != null)\n\t\t{\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t}\n\t}\n\t\n\tedge.setVisibleTerminalState(sourceState, true);\n\tedge.setVisibleTerminalState(targetState, false);\n\t\n\tif (!this.isSource || sourceState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, sourceState, true, sourceConstraint);\n\t}\n\t\n\tif (!this.isTarget || targetState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, targetState, false, targetConstraint);\n\t}\n\t\n\tif ((this.isSource || this.isTarget) && terminalState == null)\n\t{\n\t\tedge.setAbsoluteTerminalPoint(point, this.isSource);\n\n\t\tif (this.marker.getMarkedState() == null)\n\t\t{\n\t\t\tthis.error = (this.graph.allowDanglingEdges) ? null : '';\n\t\t}\n\t}\n\t\n\tedge.view.updatePoints(edge, this.points, sourceState, targetState);\n\tedge.view.updateFloatingTerminalPoints(edge, sourceState, targetState);\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxEdgeHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tthis.currentPoint = this.getPointForEvent(me);\n\t\tthis.error = null;\n\t\t\n\t\t// Uses the current point from the constraint handler if available\n\t\tif (!this.graph.isIgnoreTerminalEvent(me.getEvent()) && mxEvent.isShiftDown(me.getEvent()) && this.snapPoint != null)\n\t\t{\n\t\t\tif (Math.abs(this.snapPoint.x - this.currentPoint.x) < Math.abs(this.snapPoint.y - this.currentPoint.y))\n\t\t\t{\n\t\t\t\tthis.currentPoint.x = this.snapPoint.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.currentPoint.y = this.snapPoint.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t{\n\t\t\tif (this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t}\n\t\t}\n\t\telse if (this.isLabel)\n\t\t{\n\t\t\tthis.label.x = this.currentPoint.x;\n\t\t\tthis.label.y = this.currentPoint.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.points = this.getPreviewPoints(this.currentPoint, me);\n\t\t\tvar terminalState = (this.isSource || this.isTarget) ? this.getPreviewTerminalState(me) : null;\n\t\t\t\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tthis.currentPoint = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.outlineConnect)\n\t\t\t{\n\t\t\t\t// Need to check outline before cloning terminal state\n\t\t\t\tvar outline = (this.isSource || this.isTarget) ? this.isOutlineConnectEvent(me) : false\n\t\t\t\t\t\t\n\t\t\t\tif (outline)\n\t\t\t\t{\n\t\t\t\t\tterminalState = this.marker.highlight.state;\n\t\t\t\t}\n\t\t\t\telse if (terminalState != null && terminalState != me.getState() &&\n\t\t\t\t\tthis.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\t\tthis.marker.highlight.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t\tterminalState = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (terminalState != null && !this.isCellEnabled(terminalState.cell))\n\t\t\t{\n\t\t\t\tterminalState = null;\n\t\t\t\tthis.marker.reset();\n\t\t\t}\n\t\t\t\n\t\t\tvar clone = this.clonePreviewState(this.currentPoint, (terminalState != null) ? terminalState.cell : null);\n\t\t\tthis.updatePreviewState(clone, this.currentPoint, terminalState, me, outline);\n\n\t\t\t// Sets the color of the preview to valid or invalid, updates the\n\t\t\t// points of the preview and redraws\n\t\t\tvar color = (this.error == null) ? this.marker.validColor : this.marker.invalidColor;\n\t\t\tthis.setPreviewColor(color);\n\t\t\tthis.abspoints = clone.absolutePoints;\n\t\t\tthis.active = true;\n\t\t}\n\n\t\t// This should go before calling isOutlineConnectEvent above. As a workaround\n\t\t// we add an offset of gridSize to the hint to avoid problem with hit detection\n\t\t// in highlight.isHighlightAt (which uses comonentFromPoint)\n\t\tthis.updateHint(me, this.currentPoint);\n\t\tthis.drawPreview();\n\t\tmxEvent.consume(me.getEvent());\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (mxClient.IS_IE && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event to applying the previewed changes on the edge by\n * using <moveLabel>, <connect> or <changePoints>.\n */\nmxEdgeHandler.prototype.mouseUp = function(sender, me)\n{\n\t// Workaround for wrong event source in Webkit\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tvar edge = this.state.cell;\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\t\t\n\t\t// Ignores event if mouse has not been moved\n\t\tif (me.getX() != this.startX || me.getY() != this.startY)\n\t\t{\n\t\t\tvar clone = !this.graph.isIgnoreTerminalEvent(me.getEvent()) && this.graph.isCloneEvent(me.getEvent()) &&\n\t\t\t\tthis.cloneEnabled && this.graph.isCellsCloneable();\n\t\t\t\n\t\t\t// Displays the reason for not carriying out the change\n\t\t\t// if there is an error message with non-zero length\n\t\t\tif (this.error != null)\n\t\t\t{\n\t\t\t\tif (this.error.length > 0)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute();\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.isLabel)\n\t\t\t{\n\t\t\t\tthis.moveLabel(this.state, this.label.x, this.label.y);\n\t\t\t}\n\t\t\telse if (this.isSource || this.isTarget)\n\t\t\t{\n\t\t\t\tvar terminal = null;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tterminal = this.constraintHandler.currentFocus.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal == null && this.marker.hasValidState() && this.marker.highlight != null &&\n\t\t\t\t\tthis.marker.highlight.shape != null &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'transparent' &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'white')\n\t\t\t\t{\n\t\t\t\t\tterminal = this.marker.validState.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\tvar parent = model.getParent(edge);\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// Clones and adds the cell\n\t\t\t\t\t\tif (clone)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\t\t\t\tvar clone = this.graph.cloneCell(edge);\n\t\t\t\t\t\t\tmodel.add(parent, clone, model.getChildCount(parent));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\tmodel.setGeometry(clone, geo);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar other = model.getTerminal(edge, !this.isSource);\n\t\t\t\t\t\t\tthis.graph.connectCell(clone, other, !this.isSource);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tedge = clone;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tedge = this.connect(edge, terminal, this.isSource, clone, me);\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.graph.isAllowDanglingEdges())\n\t\t\t\t{\n\t\t\t\t\tvar pt = this.abspoints[(this.isSource) ? 0 : this.abspoints.length - 1];\n\t\t\t\t\tpt.x = this.roundLength(pt.x / this.graph.view.scale - this.graph.view.translate.x);\n\t\t\t\t\tpt.y = this.roundLength(pt.y / this.graph.view.scale - this.graph.view.translate.y);\n\n\t\t\t\t\tvar pstate = this.graph.getView().getState(\n\t\t\t\t\t\t\tthis.graph.getModel().getParent(edge));\n\t\t\t\t\t\t\t\n\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt.x -= pstate.origin.x;\n\t\t\t\t\t\tpt.y -= pstate.origin.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t// Destroys and recreates this handler\n\t\t\t\t\tedge = this.changeTerminalPoint(edge, pt, this.isSource, clone);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.active)\n\t\t\t{\n\t\t\t\tedge = this.changePoints(edge, this.points, clone);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.graph.getView().invalidate(this.state.cell);\n\t\t\t\tthis.graph.getView().validate(this.state.cell);\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Resets the preview color the state of the handler if this\n\t\t// handler has not been recreated\n\t\tif (this.marker != null)\n\t\t{\n\t\t\tthis.reset();\n\n\t\t\t// Updates the selection if the edge has been cloned\n\t\t\tif (edge != this.state.cell)\n\t\t\t{\n\t\t\t\tthis.graph.setSelectionCell(edge);\n\t\t\t}\n\t\t}\n\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxEdgeHandler.prototype.reset = function()\n{\n\tif (this.active)\n\t{\n\t\tthis.refresh();\n\t}\n\t\n\tthis.error = null;\n\tthis.index = null;\n\tthis.label = null;\n\tthis.points = null;\n\tthis.snapPoint = null;\n\tthis.isLabel = false;\n\tthis.isSource = false;\n\tthis.isTarget = false;\n\tthis.active = false;\n\t\n\tif (this.livePreview && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.reset();\n\t}\n\t\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].reset();\n\t\t}\n\t}\n\n\tthis.setPreviewColor(mxConstants.EDGE_SELECTION_COLOR);\n\tthis.removeHint();\n\tthis.redraw();\n};\n\n/**\n * Function: setPreviewColor\n * \n * Sets the color of the preview to the given value.\n */\nmxEdgeHandler.prototype.setPreviewColor = function(color)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid. Returns the given, modified\n * point instance.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x);\n\tpoint.y = Math.round(point.y / scale - tr.y);\n\n\tvar pstate = this.graph.getView().getState(\n\t\tthis.graph.getModel().getParent(this.state.cell));\n\n\tif (pstate != null)\n\t{\n\t\tpoint.x -= pstate.origin.x;\n\t\tpoint.y -= pstate.origin.y;\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: moveLabel\n * \n * Changes the coordinates for the label of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * x - Integer that specifies the x-coordinate of the new location.\n * y - Integer that specifies the y-coordinate of the new location.\n */\nmxEdgeHandler.prototype.moveLabel = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar scale = this.graph.getView().scale;\n\t\tgeometry = geometry.clone();\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\t// Resets the relative location stored inside the geometry\n\t\t\tvar pt = this.graph.getView().getRelativePoint(edgeState, x, y);\n\t\t\tgeometry.x = Math.round(pt.x * 10000) / 10000;\n\t\t\tgeometry.y = Math.round(pt.y);\n\t\t\t\n\t\t\t// Resets the offset inside the geometry to find the offset\n\t\t\t// from the resulting point\n\t\t\tgeometry.offset = new mxPoint(0, 0);\n\t\t\tvar pt = this.graph.view.getPoint(edgeState, geometry);\n\t\t\tgeometry.offset = new mxPoint(Math.round((x - pt.x) / scale), Math.round((y - pt.y) / scale));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar points = edgeState.absolutePoints;\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar cx = p0.x + (pe.x - p0.x) / 2;\n\t\t\t\tvar cy = p0.y + (pe.y - p0.y) / 2;\n\t\t\t\t\n\t\t\t\tgeometry.offset = new mxPoint(Math.round((x - cx) / scale), Math.round((y - cy) / scale));\n\t\t\t\tgeometry.x = 0;\n\t\t\t\tgeometry.y = 0;\n\t\t\t}\n\t\t}\n\n\t\tmodel.setGeometry(edgeState.cell, geometry);\n\t}\n};\n\n/**\n * Function: connect\n * \n * Changes the terminal or terminal point of the given edge in the graph\n * model.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be reconnected.\n * terminal - <mxCell> that represents the new terminal.\n * isSource - Boolean indicating if the new terminal is the source or\n * target terminal.\n * isClone - Boolean indicating if the new connection should be a clone of\n * the old edge.\n * me - <mxMouseEvent> that contains the mouse up event.\n */\nmxEdgeHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(edge);\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar constraint = this.constraintHandler.currentConstraint;\n\t\t\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\n\t\tthis.graph.connectCell(edge, terminal, isSource, constraint);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changeTerminalPoint\n * \n * Changes the terminal point of the given edge.\n */\nmxEdgeHandler.prototype.changeTerminalPoint = function(edge, point, isSource, clone)\n{\n\tvar model = this.graph.getModel();\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar terminal = model.getTerminal(edge, !isSource);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, terminal, !isSource);\n\t\t}\n\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.setTerminalPoint(point, isSource);\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t\tthis.graph.connectCell(edge, null, isSource, new mxConnectionConstraint());\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changePoints\n * \n * Changes the control points of the given edge in the graph model.\n */\nmxEdgeHandler.prototype.changePoints = function(edge, points, clone)\n{\n\tvar model = this.graph.getModel();\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar source = model.getTerminal(edge, true);\n\t\t\tvar target = model.getTerminal(edge, false);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, source, true);\n\t\t\tmodel.setTerminal(edge, target, false);\n\t\t}\n\t\t\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points = points;\n\t\t\t\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: addPoint\n * \n * Adds a control point for the given state and event.\n */\nmxEdgeHandler.prototype.addPoint = function(state, evt)\n{\n\tvar pt = mxUtils.convertPoint(this.graph.container, mxEvent.getClientX(evt),\n\t\t\tmxEvent.getClientY(evt));\n\tvar gridEnabled = this.graph.isGridEnabledEvent(evt);\n\tthis.convertPoint(pt, gridEnabled);\n\tthis.addPointAt(state, pt.x, pt.y);\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: addPointAt\n * \n * Adds a control point at the given point.\n */\nmxEdgeHandler.prototype.addPointAt = function(state, x, y)\n{\n\tvar geo = this.graph.getCellGeometry(state.cell);\n\tvar pt = new mxPoint(x, y);\n\t\n\tif (geo != null)\n\t{\n\t\tgeo = geo.clone();\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar offset = new mxPoint(t.x * s, t.y * s);\n\t\t\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pState = this.graph.view.getState(parent);\n\t\t\toffset = new mxPoint(pState.x, pState.y);\n\t\t}\n\t\t\n\t\tvar index = mxUtils.findNearestSegment(state, pt.x * s + offset.x, pt.y * s + offset.y);\n\n\t\tif (geo.points == null)\n\t\t{\n\t\t\tgeo.points = [pt];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.points.splice(index, 0, pt);\n\t\t}\n\t\t\n\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\tthis.refresh();\t\n\t\tthis.redraw();\n\t}\n};\n\n/**\n * Function: removePoint\n * \n * Removes the control point at the given index from the given state.\n */\nmxEdgeHandler.prototype.removePoint = function(state, index)\n{\n\tif (index > 0 && index < this.abspoints.length - 1)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\t\t\n\t\tif (geo != null && geo.points != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points.splice(index - 1, 1);\n\t\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\t\tthis.refresh();\n\t\t\tthis.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleFillColor\n * \n * Returns the fillcolor for the handle at the given index.\n */\nmxEdgeHandler.prototype.getHandleFillColor = function(index)\n{\n\tvar isSource = index == 0;\n\tvar cell = this.state.cell;\n\tvar terminal = this.graph.getModel().getTerminal(cell, isSource);\n\tvar color = mxConstants.HANDLE_FILLCOLOR;\n\t\n\tif ((terminal != null && !this.graph.isCellDisconnectable(cell, terminal, isSource)) ||\n\t\t(terminal == null && !this.graph.isTerminalPointMovable(cell, isSource)))\n\t{\n\t\tcolor = mxConstants.LOCKED_HANDLE_FILLCOLOR;\n\t}\n\telse if (terminal != null && this.graph.isCellDisconnectable(cell, terminal, isSource))\n\t{\n\t\tcolor = mxConstants.CONNECT_HANDLE_FILLCOLOR;\n\t}\n\t\n\treturn color;\n};\n\n/**\n * Function: redraw\n * \n * Redraws the preview, and the bends- and label control points.\n */\nmxEdgeHandler.prototype.redraw = function(ignoreHandles)\n{\n\tthis.abspoints = this.state.absolutePoints.slice();\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\t\n\tif (g != null)\n\t{\n\t\tvar pts = g.points;\n\t\n\t\tif (this.bends != null && this.bends.length > 0)\n\t\t{\n\t\t\tif (pts != null)\n\t\t\t{\n\t\t\t\tif (this.points == null)\n\t\t\t\t{\n\t\t\t\t\tthis.points = [];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t\t\t\t{\n\t\t\t\t\tif (this.bends[i] != null && this.abspoints[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points[i - 1] = pts[i - 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.drawPreview();\n\t\n\tif (!ignoreHandles)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles.\n */\nmxEdgeHandler.prototype.redrawHandles = function()\n{\n\tvar cell = this.state.cell;\n\n\t// Updates the handle for the label position\n\tvar b = this.labelShape.bounds;\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape.bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\n\t// Shows or hides the label handle depending on the label\n\tvar lab = this.graph.getLabel(cell);\n\tthis.labelShape.visible = (lab != null && lab.length > 0 && this.graph.isLabelMovable(cell));\n\t\n\tif (this.bends != null && this.bends.length > 0)\n\t{\n\t\tvar n = this.abspoints.length - 1;\n\t\t\n\t\tvar p0 = this.abspoints[0];\n\t\tvar x0 = p0.x;\n\t\tvar y0 = p0.y;\n\t\t\n\t\tb = this.bends[0].bounds;\n\t\tthis.bends[0].bounds = new mxRectangle(Math.floor(x0 - b.width / 2),\n\t\t\t\tMath.floor(y0 - b.height / 2), b.width, b.height);\n\t\tthis.bends[0].fill = this.getHandleFillColor(0);\n\t\tthis.bends[0].redraw();\n\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[0].bounds);\n\t\t}\n\t\t\t\t\n\t\tvar pe = this.abspoints[n];\n\t\tvar xn = pe.x;\n\t\tvar yn = pe.y;\n\t\t\n\t\tvar bn = this.bends.length - 1;\n\t\tb = this.bends[bn].bounds;\n\t\tthis.bends[bn].bounds = new mxRectangle(Math.floor(xn - b.width / 2),\n\t\t\t\tMath.floor(yn - b.height / 2), b.width, b.height);\n\t\tthis.bends[bn].fill = this.getHandleFillColor(bn);\n\t\tthis.bends[bn].redraw();\n\t\t\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[bn].bounds);\n\t\t}\n\t\t\n\t\tthis.redrawInnerBends(p0, pe);\n\t}\n\n\tif (this.abspoints != null && this.virtualBends != null && this.virtualBends.length > 0)\n\t{\n\t\tvar last = this.abspoints[0];\n\t\t\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (this.virtualBends[i] != null && this.abspoints[i + 1] != null)\n\t\t\t{\n\t\t\t\tvar pt = this.abspoints[i + 1];\n\t\t\t\tvar b = this.virtualBends[i];\n\t\t\t\tvar x = last.x + (pt.x - last.x) / 2;\n\t\t\t\tvar y = last.y + (pt.y - last.y) / 2;\n\t\t\t\tb.bounds = new mxRectangle(Math.floor(x - b.bounds.width / 2),\n\t\t\t\t\t\tMath.floor(y - b.bounds.height / 2), b.bounds.width, b.bounds.height);\n\t\t\t\tb.redraw();\n\t\t\t\tmxUtils.setOpacity(b.node, this.virtualBendOpacity);\n\t\t\t\tlast = pt;\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(b.bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.redraw();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility =\n\t\t\t\t(this.isCustomHandleVisible(this.customHandles[i])) ?\n\t\t\t\t'' : 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: isCustomHandleVisible\n * \n * Returns true if the given custom handle is visible.\n */\nmxEdgeHandler.prototype.isCustomHandleVisible = function(handle)\n{\n\treturn !this.graph.isEditing() && this.state.view.graph.getSelectionCount() == 1;\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxEdgeHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tthis.bends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\t\n\tif (this.virtualBends != null)\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tthis.virtualBends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.node.style.display = (visible) ? '' : 'none';\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t{\n\t\tif (this.bends[i] != null)\n\t\t{\n\t\t\tif (this.abspoints[i] != null)\n\t\t\t{\n\t\t\t\tvar x = this.abspoints[i].x;\n\t\t\t\tvar y = this.abspoints[i].y;\n\t\t\t\t\n\t\t\t\tvar b = this.bends[i].bounds;\n\t\t\t\tthis.bends[i].node.style.visibility = 'visible';\n\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - b.width / 2),\n\t\t\t\t\t\tMath.round(y - b.height / 2), b.width, b.height);\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(this.bends[i].bounds);\n\t\t\t\t}\n\t\t\t\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(this.bends[i].bounds, this.labelShape.bounds))\n\t\t\t\t{\n\t\t\t\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - w / 2), Math.round(y - h / 2), w, h);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.bends[i].redraw();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.bends[i].destroy();\n\t\t\t\tthis.bends[i] = null;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: checkLabelHandle\n * \n * Checks if the label handle intersects the given bounds and moves it if it\n * intersects.\n */\nmxEdgeHandler.prototype.checkLabelHandle = function(b)\n{\n\tif (this.labelShape != null)\n\t{\n\t\tvar b2 = this.labelShape.bounds;\n\t\t\n\t\tif (mxUtils.intersects(b, b2))\n\t\t{\n\t\t\tif (b.getCenterY() < b2.getCenterY())\n\t\t\t{\n\t\t\t\tb2.y = b.y + b.height;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb2.y = b.y - b2.height;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxEdgeHandler.prototype.drawPreview = function()\n{\n\tif (this.isLabel)\n\t{\n\t\tvar b = this.labelShape.bounds;\n\t\tvar bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\t\t\n\t\tif (!this.labelShape.bounds.equals(bounds))\n\t\t{\n\t\t\tthis.labelShape.bounds = bounds;\n\t\t\tthis.labelShape.redraw();\n\t\t}\n\t}\n\t\n\tif (this.shape != null && !mxUtils.equalPoints(this.shape.points, this.abspoints))\n\t{\n\t\tthis.shape.apply(this.state);\n\t\tthis.shape.points = this.abspoints.slice();\n\t\tthis.shape.scale = this.state.view.scale;\n\t\tthis.shape.isDashed = this.isSelectionDashed();\n\t\tthis.shape.stroke = this.getSelectionColor();\n\t\tthis.shape.strokewidth = this.getSelectionStrokeWidth() / this.shape.scale / this.shape.scale;\n\t\tthis.shape.isShadow = false;\n\t\tthis.shape.redraw();\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.redraw();\n\t}\n};\n\n/**\n * Function: refresh\n * \n * Refreshes the bends of this handler.\n */\nmxEdgeHandler.prototype.refresh = function()\n{\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.points = [];\n\n\tif (this.bends != null)\n\t{\n\t\tthis.destroyBends(this.bends);\n\t\tthis.bends = this.createBends();\n\t}\n\t\n\tif (this.virtualBends != null)\n\t{\n\t\tthis.destroyBends(this.virtualBends);\n\t\tthis.virtualBends = this.createVirtualBends();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tthis.destroyBends(this.customHandles);\n\t\tthis.customHandles = this.createCustomHandles();\n\t}\n\t\n\t// Puts label node on top of bends\n\tif (this.labelShape != null && this.labelShape.node != null && this.labelShape.node.parentNode != null)\n\t{\n\t\tthis.labelShape.node.parentNode.appendChild(this.labelShape.node);\n\t}\n};\n\n/**\n * Function: destroyBends\n * \n * Destroys all elements in <bends>.\n */\nmxEdgeHandler.prototype.destroyBends = function(bends)\n{\n\tif (bends != null)\n\t{\n\t\tfor (var i = 0; i < bends.length; i++)\n\t\t{\n\t\t\tif (bends[i] != null)\n\t\t\t{\n\t\t\t\tbends[i].destroy();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called as handlers are destroyed automatically\n * when the corresponding cell is deselected.\n */\nmxEdgeHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.destroy();\n\t\tthis.labelShape = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\t\n\tthis.destroyBends(this.virtualBends);\n\tthis.virtualBends = null;\n\t\n\tthis.destroyBends(this.customHandles);\n\tthis.customHandles = null;\n\n\tthis.destroyBends(this.bends);\n\tthis.bends = null;\n\t\n\tthis.removeHint();\n};\n\n__mxOutput.mxEdgeHandler = typeof mxEdgeHandler !== 'undefined' ? mxEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxElbowEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler>. It extends <mxEdgeHandler>.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be modified.\n */\nfunction mxElbowEdgeHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxElbowEdgeHandler, mxEdgeHandler);\n\n/**\n * Specifies if a double click on the middle handle should call\n * <mxGraph.flipEdge>. Default is true.\n */\nmxElbowEdgeHandler.prototype.flipEnabled = true;\n\n/**\n * Variable: doubleClickOrientationResource\n * \n * Specifies the resource key for the tooltip to be displayed on the single\n * control point for routed edges. If the resource for this key does not\n * exist then the value is used as the error message. Default is\n * 'doubleClickOrientation'.\n */\nmxElbowEdgeHandler.prototype.doubleClickOrientationResource =\n\t(mxClient.language != 'none') ? 'doubleClickOrientation' : '';\n\n/**\n * Function: createBends\n * \n * Overrides <mxEdgeHandler.createBends> to create custom bends.\n */\n mxElbowEdgeHandler.prototype.createBends = function()\n {\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\t// Virtual\n\tbends.push(this.createVirtualBend(mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt) && this.flipEnabled)\n\t\t{\n\t\t\tthis.graph.flipEdge(this.state.cell, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t})));\n\t\n\tthis.points.push(new mxPoint(0,0));\n\n\t// Target\n\tbend = this.createHandleShape(2);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\t\n\treturn bends;\n };\n\n/**\n * Function: createVirtualBend\n * \n * Creates a virtual bend that supports double clicking and calls\n * <mxGraph.flipEdge>.\n */\nmxElbowEdgeHandler.prototype.createVirtualBend = function(dblClickHandler)\n{\n\tvar bend = this.createHandleShape();\n\tthis.initBend(bend, dblClickHandler);\n\n\tbend.setCursor(this.getCursorForBend());\n\n\tif (!this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tbend.node.style.display = 'none';\n\t}\n\n\treturn bend;\n};\n\n/**\n * Function: getCursorForBend\n * \n * Returns the cursor to be used for the bend.\n */\nmxElbowEdgeHandler.prototype.getCursorForBend = function()\n{\n\treturn (this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.TopToBottom ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_TOPTOBOTTOM ||\n\t\t((this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.ElbowConnector ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_ELBOW)&&\n\t\tthis.state.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL)) ? \n\t\t'row-resize' : 'col-resize';\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns the tooltip for the given node.\n */\nmxElbowEdgeHandler.prototype.getTooltipForNode = function(node)\n{\n\tvar tip = null;\n\t\n\tif (this.bends != null && this.bends[1] != null && (node == this.bends[1].node ||\n\t\tnode.parentNode == this.bends[1].node))\n\t{\n\t\ttip = this.doubleClickOrientationResource;\n\t\ttip = mxResources.get(tip) || tip; // translate\n\t}\n\n\treturn tip;\n};\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxElbowEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\tvar origin = this.state.origin;\n\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x - origin.x);\n\tpoint.y = Math.round(point.y / scale - tr.y - origin.y);\n\t\n\treturn point;\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxElbowEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = this.state.absolutePoints;\n\tvar pt = null;\n\n\t// Keeps the virtual bend on the edge shape\n\tif (pts.length > 1)\n\t{\n\t\tp0 = pts[1];\n\t\tpe = pts[pts.length - 2];\n\t}\n\telse if (g.points != null && g.points.length > 0)\n\t{\n\t\tpt = pts[0];\n\t}\n\t\n\tif (pt == null)\n\t{\n\t\tpt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint(this.graph.getView().scale * (pt.x + this.graph.getView().translate.x + this.state.origin.x),\n\t\t\t\tthis.graph.getView().scale * (pt.y + this.graph.getView().translate.y + this.state.origin.y));\n\t}\n\n\t// Makes handle slightly bigger if the yellow  label handle\n\t// exists and intersects this green handle\n\tvar b = this.bends[1].bounds;\n\tvar w = b.width;\n\tvar h = b.height;\n\tvar bounds = new mxRectangle(Math.round(pt.x - w / 2), Math.round(pt.y - h / 2), w, h);\n\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(bounds);\n\t}\n\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(bounds, this.labelShape.bounds))\n\t{\n\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\tbounds = new mxRectangle(Math.floor(pt.x - w / 2), Math.floor(pt.y - h / 2), w, h);\n\t}\n\n\tthis.bends[1].bounds = bounds;\n\tthis.bends[1].redraw();\n\t\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(this.bends[1].bounds);\n\t}\n};\n\n__mxOutput.mxElbowEdgeHandler = typeof mxElbowEdgeHandler !== 'undefined' ? mxElbowEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nfunction mxEdgeSegmentHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxEdgeSegmentHandler, mxElbowEdgeHandler);\n\n/**\n * Function: getCurrentPoints\n * \n * Returns the current absolute points.\n */\nmxEdgeSegmentHandler.prototype.getCurrentPoints = function()\n{\n\tvar pts = this.state.absolutePoints;\n\t\n\tif (pts != null)\n\t{\n\t\t// Special case for straight edges where we add a virtual middle handle for moving the edge\n\t\tvar tol = Math.max(1, this.graph.view.scale);\n\t\t\n\t\tif (pts.length == 2 || (pts.length == 3 &&\n\t\t\t(Math.abs(pts[0].x - pts[1].x) < tol && Math.abs(pts[1].x - pts[2].x) < tol ||\n\t\t\tMath.abs(pts[0].y - pts[1].y) < tol && Math.abs(pts[1].y - pts[2].y) < tol)))\n\t\t{\n\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\n\t\t\tpts = [pts[0], new mxPoint(cx, cy), new mxPoint(cx, cy), pts[pts.length - 1]];\t\n\t\t}\n\t}\n\n\treturn pts;\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeSegmentHandler.prototype.getPreviewPoints = function(point)\n{\n\tif (this.isSource || this.isTarget)\n\t{\n\t\treturn mxElbowEdgeHandler.prototype.getPreviewPoints.apply(this, arguments);\n\t}\n\telse\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\tvar last = this.convertPoint(pts[0].clone(), false);\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar result = [];\n\n\t\tfor (var i = 1; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt = this.convertPoint(pts[i].clone(), false);\n\t\t\t\n\t\t\tif (i == this.index)\n\t\t\t{\n\t\t\t\tif (Math.round(last.x - pt.x) == 0)\n\t\t \t\t{\n\t\t\t\t\tlast.x = point.x;\n\t\t\t\t\tpt.x = point.x;\n\t\t \t\t}\n\t\t \t\t\n\t\t\t\tif (Math.round(last.y - pt.y) == 0)\n\t\t \t\t{\n\t\t \t\t\tlast.y = point.y;\n\t\t \t\t\tpt.y = point.y;\n\t\t \t\t}\n\t\t\t}\n\n\t\t\tif (i < pts.length - 1)\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t}\n\n\t\t\tlast = pt;\n\t\t}\n\t\t\n\t\t// Replaces single point that intersects with source or target\n\t\tif (result.length == 1)\n\t\t{\n\t\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\t\tvar scale = this.state.view.getScale();\n\t\t\tvar tr = this.state.view.getTranslate();\n\t\t\t\n\t\t\tvar x = result[0].x * scale + tr.x;\n\t\t\tvar y = result[0].y * scale + tr.y;\n\t\t\t\n\t\t\tif ((source != null && mxUtils.contains(source, x, y)) ||\n\t\t\t\t(target != null && mxUtils.contains(target, x, y)))\n\t\t\t{\n\t\t\t\tresult = [point, point];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: updatePreviewState\n * \n * Overridden to perform optimization of the edge style result.\n */\nmxEdgeSegmentHandler.prototype.updatePreviewState = function(edge, point, terminalState, me)\n{\n\tmxEdgeHandler.prototype.updatePreviewState.apply(this, arguments);\n\n\t// Checks and corrects preview by running edge style again\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar pts = edge.absolutePoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t\t\n\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\tvar rpts = this.state.absolutePoints;\n\t\t\n\t\t// A straight line is represented by 3 handles\n\t\tif (result.length == 0 && (Math.round(pts[0].x - pts[pts.length - 1].x) == 0 ||\n\t\t\tMath.round(pts[0].y - pts[pts.length - 1].y) == 0))\n\t\t{\n\t\t\tresult = [point, point];\n\t\t}\n\t\t// Handles special case of transitions from straight vertical to routed\n\t\telse if (pts.length == 5 && result.length == 2 && source != null && target != null &&\n\t\t\t\trpts != null && Math.round(rpts[0].x - rpts[rpts.length - 1].x) == 0)\n\t\t{\n\t\t\tvar view = this.graph.getView();\n\t\t\tvar scale = view.getScale();\n\t\t\tvar tr = view.getTranslate();\n\t\t\t\n\t\t\tvar y0 = view.getRoutingCenterY(source) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\t\t\t\n\t\t\tif (sc != null)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(source, sc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\ty0 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar ye = view.getRoutingCenterY(target) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\t\t\n\t\t\tif (tc)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(target, tc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\tye = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult = [new mxPoint(point.x, y0), new mxPoint(point.x, ye)];\n\t\t}\n\n\t\tthis.points = result;\n\n\t\t// LATER: Check if points and result are different\n\t\tedge.view.updateFixedTerminalPoints(edge, source, target);\n\t\tedge.view.updatePoints(edge, this.points, source, target);\n\t\tedge.view.updateFloatingTerminalPoints(edge, source, target);\n\t}\n};\n\n/**\n * Overriden to merge edge segments.\n */\nmxEdgeSegmentHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar geo = model.getGeometry(edge);\n\tvar result = null;\n\t\n\t// Merges adjacent edge segments\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tvar pts = this.abspoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\t\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (result != null)\n\t\t{\n\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.points = result;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge = mxEdgeHandler.prototype.connect.apply(this, arguments);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns no tooltips.\n */\nmxEdgeSegmentHandler.prototype.getTooltipForNode = function(node)\n{\n\treturn null;\n};\n\n/**\n * Function: createBends\n * \n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.start = function(x, y, index)\n{\n\tmxEdgeHandler.prototype.start.apply(this, arguments);\n\t\n\tif (this.bends != null && this.bends[index] != null &&\n\t\t!this.isSource && !this.isTarget)\n\t{\n\t\tmxUtils.setOpacity(this.bends[index].node, 100);\n\t}\n};\n\n/**\n * Function: createBends\n * \n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.createBends = function()\n{\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\tvar pts = this.getCurrentPoints();\n\n\t// Waypoints (segment handles)\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tif (this.points == null)\n\t\t{\n\t\t\tthis.points = [];\n\t\t}\n\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tbend = this.createVirtualBend();\n\t\t\tbends.push(bend);\n\t\t\tvar horizontal = Math.round(pts[i].x - pts[i + 1].x) == 0;\n\t\t\t\n\t\t\t// Special case where dy is 0 as well\n\t\t\tif (Math.round(pts[i].y - pts[i + 1].y) == 0 && i < pts.length - 2)\n\t\t\t{\n\t\t\t\thorizontal = Math.round(pts[i].x - pts[i + 2].x) == 0;\n\t\t\t}\n\t\t\t\n\t\t\tbend.setCursor((horizontal) ? 'col-resize' : 'row-resize');\n\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t}\n\t}\n\n\t// Target\n\tvar bend = this.createHandleShape(pts.length);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\treturn bends;\n};\n\n/**\n * Function: redraw\n * \n * Overridden to invoke <refresh> before the redraw.\n */\nmxEdgeSegmentHandler.prototype.redraw = function()\n{\n\tthis.refresh();\n\tmxEdgeHandler.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates the position of the custom bends.\n */\nmxEdgeSegmentHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\t\n\t\tif (pts != null && pts.length > 1)\n\t\t{\n\t\t\tvar straight = false;\n\t\t\t\n\t\t\t// Puts handle in the center of straight edges\n\t\t\tif (pts.length == 4 && Math.round(pts[1].x - pts[2].x) == 0 && Math.round(pts[1].y - pts[2].y) == 0)\n\t\t\t{\n\t\t\t\tstraight = true;\n\t\t\t\t\n\t\t\t\tif (Math.round(pts[0].y - pts[pts.length - 1].y) == 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(cx, pts[1].y);\n\t\t\t\t\tpts[2] = new mxPoint(cx, pts[2].y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(pts[1].x, cy);\n\t\t\t\t\tpts[2] = new mxPoint(pts[2].x, cy);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t\t{\n\t\t\t\tif (this.bends[i + 1] != null)\n\t\t\t\t{\n\t\t \t\t\tvar p0 = pts[i];\n\t \t\t\t\tvar pe = pts[i + 1];\n\t\t\t \t\tvar pt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t\t\t \t\tvar b = this.bends[i + 1].bounds;\n\t\t\t \t\tthis.bends[i + 1].bounds = new mxRectangle(Math.floor(pt.x - b.width / 2),\n\t\t\t \t\t\t\tMath.floor(pt.y - b.height / 2), b.width, b.height);\n\t\t\t\t \tthis.bends[i + 1].redraw();\n\t\t\t\t \t\n\t\t\t\t \tif (this.manageLabelHandle)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.checkLabelHandle(this.bends[i + 1].bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (straight)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.bends[1].node, this.virtualBendOpacity);\n\t\t\t\tmxUtils.setOpacity(this.bends[3].node, this.virtualBendOpacity);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeSegmentHandler = typeof mxEdgeSegmentHandler !== 'undefined' ? mxEdgeSegmentHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxKeyHandler\n *\n * Event handler that listens to keystroke events. This is not a singleton,\n * however, it is normally only required once if the target is the document\n * element (default).\n * \n * This handler installs a key event listener in the topmost DOM node and\n * processes all events that originate from descandants of <mxGraph.container>\n * or from the topmost DOM node. The latter means that all unhandled keystrokes\n * are handled by this object regardless of the focused state of the <graph>.\n * \n * Example:\n * \n * The following example creates a key handler that listens to the delete key\n * (46) and deletes the selection cells if the graph is enabled.\n * \n * (code)\n * var keyHandler = new mxKeyHandler(graph);\n * keyHandler.bindKey(46, function(evt)\n * {\n *   if (graph.isEnabled())\n *   {\n *     graph.removeCells();\n *   }\n * });\n * (end)\n * \n * Keycodes:\n * \n * See http://tinyurl.com/yp8jgl or http://tinyurl.com/229yqw for a list of\n * keycodes or install a key event listener into the document element and print\n * the key codes of the respective events to the console.\n * \n * To support the Command key and the Control key on the Mac, the following\n * code can be used.\n *\n * (code)\n * keyHandler.getFunction = function(evt)\n * {\n *   if (evt != null)\n *   {\n *     return (mxEvent.isControlDown(evt) || (mxClient.IS_MAC && evt.metaKey)) ? this.controlKeys[evt.keyCode] : this.normalKeys[evt.keyCode];\n *   }\n *   \n *   return null;\n * };\n * (end)\n * \n * Constructor: mxKeyHandler\n *\n * Constructs an event handler that executes functions bound to specific\n * keystrokes.\n * \n * Parameters:\n * \n * graph - Reference to the associated <mxGraph>.\n * target - Optional reference to the event target. If null, the document\n * element is used as the event target, that is, the object where the key\n * event listener is installed.\n */\nfunction mxKeyHandler(graph, target)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.target = target || document.documentElement;\n\t\t\n\t\t// Creates the arrays to map from keycodes to functions\n\t\tthis.normalKeys = [];\n\t\tthis.shiftKeys = [];\n\t\tthis.controlKeys = [];\n\t\tthis.controlShiftKeys = [];\n\t\t\n\t\tthis.keydownHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.keyDown(evt);\n\t\t});\n\n\t\t// Installs the keystroke listener in the target\n\t\tmxEvent.addListener(this.target, 'keydown', this.keydownHandler);\n\t\t\n\t\t// Automatically deallocates memory in IE\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> associated with this handler.\n */\nmxKeyHandler.prototype.graph = null;\n\n/**\n * Variable: target\n * \n * Reference to the target DOM, that is, the DOM node where the key event\n * listeners are installed.\n */\nmxKeyHandler.prototype.target = null;\n\n/**\n * Variable: normalKeys\n * \n * Maps from keycodes to functions for non-pressed control keys.\n */\nmxKeyHandler.prototype.normalKeys = null;\n\n/**\n * Variable: shiftKeys\n * \n * Maps from keycodes to functions for pressed shift keys.\n */\nmxKeyHandler.prototype.shiftKeys = null;\n\n/**\n * Variable: controlKeys\n * \n * Maps from keycodes to functions for pressed control keys.\n */\nmxKeyHandler.prototype.controlKeys = null;\n\n/**\n * Variable: controlShiftKeys\n * \n * Maps from keycodes to functions for pressed control and shift keys.\n */\nmxKeyHandler.prototype.controlShiftKeys = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxKeyHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxKeyHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling by updating <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxKeyHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: bindKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is not pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindKey = function(code, funct)\n{\n\tthis.normalKeys[code] = funct;\n};\n\n/**\n * Function: bindShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the shift key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindShiftKey = function(code, funct)\n{\n\tthis.shiftKeys[code] = funct;\n};\n\n/**\n * Function: bindControlKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlKey = function(code, funct)\n{\n\tthis.controlKeys[code] = funct;\n};\n\n/**\n * Function: bindControlShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control and shift key are pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlShiftKey = function(code, funct)\n{\n\tthis.controlShiftKeys[code] = funct;\n};\n\n/**\n * Function: isControlDown\n * \n * Returns true if the control key is pressed. This uses <mxEvent.isControlDown>.\n * \n * Parameters:\n * \n * evt - Key event whose control key pressed state should be returned.\n */\nmxKeyHandler.prototype.isControlDown = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: getFunction\n * \n * Returns the function associated with the given key event or null if no\n * function is associated with the given event.\n * \n * Parameters:\n * \n * evt - Key event whose associated function should be returned.\n */\nmxKeyHandler.prototype.getFunction = function(evt)\n{\n\tif (evt != null && !mxEvent.isAltDown(evt))\n\t{\n\t\tif (this.isControlDown(evt))\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.controlShiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.controlKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.shiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.normalKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\t\n/**\n * Function: isGraphEvent\n * \n * Returns true if the event should be processed by this handler, that is,\n * if the event source is either the target, one of its direct children, a\n * descendant of the <mxGraph.container>, or the <mxGraph.cellEditor> of the\n * <graph>.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isGraphEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\t\n\t// Accepts events from the target object or\n\t// in-place editing inside graph\n\tif ((source == this.target || source.parentNode == this.target) ||\n\t\t(this.graph.cellEditor != null && this.graph.cellEditor.isEventSource(evt)))\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Accepts events from inside the container\n\treturn mxUtils.isAncestorNode(this.graph.container, source);\n};\n\n/**\n * Function: keyDown\n * \n * Handles the event by invoking the function bound to the respective keystroke\n * if <isEnabledForEvent> returns true for the given event and if\n * <isEventIgnored> returns false, except for escape for which\n * <isEventIgnored> is not invoked.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.keyDown = function(evt)\n{\n\tif (this.isEnabledForEvent(evt))\n\t{\n\t\t// Cancels the editing if escape is pressed\n\t\tif (evt.keyCode == 27 /* Escape */)\n\t\t{\n\t\t\tthis.escape(evt);\n\t\t}\n\t\t\n\t\t// Invokes the function for the keystroke\n\t\telse if (!this.isEventIgnored(evt))\n\t\t{\n\t\t\tvar boundFunction = this.getFunction(evt);\n\t\t\t\n\t\t\tif (boundFunction != null)\n\t\t\t{\n\t\t\t\tboundFunction(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the given event should be handled. <isEventIgnored> is\n * called later if the event is not an escape key stroke, in which case\n * <escape> is called. This implementation returns true if <isEnabled>\n * returns true for both, this handler and <graph>, if the event is not\n * consumed and if <isGraphEvent> returns true.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEnabledForEvent = function(evt)\n{\n\treturn (this.graph.isEnabled() && !mxEvent.isConsumed(evt) &&\n\t\tthis.isGraphEvent(evt) && this.isEnabled());\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given keystroke should be ignored. This returns\n * graph.isEditing().\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEventIgnored = function(evt)\n{\n\treturn this.graph.isEditing();\n};\n\n/**\n * Function: escape\n * \n * Hook to process ESCAPE keystrokes. This implementation invokes\n * <mxGraph.stopEditing> to cancel the current editing, connecting\n * and/or other ongoing modifications.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke. Possible keycode in this\n * case is 27 (ESCAPE).\n */\nmxKeyHandler.prototype.escape = function(evt)\n{\n\tif (this.graph.isEscapeEnabled())\n\t{\n\t\tthis.graph.escape(evt);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its references into the DOM. This does\n * normally not need to be called, it is called automatically when the\n * window unloads (in IE).\n */\nmxKeyHandler.prototype.destroy = function()\n{\n\tif (this.target != null && this.keydownHandler != null)\n\t{\n\t\tmxEvent.removeListener(this.target, 'keydown', this.keydownHandler);\n\t\tthis.keydownHandler = null;\n\t}\n\t\n\tthis.target = null;\n};\n\n__mxOutput.mxKeyHandler = typeof mxKeyHandler !== 'undefined' ? mxKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTooltipHandler\n * \n * Graph event handler that displays tooltips. <mxGraph.getTooltip> is used to\n * get the tooltip for a cell or handle. This handler is built-into\n * <mxGraph.tooltipHandler> and enabled using <mxGraph.setTooltips>.\n *\n * Example:\n * \n * (code>\n * new mxTooltipHandler(graph);\n * (end)\n * \n * Constructor: mxTooltipHandler\n * \n * Constructs an event handler that displays tooltips with the specified\n * delay (in milliseconds). If no delay is specified then a default delay\n * of 500 ms (0.5 sec) is used.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * delay - Optional delay in milliseconds.\n */\nfunction mxTooltipHandler(graph, delay)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.delay = delay || 500;\n\t\tthis.graph.addMouseListener(this);\n\t}\n};\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the tooltip and its shadow. Default is 10005.\n */\nmxTooltipHandler.prototype.zIndex = 10005;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxTooltipHandler.prototype.graph = null;\n\n/**\n * Variable: delay\n * \n * Delay to show the tooltip in milliseconds. Default is 500.\n */\nmxTooltipHandler.prototype.delay = null;\n\n/**\n * Variable: ignoreTouchEvents\n * \n * Specifies if touch and pen events should be ignored. Default is true.\n */\nmxTooltipHandler.prototype.ignoreTouchEvents = true;\n\n/**\n * Variable: hideOnHover\n * \n * Specifies if the tooltip should be hidden if the mouse is moved over the\n * current cell. Default is false.\n */\nmxTooltipHandler.prototype.hideOnHover = false;\n\n/**\n * Variable: destroyed\n * \n * True if this handler was destroyed using <destroy>.\n */\nmxTooltipHandler.prototype.destroyed = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxTooltipHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxTooltipHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxTooltipHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isHideOnHover\n * \n * Returns <hideOnHover>.\n */\nmxTooltipHandler.prototype.isHideOnHover = function()\n{\n\treturn this.hideOnHover;\n};\n\n/**\n * Function: setHideOnHover\n * \n * Sets <hideOnHover>.\n */\nmxTooltipHandler.prototype.setHideOnHover = function(value)\n{\n\tthis.hideOnHover = value;\n};\n\n/**\n * Function: init\n * \n * Initializes the DOM nodes required for this tooltip handler.\n */\nmxTooltipHandler.prototype.init = function()\n{\n\tif (document.body != null)\n\t{\n\t\tthis.div = document.createElement('div');\n\t\tthis.div.className = 'mxTooltip';\n\t\tthis.div.style.visibility = 'hidden';\n\n\t\tdocument.body.appendChild(this.div);\n\n\t\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}));\n\t}\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the <mxCellState> to be used for showing a tooltip for this event.\n */\nmxTooltipHandler.prototype.getStateForEvent = function(me)\n{\n\treturn me.getState();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxTooltipHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.reset(me, false);\n\tthis.hideTooltip();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the rubberband selection.\n */\nmxTooltipHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (me.getX() != this.lastX || me.getY() != this.lastY)\n\t{\n\t\tthis.reset(me, true);\n\t\tvar state = this.getStateForEvent(me);\n\t\t\n\t\tif (this.isHideOnHover() || state != this.state || (me.getSource() != this.node &&\n\t\t\t(!this.stateSource || (state != null && this.stateSource ==\n\t\t\t(me.isSource(state.shape) || !me.isSource(state.text))))))\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}\n\t}\n\t\n\tthis.lastX = me.getX();\n\tthis.lastY = me.getY();\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by resetting the tooltip timer or hiding the existing\n * tooltip.\n */\nmxTooltipHandler.prototype.mouseUp = function(sender, me)\n{\n\tthis.reset(me, true);\n\tthis.hideTooltip();\n};\n\n\n/**\n * Function: resetTimer\n * \n * Resets the timer.\n */\nmxTooltipHandler.prototype.resetTimer = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearTimeout(this.thread);\n\t\tthis.thread = null;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets and/or restarts the timer to trigger the display of the tooltip.\n */\nmxTooltipHandler.prototype.reset = function(me, restart, state)\n{\n\tif (!this.ignoreTouchEvents || mxEvent.isMouseEvent(me.getEvent()))\n\t{\n\t\tthis.resetTimer();\n\t\tstate = (state != null) ? state : this.getStateForEvent(me);\n\t\t\n\t\tif (restart && this.isEnabled() && state != null && (this.div == null ||\n\t\t\tthis.div.style.visibility == 'hidden'))\n\t\t{\n\t\t\tvar node = me.getSource();\n\t\t\tvar x = me.getX();\n\t\t\tvar y = me.getY();\n\t\t\tvar stateSource = me.isSource(state.shape) || me.isSource(state.text);\n\t\n\t\t\tthis.thread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (!this.graph.isEditing() && !this.graph.popupMenuHandler.isMenuShowing() && !this.graph.isMouseDown)\n\t\t\t\t{\n\t\t\t\t\t// Uses information from inside event cause using the event at\n\t\t\t\t\t// this (delayed) point in time is not possible in IE as it no\n\t\t\t\t\t// longer contains the required information (member not found)\n\t\t\t\t\tvar tip = this.graph.getTooltip(state, node, x, y);\n\t\t\t\t\tthis.show(tip, x, y);\n\t\t\t\t\tthis.state = state;\n\t\t\t\t\tthis.node = node;\n\t\t\t\t\tthis.stateSource = stateSource;\n\t\t\t\t}\n\t\t\t}), this.delay);\n\t\t}\n\t}\n};\n\n/**\n * Function: hide\n * \n * Hides the tooltip and resets the timer.\n */\nmxTooltipHandler.prototype.hide = function()\n{\n\tthis.resetTimer();\n\tthis.hideTooltip();\n};\n\n/**\n * Function: hideTooltip\n * \n * Hides the tooltip.\n */\nmxTooltipHandler.prototype.hideTooltip = function()\n{\n\tif (this.div != null)\n\t{\n\t\tthis.div.style.visibility = 'hidden';\n\t\tthis.div.innerHTML = '';\n\t}\n};\n\n/**\n * Function: show\n * \n * Shows the tooltip for the specified cell and optional index at the\n * specified location (with a vertical offset of 10 pixels).\n */\nmxTooltipHandler.prototype.show = function(tip, x, y)\n{\n\tif (!this.destroyed && tip != null && tip.length > 0)\n\t{\n\t\t// Initializes the DOM nodes if required\n\t\tif (this.div == null)\n\t\t{\n\t\t\tthis.init();\n\t\t}\n\t\t\n\t\tvar origin = mxUtils.getScrollOrigin();\n\n\t\tthis.div.style.zIndex = this.zIndex;\n\t\tthis.div.style.left = (x + origin.x) + 'px';\n\t\tthis.div.style.top = (y + mxConstants.TOOLTIP_VERTICAL_OFFSET +\n\t\t\torigin.y) + 'px';\n\n\t\tif (!mxUtils.isNode(tip))\n\t\t{\t\n\t\t\tthis.div.innerHTML = tip.replace(/\\n/g, '<br>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.innerHTML = '';\n\t\t\tthis.div.appendChild(tip);\n\t\t}\n\t\t\n\t\tthis.div.style.visibility = '';\n\t\tmxUtils.fit(this.div);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxTooltipHandler.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div != null && this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.destroyed = true;\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxTooltipHandler = typeof mxTooltipHandler !== 'undefined' ? mxTooltipHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellTracker\n * \n * Event handler that highlights cells. Inherits from <mxCellMarker>.\n * \n * Example:\n * \n * (code)\n * new mxCellTracker(graph, '#00FF00');\n * (end)\n * \n * For detecting dragEnter, dragOver and dragLeave on cells, the following\n * code can be used:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   cell: null,\n *   mouseDown: function(sender, me) { },\n *   mouseMove: function(sender, me)\n *   {\n *     var tmp = me.getCell();\n *     \n *     if (tmp != this.cell)\n *     {\n *       if (this.cell != null)\n *       {\n *         this.dragLeave(me.getEvent(), this.cell);\n *       }\n *       \n *       this.cell = tmp;\n *       \n *       if (this.cell != null)\n *       {\n *         this.dragEnter(me.getEvent(), this.cell);\n *       }\n *     }\n *     \n *     if (this.cell != null)\n *     {\n *       this.dragOver(me.getEvent(), this.cell);\n *     }\n *   },\n *   mouseUp: function(sender, me) { },\n *   dragEnter: function(evt, cell)\n *   {\n *     mxLog.debug('dragEnter', cell.value);\n *   },\n *   dragOver: function(evt, cell)\n *   {\n *     mxLog.debug('dragOver', cell.value);\n *   },\n *   dragLeave: function(evt, cell)\n *   {\n *     mxLog.debug('dragLeave', cell.value);\n *   }\n * });\n * (end)\n * \n * Constructor: mxCellTracker\n * \n * Constructs an event handler that highlights cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * color - Color of the highlight. Default is blue.\n * funct - Optional JavaScript function that is used to override\n * <mxCellMarker.getCell>.\n */\nfunction mxCellTracker(graph, color, funct)\n{\n\tmxCellMarker.call(this, graph, color);\n\n\tthis.graph.addMouseListener(this);\n\t\n\tif (funct != null)\n\t{\n\t\tthis.getCell = funct;\n\t}\n\t\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t}\n};\n\n/**\n * Extends mxCellMarker.\n */\nmxUtils.extend(mxCellTracker, mxCellMarker);\n\n/**\n * Function: mouseDown\n * \n * Ignores the event. The event is not consumed.\n */\nmxCellTracker.prototype.mouseDown = function(sender, me) { };\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting the cell under the mousepointer if it\n * is over the hotspot region of the cell.\n */\nmxCellTracker.prototype.mouseMove = function(sender, me)\n{\n\tif (this.isEnabled())\n\t{\n\t\tthis.process(me);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by reseting the highlight.\n */\nmxCellTracker.prototype.mouseUp = function(sender, me) { };\n\n/**\n * Function: destroy\n * \n * Destroys the object and all its resources and DOM nodes. This doesn't\n * normally need to be called. It is called automatically when the window\n * unloads.\n */\nmxCellTracker.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxCellMarker.prototype.destroy.apply(this);\n\t}\n};\n\n__mxOutput.mxCellTracker = typeof mxCellTracker !== 'undefined' ? mxCellTracker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellHighlight\n * \n * A helper class to highlight cells. Here is an example for a given cell.\n * \n * (code)\n * var highlight = new mxCellHighlight(graph, '#ff0000', 2);\n * highlight.highlight(graph.view.getState(cell)));\n * (end)\n * \n * Constructor: mxCellHighlight\n * \n * Constructs a cell highlight.\n */\nfunction mxCellHighlight(graph, highlightColor, strokeWidth, dashed)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.highlightColor = (highlightColor != null) ? highlightColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.strokeWidth = (strokeWidth != null) ? strokeWidth : mxConstants.HIGHLIGHT_STROKEWIDTH;\n\t\tthis.dashed = (dashed != null) ? dashed : false;\n\t\tthis.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\n\t\t// Updates the marker if the graph changes\n\t\tthis.repaintHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Updates reference to state\n\t\t\tif (this.state != null)\n\t\t\t{\n\t\t\t\tvar tmp = this.graph.view.getState(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (tmp == null)\n\t\t\t\t{\n\t\t\t\t\tthis.hide();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.state = tmp;\n\t\t\t\t\tthis.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.SCALE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.repaintHandler);\n\t\t\n\t\t// Hides the marker if the current root changes\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.hide();\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.DOWN, this.resetHandler);\n\t\tthis.graph.getView().addListener(mxEvent.UP, this.resetHandler);\n\t}\n};\n\n/**\n * Variable: keepOnTop\n * \n * Specifies if the highlights should appear on top of everything\n * else in the overlay pane. Default is false.\n */\nmxCellHighlight.prototype.keepOnTop = false;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellHighlight.prototype.graph = true;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState>.\n */\nmxCellHighlight.prototype.state = null;\n\n/**\n * Variable: spacing\n * \n * Specifies the spacing between the highlight for vertices and the vertex.\n * Default is 2.\n */\nmxCellHighlight.prototype.spacing = 2;\n\n/**\n * Variable: resetHandler\n * \n * Holds the handler that automatically invokes reset if the highlight\n * should be hidden.\n */\nmxCellHighlight.prototype.resetHandler = null;\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxCellHighlight.prototype.setHighlightColor = function(color)\n{\n\tthis.highlightColor = color;\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n/**\n * Function: drawHighlight\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.drawHighlight = function()\n{\n\tthis.shape = this.createShape();\n\tthis.repaint();\n\n\tif (!this.keepOnTop && this.shape.node.parentNode.firstChild != this.shape.node)\n\t{\n\t\tthis.shape.node.parentNode.insertBefore(this.shape.node, this.shape.node.parentNode.firstChild);\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.createShape = function()\n{\n\tvar shape = this.graph.cellRenderer.createShape(this.state);\n\t\n\tshape.svgStrokeTolerance = this.graph.tolerance;\n\tshape.points = this.state.absolutePoints;\n\tshape.apply(this.state);\n\tshape.stroke = this.highlightColor;\n\tshape.opacity = this.opacity;\n\tshape.isDashed = this.dashed;\n\tshape.isShadow = false;\n\t\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, this.state);\n\t\n\tif (this.graph.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.pointerEvents = false;\n\t}\n\telse\n\t{\n\t\tshape.svgPointerEvents = 'stroke';\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: repaint\n * \n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.getStrokeWidth = function(state)\n{\n\treturn this.strokeWidth;\n};\n\n/**\n * Function: repaint\n * \n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.repaint = function()\n{\n\tif (this.state != null && this.shape != null)\n\t{\n\t\tthis.shape.scale = this.state.view.scale;\n\t\t\n\t\tif (this.graph.model.isEdge(this.state.cell))\n\t\t{\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth();\n\t\t\tthis.shape.points = this.state.absolutePoints;\n\t\t\tthis.shape.outline = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.shape.bounds = new mxRectangle(this.state.x - this.spacing, this.state.y - this.spacing,\n\t\t\t\t\tthis.state.width + 2 * this.spacing, this.state.height + 2 * this.spacing);\n\t\t\tthis.shape.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth() / this.state.view.scale;\n\t\t\tthis.shape.outline = true;\n\t\t}\n\n\t\t// Uses cursor from shape in highlight\n\t\tif (this.state.shape != null)\n\t\t{\n\t\t\tthis.shape.setCursor(this.state.shape.getCursor());\n\t\t}\n\t\t\n\t\t// Workaround for event transparency in VML with transparent color\n\t\t// is to use a non-transparent color with near zero opacity\n\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t{\n\t\t\tif (this.shape.stroke == 'transparent')\n\t\t\t{\n\t\t\t\t// KNOWN: Quirks mode does not seem to catch events if\n\t\t\t\t// we do not force an update of the DOM via a change such\n\t\t\t\t// as mxLog.debug. Since IE6 is EOL we do not add a fix.\n\t\t\t\tthis.shape.stroke = 'white';\n\t\t\t\tthis.shape.opacity = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.shape.opacity = this.opacity;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: hide\n * \n * Resets the state of the cell marker.\n */\nmxCellHighlight.prototype.hide = function()\n{\n\tthis.highlight(null);\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellHighlight.prototype.highlight = function(state)\n{\n\tif (this.state != state)\n\t{\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.destroy();\n\t\t\tthis.shape = null;\n\t\t}\n\n\t\tthis.state = state;\n\t\t\n\t\tif (this.state != null)\n\t\t{\n\t\t\tthis.drawHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHighlightAt\n * \n * Returns true if this highlight is at the given position.\n */\nmxCellHighlight.prototype.isHighlightAt = function(x, y)\n{\n\tvar hit = false;\n\t\n\t// Quirks mode is currently not supported as it used a different coordinate system\n\tif (this.shape != null && document.elementFromPoint != null && !mxClient.IS_QUIRKS)\n\t{\n\t\tvar elt = document.elementFromPoint(x, y);\n\n\t\twhile (elt != null)\n\t\t{\n\t\t\tif (elt == this.shape.node)\n\t\t\t{\n\t\t\t\thit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\t\n\treturn hit;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellHighlight.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getView().removeListener(this.repaintHandler);\n\tthis.graph.getModel().removeListener(this.repaintHandler);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxCellHighlight = typeof mxCellHighlight !== 'undefined' ? mxCellHighlight : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultKeyHandler\n *\n * Binds keycodes to actionnames in an editor. This aggregates an internal\n * <handler> and extends the implementation of <mxKeyHandler.escape> to not\n * only cancel the editing, but also hide the properties dialog and fire an\n * <mxEditor.escape> event via <editor>. An instance of this class is created\n * by <mxEditor> and stored in <mxEditor.keyHandler>.\n * \n * Example:\n * \n * Bind the delete key to the delete action in an existing editor.\n * \n * (code)\n * var keyHandler = new mxDefaultKeyHandler(editor);\n * keyHandler.bindAction(46, 'delete');\n * (end)\n *\n * Codec:\n * \n * This class uses the <mxDefaultKeyHandlerCodec> to read configuration\n * data into an existing instance. See <mxDefaultKeyHandlerCodec> for a\n * description of the configuration format.\n * \n * Keycodes:\n * \n * See <mxKeyHandler>.\n * \n * An <mxEvent.ESCAPE> event is fired via the editor if the escape key is\n * pressed.\n * \n * Constructor: mxDefaultKeyHandler\n *\n * Constructs a new default key handler for the <mxEditor.graph> in the\n * given <mxEditor>. (The editor may be null if a prototypical instance for\n * a <mxDefaultKeyHandlerCodec> is created.)\n * \n * Parameters:\n * \n * editor - Reference to the enclosing <mxEditor>.\n */\nfunction mxDefaultKeyHandler(editor)\n{\n\tif (editor != null)\n\t{\n\t\tthis.editor = editor;\n\t\tthis.handler = new mxKeyHandler(editor.graph);\n\t\t\n\t\t// Extends the escape function of the internal key\n\t\t// handle to hide the properties dialog and fire\n\t\t// the escape event via the editor instance\n\t\tvar old = this.handler.escape;\n\t\t\n\t\tthis.handler.escape = function(evt)\n\t\t{\n\t\t\told.apply(this, arguments);\n\t\t\teditor.hideProperties();\n\t\t\teditor.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n\t\t};\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.editor = null;\n\n/**\n * Variable: handler\n *\n * Holds the <mxKeyHandler> for key event handling.\n */\nmxDefaultKeyHandler.prototype.handler = null;\n\n/**\n * Function: bindAction\n *\n * Binds the specified keycode to the given action in <editor>. The\n * optional control flag specifies if the control key must be pressed\n * to trigger the action.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * action - Name of the action to execute in <editor>.\n * control - Optional boolean that specifies if control must be pressed.\n * Default is false.\n */\nmxDefaultKeyHandler.prototype.bindAction = function (code, action, control)\n{\n\tvar keyHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\n\t// Binds the function to control-down keycode\n\tif (control)\n\t{\n\t\tthis.handler.bindControlKey(code, keyHandler);\n\t}\n\n\t// Binds the function to the normal keycode\n\telse\n\t{\n\t\tthis.handler.bindKey(code, keyHandler);\t\t\t\t\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the <handler> associated with this object. This does normally\n * not need to be called, the <handler> is destroyed automatically when the\n * window unloads (in IE) by <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.destroy = function ()\n{\n\tthis.handler.destroy();\n\tthis.handler = null;\n};\n\n__mxOutput.mxDefaultKeyHandler = typeof mxDefaultKeyHandler !== 'undefined' ? mxDefaultKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultPopupMenu\n *\n * Creates popupmenus for mouse events. This object holds an XML node\n * which is a description of the popup menu to be created. In\n * <createMenu>, the configuration is applied to the context and\n * the resulting menu items are added to the menu dynamically. See\n * <createMenu> for a description of the configuration format.\n * \n * This class does not create the DOM nodes required for the popup menu, it\n * only parses an XML description to invoke the respective methods on an\n * <mxPopupMenu> each time the menu is displayed.\n *\n * Codec:\n * \n * This class uses the <mxDefaultPopupMenuCodec> to read configuration\n * data into an existing instance, however, the actual parsing is done\n * by this class during program execution, so the format is described\n * below.\n * \n * Constructor: mxDefaultPopupMenu\n *\n * Constructs a new popupmenu-factory based on given configuration.\n *\n * Paramaters:\n *\n * config - XML node that contains the configuration data.\n */\nfunction mxDefaultPopupMenu(config)\n{\n\tthis.config = config;\n};\n\n/**\n * Variable: imageBasePath\n *\n * Base path for all icon attributes in the config. Default is null.\n */\nmxDefaultPopupMenu.prototype.imageBasePath = null;\n\n/**\n * Variable: config\n *\n * XML node used as the description of new menu items. This node is\n * used in <createMenu> to dynamically create the menu items if their\n * respective conditions evaluate to true for the given arguments.\n */\nmxDefaultPopupMenu.prototype.config = null;\n\n/**\n * Function: createMenu\n *\n * This function is called from <mxEditor> to add items to the\n * given menu based on <config>. The config is a sequence of\n * the following nodes and attributes.\n *\n * Child Nodes: \n *\n * add - Adds a new menu item. See below for attributes.\n * separator - Adds a separator. No attributes.\n * condition - Adds a custom condition. Name attribute.\n * \n * The add-node may have a child node that defines a function to be invoked\n * before the action is executed (or instead of an action to be executed).\n *\n * Attributes:\n *\n * as - Resource key for the label (needs entry in property file).\n * action - Name of the action to execute in enclosing editor.\n * icon - Optional icon (relative/absolute URL).\n * iconCls - Optional CSS class for the icon.\n * if - Optional name of condition that must be true (see below).\n * enabled-if - Optional name of condition that specifies if the menu item\n * should be enabled.\n * name - Name of custom condition. Only for condition nodes.\n *\n * Conditions:\n *\n * nocell - No cell under the mouse.\n * ncells - More than one cell selected.\n * notRoot - Drilling position is other than home.\n * cell - Cell under the mouse.\n * notEmpty - Exactly one cell with children under mouse.\n * expandable - Exactly one expandable cell under mouse.\n * collapsable - Exactly one collapsable cell under mouse.\n * validRoot - Exactly one cell which is a possible root under mouse.\n * swimlane - Exactly one cell which is a swimlane under mouse.\n *\n * Example:\n *\n * To add a new item for a given action to the popupmenu:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"delete\" action=\"delete\" icon=\"images/delete.gif\" if=\"cell\"/>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * To add a new item for a custom function:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"action1\"><![CDATA[\n *\t\tfunction (editor, cell, evt)\n *\t\t{\n *\t\t\teditor.execute('action1', cell, 'myArg');\n *\t\t}\n *   ]]></add>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * The above example invokes action1 with an additional third argument via\n * the editor instance. The third argument is passed to the function that\n * defines action1. If the add-node has no action-attribute, then only the\n * function defined in the text content is executed, otherwise first the\n * function and then the action defined in the action-attribute is\n * executed. The function in the text content has 3 arguments, namely the\n * <mxEditor> instance, the <mxCell> instance under the mouse, and the\n * native mouse event.\n *\n * Custom Conditions:\n *\n * To add a new condition for popupmenu items:\n *  \n * (code)\n * <condition name=\"condition1\"><![CDATA[\n *   function (editor, cell, evt)\n *   {\n *     return cell != null;\n *   }\n * ]]></condition>\n * (end)\n * \n * The new condition can then be used in any item as follows:\n * \n * (code)\n * <add as=\"action1\" action=\"action1\" icon=\"action1.gif\" if=\"condition1\"/>\n * (end)\n * \n * The order in which the items and conditions appear is not significant as\n * all connditions are evaluated before any items are created.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu. \n */\nmxDefaultPopupMenu.prototype.createMenu = function(editor, menu, cell, evt)\n{\n\tif (this.config != null)\n\t{\n\t\tvar conditions = this.createConditions(editor, cell, evt);\n\t\tvar item = this.config.firstChild;\n\n\t\tthis.addItems(editor, menu, cell, evt, conditions, item, null);\n\t}\n};\n\n/**\n * Function: addItems\n * \n * Recursively adds the given items and all of its children into the given menu.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu.\n * conditions - Array of names boolean conditions.\n * item - XML node that represents the current menu item.\n * parent - DOM node that represents the parent menu item.\n */\nmxDefaultPopupMenu.prototype.addItems = function(editor, menu, cell, evt, conditions, item, parent)\n{\n\tvar addSeparator = false;\n\t\n\twhile (item != null)\n\t{\n\t\tif (item.nodeName == 'add')\n\t\t{\n\t\t\tvar condition = item.getAttribute('if');\n\t\t\t\n\t\t\tif (condition == null || conditions[condition])\n\t\t\t{\n\t\t\t\tvar as = item.getAttribute('as');\n\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(item));\n\t\t\t\tvar action = item.getAttribute('action');\n\t\t\t\tvar icon = item.getAttribute('icon');\n\t\t\t\tvar iconCls = item.getAttribute('iconCls');\n\t\t\t\tvar enabledCond = item.getAttribute('enabled-if');\n\t\t\t\tvar enabled = enabledCond == null || conditions[enabledCond];\n\t\t\t\t\n\t\t\t\tif (addSeparator)\n\t\t\t\t{\n\t\t\t\t\tmenu.addSeparator(parent);\n\t\t\t\t\taddSeparator = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (icon != null && this.imageBasePath)\n\t\t\t\t{\n\t\t\t\t\ticon = this.imageBasePath + icon;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar row = this.addAction(menu, editor, as, icon, funct, action, cell, parent, iconCls, enabled);\n\t\t\t\tthis.addItems(editor, menu, cell, evt, conditions, item.firstChild, row);\n\t\t\t}\n\t\t}\n\t\telse if (item.nodeName == 'separator')\n\t\t{\n\t\t\taddSeparator = true;\n\t\t}\n\t\t\n\t\titem = item.nextSibling;\n\t}\n};\n\n/**\n * Function: addAction\n *\n * Helper method to bind an action to a new menu item.\n * \n * Parameters:\n *\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * editor - Enclosing <mxEditor> instance.\n * lab - String that represents the label of the menu item.\n * icon - Optional URL that represents the icon of the menu item.\n * action - Optional name of the action to execute in the given editor.\n * funct - Optional function to execute before the optional action. The\n * function takes an <mxEditor>, the <mxCell> under the mouse and the\n * mouse event that triggered the call.\n * cell - Optional <mxCell> to use as an argument for the action.\n * parent - DOM node that represents the parent menu item.\n * iconCls - Optional CSS class for the menu icon.\n * enabled - Optional boolean that specifies if the menu item is enabled.\n * Default is true.\n */\nmxDefaultPopupMenu.prototype.addAction = function(menu, editor, lab, icon, funct, action, cell, parent, iconCls, enabled)\n{\n\tvar clickHandler = function(evt)\n\t{\n\t\tif (typeof(funct) == 'function')\n\t\t{\n\t\t\tfunct.call(editor, editor, cell, evt);\n\t\t}\n\t\t\n\t\tif (action != null)\n\t\t{\n\t\t\teditor.execute(action, cell, evt);\n\t\t}\n\t};\n\t\n\treturn menu.addItem(lab, icon, clickHandler, parent, iconCls, enabled);\n};\n\n/**\n * Function: createConditions\n * \n * Evaluates the default conditions for the given context.\n */\nmxDefaultPopupMenu.prototype.createConditions = function(editor, cell, evt)\n{\n\t// Creates array with conditions\n\tvar model = editor.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\t// Adds some frequently used conditions\n\tvar conditions = [];\n\tconditions['nocell'] = cell == null;\n\tconditions['ncells'] = editor.graph.getSelectionCount() > 1;\n\tconditions['notRoot'] = model.getRoot() !=\n\t\tmodel.getParent(editor.graph.getDefaultParent());\n\tconditions['cell'] = cell != null;\n\t\n\tvar isCell = cell != null && editor.graph.getSelectionCount() == 1;\n\tconditions['nonEmpty'] = isCell && childCount > 0;\n\tconditions['expandable'] = isCell && editor.graph.isCellFoldable(cell, false);\n\tconditions['collapsable'] = isCell && editor.graph.isCellFoldable(cell, true);\n\tconditions['validRoot'] = isCell && editor.graph.isValidRoot(cell);\n\tconditions['emptyValidRoot'] = conditions['validRoot'] && childCount == 0;\n\tconditions['swimlane'] = isCell && editor.graph.isSwimlane(cell);\n\n\t// Evaluates dynamic conditions from config file\n\tvar condNodes = this.config.getElementsByTagName('condition');\n\t\n\tfor (var i=0; i<condNodes.length; i++)\n\t{\n\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(condNodes[i]));\n\t\tvar name = condNodes[i].getAttribute('name');\n\t\t\n\t\tif (name != null && typeof(funct) == 'function')\n\t\t{\n\t\t\tconditions[name] = funct(editor, cell, evt);\n\t\t}\n\t}\n\t\n\treturn conditions;\n};\n\n__mxOutput.mxDefaultPopupMenu = typeof mxDefaultPopupMenu !== 'undefined' ? mxDefaultPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbar\n *\n * Toolbar for the editor. This modifies the state of the graph\n * or inserts new cells upon mouse clicks.\n * \n * Example:\n * \n * Create a toolbar with a button to copy the selection into the clipboard,\n * and a combo box with one action to paste the selection from the clipboard\n * into the graph.\n * \n * (code)\n * var toolbar = new mxDefaultToolbar(container, editor);\n * toolbar.addItem('Copy', null, 'copy');\n * \n * var combo = toolbar.addActionCombo('More actions...');\n * toolbar.addActionOption(combo, 'Paste', 'paste');\n * (end) \n *\n * Codec:\n * \n * This class uses the <mxDefaultToolbarCodec> to read configuration\n * data into an existing instance. See <mxDefaultToolbarCodec> for a\n * description of the configuration format.\n * \n * Constructor: mxDefaultToolbar\n *\n * Constructs a new toolbar for the given container and editor. The\n * container and editor may be null if a prototypical instance for a\n * <mxDefaultKeyHandlerCodec> is created.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n * editor - Reference to the enclosing <mxEditor>. \n */\nfunction mxDefaultToolbar(container, editor)\n{\n\tthis.editor = editor;\n\n\tif (container != null && editor != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultToolbar.prototype.editor = null;\n\n/**\n * Variable: toolbar\n *\n * Holds the internal <mxToolbar>.\n */\nmxDefaultToolbar.prototype.toolbar = null;\n\n/**\n * Variable: resetHandler\n *\n * Reference to the function used to reset the <toolbar>.\n */\nmxDefaultToolbar.prototype.resetHandler = null;\n\n/**\n * Variable: spacing\n *\n * Defines the spacing between existing and new vertices in\n * gridSize units when a new vertex is dropped on an existing\n * cell. Default is 4 (40 pixels).\n */\nmxDefaultToolbar.prototype.spacing = 4;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if elements should be connected if new cells are dropped onto\n * connectable elements. Default is false.\n */\nmxDefaultToolbar.prototype.connectOnDrop = false;\n\n/**\n * Function: init\n * \n * Constructs the <toolbar> for the given container and installs a listener\n * that updates the <mxEditor.insertFunction> on <editor> if an item is\n * selected in the toolbar. This assumes that <editor> is not null.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nmxDefaultToolbar.prototype.init = function(container)\n{\n\tif (container != null)\n\t{\n\t\tthis.toolbar = new mxToolbar(container);\n\t\t\n\t\t// Installs the insert function in the editor if an item is\n\t\t// selected in the toolbar\n\t\tthis.toolbar.addListener(mxEvent.SELECT, mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar funct = evt.getProperty('function');\n\t\t\t\n\t\t\tif (funct != null)\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = mxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tfunct.apply(this, arguments);\n\t\t\t\t\tthis.toolbar.resetMode();\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = null;\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Resets the selected tool after a doubleclick or escape keystroke\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.toolbar != null)\n\t\t\t{\n\t\t\t\tthis.toolbar.resetMode(true);\n\t\t\t}\n\t\t});\n\n\t\tthis.editor.graph.addListener(mxEvent.DOUBLE_CLICK, this.resetHandler);\n\t\tthis.editor.addListener(mxEvent.ESCAPE, this.resetHandler);\n\t}\n};\n\n/**\n * Function: addItem\n *\n * Adds a new item that executes the given action in <editor>. The title,\n * icon and pressedIcon are used to display the toolbar item.\n * \n * Parameters:\n *\n * title - String that represents the title (tooltip) for the item.\n * icon - URL of the icon to be used for displaying the item.\n * action - Name of the action to execute when the item is clicked.\n * pressed - Optional URL of the icon for the pressed state.\n */\nmxDefaultToolbar.prototype.addItem = function(title, icon, action, pressed)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (action != null && action.length > 0)\n\t\t{\n\t\t\tthis.editor.execute(action);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addItem(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addSeparator\n *\n * Adds a vertical separator using the optional icon.\n * \n * Parameters:\n * \n * icon - Optional URL of the icon that represents the vertical separator.\n * Default is <mxClient.imageBasePath> + '/separator.gif'.\n */\nmxDefaultToolbar.prototype.addSeparator = function(icon)\n{\n\ticon = icon || mxClient.imageBasePath + '/separator.gif';\n\tthis.toolbar.addSeparator(icon);\n};\n\t\n/**\n * Function: addCombo\n *\n * Helper method to invoke <mxToolbar.addCombo> on <toolbar> and return the\n * resulting DOM node.\n */\nmxDefaultToolbar.prototype.addCombo = function()\n{\n\treturn this.toolbar.addCombo();\n};\n\t\t\n/**\n * Function: addActionCombo\n *\n * Helper method to invoke <mxToolbar.addActionCombo> on <toolbar> using\n * the given title and return the resulting DOM node.\n * \n * Parameters:\n * \n * title - String that represents the title of the combo.\n */\nmxDefaultToolbar.prototype.addActionCombo = function(title)\n{\n\treturn this.toolbar.addActionCombo(title);\n};\n\n/**\n * Function: addActionOption\n *\n * Binds the given action to a option with the specified label in the\n * given combo. Combo is an object returned from an earlier call to\n * <addCombo> or <addActionCombo>.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * action - Name of the action to execute in <editor>.\n */\nmxDefaultToolbar.prototype.addActionOption = function(combo, title, action)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\t\n\tthis.addOption(combo, title, clickHandler);\n};\n\n/**\n * Function: addOption\n *\n * Helper method to invoke <mxToolbar.addOption> on <toolbar> and return\n * the resulting DOM node that represents the option.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * value - Object that represents the value of the option.\n */\nmxDefaultToolbar.prototype.addOption = function(combo, title, value)\n{\n\treturn this.toolbar.addOption(combo, title, value);\n};\n\t\n/**\n * Function: addMode\n *\n * Creates an item for selecting the given mode in the <editor>'s graph.\n * Supported modenames are select, connect and pan.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * mode - String that represents the mode name to be used in\n * <mxEditor.setMode>.\n * pressed - Optional URL of the icon that represents the pressed state.\n * funct - Optional JavaScript function that takes the <mxEditor> as the\n * first and only argument that is executed after the mode has been\n * selected.\n */\nmxDefaultToolbar.prototype.addMode = function(title, icon, mode, pressed, funct)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.setMode(mode);\n\t\t\n\t\tif (funct != null)\n\t\t{\n\t\t\tfunct(this.editor);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addSwitchMode(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addPrototype\n *\n * Creates an item for inserting a clone of the specified prototype cell into\n * the <editor>'s graph. The ptype may either be a cell or a function that\n * returns a cell.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * ptype - Function or object that represents the prototype cell. If ptype\n * is a function then it is invoked with no arguments to create new\n * instances.\n * pressed - Optional URL of the icon that represents the pressed state.\n * insert - Optional JavaScript function that handles an insert of the new\n * cell. This function takes the <mxEditor>, new cell to be inserted, mouse\n * event and optional <mxCell> under the mouse pointer as arguments.\n * toggle - Optional boolean that specifies if the item can be toggled.\n * Default is true.\n */\nmxDefaultToolbar.prototype.addPrototype = function(title, icon, ptype, pressed, insert, toggle)\n{\n\t// Creates a wrapper function that is in charge of constructing\n\t// the new cell instance to be inserted into the graph\n\tvar factory = mxUtils.bind(this, function()\n\t{\n\t\tif (typeof(ptype) == 'function')\n\t\t{\n\t\t\treturn ptype();\n\t\t}\n\t\telse if (ptype != null)\n\t\t{\n\t\t\treturn this.editor.graph.cloneCell(ptype);\n\t\t}\n\t\t\n\t\treturn null;\n\t});\n\t\n\t// Defines the function for a click event on the graph\n\t// after this item has been selected in the toolbar\n\tvar clickHandler = mxUtils.bind(this, function(evt, cell)\n\t{\n\t\tif (typeof(insert) == 'function')\n\t\t{\n\t\t\tinsert(this.editor, factory(), evt, cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.drop(factory(), evt, cell);\n\t\t}\n\t\t\n\t\tthis.toolbar.resetMode();\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tvar img = this.toolbar.addMode(title, icon, clickHandler, pressed, null, toggle);\n\t\t\t\t\n\t// Creates a wrapper function that calls the click handler without\n\t// the graph argument\n\tvar dropHandler = function(graph, evt, cell)\n\t{\n\t\tclickHandler(evt, cell);\n\t};\n\t\n\tthis.installDropHandler(img, dropHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: drop\n * \n * Handles a drop from a toolbar item to the graph. The given vertex\n * represents the new cell to be inserted. This invokes <insert> or\n * <connect> depending on the given target cell.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * target - Optional <mxCell> that represents the drop target.\n */\nmxDefaultToolbar.prototype.drop = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (target == null ||\n\t\tmodel.isEdge(target) ||\n\t\t!this.connectOnDrop ||\n\t\t!graph.isCellConnectable(target))\n\t{\n\t\twhile (target != null &&\n\t\t\t!graph.isValidDropTarget(target, [vertex], evt))\n\t\t{\n\t\t\ttarget = model.getParent(target);\n\t\t}\n\t\t\n\t\tthis.insert(vertex, evt, target);\n\t}\n\telse\n\t{\n\t\tthis.connect(vertex, evt, target);\n\t}\n};\n\n/**\n * Function: insert\n *\n * Handles a drop by inserting the given vertex into the given parent cell\n * or the default parent if no parent is specified.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * parent - Optional <mxCell> that represents the parent.\n */\nmxDefaultToolbar.prototype.insert = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\t\n\tif (graph.canImportCell(vertex))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\n\t\t// Splits the target edge or inserts into target group\n\t\tif (graph.isSplitEnabled() &&\n\t\t\tgraph.isSplitTarget(target, [vertex], evt))\n\t\t{\n\t\t\treturn graph.splitEdge(target, [vertex], null, pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.editor.addVertex(target, vertex, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: connect\n * \n * Handles a drop by connecting the given vertex to the given source cell.\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * source - Optional <mxCell> that represents the source terminal.\n */\nmxDefaultToolbar.prototype.connect = function(vertex, evt, source)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (source != null &&\n\t\tgraph.isCellConnectable(vertex) &&\n\t\tgraph.isEdgeValid(null, source, vertex))\n\t{\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar geo = model.getGeometry(source);\n\t\t\tvar g = model.getGeometry(vertex).clone();\n\t\t\t\n\t\t\t// Moves the vertex away from the drop target that will\n\t\t\t// be used as the source for the new connection\n\t\t\tg.x = geo.x + (geo.width - g.width) / 2;\n\t\t\tg.y = geo.y + (geo.height - g.height) / 2;\n\t\t\t\n\t\t\tvar step = this.spacing * graph.gridSize;\n\t\t\tvar dist = model.getDirectedEdgeCount(source, true) * 20;\n\t\t\t\n\t\t\tif (this.editor.horizontalFlow)\n\t\t\t{\n\t\t\t\tg.x += (g.width + geo.width) / 2 + step + dist;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.y += (g.height + geo.height) / 2 + step + dist;\n\t\t\t}\n\t\t\t\n\t\t\tvertex.setGeometry(g);\n\t\t\t\n\t\t\t// Fires two add-events with the code below - should be fixed\n\t\t\t// to only fire one add event for both inserts\n\t\t\tvar parent = model.getParent(source);\n\t\t\tgraph.addCell(vertex, parent);\n\t\t\tgraph.constrainChild(vertex);\n\n\t\t\t// Creates the edge using the editor instance and calls\n\t\t\t// the second function that fires an add event\n\t\t\tedge = this.editor.createEdge(source, vertex);\n\t\t\t\n\t\t\tif (model.getGeometry(edge) == null)\n\t\t\t{\n\t\t\t\tvar edgeGeometry = new mxGeometry();\n\t\t\t\tedgeGeometry.relative = true;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, edgeGeometry);\n\t\t\t}\n\t\t\t\n\t\t\tgraph.addEdge(edge, parent, source, vertex);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tgraph.setSelectionCells([vertex, edge]);\n\t\tgraph.scrollCellToVisible(vertex);\n\t}\n};\n\n/**\n * Function: installDropHandler\n * \n * Makes the given img draggable using the given function for handling a\n * drop event.\n * \n * Parameters:\n * \n * img - DOM node that represents the image.\n * dropHandler - Function that handles a drop of the image.\n */\nmxDefaultToolbar.prototype.installDropHandler = function (img, dropHandler)\n{\n\tvar sprite = document.createElement('img');\n\tsprite.setAttribute('src', img.getAttribute('src'));\n\n\t// Handles delayed loading of the images\n\tvar loader = mxUtils.bind(this, function(evt)\n\t{\n\t\t// Preview uses the image node with double size. Later this can be\n\t\t// changed to use a separate preview and guides, but for this the\n\t\t// dropHandler must use the additional x- and y-arguments and the\n\t\t// dragsource which makeDraggable returns much be configured to\n\t\t// use guides via mxDragSource.isGuidesEnabled.\n\t\tsprite.style.width = (2 * img.offsetWidth) + 'px';\n\t\tsprite.style.height = (2 * img.offsetHeight) + 'px';\n\n\t\tmxUtils.makeDraggable(img, this.editor.graph, dropHandler,\n\t\t\tsprite);\n\t\tmxEvent.removeListener(sprite, 'load', loader);\n\t});\n\n\tif (mxClient.IS_IE)\n\t{\n\t\tloader();\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(sprite, 'load', loader);\n\t}\t\n};\n\n/**\n * Function: destroy\n * \n * Destroys the <toolbar> associated with this object and removes all\n * installed listeners. This does normally not need to be called, the\n * <toolbar> is destroyed automatically when the window unloads (in IE) by\n * <mxEditor>.\n */\nmxDefaultToolbar.prototype.destroy = function ()\n{\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.editor.graph.removeListener('dblclick', this.resetHandler);\n\t\tthis.editor.removeListener('escape', this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.toolbar != null)\n\t{\n\t\tthis.toolbar.destroy();\n\t\tthis.toolbar = null;\n\t}\n};\n\n__mxOutput.mxDefaultToolbar = typeof mxDefaultToolbar !== 'undefined' ? mxDefaultToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2019, draw.io AG\n */\n/**\n * Class: mxEditor\n *\n * Extends <mxEventSource> to implement an application wrapper for a graph that\n * adds <actions>, I/O using <mxCodec>, auto-layout using <mxLayoutManager>,\n * command history using <undoManager>, and standard dialogs and widgets, eg.\n * properties, help, outline, toolbar, and popupmenu. It also adds <templates>\n * to be used as cells in toolbars, auto-validation using the <validation>\n * flag, attribute cycling using <cycleAttributeValues>, higher-level events\n * such as <root>, and backend integration using <urlPost> and <urlImage>.\n *\n * Actions:\n *\n * Actions are functions stored in the <actions> array under their names. The\n * functions take the <mxEditor> as the first, and an optional <mxCell> as the\n * second argument and are invoked using <execute>. Any additional arguments\n * passed to execute are passed on to the action as-is.\n *\n * A list of built-in actions is available in the <addActions> description.\n *\n * Read/write Diagrams:\n *\n * To read a diagram from an XML string, for example from a textfield within the\n * page, the following code is used:\n *\n * (code)\n * var doc = mxUtils.parseXML(xmlString);\n * var node = doc.documentElement;\n * editor.readGraphModel(node);\n * (end)\n *\n * For reading a diagram from a remote location, use the <open> method.\n *\n * To save diagrams in XML on a server, you can set the <urlPost> variable.\n * This variable will be used in <getUrlPost> to construct a URL for the post\n * request that is issued in the <save> method. The post request contains the\n * XML representation of the diagram as returned by <writeGraphModel> in the\n * xml parameter.\n *\n * On the server side, the post request is processed using standard\n * technologies such as Java Servlets, CGI, .NET or ASP.\n *\n * Here are some examples of processing a post request in various languages.\n *\n * - Java: URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\")\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image, but not\n * if the XML is passed back to the client-side.\n *\n * - .NET: HttpUtility.UrlDecode(context.Request.Params[\"xml\"])\n * - PHP: urldecode($_POST[\"xml\"])\n *\n * Creating images:\n *\n * A backend (Java, PHP or C#) is required for creating images. The\n * distribution contains an example for each backend (ImageHandler.java,\n * ImageHandler.cs and graph.php). More information about using a backend\n * to create images can be found in the readme.html files. Note that the\n * preview is implemented using VML/SVG in the browser and does not require\n * a backend. The backend is only required to creates images (bitmaps).\n *\n * Special characters:\n *\n * Note There are five characters that should always appear in XML content as\n * escapes, so that they do not interact with the syntax of the markup. These\n * are part of the language for all documents based on XML and for HTML.\n *\n * - &lt; (<)\n * - &gt; (>)\n * - &amp; (&)\n * - &quot; (\")\n * - &apos; (')\n *\n * Although it is part of the XML language, &apos; is not defined in HTML.\n * For this reason the XHTML specification recommends instead the use of\n * &#39; if text may be passed to a HTML user agent.\n *\n * If you are having problems with special characters on the server-side then\n * you may want to try the <escapePostData> flag.\n *\n * For converting decimal escape sequences inside strings, a user has provided\n * us with the following function:\n *\n * (code)\n * function html2js(text)\n * {\n *   var entitySearch = /&#[0-9]+;/;\n *   var entity;\n *\n *   while (entity = entitySearch.exec(text))\n *   {\n *     var charCode = entity[0].substring(2, entity[0].length -1);\n *     text = text.substring(0, entity.index)\n *            + String.fromCharCode(charCode)\n *            + text.substring(entity.index + entity[0].length);\n *   }\n *\n *   return text;\n * }\n * (end)\n *\n * Otherwise try using hex escape sequences and the built-in unescape function\n * for converting such strings.\n *\n * Local Files:\n *\n * For saving and opening local files, no standardized method exists that\n * works across all browsers. The recommended way of dealing with local files\n * is to create a backend that streams the XML data back to the browser (echo)\n * as an attachment so that a Save-dialog is displayed on the client-side and\n * the file can be saved to the local disk.\n *\n * For example, in PHP the code that does this looks as follows.\n *\n * (code)\n * $xml = stripslashes($_POST[\"xml\"]);\n * header(\"Content-Disposition: attachment; filename=\\\"diagram.xml\\\"\");\n * echo($xml);\n * (end)\n *\n * To open a local file, the file should be uploaded via a form in the browser\n * and then opened from the server in the editor.\n *\n * Cell Properties:\n *\n * The properties displayed in the properties dialog are the attributes and\n * values of the cell's user object, which is an XML node. The XML node is\n * defined in the templates section of the config file.\n *\n * The templates are stored in <mxEditor.templates> and contain cells which\n * are cloned at insertion time to create new vertices by use of drag and\n * drop from the toolbar. Each entry in the toolbar for adding a new vertex\n * must refer to an existing template.\n *\n * In the following example, the task node is a business object and only the\n * mxCell node and its mxGeometry child contain graph information:\n *\n * (code)\n * <Task label=\"Task\" description=\"\">\n *   <mxCell vertex=\"true\">\n *     <mxGeometry as=\"geometry\" width=\"72\" height=\"32\"/>\n *   </mxCell>\n * </Task>\n * (end)\n *\n * The idea is that the XML representation is inverse from the in-memory\n * representation: The outer XML node is the user object and the inner node is\n * the cell. This means the user object of the cell is the Task node with no\n * children for the above example:\n *\n * (code)\n * <Task label=\"Task\" description=\"\"/>\n * (end)\n *\n * The Task node can have any tag name, attributes and child nodes. The\n * <mxCodec> will use the XML hierarchy as the user object, while removing the\n * \"known annotations\", such as the mxCell node. At save-time the cell data\n * will be \"merged\" back into the user object. The user object is only modified\n * via the properties dialog during the lifecycle of the cell.\n *\n * In the default implementation of <createProperties>, the user object's\n * attributes are put into a form for editing. Attributes are changed using\n * the <mxCellAttributeChange> action in the model. The dialog can be replaced\n * by overriding the <createProperties> hook or by replacing the showProperties\n * action in <actions>. Alternatively, the entry in the config file's popupmenu\n * section can be modified to invoke a different action.\n *\n * If you want to displey the properties dialog on a doubleclick, you can set\n * <mxEditor.dblClickAction> to showProperties as follows:\n *\n * (code)\n * editor.dblClickAction = 'showProperties';\n * (end)\n *\n * Popupmenu and Toolbar:\n *\n * The toolbar and popupmenu are typically configured using the respective\n * sections in the config file, that is, the popupmenu is defined as follows:\n *\n * (code)\n * <mxEditor>\n *   <mxDefaultPopupMenu as=\"popupHandler\">\n * \t\t<add as=\"cut\" action=\"cut\" icon=\"images/cut.gif\"/>\n *      ...\n * (end)\n *\n * New entries can be added to the toolbar by inserting an add-node into the\n * above configuration. Existing entries may be removed and changed by\n * modifying or removing the respective entries in the configuration.\n * The configuration is read by the <mxDefaultPopupMenuCodec>, the format of the\n * configuration is explained in <mxDefaultPopupMenu.decode>.\n *\n * The toolbar is defined in the mxDefaultToolbar section. Items can be added\n * and removed in this section.\n *\n * (code)\n * <mxEditor>\n *   <mxDefaultToolbar>\n *     <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n *     <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"/>\n *     ...\n * (end)\n *\n * The format of the configuration is described in\n * <mxDefaultToolbarCodec.decode>.\n *\n * Ids:\n *\n * For the IDs, there is an implicit behaviour in <mxCodec>: It moves the Id\n * from the cell to the user object at encoding time and vice versa at decoding\n * time. For example, if the Task node from above has an id attribute, then\n * the <mxCell.id> of the corresponding cell will have this value. If there\n * is no Id collision in the model, then the cell may be retrieved using this\n * Id with the <mxGraphModel.getCell> function. If there is a collision, a new\n * Id will be created for the cell using <mxGraphModel.createId>. At encoding\n * time, this new Id will replace the value previously stored under the id\n * attribute in the Task node.\n *\n * See <mxEditorCodec>, <mxDefaultToolbarCodec> and <mxDefaultPopupMenuCodec>\n * for information about configuring the editor and user interface.\n *\n * Programmatically inserting cells:\n *\n * For inserting a new cell, say, by clicking a button in the document,\n * the following code can be used. This requires an reference to the editor.\n *\n * (code)\n * var userObject = new Object();\n * var parent = editor.graph.getDefaultParent();\n * var model = editor.graph.model;\n * model.beginUpdate();\n * try\n * {\n *   editor.graph.insertVertex(parent, null, userObject, 20, 20, 80, 30);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n *\n * If a template cell from the config file should be inserted, then a clone\n * of the template can be created as follows. The clone is then inserted using\n * the add function instead of addVertex.\n *\n * (code)\n * var template = editor.templates['task'];\n * var clone = editor.graph.model.cloneCell(template);\n * (end)\n *\n * Resources:\n *\n * resources/editor - Language resources for mxEditor\n *\n * Callback: onInit\n *\n * Called from within the constructor. In the callback,\n * \"this\" refers to the editor instance.\n *\n * Cookie: mxgraph=seen\n *\n * Set when the editor is started. Never expires. Use\n * <resetFirstTime> to reset this cookie. This cookie\n * only exists if <onInit> is implemented.\n *\n * Event: mxEvent.OPEN\n *\n * Fires after a file was opened in <open>. The <code>filename</code> property\n * contains the filename that was used. The same value is also available in\n * <filename>.\n *\n * Event: mxEvent.SAVE\n *\n * Fires after the current file was saved in <save>. The <code>url</code>\n * property contains the URL that was used for saving.\n *\n * Event: mxEvent.POST\n *\n * Fires if a successful response was received in <postDiagram>. The\n * <code>request</code> property contains the <mxXmlRequest>, the\n * <code>url</code> and <code>data</code> properties contain the URL and the\n * data that were used in the post request.\n *\n * Event: mxEvent.ROOT\n *\n * Fires when the current root has changed, or when the title of the current\n * root has changed. This event has no properties.\n *\n * Event: mxEvent.BEFORE_ADD_VERTEX\n *\n * Fires before a vertex is added in <addVertex>. The <code>vertex</code>\n * property contains the new vertex and the <code>parent</code> property\n * contains its parent.\n *\n * Event: mxEvent.ADD_VERTEX\n *\n * Fires between begin- and endUpdate in <addVertex>. The <code>vertex</code>\n * property contains the vertex that is being inserted.\n *\n * Event: mxEvent.AFTER_ADD_VERTEX\n *\n * Fires after a vertex was inserted and selected in <addVertex>. The\n * <code>vertex</code> property contains the new vertex.\n *\n * Example:\n *\n * For starting an in-place edit after a new vertex has been added to the\n * graph, the following code can be used.\n *\n * (code)\n * editor.addListener(mxEvent.AFTER_ADD_VERTEX, function(sender, evt)\n * {\n *   var vertex = evt.getProperty('vertex');\n *\n *   if (editor.graph.isCellEditable(vertex))\n *   {\n *   \teditor.graph.startEditingAtCell(vertex);\n *   }\n * });\n * (end)\n *\n * Event: mxEvent.ESCAPE\n *\n * Fires when the escape key is pressed. The <code>event</code> property\n * contains the key event.\n *\n * Constructor: mxEditor\n *\n * Constructs a new editor. This function invokes the <onInit> callback\n * upon completion.\n *\n * Example:\n *\n * (code)\n * var config = mxUtils.load('config/diagrameditor.xml').getDocumentElement();\n * var editor = new mxEditor(config);\n * (end)\n *\n * Parameters:\n *\n * config - Optional XML node that contains the configuration.\n */\nfunction mxEditor(config)\n{\n\tthis.actions = [];\n\tthis.addActions();\n\n\t// Executes the following only if a document has been instanciated.\n\t// That is, don't execute when the editorcodec is setup.\n\tif (document.body != null)\n\t{\n\t\t// Defines instance fields\n\t\tthis.cycleAttributeValues = [];\n\t\tthis.popupHandler = new mxDefaultPopupMenu();\n\t\tthis.undoManager = new mxUndoManager();\n\n\t\t// Creates the graph and toolbar without the containers\n\t\tthis.graph = this.createGraph();\n\t\tthis.toolbar = this.createToolbar();\n\n\t\t// Creates the global keyhandler (requires graph instance)\n\t\tthis.keyHandler = new mxDefaultKeyHandler(this);\n\n\t\t// Configures the editor using the URI\n\t\t// which was passed to the ctor\n\t\tthis.configure(config);\n\n\t\t// Assigns the swimlaneIndicatorColorAttribute on the graph\n\t\tthis.graph.swimlaneIndicatorColorAttribute = this.cycleAttributeName;\n\n\t\t// Checks if the <onInit> hook has been set\n\t\tif (this.onInit != null)\n\t\t{\n\t\t\t// Invokes the <onInit> hook\n\t\t\tthis.onInit();\n\t\t}\n\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/editor');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/editor');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxEditor.prototype = new mxEventSource();\nmxEditor.prototype.constructor = mxEditor;\n\n/**\n * Group: Controls and Handlers\n */\n\n/**\n * Variable: askZoomResource\n *\n * Specifies the resource key for the zoom dialog. If the resource for this\n * key does not exist then the value is used as the error message. Default\n * is 'askZoom'.\n */\nmxEditor.prototype.askZoomResource = (mxClient.language != 'none') ? 'askZoom' : '';\n\n/**\n * Variable: lastSavedResource\n *\n * Specifies the resource key for the last saved info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'lastSaved'.\n */\nmxEditor.prototype.lastSavedResource = (mxClient.language != 'none') ? 'lastSaved' : '';\n\n/**\n * Variable: currentFileResource\n *\n * Specifies the resource key for the current file info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'currentFile'.\n */\nmxEditor.prototype.currentFileResource = (mxClient.language != 'none') ? 'currentFile' : '';\n\n/**\n * Variable: propertiesResource\n *\n * Specifies the resource key for the properties window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'properties'.\n */\nmxEditor.prototype.propertiesResource = (mxClient.language != 'none') ? 'properties' : '';\n\n/**\n * Variable: tasksResource\n *\n * Specifies the resource key for the tasks window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'tasks'.\n */\nmxEditor.prototype.tasksResource = (mxClient.language != 'none') ? 'tasks' : '';\n\n/**\n * Variable: helpResource\n *\n * Specifies the resource key for the help window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'help'.\n */\nmxEditor.prototype.helpResource = (mxClient.language != 'none') ? 'help' : '';\n\n/**\n * Variable: outlineResource\n *\n * Specifies the resource key for the outline window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'outline'.\n */\nmxEditor.prototype.outlineResource = (mxClient.language != 'none') ? 'outline' : '';\n\n/**\n * Variable: outline\n *\n * Reference to the <mxWindow> that contains the outline. The <mxOutline>\n * is stored in outline.outline.\n */\nmxEditor.prototype.outline = null;\n\n/**\n * Variable: graph\n *\n * Holds a <mxGraph> for displaying the diagram. The graph\n * is created in <setGraphContainer>.\n */\nmxEditor.prototype.graph = null;\n\n/**\n * Variable: graphRenderHint\n *\n * Holds the render hint used for creating the\n * graph in <setGraphContainer>. See <mxGraph>.\n * Default is null.\n */\nmxEditor.prototype.graphRenderHint = null;\n\n/**\n * Variable: toolbar\n *\n * Holds a <mxDefaultToolbar> for displaying the toolbar. The\n * toolbar is created in <setToolbarContainer>.\n */\nmxEditor.prototype.toolbar = null;\n\n/**\n * Variable: status\n *\n * DOM container that holds the statusbar. Default is null.\n * Use <setStatusContainer> to set this value.\n */\nmxEditor.prototype.status = null;\n\n/**\n * Variable: popupHandler\n *\n * Holds a <mxDefaultPopupMenu> for displaying\n * popupmenus.\n */\nmxEditor.prototype.popupHandler = null;\n\n/**\n * Variable: undoManager\n *\n * Holds an <mxUndoManager> for the command history.\n */\nmxEditor.prototype.undoManager = null;\n\n/**\n * Variable: keyHandler\n *\n * Holds a <mxDefaultKeyHandler> for handling keyboard events.\n * The handler is created in <setGraphContainer>.\n */\nmxEditor.prototype.keyHandler = null;\n\n/**\n * Group: Actions and Options\n */\n\n/**\n * Variable: actions\n *\n * Maps from actionnames to actions, which are functions taking\n * the editor and the cell as arguments. Use <addAction>\n * to add or replace an action and <execute> to execute an action\n * by name, passing the cell to be operated upon as the second\n * argument.\n */\nmxEditor.prototype.actions = null;\n\n/**\n * Variable: dblClickAction\n *\n * Specifies the name of the action to be executed\n * when a cell is double clicked. Default is 'edit'.\n *\n * To handle a singleclick, use the following code.\n *\n * (code)\n * editor.graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event');\n *   var cell = evt.getProperty('cell');\n *\n *   if (cell != null && !e.isConsumed())\n *   {\n *     // Do something useful with cell...\n *     e.consume();\n *   }\n * });\n * (end)\n */\nmxEditor.prototype.dblClickAction = 'edit';\n\n/**\n * Variable: swimlaneRequired\n *\n * Specifies if new cells must be inserted\n * into an existing swimlane. Otherwise, cells\n * that are not swimlanes can be inserted as\n * top-level cells. Default is false.\n */\nmxEditor.prototype.swimlaneRequired = false;\n\n/**\n * Variable: disableContextMenu\n *\n * Specifies if the context menu should be disabled in the graph container.\n * Default is true.\n */\nmxEditor.prototype.disableContextMenu = true;\n\n/**\n * Group: Templates\n */\n\n/**\n * Variable: insertFunction\n *\n * Specifies the function to be used for inserting new\n * cells into the graph. This is assigned from the\n * <mxDefaultToolbar> if a vertex-tool is clicked.\n */\nmxEditor.prototype.insertFunction = null;\n\n/**\n * Variable: forcedInserting\n *\n * Specifies if a new cell should be inserted on a single\n * click even using <insertFunction> if there is a cell\n * under the mousepointer, otherwise the cell under the\n * mousepointer is selected. Default is false.\n */\nmxEditor.prototype.forcedInserting = false;\n\n/**\n * Variable: templates\n *\n * Maps from names to protoype cells to be used\n * in the toolbar for inserting new cells into\n * the diagram.\n */\nmxEditor.prototype.templates = null;\n\n/**\n * Variable: defaultEdge\n *\n * Prototype edge cell that is used for creating\n * new edges.\n */\nmxEditor.prototype.defaultEdge = null;\n\n/**\n * Variable: defaultEdgeStyle\n *\n * Specifies the edge style to be returned in <getEdgeStyle>.\n * Default is null.\n */\nmxEditor.prototype.defaultEdgeStyle = null;\n\n/**\n * Variable: defaultGroup\n *\n * Prototype group cell that is used for creating\n * new groups.\n */\nmxEditor.prototype.defaultGroup = null;\n\n/**\n * Variable: groupBorderSize\n *\n * Default size for the border of new groups. If null,\n * then then <mxGraph.gridSize> is used. Default is\n * null.\n */\nmxEditor.prototype.groupBorderSize = null;\n\n/**\n * Group: Backend Integration\n */\n\n/**\n * Variable: filename\n *\n * Contains the URL of the last opened file as a string.\n * Default is null.\n */\nmxEditor.prototype.filename = null;\n\n/**\n * Variable: lineFeed\n *\n * Character to be used for encoding linefeeds in <save>. Default is '&#xa;'.\n */\nmxEditor.prototype.linefeed = '&#xa;';\n\n/**\n * Variable: postParameterName\n *\n * Specifies if the name of the post parameter that contains the diagram\n * data in a post request to the server. Default is 'xml'.\n */\nmxEditor.prototype.postParameterName = 'xml';\n\n/**\n * Variable: escapePostData\n *\n * Specifies if the data in the post request for saving a diagram\n * should be converted using encodeURIComponent. Default is true.\n */\nmxEditor.prototype.escapePostData = true;\n\n/**\n * Variable: urlPost\n *\n * Specifies the URL to be used for posting the diagram\n * to a backend in <save>.\n */\nmxEditor.prototype.urlPost = null;\n\n/**\n * Variable: urlImage\n *\n * Specifies the URL to be used for creating a bitmap of\n * the graph in the image action.\n */\nmxEditor.prototype.urlImage = null;\n\n/**\n * Group: Autolayout\n */\n\n/**\n * Variable: horizontalFlow\n *\n * Specifies the direction of the flow\n * in the diagram. This is used in the\n * layout algorithms. Default is false,\n * ie. vertical flow.\n */\nmxEditor.prototype.horizontalFlow = false;\n\n/**\n * Variable: layoutDiagram\n *\n * Specifies if the top-level elements in the\n * diagram should be layed out using a vertical\n * or horizontal stack depending on the setting\n * of <horizontalFlow>. The spacing between the\n * swimlanes is specified by <swimlaneSpacing>.\n * Default is false.\n *\n * If the top-level elements are swimlanes, then\n * the intra-swimlane layout is activated by\n * the <layoutSwimlanes> switch.\n */\nmxEditor.prototype.layoutDiagram = false;\n\n/**\n * Variable: swimlaneSpacing\n *\n * Specifies the spacing between swimlanes if\n * automatic layout is turned on in\n * <layoutDiagram>. Default is 0.\n */\nmxEditor.prototype.swimlaneSpacing = 0;\n\n/**\n * Variable: maintainSwimlanes\n *\n * Specifies if the swimlanes should be kept at the same\n * width or height depending on the setting of\n * <horizontalFlow>.  Default is false.\n *\n * For horizontal flows, all swimlanes\n * have the same height and for vertical flows, all swimlanes\n * have the same width. Furthermore, the swimlanes are\n * automatically \"stacked\" if <layoutDiagram> is true.\n */\nmxEditor.prototype.maintainSwimlanes = false;\n\n/**\n * Variable: layoutSwimlanes\n *\n * Specifies if the children of swimlanes should\n * be layed out, either vertically or horizontally\n * depending on <horizontalFlow>.\n * Default is false.\n */\nmxEditor.prototype.layoutSwimlanes = false;\n\n/**\n * Group: Attribute Cycling\n */\n\n/**\n * Variable: cycleAttributeValues\n *\n * Specifies the attribute values to be cycled when\n * inserting new swimlanes. Default is an empty\n * array.\n */\nmxEditor.prototype.cycleAttributeValues = null;\n\n/**\n * Variable: cycleAttributeIndex\n *\n * Index of the last consumed attribute index. If a new\n * swimlane is inserted, then the <cycleAttributeValues>\n * at this index will be used as the value for\n * <cycleAttributeName>. Default is 0.\n */\nmxEditor.prototype.cycleAttributeIndex = 0;\n\n/**\n * Variable: cycleAttributeName\n *\n * Name of the attribute to be assigned a <cycleAttributeValues>\n * when inserting new swimlanes. Default is 'fillColor'.\n */\nmxEditor.prototype.cycleAttributeName = 'fillColor';\n\n/**\n * Group: Windows\n */\n\n/**\n * Variable: tasks\n *\n * Holds the <mxWindow> created in <showTasks>.\n */\nmxEditor.prototype.tasks = null;\n\n/**\n * Variable: tasksWindowImage\n *\n * Icon for the tasks window.\n */\nmxEditor.prototype.tasksWindowImage = null;\n\n/**\n * Variable: tasksTop\n *\n * Specifies the top coordinate of the tasks window in pixels.\n * Default is 20.\n */\nmxEditor.prototype.tasksTop = 20;\n\n/**\n * Variable: help\n *\n * Holds the <mxWindow> created in <showHelp>.\n */\nmxEditor.prototype.help = null;\n\n/**\n * Variable: helpWindowImage\n *\n * Icon for the help window.\n */\nmxEditor.prototype.helpWindowImage = null;\n\n/**\n * Variable: urlHelp\n *\n * Specifies the URL to be used for the contents of the\n * Online Help window. This is usually specified in the\n * resources file under urlHelp for language-specific\n * online help support.\n */\nmxEditor.prototype.urlHelp = null;\n\n/**\n * Variable: helpWidth\n *\n * Specifies the width of the help window in pixels.\n * Default is 300.\n */\nmxEditor.prototype.helpWidth = 300;\n\n/**\n * Variable: helpHeight\n *\n * Specifies the height of the help window in pixels.\n * Default is 260.\n */\nmxEditor.prototype.helpHeight = 260;\n\n/**\n * Variable: propertiesWidth\n *\n * Specifies the width of the properties window in pixels.\n * Default is 240.\n */\nmxEditor.prototype.propertiesWidth = 240;\n\n/**\n * Variable: propertiesHeight\n *\n * Specifies the height of the properties window in pixels.\n * If no height is specified then the window will be automatically\n * sized to fit its contents. Default is null.\n */\nmxEditor.prototype.propertiesHeight = null;\n\n/**\n * Variable: movePropertiesDialog\n *\n * Specifies if the properties dialog should be automatically\n * moved near the cell it is displayed for, otherwise the\n * dialog is not moved. This value is only taken into\n * account if the dialog is already visible. Default is false.\n */\nmxEditor.prototype.movePropertiesDialog = false;\n\n/**\n * Variable: validating\n *\n * Specifies if <mxGraph.validateGraph> should automatically be invoked after\n * each change. Default is false.\n */\nmxEditor.prototype.validating = false;\n\n/**\n * Variable: modified\n *\n * True if the graph has been modified since it was last saved.\n */\nmxEditor.prototype.modified = false;\n\n/**\n * Function: isModified\n *\n * Returns <modified>.\n */\nmxEditor.prototype.isModified = function ()\n{\n\treturn this.modified;\n};\n\n/**\n * Function: setModified\n *\n * Sets <modified> to the specified boolean value.\n */\nmxEditor.prototype.setModified = function (value)\n{\n\tthis.modified = value;\n};\n\n/**\n * Function: addActions\n *\n * Adds the built-in actions to the editor instance.\n *\n * save - Saves the graph using <urlPost>.\n * print - Shows the graph in a new print preview window.\n * show - Shows the graph in a new window.\n * exportImage - Shows the graph as a bitmap image using <getUrlImage>.\n * refresh - Refreshes the graph's display.\n * cut - Copies the current selection into the clipboard\n * and removes it from the graph.\n * copy - Copies the current selection into the clipboard.\n * paste - Pastes the clipboard into the graph.\n * delete - Removes the current selection from the graph.\n * group - Puts the current selection into a new group.\n * ungroup - Removes the selected groups and selects the children.\n * undo - Undoes the last change on the graph model.\n * redo - Redoes the last change on the graph model.\n * zoom - Sets the zoom via a dialog.\n * zoomIn - Zooms into the graph.\n * zoomOut - Zooms out of the graph\n * actualSize - Resets the scale and translation on the graph.\n * fit - Changes the scale so that the graph fits into the window.\n * showProperties - Shows the properties dialog.\n * selectAll - Selects all cells.\n * selectNone - Clears the selection.\n * selectVertices - Selects all vertices.\n * selectEdges = Selects all edges.\n * edit - Starts editing the current selection cell.\n * enterGroup - Drills down into the current selection cell.\n * exitGroup - Moves up in the drilling hierachy\n * home - Moves to the topmost parent in the drilling hierarchy\n * selectPrevious - Selects the previous cell.\n * selectNext - Selects the next cell.\n * selectParent - Selects the parent of the selection cell.\n * selectChild - Selects the first child of the selection cell.\n * collapse - Collapses the currently selected cells.\n * expand - Expands the currently selected cells.\n * bold - Toggle bold text style.\n * italic - Toggle italic text style.\n * underline - Toggle underline text style.\n * alignCellsLeft - Aligns the selection cells at the left.\n * alignCellsCenter - Aligns the selection cells in the center.\n * alignCellsRight - Aligns the selection cells at the right.\n * alignCellsTop - Aligns the selection cells at the top.\n * alignCellsMiddle - Aligns the selection cells in the middle.\n * alignCellsBottom - Aligns the selection cells at the bottom.\n * alignFontLeft - Sets the horizontal text alignment to left.\n * alignFontCenter - Sets the horizontal text alignment to center.\n * alignFontRight - Sets the horizontal text alignment to right.\n * alignFontTop - Sets the vertical text alignment to top.\n * alignFontMiddle - Sets the vertical text alignment to middle.\n * alignFontBottom - Sets the vertical text alignment to bottom.\n * toggleTasks - Shows or hides the tasks window.\n * toggleHelp - Shows or hides the help window.\n * toggleOutline - Shows or hides the outline window.\n * toggleConsole - Shows or hides the console window.\n */\nmxEditor.prototype.addActions = function ()\n{\n\tthis.addAction('save', function(editor)\n\t{\n\t\teditor.save();\n\t});\n\n\tthis.addAction('print', function(editor)\n\t{\n\t\tvar preview = new mxPrintPreview(editor.graph, 1);\n\t\tpreview.open();\n\t});\n\n\tthis.addAction('show', function(editor)\n\t{\n\t\tmxUtils.show(editor.graph, null, 10, 10);\n\t});\n\n\tthis.addAction('exportImage', function(editor)\n\t{\n\t\tvar url = editor.getUrlImage();\n\n\t\tif (url == null || mxClient.IS_LOCAL)\n\t\t{\n\t\t\teditor.execute('show');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar node = mxUtils.getViewXml(editor.graph, 1);\n\t\t\tvar xml = mxUtils.getXml(node, '\\n');\n\n\t\t\tmxUtils.submit(url, editor.postParameterName + '=' +\n\t\t\t\tencodeURIComponent(xml), document, '_blank');\n\t\t}\n\t});\n\n\tthis.addAction('refresh', function(editor)\n\t{\n\t\teditor.graph.refresh();\n\t});\n\n\tthis.addAction('cut', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.cut(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('copy', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.copy(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('paste', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.paste(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('delete', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCells();\n\t\t}\n\t});\n\n\tthis.addAction('group', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCell(editor.groupCells());\n\t\t}\n\t});\n\n\tthis.addAction('ungroup', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCells(editor.graph.ungroupCells());\n\t\t}\n\t});\n\n\tthis.addAction('removeFromParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCellsFromParent();\n\t\t}\n\t});\n\n\tthis.addAction('undo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.undo();\n\t\t}\n\t});\n\n\tthis.addAction('redo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.redo();\n\t\t}\n\t});\n\n\tthis.addAction('zoomIn', function(editor)\n\t{\n\t\teditor.graph.zoomIn();\n\t});\n\n\tthis.addAction('zoomOut', function(editor)\n\t{\n\t\teditor.graph.zoomOut();\n\t});\n\n\tthis.addAction('actualSize', function(editor)\n\t{\n\t\teditor.graph.zoomActual();\n\t});\n\n\tthis.addAction('fit', function(editor)\n\t{\n\t\teditor.graph.fit();\n\t});\n\n\tthis.addAction('showProperties', function(editor, cell)\n\t{\n\t\teditor.showProperties(cell);\n\t});\n\n\tthis.addAction('selectAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectAll();\n\t\t}\n\t});\n\n\tthis.addAction('selectNone', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.clearSelection();\n\t\t}\n\t});\n\n\tthis.addAction('selectVertices', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectVertices();\n\t\t}\n\t});\n\n\tthis.addAction('selectEdges', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectEdges();\n\t\t}\n\t});\n\n\tthis.addAction('edit', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled() &&\n\t\t\teditor.graph.isCellEditable(cell))\n\t\t{\n\t\t\teditor.graph.startEditingAtCell(cell);\n\t\t}\n\t});\n\n\tthis.addAction('toBack', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(true);\n\t\t}\n\t});\n\n\tthis.addAction('toFront', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(false);\n\t\t}\n\t});\n\n\tthis.addAction('enterGroup', function(editor, cell)\n\t{\n\t\teditor.graph.enterGroup(cell);\n\t});\n\n\tthis.addAction('exitGroup', function(editor)\n\t{\n\t\teditor.graph.exitGroup();\n\t});\n\n\tthis.addAction('home', function(editor)\n\t{\n\t\teditor.graph.home();\n\t});\n\n\tthis.addAction('selectPrevious', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectPreviousCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectNext', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectNextCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectParentCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectChild', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectChildCell();\n\t\t}\n\t});\n\n\tthis.addAction('collapse', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(true);\n\t\t}\n\t});\n\n\tthis.addAction('collapseAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(true, false, cells);\n\t\t}\n\t});\n\n\tthis.addAction('expand', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(false);\n\t\t}\n\t});\n\n\tthis.addAction('expandAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(false, false, cells);\n\t\t}\n\t});\n\n\tthis.addAction('bold', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_BOLD);\n\t\t}\n\t});\n\n\tthis.addAction('italic', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_ITALIC);\n\t\t}\n\t});\n\n\tthis.addAction('underline', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_UNDERLINE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsLeft', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_LEFT);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontLeft', function(editor)\n\t{\n\n\t\teditor.graph.setCellStyles(\n\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\tmxConstants.ALIGN_LEFT);\n\t});\n\n\tthis.addAction('alignFontCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\n\tthis.addAction('zoom', function(editor)\n\t{\n\t\tvar current = editor.graph.getView().scale*100;\n\t\tvar scale = parseFloat(mxUtils.prompt(\n\t\t\tmxResources.get(editor.askZoomResource) ||\n\t\t\teditor.askZoomResource,\n\t\t\tcurrent))/100;\n\n\t\tif (!isNaN(scale))\n\t\t{\n\t\t\teditor.graph.getView().setScale(scale);\n\t\t}\n\t});\n\n\tthis.addAction('toggleTasks', function(editor)\n\t{\n\t\tif (editor.tasks != null)\n\t\t{\n\t\t\teditor.tasks.setVisible(!editor.tasks.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showTasks();\n\t\t}\n\t});\n\n\tthis.addAction('toggleHelp', function(editor)\n\t{\n\t\tif (editor.help != null)\n\t\t{\n\t\t\teditor.help.setVisible(!editor.help.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showHelp();\n\t\t}\n\t});\n\n\tthis.addAction('toggleOutline', function(editor)\n\t{\n\t\tif (editor.outline == null)\n\t\t{\n\t\t\teditor.showOutline();\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.outline.setVisible(!editor.outline.isVisible());\n\t\t}\n\t});\n\n\tthis.addAction('toggleConsole', function(editor)\n\t{\n\t\tmxLog.setVisible(!mxLog.isVisible());\n\t});\n};\n\n/**\n * Function: configure\n *\n * Configures the editor using the specified node. To load the\n * configuration from a given URL the following code can be used to obtain\n * the XML node.\n *\n * (code)\n * var node = mxUtils.load(url).getDocumentElement();\n * (end)\n *\n * Parameters:\n *\n * node - XML node that contains the configuration.\n */\nmxEditor.prototype.configure = function (node)\n{\n\tif (node != null)\n\t{\n\t\t// Creates a decoder for the XML data\n\t\t// and uses it to configure the editor\n\t\tvar dec = new mxCodec(node.ownerDocument);\n\t\tdec.decode(node, this);\n\n\t\t// Resets the counters, modified state and\n\t\t// command history\n\t\tthis.resetHistory();\n\t}\n};\n\n/**\n * Function: resetFirstTime\n *\n * Resets the cookie that is used to remember if the editor has already\n * been used.\n */\nmxEditor.prototype.resetFirstTime = function ()\n{\n\tdocument.cookie =\n\t\t'mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/';\n};\n\n/**\n * Function: resetHistory\n *\n * Resets the command history, modified state and counters.\n */\nmxEditor.prototype.resetHistory = function ()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.undoManager.clear();\n\tthis.ignoredChanges = 0;\n\tthis.setModified(false);\n};\n\n/**\n * Function: addAction\n *\n * Binds the specified actionname to the specified function.\n *\n * Parameters:\n *\n * actionname - String that specifies the name of the action\n * to be added.\n * funct - Function that implements the new action. The first\n * argument of the function is the editor it is used\n * with, the second argument is the cell it operates\n * upon.\n *\n * Example:\n * (code)\n * editor.addAction('test', function(editor, cell)\n * {\n * \t\tmxUtils.alert(\"test \"+cell);\n * });\n * (end)\n */\nmxEditor.prototype.addAction = function (actionname, funct)\n{\n\tthis.actions[actionname] = funct;\n};\n\n/**\n * Function: execute\n *\n * Executes the function with the given name in <actions> passing the\n * editor instance and given cell as the first and second argument. All\n * additional arguments are passed to the action as well. This method\n * contains a try-catch block and displays an error message if an action\n * causes an exception. The exception is re-thrown after the error\n * message was displayed.\n *\n * Example:\n *\n * (code)\n * editor.execute(\"showProperties\", cell);\n * (end)\n */\nmxEditor.prototype.execute = function (actionname, cell, evt)\n{\n\tvar action = this.actions[actionname];\n\n\tif (action != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Creates the array of arguments by replacing the actionname\n\t\t\t// with the editor instance in the args of this function\n\t\t\tvar args = arguments;\n\t\t\targs[0] = this;\n\n\t\t\t// Invokes the function on the editor using the args\n\t\t\taction.apply(this, args);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxUtils.error('Cannot execute ' + actionname +\n\t\t\t\t': ' + e.message, 280, true);\n\n\t\t\tthrow e;\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxUtils.error('Cannot find action '+actionname, 280, true);\n\t}\n};\n\n/**\n * Function: addTemplate\n *\n * Adds the specified template under the given name in <templates>.\n */\nmxEditor.prototype.addTemplate = function (name, template)\n{\n\tthis.templates[name] = template;\n};\n\n/**\n * Function: getTemplate\n *\n * Returns the template for the given name.\n */\nmxEditor.prototype.getTemplate = function (name)\n{\n\treturn this.templates[name];\n};\n\n/**\n * Function: createGraph\n *\n * Creates the <graph> for the editor. The graph is created with no\n * container and is initialized from <setGraphContainer>.\n */\nmxEditor.prototype.createGraph = function ()\n{\n\tvar graph = new mxGraph(null, null, this.graphRenderHint);\n\n\t// Enables rubberband, tooltips, panning\n\tgraph.setTooltips(true);\n\tgraph.setPanning(true);\n\n\t// Overrides the dblclick method on the graph to\n\t// invoke the dblClickAction for a cell and reset\n\t// the selection tool in the toolbar\n\tthis.installDblClickHandler(graph);\n\n\t// Installs the command history\n\tthis.installUndoHandler(graph);\n\n\t// Installs the handlers for the root event\n\tthis.installDrillHandler(graph);\n\n\t// Installs the handler for validation\n\tthis.installChangeHandler(graph);\n\n\t// Installs the handler for calling the\n\t// insert function and consume the\n\t// event if an insert function is defined\n\tthis.installInsertHandler(graph);\n\n\t// Redirects the function for creating the\n\t// popupmenu items\n\tgraph.popupMenuHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(menu, cell, evt)\n\t\t{\n\t\t\treturn this.createPopupMenu(menu, cell, evt);\n\t\t});\n\n\t// Redirects the function for creating\n\t// new connections in the diagram\n\tgraph.connectionHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(source, target)\n\t\t{\n\t\t\treturn this.createEdge(source, target);\n\t\t});\n\n\t// Maintains swimlanes and installs autolayout\n\tthis.createSwimlaneManager(graph);\n\tthis.createLayoutManager(graph);\n\n\treturn graph;\n};\n\n/**\n * Function: createSwimlaneManager\n *\n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.createSwimlaneManager = function (graph)\n{\n\tvar swimlaneMgr = new mxSwimlaneManager(graph, false);\n\n\tswimlaneMgr.isHorizontal = mxUtils.bind(this, function()\n\t{\n\t\treturn this.horizontalFlow;\n\t});\n\n\tswimlaneMgr.isEnabled = mxUtils.bind(this, function()\n\t{\n\t\treturn this.maintainSwimlanes;\n\t});\n\n\treturn swimlaneMgr;\n};\n\n/**\n * Function: createLayoutManager\n *\n * Creates a layout manager for the swimlane and diagram layouts, that\n * is, the locally defined inter- and intraswimlane layouts.\n */\nmxEditor.prototype.createLayoutManager = function (graph)\n{\n\tvar layoutMgr = new mxLayoutManager(graph);\n\n\tvar self = this; // closure\n\tlayoutMgr.getLayout = function(cell)\n\t{\n\t\tvar layout = null;\n\t\tvar model = self.graph.getModel();\n\n\t\tif (model.getParent(cell) != null)\n\t\t{\n\t\t\t// Executes the swimlane layout if a child of\n\t\t\t// a swimlane has been changed. The layout is\n\t\t\t// lazy created in createSwimlaneLayout.\n\t\t\tif (self.layoutSwimlanes &&\n\t\t\t\tgraph.isSwimlane(cell))\n\t\t\t{\n\t\t\t\tif (self.swimlaneLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.swimlaneLayout = self.createSwimlaneLayout();\n\t\t\t\t}\n\n\t\t\t\tlayout = self.swimlaneLayout;\n\t\t\t}\n\n\t\t\t// Executes the diagram layout if the modified\n\t\t\t// cell is a top-level cell. The layout is\n\t\t\t// lazy created in createDiagramLayout.\n\t\t\telse if (self.layoutDiagram &&\n\t\t\t\t(graph.isValidRoot(cell) ||\n\t\t\t\tmodel.getParent(model.getParent(cell)) == null))\n\t\t\t{\n\t\t\t\tif (self.diagramLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.diagramLayout = self.createDiagramLayout();\n\t\t\t\t}\n\n\t\t\t\tlayout = self.diagramLayout;\n\t\t\t}\n\t\t}\n\n\t\treturn layout;\n\t};\n\n\treturn layoutMgr;\n};\n\n/**\n * Function: setGraphContainer\n *\n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.setGraphContainer = function (container)\n{\n\tif (this.graph.container == null)\n\t{\n\t\t// Creates the graph instance inside the given container and render hint\n\t\t//this.graph = new mxGraph(container, null, this.graphRenderHint);\n\t\tthis.graph.init(container);\n\n\t\t// Install rubberband selection as the last\n\t\t// action handler in the chain\n\t\tthis.rubberband = new mxRubberband(this.graph);\n\n\t\t// Disables the context menu\n\t\tif (this.disableContextMenu)\n\t\t{\n\t\t\tmxEvent.disableContextMenu(container);\n\t\t}\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: installDblClickHandler\n *\n * Overrides <mxGraph.dblClick> to invoke <dblClickAction>\n * on a cell and reset the selection tool in the toolbar.\n */\nmxEditor.prototype.installDblClickHandler = function (graph)\n{\n\t// Installs a listener for double click events\n\tgraph.addListener(mxEvent.DOUBLE_CLICK,\n\t\tmxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar cell = evt.getProperty('cell');\n\n\t\t\tif (cell != null &&\n\t\t\t\tgraph.isEnabled() &&\n\t\t\t\tthis.dblClickAction != null)\n\t\t\t{\n\t\t\t\tthis.execute(this.dblClickAction, cell);\n\t\t\t\tevt.consume();\n\t\t\t}\n\t\t})\n\t);\n};\n\n/**\n * Function: installUndoHandler\n *\n * Adds the <undoManager> to the graph model and the view.\n */\nmxEditor.prototype.installUndoHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tvar edit = evt.getProperty('edit');\n\t\tthis.undoManager.undoableEditHappened(edit);\n\t});\n\n\tgraph.getModel().addListener(mxEvent.UNDO, listener);\n\tgraph.getView().addListener(mxEvent.UNDO, listener);\n\n\t// Keeps the selection state in sync\n\tvar undoHandler = function(sender, evt)\n\t{\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\tgraph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n\t};\n\n\tthis.undoManager.addListener(mxEvent.UNDO, undoHandler);\n\tthis.undoManager.addListener(mxEvent.REDO, undoHandler);\n};\n\n/**\n * Function: installDrillHandler\n *\n * Installs listeners for dispatching the <root> event.\n */\nmxEditor.prototype.installDrillHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t});\n\n\tgraph.getView().addListener(mxEvent.DOWN, listener);\n\tgraph.getView().addListener(mxEvent.UP, listener);\n};\n\n/**\n * Function: installChangeHandler\n *\n * Installs the listeners required to automatically validate\n * the graph. On each change of the root, this implementation\n * fires a <root> event.\n */\nmxEditor.prototype.installChangeHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Updates the modified state\n\t\tthis.setModified(true);\n\n\t\t// Automatically validates the graph\n\t\t// after each change\n\t\tif (this.validating == true)\n\t\t{\n\t\t\tgraph.validateGraph();\n\t\t}\n\n\t\t// Checks if the root has been changed\n\t\tvar changes = evt.getProperty('edit').changes;\n\n\t\tfor (var i = 0; i < changes.length; i++)\n\t\t{\n\t\t\tvar change = changes[i];\n\n\t\t\tif (change instanceof mxRootChange ||\n\t\t\t\t(change instanceof mxValueChange &&\n\t\t\t\tchange.cell == this.graph.model.root) ||\n\t\t\t\t(change instanceof mxCellAttributeChange &&\n\t\t\t\tchange.cell == this.graph.model.root))\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\tgraph.getModel().addListener(mxEvent.CHANGE, listener);\n};\n\n/**\n * Function: installInsertHandler\n *\n * Installs the handler for invoking <insertFunction> if\n * one is defined.\n */\nmxEditor.prototype.installInsertHandler = function (graph)\n{\n\tvar self = this; // closure\n\tvar insertHandler =\n\t{\n\t\tmouseDown: function(sender, me)\n\t\t{\n\t\t\tif (self.insertFunction != null &&\n\t\t\t\t!me.isPopupTrigger() &&\n\t\t\t\t(self.forcedInserting ||\n\t\t\t\tme.getState() == null))\n\t\t\t{\n\t\t\t\tself.graph.clearSelection();\n\t\t\t\tself.insertFunction(me.getEvent(), me.getCell());\n\n\t\t\t\t// Consumes the rest of the events\n\t\t\t\t// for this gesture (down, move, up)\n\t\t\t\tthis.isActive = true;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\n\t\tmouseMove: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\n\t\tmouseUp: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tthis.isActive = false;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t}\n\t};\n\n\tgraph.addMouseListener(insertHandler);\n};\n\n/**\n * Function: createDiagramLayout\n *\n * Creates the layout instance used to layout the\n * swimlanes in the diagram.\n */\nmxEditor.prototype.createDiagramLayout = function ()\n{\n\tvar gs = this.graph.gridSize;\n\tvar layout = new mxStackLayout(this.graph, !this.horizontalFlow,\n\t\t this.swimlaneSpacing, 2*gs, 2*gs);\n\n\t// Overrides isIgnored to only take into account swimlanes\n\tlayout.isVertexIgnored = function(cell)\n\t{\n\t\treturn !layout.graph.isSwimlane(cell);\n\t};\n\n\treturn layout;\n};\n\n/**\n * Function: createSwimlaneLayout\n *\n * Creates the layout instance used to layout the\n * children of each swimlane.\n */\nmxEditor.prototype.createSwimlaneLayout = function ()\n{\n\treturn new mxCompactTreeLayout(this.graph, this.horizontalFlow);\n};\n\n/**\n * Function: createToolbar\n *\n * Creates the <toolbar> with no container.\n */\nmxEditor.prototype.createToolbar = function ()\n{\n\treturn new mxDefaultToolbar(null, this);\n};\n\n/**\n * Function: setToolbarContainer\n *\n * Initializes the toolbar for the given container.\n */\nmxEditor.prototype.setToolbarContainer = function (container)\n{\n\tthis.toolbar.init(container);\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: setStatusContainer\n *\n * Creates the <status> using the specified container.\n *\n * This implementation adds listeners in the editor to\n * display the last saved time and the current filename\n * in the status bar.\n *\n * Parameters:\n *\n * container - DOM node that will contain the statusbar.\n */\nmxEditor.prototype.setStatusContainer = function (container)\n{\n\tif (this.status == null)\n\t{\n\t\tthis.status = container;\n\n\t\t// Prints the last saved time in the status bar\n\t\t// when files are saved\n\t\tthis.addListener(mxEvent.SAVE, mxUtils.bind(this, function()\n\t\t{\n\t\t\tvar tstamp = new Date().toLocaleString();\n\t\t\tthis.setStatus((mxResources.get(this.lastSavedResource) ||\n\t\t\t\tthis.lastSavedResource)+': '+tstamp);\n\t\t}));\n\n\t\t// Updates the statusbar to display the filename\n\t\t// when new files are opened\n\t\tthis.addListener(mxEvent.OPEN, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.setStatus((mxResources.get(this.currentFileResource) ||\n\t\t\t\tthis.currentFileResource)+': '+this.filename);\n\t\t}));\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: setStatus\n *\n * Display the specified message in the status bar.\n *\n * Parameters:\n *\n * message - String the specified the message to\n * be displayed.\n */\nmxEditor.prototype.setStatus = function (message)\n{\n\tif (this.status != null && message != null)\n\t{\n\t\tthis.status.innerHTML = message;\n\t}\n};\n\n/**\n * Function: setTitleContainer\n *\n * Creates a listener to update the inner HTML of the\n * specified DOM node with the value of <getTitle>.\n *\n * Parameters:\n *\n * container - DOM node that will contain the title.\n */\nmxEditor.prototype.setTitleContainer = function (container)\n{\n\tthis.addListener(mxEvent.ROOT, mxUtils.bind(this, function(sender)\n\t{\n\t\tcontainer.innerHTML = this.getTitle();\n\t}));\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: treeLayout\n *\n * Executes a vertical or horizontal compact tree layout\n * using the specified cell as an argument. The cell may\n * either be a group or the root of a tree.\n *\n * Parameters:\n *\n * cell - <mxCell> to use in the compact tree layout.\n * horizontal - Optional boolean to specify the tree's\n * orientation. Default is true.\n */\nmxEditor.prototype.treeLayout = function (cell, horizontal)\n{\n\tif (cell != null)\n\t{\n\t\tvar layout = new mxCompactTreeLayout(this.graph, horizontal);\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: getTitle\n *\n * Returns the string value for the current root of the\n * diagram.\n */\nmxEditor.prototype.getTitle = function ()\n{\n\tvar title = '';\n\tvar graph = this.graph;\n\tvar cell = graph.getCurrentRoot();\n\n\twhile (cell != null &&\n\t\t   graph.getModel().getParent(\n\t\t\t\tgraph.getModel().getParent(cell)) != null)\n\t{\n\t\t// Append each label of a valid root\n\t\tif (graph.isValidRoot(cell))\n\t\t{\n\t\t\ttitle = ' > ' +\n\t\t\tgraph.convertValueToString(cell) + title;\n\t\t}\n\n\t\tcell = graph.getModel().getParent(cell);\n\t}\n\n\tvar prefix = this.getRootTitle();\n\n\treturn prefix + title;\n};\n\n/**\n * Function: getRootTitle\n *\n * Returns the string value of the root cell in\n * <mxGraph.model>.\n */\nmxEditor.prototype.getRootTitle = function ()\n{\n\tvar root = this.graph.getModel().getRoot();\n\treturn this.graph.convertValueToString(root);\n};\n\n/**\n * Function: undo\n *\n * Undo the last change in <graph>.\n */\nmxEditor.prototype.undo = function ()\n{\n\tthis.undoManager.undo();\n};\n\n/**\n * Function: redo\n *\n * Redo the last change in <graph>.\n */\nmxEditor.prototype.redo = function ()\n{\n\tthis.undoManager.redo();\n};\n\n/**\n * Function: groupCells\n *\n * Invokes <createGroup> to create a new group cell and the invokes\n * <mxGraph.groupCells>, using the grid size of the graph as the spacing\n * in the group's content area.\n */\nmxEditor.prototype.groupCells = function ()\n{\n\tvar border = (this.groupBorderSize != null) ?\n\t\tthis.groupBorderSize :\n\t\tthis.graph.gridSize;\n\treturn this.graph.groupCells(this.createGroup(), border);\n};\n\n/**\n * Function: createGroup\n *\n * Creates and returns a clone of <defaultGroup> to be used\n * as a new group cell in <group>.\n */\nmxEditor.prototype.createGroup = function ()\n{\n\tvar model = this.graph.getModel();\n\n\treturn model.cloneCell(this.defaultGroup);\n};\n\n/**\n * Function: open\n *\n * Opens the specified file synchronously and parses it using\n * <readGraphModel>. It updates <filename> and fires an <open>-event after\n * the file has been opened. Exceptions should be handled as follows:\n *\n * (code)\n * try\n * {\n *   editor.open(filename);\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot open ' + filename +\n *     ': ' + e.message, 280, true);\n * }\n * (end)\n *\n * Parameters:\n *\n * filename - URL of the file to be opened.\n */\nmxEditor.prototype.open = function (filename)\n{\n\tif (filename != null)\n\t{\n\t\tvar xml = mxUtils.load(filename).getXml();\n\t\tthis.readGraphModel(xml.documentElement);\n\t\tthis.filename = filename;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.OPEN, 'filename', filename));\n\t}\n};\n\n/**\n * Function: readGraphModel\n *\n * Reads the specified XML node into the existing graph model and resets\n * the command history and modified state.\n */\nmxEditor.prototype.readGraphModel = function (node)\n{\n\tvar dec = new mxCodec(node.ownerDocument);\n\tdec.decode(node, this.graph.getModel());\n\tthis.resetHistory();\n};\n\n/**\n * Function: save\n *\n * Posts the string returned by <writeGraphModel> to the given URL or the\n * URL returned by <getUrlPost>. The actual posting is carried out by\n * <postDiagram>. If the URL is null then the resulting XML will be\n * displayed using <mxUtils.popup>. Exceptions should be handled as\n * follows:\n *\n * (code)\n * try\n * {\n *   editor.save();\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot save : ' + e.message, 280, true);\n * }\n * (end)\n */\nmxEditor.prototype.save = function (url, linefeed)\n{\n\t// Gets the URL to post the data to\n\turl = url || this.getUrlPost();\n\n\t// Posts the data if the URL is not empty\n\tif (url != null && url.length > 0)\n\t{\n\t\tvar data = this.writeGraphModel(linefeed);\n\t\tthis.postDiagram(url, data);\n\n\t\t// Resets the modified flag\n\t\tthis.setModified(false);\n\t}\n\n\t// Dispatches a save event\n\tthis.fireEvent(new mxEventObject(mxEvent.SAVE, 'url', url));\n};\n\n/**\n * Function: postDiagram\n *\n * Hook for subclassers to override the posting of a diagram\n * represented by the given node to the given URL. This fires\n * an asynchronous <post> event if the diagram has been posted.\n *\n * Example:\n *\n * To replace the diagram with the diagram in the response, use the\n * following code.\n *\n * (code)\n * editor.addListener(mxEvent.POST, function(sender, evt)\n * {\n *   // Process response (replace diagram)\n *   var req = evt.getProperty('request');\n *   var root = req.getDocumentElement();\n *   editor.graph.readGraphModel(root)\n * });\n * (end)\n */\nmxEditor.prototype.postDiagram = function (url, data)\n{\n\tif (this.escapePostData)\n\t{\n\t\tdata = encodeURIComponent(data);\n\t}\n\n\tmxUtils.post(url, this.postParameterName+'='+data,\n\t\tmxUtils.bind(this, function(req)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.POST,\n\t\t\t\t'request', req, 'url', url, 'data', data));\n\t\t})\n\t);\n};\n\n/**\n * Function: writeGraphModel\n *\n * Hook to create the string representation of the diagram. The default\n * implementation uses an <mxCodec> to encode the graph model as\n * follows:\n *\n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(this.graph.getModel());\n * return mxUtils.getXml(node, this.linefeed);\n * (end)\n *\n * Parameters:\n *\n * linefeed - Optional character to be used as the linefeed. Default is\n * <linefeed>.\n */\nmxEditor.prototype.writeGraphModel = function (linefeed)\n{\n\tlinefeed = (linefeed != null) ? linefeed : this.linefeed;\n\tvar enc = new mxCodec();\n\tvar node = enc.encode(this.graph.getModel());\n\n\treturn mxUtils.getXml(node, linefeed);\n};\n\n/**\n * Function: getUrlPost\n *\n * Returns the URL to post the diagram to. This is used\n * in <save>. The default implementation returns <urlPost>,\n * adding <code>?draft=true</code>.\n */\nmxEditor.prototype.getUrlPost = function ()\n{\n\treturn this.urlPost;\n};\n\n/**\n * Function: getUrlImage\n *\n * Returns the URL to create the image with. This is typically\n * the URL of a backend which accepts an XML representation\n * of a graph view to create an image. The function is used\n * in the image action to create an image. This implementation\n * returns <urlImage>.\n */\nmxEditor.prototype.getUrlImage = function ()\n{\n\treturn this.urlImage;\n};\n\n/**\n * Function: swapStyles\n *\n * Swaps the styles for the given names in the graph's\n * stylesheet and refreshes the graph.\n */\nmxEditor.prototype.swapStyles = function (first, second)\n{\n\tvar style = this.graph.getStylesheet().styles[second];\n\tthis.graph.getView().getStylesheet().putCellStyle(\n\t\tsecond, this.graph.getStylesheet().styles[first]);\n\tthis.graph.getStylesheet().putCellStyle(first, style);\n\tthis.graph.refresh();\n};\n\n/**\n * Function: showProperties\n *\n * Creates and shows the properties dialog for the given\n * cell. The content area of the dialog is created using\n * <createProperties>.\n */\nmxEditor.prototype.showProperties = function (cell)\n{\n\tcell = cell || this.graph.getSelectionCell();\n\n\t// Uses the root node for the properties dialog\n\t// if not cell was passed in and no cell is\n\t// selected\n\tif (cell == null)\n\t{\n\t\tcell = this.graph.getCurrentRoot();\n\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.graph.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (cell != null)\n\t{\n\t\t// Makes sure there is no in-place editor in the\n\t\t// graph and computes the location of the dialog\n\t\tthis.graph.stopEditing(true);\n\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar x = offset.x+10;\n\t\tvar y = offset.y;\n\n\t\t// Avoids moving the dialog if it is alredy open\n\t\tif (this.properties != null && !this.movePropertiesDialog)\n\t\t{\n\t\t\tx = this.properties.getX();\n\t\t\ty = this.properties.getY();\n\t\t}\n\n\t\t// Places the dialog near the cell for which it\n\t\t// displays the properties\n\t\telse\n\t\t{\n\t\t\tvar bounds = this.graph.getCellBounds(cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tx += bounds.x+Math.min(200, bounds.width);\n\t\t\t\ty += bounds.y;\n\t\t\t}\n\t\t}\n\n\t\t// Hides the existing properties dialog and creates a new one with the\n\t\t// contents created in the hook method\n\t\tthis.hideProperties();\n\t\tvar node = this.createProperties(cell);\n\n\t\tif (node != null)\n\t\t{\n\t\t\t// Displays the contents in a window and stores a reference to the\n\t\t\t// window for later hiding of the window\n\t\t\tthis.properties = new mxWindow(mxResources.get(this.propertiesResource) ||\n\t\t\t\tthis.propertiesResource, node, x, y, this.propertiesWidth, this.propertiesHeight, false);\n\t\t\tthis.properties.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: isPropertiesVisible\n *\n * Returns true if the properties dialog is currently visible.\n */\nmxEditor.prototype.isPropertiesVisible = function ()\n{\n\treturn this.properties != null;\n};\n\n/**\n * Function: createProperties\n *\n * Creates and returns the DOM node that represents the contents\n * of the properties dialog for the given cell. This implementation\n * works for user objects that are XML nodes and display all the\n * node attributes in a form.\n */\nmxEditor.prototype.createProperties = function (cell)\n{\n\tvar model = this.graph.getModel();\n\tvar value = model.getValue(cell);\n\n\tif (mxUtils.isNode(value))\n\t{\n\t\t// Creates a form for the user object inside\n\t\t// the cell\n\t\tvar form = new mxForm('properties');\n\n\t\t// Adds a readonly field for the cell id\n\t\tvar id = form.addText('ID', cell.getId());\n\t\tid.setAttribute('readonly', 'true');\n\n\t\tvar geo = null;\n\t\tvar yField = null;\n\t\tvar xField = null;\n\t\tvar widthField = null;\n\t\tvar heightField = null;\n\n\t\t// Adds fields for the location and size\n\t\tif (model.isVertex(cell))\n\t\t{\n\t\t\tgeo = model.getGeometry(cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tyField = form.addText('top', geo.y);\n\t\t\t\txField = form.addText('left', geo.x);\n\t\t\t\twidthField = form.addText('width', geo.width);\n\t\t\t\theightField = form.addText('height', geo.height);\n\t\t\t}\n\t\t}\n\n\t\t// Adds a field for the cell style\n\t\tvar tmp = model.getStyle(cell);\n\t\tvar style = form.addText('Style', tmp || '');\n\n\t\t// Creates textareas for each attribute of the\n\t\t// user object within the cell\n\t\tvar attrs = value.attributes;\n\t\tvar texts = [];\n\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\t// Creates a textarea with more lines for\n\t\t\t// the cell label\n\t\t\tvar val = attrs[i].value;\n\t\t\ttexts[i] = form.addTextarea(attrs[i].nodeName, val,\n\t\t\t\t(attrs[i].nodeName == 'label') ? 4 : 2);\n\t\t}\n\n\t\t// Adds an OK and Cancel button to the dialog\n\t\t// contents and implements the respective\n\t\t// actions below\n\n\t\t// Defines the function to be executed when the\n\t\t// OK button is pressed in the dialog\n\t\tvar okFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\n\t\t\t// Supports undo for the changes on the underlying\n\t\t\t// XML structure / XML node attribute changes.\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\n\t\t\t\t\tgeo.x = parseFloat(xField.value);\n\t\t\t\t\tgeo.y = parseFloat(yField.value);\n\t\t\t\t\tgeo.width = parseFloat(widthField.value);\n\t\t\t\t\tgeo.height = parseFloat(heightField.value);\n\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\n\t\t\t\t// Applies the style\n\t\t\t\tif (style.value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, style.value);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, null);\n\t\t\t\t}\n\n\t\t\t\t// Creates an undoable change for each\n\t\t\t\t// attribute and executes it using the\n\t\t\t\t// model, which will also make the change\n\t\t\t\t// part of the current transaction\n\t\t\t\tfor (var i=0; i<attrs.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar edit = new mxCellAttributeChange(\n\t\t\t\t\t\tcell, attrs[i].nodeName,\n\t\t\t\t\t\ttexts[i].value);\n\t\t\t\t\tmodel.execute(edit);\n\t\t\t\t}\n\n\t\t\t\t// Checks if the graph wants cells to\n\t\t\t\t// be automatically sized and updates\n\t\t\t\t// the size as an undoable step if\n\t\t\t\t// the feature is enabled\n\t\t\t\tif (this.graph.isAutoSizeCell(cell))\n\t\t\t\t{\n\t\t\t\t\tthis.graph.updateCellSize(cell);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t});\n\n\t\t// Defines the function to be executed when the\n\t\t// Cancel button is pressed in the dialog\n\t\tvar cancelFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t});\n\n\t\tform.addButtons(okFunction, cancelFunction);\n\n\t\treturn form.table;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: hideProperties\n *\n * Hides the properties dialog.\n */\nmxEditor.prototype.hideProperties = function ()\n{\n\tif (this.properties != null)\n\t{\n\t\tthis.properties.destroy();\n\t\tthis.properties = null;\n\t}\n};\n\n/**\n * Function: showTasks\n *\n * Shows the tasks window. The tasks window is created using <createTasks>. The\n * default width of the window is 200 pixels, the y-coordinate of the location\n * can be specifies in <tasksTop> and the x-coordinate is right aligned with a\n * 20 pixel offset from the right border. To change the location of the tasks\n * window, the following code can be used:\n *\n * (code)\n * var oldShowTasks = mxEditor.prototype.showTasks;\n * mxEditor.prototype.showTasks = function()\n * {\n *   oldShowTasks.apply(this, arguments); // \"supercall\"\n *\n *   if (this.tasks != null)\n *   {\n *     this.tasks.setLocation(10, 10);\n *   }\n * };\n * (end)\n */\nmxEditor.prototype.showTasks = function ()\n{\n\tif (this.tasks == null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '4px';\n\t\tdiv.style.paddingLeft = '20px';\n\t\tvar w = document.body.clientWidth;\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.tasksResource) ||\n\t\t\tthis.tasksResource,\n\t\t\tdiv, w - 220, this.tasksTop, 200);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\n\t\t// Installs a function to update the contents\n\t\t// of the tasks window on every change of the\n\t\t// model, selection or root.\n\t\tvar funct = mxUtils.bind(this, function(sender)\n\t\t{\n\t\t\tmxEvent.release(div);\n\t\t\tdiv.innerHTML = '';\n\t\t\tthis.createTasks(div);\n\t\t});\n\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.addListener(mxEvent.ROOT, funct);\n\n\t\t// Assigns the icon to the tasks window\n\t\tif (this.tasksWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.tasksWindowImage);\n\t\t}\n\n\t\tthis.tasks = wnd;\n\t\tthis.createTasks(div);\n\t}\n\n\tthis.tasks.setVisible(true);\n};\n\n/**\n * Function: refreshTasks\n *\n * Updates the contents of the tasks window using <createTasks>.\n */\nmxEditor.prototype.refreshTasks = function (div)\n{\n\tif (this.tasks != null)\n\t{\n\t\tvar div = this.tasks.content;\n\t\tmxEvent.release(div);\n\t\tdiv.innerHTML = '';\n\t\tthis.createTasks(div);\n\t}\n};\n\n/**\n * Function: createTasks\n *\n * Updates the contents of the given DOM node to\n * display the tasks associated with the current\n * editor state. This is invoked whenever there\n * is a possible change of state in the editor.\n * Default implementation is empty.\n */\nmxEditor.prototype.createTasks = function (div)\n{\n\t// override\n};\n\n/**\n * Function: showHelp\n *\n * Shows the help window. If the help window does not exist\n * then it is created using an iframe pointing to the resource\n * for the <code>urlHelp</code> key or <urlHelp> if the resource\n * is undefined.\n */\nmxEditor.prototype.showHelp = function (tasks)\n{\n\tif (this.help == null)\n\t{\n\t\tvar frame = document.createElement('iframe');\n\t\tframe.setAttribute('src', mxResources.get('urlHelp') || this.urlHelp);\n\t\tframe.setAttribute('height', '100%');\n\t\tframe.setAttribute('width', '100%');\n\t\tframe.setAttribute('frameBorder', '0');\n\t\tframe.style.backgroundColor = 'white';\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\n\t\tvar wnd = new mxWindow(mxResources.get(this.helpResource) || this.helpResource,\n\t\t\tframe, (w-this.helpWidth)/2, (h-this.helpHeight)/3, this.helpWidth, this.helpHeight);\n\t\twnd.setMaximizable(true);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\twnd.setResizable(true);\n\n\t\t// Assigns the icon to the help window\n\t\tif (this.helpWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.helpWindowImage);\n\t\t}\n\n\t\t// Workaround for ignored iframe height 100% in FF\n\t\tif (mxClient.IS_NS)\n\t\t{\n\t\t\tvar handler = function(sender)\n\t\t\t{\n\t\t\t\tvar h = wnd.div.offsetHeight;\n\t\t\t\tframe.setAttribute('height', (h-26)+'px');\n\t\t\t};\n\n\t\t\twnd.addListener(mxEvent.RESIZE_END, handler);\n\t\t\twnd.addListener(mxEvent.MAXIMIZE, handler);\n\t\t\twnd.addListener(mxEvent.NORMALIZE, handler);\n\t\t\twnd.addListener(mxEvent.SHOW, handler);\n\t\t}\n\n\t\tthis.help = wnd;\n\t}\n\n\tthis.help.setVisible(true);\n};\n\n/**\n * Function: showOutline\n *\n * Shows the outline window. If the window does not exist, then it is\n * created using an <mxOutline>.\n */\nmxEditor.prototype.showOutline = function ()\n{\n\tvar create = this.outline == null;\n\n\tif (create)\n\t{\n\t\tvar div = document.createElement('div');\n\n\t\tdiv.style.overflow = 'hidden';\n\t\tdiv.style.position = 'relative';\n\t\tdiv.style.width = '100%';\n\t\tdiv.style.height = '100%';\n\t\tdiv.style.background = 'white';\n\t\tdiv.style.cursor = 'move';\n\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdiv.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n\t\t}\n\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.outlineResource) ||\n\t\t\tthis.outlineResource,\n\t\t\tdiv, 600, 480, 200, 200, false);\n\n\t\t// Creates the outline in the specified div\n\t\t// and links it to the existing graph\n\t\tvar outline = new mxOutline(this.graph, div);\n\t\twnd.setClosable(true);\n\t\twnd.setResizable(true);\n\t\twnd.destroyOnClose = false;\n\n\t\twnd.addListener(mxEvent.RESIZE_END, function()\n\t\t{\n\t\t\toutline.update();\n\t\t});\n\n\t\tthis.outline = wnd;\n\t\tthis.outline.outline = outline;\n\t}\n\n\t// Finally shows the outline\n\tthis.outline.setVisible(true);\n\tthis.outline.outline.update(true);\n};\n\n/**\n * Function: setMode\n *\n * Puts the graph into the specified mode. The following modenames are\n * supported:\n *\n * select - Selects using the left mouse button, new connections\n * are disabled.\n * connect - Selects using the left mouse button or creates new\n * connections if mouse over cell hotspot. See <mxConnectionHandler>.\n * pan - Pans using the left mouse button, new connections are disabled.\n */\nmxEditor.prototype.setMode = function(modename)\n{\n\tif (modename == 'select')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(false);\n\t}\n\telse if (modename == 'connect')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(true);\n\t}\n\telse if (modename == 'pan')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = true;\n\t\tthis.graph.setConnectable(false);\n\t}\n};\n\n/**\n * Function: createPopupMenu\n *\n * Uses <popupHandler> to create the menu in the graph's\n * panning handler. The redirection is setup in\n * <setToolbarContainer>.\n */\nmxEditor.prototype.createPopupMenu = function (menu, cell, evt)\n{\n\tthis.popupHandler.createMenu(this, menu, cell, evt);\n};\n\n/**\n * Function: createEdge\n *\n * Uses <defaultEdge> as the prototype for creating new edges\n * in the connection handler of the graph. The style of the\n * edge will be overridden with the value returned by\n * <getEdgeStyle>.\n */\nmxEditor.prototype.createEdge = function (source, target)\n{\n\t// Clones the defaultedge prototype\n\tvar e = null;\n\n\tif (this.defaultEdge != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\te = model.cloneCell(this.defaultEdge);\n\t}\n\telse\n\t{\n\t\te = new mxCell('');\n\t\te.setEdge(true);\n\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\te.setGeometry(geo);\n\t}\n\n\t// Overrides the edge style\n\tvar style = this.getEdgeStyle();\n\n\tif (style != null)\n\t{\n\t\te.setStyle(style);\n\t}\n\n\treturn e;\n};\n\n/**\n * Function: getEdgeStyle\n *\n * Returns a string identifying the style of new edges.\n * The function is used in <createEdge> when new edges\n * are created in the graph.\n */\nmxEditor.prototype.getEdgeStyle = function ()\n{\n\treturn this.defaultEdgeStyle;\n};\n\n/**\n * Function: consumeCycleAttribute\n *\n * Returns the next attribute in <cycleAttributeValues>\n * or null, if not attribute should be used in the\n * specified cell.\n */\nmxEditor.prototype.consumeCycleAttribute = function (cell)\n{\n\treturn (this.cycleAttributeValues != null &&\n\t\tthis.cycleAttributeValues.length > 0 &&\n\t\tthis.graph.isSwimlane(cell)) ?\n\t\tthis.cycleAttributeValues[this.cycleAttributeIndex++ %\n\t\t\tthis.cycleAttributeValues.length] : null;\n};\n\n/**\n * Function: cycleAttribute\n *\n * Uses the returned value from <consumeCycleAttribute>\n * as the value for the <cycleAttributeName> key in\n * the given cell's style.\n */\nmxEditor.prototype.cycleAttribute = function (cell)\n{\n\tif (this.cycleAttributeName != null)\n\t{\n\t\tvar value = this.consumeCycleAttribute(cell);\n\n\t\tif (value != null)\n\t\t{\n\t\t\tcell.setStyle(cell.getStyle()+';'+\n\t\t\t\tthis.cycleAttributeName+'='+value);\n\t\t}\n\t}\n};\n\n/**\n * Function: addVertex\n *\n * Adds the given vertex as a child of parent at the specified\n * x and y coordinate and fires an <addVertex> event.\n */\nmxEditor.prototype.addVertex = function (parent, vertex, x, y)\n{\n\tvar model = this.graph.getModel();\n\n\twhile (parent != null && !this.graph.isValidDropTarget(parent))\n\t{\n\t\tparent = model.getParent(parent);\n\t}\n\n\tparent = (parent != null) ? parent : this.graph.getSwimlaneAt(x, y);\n\tvar scale = this.graph.getView().scale;\n\n\tvar geo = model.getGeometry(vertex);\n\tvar pgeo = model.getGeometry(parent);\n\n\tif (this.graph.isSwimlane(vertex) &&\n\t\t!this.graph.swimlaneNesting)\n\t{\n\t\tparent = null;\n\t}\n\telse if (parent == null && this.swimlaneRequired)\n\t{\n\t\treturn null;\n\t}\n\telse if (parent != null && pgeo != null)\n\t{\n\t\t// Keeps vertex inside parent\n\t\tvar state = this.graph.getView().getState(parent);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tx -= state.origin.x * scale;\n\t\t\ty -= state.origin.y * scale;\n\n\t\t\tif (this.graph.isConstrainedMoving)\n\t\t\t{\n\t\t\t\tvar width = geo.width;\n\t\t\t\tvar height = geo.height;\n\t\t\t\tvar tmp = state.x+state.width;\n\n\t\t\t\tif (x+width > tmp)\n\t\t\t\t{\n\t\t\t\t\tx -= x+width - tmp;\n\t\t\t\t}\n\n\t\t\t\ttmp = state.y+state.height;\n\n\t\t\t\tif (y+height > tmp)\n\t\t\t\t{\n\t\t\t\t\ty -= y+height - tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (pgeo != null)\n\t\t{\n\t\t\tx -= pgeo.x*scale;\n\t\t\ty -= pgeo.y*scale;\n\t\t}\n\t}\n\n\tgeo = geo.clone();\n\tgeo.x = this.graph.snap(x / scale -\n\t\tthis.graph.getView().translate.x -\n\t\tthis.graph.gridSize/2);\n\tgeo.y = this.graph.snap(y / scale -\n\t\tthis.graph.getView().translate.y -\n\t\tthis.graph.gridSize/2);\n\tvertex.setGeometry(geo);\n\n\tif (parent == null)\n\t{\n\t\tparent = this.graph.getDefaultParent();\n\t}\n\n\tthis.cycleAttribute(vertex);\n\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_ADD_VERTEX,\n\t\t\t'vertex', vertex, 'parent', parent));\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvertex = this.graph.addCell(vertex, parent);\n\n\t\tif (vertex != null)\n\t\t{\n\t\t\tthis.graph.constrainChild(vertex);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_VERTEX, 'vertex', vertex));\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\n\tif (vertex != null)\n\t{\n\t\tthis.graph.setSelectionCell(vertex);\n\t\tthis.graph.scrollCellToVisible(vertex);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.AFTER_ADD_VERTEX, 'vertex', vertex));\n\t}\n\n\treturn vertex;\n};\n\n/**\n * Function: destroy\n *\n * Removes the editor and all its associated resources. This does not\n * normally need to be called, it is called automatically when the window\n * unloads.\n */\nmxEditor.prototype.destroy = function ()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tif (this.tasks != null)\n\t\t{\n\t\t\tthis.tasks.destroy();\n\t\t}\n\n\t\tif (this.outline != null)\n\t\t{\n\t\t\tthis.outline.destroy();\n\t\t}\n\n\t\tif (this.properties != null)\n\t\t{\n\t\t\tthis.properties.destroy();\n\t\t}\n\n\t\tif (this.keyHandler != null)\n\t\t{\n\t\t\tthis.keyHandler.destroy();\n\t\t}\n\n\t\tif (this.rubberband != null)\n\t\t{\n\t\t\tthis.rubberband.destroy();\n\t\t}\n\n\t\tif (this.toolbar != null)\n\t\t{\n\t\t\tthis.toolbar.destroy();\n\t\t}\n\n\t\tif (this.graph != null)\n\t\t{\n\t\t\tthis.graph.destroy();\n\t\t}\n\n\t\tthis.status = null;\n\t\tthis.templates = null;\n\t}\n};\n\n__mxOutput.mxEditor = typeof mxEditor !== 'undefined' ? mxEditor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCodecRegistry =\n{\n\t/**\n\t * Class: mxCodecRegistry\n\t *\n\t * Singleton class that acts as a global registry for codecs.\n\t *\n\t * Adding an <mxCodec>:\n\t *\n\t * 1. Define a default codec with a new instance of the \n\t * object to be handled.\n\t *\n\t * (code)\n\t * var codec = new mxObjectCodec(new mxGraphModel());\n\t * (end)\n\t *\n\t * 2. Define the functions required for encoding and decoding\n\t * objects.\n\t *\n\t * (code)\n\t * codec.encode = function(enc, obj) { ... }\n\t * codec.decode = function(dec, node, into) { ... }\n\t * (end)\n\t *\n\t * 3. Register the codec in the <mxCodecRegistry>.\n\t *\n\t * (code)\n\t * mxCodecRegistry.register(codec);\n\t * (end)\n\t *\n\t * <mxObjectCodec.decode> may be used to either create a new \n\t * instance of an object or to configure an existing instance, \n\t * in which case the into argument points to the existing\n\t * object. In this case, we say the codec \"configures\" the\n\t * object.\n\t * \n\t * Variable: codecs\n\t *\n\t * Maps from constructor names to codecs.\n\t */\n\tcodecs: [],\n\t\n\t/**\n\t * Variable: aliases\n\t *\n\t * Maps from classnames to codecnames.\n\t */\n\taliases: [],\n\n\t/**\n\t * Function: register\n\t *\n\t * Registers a new codec and associates the name of the template\n\t * constructor in the codec with the codec object.\n\t *\n\t * Parameters:\n\t *\n\t * codec - <mxObjectCodec> to be registered.\n\t */\n\tregister: function(codec)\n\t{\n\t\tif (codec != null)\n\t\t{\n\t\t\tvar name = codec.getName();\n\t\t\tmxCodecRegistry.codecs[name] = codec;\n\t\t\t\n\t\t\tvar classname = mxUtils.getFunctionName(codec.template.constructor);\n\n\t\t\tif (classname != name)\n\t\t\t{\n\t\t\t\tmxCodecRegistry.addAlias(classname, name);\n\t\t\t}\n\t\t}\n\n\t\treturn codec;\n\t},\n\n\t/**\n\t * Function: addAlias\n\t *\n\t * Adds an alias for mapping a classname to a codecname.\n\t */\n\taddAlias: function(classname, codecname)\n\t{\n\t\tmxCodecRegistry.aliases[classname] = codecname;\n\t},\n\n\t/**\n\t * Function: getCodec\n\t *\n\t * Returns a codec that handles objects that are constructed\n\t * using the given constructor.\n\t *\n\t * Parameters:\n\t *\n\t * ctor - JavaScript constructor function. \n\t */\n\tgetCodec: function(ctor)\n\t{\n\t\tvar codec = null;\n\t\t\n\t\tif (ctor != null)\n\t\t{\n\t\t\tvar name = mxUtils.getFunctionName(ctor);\n\t\t\tvar tmp = mxCodecRegistry.aliases[name];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tname = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tcodec = mxCodecRegistry.codecs[name];\n\t\t\t\n\t\t\t// Registers a new default codec for the given constructor\n\t\t\t// if no codec has been previously defined.\n\t\t\tif (codec == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tcodec = new mxObjectCodec(new ctor());\n\t\t\t\t\tmxCodecRegistry.register(codec);\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn codec;\n\t}\n\n};\n\n__mxOutput.mxCodecRegistry = typeof mxCodecRegistry !== 'undefined' ? mxCodecRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCodec\n *\n * XML codec for JavaScript object graphs. See <mxObjectCodec> for a\n * description of the general encoding/decoding scheme. This class uses the\n * codecs registered in <mxCodecRegistry> for encoding/decoding each object.\n * \n * References:\n * \n * In order to resolve references, especially forward references, the mxCodec\n * constructor must be given the document that contains the referenced\n * elements.\n *\n * Examples:\n *\n * The following code is used to encode a graph model.\n *\n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = mxUtils.getXml(result);\n * (end)\n * \n * Example:\n * \n * Using the code below, an XML document is decoded into an existing model. The\n * document may be obtained using one of the functions in mxUtils for loading\n * an XML file, eg. <mxUtils.get>, or using <mxUtils.parseXml> for parsing an\n * XML string.\n * \n * (code)\n * var doc = mxUtils.parseXml(xmlString);\n * var codec = new mxCodec(doc);\n * codec.decode(doc.documentElement, graph.getModel());\n * (end)\n * \n * Example:\n * \n * This example demonstrates parsing a list of isolated cells into an existing\n * graph model. Note that the cells do not have a parent reference so they can\n * be added anywhere in the cell hierarchy after parsing.\n * \n * (code)\n * var xml = '<root><mxCell id=\"2\" value=\"Hello,\" vertex=\"1\"><mxGeometry x=\"20\" y=\"20\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"3\" value=\"World!\" vertex=\"1\"><mxGeometry x=\"200\" y=\"150\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"4\" value=\"\" edge=\"1\" source=\"2\" target=\"3\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root>';\n * var doc = mxUtils.parseXml(xml);\n * var codec = new mxCodec(doc);\n * var elt = doc.documentElement.firstChild;\n * var cells = [];\n * \n * while (elt != null)\n * {\n *   cells.push(codec.decode(elt));\n *   elt = elt.nextSibling;\n * }\n * \n * graph.addCells(cells);\n * (end)\n * \n * Example:\n * \n * Using the following code, the selection cells of a graph are encoded and the\n * output is displayed in a dialog box.\n * \n * (code)\n * var enc = new mxCodec();\n * var cells = graph.getSelectionCells();\n * mxUtils.alert(mxUtils.getPrettyXml(enc.encode(cells)));\n * (end)\n * \n * Newlines in the XML can be converted to <br>, in which case a '<br>' argument\n * must be passed to <mxUtils.getXml> as the second argument.\n * \n * Debugging:\n * \n * For debugging I/O you can use the following code to get the sequence of\n * encoded objects:\n * \n * (code)\n * var oldEncode = mxCodec.prototype.encode;\n * mxCodec.prototype.encode = function(obj)\n * {\n *   mxLog.show();\n *   mxLog.debug('mxCodec.encode: obj='+mxUtils.getFunctionName(obj.constructor));\n *   \n *   return oldEncode.apply(this, arguments);\n * };\n * (end)\n * \n * Note that the I/O system adds object codecs for new object automatically. For\n * decoding those objects, the constructor should be written as follows:\n * \n * (code)\n * var MyObj = function(name)\n * {\n *   // ...\n * };\n * (end)\n * \n * Constructor: mxCodec\n *\n * Constructs an XML encoder/decoder for the specified\n * owner document.\n *\n * Parameters:\n *\n * document - Optional XML document that contains the data.\n * If no document is specified then a new document is created\n * using <mxUtils.createXmlDocument>.\n */\nfunction mxCodec(document)\n{\n\tthis.document = document || mxUtils.createXmlDocument();\n\tthis.objects = [];\n};\n\n/**\n * Variable: document\n *\n * The owner document of the codec.\n */\nmxCodec.prototype.document = null;\n\n/**\n * Variable: objects\n *\n * Maps from IDs to objects.\n */\nmxCodec.prototype.objects = null;\n\n/**\n * Variable: elements\n * \n * Lookup table for resolving IDs to elements.\n */\nmxCodec.prototype.elements = null;\n\n/**\n * Variable: encodeDefaults\n *\n * Specifies if default values should be encoded. Default is false.\n */\nmxCodec.prototype.encodeDefaults = false;\n\n\n/**\n * Function: putObject\n * \n * Assoiates the given object with the given ID and returns the given object.\n * \n * Parameters\n * \n * id - ID for the object to be associated with.\n * obj - Object to be associated with the ID.\n */\nmxCodec.prototype.putObject = function(id, obj)\n{\n\tthis.objects[id] = obj;\n\t\n\treturn obj;\n};\n\n/**\n * Function: getObject\n *\n * Returns the decoded object for the element with the specified ID in\n * <document>. If the object is not known then <lookup> is used to find an\n * object. If no object is found, then the element with the respective ID\n * from the document is parsed using <decode>.\n */\nmxCodec.prototype.getObject = function(id)\n{\n\tvar obj = null;\n\n\tif (id != null)\n\t{\n\t\tobj = this.objects[id];\n\t\t\n\t\tif (obj == null)\n\t\t{\n\t\t\tobj = this.lookup(id);\n\t\t\t\n\t\t\tif (obj == null)\n\t\t\t{\n\t\t\t\tvar node = this.getElementById(id);\n\t\t\t\t\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tobj = this.decode(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: lookup\n *\n * Hook for subclassers to implement a custom lookup mechanism for cell IDs.\n * This implementation always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * };\n * (end)\n *\n * Parameters:\n *\n * id - ID of the object to be returned.\n */\nmxCodec.prototype.lookup = function(id)\n{\n\treturn null;\n};\n\n/**\n * Function: getElementById\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.getElementById = function(id)\n{\n\tthis.updateElements();\n\t\n\treturn this.elements[id];\n};\n\n/**\n * Function: updateElements\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.updateElements = function()\n{\n\tif (this.elements == null)\n\t{\n\t\tthis.elements = new Object();\n\t\t\n\t\tif (this.document.documentElement != null)\n\t\t{\n\t\t\tthis.addElement(this.document.documentElement);\n\t\t}\n\t}\n};\n\n/**\n * Function: addElement\n *\n * Adds the given element to <elements> if it has an ID.\n */\nmxCodec.prototype.addElement = function(node)\n{\n\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tif (this.elements[id] == null)\n\t\t\t{\n\t\t\t\tthis.elements[id] = node;\n\t\t\t}\n\t\t\telse if (this.elements[id] != node)\n\t\t\t{\n\t\t\t\tthrow new Error(id + ': Duplicate ID');\n\t\t\t}\n\t\t}\n\t}\n\t\n\tnode = node.firstChild;\n\t\n\twhile (node != null)\n\t{\n\t\tthis.addElement(node);\n\t\tnode = node.nextSibling;\n\t}\n};\n\n/**\n * Function: getId\n *\n * Returns the ID of the specified object. This implementation\n * calls <reference> first and if that returns null handles\n * the object as an <mxCell> by returning their IDs using\n * <mxCell.getId>. If no ID exists for the given cell, then\n * an on-the-fly ID is generated using <mxCellPath.create>.\n *\n * Parameters:\n *\n * obj - Object to return the ID for.\n */\nmxCodec.prototype.getId = function(obj)\n{\n\tvar id = null;\n\t\n\tif (obj != null)\n\t{\n\t\tid = this.reference(obj);\n\t\t\n\t\tif (id == null && obj instanceof mxCell)\n\t\t{\n\t\t\tid = obj.getId();\n\t\t\t\n\t\t\tif (id == null)\n\t\t\t{\n\t\t\t\t// Uses an on-the-fly Id\n\t\t\t\tid = mxCellPath.create(obj);\n\t\t\t\t\n\t\t\t\tif (id.length == 0)\n\t\t\t\t{\n\t\t\t\t\tid = 'root';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn id;\n};\n\n/**\n * Function: reference\n *\n * Hook for subclassers to implement a custom method\n * for retrieving IDs from objects. This implementation\n * always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.reference = function(obj)\n * {\n *   return obj.getCustomId();\n * };\n * (end)\n *\n * Parameters:\n *\n * obj - Object whose ID should be returned.\n */\nmxCodec.prototype.reference = function(obj)\n{\n\treturn null;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns the resulting\n * XML node.\n *\n * Parameters:\n *\n * obj - Object to be encoded. \n */\nmxCodec.prototype.encode = function(obj)\n{\n\tvar node = null;\n\t\n\tif (obj != null && obj.constructor != null)\n\t{\n\t\tvar enc = mxCodecRegistry.getCodec(obj.constructor);\n\t\t\n\t\tif (enc != null)\n\t\t{\n\t\t\tnode = enc.encode(this, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxUtils.isNode(obj))\n\t\t\t{\n\t\t\t\tnode = mxUtils.importNode(this.document, obj, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t    \t\tmxLog.warn('mxCodec.encode: No codec for ' + mxUtils.getFunctionName(obj.constructor));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Decodes the given XML node. The optional \"into\"\n * argument specifies an existing object to be\n * used. If no object is given, then a new instance\n * is created using the constructor from the codec.\n *\n * The function returns the passed in object or\n * the new instance if no object was given.\n *\n * Parameters:\n *\n * node - XML node to be decoded.\n * into - Optional object to be decodec into.\n */\nmxCodec.prototype.decode = function(node, into)\n{\n\tthis.updateElements();\n\tvar obj = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar ctor = null;\n\t\t\n\t\ttry\n\t\t{\n\t\t\tctor = window[node.nodeName];\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t\t\n\t\tvar dec = mxCodecRegistry.getCodec(ctor);\n\t\t\n\t\tif (dec != null)\n\t\t{\n\t\t\tobj = dec.decode(this, node, into);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj = node.cloneNode(true);\n\t\t\tobj.removeAttribute('as');\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: encodeCell\n *\n * Encoding of cell hierarchies is built-into the core, but\n * is a higher-level function that needs to be explicitely\n * used by the respective object encoders (eg. <mxModelCodec>,\n * <mxChildChangeCodec> and <mxRootChangeCodec>). This\n * implementation writes the given cell and its children as a\n * (flat) sequence into the given node. The children are not\n * encoded if the optional includeChildren is false. The\n * function is in charge of adding the result into the\n * given node and has no return value.\n *\n * Parameters:\n *\n * cell - <mxCell> to be encoded.\n * node - Parent XML node to add the encoded cell into.\n * includeChildren - Optional boolean indicating if the\n * function should include all descendents. Default is true. \n */\nmxCodec.prototype.encodeCell = function(cell, node, includeChildren)\n{\n\tnode.appendChild(this.encode(cell));\n\t\n\tif (includeChildren == null || includeChildren)\n\t{\n\t\tvar childCount = cell.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.encodeCell(cell.getChildAt(i), node);\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellCodec\n * \n * Returns true if the given codec is a cell codec. This uses\n * <mxCellCodec.isCellCodec> to check if the codec is of the\n * given type.\n */\nmxCodec.prototype.isCellCodec = function(codec)\n{\n\tif (codec != null && typeof(codec.isCellCodec) == 'function')\n\t{\n\t\treturn codec.isCellCodec();\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: decodeCell\n *\n * Decodes cells that have been encoded using inversion, ie.\n * where the user object is the enclosing node in the XML,\n * and restores the group and graph structure in the cells.\n * Returns a new <mxCell> instance that represents the\n * given node.\n *\n * Parameters:\n *\n * node - XML node that contains the cell data.\n * restoreStructures - Optional boolean indicating whether\n * the graph structure should be restored by calling insert\n * and insertEdge on the parent and terminals, respectively.\n * Default is true.\n */\nmxCodec.prototype.decodeCell = function(node, restoreStructures)\n{\n\trestoreStructures = (restoreStructures != null) ? restoreStructures : true;\n\tvar cell = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\t// Tries to find a codec for the given node name. If that does\n\t\t// not return a codec then the node is the user object (an XML node\n\t\t// that contains the mxCell, aka inversion).\n\t\tvar decoder = mxCodecRegistry.getCodec(node.nodeName);\n\t\t\n\t\t// Tries to find the codec for the cell inside the user object.\n\t\t// This assumes all node names inside the user object are either\n\t\t// not registered or they correspond to a class for cells.\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tvar child = node.firstChild;\n\t\t\t\n\t\t\twhile (child != null && !this.isCellCodec(decoder))\n\t\t\t{\n\t\t\t\tdecoder = mxCodecRegistry.getCodec(child.nodeName);\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tdecoder = mxCodecRegistry.getCodec(mxCell);\n\t\t}\n\n\t\tcell = decoder.decode(this, node);\n\t\t\n\t\tif (restoreStructures)\n\t\t{\n\t\t\tthis.insertIntoGraph(cell);\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: insertIntoGraph\n *\n * Inserts the given cell into its parent and terminal cells.\n */\nmxCodec.prototype.insertIntoGraph = function(cell)\n{\n\tvar parent = cell.parent;\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\n\t// Fixes possible inconsistencies during insert into graph\n\tcell.setTerminal(null, false);\n\tcell.setTerminal(null, true);\n\tcell.parent = null;\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent == cell)\n\t\t{\n\t\t\tthrow new Error(parent.id + ': Self Reference');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent.insert(cell);\n\t\t}\n\t}\n\n\tif (source != null)\n\t{\n\t\tsource.insertEdge(cell, true);\n\t}\n\n\tif (target != null)\n\t{\n\t\ttarget.insertEdge(cell, false);\n\t}\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the attribute on the specified node to value. This is a\n * helper method that makes sure the attribute and value arguments\n * are not null.\n *\n * Parameters:\n *\n * node - XML node to set the attribute for.\n * attributes - Attributename to be set.\n * value - New value of the attribute.\n */\nmxCodec.prototype.setAttribute = function(node, attribute, value)\n{\n\tif (attribute != null && value != null)\n\t{\n\t\tnode.setAttribute(attribute, value);\n\t}\n};\n\n__mxOutput.mxCodec = typeof mxCodec !== 'undefined' ? mxCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxObjectCodec\n *\n * Generic codec for JavaScript objects that implements a mapping between\n * JavaScript objects and XML nodes that maps each field or element to an\n * attribute or child node, and vice versa.\n * \n * Atomic Values:\n * \n * Consider the following example.\n * \n * (code)\n * var obj = new Object();\n * obj.foo = \"Foo\";\n * obj.bar = \"Bar\";\n * (end)\n * \n * This object is encoded into an XML node using the following.\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(obj);\n * (end)\n * \n * The output of the encoding may be viewed using <mxLog> as follows.\n * \n * (code)\n * mxLog.show();\n * mxLog.debug(mxUtils.getPrettyXml(node));\n * (end)\n * \n * Finally, the result of the encoding looks as follows.\n * \n * (code)\n * <Object foo=\"Foo\" bar=\"Bar\"/>\n * (end)\n * \n * In the above output, the foo and bar fields have been mapped to attributes\n * with the same names, and the name of the constructor was used for the\n * nodename.\n * \n * Booleans:\n *\n * Since booleans are numbers in JavaScript, all boolean values are encoded\n * into 1 for true and 0 for false. The decoder also accepts the string true\n * and false for boolean values.\n * \n * Objects:\n * \n * The above scheme is applied to all atomic fields, that is, to all non-object\n * fields of an object. For object fields, a child node is created with a\n * special attribute that contains the fieldname. This special attribute is\n * called \"as\" and hence, as is a reserved word that should not be used for a\n * fieldname.\n * \n * Consider the following example where foo is an object and bar is an atomic\n * property of foo.\n * \n * (code)\n * var obj = {foo: {bar: \"Bar\"}};\n * (end)\n * \n * This will be mapped to the following XML structure by mxObjectCodec.\n * \n * (code)\n * <Object>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Object>\n * (end)\n * \n * In the above output, the inner Object node contains the as-attribute that\n * specifies the fieldname in the enclosing object. That is, the field foo was\n * mapped to a child node with an as-attribute that has the value foo.\n * \n * Arrays:\n * \n * Arrays are special objects that are either associative, in which case each\n * key, value pair is treated like a field where the key is the fieldname, or\n * they are a sequence of atomic values and objects, which is mapped to a\n * sequence of child nodes. For object elements, the above scheme is applied\n * without the use of the special as-attribute for creating each child. For\n * atomic elements, a special add-node is created with the value stored in the\n * value-attribute.\n * \n * For example, the following array contains one atomic value and one object\n * with a field called bar. Furthermore it contains two associative entries\n * called bar with an atomic value, and foo with an object value.\n * \n * (code)\n * var obj = [\"Bar\", {bar: \"Bar\"}];\n * obj[\"bar\"] = \"Bar\";\n * obj[\"foo\"] = {bar: \"Bar\"};\n * (end)\n * \n * This array is represented by the following XML nodes.\n * \n * (code)\n * <Array bar=\"Bar\">\n *   <add value=\"Bar\"/>\n *   <Object bar=\"Bar\"/>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Array>\n * (end)\n * \n * The Array node name is the name of the constructor. The additional\n * as-attribute in the last child contains the key of the associative entry,\n * whereas the second last child is part of the array sequence and does not\n * have an as-attribute.\n * \n * References:\n * \n * Objects may be represented as child nodes or attributes with ID values,\n * which are used to lookup the object in a table within <mxCodec>. The\n * <isReference> function is in charge of deciding if a specific field should\n * be encoded as a reference or not. Its default implementation returns true if\n * the fieldname is in <idrefs>, an array of strings that is used to configure\n * the <mxObjectCodec>.\n * \n * Using this approach, the mapping does not guarantee that the referenced\n * object itself exists in the document. The fields that are encoded as\n * references must be carefully chosen to make sure all referenced objects\n * exist in the document, or may be resolved by some other means if necessary.\n * \n * For example, in the case of the graph model all cells are stored in a tree\n * whose root is referenced by the model's root field. A tree is a structure\n * that is well suited for an XML representation, however, the additional edges\n * in the graph model have a reference to a source and target cell, which are\n * also contained in the tree. To handle this case, the source and target cell\n * of an edge are treated as references, whereas the children are treated as\n * objects. Since all cells are contained in the tree and no edge references a\n * source or target outside the tree, this setup makes sure all referenced\n * objects are contained in the document.\n * \n * In the case of a tree structure we must further avoid infinite recursion by\n * ignoring the parent reference of each child. This is done by returning true\n * in <isExcluded>, whose default implementation uses the array of excluded\n * fieldnames passed to the mxObjectCodec constructor.\n * \n * References are only used for cells in mxGraph. For defining other\n * referencable object types, the codec must be able to work out the ID of an\n * object. This is done by implementing <mxCodec.reference>. For decoding a\n * reference, the XML node with the respective id-attribute is fetched from the\n * document, decoded, and stored in a lookup table for later reference. For\n * looking up external objects, <mxCodec.lookup> may be implemented.\n * \n * Expressions:\n * \n * For decoding JavaScript expressions, the add-node may be used with a text\n * content that contains the JavaScript expression. For example, the following\n * creates a field called foo in the enclosing object and assigns it the value\n * of <mxConstants.ALIGN_LEFT>.\n * \n * (code)\n * <Object>\n *   <add as=\"foo\">mxConstants.ALIGN_LEFT</add>\n * </Object>\n * (end)\n * \n * The resulting object has a field called foo with the value \"left\". Its XML\n * representation looks as follows.\n * \n * (code)\n * <Object foo=\"left\"/>\n * (end)\n * \n * This means the expression is evaluated at decoding time and the result of\n * the evaluation is stored in the respective field. Valid expressions are all\n * JavaScript expressions, including function definitions, which are mapped to\n * functions on the resulting object.\n * \n * Expressions are only evaluated if <allowEval> is true.\n * \n * Constructor: mxObjectCodec\n *\n * Constructs a new codec for the specified template object.\n * The variables in the optional exclude array are ignored by\n * the codec. Variables in the optional idrefs array are\n * turned into references in the XML. The optional mapping\n * may be used to map from variable names to XML attributes.\n * The argument is created as follows:\n *\n * (code)\n * var mapping = new Object();\n * mapping['variableName'] = 'attribute-name';\n * (end)\n *\n * Parameters:\n *\n * template - Prototypical instance of the object to be\n * encoded/decoded.\n * exclude - Optional array of fieldnames to be ignored.\n * idrefs - Optional array of fieldnames to be converted to/from\n * references.\n * mapping - Optional mapping from field- to attributenames.\n */\nfunction mxObjectCodec(template, exclude, idrefs, mapping)\n{\n\tthis.template = template;\n\t\n\tthis.exclude = (exclude != null) ? exclude : [];\n\tthis.idrefs = (idrefs != null) ? idrefs : [];\n\tthis.mapping = (mapping != null) ? mapping : [];\n\t\n\tthis.reverse = new Object();\n\t\n\tfor (var i in this.mapping)\n\t{\n\t\tthis.reverse[this.mapping[i]] = i;\n\t}\n};\n\n/**\n * Variable: allowEval\n *\n * Static global switch that specifies if expressions in arrays are allowed.\n * Default is false. NOTE: Enabling this carries a possible security risk.\n */\nmxObjectCodec.allowEval = false;\n\n/**\n * Variable: template\n *\n * Holds the template object associated with this codec.\n */\nmxObjectCodec.prototype.template = null;\n\n/**\n * Variable: exclude\n *\n * Array containing the variable names that should be\n * ignored by the codec.\n */\nmxObjectCodec.prototype.exclude = null;\n\n/**\n * Variable: idrefs\n *\n * Array containing the variable names that should be\n * turned into or converted from references. See\n * <mxCodec.getId> and <mxCodec.getObject>.\n */\nmxObjectCodec.prototype.idrefs = null;\n\n/**\n * Variable: mapping\n *\n * Maps from from fieldnames to XML attribute names.\n */\nmxObjectCodec.prototype.mapping = null;\n\n/**\n * Variable: reverse\n *\n * Maps from from XML attribute names to fieldnames.\n */\nmxObjectCodec.prototype.reverse = null;\n\n/**\n * Function: getName\n * \n * Returns the name used for the nodenames and lookup of the codec when\n * classes are encoded and nodes are decoded. For classes to work with\n * this the codec registry automatically adds an alias for the classname\n * if that is different than what this returns. The default implementation\n * returns the classname of the template class.\n */\nmxObjectCodec.prototype.getName = function()\n{\n\treturn mxUtils.getFunctionName(this.template.constructor);\n};\n\n/**\n * Function: cloneTemplate\n * \n * Returns a new instance of the template for this codec.\n */\nmxObjectCodec.prototype.cloneTemplate = function()\n{\n\treturn new this.template.constructor();\n};\n\n/**\n * Function: getFieldName\n * \n * Returns the fieldname for the given attributename.\n * Looks up the value in the <reverse> mapping or returns\n * the input if there is no reverse mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getFieldName = function(attributename)\n{\n\tif (attributename != null)\n\t{\n\t\tvar mapped = this.reverse[attributename];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tattributename = mapped;\n\t\t}\n\t}\n\t\n\treturn attributename;\n};\n\n/**\n * Function: getAttributeName\n * \n * Returns the attributename for the given fieldname.\n * Looks up the value in the <mapping> or returns\n * the input if there is no mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getAttributeName = function(fieldname)\n{\n\tif (fieldname != null)\n\t{\n\t\tvar mapped = this.mapping[fieldname];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tfieldname = mapped;\n\t\t}\n\t}\n\t\n\treturn fieldname;\n};\n\n/**\n * Function: isExcluded\n *\n * Returns true if the given attribute is to be ignored by the codec. This\n * implementation returns true if the given fieldname is in <exclude> or\n * if the fieldname equals <mxObjectIdentity.FIELD_NAME>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field.\n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isExcluded = function(obj, attr, value, write)\n{\n\treturn attr == mxObjectIdentity.FIELD_NAME ||\n\t\tmxUtils.indexOf(this.exclude, attr) >= 0;\n};\n\n/**\n * Function: isReference\n *\n * Returns true if the given fieldname is to be treated\n * as a textual reference (ID). This implementation returns\n * true if the given fieldname is in <idrefs>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field. \n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isReference = function(obj, attr, value, write)\n{\n\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns a node\n * representing then given object. Calls <beforeEncode>\n * after creating the node and <afterEncode> with the \n * resulting node after processing.\n *\n * Enc is a reference to the calling encoder. It is used\n * to encode complex objects and create references.\n *\n * This implementation encodes all variables of an\n * object according to the following rules:\n *\n * - If the variable name is in <exclude> then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getId>\n * is used to replace the object with its ID.\n * - The variable name is mapped using <mapping>.\n * - If obj is an array and the variable name is numeric\n * (ie. an index) then it is not encoded.\n * - If the value is an object, then the codec is used to\n * create a child node with the variable name encoded into\n * the \"as\" attribute.\n * - Else, if <encodeDefaults> is true or the value differs\n * from the template value, then ...\n * - ... if obj is not an array, then the value is mapped to\n * an attribute.\n * - ... else if obj is an array, the value is mapped to an\n * add child with a value attribute or a text child node,\n * if the value is a function.\n *\n * If no ID exists for a variable in <idrefs> or if an object\n * cannot be encoded, a warning is issued using <mxLog.warn>.\n *\n * Returns the resulting XML node that represents the given\n * object.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n */\nmxObjectCodec.prototype.encode = function(enc, obj)\n{\n\tvar node = enc.document.createElement(this.getName());\n\t\n\tobj = this.beforeEncode(enc, obj, node);\n\tthis.encodeObject(enc, obj, node);\n\t\n\treturn this.afterEncode(enc, obj, node);\n};\n\t\n/**\n * Function: encodeObject\n *\n * Encodes the value of each member in then given obj into the given node using\n * <encodeValue>.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeObject = function(enc, obj, node)\n{\n\tenc.setAttribute(node, 'id', enc.getId(obj));\n\t\n    for (var i in obj)\n    {\n\t\tvar name = i;\n\t\tvar value = obj[name];\n\t\t\n    \tif (value != null && !this.isExcluded(obj, name, value, true))\n    \t{\n    \t\tif (mxUtils.isInteger(name))\n    \t\t{\n    \t\t\tname = null;\n    \t\t}\n    \t\t\n    \t\tthis.encodeValue(enc, obj, name, value, node);\n    \t}\n    }\n};\n\n/**\n * Function: encodeValue\n * \n * Converts the given value according to the mappings\n * and id-refs in this codec and uses <writeAttribute>\n * to write the attribute into the given node.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object whose property is going to be encoded.\n * name - XML node that contains the encoded object.\n * value - Value of the property to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeValue = function(enc, obj, name, value, node)\n{\n\tif (value != null)\n\t{\n\t\tif (this.isReference(obj, name, value, true))\n\t\t{\n\t\t\tvar tmp = enc.getId(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.encode: No ID for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tvar defaultValue = this.template[name];\n\t\t\n\t\t// Checks if the value is a default value and\n\t\t// the name is correct\n\t\tif (name == null || enc.encodeDefaults || defaultValue != value)\n\t\t{\n\t\t\tname = this.getAttributeName(name);\n\t\t\tthis.writeAttribute(enc, obj, name, value, node);\t\n\t\t}\n\t}\n};\n\n/**\n * Function: writeAttribute\n * \n * Writes the given value into node using <writePrimitiveAttribute>\n * or <writeComplexAttribute> depending on the type of the value.\n */\nmxObjectCodec.prototype.writeAttribute = function(enc, obj, name, value, node)\n{\n\tif (typeof(value) != 'object' /* primitive type */)\n\t{\n\t\tthis.writePrimitiveAttribute(enc, obj, name, value, node);\n\t}\n\telse /* complex type */\n\t{\n\t\tthis.writeComplexAttribute(enc, obj, name, value, node);\n\t}\n};\n\n/**\n * Function: writePrimitiveAttribute\n * \n * Writes the given value as an attribute of the given node.\n */\nmxObjectCodec.prototype.writePrimitiveAttribute = function(enc, obj, name, value, node)\n{\n\tvalue = this.convertAttributeToXml(enc, obj, name, value, node);\n\t\n\tif (name == null)\n\t{\n\t\tvar child = enc.document.createElement('add');\n\t\t\n\t\tif (typeof(value) == 'function')\n\t\t{\n    \t\tchild.appendChild(enc.document.createTextNode(value));\n    \t}\n    \telse\n    \t{\n    \t\tenc.setAttribute(child, 'value', value);\n    \t}\n    \t\n\t\tnode.appendChild(child);\n\t}\n\telse if (typeof(value) != 'function')\n\t{\n    \tenc.setAttribute(node, name, value);\n\t}\t\t\n};\n\t\n/**\n * Function: writeComplexAttribute\n * \n * Writes the given value as a child node of the given node.\n */\nmxObjectCodec.prototype.writeComplexAttribute = function(enc, obj, name, value, node)\n{\n\tvar child = enc.encode(value);\n\t\n\tif (child != null)\n\t{\n\t\tif (name != null)\n\t\t{\n    \t\tchild.setAttribute('as', name);\n    \t}\n    \t\n    \tnode.appendChild(child);\n\t}\n\telse\n\t{\n\t\tmxLog.warn('mxObjectCodec.encode: No node for ' + this.getName() + '.' + name + ': ' + value);\n\t}\n};\n\n/**\n * Function: convertAttributeToXml\n * \n * Converts true to \"1\" and false to \"0\" is <isBooleanAttribute> returns true.\n * All other values are not converted.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value to be converted.\n */\nmxObjectCodec.prototype.convertAttributeToXml = function(enc, obj, name, value)\n{\n\t// Makes sure to encode boolean values as numeric values\n\tif (this.isBooleanAttribute(enc, obj, name, value))\n\t{\t\n\t\t// Checks if the value is true (do not use the value as is, because\n\t\t// this would check if the value is not null, so 0 would be true)\n\t\tvalue = (value == true) ? '1' : '0';\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isBooleanAttribute\n * \n * Returns true if the given object attribute is a boolean value.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value of the attribute to be converted.\n */\nmxObjectCodec.prototype.isBooleanAttribute = function(enc, obj, name, value)\n{\n\treturn (typeof(value.length) == 'undefined' && (value == true || value == false));\n};\n\n/**\n * Function: convertAttributeFromXml\n * \n * Converts booleans and numeric values to the respective types. Values are\n * numeric if <isNumericAttribute> returns true.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.convertAttributeFromXml = function(dec, attr, obj)\n{\n\tvar value = attr.value;\n\t\n\tif (this.isNumericAttribute(dec, attr, obj))\n\t{\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value) || !isFinite(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isNumericAttribute\n * \n * Returns true if the given XML attribute is or should be a numeric value.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.isNumericAttribute = function(dec, attr, obj)\n{\n\t// Handles known numeric attributes for generic objects\n\tvar result = (obj.constructor == mxGeometry &&\n\t\t(attr.name == 'x' || attr.name == 'y' ||\n\t\tattr.name == 'width' || attr.name == 'height')) ||\n\t\t(obj.constructor == mxPoint &&\n\t\t(attr.name == 'x' || attr.name == 'y')) ||\n\t\tmxUtils.isNumeric(attr.value);\n\t\n\treturn result;\n};\n\n/**\n * Function: beforeEncode\n *\n * Hook for subclassers to pre-process the object before\n * encoding. This returns the input object. The return\n * value of this function is used in <encode> to perform\n * the default encoding into the given node.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node to encode the object into.\n */\nmxObjectCodec.prototype.beforeEncode = function(enc, obj, node)\n{\n\treturn obj;\n};\n\n/**\n * Function: afterEncode\n *\n * Hook for subclassers to post-process the node\n * for the given object after encoding and return the\n * post-processed node. This implementation returns \n * the input node. The return value of this method\n * is returned to the encoder from <encode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that represents the default encoding.\n */\nmxObjectCodec.prototype.afterEncode = function(enc, obj, node)\n{\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Parses the given node into the object or returns a new object\n * representing the given node.\n *\n * Dec is a reference to the calling decoder. It is used to decode\n * complex objects and resolve references.\n *\n * If a node has an id attribute then the object cache is checked for the\n * object. If the object is not yet in the cache then it is constructed\n * using the constructor of <template> and cached in <mxCodec.objects>.\n *\n * This implementation decodes all attributes and childs of a node\n * according to the following rules:\n *\n * - If the variable name is in <exclude> or if the attribute name is \"id\"\n * or \"as\" then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getObject> is used\n * to replace the reference with an object.\n * - The variable name is mapped using a reverse <mapping>.\n * - If the value has a child node, then the codec is used to create a\n * child object with the variable name taken from the \"as\" attribute.\n * - If the object is an array and the variable name is empty then the\n * value or child object is appended to the array.\n * - If an add child has no value or the object is not an array then\n * the child text content is evaluated using <mxUtils.eval>.\n *\n * For add nodes where the object is not an array and the variable name\n * is defined, the default mechanism is used, allowing to override/add\n * methods as follows:\n *\n * (code)\n * <Object>\n *   <add as=\"hello\"><![CDATA[\n *     function(arg1) {\n *       mxUtils.alert('Hello '+arg1);\n *     }\n *   ]]></add>\n * </Object>\n * (end) \n *\n * If no object exists for an ID in <idrefs> a warning is issued\n * using <mxLog.warn>.\n *\n * Returns the resulting object that represents the given XML node\n * or the object given to the method as the into parameter.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * into - Optional objec to encode the node into.\n */\nmxObjectCodec.prototype.decode = function(dec, node, into)\n{\n\tvar id = node.getAttribute('id');\n\tvar obj = dec.objects[id];\n\t\n\tif (obj == null)\n\t{\n\t\tobj = into || this.cloneTemplate();\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.putObject(id, obj);\n\t\t}\n\t}\n\t\n\tnode = this.beforeDecode(dec, node, obj);\n\tthis.decodeNode(dec, node, obj);\n\t\n    return this.afterDecode(dec, node, obj);\n};\t\n\n/**\n * Function: decodeNode\n * \n * Calls <decodeAttributes> and <decodeChildren> for the given node.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeNode = function(dec, node, obj)\n{\n\tif (node != null)\n\t{\n\t\tthis.decodeAttributes(dec, node, obj);\n\t\tthis.decodeChildren(dec, node, obj);\n\t}\n};\n\n/**\n * Function: decodeAttributes\n * \n * Decodes all attributes of the given node using <decodeAttribute>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeAttributes = function(dec, node, obj)\n{\n\tvar attrs = node.attributes;\n\t\n\tif (attrs != null)\n\t{\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\tthis.decodeAttribute(dec, attrs[i], obj);\n\t\t}\n\t}\n};\n\n/**\n * Function: isIgnoredAttribute\n * \n * Returns true if the given attribute should be ignored. This implementation\n * returns true if the attribute name is \"as\" or \"id\".\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.isIgnoredAttribute = function(dec, attr, obj)\n{\n\treturn attr.nodeName == 'as' || attr.nodeName == 'id';\n};\n\n/**\n * Function: decodeAttribute\n * \n * Reads the given attribute into the specified object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.decodeAttribute = function(dec, attr, obj)\n{\n\tif (!this.isIgnoredAttribute(dec, attr, obj))\n\t{\n\t\tvar name = attr.nodeName;\n\t\t\n\t\t// Converts the string true and false to their boolean values.\n\t\t// This may require an additional check on the obj to see if\n\t\t// the existing field is a boolean value or uninitialized, in\n\t\t// which case we may want to convert true and false to a string.\n\t\tvar value = this.convertAttributeFromXml(dec, attr, obj);\n\t\tvar fieldname = this.getFieldName(name);\n\t\t\n\t\tif (this.isReference(obj, fieldname, value, false))\n\t\t{\n\t\t\tvar tmp = dec.getObject(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.decode: No object for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tif (!this.isExcluded(obj, name, value, false))\n\t\t{\n\t\t\t//mxLog.debug(mxUtils.getFunctionName(obj.constructor)+'.'+name+'='+value);\n\t\t\tobj[name] = value;\n\t\t}\n\t}\n};\n\n/**\n * Function: decodeChildren\n * \n * Decodes all children of the given node using <decodeChild>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChildren = function(dec, node, obj)\n{\n\tvar child = node.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar tmp = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_ELEMENT &&\n\t\t\t!this.processInclude(dec, child, obj))\n\t\t{\n\t\t\tthis.decodeChild(dec, child, obj);\n\t\t}\n\t\t\n\t\tchild = tmp;\n\t}\n};\n\n/**\n * Function: decodeChild\n * \n * Reads the specified child into the given object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * child - XML child element to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChild = function(dec, child, obj)\n{\n\tvar fieldname = this.getFieldName(child.getAttribute('as'));\n\t\n\tif (fieldname == null || !this.isExcluded(obj, fieldname, child, false))\n\t{\n\t\tvar template = this.getFieldTemplate(obj, fieldname, child);\n\t\tvar value = null;\n\t\t\n\t\tif (child.nodeName == 'add')\n\t\t{\n\t\t\tvalue = child.getAttribute('value');\n\t\t\t\n\t\t\tif (value == null && mxObjectCodec.allowEval)\n\t\t\t{\n\t\t\t\tvalue = mxUtils.eval(mxUtils.getTextContent(child));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvalue = dec.decode(child, template);\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tthis.addObjectValue(obj, fieldname, value, template);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tthrow new Error(e.message + ' for ' + child.nodeName);\n\t\t}\n\t}\n};\n\n/**\n * Function: getFieldTemplate\n * \n * Returns the template instance for the given field. This returns the\n * value of the field, null if the value is an array or an empty collection\n * if the value is a collection. The value is then used to populate the\n * field for a new instance. For strongly typed languages it may be\n * required to override this to return the correct collection instance\n * based on the encoded child.\n */\t\nmxObjectCodec.prototype.getFieldTemplate = function(obj, fieldname, child)\n{\n\tvar template = obj[fieldname];\n\t\n\t// Non-empty arrays are replaced completely\n    if (template instanceof Array && template.length > 0)\n    {\n        template = null;\n    }\n    \n    return template;\n};\n\n/**\n * Function: addObjectValue\n * \n * Sets the decoded child node as a value of the given object. If the\n * object is a map, then the value is added with the given fieldname as a\n * key. If the fieldname is not empty, then setFieldValue is called or\n * else, if the object is a collection, the value is added to the\n * collection. For strongly typed languages it may be required to\n * override this with the correct code to add an entry to an object.\n */\t\nmxObjectCodec.prototype.addObjectValue = function(obj, fieldname, value, template)\n{\n\tif (value != null && value != template)\n\t{\n\t\tif (fieldname != null && fieldname.length > 0)\n\t\t{\n\t\t\tobj[fieldname] = value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj.push(value);\n\t\t}\n\t\t//mxLog.debug('Decoded '+mxUtils.getFunctionName(obj.constructor)+'.'+fieldname+': '+value);\n\t}\n};\n\n/**\n * Function: processInclude\n *\n * Returns true if the given node is an include directive and\n * executes the include by decoding the XML document. Returns\n * false if the given node is not an include directive.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the encoding/decoding process.\n * node - XML node to be checked.\n * into - Optional object to pass-thru to the codec.\n */\nmxObjectCodec.prototype.processInclude = function(dec, node, into)\n{\n\tif (node.nodeName == 'include')\n\t{\n\t\tvar name = node.getAttribute('name');\n\t\t\n\t\tif (name != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar xml = mxUtils.load(name).getDocumentElement();\n\t\t\t\t\n\t\t\t\tif (xml != null)\n\t\t\t\t{\n\t\t\t\t\tdec.decode(xml, into);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: beforeDecode\n *\n * Hook for subclassers to pre-process the node for\n * the specified object and return the node to be\n * used for further processing by <decode>.\n * The object is created based on the template in the \n * calling method and is never null. This implementation\n * returns the input node. The return value of this\n * function is used in <decode> to perform\n * the default decoding into the given object.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Object to encode the node into.\n */\nmxObjectCodec.prototype.beforeDecode = function(dec, node, obj)\n{\n\treturn node;\n};\n\n/**\n * Function: afterDecode\n *\n * Hook for subclassers to post-process the object after\n * decoding. This implementation returns the given object\n * without any changes. The return value of this method\n * is returned to the decoder from <decode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * node - XML node to be decoded.\n * obj - Object that represents the default decoding.\n */\nmxObjectCodec.prototype.afterDecode = function(dec, node, obj)\n{\n\treturn obj;\n};\n\n__mxOutput.mxObjectCodec = typeof mxObjectCodec !== 'undefined' ? mxObjectCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxCellCodec\n\t *\n\t * Codec for <mxCell>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - children\n\t * - edges\n\t * - overlays\n\t * - mxTransient\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t * - source\n\t * - target\n\t * \n\t * Transient fields can be added using the following code:\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).exclude.push('name_of_field');\n\t * \n\t * To subclass <mxCell>, replace the template and add an alias as\n\t * follows.\n\t * \n\t * (code)\n\t * function CustomCell(value, geometry, style)\n\t * {\n\t *   mxCell.apply(this, arguments);\n\t * }\n\t * \n\t * mxUtils.extend(CustomCell, mxCell);\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).template = new CustomCell();\n\t * mxCodecRegistry.addAlias('CustomCell', 'mxCell');\n\t * (end)\n\t */\n\tvar codec = new mxObjectCodec(new mxCell(),\n\t\t['children', 'edges', 'overlays', 'mxTransient'],\n\t\t['parent', 'source', 'target']);\n\n\t/**\n\t * Function: isCellCodec\n\t *\n\t * Returns true since this is a cell codec.\n\t */\n\tcodec.isCellCodec = function()\n\t{\n\t\treturn true;\n\t};\n\n\t/**\n\t * Overidden to disable conversion of value to number.\n\t */\n\tcodec.isNumericAttribute = function(dec, attr, obj)\n\t{\n\t\treturn attr.nodeName !== 'value' && mxObjectCodec.prototype.isNumericAttribute.apply(this, arguments);\n\t};\n\t\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes user objects that are XML nodes.\n\t */ \n\tcodec.isExcluded = function(obj, attr, value, isWrite)\n\t{\n\t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n\t\t\t(isWrite && attr == 'value' &&\n\t\t\tvalue.nodeType == mxConstants.NODETYPE_ELEMENT);\n\t};\n\t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes an <mxCell> and wraps the XML up inside the\n\t * XML of the user object (inversion).\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (obj.value != null && obj.value.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Wraps the graphical annotation up in the user object (inversion)\n\t\t\t// by putting the result of the default encoding into a clone of the\n\t\t\t// user object (node type 1) and returning this cloned user object.\n\t\t\tvar tmp = node;\n\t\t\tnode = mxUtils.importNode(enc.document, obj.value, true);\n\t\t\tnode.appendChild(tmp);\n\t\t\t\n\t\t\t// Moves the id attribute to the outermost XML node, namely the\n\t\t\t// node which denotes the object boundaries in the file.\n\t\t\tvar id = tmp.getAttribute('id');\n\t\t\tnode.setAttribute('id', id);\n\t\t\ttmp.removeAttribute('id');\n\t\t}\n\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes an <mxCell> and uses the enclosing XML node as\n\t * the user object for the cell (inversion).\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tvar inner = node.cloneNode(true);\n\t\tvar classname = this.getName();\n\t\t\n\t\tif (node.nodeName != classname)\n\t\t{\n\t\t\t// Passes the inner graphical annotation node to the\n\t\t\t// object codec for further processing of the cell.\n\t\t\tvar tmp = node.getElementsByTagName(classname)[0];\n\t\t\t\n\t\t\tif (tmp != null && tmp.parentNode == node)\n\t\t\t{\n\t\t\t\tmxUtils.removeWhitespace(tmp, true);\n\t\t\t\tmxUtils.removeWhitespace(tmp, false);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\tinner = tmp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinner = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the user object out of the XML node\n\t\t\tobj.value = node.cloneNode(true);\n\t\t\tvar id = obj.value.getAttribute('id');\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tobj.setId(id);\n\t\t\t\tobj.value.removeAttribute('id');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses ID from XML file as ID for cell in model\n\t\t\tobj.setId(node.getAttribute('id'));\n\t\t}\n\t\t\t\n\t\t// Preprocesses and removes all Id-references in order to use the\n\t\t// correct encoder (this) for the known references to cells (all).\n\t\tif (inner != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.idrefs.length; i++)\n\t\t\t{\n\t\t\t\tvar attr = this.idrefs[i];\n\t\t\t\tvar ref = inner.getAttribute(attr);\n\t\t\t\t\n\t\t\t\tif (ref != null)\n\t\t\t\t{\n\t\t\t\t\tinner.removeAttribute(attr);\n\t\t\t\t\tvar object = dec.objects[ref] || dec.lookup(ref);\n\t\t\t\t\t\n\t\t\t\t\tif (object == null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Needs to decode forward reference\n\t\t\t\t\t\tvar element = dec.getElementById(ref);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (element != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar decoder = mxCodecRegistry.codecs[element.nodeName] || this;\n\t\t\t\t\t\t\tobject = decoder.decode(dec, element);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj[attr] = object;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn inner;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxCellCodec = typeof mxCellCodec !== 'undefined' ? mxCellCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxModelCodec\n\t *\n\t * Codec for <mxGraphModel>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphModel());\n\n\t/**\n\t * Function: encodeObject\n\t *\n\t * Encodes the given <mxGraphModel> by writing a (flat) XML sequence of\n\t * cell nodes as produced by the <mxCellCodec>. The sequence is\n\t * wrapped-up in a node with the name root.\n\t */\n\tcodec.encodeObject = function(enc, obj, node)\n\t{\n\t\tvar rootNode = enc.document.createElement('root');\n\t\tenc.encodeCell(obj.getRoot(), rootNode);\n\t\tnode.appendChild(rootNode);\n\t};\n\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'root')\n\t\t{\n\t\t\tthis.decodeRoot(dec, child, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t\t}\n\t};\n\n\t/**\n\t * Function: decodeRoot\n\t *\n\t * Reads the cells into the graph model. All cells\n\t * are children of the root element in the node.\n\t */\n\tcodec.decodeRoot = function(dec, root, model)\n\t{\n\t\tvar rootCell = null;\n\t\tvar tmp = root.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tvar cell = dec.decodeCell(tmp);\n\t\t\t\n\t\t\tif (cell != null && cell.getParent() == null)\n\t\t\t{\n\t\t\t\trootCell = cell;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\n\t\t// Sets the root on the model if one has been decoded\n\t\tif (rootCell != null)\n\t\t{\n\t\t\tmodel.setRoot(rootCell);\n\t\t}\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxModelCodec = typeof mxModelCodec !== 'undefined' ? mxModelCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxRootChangeCodec\n\t *\n\t * Codec for <mxRootChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - root\n\t */\n\tvar codec = new mxObjectCodec(new mxRootChange(),\n\t\t['model', 'previous', 'root']);\n\n\t/**\n\t * Function: onEncode\n\t *\n\t * Encodes the child recursively.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tenc.encodeCell(obj.root, node);\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the optional children as cells\n\t * using the respective decoder.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.root = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.root;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxRootChangeCodec = typeof mxRootChangeCodec !== 'undefined' ? mxRootChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxChildChangeCodec\n\t *\n\t * Codec for <mxChildChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - previousIndex\n\t * - child\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t */\n\tvar codec = new mxObjectCodec(new mxChildChange(),\n\t\t['model', 'child', 'previousIndex'],\n\t\t['parent', 'previous']);\n\n\t/**\n\t * Function: isReference\n\t *\n\t * Returns true for the child attribute if the child\n\t * cell had a previous parent or if we're reading the\n\t * child as an attribute rather than a child node, in\n\t * which case it's always a reference.\n\t */\n\tcodec.isReference = function(obj, attr, value, isWrite)\n\t{\n\t\tif (attr == 'child' && (!isWrite || obj.model.contains(obj.previous)))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n\t};\n\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes references to parent or previous if not in the model.\n\t */\n  \tcodec.isExcluded = function(obj, attr, value, write)\n  \t{\n  \t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n  \t\t\t(write && value != null && (attr == 'previous' ||\n  \t\t\tattr == 'parent') && !obj.model.contains(value));\n  \t};\n  \t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes the child recusively and adds the result\n\t * to the given node.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (this.isReference(obj, 'child', obj.child, true))\n\t\t{\n\t\t\t// Encodes as reference (id)\n\t\t\tnode.setAttribute('child', enc.getId(obj.child));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// At this point, the encoder is no longer able to know which cells\n\t\t\t// are new, so we have to encode the complete cell hierarchy and\n\t\t\t// ignore the ones that are already there at decoding time. Note:\n\t\t\t// This can only be resolved by moving the notify event into the\n\t\t\t// execute of the edit.\n\t\t\tenc.encodeCell(obj.child, node);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the any child nodes as using the respective\n\t * codec from the registry.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.child = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\t\n\t\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\t// Ignores all existing cells because those do not need to\n\t\t\t\t\t// be re-inserted into the model. Since the encoded version\n\t\t\t\t\t// of these cells contains the new parent, this would leave\n\t\t\t\t\t// to an inconsistent state on the model (ie. a parent\n\t\t\t\t\t// change without a call to parentForCellChanged).\n\t\t\t\t\tvar id = tmp.getAttribute('id');\n\t\t\t\t\t\n\t\t\t\t\tif (dec.lookup(id) == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar childRef = node.getAttribute('child');\n\t\t\tobj.child = dec.getObject(childRef);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores object state in the child change.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Cells are decoded here after a complete transaction so the previous\n\t\t// parent must be restored on the cell for the case where the cell was\n\t\t// added. This is needed for the local model to identify the cell as a\n\t\t// new cell and register the ID.\n        if (obj.child != null)\n        {\n            if (obj.child.parent != null && obj.previous != null &&\n                obj.child.parent != obj.previous)\n            {\n                obj.previous = obj.child.parent;\n            }\n\n            obj.child.parent = obj.previous;\n            obj.previous = obj.parent;\n            obj.previousIndex = obj.index;\n        }\n\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxChildChangeCodec = typeof mxChildChangeCodec !== 'undefined' ? mxChildChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxTerminalChangeCodec\n\t *\n\t * Codec for <mxTerminalChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t *\n\t * Reference Fields:\n\t *\n\t * - cell\n\t * - terminal\n\t */\n\tvar codec = new mxObjectCodec(new mxTerminalChange(),\n\t\t['model', 'previous'], ['cell', 'terminal']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.terminal;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxTerminalChangeCodec = typeof mxTerminalChangeCodec !== 'undefined' ? mxTerminalChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGenericChangeCodec\n *\n * Codec for <mxValueChange>s, <mxStyleChange>s, <mxGeometryChange>s,\n * <mxCollapseChange>s and <mxVisibleChange>s. This class is created\n * and registered dynamically at load time and used implicitely\n * via <mxCodec> and the <mxCodecRegistry>.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n *\n * Reference Fields:\n *\n * - cell\n * \n * Constructor: mxGenericChangeCodec\n *\n * Factory function that creates a <mxObjectCodec> for\n * the specified change and fieldname.\n *\n * Parameters:\n *\n * obj - An instance of the change object.\n * variable - The fieldname for the change data.\n */\nvar mxGenericChangeCodec = function(obj, variable)\n{\n\tvar codec = new mxObjectCodec(obj,  ['model', 'previous'], ['cell']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Allows forward references in sessions. This is a workaround\n\t\t// for the sequence of edits in mxGraph.moveCells and cellsAdded.\n\t\tif (mxUtils.isNode(obj.cell))\n\t\t{\n\t\t\tobj.cell = dec.decodeCell(obj.cell, false);\n\t\t}\n\n\t\tobj.previous = obj[variable];\n\n\t\treturn obj;\n\t};\n\t\n\treturn codec;\n};\n\n// Registers the codecs\nmxCodecRegistry.register(mxGenericChangeCodec(new mxValueChange(), 'value'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxStyleChange(), 'style'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxGeometryChange(), 'geometry'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCollapseChange(), 'collapsed'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxVisibleChange(), 'visible'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCellAttributeChange(), 'value'));\n\n__mxOutput.mxGenericChangeCodec = typeof mxGenericChangeCodec !== 'undefined' ? mxGenericChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphCodec\n\t *\n\t * Codec for <mxGraph>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - graphListeners\n\t * - eventListeners\n\t * - view\n\t * - container\n\t * - cellRenderer\n\t * - editor\n\t * - selection\n\t */\n\treturn new mxObjectCodec(new mxGraph(),\n\t\t['graphListeners', 'eventListeners', 'view', 'container',\n\t\t'cellRenderer', 'editor', 'selection']);\n\n}());\n\n__mxOutput.mxGraphCodec = typeof mxGraphCodec !== 'undefined' ? mxGraphCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphViewCodec\n\t *\n\t * Custom encoder for <mxGraphView>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only writes views\n\t * into a XML format that can be used to create an image for\n\t * the graph, that is, it contains absolute coordinates with\n\t * computed perimeters, edge styles and cell styles.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphView());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes the given <mxGraphView> using <encodeCell>\n\t * starting at the model's root. This returns the\n\t * top-level graph node of the recursive encoding.\n\t */\n\tcodec.encode = function(enc, view)\n\t{\n\t\treturn this.encodeCell(enc, view,\n\t\t\tview.graph.getModel().getRoot());\n\t};\n\n\t/**\n\t * Function: encodeCell\n\t *\n\t * Recursively encodes the specifed cell. Uses layer\n\t * as the default nodename. If the cell's parent is\n\t * null, then graph is used for the nodename. If\n\t * <mxGraphModel.isEdge> returns true for the cell,\n\t * then edge is used for the nodename, else if\n\t * <mxGraphModel.isVertex> returns true for the cell,\n\t * then vertex is used for the nodename.\n\t *\n\t * <mxGraph.getLabel> is used to create the label\n\t * attribute for the cell. For graph nodes and vertices\n\t * the bounds are encoded into x, y, width and height.\n\t * For edges the points are encoded into a points\n\t * attribute as a space-separated list of comma-separated\n\t * coordinate pairs (eg. x0,y0 x1,y1 ... xn,yn). All\n\t * values from the cell style are added as attribute\n\t * values to the node. \n\t */\n\tcodec.encodeCell = function(enc, view, cell)\n\t{\n\t\tvar model = view.graph.getModel();\n\t\tvar state = view.getState(cell);\n\t\tvar parent = model.getParent(cell);\n\t\t\n\t\tif (parent == null || state != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\tvar geo = view.graph.getCellGeometry(cell);\n\t\t\tvar name = null;\n\t\t\t\n\t\t\tif (parent == model.getRoot())\n\t\t\t{\n\t\t\t\tname = 'layer';\n\t\t\t}\n\t\t\telse if (parent == null)\n\t\t\t{\n\t\t\t\tname = 'graph';\n\t\t\t}\n\t\t\telse if (model.isEdge(cell))\n\t\t\t{\n\t\t\t\tname = 'edge';\n\t\t\t}\n\t\t\telse if (childCount > 0 && geo != null)\n\t\t\t{\n\t\t\t\tname = 'group';\n\t\t\t}\n\t\t\telse if (model.isVertex(cell))\n\t\t\t{\n\t\t\t\tname = 'vertex';\n\t\t\t}\n\t\t\t\n\t\t\tif (name != null)\n\t\t\t{\n\t\t\t\tvar node = enc.document.createElement(name);\n\t\t\t\tvar lab = view.graph.getLabel(cell);\n\t\t\t\t\n\t\t\t\tif (lab != null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('label', view.graph.getLabel(cell));\n\t\t\t\t\t\n\t\t\t\t\tif (view.graph.isHtmlLabel(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('html', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tif (parent == null)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = view.getGraphBounds();\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(bounds.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(bounds.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(bounds.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(bounds.height));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tnode.setAttribute('scale', view.scale);\n\t\t\t\t}\n\t\t\t\telse if (state != null && geo != null)\n\t\t\t\t{\n\t\t\t\t\t// Writes each key, value in the style pair to an attribute\n\t\t\t\t    for (var i in state.style)\n\t\t\t\t    {\n\t\t\t\t    \tvar value = state.style[i];\n\t\t\n\t\t\t\t    \t// Tries to turn objects and functions into strings\n\t\t\t\t\t    if (typeof(value) == 'function' &&\n\t\t\t\t\t\t\ttypeof(value) == 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t    \tvalue = mxStyleRegistry.getName(value);\n\t\t\t\t        }\n\t\t\t\t    \t\n\t\t\t\t    \tif (value != null &&\n\t\t\t\t    \t\ttypeof(value) != 'function' &&\n\t\t\t\t\t\t\ttypeof(value) != 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute(i, value);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t    \n\t\t\t\t\tvar abs = state.absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the list of points into one attribute\n\t\t\t\t\tif (abs != null && abs.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pts = Math.round(abs[0].x) + ',' + Math.round(abs[0].y);\n\t\t\n\t\t\t\t\t\tfor (var i=1; i<abs.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts += ' ' + Math.round(abs[i].x) + ',' +\n\t\t\t\t\t\t\t\tMath.round(abs[i].y);\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\tnode.setAttribute('points', pts);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Writes the bounds into 4 attributes\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(state.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(state.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(state.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(state.height));\t\t\t\t\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar offset = state.absoluteOffset;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the offset into 2 attributes\n\t\t\t\t\tif (offset != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (offset.x != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dx', Math.round(offset.x));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (offset.y != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dy', Math.round(offset.y));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tfor (var i=0; i<childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar childNode = this.encodeCell(enc,\n\t\t\t\t\t\t\tview, model.getChildAt(cell, i));\n\t\t\t\t\t\n\t\t\t\t\tif (childNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxGraphViewCodec = typeof mxGraphViewCodec !== 'undefined' ? mxGraphViewCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheetCodec\n *\n * Codec for <mxStylesheet>s. This class is created and registered\n * dynamically at load time and used implicitely via <mxCodec>\n * and the <mxCodecRegistry>.\n */\nvar mxStylesheetCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxStylesheet());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes a stylesheet. See <decode> for a description of the\n\t * format.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\tvar node = enc.document.createElement(this.getName());\n\t\t\n\t\tfor (var i in obj.styles)\n\t\t{\n\t\t\tvar style = obj.styles[i];\n\t\t\tvar styleNode = enc.document.createElement('add');\n\t\t\t\n\t\t\tif (i != null)\n\t\t\t{\n\t\t\t\tstyleNode.setAttribute('as', i);\n\t\t\t\t\n\t\t\t\tfor (var j in style)\n\t\t\t\t{\n\t\t\t\t\tvar value = this.getStringValue(j, style[j]);\n\t\t\t\t\t\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar entry = enc.document.createElement('add');\n\t\t\t\t\t\tentry.setAttribute('value', value);\n\t\t\t\t\t\tentry.setAttribute('as', j);\n\t\t\t\t\t\tstyleNode.appendChild(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (styleNode.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tnode.appendChild(styleNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t    return node;\n\t};\n\n\t/**\n\t * Function: getStringValue\n\t *\n\t * Returns the string for encoding the given value.\n\t */\n\tcodec.getStringValue = function(key, value)\n\t{\n\t\tvar type = typeof(value);\n\t\t\n\t\tif (type == 'function')\n\t\t{\n\t\t\tvalue = mxStyleRegistry.getName(value);\n\t\t}\n\t\telse if (type == 'object')\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new style.\n\t *\n\t * Attributes:\n\t *\n\t * as - Name of the style.\n\t * extend - Name of the style to inherit from.\n\t *\n\t * Each node contains another sequence of add and remove nodes with the following\n\t * attributes:\n\t *\n\t * as - Name of the style (see <mxConstants>).\n\t * value - Value for the style.\n\t *\n\t * Instead of the value-attribute, one can put Javascript expressions into\n\t * the node as follows if <mxStylesheetCodec.allowEval> is true:\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t *\n\t * A remove node will remove the entry with the name given in the as-attribute\n\t * from the style.\n\t * \n\t * Example:\n\t *\n\t * (code)\n\t * <mxStylesheet as=\"stylesheet\">\n\t *   <add as=\"text\">\n\t *     <add as=\"fontSize\" value=\"12\"/>\n\t *   </add>\n\t *   <add as=\"defaultVertex\" extend=\"text\">\n\t *     <add as=\"shape\" value=\"rectangle\"/>\n\t *   </add>\n\t * </mxStylesheet>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar obj = into || new this.template.constructor();\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.objects[id] = obj;\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tif (!this.processInclude(dec, node, obj) && node.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\n\t\t\t\tif (as != null)\n\t\t\t\t{\n\t\t\t\t\tvar extend = node.getAttribute('extend');\n\t\t\t\t\tvar style = (extend != null) ? mxUtils.clone(obj.styles[extend]) : null;\n\t\t\t\t\t\n\t\t\t\t\tif (style == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (extend != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxLog.warn('mxStylesheetCodec.decode: stylesheet ' +\n\t\t\t\t\t\t\t\textend + ' not found to extend');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstyle = new Object();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar entry = node.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (entry != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (entry.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t \tvar key = entry.getAttribute('as');\n\t\t\t\t\t\t \t\n\t\t\t\t\t\t \tif (entry.nodeName == 'add')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \tvar text = mxUtils.getTextContent(entry);\n\t\t\t\t\t\t\t \tvar value = null;\n\t\t\t\t\t\t\t \t\n\t\t\t\t\t\t\t \tif (text != null && text.length > 0 && mxStylesheetCodec.allowEval)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = mxUtils.eval(text);\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t\t \telse\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = entry.getAttribute('value');\n\t\t\t\t\t\t\t \t\t\n\t\t\t\t\t\t\t \t\tif (mxUtils.isNumeric(value))\n\t\t\t\t\t\t\t \t\t{\n\t\t\t\t\t\t\t\t\t\tvalue = parseFloat(value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t \t}\n\n\t\t\t\t\t\t\t \tif (value != null)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tstyle[key] = value;\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \telse if (entry.nodeName == 'remove')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t \t\tdelete style[key];\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tentry = entry.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj.putCellStyle(as, style);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input.\n */\nmxStylesheetCodec.allowEval = true;\n\n__mxOutput.mxStylesheetCodec = typeof mxStylesheetCodec !== 'undefined' ? mxStylesheetCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultKeyHandlerCodec\n\t *\n\t * Custom codec for configuring <mxDefaultKeyHandler>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing key handlers, it does not encode or create key handlers.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultKeyHandler());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Binds a keystroke to an actionname.\n\t *\n\t * Attributes:\n\t *\n\t * as - Keycode.\n\t * action - Actionname to execute in editor.\n\t * control - Optional boolean indicating if\n\t * \t\tthe control key must be pressed.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <mxDefaultKeyHandler as=\"keyHandler\">\n\t *   <add as=\"88\" control=\"true\" action=\"cut\"/>\n\t *   <add as=\"67\" control=\"true\" action=\"copy\"/>\n\t *   <add as=\"86\" control=\"true\" action=\"paste\"/>\n\t * </mxDefaultKeyHandler>\n\t * (end)\n\t *\n\t * The keycodes are for the x, c and v keys.\n\t *\n\t * See also: <mxDefaultKeyHandler.bindAction>,\n\t * http://www.js-examples.com/page/tutorials__key_codes.html\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (!this.processInclude(dec, node, into) &&\n\t\t\t\t\tnode.nodeName == 'add')\n\t\t\t\t{\n\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\tvar control = node.getAttribute('control');\n\t\t\t\t\t\n\t\t\t\t\tinto.bindAction(as, action, control);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultKeyHandlerCodec = typeof mxDefaultKeyHandlerCodec !== 'undefined' ? mxDefaultKeyHandlerCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbarCodec\n *\n * Custom codec for configuring <mxDefaultToolbar>s. This class is created\n * and registered dynamically at load time and used implicitely via\n * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n * data for existing toolbars handlers, it does not encode or create toolbars.\n */\nvar mxDefaultToolbarCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxDefaultToolbar());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new item to the toolbar. See below for attributes.\n\t * separator - Adds a vertical separator. No attributes.\n\t * hr - Adds a horizontal separator. No attributes.\n\t * br - Adds a linefeed. No attributes. \n\t *\n\t * Attributes:\n\t *\n\t * as - Resource key for the label.\n\t * action - Name of the action to execute in enclosing editor.\n\t * mode - Modename (see below).\n\t * template - Template name for cell insertion.\n\t * style - Optional style to override the template style.\n\t * icon - Icon (relative/absolute URL).\n\t * pressedIcon - Optional icon for pressed state (relative/absolute URL).\n\t * id - Optional ID to be used for the created DOM element.\n\t * toggle - Optional 0 or 1 to disable toggling of the element. Default is\n\t * 1 (true).\n\t *\n\t * The action, mode and template attributes are mutually exclusive. The\n\t * style can only be used with the template attribute. The add node may\n\t * contain another sequence of add nodes with as and action attributes\n\t * to create a combo box in the toolbar. If the icon is specified then\n\t * a list of the child node is expected to have its template attribute\n\t * set and the action is ignored instead.\n\t * \n\t * Nodes with a specified template may define a function to be used for\n\t * inserting the cloned template into the graph. Here is an example of such\n\t * a node:\n\t * \n\t * (code)\n\t * <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"><![CDATA[\n\t *   function (editor, cell, evt, targetCell)\n\t *   {\n\t *     var pt = mxUtils.convertPoint(\n\t *       editor.graph.container, mxEvent.getClientX(evt),\n\t *         mxEvent.getClientY(evt));\n\t *     return editor.addVertex(targetCell, cell, pt.x, pt.y);\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * In the above function, editor is the enclosing <mxEditor> instance, cell\n\t * is the clone of the template, evt is the mouse event that represents the\n\t * drop and targetCell is the cell under the mousepointer where the drop\n\t * occurred. The targetCell is retrieved using <mxGraph.getCellAt>.\n\t *\n\t * Futhermore, nodes with the mode attribute may define a function to\n\t * be executed upon selection of the respective toolbar icon. In the\n\t * example below, the default edge style is set when this specific\n\t * connect-mode is activated:\n\t *\n\t * (code)\n\t * <add as=\"connect\" mode=\"connect\"><![CDATA[\n\t *   function (editor)\n\t *   {\n\t *     if (editor.defaultEdge != null)\n\t *     {\n\t *       editor.defaultEdge.style = 'straightEdge';\n\t *     }\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * Both functions require <mxDefaultToolbarCodec.allowEval> to be set to true.\n\t *\n\t * Modes:\n\t *\n\t * select - Left mouse button used for rubberband- & cell-selection.\n\t * connect - Allows connecting vertices by inserting new edges.\n\t * pan - Disables selection and switches to panning on the left button.\n\t *\n\t * Example:\n\t *\n\t * To add items to the toolbar:\n\t * \n\t * (code)\n\t * <mxDefaultToolbar as=\"toolbar\">\n\t *   <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n\t *   <br/><hr/>\n\t *   <add as=\"select\" mode=\"select\" icon=\"images/select.gif\"/>\n\t *   <add as=\"connect\" mode=\"connect\" icon=\"images/connect.gif\"/>\n\t * </mxDefaultToolbar>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\tif (!this.processInclude(dec, node, into))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (node.nodeName == 'separator')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.addSeparator();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'br')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addBreak();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'hr')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addLine();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'add')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\t\t\t\tvar icon = node.getAttribute('icon');\n\t\t\t\t\t\t\tvar pressedIcon = node.getAttribute('pressedIcon');\n\t\t\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\t\t\tvar mode = node.getAttribute('mode');\n\t\t\t\t\t\t\tvar template = node.getAttribute('template');\n\t\t\t\t\t\t\tvar toggle = node.getAttribute('toggle') != '0';\n\t\t\t\t\t\t\tvar text = mxUtils.getTextContent(node);\n\t\t\t\t\t\t\tvar elt = null;\n\n\t\t\t\t\t\t\tif (action != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telt = into.addItem(as, icon, action, pressedIcon);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (mode != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar funct = (mxDefaultToolbarCodec.allowEval) ? mxUtils.eval(text) : null;\n\t\t\t\t\t\t\t\telt = into.addMode(as, icon, mode, pressedIcon, funct);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (template != null || (text != null && text.length > 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar cell = editor.templates[template];\n\t\t\t\t\t\t\t\tvar style = node.getAttribute('style');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (cell != null && style != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcell = editor.graph.cloneCell(cell);\n\t\t\t\t\t\t\t\t\tcell.setStyle(style);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar insertFunction = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (text != null && text.length > 0 && mxDefaultToolbarCodec.allowEval)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tinsertFunction = mxUtils.eval(text);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\telt = into.addPrototype(as, icon, cell, pressedIcon, insertFunction, toggle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar children = mxUtils.getChildNodes(node);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (children.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (icon == null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar combo = into.addActionCombo(as);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(combo, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar act = child.getAttribute('action');\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addActionOption(combo, lab, act);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar select = null;\n\t\t\t\t\t\t\t\t\t\tvar create = function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar template = editor.templates[select.value];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (template != null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar clone = template.clone();\n\t\t\t\t\t\t\t\t\t\t\t\tvar style = select.options[select.selectedIndex].cellStyle;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tif (style != null)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tclone.setStyle(style);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn clone;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmxLog.warn('Template '+template+' not found');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tvar img = into.addPrototype(as, icon, create, null, null, toggle);\n\t\t\t\t\t\t\t\t\t\tselect = into.addCombo();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Selects the toolbar icon if a selection change\n\t\t\t\t\t\t\t\t\t\t// is made in the corresponding combobox.\n\t\t\t\t\t\t\t\t\t\tmxEvent.addListener(select, 'change', function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.selectMode(img, function(evt)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar pt = mxUtils.convertPoint(editor.graph.container,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn editor.addVertex(null, funct(), pt.x, pt.y);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.noReset = false;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Adds the entries to the combobox\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(select, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = child.getAttribute('template');\n\t\t\t\t\t\t\t\t\t\t\t\tvar option = into.addOption(select, lab, tmp || template);\n\t\t\t\t\t\t\t\t\t\t\t\toption.cellStyle = child.getAttribute('style');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Assigns an ID to the created element to access it later.\n\t\t\t\t\t\t\tif (elt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar id = node.getAttribute('id');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (id != null && id.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\telt.setAttribute('id', id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input\n */\nmxDefaultToolbarCodec.allowEval = true;\n\n__mxOutput.mxDefaultToolbarCodec = typeof mxDefaultToolbarCodec !== 'undefined' ? mxDefaultToolbarCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultPopupMenuCodec\n\t *\n\t * Custom codec for configuring <mxDefaultPopupMenu>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing popup menus, it does not encode or create menus. Note\n\t * that this codec only passes the configuration node to the popup menu,\n\t * which uses the config to dynamically create menus. See\n\t * <mxDefaultPopupMenu.createMenu>.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultPopupMenu());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Uses the given node as the config for <mxDefaultPopupMenu>.\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar inc = node.getElementsByTagName('include')[0];\n\t\t\n\t\tif (inc != null)\n\t\t{\n\t\t\tthis.processInclude(dec, inc, into);\n\t\t}\n\t\telse if (into != null)\n\t\t{\n\t\t\tinto.config = node;\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultPopupMenuCodec = typeof mxDefaultPopupMenuCodec !== 'undefined' ? mxDefaultPopupMenuCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxEditorCodec\n\t *\n\t * Codec for <mxEditor>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - modified\n\t * - lastSnapshot\n\t * - ignoredChanges\n\t * - undoManager\n\t * - graphContainer\n\t * - toolbarContainer\n\t */\n\tvar codec = new mxObjectCodec(new mxEditor(),\n\t\t['modified', 'lastSnapshot', 'ignoredChanges',\n\t\t'undoManager', 'graphContainer', 'toolbarContainer']);\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the ui-part of the configuration node by reading\n\t * a sequence of the following child nodes and attributes\n\t * and passes the control to the default decoding mechanism:\n\t *\n\t * Child Nodes:\n\t *\n\t * stylesheet - Adds a CSS stylesheet to the document.\n\t * resource - Adds the basename of a resource bundle.\n\t * add - Creates or configures a known UI element.\n\t *\n\t * These elements may appear in any order given that the\n\t * graph UI element is added before the toolbar element\n\t * (see Known Keys).\n\t *\n\t * Attributes:\n\t *\n\t * as - Key for the UI element (see below).\n\t * element - ID for the element in the document.\n\t * style - CSS style to be used for the element or window.\n\t * x - X coordinate for the new window.\n\t * y - Y coordinate for the new window.\n\t * width - Width for the new window.\n\t * height - Optional height for the new window.\n\t * name - Name of the stylesheet (absolute/relative URL).\n\t * basename - Basename of the resource bundle (see <mxResources>).\n\t *\n\t * The x, y, width and height attributes are used to create a new\n\t * <mxWindow> if the element attribute is not specified in an add\n\t * node. The name and basename are only used in the stylesheet and\n\t * resource nodes, respectively.\n\t *\n\t * Known Keys:\n\t *\n\t * graph - Main graph element (see <mxEditor.setGraphContainer>).\n\t * title - Title element (see <mxEditor.setTitleContainer>).\n\t * toolbar - Toolbar element (see <mxEditor.setToolbarContainer>).\n\t * status - Status bar element (see <mxEditor.setStatusContainer>).\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <ui>\n\t *   <stylesheet name=\"css/process.css\"/>\n\t *   <resource basename=\"resources/app\"/>\n\t *   <add as=\"graph\" element=\"graph\"\n\t *     style=\"left:70px;right:20px;top:20px;bottom:40px\"/>\n\t *   <add as=\"status\" element=\"status\"/>\n\t *   <add as=\"toolbar\" x=\"10\" y=\"20\" width=\"54\"/>\n\t * </ui>\n\t * (end)\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Assigns the specified templates for edges\n\t\tvar defaultEdge = node.getAttribute('defaultEdge');\n\t\t\n\t\tif (defaultEdge != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultEdge');\n\t\t\tobj.defaultEdge = obj.templates[defaultEdge];\n\t\t}\n\n\t\t// Assigns the specified templates for groups\n\t\tvar defaultGroup = node.getAttribute('defaultGroup');\n\t\t\n\t\tif (defaultGroup != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultGroup');\n\t\t\tobj.defaultGroup = obj.templates[defaultGroup];\n\t\t}\n\n\t\treturn obj;\n\t};\n\t\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'Array')\n\t\t{\n\t\t\tvar role = child.getAttribute('as');\n\t\t\t\n\t\t\tif (role == 'templates')\n\t\t\t{\n\t\t\t\tthis.decodeTemplates(dec, child, obj);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (child.nodeName == 'ui')\n\t\t{\n\t\t\tthis.decodeUi(dec, child, obj);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t};\n\t\t\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeUi = function(dec, node, editor)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = tmp.getAttribute('as');\n\t\t\t\tvar elt = tmp.getAttribute('element');\n\t\t\t\tvar style = tmp.getAttribute('style');\n\t\t\t\tvar element = null;\n\n\t\t\t\tif (elt != null)\n\t\t\t\t{\n\t\t\t\t\telement = document.getElementById(elt);\n\t\t\t\t\t\n\t\t\t\t\tif (element != null && style != null)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.style.cssText += ';' + style;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar x = parseInt(tmp.getAttribute('x'));\n\t\t\t\t\tvar y = parseInt(tmp.getAttribute('y'));\n\t\t\t\t\tvar width = tmp.getAttribute('width');\n\t\t\t\t\tvar height = tmp.getAttribute('height');\n\n\t\t\t\t\t// Creates a new window around the element\n\t\t\t\t\telement = document.createElement('div');\n\t\t\t\t\telement.style.cssText = style;\n\t\t\t\t\t\n\t\t\t\t\tvar wnd = new mxWindow(mxResources.get(as) || as,\n\t\t\t\t\t\telement, x, y, width, height, false, true);\n\t\t\t\t\twnd.setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// TODO: Make more generic\n\t\t\t\tif (as == 'graph')\n\t\t\t\t{\n\t\t\t\t\teditor.setGraphContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'toolbar')\n\t\t\t\t{\n\t\t\t\t\teditor.setToolbarContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'title')\n\t\t\t\t{\n\t\t\t\t\teditor.setTitleContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'status')\n\t\t\t\t{\n\t\t\t\t\teditor.setStatusContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'map')\n\t\t\t\t{\n\t\t\t\t\teditor.setMapContainer(element);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'resource')\n\t\t\t{\n\t\t\t\tmxResources.add(tmp.getAttribute('basename'));\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'stylesheet')\n\t\t\t{\n\t\t\t\tmxClient.link('stylesheet', tmp.getAttribute('name'));\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\t\n\t};\n\t\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeTemplates = function(dec, node, editor)\n\t{\n\t\tif (editor.templates == null)\n\t\t{\n\t\t\teditor.templates = [];\n\t\t}\n\t\t\n\t\tvar children = mxUtils.getChildNodes(node);\n\t\tfor (var j=0; j<children.length; j++)\n\t\t{\n\t\t\tvar name = children[j].getAttribute('as');\n\t\t\tvar child = children[j].firstChild;\n\t\t\t\n\t\t\twhile (child != null && child.nodeType != 1)\n\t\t\t{\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\t// LATER: Only single cells means you need\n\t\t\t\t// to group multiple cells within another\n\t\t\t\t// cell. This should be changed to support\n\t\t\t\t// arrays of cells, or the wrapper must\n\t\t\t\t// be automatically handled in this class.\n\t\t\t\teditor.templates[name] = dec.decodeCell(child);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxEditorCodec = typeof mxEditorCodec !== 'undefined' ? mxEditorCodec : undefined;\nreturn __mxOutput;\n};\n}));","/**\n * Safe chained function\n *\n * Will only create a new function if needed,\n * otherwise will pass back existing functions or null.\n *\n * @returns {function|null}\n */\nexport default function createChainedFunction() {\n  var args = [].slice.call(arguments, 0);\n\n  if (args.length === 1) {\n    return args[0];\n  }\n\n  return function chainedFunction() {\n    for (var i = 0; i < args.length; i++) {\n      if (args[i] && args[i].apply) {\n        args[i].apply(this, arguments);\n      }\n    }\n  };\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","'use strict';\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  var _InfoCircleFilled = _interopRequireDefault(require('./lib/icons/InfoCircleFilled'));\n  \n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n  \n  var _default = _InfoCircleFilled;\n  exports.default = _default;\n  module.exports = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _InfoCircleFilled = _interopRequireDefault(require(\"@ant-design/icons-svg/lib/asn/InfoCircleFilled\"));\n\nvar _AntdIcon = _interopRequireDefault(require(\"../components/AntdIcon\"));\n\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nvar InfoCircleFilled = function InfoCircleFilled(props, ref) {\n  return React.createElement(_AntdIcon.default, Object.assign({}, props, {\n    ref: ref,\n    icon: _InfoCircleFilled.default\n  }));\n};\n\nInfoCircleFilled.displayName = 'InfoCircleFilled';\n\nvar _default = React.forwardRef(InfoCircleFilled);\n\nexports.default = _default;","\"use strict\";\n// This icon file is generated automatically.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar InfoCircleFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z\" } }] }, \"name\": \"info-circle\", \"theme\": \"filled\" };\nexports.default = InfoCircleFilled;\n","'use strict';\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  var _CheckCircleFilled = _interopRequireDefault(require('./lib/icons/CheckCircleFilled'));\n  \n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n  \n  var _default = _CheckCircleFilled;\n  exports.default = _default;\n  module.exports = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _CheckCircleFilled = _interopRequireDefault(require(\"@ant-design/icons-svg/lib/asn/CheckCircleFilled\"));\n\nvar _AntdIcon = _interopRequireDefault(require(\"../components/AntdIcon\"));\n\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nvar CheckCircleFilled = function CheckCircleFilled(props, ref) {\n  return React.createElement(_AntdIcon.default, Object.assign({}, props, {\n    ref: ref,\n    icon: _CheckCircleFilled.default\n  }));\n};\n\nCheckCircleFilled.displayName = 'CheckCircleFilled';\n\nvar _default = React.forwardRef(CheckCircleFilled);\n\nexports.default = _default;","\"use strict\";\n// This icon file is generated automatically.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CheckCircleFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z\" } }] }, \"name\": \"check-circle\", \"theme\": \"filled\" };\nexports.default = CheckCircleFilled;\n","'use strict';\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  var _ExclamationCircleFilled = _interopRequireDefault(require('./lib/icons/ExclamationCircleFilled'));\n  \n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n  \n  var _default = _ExclamationCircleFilled;\n  exports.default = _default;\n  module.exports = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _ExclamationCircleFilled = _interopRequireDefault(require(\"@ant-design/icons-svg/lib/asn/ExclamationCircleFilled\"));\n\nvar _AntdIcon = _interopRequireDefault(require(\"../components/AntdIcon\"));\n\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nvar ExclamationCircleFilled = function ExclamationCircleFilled(props, ref) {\n  return React.createElement(_AntdIcon.default, Object.assign({}, props, {\n    ref: ref,\n    icon: _ExclamationCircleFilled.default\n  }));\n};\n\nExclamationCircleFilled.displayName = 'ExclamationCircleFilled';\n\nvar _default = React.forwardRef(ExclamationCircleFilled);\n\nexports.default = _default;","\"use strict\";\n// This icon file is generated automatically.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ExclamationCircleFilled = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z\" } }] }, \"name\": \"exclamation-circle\", \"theme\": \"filled\" };\nexports.default = ExclamationCircleFilled;\n","/*\n *  base64.js\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n */\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined'\n        ? module.exports = factory(global)\n        : typeof define === 'function' && define.amd\n        ? define(factory) : factory(global)\n}((\n    typeof self !== 'undefined' ? self\n        : typeof window !== 'undefined' ? window\n        : typeof global !== 'undefined' ? global\n: this\n), function(global) {\n    'use strict';\n    // existing version for noConflict()\n    global = global || {};\n    var _Base64 = global.Base64;\n    var version = \"2.5.2\";\n    // if node.js and NOT React Native, we use Buffer\n    var buffer;\n    if (typeof module !== 'undefined' && module.exports) {\n        try {\n            buffer = eval(\"require('buffer').Buffer\");\n        } catch (err) {\n            buffer = undefined;\n        }\n    }\n    // constants\n    var b64chars\n        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var b64tab = function(bin) {\n        var t = {};\n        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;\n        return t;\n    }(b64chars);\n    var fromCharCode = String.fromCharCode;\n    // encoder stuff\n    var cb_utob = function(c) {\n        if (c.length < 2) {\n            var cc = c.charCodeAt(0);\n            return cc < 0x80 ? c\n                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))\n                                + fromCharCode(0x80 | (cc & 0x3f)))\n                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))\n                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                    + fromCharCode(0x80 | ( cc         & 0x3f)));\n        } else {\n            var cc = 0x10000\n                + (c.charCodeAt(0) - 0xD800) * 0x400\n                + (c.charCodeAt(1) - 0xDC00);\n            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))\n                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))\n                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                    + fromCharCode(0x80 | ( cc         & 0x3f)));\n        }\n    };\n    var re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n    var utob = function(u) {\n        return u.replace(re_utob, cb_utob);\n    };\n    var cb_encode = function(ccc) {\n        var padlen = [0, 2, 1][ccc.length % 3],\n        ord = ccc.charCodeAt(0) << 16\n            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)\n            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),\n        chars = [\n            b64chars.charAt( ord >>> 18),\n            b64chars.charAt((ord >>> 12) & 63),\n            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),\n            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)\n        ];\n        return chars.join('');\n    };\n    var btoa = global.btoa ? function(b) {\n        return global.btoa(b);\n    } : function(b) {\n        return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n    };\n    var _encode = function(u) {\n        var isUint8Array = Object.prototype.toString.call(u) === '[object Uint8Array]';\n        return isUint8Array ? u.toString('base64')\n            : btoa(utob(String(u)));\n    }\n    var encode = function(u, urisafe) {\n        return !urisafe\n            ? _encode(u)\n            : _encode(String(u)).replace(/[+\\/]/g, function(m0) {\n                return m0 == '+' ? '-' : '_';\n            }).replace(/=/g, '');\n    };\n    var encodeURI = function(u) { return encode(u, true) };\n    // decoder stuff\n    var re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\n    var cb_btou = function(cccc) {\n        switch(cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                |    ((0x3f & cccc.charCodeAt(1)) << 12)\n                |    ((0x3f & cccc.charCodeAt(2)) <<  6)\n                |     (0x3f & cccc.charCodeAt(3)),\n            offset = cp - 0x10000;\n            return (fromCharCode((offset  >>> 10) + 0xD800)\n                    + fromCharCode((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return fromCharCode(\n                ((0x0f & cccc.charCodeAt(0)) << 12)\n                    | ((0x3f & cccc.charCodeAt(1)) << 6)\n                    |  (0x3f & cccc.charCodeAt(2))\n            );\n        default:\n            return  fromCharCode(\n                ((0x1f & cccc.charCodeAt(0)) << 6)\n                    |  (0x3f & cccc.charCodeAt(1))\n            );\n        }\n    };\n    var btou = function(b) {\n        return b.replace(re_btou, cb_btou);\n    };\n    var cb_decode = function(cccc) {\n        var len = cccc.length,\n        padlen = len % 4,\n        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)\n            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)\n            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)\n            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),\n        chars = [\n            fromCharCode( n >>> 16),\n            fromCharCode((n >>>  8) & 0xff),\n            fromCharCode( n         & 0xff)\n        ];\n        chars.length -= [0, 0, 2, 1][padlen];\n        return chars.join('');\n    };\n    var _atob = global.atob ? function(a) {\n        return global.atob(a);\n    } : function(a){\n        return a.replace(/\\S{1,4}/g, cb_decode);\n    };\n    var atob = function(a) {\n        return _atob(String(a).replace(/[^A-Za-z0-9\\+\\/]/g, ''));\n    };\n    var _decode = buffer ?\n        buffer.from && Uint8Array && buffer.from !== Uint8Array.from\n        ? function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : buffer.from(a, 'base64')).toString();\n        }\n        : function(a) {\n            return (a.constructor === buffer.constructor\n                    ? a : new buffer(a, 'base64')).toString();\n        }\n        : function(a) { return btou(_atob(a)) };\n    var decode = function(a){\n        return _decode(\n            String(a).replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })\n                .replace(/[^A-Za-z0-9\\+\\/]/g, '')\n        );\n    };\n    var noConflict = function() {\n        var Base64 = global.Base64;\n        global.Base64 = _Base64;\n        return Base64;\n    };\n    // export Base64\n    global.Base64 = {\n        VERSION: version,\n        atob: atob,\n        btoa: btoa,\n        fromBase64: decode,\n        toBase64: encode,\n        utob: utob,\n        encode: encode,\n        encodeURI: encodeURI,\n        btou: btou,\n        decode: decode,\n        noConflict: noConflict,\n        __buffer__: buffer\n    };\n    // if ES5 is available, make Base64.extendString() available\n    if (typeof Object.defineProperty === 'function') {\n        var noEnum = function(v){\n            return {value:v,enumerable:false,writable:true,configurable:true};\n        };\n        global.Base64.extendString = function () {\n            Object.defineProperty(\n                String.prototype, 'fromBase64', noEnum(function () {\n                    return decode(this)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64', noEnum(function (urisafe) {\n                    return encode(this, urisafe)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64URI', noEnum(function () {\n                    return encode(this, true)\n                }));\n        };\n    }\n    //\n    // export Base64 to the namespace\n    //\n    if (global['Meteor']) { // Meteor.js\n        Base64 = global.Base64;\n    }\n    // module.exports and AMD are mutually exclusive.\n    // module.exports has precedence.\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports.Base64 = global.Base64;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], function(){ return global.Base64 });\n    }\n    // that's it!\n    return {Base64: global.Base64}\n}));\n\n","var autoAdjustOverflow = {\n  adjustX: 1,\n  adjustY: 1\n};\nvar targetOffset = [0, 0];\nexport var placements = {\n  left: {\n    points: ['cr', 'cl'],\n    overflow: autoAdjustOverflow,\n    offset: [-4, 0],\n    targetOffset: targetOffset\n  },\n  right: {\n    points: ['cl', 'cr'],\n    overflow: autoAdjustOverflow,\n    offset: [4, 0],\n    targetOffset: targetOffset\n  },\n  top: {\n    points: ['bc', 'tc'],\n    overflow: autoAdjustOverflow,\n    offset: [0, -4],\n    targetOffset: targetOffset\n  },\n  bottom: {\n    points: ['tc', 'bc'],\n    overflow: autoAdjustOverflow,\n    offset: [0, 4],\n    targetOffset: targetOffset\n  },\n  topLeft: {\n    points: ['bl', 'tl'],\n    overflow: autoAdjustOverflow,\n    offset: [0, -4],\n    targetOffset: targetOffset\n  },\n  leftTop: {\n    points: ['tr', 'tl'],\n    overflow: autoAdjustOverflow,\n    offset: [-4, 0],\n    targetOffset: targetOffset\n  },\n  topRight: {\n    points: ['br', 'tr'],\n    overflow: autoAdjustOverflow,\n    offset: [0, -4],\n    targetOffset: targetOffset\n  },\n  rightTop: {\n    points: ['tl', 'tr'],\n    overflow: autoAdjustOverflow,\n    offset: [4, 0],\n    targetOffset: targetOffset\n  },\n  bottomRight: {\n    points: ['tr', 'br'],\n    overflow: autoAdjustOverflow,\n    offset: [0, 4],\n    targetOffset: targetOffset\n  },\n  rightBottom: {\n    points: ['bl', 'br'],\n    overflow: autoAdjustOverflow,\n    offset: [4, 0],\n    targetOffset: targetOffset\n  },\n  bottomLeft: {\n    points: ['tl', 'bl'],\n    overflow: autoAdjustOverflow,\n    offset: [0, 4],\n    targetOffset: targetOffset\n  },\n  leftBottom: {\n    points: ['br', 'bl'],\n    overflow: autoAdjustOverflow,\n    offset: [-4, 0],\n    targetOffset: targetOffset\n  }\n};\nexport default placements;","import React from 'react';\n\nvar Content = function Content(props) {\n  var overlay = props.overlay,\n      prefixCls = props.prefixCls,\n      id = props.id,\n      overlayInnerStyle = props.overlayInnerStyle;\n  return React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-inner\"),\n    id: id,\n    role: \"tooltip\",\n    style: overlayInnerStyle\n  }, typeof overlay === 'function' ? overlay() : overlay);\n};\n\nexport default Content;","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useRef, useImperativeHandle, forwardRef } from 'react';\nimport Trigger from 'rc-trigger';\nimport { placements } from './placements';\nimport Content from './Content';\n\nvar Tooltip = function Tooltip(props, ref) {\n  var overlayClassName = props.overlayClassName,\n      _props$trigger = props.trigger,\n      trigger = _props$trigger === void 0 ? ['hover'] : _props$trigger,\n      _props$mouseEnterDela = props.mouseEnterDelay,\n      mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0 : _props$mouseEnterDela,\n      _props$mouseLeaveDela = props.mouseLeaveDelay,\n      mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela,\n      overlayStyle = props.overlayStyle,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-tooltip' : _props$prefixCls,\n      children = props.children,\n      onVisibleChange = props.onVisibleChange,\n      afterVisibleChange = props.afterVisibleChange,\n      transitionName = props.transitionName,\n      animation = props.animation,\n      _props$placement = props.placement,\n      placement = _props$placement === void 0 ? 'right' : _props$placement,\n      _props$align = props.align,\n      align = _props$align === void 0 ? {} : _props$align,\n      _props$destroyTooltip = props.destroyTooltipOnHide,\n      destroyTooltipOnHide = _props$destroyTooltip === void 0 ? false : _props$destroyTooltip,\n      defaultVisible = props.defaultVisible,\n      getTooltipContainer = props.getTooltipContainer,\n      overlayInnerStyle = props.overlayInnerStyle,\n      restProps = _objectWithoutProperties(props, [\"overlayClassName\", \"trigger\", \"mouseEnterDelay\", \"mouseLeaveDelay\", \"overlayStyle\", \"prefixCls\", \"children\", \"onVisibleChange\", \"afterVisibleChange\", \"transitionName\", \"animation\", \"placement\", \"align\", \"destroyTooltipOnHide\", \"defaultVisible\", \"getTooltipContainer\", \"overlayInnerStyle\"]);\n\n  var domRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return domRef.current;\n  });\n\n  var extraProps = _objectSpread({}, restProps);\n\n  if ('visible' in props) {\n    extraProps.popupVisible = props.visible;\n  }\n\n  var getPopupElement = function getPopupElement() {\n    var _props$arrowContent = props.arrowContent,\n        arrowContent = _props$arrowContent === void 0 ? null : _props$arrowContent,\n        overlay = props.overlay,\n        id = props.id;\n    return [React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-arrow\"),\n      key: \"arrow\"\n    }, arrowContent), React.createElement(Content, {\n      key: \"content\",\n      prefixCls: prefixCls,\n      id: id,\n      overlay: overlay,\n      overlayInnerStyle: overlayInnerStyle\n    })];\n  };\n\n  var destroyTooltip = false;\n  var autoDestroy = false;\n\n  if (typeof destroyTooltipOnHide === 'boolean') {\n    destroyTooltip = destroyTooltipOnHide;\n  } else if (destroyTooltipOnHide && _typeof(destroyTooltipOnHide) === 'object') {\n    var keepParent = destroyTooltipOnHide.keepParent;\n    destroyTooltip = keepParent === true;\n    autoDestroy = keepParent === false;\n  }\n\n  return React.createElement(Trigger, Object.assign({\n    popupClassName: overlayClassName,\n    prefixCls: prefixCls,\n    popup: getPopupElement,\n    action: trigger,\n    builtinPlacements: placements,\n    popupPlacement: placement,\n    ref: domRef,\n    popupAlign: align,\n    getPopupContainer: getTooltipContainer,\n    onPopupVisibleChange: onVisibleChange,\n    afterPopupVisibleChange: afterVisibleChange,\n    popupTransitionName: transitionName,\n    popupAnimation: animation,\n    defaultPopupVisible: defaultVisible,\n    destroyPopupOnHide: destroyTooltip,\n    autoDestroy: autoDestroy,\n    mouseLeaveDelay: mouseLeaveDelay,\n    popupStyle: overlayStyle,\n    mouseEnterDelay: mouseEnterDelay\n  }, extraProps), children);\n};\n\nexport default forwardRef(Tooltip);","import Tooltip from './Tooltip';\nexport default Tooltip;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { placements } from \"rc-tooltip/es/placements\";\nvar autoAdjustOverflowEnabled = {\n  adjustX: 1,\n  adjustY: 1\n};\nvar autoAdjustOverflowDisabled = {\n  adjustX: 0,\n  adjustY: 0\n};\nvar targetOffset = [0, 0];\nexport function getOverflowOptions(autoAdjustOverflow) {\n  if (typeof autoAdjustOverflow === 'boolean') {\n    return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;\n  }\n\n  return _extends(_extends({}, autoAdjustOverflowDisabled), autoAdjustOverflow);\n}\nexport default function getPlacements(config) {\n  var _config$arrowWidth = config.arrowWidth,\n      arrowWidth = _config$arrowWidth === void 0 ? 5 : _config$arrowWidth,\n      _config$horizontalArr = config.horizontalArrowShift,\n      horizontalArrowShift = _config$horizontalArr === void 0 ? 16 : _config$horizontalArr,\n      _config$verticalArrow = config.verticalArrowShift,\n      verticalArrowShift = _config$verticalArrow === void 0 ? 8 : _config$verticalArrow,\n      autoAdjustOverflow = config.autoAdjustOverflow;\n  var placementMap = {\n    left: {\n      points: ['cr', 'cl'],\n      offset: [-4, 0]\n    },\n    right: {\n      points: ['cl', 'cr'],\n      offset: [4, 0]\n    },\n    top: {\n      points: ['bc', 'tc'],\n      offset: [0, -4]\n    },\n    bottom: {\n      points: ['tc', 'bc'],\n      offset: [0, 4]\n    },\n    topLeft: {\n      points: ['bl', 'tc'],\n      offset: [-(horizontalArrowShift + arrowWidth), -4]\n    },\n    leftTop: {\n      points: ['tr', 'cl'],\n      offset: [-4, -(verticalArrowShift + arrowWidth)]\n    },\n    topRight: {\n      points: ['br', 'tc'],\n      offset: [horizontalArrowShift + arrowWidth, -4]\n    },\n    rightTop: {\n      points: ['tl', 'cr'],\n      offset: [4, -(verticalArrowShift + arrowWidth)]\n    },\n    bottomRight: {\n      points: ['tr', 'bc'],\n      offset: [horizontalArrowShift + arrowWidth, 4]\n    },\n    rightBottom: {\n      points: ['bl', 'cr'],\n      offset: [4, verticalArrowShift + arrowWidth]\n    },\n    bottomLeft: {\n      points: ['tl', 'bc'],\n      offset: [-(horizontalArrowShift + arrowWidth), 4]\n    },\n    leftBottom: {\n      points: ['br', 'cl'],\n      offset: [-4, verticalArrowShift + arrowWidth]\n    }\n  };\n  Object.keys(placementMap).forEach(function (key) {\n    placementMap[key] = config.arrowPointAtCenter ? _extends(_extends({}, placementMap[key]), {\n      overflow: getOverflowOptions(autoAdjustOverflow),\n      targetOffset: targetOffset\n    }) : _extends(_extends({}, placements[key]), {\n      overflow: getOverflowOptions(autoAdjustOverflow)\n    });\n    placementMap[key].ignoreShake = true;\n  });\n  return placementMap;\n}","import { tuple } from './type';\nexport var PresetStatusColorTypes = tuple('success', 'processing', 'error', 'default', 'warning'); // eslint-disable-next-line import/prefer-default-export\n\nexport var PresetColorTypes = tuple('pink', 'red', 'yellow', 'orange', 'cyan', 'green', 'blue', 'purple', 'geekblue', 'magenta', 'volcano', 'gold', 'lime');","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from 'react';\nimport RcTooltip from 'rc-tooltip';\nimport classNames from 'classnames';\nimport getPlacements from './placements';\nimport { cloneElement, isValidElement } from '../_util/reactNode';\nimport { ConfigContext } from '../config-provider';\nimport { PresetColorTypes } from '../_util/colors';\n\nvar splitObject = function splitObject(obj, keys) {\n  var picked = {};\n\n  var omitted = _extends({}, obj);\n\n  keys.forEach(function (key) {\n    if (obj && key in obj) {\n      picked[key] = obj[key];\n      delete omitted[key];\n    }\n  });\n  return {\n    picked: picked,\n    omitted: omitted\n  };\n};\n\nvar PresetColorRegex = new RegExp(\"^(\".concat(PresetColorTypes.join('|'), \")(-inverse)?$\")); // Fix Tooltip won't hide at disabled button\n// mouse events don't trigger at disabled button in Chrome\n// https://github.com/react-component/tooltip/issues/18\n\nfunction getDisabledCompatibleChildren(element, prefixCls) {\n  var elementType = element.type;\n\n  if ((elementType.__ANT_BUTTON === true || elementType.__ANT_SWITCH === true || elementType.__ANT_CHECKBOX === true || element.type === 'button') && element.props.disabled) {\n    // Pick some layout related style properties up to span\n    // Prevent layout bugs like https://github.com/ant-design/ant-design/issues/5254\n    var _splitObject = splitObject(element.props.style, ['position', 'left', 'right', 'top', 'bottom', 'float', 'display', 'zIndex']),\n        picked = _splitObject.picked,\n        omitted = _splitObject.omitted;\n\n    var spanStyle = _extends(_extends({\n      display: 'inline-block'\n    }, picked), {\n      cursor: 'not-allowed',\n      width: element.props.block ? '100%' : null\n    });\n\n    var buttonStyle = _extends(_extends({}, omitted), {\n      pointerEvents: 'none'\n    });\n\n    var child = cloneElement(element, {\n      style: buttonStyle,\n      className: null\n    });\n    return /*#__PURE__*/React.createElement(\"span\", {\n      style: spanStyle,\n      className: classNames(element.props.className, \"\".concat(prefixCls, \"-disabled-compatible-wrapper\"))\n    }, child);\n  }\n\n  return element;\n}\n\nvar Tooltip = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames2;\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getContextPopupContainer = _React$useContext.getPopupContainer,\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var _React$useState = React.useState(!!props.visible || !!props.defaultVisible),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  React.useEffect(function () {\n    if ('visible' in props) {\n      setVisible(props.visible);\n    }\n  }, [props.visible]);\n\n  var isNoTitle = function isNoTitle() {\n    var title = props.title,\n        overlay = props.overlay;\n    return !title && !overlay && title !== 0; // overlay for old version compatibility\n  };\n\n  var onVisibleChange = function onVisibleChange(vis) {\n    if (!('visible' in props)) {\n      setVisible(isNoTitle() ? false : vis);\n    }\n\n    if (props.onVisibleChange && !isNoTitle()) {\n      props.onVisibleChange(vis);\n    }\n  };\n\n  var getTooltipPlacements = function getTooltipPlacements() {\n    var builtinPlacements = props.builtinPlacements,\n        arrowPointAtCenter = props.arrowPointAtCenter,\n        autoAdjustOverflow = props.autoAdjustOverflow;\n    return builtinPlacements || getPlacements({\n      arrowPointAtCenter: arrowPointAtCenter,\n      autoAdjustOverflow: autoAdjustOverflow\n    });\n  }; // 动态设置动画点\n\n\n  var onPopupAlign = function onPopupAlign(domNode, align) {\n    var placements = getTooltipPlacements(); // 当前返回的位置\n\n    var placement = Object.keys(placements).filter(function (key) {\n      return placements[key].points[0] === align.points[0] && placements[key].points[1] === align.points[1];\n    })[0];\n\n    if (!placement) {\n      return;\n    } // 根据当前坐标设置动画点\n\n\n    var rect = domNode.getBoundingClientRect();\n    var transformOrigin = {\n      top: '50%',\n      left: '50%'\n    };\n\n    if (placement.indexOf('top') >= 0 || placement.indexOf('Bottom') >= 0) {\n      transformOrigin.top = \"\".concat(rect.height - align.offset[1], \"px\");\n    } else if (placement.indexOf('Top') >= 0 || placement.indexOf('bottom') >= 0) {\n      transformOrigin.top = \"\".concat(-align.offset[1], \"px\");\n    }\n\n    if (placement.indexOf('left') >= 0 || placement.indexOf('Right') >= 0) {\n      transformOrigin.left = \"\".concat(rect.width - align.offset[0], \"px\");\n    } else if (placement.indexOf('right') >= 0 || placement.indexOf('Left') >= 0) {\n      transformOrigin.left = \"\".concat(-align.offset[0], \"px\");\n    }\n\n    domNode.style.transformOrigin = \"\".concat(transformOrigin.left, \" \").concat(transformOrigin.top);\n  };\n\n  var getOverlay = function getOverlay() {\n    var title = props.title,\n        overlay = props.overlay;\n\n    if (title === 0) {\n      return title;\n    }\n\n    return overlay || title || '';\n  };\n\n  var customizePrefixCls = props.prefixCls,\n      openClassName = props.openClassName,\n      getPopupContainer = props.getPopupContainer,\n      getTooltipContainer = props.getTooltipContainer,\n      overlayClassName = props.overlayClassName,\n      color = props.color,\n      overlayInnerStyle = props.overlayInnerStyle;\n  var children = props.children;\n  var prefixCls = getPrefixCls('tooltip', customizePrefixCls);\n  var tempVisible = visible; // Hide tooltip when there is no title\n\n  if (!('visible' in props) && isNoTitle()) {\n    tempVisible = false;\n  }\n\n  var child = getDisabledCompatibleChildren(isValidElement(children) ? children : /*#__PURE__*/React.createElement(\"span\", null, children), prefixCls);\n  var childProps = child.props;\n  var childCls = classNames(childProps.className, _defineProperty({}, openClassName || \"\".concat(prefixCls, \"-open\"), true));\n  var customOverlayClassName = classNames(overlayClassName, (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-\").concat(color), color && PresetColorRegex.test(color)), _classNames2));\n  var formattedOverlayInnerStyle;\n  var arrowContentStyle;\n\n  if (color && !PresetColorRegex.test(color)) {\n    formattedOverlayInnerStyle = _extends(_extends({}, overlayInnerStyle), {\n      background: color\n    });\n    arrowContentStyle = {\n      background: color\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(RcTooltip, _extends({}, props, {\n    prefixCls: prefixCls,\n    overlayClassName: customOverlayClassName,\n    getTooltipContainer: getPopupContainer || getTooltipContainer || getContextPopupContainer,\n    ref: ref,\n    builtinPlacements: getTooltipPlacements(),\n    overlay: getOverlay(),\n    visible: tempVisible,\n    onVisibleChange: onVisibleChange,\n    onPopupAlign: onPopupAlign,\n    overlayInnerStyle: formattedOverlayInnerStyle,\n    arrowContent: /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-arrow-content\"),\n      style: arrowContentStyle\n    })\n  }), tempVisible ? cloneElement(child, {\n    className: childCls\n  }) : child);\n});\nTooltip.displayName = 'Tooltip';\nTooltip.defaultProps = {\n  placement: 'top',\n  transitionName: 'zoom-big-fast',\n  mouseEnterDelay: 0.1,\n  mouseLeaveDelay: 0.1,\n  arrowPointAtCenter: false,\n  autoAdjustOverflow: true\n};\nexport default Tooltip;","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\n\nvar Notice = /*#__PURE__*/function (_Component) {\n  _inherits(Notice, _Component);\n\n  var _super = _createSuper(Notice);\n\n  function Notice() {\n    var _this;\n\n    _classCallCheck(this, Notice);\n\n    _this = _super.apply(this, arguments);\n    _this.closeTimer = null;\n\n    _this.close = function (e) {\n      if (e) {\n        e.stopPropagation();\n      }\n\n      _this.clearCloseTimer();\n\n      var onClose = _this.props.onClose;\n\n      if (onClose) {\n        onClose();\n      }\n    };\n\n    _this.startCloseTimer = function () {\n      if (_this.props.duration) {\n        _this.closeTimer = window.setTimeout(function () {\n          _this.close();\n        }, _this.props.duration * 1000);\n      }\n    };\n\n    _this.clearCloseTimer = function () {\n      if (_this.closeTimer) {\n        clearTimeout(_this.closeTimer);\n        _this.closeTimer = null;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Notice, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startCloseTimer();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.duration !== prevProps.duration || this.props.update) {\n        this.restartCloseTimer();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearCloseTimer();\n    }\n  }, {\n    key: \"restartCloseTimer\",\n    value: function restartCloseTimer() {\n      this.clearCloseTimer();\n      this.startCloseTimer();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          prefixCls = _this$props.prefixCls,\n          className = _this$props.className,\n          closable = _this$props.closable,\n          closeIcon = _this$props.closeIcon,\n          style = _this$props.style,\n          onClick = _this$props.onClick,\n          children = _this$props.children,\n          holder = _this$props.holder;\n      var componentClass = \"\".concat(prefixCls, \"-notice\");\n      var dataOrAriaAttributeProps = Object.keys(this.props).reduce(function (acc, key) {\n        if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-' || key === 'role') {\n          acc[key] = _this2.props[key];\n        }\n\n        return acc;\n      }, {});\n      var node = React.createElement(\"div\", Object.assign({\n        className: classNames(componentClass, className, _defineProperty({}, \"\".concat(componentClass, \"-closable\"), closable)),\n        style: style,\n        onMouseEnter: this.clearCloseTimer,\n        onMouseLeave: this.startCloseTimer,\n        onClick: onClick\n      }, dataOrAriaAttributeProps), React.createElement(\"div\", {\n        className: \"\".concat(componentClass, \"-content\")\n      }, children), closable ? React.createElement(\"a\", {\n        tabIndex: 0,\n        onClick: this.close,\n        className: \"\".concat(componentClass, \"-close\")\n      }, closeIcon || React.createElement(\"span\", {\n        className: \"\".concat(componentClass, \"-close-x\")\n      })) : null);\n\n      if (holder) {\n        return ReactDOM.createPortal(node, holder);\n      }\n\n      return node;\n    }\n  }]);\n\n  return Notice;\n}(Component);\n\nexport { Notice as default };\nNotice.defaultProps = {\n  onClose: function onClose() {},\n  duration: 1.5,\n  style: {\n    right: '50%'\n  }\n};","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Animate from 'rc-animate';\nimport createChainedFunction from \"rc-util/es/createChainedFunction\";\nimport classnames from 'classnames';\nimport Notice from './Notice';\nimport _useNotification from './useNotification';\nvar seed = 0;\nvar now = Date.now();\n\nfunction getUuid() {\n  var id = seed;\n  seed += 1;\n  return \"rcNotification_\".concat(now, \"_\").concat(id);\n}\n\nvar Notification = /*#__PURE__*/function (_Component) {\n  _inherits(Notification, _Component);\n\n  var _super = _createSuper(Notification);\n\n  function Notification() {\n    var _this;\n\n    _classCallCheck(this, Notification);\n\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      notices: []\n    };\n    _this.hookRefs = new Map();\n\n    _this.add = function (notice, holderCallback) {\n      // eslint-disable-next-line no-param-reassign\n      notice.key = notice.key || getUuid();\n      var key = notice.key;\n      var maxCount = _this.props.maxCount;\n\n      _this.setState(function (previousState) {\n        var notices = previousState.notices;\n        var noticeIndex = notices.map(function (v) {\n          return v.notice.key;\n        }).indexOf(key);\n        var updatedNotices = notices.concat();\n\n        if (noticeIndex !== -1) {\n          updatedNotices.splice(noticeIndex, 1, {\n            notice: notice,\n            holderCallback: holderCallback\n          });\n        } else {\n          if (maxCount && notices.length >= maxCount) {\n            // XXX, use key of first item to update new added (let React to move exsiting\n            // instead of remove and mount). Same key was used before for both a) external\n            // manual control and b) internal react 'key' prop , which is not that good.\n            // eslint-disable-next-line no-param-reassign\n            notice.updateKey = updatedNotices[0].notice.updateKey || updatedNotices[0].notice.key;\n            updatedNotices.shift();\n          }\n\n          updatedNotices.push({\n            notice: notice,\n            holderCallback: holderCallback\n          });\n        }\n\n        return {\n          notices: updatedNotices\n        };\n      });\n    };\n\n    _this.remove = function (key) {\n      _this.setState(function (previousState) {\n        return {\n          notices: previousState.notices.filter(function (_ref) {\n            var notice = _ref.notice;\n            return notice.key !== key;\n          })\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Notification, [{\n    key: \"getTransitionName\",\n    value: function getTransitionName() {\n      var _this$props = this.props,\n          prefixCls = _this$props.prefixCls,\n          animation = _this$props.animation;\n      var transitionName = this.props.transitionName;\n\n      if (!transitionName && animation) {\n        transitionName = \"\".concat(prefixCls, \"-\").concat(animation);\n      }\n\n      return transitionName;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var notices = this.state.notices;\n      var _this$props2 = this.props,\n          prefixCls = _this$props2.prefixCls,\n          className = _this$props2.className,\n          closeIcon = _this$props2.closeIcon,\n          style = _this$props2.style;\n      var noticeNodes = notices.map(function (_ref2, index) {\n        var notice = _ref2.notice,\n            holderCallback = _ref2.holderCallback;\n        var update = Boolean(index === notices.length - 1 && notice.updateKey);\n        var key = notice.updateKey ? notice.updateKey : notice.key;\n        var onClose = createChainedFunction(_this2.remove.bind(_this2, notice.key), notice.onClose);\n\n        var noticeProps = _objectSpread(_objectSpread(_objectSpread({\n          prefixCls: prefixCls,\n          closeIcon: closeIcon\n        }, notice), notice.props), {}, {\n          key: key,\n          update: update,\n          onClose: onClose,\n          onClick: notice.onClick,\n          children: notice.content\n        });\n\n        if (holderCallback) {\n          return React.createElement(\"div\", {\n            key: key,\n            className: \"\".concat(prefixCls, \"-hook-holder\"),\n            ref: function ref(div) {\n              if (typeof key === 'undefined') {\n                return;\n              }\n\n              if (div) {\n                _this2.hookRefs.set(key, div);\n\n                holderCallback(div, noticeProps);\n              } else {\n                _this2.hookRefs.delete(key);\n              }\n            }\n          });\n        }\n\n        return React.createElement(Notice, Object.assign({}, noticeProps));\n      });\n      return React.createElement(\"div\", {\n        className: classnames(prefixCls, className),\n        style: style\n      }, React.createElement(Animate, {\n        transitionName: this.getTransitionName()\n      }, noticeNodes));\n    }\n  }]);\n\n  return Notification;\n}(Component);\n\nNotification.defaultProps = {\n  prefixCls: 'rc-notification',\n  animation: 'fade',\n  style: {\n    top: 65,\n    left: '50%'\n  }\n};\n\nNotification.newInstance = function newNotificationInstance(properties, callback) {\n  var _ref3 = properties || {},\n      getContainer = _ref3.getContainer,\n      props = _objectWithoutProperties(_ref3, [\"getContainer\"]);\n\n  var div = document.createElement('div');\n\n  if (getContainer) {\n    var root = getContainer();\n    root.appendChild(div);\n  } else {\n    document.body.appendChild(div);\n  }\n\n  var called = false;\n\n  function ref(notification) {\n    if (called) {\n      return;\n    }\n\n    called = true;\n    callback({\n      notice: function notice(noticeProps) {\n        notification.add(noticeProps);\n      },\n      removeNotice: function removeNotice(key) {\n        notification.remove(key);\n      },\n      component: notification,\n      destroy: function destroy() {\n        ReactDOM.unmountComponentAtNode(div);\n\n        if (div.parentNode) {\n          div.parentNode.removeChild(div);\n        }\n      },\n      // Hooks\n      useNotification: function useNotification() {\n        return _useNotification(notification);\n      }\n    });\n  } // Only used for test case usage\n\n\n  if (process.env.NODE_ENV === 'test' && properties.TEST_RENDER) {\n    properties.TEST_RENDER(React.createElement(Notification, Object.assign({}, props, {\n      ref: ref\n    })));\n    return;\n  }\n\n  ReactDOM.render(React.createElement(Notification, Object.assign({}, props, {\n    ref: ref\n  })), div);\n};\n\nexport default Notification;","import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport Notice from './Notice';\nexport default function useNotification(notificationInstance) {\n  var createdRef = React.useRef({});\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      elements = _React$useState2[0],\n      setElements = _React$useState2[1];\n\n  function notify(noticeProps) {\n    notificationInstance.add(noticeProps, function (div, props) {\n      var key = props.key;\n\n      if (div && !createdRef.current[key]) {\n        var noticeEle = React.createElement(Notice, Object.assign({}, props, {\n          holder: div\n        }));\n        createdRef.current[key] = noticeEle;\n        setElements(function (originElements) {\n          return [].concat(_toConsumableArray(originElements), [noticeEle]);\n        });\n      }\n    });\n  }\n\n  return [notify, React.createElement(React.Fragment, null, elements)];\n}","import Notification from './Notification';\nexport default Notification;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Notification from 'rc-notification';\nimport LoadingOutlined from '@ant-design/icons/LoadingOutlined';\nimport ExclamationCircleFilled from '@ant-design/icons/ExclamationCircleFilled';\nimport CloseCircleFilled from '@ant-design/icons/CloseCircleFilled';\nimport CheckCircleFilled from '@ant-design/icons/CheckCircleFilled';\nimport InfoCircleFilled from '@ant-design/icons/InfoCircleFilled';\nvar defaultDuration = 3;\nvar defaultTop;\nvar messageInstance;\nvar key = 1;\nvar prefixCls = 'ant-message';\nvar transitionName = 'move-up';\nvar getContainer;\nvar maxCount;\nvar rtl = false;\n\nfunction getMessageInstance(callback) {\n  if (messageInstance) {\n    callback(messageInstance);\n    return;\n  }\n\n  Notification.newInstance({\n    prefixCls: prefixCls,\n    transitionName: transitionName,\n    style: {\n      top: defaultTop\n    },\n    getContainer: getContainer,\n    maxCount: maxCount\n  }, function (instance) {\n    if (messageInstance) {\n      callback(messageInstance);\n      return;\n    }\n\n    messageInstance = instance;\n    callback(instance);\n  });\n}\n\nvar iconMap = {\n  info: InfoCircleFilled,\n  success: CheckCircleFilled,\n  error: CloseCircleFilled,\n  warning: ExclamationCircleFilled,\n  loading: LoadingOutlined\n};\n\nfunction notice(args) {\n  var _classNames;\n\n  var duration = args.duration !== undefined ? args.duration : defaultDuration;\n  var IconComponent = iconMap[args.type];\n  var messageClass = classNames(\"\".concat(prefixCls, \"-custom-content\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(args.type), args.type), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), rtl === true), _classNames));\n  var target = args.key || key++;\n  var closePromise = new Promise(function (resolve) {\n    var callback = function callback() {\n      if (typeof args.onClose === 'function') {\n        args.onClose();\n      }\n\n      return resolve(true);\n    };\n\n    getMessageInstance(function (instance) {\n      instance.notice({\n        key: target,\n        duration: duration,\n        style: args.style || {},\n        className: args.className,\n        content: /*#__PURE__*/React.createElement(\"div\", {\n          className: messageClass\n        }, args.icon || IconComponent && /*#__PURE__*/React.createElement(IconComponent, null), /*#__PURE__*/React.createElement(\"span\", null, args.content)),\n        onClose: callback\n      });\n    });\n  });\n\n  var result = function result() {\n    if (messageInstance) {\n      messageInstance.removeNotice(target);\n    }\n  };\n\n  result.then = function (filled, rejected) {\n    return closePromise.then(filled, rejected);\n  };\n\n  result.promise = closePromise;\n  return result;\n}\n\nfunction isArgsProps(content) {\n  return Object.prototype.toString.call(content) === '[object Object]' && !!content.content;\n}\n\nvar api = {\n  open: notice,\n  config: function config(options) {\n    if (options.top !== undefined) {\n      defaultTop = options.top;\n      messageInstance = null; // delete messageInstance for new defaultTop\n    }\n\n    if (options.duration !== undefined) {\n      defaultDuration = options.duration;\n    }\n\n    if (options.prefixCls !== undefined) {\n      prefixCls = options.prefixCls;\n    }\n\n    if (options.getContainer !== undefined) {\n      getContainer = options.getContainer;\n    }\n\n    if (options.transitionName !== undefined) {\n      transitionName = options.transitionName;\n      messageInstance = null; // delete messageInstance for new transitionName\n    }\n\n    if (options.maxCount !== undefined) {\n      maxCount = options.maxCount;\n      messageInstance = null;\n    }\n\n    if (options.rtl !== undefined) {\n      rtl = options.rtl;\n    }\n  },\n  destroy: function destroy() {\n    if (messageInstance) {\n      messageInstance.destroy();\n      messageInstance = null;\n    }\n  }\n};\n['success', 'info', 'warning', 'error', 'loading'].forEach(function (type) {\n  api[type] = function (content, duration, onClose) {\n    if (isArgsProps(content)) {\n      return api.open(_extends(_extends({}, content), {\n        type: type\n      }));\n    }\n\n    if (typeof duration === 'function') {\n      onClose = duration;\n      duration = undefined;\n    }\n\n    return api.open({\n      content: content,\n      duration: duration,\n      type: type,\n      onClose: onClose\n    });\n  };\n});\napi.warn = api.warning;\nexport default api;","export var getRenderPropValue = function getRenderPropValue(propValue) {\n  if (!propValue) {\n    return null;\n  }\n\n  var isRenderFunction = typeof propValue === 'function';\n\n  if (isRenderFunction) {\n    return propValue();\n  }\n\n  return propValue;\n};","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport Tooltip from '../tooltip';\nimport { ConfigContext } from '../config-provider';\nimport { getRenderPropValue } from '../_util/getRenderPropValue';\nvar Popover = /*#__PURE__*/React.forwardRef(function (_a, ref) {\n  var customizePrefixCls = _a.prefixCls,\n      title = _a.title,\n      content = _a.content,\n      otherProps = __rest(_a, [\"prefixCls\", \"title\", \"content\"]);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls;\n\n  var getOverlay = function getOverlay(prefixCls) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, title && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-title\")\n    }, getRenderPropValue(title)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-inner-content\")\n    }, getRenderPropValue(content)));\n  };\n\n  var prefixCls = getPrefixCls('popover', customizePrefixCls);\n  return /*#__PURE__*/React.createElement(Tooltip, _extends({}, otherProps, {\n    prefixCls: prefixCls,\n    ref: ref,\n    overlay: getOverlay(prefixCls)\n  }));\n});\nPopover.displayName = 'Popover';\nPopover.defaultProps = {\n  placement: 'top',\n  transitionName: 'zoom-big',\n  trigger: 'hover',\n  mouseEnterDelay: 0.1,\n  mouseLeaveDelay: 0.1,\n  overlayStyle: {}\n};\nexport default Popover;"],"sourceRoot":""}